#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3562;
float _3563;
float _3564;
float _3565;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _282 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _298 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _312 = ((_282.x * 4.55000019073486328125) * _298.x) * cbMtdParam._m0[9u].x;
    float _315 = ((_282.y * 4.55000019073486328125) * _298.y) * cbMtdParam._m0[9u].y;
    float _318 = ((_282.z * 4.55000019073486328125) * _298.z) * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_254.x * cbMtdParam._m0[10u].x) - _312)) + _312;
    float _326 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_254.y * cbMtdParam._m0[10u].y) - _315)) + _315;
    float _327 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_254.z * cbMtdParam._m0[10u].z) - _318)) + _318;
    vec4 _339 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = _339.z;
    float _349 = exp2(log2(_343 * 22.0) * 260.0);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    vec4 _370 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _382 = ((((isnan(1.0) ? _350 : (isnan(_350) ? 1.0 : min(_350, 1.0))) * (_343 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _370.z);
    float _397 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3584 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _398 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _406 = (((_398 * _398) * (3.0 - (_398 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _418 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _426 = (_339.x * 2.0) + (-1.0);
    float _427 = (_339.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_426, _427), vec2(_426, _427));
    float _3595 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    float _440 = (cbMtdParam._m0[12u].y * ((_370.x * 2.0) + (-1.0))) + _426;
    float _441 = (cbMtdParam._m0[12u].y * ((_370.y * 2.0) + (-1.0))) + _427;
    float _444 = fma(_433, _225 * NORMAL.x, fma(_441, _232 * TANGENT.x, (_218 * _210) * _440));
    float _447 = fma(_433, _225 * NORMAL.y, fma(_441, _232 * TANGENT.y, (_218 * _211) * _440));
    float _450 = fma(_433, _225 * NORMAL.z, fma(_441, _232 * TANGENT.z, (_218 * _212) * _440));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    float _3606 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _458 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3628 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3639 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    vec4 _542 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _544 = _542.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _761 = sqrt(((_528 * _528) + (_529 * _529)) + (_530 * _530));
        float _767 = (cbMatDynParam._m0[5u].x * _761) + cbMatDynParam._m0[5u].y;
        float _3650 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _772 = (cbMatDynParam._m0[5u].z * _761) + cbMatDynParam._m0[5u].w;
        float _3661 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) - _768)) + _768) < ((_544 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _559 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _561 = _559.w;
    float _580 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _583 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _586 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    vec4 _588 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = (((_588.y - _458) + (_588.w * _458)) * cbMtdParam._m0[3u].x) + _458;
    uint _612 = uint(roundEven(NORMAL.w)) * 13u;
    uint _613 = _612 + 9u;
    uint _614 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3672 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    vec4 _626 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _631 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _637 = cbMtdParam._m0[3u].x * _631.x;
    float _650 = (cbMtdParam._m0[3u].x * (((_623 * _561) - _623) + _626.x)) + _623;
    float _651 = (cbMtdParam._m0[3u].x * (((_624 * _561) - _624) + _626.y)) + _624;
    float _652 = (cbMtdParam._m0[3u].x * (((_625 * _561) - _625) + _626.z)) + _625;
    float _653 = 1.0 - _637;
    float _654 = _650 * _653;
    float _655 = _651 * _653;
    float _656 = _652 * _653;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _637;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _637;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _637;
    float _664 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _679 = _676.x * TEXCOORD_5.w;
    float _680 = dot(vec3(_455, _456, _457), vec3(_535, _536, _537));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _455) - _535;
    float _688 = (_683 * _456) - _536;
    float _689 = (_683 * _457) - _537;
    float _693 = abs(dot(vec3(_535, _536, _537), vec3(_455, _456, _457)));
    float _3705 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_599);
    float _707 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _713 = (1.0 - _707) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _695;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _810 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _814 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _837 = _742 + _455;
        float _838 = _746 + _456;
        float _839 = _750 + _457;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _806;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _810;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _814;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_455, _456, _457), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3753 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_455, _456, _457), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3786 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_455, _456, _457), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3819 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1127 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1131 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1154 = _742 + _455;
        float _1155 = _746 + _456;
        float _1156 = _750 + _457;
        float _1166 = fma(_1156, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1154)) - _1123;
        float _1167 = fma(_1156, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1154)) - _1127;
        float _1168 = fma(_1156, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1154)) - _1131;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1123 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1127 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[35u].z) + ((((((_1131 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1222 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1189.x + (-0.5));
        float _1224 = _1222 * (_1189.y + (-0.5));
        float _1225 = _1222 * (_1189.z + (-0.5));
        float _1232 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1196.x + (-0.5));
        float _1234 = _1232 * (_1196.y + (-0.5));
        float _1235 = _1232 * (_1196.z + (-0.5));
        float _1242 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1203.x + (-0.5));
        float _1244 = _1242 * (_1203.y + (-0.5));
        float _1245 = _1242 * (_1203.z + (-0.5));
        float _1252 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1210.x + (-0.5));
        float _1254 = _1252 * (_1210.y + (-0.5));
        float _1255 = _1252 * (_1210.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_455, _456, _457), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3882 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1286 + 1.0))) + _1291) * _1256;
        float _1301 = _1224 * 0.5;
        float _1302 = _1234 * 0.5;
        float _1303 = _1244 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_455, _456, _457), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3915 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1328 + 1.0))) + _1333) * _1257;
        float _1343 = _1225 * 0.5;
        float _1344 = _1235 * 0.5;
        float _1345 = _1245 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_455, _456, _457), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3948 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1370 + 1.0))) + _1375) * _1258;
        _1392 = _1225;
        _1393 = _1224;
        _1394 = _1223;
        _1395 = _1235;
        _1396 = _1234;
        _1397 = _1233;
        _1398 = _1245;
        _1399 = _1244;
        _1400 = _1243;
        _1401 = _1258;
        _1402 = _1257;
        _1403 = _1256;
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = _1080;
        _1404 = 0.0;
        _1405 = 0.0;
        _1406 = 0.0;
    }
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1093)) + _1093;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1439 = fma(_1418, cbSceneParam._m0[89u].z, fma(_1417, cbSceneParam._m0[89u].y, _1416 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1418, cbSceneParam._m0[90u].z, fma(_1417, cbSceneParam._m0[90u].y, _1416 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1418, cbSceneParam._m0[91u].z, fma(_1417, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1416));
    float _1460 = _687 * 0.5;
    float _1461 = _688 * 0.5;
    float _1462 = _689 * 0.5;
    float _1463 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1466 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1469 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1503;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1476 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1480 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1484 = dot(vec4(_1460, _1461, _1462, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1491 = dot(vec4(cbModelParam._m0[39u]), vec4(_1460, _1461, _1462, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1514;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1505 = dot(vec4(cbModelParam._m0[40u]), vec4(_1460, _1461, _1462, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1518 = (_1514 * cbModelParam._m0[1u].x) + (_1503 * (1.0 - cbModelParam._m0[1u].x));
    float _1528 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _599);
    float _1529 = isnan(_1528) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1528 : min(cbModelParam._m0[25u].z, _1528));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1591 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1594 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1622 = frontier_phi_17_15_ladder;
        }
        float _1848;
        if (_1591 > 0.0)
        {
            _1848 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1848 = frontier_phi_26_22_ladder;
        }
        float _2105;
        if (_1594 > 0.0)
        {
            _2105 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2105 = frontier_phi_38_33_ladder;
        }
        float _2107 = isnan(_1848) ? _1622 : (isnan(_1622) ? _1848 : min(_1622, _1848));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1588) + _1577;
        float _2113 = (_2108 * _1591) + _1581;
        float _2114 = (_2108 * _1594) + _1585;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1529);
            frontier_phi_16_38_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_16_38_ladder_2;
        _1612 = frontier_phi_16_38_ladder_1;
        _1614 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1529);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _599);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1689 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1692 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1853;
        if (_1686 > 0.0)
        {
            _1853 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1853 = frontier_phi_28_24_ladder;
        }
        float _2132;
        if (_1689 > 0.0)
        {
            _2132 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2132 = frontier_phi_40_35_ladder;
        }
        float _2345;
        if (_1692 > 0.0)
        {
            _2345 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2345 = frontier_phi_49_46_ladder;
        }
        float _2347 = isnan(_2132) ? _1853 : (isnan(_1853) ? _2132 : min(_1853, _2132));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1686) + _1675;
        float _2353 = (_2348 * _1689) + _1679;
        float _2354 = (_2348 * _1692) + _1683;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2354, cbModelParam._m0[17u].z, fma(_2353, cbModelParam._m0[17u].y, _2352 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2354, cbModelParam._m0[18u].z, fma(_2353, cbModelParam._m0[18u].y, _2352 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2354, cbModelParam._m0[19u].z, fma(_2353, cbModelParam._m0[19u].y, _2352 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_25_49_ladder = _2615.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2615.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2615.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_25_49_ladder_2;
        _1713 = frontier_phi_25_49_ladder_1;
        _1715 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1619);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1728 = (((_713 * _664) + _714) * _679) * ((cbModelParam._m0[1u].w * (_1711 - _1610)) + _1610);
    float _1730 = (((_713 * _666) + _714) * _679) * ((cbModelParam._m0[1u].w * (_1713 - _1612)) + _1612);
    float _1732 = (((_713 * _667) + _714) * _679) * ((cbModelParam._m0[1u].w * (_1715 - _1614)) + _1614);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    vec4 _1749 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_556, _557));
    float _1751 = _1749.w;
    float _1763 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1751);
    float _1764 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1751);
    float _1765 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1751);
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_612 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _679 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1807 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1811 = _1771 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_455, _456, _457));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_455, _456, _457));
    float _4084 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _4095 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1788].x * _1794) * _1832) + (((cbLight._m0[_1798].x * _1763) * _1807) * _1830);
    float _1840 = ((_1794 * cbLight._m0[_1788].y) * _1832) + (((cbLight._m0[_1798].y * _1764) * _1807) * _1830);
    float _1841 = ((_1794 * cbLight._m0[_1788].z) * _1832) + (((cbLight._m0[_1798].z * _1765) * _1807) * _1830);
    uvec4 _1845 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1847 = _1845.x == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1847)
    {
        _1858 = _1839;
        _1860 = _1840;
        _1862 = _1841;
    }
    else
    {
        uint _1866 = _1771 + 6u;
        float _1882 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _4106 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1885 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1858 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1839;
        _1860 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1840;
        _1862 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1841;
    }
    bool _1865 = _1845.y == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1865)
    {
        _1903 = _1858;
        _1905 = _1860;
        _1907 = _1862;
    }
    else
    {
        uint _2076 = _1771 + 7u;
        float _2092 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4122 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2095 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1903 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1858;
        _1905 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1860;
        _1907 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1862;
    }
    uint _1910 = _1771 + 8u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _599) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1771].x + _535;
    float _1926 = cbLight._m0[_1771].y + _536;
    float _1927 = cbLight._m0[_1771].z + _537;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1771].xyz));
    float _4138 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1939 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1940 = dot(vec3(_455, _456, _457), vec3(_1932, _1933, _1934));
    float _4160 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1932, _1933, _1934));
    float _4171 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1924 * _1924;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1960 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
    float _1961 = 0.959999978542327880859375 - _661;
    float _1963 = 0.959999978542327880859375 - _662;
    float _1964 = 0.959999978542327880859375 - _663;
    float _1971 = 1.0 - _1924;
    float _1982 = (0.5 / (((_1939 * ((_1938 * _1971) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _1971) + _1924) * _1938))) * _1938;
    float _4182 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1984 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    uint _1998 = _1771 + 9u;
    float _2009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _599) * 0.949999988079071044921875);
    float _2010 = _2009 * _2009;
    float _2011 = cbLight._m0[_1811].x + _535;
    float _2012 = cbLight._m0[_1811].y + _536;
    float _2013 = cbLight._m0[_1811].z + _537;
    float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
    float _2018 = _2017 * _2011;
    float _2019 = _2017 * _2012;
    float _2020 = _2017 * _2013;
    float _2021 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1811].xyz));
    float _4193 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2025 = dot(vec3(_455, _456, _457), vec3(_2018, _2019, _2020));
    float _4204 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2018, _2019, _2020));
    float _4215 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2010 * _2010;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2044 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
    float _2051 = 1.0 - _2010;
    float _2061 = (0.5 / (((_1939 * ((_2024 * _2051) + _2010)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2051) + _2010) * _2024))) * _2024;
    float _4226 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    float _2073 = (((((_2044 * _1961) + _664) * cbLight._m0[_1998].x) * _2063) * _1794) + ((((cbLight._m0[_1910].x * _1763) * ((_1960 * _1961) + _664)) * _1984) * _1807);
    float _2074 = (((((_2044 * _1963) + _666) * cbLight._m0[_1998].y) * _2063) * _1794) + ((((cbLight._m0[_1910].y * _1764) * ((_1960 * _1963) + _666)) * _1984) * _1807);
    float _2075 = (((((_2044 * _1964) + _667) * cbLight._m0[_1998].z) * _2063) * _1794) + ((((cbLight._m0[_1910].z * _1765) * ((_1960 * _1964) + _667)) * _1984) * _1807);
    float _2137;
    float _2139;
    float _2141;
    if (_1847)
    {
        _2137 = _2073;
        _2139 = _2074;
        _2141 = _2075;
    }
    else
    {
        uint _2143 = _1771 + 2u;
        uint _2147 = _1771 + 10u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _599) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _535;
        float _2164 = cbLight._m0[_2143].y + _536;
        float _2165 = cbLight._m0[_2143].z + _537;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2143].xyz));
        float _4237 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2177 = dot(vec3(_455, _456, _457), vec3(_2170, _2171, _2172));
        float _4248 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4259 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0);
        float _2203 = 1.0 - _2162;
        float _2213 = (0.5 / (((_1939 * ((_2176 * _2203) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2203) + _2162) * _2176))) * _2176;
        float _4270 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2137 = (((((_2196 * _1961) + _664) * cbLight._m0[_2147].x) * _2215) * _2216) + _2073;
        _2139 = (((((_2196 * _1963) + _666) * cbLight._m0[_2147].y) * _2215) * _2216) + _2074;
        _2141 = (((((_2196 * _1964) + _667) * cbLight._m0[_2147].z) * _2215) * _2216) + _2075;
    }
    float _2251;
    float _2253;
    float _2255;
    if (_1865)
    {
        _2251 = _2137;
        _2253 = _2139;
        _2255 = _2141;
    }
    else
    {
        uint _2262 = _1771 + 3u;
        uint _2266 = _1771 + 11u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _599) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _535;
        float _2283 = cbLight._m0[_2262].y + _536;
        float _2284 = cbLight._m0[_2262].z + _537;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2262].xyz));
        float _4286 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2296 = dot(vec3(_455, _456, _457), vec3(_2289, _2290, _2291));
        float _4297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4308 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0);
        float _2322 = 1.0 - _2281;
        float _2332 = (0.5 / (((_1939 * ((_2295 * _2322) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2322) + _2281) * _2295))) * _2295;
        float _4319 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2251 = (((((_2315 * _1961) + _664) * cbLight._m0[_2266].x) * _2334) * _2335) + _2137;
        _2253 = (((((_2315 * _1963) + _666) * cbLight._m0[_2266].y) * _2334) * _2335) + _2139;
        _2255 = (((((_2315 * _1964) + _667) * cbLight._m0[_2266].z) * _2334) * _2335) + _2141;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1769.y == 0u)
    {
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2410;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2410;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2410;
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.x;
        uint _2437 = uint((float(_2425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _2426))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _2426)));
        float _2447 = (log2(_2413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2448 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        uint _2451 = uint(isnan(14.0) ? _2448 : (isnan(_2448) ? 14.0 : min(_2448, 14.0)));
        uvec4 _2456 = texelFetch(g_lightClusterGridBuffer, int(((_2451 << 2u) + (_2437 << 6u)) >> 2u));
        uint _2457 = _2456.x;
        uint _2458 = _2425.z;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        if (((((1u << ((_2458 >> 4u) & 15u)) + 4294967295u) & _2457) == 0u) || ((_2458 & 240u) == 0u))
        {
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
        }
        else
        {
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2798)
                {
                    frontier_phi_66_pred = _2782;
                    frontier_phi_66_pred_1 = _2787;
                    frontier_phi_66_pred_2 = _2786;
                    frontier_phi_66_pred_3 = _2785;
                    frontier_phi_66_pred_4 = _2784;
                    frontier_phi_66_pred_5 = _2783;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2797;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2788 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _2411;
                        float _2994 = _2953.y - _2412;
                        float _2995 = _2953.z - _2413;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_580, _583, _586), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4345 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _2411;
                        float _3029 = (-0.0) - _2412;
                        float _3030 = (-0.0) - _2413;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3045 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _695;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_580, _583, _586), vec3(_3035, _3036, _3037));
                        float _4361 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3070 = dot(vec3(_580, _583, _586), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4372 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3013 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3003) + _3079;
                        float _4383 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4394 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3077 * _3077) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2857 = (_3024 * _2972.x) + _2930;
                        _2858 = (_3024 * _2972.y) + _2931;
                        _2859 = (_3024 * _2972.z) + _2932;
                        _2854 = (_3105 * _2989.x) + _2927;
                        _2855 = (_3105 * _2989.y) + _2928;
                        _2856 = (_3105 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_66_pred = _2854;
                    frontier_phi_66_pred_1 = _2859;
                    frontier_phi_66_pred_2 = _2858;
                    frontier_phi_66_pred_3 = _2857;
                    frontier_phi_66_pred_4 = _2856;
                    frontier_phi_66_pred_5 = _2855;
                }
                _2621 = frontier_phi_66_pred;
                _2631 = frontier_phi_66_pred_1;
                _2629 = frontier_phi_66_pred_2;
                _2627 = frontier_phi_66_pred_3;
                _2625 = frontier_phi_66_pred_4;
                _2623 = frontier_phi_66_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2621;
                    _2783 = _2623;
                    _2784 = _2625;
                    _2785 = _2627;
                    _2786 = _2629;
                    _2787 = _2631;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
        }
        uvec4 _2634 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2635 = _2634.z;
        uint _2637 = (_2635 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2637) & _2457) == 0u)
        {
            _2750 = _2620;
            _2752 = _2622;
            _2754 = _2624;
            _2756 = _2626;
            _2758 = _2628;
            _2760 = _2630;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
            float _2776 = _2775 * _2411;
            float _2777 = _2775 * _2412;
            float _2778 = _2775 * _2413;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2637 < ((_2635 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2910 = _2620;
                float _2911 = _2622;
                float _2912 = _2624;
                float _2913 = _2626;
                float _2914 = _2628;
                float _2915 = _2630;
                uint _2916 = _2637;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2926)
                    {
                        frontier_phi_77_pred = _2915;
                        frontier_phi_77_pred_1 = _2914;
                        frontier_phi_77_pred_2 = _2913;
                        frontier_phi_77_pred_3 = _2912;
                        frontier_phi_77_pred_4 = _2911;
                        frontier_phi_77_pred_5 = _2910;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        uint _3138 = _2925;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3149 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3195 = (_3149 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3149 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3149 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3149 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2413, _3259.z, fma(_2412, _3259.y, _3259.x * _2411)) + _3259.w;
                            _3272 = !((fma(_2413, _3240.z, fma(_2412, _3240.y, _3240.x * _2411)) + _3240.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3164.x - _2411;
                                float _3300 = _3164.y - _2412;
                                float _3301 = _3164.z - _2413;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3165 * _3165));
                                float _4405 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3317 = sqrt(_3302) * _3180.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_580, _583, _586))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2413, _3208.z, fma(_2412, _3208.y, _3208.x * _2411)) + _3208.w) / _3271;
                                float _3331 = (fma(_2413, _3224.z, fma(_2412, _3224.y, _3224.x * _2411)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4421 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _695;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2776;
                                float _3361 = _3307 - _2777;
                                float _3362 = _3308 - _2778;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4432 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3374 = dot(vec3(_580, _583, _586), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4443 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_580, _583, _586), vec3(_3306, _3307, _3308))) + _3383;
                                float _4454 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4465 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3337 * _3180.y;
                                frontier_phi_83_pred_1 = _3337 * _3180.x;
                                frontier_phi_83_pred_2 = _3411 * _3192.z;
                                frontier_phi_83_pred_3 = _3411 * _3192.y;
                                frontier_phi_83_pred_4 = _3411 * _3192.x;
                                frontier_phi_83_pred_5 = _3337 * _3180.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_83_pred;
                            _3418 = frontier_phi_83_pred_1;
                            _3417 = frontier_phi_83_pred_2;
                            _3416 = frontier_phi_83_pred_3;
                            _3415 = frontier_phi_83_pred_4;
                            _3420 = frontier_phi_83_pred_5;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3124;
                        frontier_phi_77_pred_1 = _3123;
                        frontier_phi_77_pred_2 = _3122;
                        frontier_phi_77_pred_3 = _3121;
                        frontier_phi_77_pred_4 = _3120;
                        frontier_phi_77_pred_5 = _3119;
                    }
                    _2761 = frontier_phi_77_pred;
                    _2759 = frontier_phi_77_pred_1;
                    _2757 = frontier_phi_77_pred_2;
                    _2755 = frontier_phi_77_pred_3;
                    _2753 = frontier_phi_77_pred_4;
                    _2751 = frontier_phi_77_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2751;
                        _2911 = _2753;
                        _2912 = _2755;
                        _2913 = _2757;
                        _2914 = _2759;
                        _2915 = _2761;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2755;
                frontier_phi_58_59_ladder_1 = _2761;
                frontier_phi_58_59_ladder_2 = _2759;
                frontier_phi_58_59_ladder_3 = _2757;
                frontier_phi_58_59_ladder_4 = _2753;
                frontier_phi_58_59_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_58_59_ladder = _2624;
                frontier_phi_58_59_ladder_1 = _2630;
                frontier_phi_58_59_ladder_2 = _2628;
                frontier_phi_58_59_ladder_3 = _2626;
                frontier_phi_58_59_ladder_4 = _2622;
                frontier_phi_58_59_ladder_5 = _2620;
            }
            _2750 = frontier_phi_58_59_ladder_5;
            _2752 = frontier_phi_58_59_ladder_4;
            _2754 = frontier_phi_58_59_ladder;
            _2756 = frontier_phi_58_59_ladder_3;
            _2758 = frontier_phi_58_59_ladder_2;
            _2760 = frontier_phi_58_59_ladder_1;
        }
        float _2765 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2470 = (_2765 * _2756) + _1903;
        _2472 = (_2765 * _2758) + _1905;
        _2474 = (_2765 * _2760) + _1907;
        _2476 = ((_2750 * _664) * _2765) + _2251;
        _2478 = ((_2752 * _666) * _2765) + _2253;
        _2480 = ((_2754 * _667) * _2765) + _2255;
    }
    else
    {
        _2470 = _1903;
        _2472 = _1905;
        _2474 = _1907;
        _2476 = _2251;
        _2478 = _2253;
        _2480 = _2255;
    }
    uint _2486 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _2495 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _406) * _418.x) * cbInstanceData._m0[_2486].x;
    float _2499 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _406) * _418.y) * cbInstanceData._m0[_2486].y;
    float _2503 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _406) * _418.z) * cbInstanceData._m0[_2486].z;
    vec4 _2511 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2525 = ((((_2495 * _561) - _2495) + _2511.x) * cbMtdParam._m0[3u].x) + _2495;
    float _2526 = ((((_2499 * _561) - _2499) + _2511.y) * cbMtdParam._m0[3u].x) + _2499;
    float _2527 = ((((_2503 * _561) - _2503) + _2511.z) * cbMtdParam._m0[3u].x) + _2503;
    float _4481 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4492 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4503 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2546 = (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2470 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _679))) + ((_2476 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + _2525;
    float _2547 = (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2472 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _679))) + ((_2478 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + _2526;
    float _2548 = (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2474 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _679))) + ((_2480 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1518)) * cbPerFrame._m0[3u].x)) + _2527;
    float _2549 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2557 = cbMtdParam._m0[2u].x * _2525;
    float _2558 = cbMtdParam._m0[2u].y * _2526;
    float _2559 = cbMtdParam._m0[2u].z * _2527;
    float _4529 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2561 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    uint _2562 = _612 + 6u;
    float _2570 = _556 / cbSceneParam._m0[86u].x;
    float _2571 = _557 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2645 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2646 = _2645 / _477;
        float _2657 = _2646 * _528;
        float _2658 = _529 * _2646;
        float _2659 = (-0.0) - _2658;
        float _2661 = _2646 * _530;
        float _2663 = (cbSceneParam._m0[77u].w * _2659) / _2645;
        float _2664 = _2663 + cbSceneParam._m0[79u].w;
        float _2665 = cbSceneParam._m0[79u].w - _2658;
        float _2671 = sqrt(((_2657 * _2657) + (_2658 * _2658)) + (_2661 * _2661));
        float _2674 = (1.0 - (cbSceneParam._m0[77u].w / _2645)) * _2671;
        float _2679 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2681 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2867;
        if (abs((_2659 - _2663) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2867 = ((((_2664 > 0.0) ? exp2(_2679 * _2664) : (2.0 - exp2(_2681 * _2664))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2674;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : max(_2664, _2665));
            float _2813 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : min(_2664, _2665));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2867 = ((abs(_2671 / _2659) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2679 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2679 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2681 * _2822) - exp2(_2681 * _2823)) * _2811))) + (_2674 * cbSceneParam._m0[80u].z);
        }
        vec4 _2869 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2878 = exp2((_2867 * (-1.44269502162933349609375)) * (1.0 - _2869.w));
        float _2879 = log2(_2878);
        float _2895 = log2(_2590);
        _2683 = (exp2(_2895 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].x)) * _2869.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2685 = (exp2(_2895 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].y)) * _2869.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2687 = (exp2(_2895 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].z)) * _2869.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2689 = _2878 * _2590;
    }
    else
    {
        _2683 = _2587;
        _2685 = _2588;
        _2687 = _2589;
        _2689 = _2590;
    }
    bool _2905;
    vec4 _2699;
    vec4 _2721;
    float _2723;
    float _2727;
    float _2728;
    float _2729;
    float _2732;
    float _2735;
    float _2738;
    float _2739;
    bool _2749;
    for (;;)
    {
        _2699 = cbMatDynParam._m0[0u];
        float _2701 = roundEven(_2699.y);
        bool _2702 = _2701 == 3.0;
        float _2703 = log2(_2689);
        float _2707 = exp2(_2703 * cbSceneParam._m0[78u].x);
        float _2708 = exp2(_2703 * cbSceneParam._m0[78u].y);
        float _2709 = exp2(_2703 * cbSceneParam._m0[78u].z);
        float _2710 = _2707 * _2549;
        float _2711 = _2708 * _2550;
        float _2712 = _2709 * _2551;
        float _2719 = _544 + (-0.5);
        _2721 = cbMtdParam._m0[1u];
        _2723 = _2721.y * _2719;
        float _2726 = (_2701 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2727 = _2726 * (_2702 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2683)));
        _2728 = _2726 * (_2702 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2685)));
        _2729 = _2726 * (_2702 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2687)));
        _2732 = ((_2557 * _2561) * _2707) * _2726;
        _2735 = ((_2558 * _2561) * _2708) * _2726;
        _2738 = ((_2559 * _2561) * _2709) * _2726;
        _2739 = _2719 * 0.999000012874603271484375;
        _2749 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2749)
        {
            if ((cbInstanceData._m0[_612 + 7u].x + _2739) < 0.5)
            {
                _2905 = true;
                break;
            }
        }
        uint _2846 = _613 + uint(_2699.w);
        if ((cbInstanceData._m0[_2846].w < 1.0) && ((cbInstanceData._m0[_2846].w + _2739) < 0.5))
        {
            _2905 = true;
            break;
        }
        if ((_2723 + 1.0) < _2721.x)
        {
            _2905 = true;
            break;
        }
        _2905 = false;
        break;
    }
    float _3110;
    if (_2905)
    {
        discard_state = true;
        _3110 = 0.0;
    }
    else
    {
        _3110 = cbInstanceData._m0[_2562].w;
    }
    SV_Target.x = _2727;
    SV_Target.y = _2728;
    SV_Target.z = _2729;
    SV_Target.w = _3110;
    SV_Target_1.x = _2732;
    SV_Target_1.y = _2735;
    SV_Target_1.z = _2738;
    SV_Target_1.w = cbInstanceData._m0[_2562].w;
    discard_exit();
}


