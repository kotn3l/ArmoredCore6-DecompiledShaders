#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1037;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _280 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _296 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _310 = ((_280.x * 4.55000019073486328125) * _296.x) * cbMtdParam._m0[9u].x;
    float _313 = ((_280.y * 4.55000019073486328125) * _296.y) * cbMtdParam._m0[9u].y;
    float _316 = ((_280.z * 4.55000019073486328125) * _296.z) * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_252.x * cbMtdParam._m0[10u].x) - _310)) + _310;
    float _324 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_252.y * cbMtdParam._m0[10u].y) - _313)) + _313;
    float _325 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_252.z * cbMtdParam._m0[10u].z) - _316)) + _316;
    vec4 _337 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = _337.z;
    float _347 = exp2(log2(_341 * 22.0) * 260.0);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    vec4 _368 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _380 = ((((isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0))) * (_341 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _368.z);
    float _395 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3734 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _404 = (((_396 * _396) * (3.0 - (_396 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _416 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _424 = (_337.x * 2.0) + (-1.0);
    float _425 = (_337.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3745 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    float _438 = (cbMtdParam._m0[12u].y * ((_368.x * 2.0) + (-1.0))) + _424;
    float _439 = (cbMtdParam._m0[12u].y * ((_368.y * 2.0) + (-1.0))) + _425;
    float _442 = fma(_431, _223 * NORMAL.x, fma(_439, _230 * TANGENT.x, (_216 * _208) * _438));
    float _445 = fma(_431, _223 * NORMAL.y, fma(_439, _230 * TANGENT.y, (_216 * _209) * _438));
    float _448 = fma(_431, _223 * NORMAL.z, fma(_439, _230 * TANGENT.z, (_216 * _210) * _438));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3756 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _456 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3778 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3789 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _544 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _546 = _544.w;
    float _566 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _569 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _572 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    vec4 _574 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _585 = (((_574.y - _456) + (_574.w * _456)) * cbMtdParam._m0[3u].x) + _456;
    uint _598 = uint(roundEven(NORMAL.w)) * 13u;
    uint _599 = _598 + 9u;
    uint _600 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _606 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_600].x;
    float _607 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_600].y;
    float _608 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_600].z;
    float _3800 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    vec4 _612 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _617 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _623 = cbMtdParam._m0[3u].x * _617.x;
    float _636 = (cbMtdParam._m0[3u].x * (((_609 * _546) - _609) + _612.x)) + _609;
    float _637 = (cbMtdParam._m0[3u].x * (((_610 * _546) - _610) + _612.y)) + _610;
    float _638 = (cbMtdParam._m0[3u].x * (((_611 * _546) - _611) + _612.z)) + _611;
    float _639 = 1.0 - _623;
    float _640 = _636 * _639;
    float _641 = _637 * _639;
    float _642 = _638 * _639;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _623;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _623;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _623;
    float _650 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _665 = _662.x * TEXCOORD_5.w;
    float _666 = dot(vec3(_453, _454, _455), vec3(_533, _534, _535));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _453) - _533;
    float _674 = (_669 * _454) - _534;
    float _675 = (_669 * _455) - _535;
    float _679 = abs(dot(vec3(_533, _534, _535), vec3(_453, _454, _455)));
    float _3833 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_585);
    float _693 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _699 = (1.0 - _693) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _700 = _693 * _681;
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_736, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728));
        float _767 = fma(_736, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728));
        float _771 = fma(_736, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728));
        float _794 = _728 + _453;
        float _795 = _732 + _454;
        float _796 = _736 + _455;
        float _806 = fma(_796, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794)) - _763;
        float _807 = fma(_796, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794)) - _767;
        float _808 = fma(_796, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794)) - _771;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _864 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_830.x + (-0.5));
        float _866 = _864 * (_830.y + (-0.5));
        float _867 = _864 * (_830.z + (-0.5));
        float _874 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_837.x + (-0.5));
        float _876 = _874 * (_837.y + (-0.5));
        float _877 = _874 * (_837.z + (-0.5));
        float _884 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_844.x + (-0.5));
        float _886 = _884 * (_844.y + (-0.5));
        float _887 = _884 * (_844.z + (-0.5));
        float _894 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_851.x + (-0.5));
        float _896 = _894 * (_851.y + (-0.5));
        float _897 = _894 * (_851.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _918 = (dot(vec3(_453, _454, _455), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _928 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3881 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_930 + 1.0))) + _935) * _898;
        float _945 = _866 * 0.5;
        float _946 = _876 * 0.5;
        float _947 = _886 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_453, _454, _455), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3914 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_972 + 1.0))) + _977) * _899;
        float _987 = _867 * 0.5;
        float _988 = _877 * 0.5;
        float _989 = _887 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_453, _454, _455), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3947 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1014 + 1.0))) + _1019) * _900;
        _1036 = _867;
        _1038 = _866;
        _1039 = _865;
        _1040 = _877;
        _1041 = _876;
        _1042 = _875;
        _1043 = _887;
        _1044 = _886;
        _1045 = _885;
        _1046 = _900;
        _1047 = _899;
        _1048 = _898;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1077 = fma(_736, cbModelParam._m0[30u].z, fma(_732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _728));
        float _1081 = fma(_736, cbModelParam._m0[31u].z, fma(_732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _728));
        float _1085 = fma(_736, cbModelParam._m0[32u].z, fma(_732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _728));
        float _1108 = _728 + _453;
        float _1109 = _732 + _454;
        float _1110 = _736 + _455;
        float _1120 = fma(_1110, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108)) - _1077;
        float _1121 = fma(_1110, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108)) - _1081;
        float _1122 = fma(_1110, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108)) - _1085;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1077 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1081 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[35u].z) + ((((((_1085 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1176 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1143.x + (-0.5));
        float _1178 = _1176 * (_1143.y + (-0.5));
        float _1179 = _1176 * (_1143.z + (-0.5));
        float _1186 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1150.x + (-0.5));
        float _1188 = _1186 * (_1150.y + (-0.5));
        float _1189 = _1186 * (_1150.z + (-0.5));
        float _1196 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1157.x + (-0.5));
        float _1198 = _1196 * (_1157.y + (-0.5));
        float _1199 = _1196 * (_1157.z + (-0.5));
        float _1206 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1164.x + (-0.5));
        float _1208 = _1206 * (_1164.y + (-0.5));
        float _1209 = _1206 * (_1164.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_453, _454, _455), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4010 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1240 + 1.0))) + _1245) * _1210;
        float _1255 = _1178 * 0.5;
        float _1256 = _1188 * 0.5;
        float _1257 = _1198 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_453, _454, _455), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _4043 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1282 + 1.0))) + _1287) * _1211;
        float _1297 = _1179 * 0.5;
        float _1298 = _1189 * 0.5;
        float _1299 = _1199 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_453, _454, _455), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4076 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1324 + 1.0))) + _1329) * _1212;
        _1346 = _1179;
        _1347 = _1178;
        _1348 = _1177;
        _1349 = _1189;
        _1350 = _1188;
        _1351 = _1187;
        _1352 = _1199;
        _1353 = _1198;
        _1354 = _1197;
        _1355 = _1212;
        _1356 = _1211;
        _1357 = _1210;
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1037;
        _1347 = _1037;
        _1348 = _1037;
        _1349 = _1037;
        _1350 = _1037;
        _1351 = _1037;
        _1352 = _1037;
        _1353 = _1037;
        _1354 = _1037;
        _1355 = _1037;
        _1356 = _1037;
        _1357 = _1037;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1393 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1370));
    float _1414 = _673 * 0.5;
    float _1415 = _674 * 0.5;
    float _1416 = _675 * 0.5;
    float _1417 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1420 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1423 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1430 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1434 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1438 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1445 = dot(vec4(cbModelParam._m0[39u]), vec4(_1414, _1415, _1416, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1414, _1415, _1416, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _585);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_736, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_736, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_736, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1545 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1548 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1576 = frontier_phi_14_12_ladder;
        }
        float _1750;
        if (_1545 > 0.0)
        {
            _1750 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1750 = frontier_phi_23_19_ladder;
        }
        float _2045;
        if (_1548 > 0.0)
        {
            _2045 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2045 = frontier_phi_35_30_ladder;
        }
        float _2047 = isnan(_1750) ? _1576 : (isnan(_1576) ? _1750 : min(_1576, _1750));
        float _2048 = isnan(_2045) ? _2047 : (isnan(_2047) ? _2045 : min(_2047, _2045));
        float _2052 = (_2048 * _1542) + _1531;
        float _2053 = (_2048 * _1545) + _1535;
        float _2054 = (_2048 * _1548) + _1539;
        float _2055 = _2048 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2055;
        float _2059 = _2055 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 > _2059) || ((_2053 < _2057) || ((_2052 < _2057) || (_2052 > _2059))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2054, cbModelParam._m0[9u].z, fma(_2053, cbModelParam._m0[9u].y, _2052 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2054, cbModelParam._m0[10u].z, fma(_2053, cbModelParam._m0[10u].y, _2052 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2054, cbModelParam._m0[11u].z, fma(_2053, cbModelParam._m0[11u].y, _2052 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_13_35_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_13_35_ladder_2;
        _1566 = frontier_phi_13_35_ladder_1;
        _1568 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1483);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _585);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_736, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_736, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_736, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1643 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1646 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1755;
        if (_1640 > 0.0)
        {
            _1755 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1755 = frontier_phi_25_21_ladder;
        }
        float _2072;
        if (_1643 > 0.0)
        {
            _2072 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2072 = frontier_phi_37_32_ladder;
        }
        float _2410;
        if (_1646 > 0.0)
        {
            _2410 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2410 = frontier_phi_47_44_ladder;
        }
        float _2412 = isnan(_2072) ? _1755 : (isnan(_1755) ? _2072 : min(_1755, _2072));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1640) + _1629;
        float _2418 = (_2413 * _1643) + _1633;
        float _2419 = (_2413 * _1646) + _1637;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_22_47_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_22_47_ladder_2;
        _1667 = frontier_phi_22_47_ladder_1;
        _1669 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1573);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1682 = (((_699 * _650) + _700) * _665) * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1684 = (((_699 * _652) + _700) * _665) * ((cbModelParam._m0[1u].w * (_1667 - _1566)) + _1566);
    float _1686 = (((_699 * _653) + _700) * _665) * ((cbModelParam._m0[1u].w * (_1669 - _1568)) + _1568);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    float _1729 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1733 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1737 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1741 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1742 = _1729 / _1741;
    float _1743 = _1733 / _1741;
    float _1744 = _1737 / _1741;
    float _1891;
    float _1892;
    float _1893;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1771 = ((uint(_1744 > cbSceneParam._m0[59u].y) + uint(_1744 > cbSceneParam._m0[59u].x)) + uint(_1744 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1772 = _1771 + 43u;
        uint _1780 = _1771 + 44u;
        uint _1788 = _1771 + 45u;
        uint _1796 = _1771 + 46u;
        float _1807 = fma(_1741, cbSceneParam._m0[_1772].w, fma(_1737, cbSceneParam._m0[_1772].z, fma(_1733, cbSceneParam._m0[_1772].y, _1729 * cbSceneParam._m0[_1772].x)));
        float _1811 = fma(_1741, cbSceneParam._m0[_1780].w, fma(_1737, cbSceneParam._m0[_1780].z, fma(_1733, cbSceneParam._m0[_1780].y, _1729 * cbSceneParam._m0[_1780].x)));
        float _1819 = fma(_1741, cbSceneParam._m0[_1796].w, fma(_1737, cbSceneParam._m0[_1796].z, fma(_1733, cbSceneParam._m0[_1796].y, _1729 * cbSceneParam._m0[_1796].x)));
        float _1824 = cbSceneParam._m0[33u].z * _1819;
        float _1826 = cbSceneParam._m0[33u].w * _1819;
        float _1829 = fma(_1741, cbSceneParam._m0[_1788].w, fma(_1737, cbSceneParam._m0[_1788].z, fma(_1733, cbSceneParam._m0[_1788].y, _1729 * cbSceneParam._m0[_1788].x))) / _1819;
        float _1877 = (cbSceneParam._m0[33u].x - sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744))) * cbSceneParam._m0[33u].y;
        float _4202 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1884 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 + _1807) / _1819, (_1826 + _1811) / _1819), _1829), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 + _1807) / _1819, (_1811 - _1824) / _1819), _1829), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 - _1824) / _1819, (_1811 - _1826) / _1819), _1829), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 - _1826) / _1819, (_1824 + _1811) / _1819), _1829), 0.0)).x), vec4(0.25)));
        _1891 = 1.0 - (_1884 * cbSceneParam._m0[34u].x);
        _1892 = 1.0 - (_1884 * cbSceneParam._m0[34u].y);
        _1893 = 1.0 - (_1884 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1891 = 1.0;
        _1892 = 1.0;
        _1893 = 1.0;
    }
    float _1957;
    float _1959;
    float _1961;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1945 = fma(_1741, cbSceneParam._m0[63u].w, fma(_1737, cbSceneParam._m0[63u].z, fma(_1733, cbSceneParam._m0[63u].y, _1729 * cbSceneParam._m0[63u].x)));
        float _1946 = fma(_1741, cbSceneParam._m0[60u].w, fma(_1737, cbSceneParam._m0[60u].z, fma(_1733, cbSceneParam._m0[60u].y, _1729 * cbSceneParam._m0[60u].x))) / _1945;
        float _1947 = fma(_1741, cbSceneParam._m0[61u].w, fma(_1737, cbSceneParam._m0[61u].z, fma(_1733, cbSceneParam._m0[61u].y, _1729 * cbSceneParam._m0[61u].x))) / _1945;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1946 >= cbSceneParam._m0[64u].x) && (_1947 >= cbSceneParam._m0[64u].y)) && (_1946 <= cbSceneParam._m0[64u].z)) && (_1947 <= cbSceneParam._m0[64u].w))
        {
            float _2085 = fma(_1741, cbSceneParam._m0[62u].w, fma(_1737, cbSceneParam._m0[62u].z, fma(_1733, cbSceneParam._m0[62u].y, _1729 * cbSceneParam._m0[62u].x))) / _1945;
            float _2089 = isnan(cbSceneParam._m0[41u].w) ? _2085 : (isnan(_2085) ? cbSceneParam._m0[41u].w : max(_2085, cbSceneParam._m0[41u].w));
            float _2132 = (cbSceneParam._m0[33u].x - sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744))) * cbSceneParam._m0[33u].y;
            float _4218 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
            float _2139 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1946, cbSceneParam._m0[33u].w + _1947), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1946, _1947 - cbSceneParam._m0[33u].z), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1946 - cbSceneParam._m0[33u].z, _1947 - cbSceneParam._m0[33u].w), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1946 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1947), _2089), 0.0)).x), vec4(0.25)));
            float _2143 = 1.0 - (_2139 * cbSceneParam._m0[34u].x);
            float _2144 = 1.0 - (_2139 * cbSceneParam._m0[34u].y);
            float _2145 = 1.0 - (_2139 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2145) ? _1893 : (isnan(_1893) ? _2145 : min(_1893, _2145));
            frontier_phi_34_33_ladder_1 = isnan(_2144) ? _1892 : (isnan(_1892) ? _2144 : min(_1892, _2144));
            frontier_phi_34_33_ladder_2 = isnan(_2143) ? _1891 : (isnan(_1891) ? _2143 : min(_1891, _2143));
        }
        else
        {
            frontier_phi_34_33_ladder = _1893;
            frontier_phi_34_33_ladder_1 = _1892;
            frontier_phi_34_33_ladder_2 = _1891;
        }
        _1957 = frontier_phi_34_33_ladder_2;
        _1959 = frontier_phi_34_33_ladder_1;
        _1961 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1957 = _1891;
        _1959 = _1892;
        _1961 = _1893;
    }
    uvec4 _1966 = floatBitsToUint(cbInstanceData._m0[_598 + 5u]);
    uint _1968 = _1966.x * 14u;
    uint _1969 = _1968 + 13u;
    float _1976 = _665 + (-1.0);
    float _1981 = (cbLight._m0[_1969].x * _1976) + 1.0;
    float _1982 = (cbLight._m0[_1969].y * _1976) + 1.0;
    float _1983 = (cbLight._m0[_1969].z * _1976) + 1.0;
    float _1984 = (cbLight._m0[_1969].w * _1976) + 1.0;
    uint _1985 = _1968 + 5u;
    float _1991 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _1995 = _1968 + 4u;
    float _2004 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _2008 = _1968 | 1u;
    float _2019 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_453, _454, _455));
    float _2022 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_453, _454, _455));
    float _4254 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _4265 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2027 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2029 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2036 = ((cbLight._m0[_1985].x * _1991) * _2029) + (((cbLight._m0[_1995].x * _1957) * _2004) * _2027);
    float _2037 = ((_1991 * cbLight._m0[_1985].y) * _2029) + (((cbLight._m0[_1995].y * _1959) * _2004) * _2027);
    float _2038 = ((_1991 * cbLight._m0[_1985].z) * _2029) + (((cbLight._m0[_1995].z * _1961) * _2004) * _2027);
    uvec4 _2042 = floatBitsToUint(cbLight._m0[_1968 + 12u]);
    bool _2044 = _2042.x == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2044)
    {
        _2146 = _2036;
        _2148 = _2037;
        _2150 = _2038;
    }
    else
    {
        uint _2154 = _1968 + 6u;
        float _2170 = (dot(vec3(cbLight._m0[_1968 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4276 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2173 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2146 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _2036;
        _2148 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _2037;
        _2150 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _2038;
    }
    bool _2153 = _2042.y == 0u;
    float _2208;
    float _2210;
    float _2212;
    if (_2153)
    {
        _2208 = _2146;
        _2210 = _2148;
        _2212 = _2150;
    }
    else
    {
        uint _2381 = _1968 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_1968 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4292 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2400 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2208 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2146;
        _2210 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2148;
        _2212 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2150;
    }
    uint _2215 = _1968 + 8u;
    float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _585) * 0.949999988079071044921875);
    float _2229 = _2228 * _2228;
    float _2230 = cbLight._m0[_1968].x + _533;
    float _2231 = cbLight._m0[_1968].y + _534;
    float _2232 = cbLight._m0[_1968].z + _535;
    float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
    float _2237 = _2236 * _2230;
    float _2238 = _2236 * _2231;
    float _2239 = _2236 * _2232;
    float _2240 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1968].xyz));
    float _4308 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2244 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2245 = dot(vec3(_453, _454, _455), vec3(_2237, _2238, _2239));
    float _4330 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2237, _2238, _2239));
    float _4341 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2229 * _2229;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2265 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
    float _2266 = 0.959999978542327880859375 - _647;
    float _2268 = 0.959999978542327880859375 - _648;
    float _2269 = 0.959999978542327880859375 - _649;
    float _2276 = 1.0 - _2229;
    float _2287 = (0.5 / (((_2244 * ((_2243 * _2276) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2276) + _2229) * _2243))) * _2243;
    float _4352 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    uint _2303 = _1968 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _585) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2008].x + _533;
    float _2317 = cbLight._m0[_2008].y + _534;
    float _2318 = cbLight._m0[_2008].z + _535;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2008].xyz));
    float _4363 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2330 = dot(vec3(_453, _454, _455), vec3(_2323, _2324, _2325));
    float _4374 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2323, _2324, _2325));
    float _4385 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0);
    float _2356 = 1.0 - _2315;
    float _2366 = (0.5 / (((_2244 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2356) + _2315) * _2329))) * _2329;
    float _4396 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2378 = (((((_2349 * _2266) + _650) * cbLight._m0[_2303].x) * _2368) * _1991) + ((((cbLight._m0[_2215].x * _1957) * ((_2265 * _2266) + _650)) * _2289) * _2004);
    float _2379 = (((((_2349 * _2268) + _652) * cbLight._m0[_2303].y) * _2368) * _1991) + ((((cbLight._m0[_2215].y * _1959) * ((_2265 * _2268) + _652)) * _2289) * _2004);
    float _2380 = (((((_2349 * _2269) + _653) * cbLight._m0[_2303].z) * _2368) * _1991) + ((((cbLight._m0[_2215].z * _1961) * ((_2265 * _2269) + _653)) * _2289) * _2004);
    float _2436;
    float _2438;
    float _2440;
    if (_2044)
    {
        _2436 = _2378;
        _2438 = _2379;
        _2440 = _2380;
    }
    else
    {
        uint _2442 = _1968 + 2u;
        uint _2446 = _1968 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _585) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _533;
        float _2463 = cbLight._m0[_2442].y + _534;
        float _2464 = cbLight._m0[_2442].z + _535;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2442].xyz));
        float _4407 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2476 = dot(vec3(_453, _454, _455), vec3(_2469, _2470, _2471));
        float _4418 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4429 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2495 = exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0);
        float _2502 = 1.0 - _2461;
        float _2512 = (0.5 / (((_2244 * ((_2475 * _2502) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2502) + _2461) * _2475))) * _2475;
        float _4440 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2436 = (((((_2495 * _2266) + _650) * cbLight._m0[_2446].x) * _2514) * _2515) + _2378;
        _2438 = (((((_2495 * _2268) + _652) * cbLight._m0[_2446].y) * _2514) * _2515) + _2379;
        _2440 = (((((_2495 * _2269) + _653) * cbLight._m0[_2446].z) * _2514) * _2515) + _2380;
    }
    float _2546;
    float _2548;
    float _2550;
    if (_2153)
    {
        _2546 = _2436;
        _2548 = _2438;
        _2550 = _2440;
    }
    else
    {
        uint _2557 = _1968 + 3u;
        uint _2561 = _1968 + 11u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _585) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _533;
        float _2578 = cbLight._m0[_2557].y + _534;
        float _2579 = cbLight._m0[_2557].z + _535;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2557].xyz));
        float _4456 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2591 = dot(vec3(_453, _454, _455), vec3(_2584, _2585, _2586));
        float _4467 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4478 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2244 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2244 * _2617) + _2576) * _2590))) * _2590;
        float _4489 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2546 = (((((_2610 * _2266) + _650) * cbLight._m0[_2561].x) * _2629) * _2630) + _2436;
        _2548 = (((((_2610 * _2268) + _652) * cbLight._m0[_2561].y) * _2629) * _2630) + _2438;
        _2550 = (((((_2610 * _2269) + _653) * cbLight._m0[_2561].z) * _2629) * _2630) + _2440;
    }
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_1966.y == 0u)
    {
        uvec4 _2651 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2652 = _2651.x;
        uint _2663 = uint((float(_2651.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2652))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2652)));
        float _2673 = (log2(_1744 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2674 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        uint _2677 = uint(isnan(14.0) ? _2674 : (isnan(_2674) ? 14.0 : min(_2674, 14.0)));
        uvec4 _2682 = texelFetch(g_lightClusterGridBuffer, int(((_2677 << 2u) + (_2663 << 6u)) >> 2u));
        uint _2683 = _2682.x;
        uint _2684 = _2651.z;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((((1u << ((_2684 >> 4u) & 15u)) + 4294967295u) & _2683) == 0u) || ((_2684 & 240u) == 0u))
        {
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
        }
        else
        {
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2983;
                    frontier_phi_66_pred_2 = _2982;
                    frontier_phi_66_pred_3 = _2981;
                    frontier_phi_66_pred_4 = _2980;
                    frontier_phi_66_pred_5 = _2979;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2994;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2985 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _1742;
                        float _3170 = _3129.y - _1743;
                        float _3171 = _3129.z - _1744;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_566, _569, _572), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4515 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _1742;
                        float _3205 = (-0.0) - _1743;
                        float _3206 = (-0.0) - _1744;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3220 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3221 = 1.0 - _681;
                        float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                        float _3229 = _3228 * _3228;
                        float _3230 = _3229 * _3229;
                        float _3231 = _3211 + _3176;
                        float _3232 = _3212 + _3177;
                        float _3233 = _3213 + _3178;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3241 = dot(vec3(_566, _569, _572), vec3(_3211, _3212, _3213));
                        float _4531 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3245 = dot(vec3(_566, _569, _572), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                        float _4542 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                        float _3253 = _3189 * _3229;
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3179) + _3254;
                        float _4553 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3259 = 1.0 - _3229;
                        float _3269 = (0.5 / (((_3258 * ((_3244 * _3259) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3229) * _3244))) * _3258;
                        float _4564 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3280 = (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) / ((_3252 * _3252) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3038 = (_3200 * _3148.x) + _3106;
                        _3039 = (_3200 * _3148.y) + _3107;
                        _3040 = (_3200 * _3148.z) + _3108;
                        _3035 = (_3280 * _3165.x) + _3103;
                        _3036 = (_3280 * _3165.y) + _3104;
                        _3037 = (_3280 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3040;
                    frontier_phi_66_pred_1 = _3039;
                    frontier_phi_66_pred_2 = _3038;
                    frontier_phi_66_pred_3 = _3037;
                    frontier_phi_66_pred_4 = _3036;
                    frontier_phi_66_pred_5 = _3035;
                }
                _2836 = frontier_phi_66_pred;
                _2834 = frontier_phi_66_pred_1;
                _2832 = frontier_phi_66_pred_2;
                _2830 = frontier_phi_66_pred_3;
                _2828 = frontier_phi_66_pred_4;
                _2826 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2826;
                    _2980 = _2828;
                    _2981 = _2830;
                    _2982 = _2832;
                    _2983 = _2834;
                    _2984 = _2836;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
        }
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.z;
        uint _2842 = (_2840 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2842) & _2683) == 0u)
        {
            _2947 = _2825;
            _2949 = _2827;
            _2951 = _2829;
            _2953 = _2831;
            _2955 = _2833;
            _2957 = _2835;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
            float _2973 = _2972 * _1742;
            float _2974 = _2972 * _1743;
            float _2975 = _2972 * _1744;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2842 < ((_2840 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3086 = _2825;
                float _3087 = _2827;
                float _3088 = _2829;
                float _3089 = _2831;
                float _3090 = _2833;
                float _3091 = _2835;
                uint _3092 = _2842;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2677 << 5u) + (_2663 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3102)
                    {
                        frontier_phi_72_pred = _3091;
                        frontier_phi_72_pred_1 = _3090;
                        frontier_phi_72_pred_2 = _3089;
                        frontier_phi_72_pred_3 = _3088;
                        frontier_phi_72_pred_4 = _3087;
                        frontier_phi_72_pred_5 = _3086;
                    }
                    else
                    {
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3298 = _3086;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        uint _3304 = _3101;
                        uint _3305;
                        vec4 _3330;
                        float _3331;
                        vec4 _3346;
                        vec3 _3358;
                        vec4 _3374;
                        vec4 _3390;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3315 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3304));
                            _3305 = (_3304 + 4294967295u) & _3304;
                            uint _3317 = _3315 * 40u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3331 = _3330.w;
                            uint _3333 = (_3315 * 40u) + 4u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3315 * 40u) + 8u;
                            _3358 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x));
                            uint _3361 = (_3315 * 40u) + 16u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3377 = (_3315 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3393 = (_3315 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3315 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_1744, _3425.z, fma(_1743, _3425.y, _3425.x * _1742)) + _3425.w;
                            _3438 = !((fma(_1744, _3406.z, fma(_1743, _3406.y, _3406.x * _1742)) + _3406.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3330.x - _1742;
                                float _3466 = _3330.y - _1743;
                                float _3467 = _3330.z - _1744;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3331 * _3331));
                                float _4575 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3483 = sqrt(_3468) * _3346.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_566, _569, _572))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_1744, _3374.z, fma(_1743, _3374.y, _3374.x * _1742)) + _3374.w) / _3437;
                                float _3497 = (fma(_1744, _3390.z, fma(_1743, _3390.y, _3390.x * _1742)) + _3390.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4591 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _681;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2973;
                                float _3527 = _3473 - _2974;
                                float _3528 = _3474 - _2975;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4602 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3540 = dot(vec3(_566, _569, _572), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4613 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_566, _569, _572), vec3(_3472, _3473, _3474))) + _3549;
                                float _4624 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4635 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3503 * _3346.y;
                                frontier_phi_78_pred_1 = _3503 * _3346.x;
                                frontier_phi_78_pred_2 = _3577 * _3358.z;
                                frontier_phi_78_pred_3 = _3577 * _3358.y;
                                frontier_phi_78_pred_4 = _3577 * _3358.x;
                                frontier_phi_78_pred_5 = _3503 * _3346.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3585 = frontier_phi_78_pred;
                            _3584 = frontier_phi_78_pred_1;
                            _3583 = frontier_phi_78_pred_2;
                            _3582 = frontier_phi_78_pred_3;
                            _3581 = frontier_phi_78_pred_4;
                            _3586 = frontier_phi_78_pred_5;
                            _3288 = _3584 + _3301;
                            _3289 = _3585 + _3302;
                            _3290 = _3586 + _3303;
                            _3285 = _3581 + _3298;
                            _3286 = _3582 + _3299;
                            _3287 = _3583 + _3300;
                            if (_3305 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3305;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3290;
                        frontier_phi_72_pred_1 = _3289;
                        frontier_phi_72_pred_2 = _3288;
                        frontier_phi_72_pred_3 = _3287;
                        frontier_phi_72_pred_4 = _3286;
                        frontier_phi_72_pred_5 = _3285;
                    }
                    _2958 = frontier_phi_72_pred;
                    _2956 = frontier_phi_72_pred_1;
                    _2954 = frontier_phi_72_pred_2;
                    _2952 = frontier_phi_72_pred_3;
                    _2950 = frontier_phi_72_pred_4;
                    _2948 = frontier_phi_72_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2948;
                        _3087 = _2950;
                        _3088 = _2952;
                        _3089 = _2954;
                        _3090 = _2956;
                        _3091 = _2958;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2958;
                frontier_phi_60_61_ladder_1 = _2956;
                frontier_phi_60_61_ladder_2 = _2952;
                frontier_phi_60_61_ladder_3 = _2950;
                frontier_phi_60_61_ladder_4 = _2948;
                frontier_phi_60_61_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_60_61_ladder = _2835;
                frontier_phi_60_61_ladder_1 = _2833;
                frontier_phi_60_61_ladder_2 = _2829;
                frontier_phi_60_61_ladder_3 = _2827;
                frontier_phi_60_61_ladder_4 = _2825;
                frontier_phi_60_61_ladder_5 = _2831;
            }
            _2947 = frontier_phi_60_61_ladder_4;
            _2949 = frontier_phi_60_61_ladder_3;
            _2951 = frontier_phi_60_61_ladder_2;
            _2953 = frontier_phi_60_61_ladder_5;
            _2955 = frontier_phi_60_61_ladder_1;
            _2957 = frontier_phi_60_61_ladder;
        }
        float _2962 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2696 = (_2962 * _2953) + _2208;
        _2698 = (_2962 * _2955) + _2210;
        _2700 = (_2962 * _2957) + _2212;
        _2702 = ((_2947 * _650) * _2962) + _2546;
        _2704 = ((_2949 * _652) * _2962) + _2548;
        _2706 = ((_2951 * _653) * _2962) + _2550;
    }
    else
    {
        _2696 = _2208;
        _2698 = _2210;
        _2700 = _2212;
        _2702 = _2546;
        _2704 = _2548;
        _2706 = _2550;
    }
    uint _2712 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _2721 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _404) * _416.x) * cbInstanceData._m0[_2712].x;
    float _2725 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _404) * _416.y) * cbInstanceData._m0[_2712].y;
    float _2729 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _404) * _416.z) * cbInstanceData._m0[_2712].z;
    vec4 _2737 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2751 = ((((_2721 * _546) - _2721) + _2737.x) * cbMtdParam._m0[3u].x) + _2721;
    float _2752 = ((((_2725 * _546) - _2725) + _2737.y) * cbMtdParam._m0[3u].x) + _2725;
    float _2753 = ((((_2729 * _546) - _2729) + _2737.z) * cbMtdParam._m0[3u].x) + _2729;
    float _4651 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4662 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4673 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _2772 = (((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2696 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _665))) + ((_2702 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + _2751;
    float _2773 = (((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2698 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _665))) + ((_2704 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + _2752;
    float _2774 = (((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2700 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _665))) + ((_2706 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + _2753;
    float _4699 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2787 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    uint _2788 = _598 + 6u;
    float _2796 = _541 / cbSceneParam._m0[86u].x;
    float _2797 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2811 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2813 = _2811.x;
    float _2814 = _2811.y;
    float _2815 = _2811.z;
    float _2816 = _2811.w;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2850 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2851 = _2850 / _475;
        float _2862 = _2851 * _526;
        float _2863 = _527 * _2851;
        float _2864 = (-0.0) - _2863;
        float _2866 = _2851 * _528;
        float _2868 = (cbSceneParam._m0[77u].w * _2864) / _2850;
        float _2869 = _2868 + cbSceneParam._m0[79u].w;
        float _2870 = cbSceneParam._m0[79u].w - _2863;
        float _2876 = sqrt(((_2862 * _2862) + (_2863 * _2863)) + (_2866 * _2866));
        float _2879 = (1.0 - (cbSceneParam._m0[77u].w / _2850)) * _2876;
        float _2884 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2886 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3048;
        if (abs((_2864 - _2868) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3048 = ((((_2869 > 0.0) ? exp2(_2884 * _2869) : (2.0 - exp2(_2886 * _2869))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2879;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : max(_2869, _2870));
            float _3010 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : min(_2869, _2870));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3048 = ((abs(_2876 / _2864) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2884 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2884 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2886 * _3019) - exp2(_2886 * _3020)) * _3008))) + (_2879 * cbSceneParam._m0[80u].z);
        }
        vec4 _3050 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2796, _2797, 1.0), 0.0);
        float _3059 = exp2((_3048 * (-1.44269502162933349609375)) * (1.0 - _3050.w));
        float _3060 = log2(_3059);
        float _3076 = log2(_2816);
        _2888 = (exp2(_3076 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].x)) * _3050.x) / cbSceneParam._m0[78u].x)) + _2813;
        _2890 = (exp2(_3076 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].y)) * _3050.y) / cbSceneParam._m0[78u].y)) + _2814;
        _2892 = (exp2(_3076 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].z)) * _3050.z) / cbSceneParam._m0[78u].z)) + _2815;
        _2894 = _3059 * _2816;
    }
    else
    {
        _2888 = _2813;
        _2890 = _2814;
        _2892 = _2815;
        _2894 = _2816;
    }
    float _2906 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2907 = _2906 == 3.0;
    float _2908 = log2(_2894);
    float _2912 = exp2(_2908 * cbSceneParam._m0[78u].x);
    float _2913 = exp2(_2908 * cbSceneParam._m0[78u].y);
    float _2914 = exp2(_2908 * cbSceneParam._m0[78u].z);
    float _2915 = _2912 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)));
    float _2916 = _2913 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)));
    float _2917 = _2914 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)));
    float _2926 = (_2906 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2926 * (_2907 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.y = _2926 * (_2907 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.z = _2926 * (_2907 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.w = cbInstanceData._m0[_2788].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2751) * _2787) * _2912) * _2926;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2752) * _2787) * _2913) * _2926;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2753) * _2787) * _2914) * _2926;
    SV_Target_1.w = cbInstanceData._m0[_2788].w;
}


