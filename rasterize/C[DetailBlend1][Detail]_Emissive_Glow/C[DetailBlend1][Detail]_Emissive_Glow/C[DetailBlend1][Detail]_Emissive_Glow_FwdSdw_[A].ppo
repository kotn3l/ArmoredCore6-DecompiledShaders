#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1082;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _284 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _300 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = ((_284.x * 4.55000019073486328125) * _300.x) * cbMtdParam._m0[9u].x;
    float _317 = ((_284.y * 4.55000019073486328125) * _300.y) * cbMtdParam._m0[9u].y;
    float _320 = ((_284.z * 4.55000019073486328125) * _300.z) * cbMtdParam._m0[9u].z;
    float _327 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_256.x * cbMtdParam._m0[10u].x) - _314)) + _314;
    float _328 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_256.y * cbMtdParam._m0[10u].y) - _317)) + _317;
    float _329 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_256.z * cbMtdParam._m0[10u].z) - _320)) + _320;
    vec4 _341 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = _341.z;
    float _351 = exp2(log2(_345 * 22.0) * 260.0);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _372 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _384 = ((((isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0))) * (_345 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _372.z);
    float _399 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3845 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _408 = (((_400 * _400) * (3.0 - (_400 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _420 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _428 = (_341.x * 2.0) + (-1.0);
    float _429 = (_341.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3856 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    float _442 = (cbMtdParam._m0[12u].y * ((_372.x * 2.0) + (-1.0))) + _428;
    float _443 = (cbMtdParam._m0[12u].y * ((_372.y * 2.0) + (-1.0))) + _429;
    float _446 = fma(_435, _227 * NORMAL.x, fma(_443, _234 * TANGENT.x, (_220 * _212) * _442));
    float _449 = fma(_435, _227 * NORMAL.y, fma(_443, _234 * TANGENT.y, (_220 * _213) * _442));
    float _452 = fma(_435, _227 * NORMAL.z, fma(_443, _234 * TANGENT.z, (_220 * _214) * _442));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3867 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _460 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3889 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3900 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    vec4 _544 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _546 = _544.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _763 = sqrt(((_530 * _530) + (_531 * _531)) + (_532 * _532));
        float _769 = (cbMatDynParam._m0[5u].x * _763) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _763) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _770)) + _770) < ((_546 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _561 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _563 = _561.w;
    float _582 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _585 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _588 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    vec4 _590 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _601 = (((_590.y - _460) + (_590.w * _460)) * cbMtdParam._m0[3u].x) + _460;
    uint _614 = uint(roundEven(NORMAL.w)) * 13u;
    uint _615 = _614 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3933 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _628 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _633 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _639 = cbMtdParam._m0[3u].x * _633.x;
    float _652 = (cbMtdParam._m0[3u].x * (((_625 * _563) - _625) + _628.x)) + _625;
    float _653 = (cbMtdParam._m0[3u].x * (((_626 * _563) - _626) + _628.y)) + _626;
    float _654 = (cbMtdParam._m0[3u].x * (((_627 * _563) - _627) + _628.z)) + _627;
    float _655 = 1.0 - _639;
    float _656 = _652 * _655;
    float _657 = _653 * _655;
    float _658 = _654 * _655;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _639;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _639;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _639;
    float _666 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _681 = _678.x * TEXCOORD_5.w;
    float _682 = dot(vec3(_457, _458, _459), vec3(_537, _538, _539));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _457) - _537;
    float _690 = (_685 * _458) - _538;
    float _691 = (_685 * _459) - _539;
    float _695 = abs(dot(vec3(_537, _538, _539), vec3(_457, _458, _459)));
    float _3966 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_601);
    float _709 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _715 = (1.0 - _709) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _697;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _812 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _816 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _839 = _744 + _457;
        float _840 = _748 + _458;
        float _841 = _752 + _459;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_457, _458, _459), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _4014 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_457, _458, _459), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _4047 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_457, _458, _459), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _4080 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1129 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1133 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1156 = _744 + _457;
        float _1157 = _748 + _458;
        float _1158 = _752 + _459;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_457, _458, _459), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4143 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_457, _458, _459), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4176 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_457, _458, _459), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4209 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = _1082;
        _1404 = _1082;
        _1405 = _1082;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _689 * 0.5;
    float _1463 = _690 * 0.5;
    float _1464 = _691 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _601);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1593 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1596 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1624 = frontier_phi_17_15_ladder;
        }
        float _1798;
        if (_1593 > 0.0)
        {
            _1798 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1798 = frontier_phi_26_22_ladder;
        }
        float _2093;
        if (_1596 > 0.0)
        {
            _2093 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2093 = frontier_phi_38_33_ladder;
        }
        float _2095 = isnan(_1798) ? _1624 : (isnan(_1624) ? _1798 : min(_1624, _1798));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1590) + _1579;
        float _2101 = (_2096 * _1593) + _1583;
        float _2102 = (_2096 * _1596) + _1587;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2103;
        float _2107 = _2103 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 > _2107) || ((_2101 < _2105) || ((_2100 < _2105) || (_2100 > _2107))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2247 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2102, cbModelParam._m0[9u].z, fma(_2101, cbModelParam._m0[9u].y, _2100 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2102, cbModelParam._m0[10u].z, fma(_2101, cbModelParam._m0[10u].y, _2100 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2102, cbModelParam._m0[11u].z, fma(_2101, cbModelParam._m0[11u].y, _2100 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_16_38_ladder = _2247.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2247.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2247.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_16_38_ladder_2;
        _1614 = frontier_phi_16_38_ladder_1;
        _1616 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1531);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _601);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1691 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1694 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1803;
        if (_1688 > 0.0)
        {
            _1803 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1803 = frontier_phi_28_24_ladder;
        }
        float _2120;
        if (_1691 > 0.0)
        {
            _2120 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2120 = frontier_phi_40_35_ladder;
        }
        float _2458;
        if (_1694 > 0.0)
        {
            _2458 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2458 = frontier_phi_50_47_ladder;
        }
        float _2460 = isnan(_2120) ? _1803 : (isnan(_1803) ? _2120 : min(_1803, _2120));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1688) + _1677;
        float _2466 = (_2461 * _1691) + _1681;
        float _2467 = (_2461 * _1694) + _1685;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_25_50_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_25_50_ladder_2;
        _1715 = frontier_phi_25_50_ladder_1;
        _1717 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1621);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_715 * _666) + _716) * _681) * ((cbModelParam._m0[1u].w * (_1713 - _1612)) + _1612);
    float _1732 = (((_715 * _668) + _716) * _681) * ((cbModelParam._m0[1u].w * (_1715 - _1614)) + _1614);
    float _1734 = (((_715 * _669) + _716) * _681) * ((cbModelParam._m0[1u].w * (_1717 - _1616)) + _1616);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1781 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1790 = _1777 / _1789;
    float _1791 = _1781 / _1789;
    float _1792 = _1785 / _1789;
    float _1939;
    float _1940;
    float _1941;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1819 = ((uint(_1792 > cbSceneParam._m0[59u].y) + uint(_1792 > cbSceneParam._m0[59u].x)) + uint(_1792 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1820 = _1819 + 43u;
        uint _1828 = _1819 + 44u;
        uint _1836 = _1819 + 45u;
        uint _1844 = _1819 + 46u;
        float _1855 = fma(_1789, cbSceneParam._m0[_1820].w, fma(_1785, cbSceneParam._m0[_1820].z, fma(_1781, cbSceneParam._m0[_1820].y, _1777 * cbSceneParam._m0[_1820].x)));
        float _1859 = fma(_1789, cbSceneParam._m0[_1828].w, fma(_1785, cbSceneParam._m0[_1828].z, fma(_1781, cbSceneParam._m0[_1828].y, _1777 * cbSceneParam._m0[_1828].x)));
        float _1867 = fma(_1789, cbSceneParam._m0[_1844].w, fma(_1785, cbSceneParam._m0[_1844].z, fma(_1781, cbSceneParam._m0[_1844].y, _1777 * cbSceneParam._m0[_1844].x)));
        float _1872 = cbSceneParam._m0[33u].z * _1867;
        float _1874 = cbSceneParam._m0[33u].w * _1867;
        float _1877 = fma(_1789, cbSceneParam._m0[_1836].w, fma(_1785, cbSceneParam._m0[_1836].z, fma(_1781, cbSceneParam._m0[_1836].y, _1777 * cbSceneParam._m0[_1836].x))) / _1867;
        float _1925 = (cbSceneParam._m0[33u].x - sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792))) * cbSceneParam._m0[33u].y;
        float _4335 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1932 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1872 + _1855) / _1867, (_1874 + _1859) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1855) / _1867, (_1859 - _1872) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 - _1872) / _1867, (_1859 - _1874) / _1867), _1877), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 - _1874) / _1867, (_1872 + _1859) / _1867), _1877), 0.0)).x), vec4(0.25)));
        _1939 = 1.0 - (_1932 * cbSceneParam._m0[34u].x);
        _1940 = 1.0 - (_1932 * cbSceneParam._m0[34u].y);
        _1941 = 1.0 - (_1932 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1939 = 1.0;
        _1940 = 1.0;
        _1941 = 1.0;
    }
    float _2005;
    float _2007;
    float _2009;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1993 = fma(_1789, cbSceneParam._m0[63u].w, fma(_1785, cbSceneParam._m0[63u].z, fma(_1781, cbSceneParam._m0[63u].y, _1777 * cbSceneParam._m0[63u].x)));
        float _1994 = fma(_1789, cbSceneParam._m0[60u].w, fma(_1785, cbSceneParam._m0[60u].z, fma(_1781, cbSceneParam._m0[60u].y, _1777 * cbSceneParam._m0[60u].x))) / _1993;
        float _1995 = fma(_1789, cbSceneParam._m0[61u].w, fma(_1785, cbSceneParam._m0[61u].z, fma(_1781, cbSceneParam._m0[61u].y, _1777 * cbSceneParam._m0[61u].x))) / _1993;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1994 >= cbSceneParam._m0[64u].x) && (_1995 >= cbSceneParam._m0[64u].y)) && (_1994 <= cbSceneParam._m0[64u].z)) && (_1995 <= cbSceneParam._m0[64u].w))
        {
            float _2133 = fma(_1789, cbSceneParam._m0[62u].w, fma(_1785, cbSceneParam._m0[62u].z, fma(_1781, cbSceneParam._m0[62u].y, _1777 * cbSceneParam._m0[62u].x))) / _1993;
            float _2137 = isnan(cbSceneParam._m0[41u].w) ? _2133 : (isnan(_2133) ? cbSceneParam._m0[41u].w : max(_2133, cbSceneParam._m0[41u].w));
            float _2180 = (cbSceneParam._m0[33u].x - sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792))) * cbSceneParam._m0[33u].y;
            float _4351 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
            float _2187 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1994, cbSceneParam._m0[33u].w + _1995), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1994, _1995 - cbSceneParam._m0[33u].z), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1994 - cbSceneParam._m0[33u].z, _1995 - cbSceneParam._m0[33u].w), _2137), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1994 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1995), _2137), 0.0)).x), vec4(0.25)));
            float _2191 = 1.0 - (_2187 * cbSceneParam._m0[34u].x);
            float _2192 = 1.0 - (_2187 * cbSceneParam._m0[34u].y);
            float _2193 = 1.0 - (_2187 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2193) ? _1941 : (isnan(_1941) ? _2193 : min(_1941, _2193));
            frontier_phi_37_36_ladder_1 = isnan(_2192) ? _1940 : (isnan(_1940) ? _2192 : min(_1940, _2192));
            frontier_phi_37_36_ladder_2 = isnan(_2191) ? _1939 : (isnan(_1939) ? _2191 : min(_1939, _2191));
        }
        else
        {
            frontier_phi_37_36_ladder = _1941;
            frontier_phi_37_36_ladder_1 = _1940;
            frontier_phi_37_36_ladder_2 = _1939;
        }
        _2005 = frontier_phi_37_36_ladder_2;
        _2007 = frontier_phi_37_36_ladder_1;
        _2009 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2005 = _1939;
        _2007 = _1940;
        _2009 = _1941;
    }
    uvec4 _2014 = floatBitsToUint(cbInstanceData._m0[_614 + 5u]);
    uint _2016 = _2014.x * 14u;
    uint _2017 = _2016 + 13u;
    float _2024 = _681 + (-1.0);
    float _2029 = (cbLight._m0[_2017].x * _2024) + 1.0;
    float _2030 = (cbLight._m0[_2017].y * _2024) + 1.0;
    float _2031 = (cbLight._m0[_2017].z * _2024) + 1.0;
    float _2032 = (cbLight._m0[_2017].w * _2024) + 1.0;
    uint _2033 = _2016 + 5u;
    float _2039 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2043 = _2016 + 4u;
    float _2052 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
    uint _2056 = _2016 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_457, _458, _459));
    float _2070 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_457, _458, _459));
    float _4387 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _4398 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2077 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2084 = ((cbLight._m0[_2033].x * _2039) * _2077) + (((cbLight._m0[_2043].x * _2005) * _2052) * _2075);
    float _2085 = ((_2039 * cbLight._m0[_2033].y) * _2077) + (((cbLight._m0[_2043].y * _2007) * _2052) * _2075);
    float _2086 = ((_2039 * cbLight._m0[_2033].z) * _2077) + (((cbLight._m0[_2043].z * _2009) * _2052) * _2075);
    uvec4 _2090 = floatBitsToUint(cbLight._m0[_2016 + 12u]);
    bool _2092 = _2090.x == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2092)
    {
        _2194 = _2084;
        _2196 = _2085;
        _2198 = _2086;
    }
    else
    {
        uint _2202 = _2016 + 6u;
        float _2218 = (dot(vec3(cbLight._m0[_2016 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4409 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2221 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2194 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _2084;
        _2196 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _2085;
        _2198 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _2086;
    }
    bool _2201 = _2090.y == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2201)
    {
        _2256 = _2194;
        _2258 = _2196;
        _2260 = _2198;
    }
    else
    {
        uint _2429 = _2016 + 7u;
        float _2445 = (dot(vec3(cbLight._m0[_2016 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4425 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2448 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2256 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2194;
        _2258 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2196;
        _2260 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2198;
    }
    uint _2263 = _2016 + 8u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _601) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2016].x + _537;
    float _2279 = cbLight._m0[_2016].y + _538;
    float _2280 = cbLight._m0[_2016].z + _539;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2016].xyz));
    float _4441 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _4452 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2292 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2293 = dot(vec3(_457, _458, _459), vec3(_2285, _2286, _2287));
    float _4463 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2285, _2286, _2287));
    float _4474 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2277 * _2277;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0);
    float _2314 = 0.959999978542327880859375 - _663;
    float _2316 = 0.959999978542327880859375 - _664;
    float _2317 = 0.959999978542327880859375 - _665;
    float _2324 = 1.0 - _2277;
    float _2335 = (0.5 / (((_2292 * ((_2291 * _2324) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2324) + _2277) * _2291))) * _2291;
    float _4485 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2337 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    uint _2351 = _2016 + 9u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _601) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2056].x + _537;
    float _2365 = cbLight._m0[_2056].y + _538;
    float _2366 = cbLight._m0[_2056].z + _539;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2056].xyz));
    float _4496 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2378 = dot(vec3(_457, _458, _459), vec3(_2371, _2372, _2373));
    float _4507 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2371, _2372, _2373));
    float _4518 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2363 * _2363;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
    float _2404 = 1.0 - _2363;
    float _2414 = (0.5 / (((_2292 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2404) + _2363) * _2377))) * _2377;
    float _4529 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    float _2426 = (((((_2397 * _2314) + _666) * cbLight._m0[_2351].x) * _2416) * _2039) + ((((cbLight._m0[_2263].x * _2005) * ((_2313 * _2314) + _666)) * _2337) * _2052);
    float _2427 = (((((_2397 * _2316) + _668) * cbLight._m0[_2351].y) * _2416) * _2039) + ((((cbLight._m0[_2263].y * _2007) * ((_2313 * _2316) + _668)) * _2337) * _2052);
    float _2428 = (((((_2397 * _2317) + _669) * cbLight._m0[_2351].z) * _2416) * _2039) + ((((cbLight._m0[_2263].z * _2009) * ((_2313 * _2317) + _669)) * _2337) * _2052);
    float _2484;
    float _2486;
    float _2488;
    if (_2092)
    {
        _2484 = _2426;
        _2486 = _2427;
        _2488 = _2428;
    }
    else
    {
        uint _2490 = _2016 + 2u;
        uint _2494 = _2016 + 10u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _601) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _537;
        float _2511 = cbLight._m0[_2490].y + _538;
        float _2512 = cbLight._m0[_2490].z + _539;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2490].xyz));
        float _4540 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2524 = dot(vec3(_457, _458, _459), vec3(_2517, _2518, _2519));
        float _4551 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4562 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
        float _2550 = 1.0 - _2509;
        float _2560 = (0.5 / (((_2292 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2550) + _2509) * _2523))) * _2523;
        float _4573 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2562 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2563 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
        _2484 = (((((_2543 * _2314) + _666) * cbLight._m0[_2494].x) * _2562) * _2563) + _2426;
        _2486 = (((((_2543 * _2316) + _668) * cbLight._m0[_2494].y) * _2562) * _2563) + _2427;
        _2488 = (((((_2543 * _2317) + _669) * cbLight._m0[_2494].z) * _2562) * _2563) + _2428;
    }
    float _2594;
    float _2596;
    float _2598;
    if (_2201)
    {
        _2594 = _2484;
        _2596 = _2486;
        _2598 = _2488;
    }
    else
    {
        uint _2605 = _2016 + 3u;
        uint _2609 = _2016 + 11u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _601) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _537;
        float _2626 = cbLight._m0[_2605].y + _538;
        float _2627 = cbLight._m0[_2605].z + _539;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2605].xyz));
        float _4589 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2639 = dot(vec3(_457, _458, _459), vec3(_2632, _2633, _2634));
        float _4600 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4611 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2292 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2292 * _2665) + _2624) * _2638))) * _2638;
        float _4622 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2594 = (((((_2658 * _2314) + _666) * cbLight._m0[_2609].x) * _2677) * _2678) + _2484;
        _2596 = (((((_2658 * _2316) + _668) * cbLight._m0[_2609].y) * _2677) * _2678) + _2486;
        _2598 = (((((_2658 * _2317) + _669) * cbLight._m0[_2609].z) * _2677) * _2678) + _2488;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2014.y == 0u)
    {
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2700)));
        float _2721 = (log2(_1792 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
        }
        else
        {
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3051)
                {
                    frontier_phi_71_pred = _3040;
                    frontier_phi_71_pred_1 = _3039;
                    frontier_phi_71_pred_2 = _3038;
                    frontier_phi_71_pred_3 = _3037;
                    frontier_phi_71_pred_4 = _3036;
                    frontier_phi_71_pred_5 = _3035;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3050;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3041 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _1790;
                        float _3247 = _3206.y - _1791;
                        float _3248 = _3206.z - _1792;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_582, _585, _588), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4648 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _1790;
                        float _3282 = (-0.0) - _1791;
                        float _3283 = (-0.0) - _1792;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3297 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _697;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_582, _585, _588), vec3(_3288, _3289, _3290));
                        float _4664 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3322 = dot(vec3(_582, _585, _588), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4675 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3266 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3256) + _3331;
                        float _4686 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4697 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) / ((_3329 * _3329) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3110 = (_3277 * _3225.x) + _3183;
                        _3111 = (_3277 * _3225.y) + _3184;
                        _3112 = (_3277 * _3225.z) + _3185;
                        _3107 = (_3357 * _3242.x) + _3180;
                        _3108 = (_3357 * _3242.y) + _3181;
                        _3109 = (_3357 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_71_pred = _3112;
                    frontier_phi_71_pred_1 = _3111;
                    frontier_phi_71_pred_2 = _3110;
                    frontier_phi_71_pred_3 = _3109;
                    frontier_phi_71_pred_4 = _3108;
                    frontier_phi_71_pred_5 = _3107;
                }
                _2884 = frontier_phi_71_pred;
                _2882 = frontier_phi_71_pred_1;
                _2880 = frontier_phi_71_pred_2;
                _2878 = frontier_phi_71_pred_3;
                _2876 = frontier_phi_71_pred_4;
                _2874 = frontier_phi_71_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2874;
                    _3036 = _2876;
                    _3037 = _2878;
                    _3038 = _2880;
                    _3039 = _2882;
                    _3040 = _2884;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
        }
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.z;
        uint _2890 = (_2888 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2890) & _2731) == 0u)
        {
            _3003 = _2873;
            _3005 = _2875;
            _3007 = _2877;
            _3009 = _2879;
            _3011 = _2881;
            _3013 = _2883;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
            float _3029 = _3028 * _1790;
            float _3030 = _3028 * _1791;
            float _3031 = _3028 * _1792;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2890 < ((_2888 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3163 = _2873;
                float _3164 = _2875;
                float _3165 = _2877;
                float _3166 = _2879;
                float _3167 = _2881;
                float _3168 = _2883;
                uint _3169 = _2890;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3179)
                    {
                        frontier_phi_82_pred = _3168;
                        frontier_phi_82_pred_1 = _3167;
                        frontier_phi_82_pred_2 = _3166;
                        frontier_phi_82_pred_3 = _3165;
                        frontier_phi_82_pred_4 = _3164;
                        frontier_phi_82_pred_5 = _3163;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        uint _3390 = _3178;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3460;
                        vec4 _3476;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3401 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3447 = (_3401 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3463 = (_3401 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3479 = (_3401 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3401 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_1792, _3511.z, fma(_1791, _3511.y, _3511.x * _1790)) + _3511.w;
                            _3524 = !((fma(_1792, _3492.z, fma(_1791, _3492.y, _3492.x * _1790)) + _3492.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3416.x - _1790;
                                float _3552 = _3416.y - _1791;
                                float _3553 = _3416.z - _1792;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3417 * _3417));
                                float _4708 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3569 = sqrt(_3554) * _3432.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_582, _585, _588))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_1792, _3460.z, fma(_1791, _3460.y, _3460.x * _1790)) + _3460.w) / _3523;
                                float _3583 = (fma(_1792, _3476.z, fma(_1791, _3476.y, _3476.x * _1790)) + _3476.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4724 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _697;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3029;
                                float _3613 = _3559 - _3030;
                                float _3614 = _3560 - _3031;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_582, _585, _588), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4735 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3626 = dot(vec3(_582, _585, _588), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4746 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_582, _585, _588), vec3(_3558, _3559, _3560))) + _3635;
                                float _4757 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4768 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3589 * _3432.z;
                                frontier_phi_88_pred_1 = _3589 * _3432.y;
                                frontier_phi_88_pred_2 = _3589 * _3432.x;
                                frontier_phi_88_pred_3 = _3663 * _3444.z;
                                frontier_phi_88_pred_4 = _3663 * _3444.y;
                                frontier_phi_88_pred_5 = _3663 * _3444.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_88_pred;
                            _3671 = frontier_phi_88_pred_1;
                            _3670 = frontier_phi_88_pred_2;
                            _3669 = frontier_phi_88_pred_3;
                            _3668 = frontier_phi_88_pred_4;
                            _3667 = frontier_phi_88_pred_5;
                            _3374 = _3670 + _3387;
                            _3375 = _3671 + _3388;
                            _3376 = _3672 + _3389;
                            _3371 = _3667 + _3384;
                            _3372 = _3668 + _3385;
                            _3373 = _3669 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    _3014 = frontier_phi_82_pred;
                    _3012 = frontier_phi_82_pred_1;
                    _3010 = frontier_phi_82_pred_2;
                    _3008 = frontier_phi_82_pred_3;
                    _3006 = frontier_phi_82_pred_4;
                    _3004 = frontier_phi_82_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3004;
                        _3164 = _3006;
                        _3165 = _3008;
                        _3166 = _3010;
                        _3167 = _3012;
                        _3168 = _3014;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3010;
                frontier_phi_63_64_ladder_1 = _3014;
                frontier_phi_63_64_ladder_2 = _3012;
                frontier_phi_63_64_ladder_3 = _3008;
                frontier_phi_63_64_ladder_4 = _3006;
                frontier_phi_63_64_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_63_64_ladder = _2879;
                frontier_phi_63_64_ladder_1 = _2883;
                frontier_phi_63_64_ladder_2 = _2881;
                frontier_phi_63_64_ladder_3 = _2877;
                frontier_phi_63_64_ladder_4 = _2875;
                frontier_phi_63_64_ladder_5 = _2873;
            }
            _3003 = frontier_phi_63_64_ladder_5;
            _3005 = frontier_phi_63_64_ladder_4;
            _3007 = frontier_phi_63_64_ladder_3;
            _3009 = frontier_phi_63_64_ladder;
            _3011 = frontier_phi_63_64_ladder_2;
            _3013 = frontier_phi_63_64_ladder_1;
        }
        float _3018 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2744 = (_3018 * _3009) + _2256;
        _2746 = (_3018 * _3011) + _2258;
        _2748 = (_3018 * _3013) + _2260;
        _2750 = ((_3003 * _666) * _3018) + _2594;
        _2752 = ((_3005 * _668) * _3018) + _2596;
        _2754 = ((_3007 * _669) * _3018) + _2598;
    }
    else
    {
        _2744 = _2256;
        _2746 = _2258;
        _2748 = _2260;
        _2750 = _2594;
        _2752 = _2596;
        _2754 = _2598;
    }
    uint _2760 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _2769 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _408) * _420.x) * cbInstanceData._m0[_2760].x;
    float _2773 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _408) * _420.y) * cbInstanceData._m0[_2760].y;
    float _2777 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _408) * _420.z) * cbInstanceData._m0[_2760].z;
    vec4 _2785 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2799 = ((((_2769 * _563) - _2769) + _2785.x) * cbMtdParam._m0[3u].x) + _2769;
    float _2800 = ((((_2773 * _563) - _2773) + _2785.y) * cbMtdParam._m0[3u].x) + _2773;
    float _2801 = ((((_2777 * _563) - _2777) + _2785.z) * cbMtdParam._m0[3u].x) + _2777;
    float _4784 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4795 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4806 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2820 = (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2744 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _681))) + ((_2750 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2799;
    float _2821 = (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2746 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _681))) + ((_2752 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2800;
    float _2822 = (((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2748 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _681))) + ((_2754 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2801;
    float _2823 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2824 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2825 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2831 = cbMtdParam._m0[2u].x * _2799;
    float _2832 = cbMtdParam._m0[2u].y * _2800;
    float _2833 = cbMtdParam._m0[2u].z * _2801;
    float _4832 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2835 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    uint _2836 = _614 + 6u;
    float _2844 = _558 / cbSceneParam._m0[86u].x;
    float _2845 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2859 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2861 = _2859.x;
    float _2862 = _2859.y;
    float _2863 = _2859.z;
    float _2864 = _2859.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2898 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2899 = _2898 / _479;
        float _2910 = _2899 * _530;
        float _2911 = _531 * _2899;
        float _2912 = (-0.0) - _2911;
        float _2914 = _2899 * _532;
        float _2916 = (cbSceneParam._m0[77u].w * _2912) / _2898;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2911;
        float _2924 = sqrt(((_2910 * _2910) + (_2911 * _2911)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2898)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2912 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3066 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3120 = ((abs(_2924 / _2912) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2934 * _3075) - exp2(_2934 * _3076)) * _3064))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2844, _2845, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2864);
        _2936 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2861;
        _2938 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2862;
        _2940 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2863;
        _2942 = _3131 * _2864;
    }
    else
    {
        _2936 = _2861;
        _2938 = _2862;
        _2940 = _2863;
        _2942 = _2864;
    }
    bool _3158;
    vec4 _2952;
    vec4 _2974;
    float _2976;
    float _2980;
    float _2981;
    float _2982;
    float _2985;
    float _2988;
    float _2991;
    float _2992;
    bool _3002;
    for (;;)
    {
        _2952 = cbMatDynParam._m0[0u];
        float _2954 = roundEven(_2952.y);
        bool _2955 = _2954 == 3.0;
        float _2956 = log2(_2942);
        float _2960 = exp2(_2956 * cbSceneParam._m0[78u].x);
        float _2961 = exp2(_2956 * cbSceneParam._m0[78u].y);
        float _2962 = exp2(_2956 * cbSceneParam._m0[78u].z);
        float _2963 = _2960 * _2823;
        float _2964 = _2961 * _2824;
        float _2965 = _2962 * _2825;
        float _2972 = _546 + (-0.5);
        _2974 = cbMtdParam._m0[1u];
        _2976 = _2974.y * _2972;
        float _2979 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2980 = _2979 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2936)));
        _2981 = _2979 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = _2979 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _2985 = ((_2831 * _2835) * _2960) * _2979;
        _2988 = ((_2832 * _2835) * _2961) * _2979;
        _2991 = ((_2833 * _2835) * _2962) * _2979;
        _2992 = _2972 * 0.999000012874603271484375;
        _3002 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3002)
        {
            if ((cbInstanceData._m0[_614 + 7u].x + _2992) < 0.5)
            {
                _3158 = true;
                break;
            }
        }
        uint _3099 = _615 + uint(_2952.w);
        if ((cbInstanceData._m0[_3099].w < 1.0) && ((cbInstanceData._m0[_3099].w + _2992) < 0.5))
        {
            _3158 = true;
            break;
        }
        if ((_2976 + 1.0) < _2974.x)
        {
            _3158 = true;
            break;
        }
        _3158 = false;
        break;
    }
    float _3362;
    if (_3158)
    {
        discard_state = true;
        _3362 = 0.0;
    }
    else
    {
        _3362 = cbInstanceData._m0[_2836].w;
    }
    SV_Target.x = _2980;
    SV_Target.y = _2981;
    SV_Target.z = _2982;
    SV_Target.w = _3362;
    SV_Target_1.x = _2985;
    SV_Target_1.y = _2988;
    SV_Target_1.z = _2991;
    SV_Target_1.w = cbInstanceData._m0[_2836].w;
    discard_exit();
}


