#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3536;
float _3537;
float _3538;
float _3539;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _280 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _296 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _310 = ((_280.x * 4.55000019073486328125) * _296.x) * cbMtdParam._m0[9u].x;
    float _313 = ((_280.y * 4.55000019073486328125) * _296.y) * cbMtdParam._m0[9u].y;
    float _316 = ((_280.z * 4.55000019073486328125) * _296.z) * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_252.x * cbMtdParam._m0[10u].x) - _310)) + _310;
    float _324 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_252.y * cbMtdParam._m0[10u].y) - _313)) + _313;
    float _325 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_252.z * cbMtdParam._m0[10u].z) - _316)) + _316;
    vec4 _337 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = _337.z;
    float _347 = exp2(log2(_341 * 22.0) * 260.0);
    float _348 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    vec4 _368 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _380 = ((((isnan(1.0) ? _348 : (isnan(_348) ? 1.0 : min(_348, 1.0))) * (_341 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _368.z);
    float _395 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3558 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _404 = (((_396 * _396) * (3.0 - (_396 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _416 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _424 = (_337.x * 2.0) + (-1.0);
    float _425 = (_337.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3569 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))));
    float _438 = (cbMtdParam._m0[12u].y * ((_368.x * 2.0) + (-1.0))) + _424;
    float _439 = (cbMtdParam._m0[12u].y * ((_368.y * 2.0) + (-1.0))) + _425;
    float _442 = fma(_431, _223 * NORMAL.x, fma(_439, _230 * TANGENT.x, (_216 * _208) * _438));
    float _445 = fma(_431, _223 * NORMAL.y, fma(_439, _230 * TANGENT.y, (_216 * _209) * _438));
    float _448 = fma(_431, _223 * NORMAL.z, fma(_439, _230 * TANGENT.z, (_216 * _210) * _438));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3580 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _456 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3602 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3613 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _759 = sqrt(((_526 * _526) + (_527 * _527)) + (_528 * _528));
        float _765 = (cbMatDynParam._m0[5u].x * _759) + cbMatDynParam._m0[5u].y;
        float _3624 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _770 = (cbMatDynParam._m0[5u].z * _759) + cbMatDynParam._m0[5u].w;
        float _3635 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) - _766)) + _766) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _557 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _559 = _557.w;
    float _578 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _581 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _584 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    vec4 _586 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _597 = (((_586.y - _456) + (_586.w * _456)) * cbMtdParam._m0[3u].x) + _456;
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _611 = _610 + 9u;
    uint _612 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _618 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_612].x;
    float _619 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_612].y;
    float _620 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_612].z;
    float _3646 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _624 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _629 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _635 = cbMtdParam._m0[3u].x * _629.x;
    float _648 = (cbMtdParam._m0[3u].x * (((_621 * _559) - _621) + _624.x)) + _621;
    float _649 = (cbMtdParam._m0[3u].x * (((_622 * _559) - _622) + _624.y)) + _622;
    float _650 = (cbMtdParam._m0[3u].x * (((_623 * _559) - _623) + _624.z)) + _623;
    float _651 = 1.0 - _635;
    float _652 = _648 * _651;
    float _653 = _649 * _651;
    float _654 = _650 * _651;
    float _659 = (_648 + (-0.039999999105930328369140625)) * _635;
    float _660 = (_649 + (-0.039999999105930328369140625)) * _635;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _635;
    float _662 = _659 + 0.039999999105930328369140625;
    float _664 = _660 + 0.039999999105930328369140625;
    float _665 = _661 + 0.039999999105930328369140625;
    vec4 _674 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _677 = _674.x * TEXCOORD_5.w;
    float _678 = dot(vec3(_453, _454, _455), vec3(_533, _534, _535));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _453) - _533;
    float _686 = (_681 * _454) - _534;
    float _687 = (_681 * _455) - _535;
    float _691 = abs(dot(vec3(_533, _534, _535), vec3(_453, _454, _455)));
    float _3679 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_597);
    float _705 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _711 = (1.0 - _705) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _712 = _705 * _693;
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _808 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _812 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _835 = _740 + _453;
        float _836 = _744 + _454;
        float _837 = _748 + _455;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _804;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _808;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _812;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_453, _454, _455), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3727 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_453, _454, _455), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3760 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_453, _454, _455), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3793 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1125 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1129 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1152 = _740 + _453;
        float _1153 = _744 + _454;
        float _1154 = _748 + _455;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_453, _454, _455), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3856 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_453, _454, _455), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3889 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_453, _454, _455), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3922 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = _1078;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1090)) + _1090;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1091)) + _1091;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1092)) + _1092;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _685 * 0.5;
    float _1459 = _686 * 0.5;
    float _1460 = _687 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1589 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1592 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1620 = frontier_phi_17_15_ladder;
        }
        float _1825;
        if (_1589 > 0.0)
        {
            _1825 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1825 = frontier_phi_26_22_ladder;
        }
        float _2079;
        if (_1592 > 0.0)
        {
            _2079 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2079 = frontier_phi_38_33_ladder;
        }
        float _2081 = isnan(_1825) ? _1620 : (isnan(_1620) ? _1825 : min(_1620, _1825));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1586) + _1575;
        float _2087 = (_2082 * _1589) + _1579;
        float _2088 = (_2082 * _1592) + _1583;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2091 = (-1.0) - _2089;
        float _2093 = _2089 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2088 > _2093) || ((_2088 < _2091) || ((_2087 > _2093) || ((_2087 < _2091) || ((_2086 < _2091) || (_2086 > _2093))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2088, cbModelParam._m0[9u].z, fma(_2087, cbModelParam._m0[9u].y, _2086 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2088, cbModelParam._m0[10u].z, fma(_2087, cbModelParam._m0[10u].y, _2086 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2088, cbModelParam._m0[11u].z, fma(_2087, cbModelParam._m0[11u].y, _2086 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_16_38_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_16_38_ladder_2;
        _1610 = frontier_phi_16_38_ladder_1;
        _1612 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1527);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1687 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1690 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1830;
        if (_1684 > 0.0)
        {
            _1830 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1830 = frontier_phi_28_24_ladder;
        }
        float _2106;
        if (_1687 > 0.0)
        {
            _2106 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2106 = frontier_phi_40_35_ladder;
        }
        float _2319;
        if (_1690 > 0.0)
        {
            _2319 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2319 = frontier_phi_49_46_ladder;
        }
        float _2321 = isnan(_2106) ? _1830 : (isnan(_1830) ? _2106 : min(_1830, _2106));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1684) + _1673;
        float _2327 = (_2322 * _1687) + _1677;
        float _2328 = (_2322 * _1690) + _1681;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2329;
        float _2332 = _2329 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2328 > _2332) || ((_2328 < _2330) || ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 < _2330) || (_2326 > _2332))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2328, cbModelParam._m0[17u].z, fma(_2327, cbModelParam._m0[17u].y, _2326 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2328, cbModelParam._m0[18u].z, fma(_2327, cbModelParam._m0[18u].y, _2326 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2328, cbModelParam._m0[19u].z, fma(_2327, cbModelParam._m0[19u].y, _2326 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_25_49_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_49_ladder_2;
        _1711 = frontier_phi_25_49_ladder_1;
        _1713 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1617);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1726 = (((_711 * _662) + _712) * _677) * ((cbModelParam._m0[1u].w * (_1709 - _1608)) + _1608);
    float _1728 = (((_711 * _664) + _712) * _677) * ((cbModelParam._m0[1u].w * (_1711 - _1610)) + _1610);
    float _1730 = (((_711 * _665) + _712) * _677) * ((cbModelParam._m0[1u].w * (_1713 - _1612)) + _1612);
    float _1733 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _677 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1784 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1788 = _1751 | 1u;
    float _1799 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_453, _454, _455));
    float _1802 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_453, _454, _455));
    float _4058 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _4069 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1807 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1809 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1816 = ((cbLight._m0[_1768].x * _1774) * _1809) + ((cbLight._m0[_1778].x * _1784) * _1807);
    float _1817 = ((_1774 * cbLight._m0[_1768].y) * _1809) + ((_1784 * cbLight._m0[_1778].y) * _1807);
    float _1818 = ((_1774 * cbLight._m0[_1768].z) * _1809) + ((_1784 * cbLight._m0[_1778].z) * _1807);
    uvec4 _1822 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1824 = _1822.x == 0u;
    float _1835;
    float _1837;
    float _1839;
    if (_1824)
    {
        _1835 = _1816;
        _1837 = _1817;
        _1839 = _1818;
    }
    else
    {
        uint _1843 = _1751 + 6u;
        float _1859 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _4080 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1862 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1835 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1816;
        _1837 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1817;
        _1839 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1818;
    }
    bool _1842 = _1822.y == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1842)
    {
        _1880 = _1835;
        _1882 = _1837;
        _1884 = _1839;
    }
    else
    {
        uint _2050 = _1751 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _4096 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2069 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1880 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1835;
        _1882 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1837;
        _1884 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1839;
    }
    uint _1887 = _1751 + 8u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _597) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1751].x + _533;
    float _1903 = cbLight._m0[_1751].y + _534;
    float _1904 = cbLight._m0[_1751].z + _535;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1751].xyz));
    float _4112 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1916 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1917 = dot(vec3(_453, _454, _455), vec3(_1909, _1910, _1911));
    float _4134 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1909, _1910, _1911));
    float _4145 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1901 * _1901;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1937 = exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0);
    float _1938 = 0.959999978542327880859375 - _659;
    float _1940 = 0.959999978542327880859375 - _660;
    float _1941 = 0.959999978542327880859375 - _661;
    float _1948 = 1.0 - _1901;
    float _1959 = (0.5 / (((_1916 * ((_1915 * _1948) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _1948) + _1901) * _1915))) * _1915;
    float _4156 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    uint _1972 = _1751 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _597) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1788].x + _533;
    float _1986 = cbLight._m0[_1788].y + _534;
    float _1987 = cbLight._m0[_1788].z + _535;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1788].xyz));
    float _4167 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _1999 = dot(vec3(_453, _454, _455), vec3(_1992, _1993, _1994));
    float _4178 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1992, _1993, _1994));
    float _4189 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
    float _2025 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1916 * ((_1998 * _2025) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _2025) + _1984) * _1998))) * _1998;
    float _4200 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2047 = (((((_2018 * _1938) + _662) * cbLight._m0[_1972].x) * _2037) * _1774) + (((((_1937 * _1938) + _662) * cbLight._m0[_1887].x) * _1961) * _1784);
    float _2048 = (((((_2018 * _1940) + _664) * cbLight._m0[_1972].y) * _2037) * _1774) + (((((_1937 * _1940) + _664) * cbLight._m0[_1887].y) * _1961) * _1784);
    float _2049 = (((((_2018 * _1941) + _665) * cbLight._m0[_1972].z) * _2037) * _1774) + (((((_1937 * _1941) + _665) * cbLight._m0[_1887].z) * _1961) * _1784);
    float _2111;
    float _2113;
    float _2115;
    if (_1824)
    {
        _2111 = _2047;
        _2113 = _2048;
        _2115 = _2049;
    }
    else
    {
        uint _2117 = _1751 + 2u;
        uint _2121 = _1751 + 10u;
        float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _597) * 0.949999988079071044921875);
        float _2136 = _2135 * _2135;
        float _2137 = cbLight._m0[_2117].x + _533;
        float _2138 = cbLight._m0[_2117].y + _534;
        float _2139 = cbLight._m0[_2117].z + _535;
        float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
        float _2144 = _2143 * _2137;
        float _2145 = _2143 * _2138;
        float _2146 = _2143 * _2139;
        float _2147 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2117].xyz));
        float _4211 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2151 = dot(vec3(_453, _454, _455), vec3(_2144, _2145, _2146));
        float _4222 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2144, _2145, _2146));
        float _4233 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2159 = _2136 * _2136;
        float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
        float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
        float _2177 = 1.0 - _2136;
        float _2187 = (0.5 / (((_1916 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _2177) + _2136) * _2150))) * _2150;
        float _4244 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2111 = (((((_2170 * _1938) + _662) * cbLight._m0[_2121].x) * _2189) * _2190) + _2047;
        _2113 = (((((_2170 * _1940) + _664) * cbLight._m0[_2121].y) * _2189) * _2190) + _2048;
        _2115 = (((((_2170 * _1941) + _665) * cbLight._m0[_2121].z) * _2189) * _2190) + _2049;
    }
    float _2225;
    float _2227;
    float _2229;
    if (_1842)
    {
        _2225 = _2111;
        _2227 = _2113;
        _2229 = _2115;
    }
    else
    {
        uint _2236 = _1751 + 3u;
        uint _2240 = _1751 + 11u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _597) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _533;
        float _2257 = cbLight._m0[_2236].y + _534;
        float _2258 = cbLight._m0[_2236].z + _535;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2236].xyz));
        float _4260 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2270 = dot(vec3(_453, _454, _455), vec3(_2263, _2264, _2265));
        float _4271 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4282 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0);
        float _2296 = 1.0 - _2255;
        float _2306 = (0.5 / (((_1916 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _2296) + _2255) * _2269))) * _2269;
        float _4293 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2308 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2309 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2225 = (((((_2289 * _1938) + _662) * cbLight._m0[_2240].x) * _2308) * _2309) + _2111;
        _2227 = (((((_2289 * _1940) + _664) * cbLight._m0[_2240].y) * _2308) * _2309) + _2113;
        _2229 = (((((_2289 * _1941) + _665) * cbLight._m0[_2240].z) * _2308) * _2309) + _2115;
    }
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    if (_1749.y == 0u)
    {
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2384;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2384;
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2384;
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.x;
        uint _2411 = uint((float(_2399.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2400))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2400)));
        float _2421 = (log2(_2387 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2422 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        uint _2425 = uint(isnan(14.0) ? _2422 : (isnan(_2422) ? 14.0 : min(_2422, 14.0)));
        uvec4 _2430 = texelFetch(g_lightClusterGridBuffer, int(((_2425 << 2u) + (_2411 << 6u)) >> 2u));
        uint _2431 = _2430.x;
        uint _2432 = _2399.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2432 >> 4u) & 15u)) + 4294967295u) & _2431) == 0u) || ((_2432 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            uint _2762 = 0u;
            uint _2771;
            bool _2772;
            for (;;)
            {
                _2771 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                _2772 = _2771 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2772)
                {
                    frontier_phi_66_pred = _2756;
                    frontier_phi_66_pred_1 = _2761;
                    frontier_phi_66_pred_2 = _2760;
                    frontier_phi_66_pred_3 = _2759;
                    frontier_phi_66_pred_4 = _2758;
                    frontier_phi_66_pred_5 = _2757;
                }
                else
                {
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    uint _2907;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2771;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2911 = uint(findLSB(_2907)) + (_2762 << 5u);
                        uint _2908 = (_2907 + 4294967295u) & _2907;
                        uint _2913 = _2911 * 48u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2933 = (_2911 * 48u) + 4u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2952 = (_2911 * 48u) + 8u;
                        vec3 _2963 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x));
                        float _2967 = _2927.x - _2385;
                        float _2968 = _2927.y - _2386;
                        float _2969 = _2927.z - _2387;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_578, _581, _584), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2927.w);
                        float _4319 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2984 = sqrt(_2970) * _2946.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2977) + _2988;
                        float _2994 = _2984 * _2984;
                        float _2998 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2983) / ((_2994 * 0.699999988079071044921875) + 1.0);
                        float _3002 = (-0.0) - _2385;
                        float _3003 = (-0.0) - _2386;
                        float _3004 = (-0.0) - _2387;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3019 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                        float _3020 = 1.0 - _693;
                        float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                        float _3028 = _3027 * _3027;
                        float _3029 = _3028 * _3028;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3040 = dot(vec3(_578, _581, _584), vec3(_3009, _3010, _3011));
                        float _4335 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3044 = dot(vec3(_578, _581, _584), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                        float _4346 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                        float _3052 = _2987 * _3028;
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _2977) + _3053;
                        float _4357 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3058 = 1.0 - _3028;
                        float _3068 = (0.5 / (((_3057 * ((_3043 * _3058) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3028) * _3043))) * _3057;
                        float _4368 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3079 = (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3051 * _3051) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2831 = (_2998 * _2946.x) + _2904;
                        _2832 = (_2998 * _2946.y) + _2905;
                        _2833 = (_2998 * _2946.z) + _2906;
                        _2828 = (_3079 * _2963.x) + _2901;
                        _2829 = (_3079 * _2963.y) + _2902;
                        _2830 = (_3079 * _2963.z) + _2903;
                        if (_2908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2908;
                        }
                    }
                    frontier_phi_66_pred = _2828;
                    frontier_phi_66_pred_1 = _2833;
                    frontier_phi_66_pred_2 = _2832;
                    frontier_phi_66_pred_3 = _2831;
                    frontier_phi_66_pred_4 = _2830;
                    frontier_phi_66_pred_5 = _2829;
                }
                _2595 = frontier_phi_66_pred;
                _2605 = frontier_phi_66_pred_1;
                _2603 = frontier_phi_66_pred_2;
                _2601 = frontier_phi_66_pred_3;
                _2599 = frontier_phi_66_pred_4;
                _2597 = frontier_phi_66_pred_5;
                uint _2763 = _2762 + 1u;
                if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2756 = _2595;
                    _2757 = _2597;
                    _2758 = _2599;
                    _2759 = _2601;
                    _2760 = _2603;
                    _2761 = _2605;
                    _2762 = _2763;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((4294967295u << _2611) & _2431) == 0u)
        {
            _2724 = _2594;
            _2726 = _2596;
            _2728 = _2598;
            _2730 = _2600;
            _2732 = _2602;
            _2734 = _2604;
        }
        else
        {
            float _2749 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
            float _2750 = _2749 * _2385;
            float _2751 = _2749 * _2386;
            float _2752 = _2749 * _2387;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2884 = _2594;
                float _2885 = _2596;
                float _2886 = _2598;
                float _2887 = _2600;
                float _2888 = _2602;
                float _2889 = _2604;
                uint _2890 = _2611;
                uint _2899;
                bool _2900;
                for (;;)
                {
                    _2899 = texelFetch(g_lightClassification, int((((_2425 << 5u) + (_2411 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                    _2900 = _2899 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2900)
                    {
                        frontier_phi_77_pred = _2889;
                        frontier_phi_77_pred_1 = _2888;
                        frontier_phi_77_pred_2 = _2887;
                        frontier_phi_77_pred_3 = _2886;
                        frontier_phi_77_pred_4 = _2885;
                        frontier_phi_77_pred_5 = _2884;
                    }
                    else
                    {
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        uint _3112 = _2899;
                        uint _3113;
                        vec4 _3138;
                        float _3139;
                        vec4 _3154;
                        vec3 _3166;
                        vec4 _3182;
                        vec4 _3198;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3123 = ((_2890 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 4u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3123 * 40u) + 8u;
                            _3166 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x));
                            uint _3169 = (_3123 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3123 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3201 = (_3123 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3123 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_2387, _3233.z, fma(_2386, _3233.y, _3233.x * _2385)) + _3233.w;
                            _3246 = !((fma(_2387, _3214.z, fma(_2386, _3214.y, _3214.x * _2385)) + _3214.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3138.x - _2385;
                                float _3274 = _3138.y - _2386;
                                float _3275 = _3138.z - _2387;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3139 * _3139));
                                float _4379 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3291 = sqrt(_3276) * _3154.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_578, _581, _584))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_2387, _3182.z, fma(_2386, _3182.y, _3182.x * _2385)) + _3182.w) / _3245;
                                float _3305 = (fma(_2387, _3198.z, fma(_2386, _3198.y, _3198.x * _2385)) + _3198.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4395 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _693;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2750;
                                float _3335 = _3281 - _2751;
                                float _3336 = _3282 - _2752;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2750, (-0.0) - _2751, (-0.0) - _2752));
                                float _4406 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3348 = dot(vec3(_578, _581, _584), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4417 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_578, _581, _584), vec3(_3280, _3281, _3282))) + _3357;
                                float _4428 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4439 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3311 * _3154.y;
                                frontier_phi_83_pred_1 = _3311 * _3154.x;
                                frontier_phi_83_pred_2 = _3385 * _3166.z;
                                frontier_phi_83_pred_3 = _3385 * _3166.y;
                                frontier_phi_83_pred_4 = _3385 * _3166.x;
                                frontier_phi_83_pred_5 = _3311 * _3154.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_83_pred;
                            _3392 = frontier_phi_83_pred_1;
                            _3391 = frontier_phi_83_pred_2;
                            _3390 = frontier_phi_83_pred_3;
                            _3389 = frontier_phi_83_pred_4;
                            _3394 = frontier_phi_83_pred_5;
                            _3096 = _3392 + _3109;
                            _3097 = _3393 + _3110;
                            _3098 = _3394 + _3111;
                            _3093 = _3389 + _3106;
                            _3094 = _3390 + _3107;
                            _3095 = _3391 + _3108;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3098;
                        frontier_phi_77_pred_1 = _3097;
                        frontier_phi_77_pred_2 = _3096;
                        frontier_phi_77_pred_3 = _3095;
                        frontier_phi_77_pred_4 = _3094;
                        frontier_phi_77_pred_5 = _3093;
                    }
                    _2735 = frontier_phi_77_pred;
                    _2733 = frontier_phi_77_pred_1;
                    _2731 = frontier_phi_77_pred_2;
                    _2729 = frontier_phi_77_pred_3;
                    _2727 = frontier_phi_77_pred_4;
                    _2725 = frontier_phi_77_pred_5;
                    uint _2891 = _2890 + 1u;
                    if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2884 = _2725;
                        _2885 = _2727;
                        _2886 = _2729;
                        _2887 = _2731;
                        _2888 = _2733;
                        _2889 = _2735;
                        _2890 = _2891;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2729;
                frontier_phi_58_59_ladder_1 = _2735;
                frontier_phi_58_59_ladder_2 = _2733;
                frontier_phi_58_59_ladder_3 = _2731;
                frontier_phi_58_59_ladder_4 = _2727;
                frontier_phi_58_59_ladder_5 = _2725;
            }
            else
            {
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            _2724 = frontier_phi_58_59_ladder_5;
            _2726 = frontier_phi_58_59_ladder_4;
            _2728 = frontier_phi_58_59_ladder;
            _2730 = frontier_phi_58_59_ladder_3;
            _2732 = frontier_phi_58_59_ladder_2;
            _2734 = frontier_phi_58_59_ladder_1;
        }
        float _2739 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2444 = (_2739 * _2730) + _1880;
        _2446 = (_2739 * _2732) + _1882;
        _2448 = (_2739 * _2734) + _1884;
        _2450 = ((_2724 * _662) * _2739) + _2225;
        _2452 = ((_2726 * _664) * _2739) + _2227;
        _2454 = ((_2728 * _665) * _2739) + _2229;
    }
    else
    {
        _2444 = _1880;
        _2446 = _1882;
        _2448 = _1884;
        _2450 = _2225;
        _2452 = _2227;
        _2454 = _2229;
    }
    uint _2460 = _611 + uint(cbMatDynParam._m0[0u].w);
    float _2469 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _404) * _416.x) * cbInstanceData._m0[_2460].x;
    float _2473 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _404) * _416.y) * cbInstanceData._m0[_2460].y;
    float _2477 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _404) * _416.z) * cbInstanceData._m0[_2460].z;
    vec4 _2485 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2499 = ((((_2469 * _559) - _2469) + _2485.x) * cbMtdParam._m0[3u].x) + _2469;
    float _2500 = ((((_2473 * _559) - _2473) + _2485.y) * cbMtdParam._m0[3u].x) + _2473;
    float _2501 = ((((_2477 * _559) - _2477) + _2485.z) * cbMtdParam._m0[3u].x) + _2477;
    float _4455 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4466 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4477 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2520 = (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2444 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _677))) + ((_2450 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + _2499;
    float _2521 = (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2446 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _677))) + ((_2452 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + _2500;
    float _2522 = (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2448 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _677))) + ((_2454 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1516)) * cbPerFrame._m0[3u].x)) + _2501;
    float _2523 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2525 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2531 = cbMtdParam._m0[2u].x * _2499;
    float _2532 = cbMtdParam._m0[2u].y * _2500;
    float _2533 = cbMtdParam._m0[2u].z * _2501;
    float _4503 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2535 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    uint _2536 = _610 + 6u;
    float _2544 = _554 / cbSceneParam._m0[86u].x;
    float _2545 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2620 = _2619 / _475;
        float _2631 = _2620 * _526;
        float _2632 = _527 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2635 = _2620 * _528;
        float _2637 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2638 = _2637 + cbSceneParam._m0[79u].w;
        float _2639 = cbSceneParam._m0[79u].w - _2632;
        float _2645 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2635 * _2635));
        float _2648 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2645;
        float _2653 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2655 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2633 - _2637) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2638 > 0.0) ? exp2(_2653 * _2638) : (2.0 - exp2(_2655 * _2638))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2648;
        }
        else
        {
            float _2785 = 1.0 / cbSceneParam._m0[80u].x;
            float _2786 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : max(_2638, _2639));
            float _2787 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : min(_2638, _2639));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            _2841 = ((abs(_2645 / _2633) * cbSceneParam._m0[80u].y) * ((((_2796 - _2797) * 2.0) - ((exp2(_2653 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0)))) - exp2(_2653 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))))) * _2785)) - ((exp2(_2655 * _2796) - exp2(_2655 * _2797)) * _2785))) + (_2648 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2564);
        _2657 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2659 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2661 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2663 = _2852 * _2564;
    }
    else
    {
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
        _2663 = _2564;
    }
    bool _2879;
    vec4 _2673;
    vec4 _2695;
    float _2697;
    float _2701;
    float _2702;
    float _2703;
    float _2706;
    float _2709;
    float _2712;
    float _2713;
    bool _2723;
    for (;;)
    {
        _2673 = cbMatDynParam._m0[0u];
        float _2675 = roundEven(_2673.y);
        bool _2676 = _2675 == 3.0;
        float _2677 = log2(_2663);
        float _2681 = exp2(_2677 * cbSceneParam._m0[78u].x);
        float _2682 = exp2(_2677 * cbSceneParam._m0[78u].y);
        float _2683 = exp2(_2677 * cbSceneParam._m0[78u].z);
        float _2684 = _2681 * _2523;
        float _2685 = _2682 * _2524;
        float _2686 = _2683 * _2525;
        float _2693 = _542 + (-0.5);
        _2695 = cbMtdParam._m0[1u];
        _2697 = _2695.y * _2693;
        float _2700 = (_2675 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2701 = _2700 * (_2676 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2657)));
        _2702 = _2700 * (_2676 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
        _2703 = _2700 * (_2676 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
        _2706 = ((_2531 * _2535) * _2681) * _2700;
        _2709 = ((_2532 * _2535) * _2682) * _2700;
        _2712 = ((_2533 * _2535) * _2683) * _2700;
        _2713 = _2693 * 0.999000012874603271484375;
        _2723 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2723)
        {
            if ((cbInstanceData._m0[_610 + 7u].x + _2713) < 0.5)
            {
                _2879 = true;
                break;
            }
        }
        uint _2820 = _611 + uint(_2673.w);
        if ((cbInstanceData._m0[_2820].w < 1.0) && ((cbInstanceData._m0[_2820].w + _2713) < 0.5))
        {
            _2879 = true;
            break;
        }
        if ((_2697 + 1.0) < _2695.x)
        {
            _2879 = true;
            break;
        }
        _2879 = false;
        break;
    }
    float _3084;
    if (_2879)
    {
        discard_state = true;
        _3084 = 0.0;
    }
    else
    {
        _3084 = cbInstanceData._m0[_2536].w;
    }
    SV_Target.x = _2701;
    SV_Target.y = _2702;
    SV_Target.z = _2703;
    SV_Target.w = _3084;
    SV_Target_1.x = _2706;
    SV_Target_1.y = _2709;
    SV_Target_1.z = _2712;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
    discard_exit();
}


