#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1033;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _276 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _292 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _306 = ((_276.x * 4.55000019073486328125) * _292.x) * cbMtdParam._m0[9u].x;
    float _309 = ((_276.y * 4.55000019073486328125) * _292.y) * cbMtdParam._m0[9u].y;
    float _312 = ((_276.z * 4.55000019073486328125) * _292.z) * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_248.x * cbMtdParam._m0[10u].x) - _306)) + _306;
    float _320 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_248.y * cbMtdParam._m0[10u].y) - _309)) + _309;
    float _321 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_248.z * cbMtdParam._m0[10u].z) - _312)) + _312;
    vec4 _333 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = _333.z;
    float _343 = exp2(log2(_337 * 22.0) * 260.0);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    vec4 _364 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _376 = ((((isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0))) * (_337 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _364.z);
    float _391 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3447 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _400 = (((_392 * _392) * (3.0 - (_392 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _412 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _420 = (_333.x * 2.0) + (-1.0);
    float _421 = (_333.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_420, _421), vec2(_420, _421));
    float _3458 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))));
    float _434 = (cbMtdParam._m0[12u].y * ((_364.x * 2.0) + (-1.0))) + _420;
    float _435 = (cbMtdParam._m0[12u].y * ((_364.y * 2.0) + (-1.0))) + _421;
    float _438 = fma(_427, _219 * NORMAL.x, fma(_435, _226 * TANGENT.x, (_212 * _204) * _434));
    float _441 = fma(_427, _219 * NORMAL.y, fma(_435, _226 * TANGENT.y, (_212 * _205) * _434));
    float _444 = fma(_427, _219 * NORMAL.z, fma(_435, _226 * TANGENT.z, (_212 * _206) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3469 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _452 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _3480 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3491 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3502 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _471 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _522 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _512);
    float _523 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _512);
    float _524 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _512);
    float _528 = inversesqrt(dot(vec3(_522, _523, _524), vec3(_522, _523, _524)));
    float _529 = _522 * _528;
    float _530 = _523 * _528;
    float _531 = _524 * _528;
    float _537 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _538 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _540 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _542 = _540.w;
    float _562 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _565 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _568 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    vec4 _570 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _581 = (((_570.y - _452) + (_570.w * _452)) * cbMtdParam._m0[3u].x) + _452;
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _594 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3513 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    vec4 _608 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _613 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _619 = cbMtdParam._m0[3u].x * _613.x;
    float _632 = (cbMtdParam._m0[3u].x * (((_605 * _542) - _605) + _608.x)) + _605;
    float _633 = (cbMtdParam._m0[3u].x * (((_606 * _542) - _606) + _608.y)) + _606;
    float _634 = (cbMtdParam._m0[3u].x * (((_607 * _542) - _607) + _608.z)) + _607;
    float _635 = 1.0 - _619;
    float _636 = _632 * _635;
    float _637 = _633 * _635;
    float _638 = _634 * _635;
    float _643 = (_632 + (-0.039999999105930328369140625)) * _619;
    float _644 = (_633 + (-0.039999999105930328369140625)) * _619;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _619;
    float _646 = _643 + 0.039999999105930328369140625;
    float _648 = _644 + 0.039999999105930328369140625;
    float _649 = _645 + 0.039999999105930328369140625;
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _537, cbSceneParam._m0[86u].y * _538));
    float _661 = _658.x * TEXCOORD_5.w;
    float _662 = dot(vec3(_449, _450, _451), vec3(_529, _530, _531));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _449) - _529;
    float _670 = (_665 * _450) - _530;
    float _671 = (_665 * _451) - _531;
    float _675 = abs(dot(vec3(_529, _530, _531), vec3(_449, _450, _451)));
    float _3546 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_581);
    float _689 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _695 = (1.0 - _689) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _696 = _689 * _677;
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _763 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _767 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _790 = _724 + _449;
        float _791 = _728 + _450;
        float _792 = _732 + _451;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _759;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _763;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _767;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_449, _450, _451), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3594 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_449, _450, _451), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3627 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_449, _450, _451), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3660 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1073 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1077 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1081 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1104 = _724 + _449;
        float _1105 = _728 + _450;
        float _1106 = _732 + _451;
        float _1116 = fma(_1106, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1104)) - _1073;
        float _1117 = fma(_1106, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1104)) - _1077;
        float _1118 = fma(_1106, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1104)) - _1081;
        float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
        float _1135 = ((_1122 * _1116) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1073 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1122 * _1117) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1077 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1122 * _1118) / cbModelParam._m0[35u].z) + ((((((_1081 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1135, _1136, _1137), 0.0);
        float _1172 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1139.x + (-0.5));
        float _1174 = _1172 * (_1139.y + (-0.5));
        float _1175 = _1172 * (_1139.z + (-0.5));
        float _1182 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1146.x + (-0.5));
        float _1184 = _1182 * (_1146.y + (-0.5));
        float _1185 = _1182 * (_1146.z + (-0.5));
        float _1192 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1153.x + (-0.5));
        float _1194 = _1192 * (_1153.y + (-0.5));
        float _1195 = _1192 * (_1153.z + (-0.5));
        float _1202 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1160.x + (-0.5));
        float _1204 = _1202 * (_1160.y + (-0.5));
        float _1205 = _1202 * (_1160.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_449, _450, _451), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3723 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1236 + 1.0))) + _1241) * _1206;
        float _1251 = _1174 * 0.5;
        float _1252 = _1184 * 0.5;
        float _1253 = _1194 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_449, _450, _451), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3756 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1278 + 1.0))) + _1283) * _1207;
        float _1293 = _1175 * 0.5;
        float _1294 = _1185 * 0.5;
        float _1295 = _1195 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_449, _450, _451), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3789 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1320 + 1.0))) + _1325) * _1208;
        _1342 = _1175;
        _1343 = _1174;
        _1344 = _1173;
        _1345 = _1185;
        _1346 = _1184;
        _1347 = _1183;
        _1348 = _1195;
        _1349 = _1194;
        _1350 = _1193;
        _1351 = _1208;
        _1352 = _1207;
        _1353 = _1206;
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
    }
    else
    {
        _1342 = _1033;
        _1343 = _1033;
        _1344 = _1033;
        _1345 = _1033;
        _1346 = _1033;
        _1347 = _1033;
        _1348 = _1033;
        _1349 = _1033;
        _1350 = _1033;
        _1351 = _1033;
        _1352 = _1033;
        _1353 = _1033;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1045)) + _1045;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1046)) + _1046;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1389 = fma(_1368, cbSceneParam._m0[89u].z, fma(_1367, cbSceneParam._m0[89u].y, _1366 * cbSceneParam._m0[89u].x));
    float _1392 = fma(_1368, cbSceneParam._m0[90u].z, fma(_1367, cbSceneParam._m0[90u].y, _1366 * cbSceneParam._m0[90u].x));
    float _1395 = fma(_1368, cbSceneParam._m0[91u].z, fma(_1367, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1366));
    float _1410 = _669 * 0.5;
    float _1411 = _670 * 0.5;
    float _1412 = _671 * 0.5;
    float _1413 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1416 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1419 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1453;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1426 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1430 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1434 = dot(vec4(_1410, _1411, _1412, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1441 = dot(vec4(cbModelParam._m0[39u]), vec4(_1410, _1411, _1412, 1.0));
        _1453 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1453 = 1.0;
    }
    float _1464;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1455 = dot(vec4(cbModelParam._m0[40u]), vec4(_1410, _1411, _1412, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1468 = (_1464 * cbModelParam._m0[1u].x) + (_1453 * (1.0 - cbModelParam._m0[1u].x));
    float _1478 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _581);
    float _1479 = isnan(_1478) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1478 : min(cbModelParam._m0[25u].z, _1478));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1527 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1531 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1535 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1538 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1541 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1544 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1572;
        if (_1538 > 0.0)
        {
            _1572 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1572 = frontier_phi_14_12_ladder;
        }
        float _1777;
        if (_1541 > 0.0)
        {
            _1777 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1777 = frontier_phi_23_19_ladder;
        }
        float _2031;
        if (_1544 > 0.0)
        {
            _2031 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2031 = frontier_phi_35_30_ladder;
        }
        float _2033 = isnan(_1777) ? _1572 : (isnan(_1572) ? _1777 : min(_1572, _1777));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1538) + _1527;
        float _2039 = (_2034 * _1541) + _1531;
        float _2040 = (_2034 * _1544) + _1535;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1479);
            frontier_phi_13_35_ladder = _2168.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2168.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2168.x * cbModelParam._m0[1u].y;
        }
        _1560 = frontier_phi_13_35_ladder_2;
        _1562 = frontier_phi_13_35_ladder_1;
        _1564 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1479);
        _1560 = _1548.x * cbModelParam._m0[1u].y;
        _1562 = _1548.y * cbModelParam._m0[1u].y;
        _1564 = _1548.z * cbModelParam._m0[1u].y;
    }
    float _1568 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _581);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1568 : min(cbModelParam._m0[25u].w, _1568));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1625 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1629 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1633 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1636 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1639 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1642 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1782;
        if (_1636 > 0.0)
        {
            _1782 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1782 = frontier_phi_25_21_ladder;
        }
        float _2058;
        if (_1639 > 0.0)
        {
            _2058 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2058 = frontier_phi_37_32_ladder;
        }
        float _2271;
        if (_1642 > 0.0)
        {
            _2271 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2271 = frontier_phi_46_43_ladder;
        }
        float _2273 = isnan(_2058) ? _1782 : (isnan(_1782) ? _2058 : min(_1782, _2058));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1636) + _1625;
        float _2279 = (_2274 * _1639) + _1629;
        float _2280 = (_2274 * _1642) + _1633;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2280, cbModelParam._m0[17u].z, fma(_2279, cbModelParam._m0[17u].y, _2278 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2280, cbModelParam._m0[18u].z, fma(_2279, cbModelParam._m0[18u].y, _2278 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2280, cbModelParam._m0[19u].z, fma(_2279, cbModelParam._m0[19u].y, _2278 * cbModelParam._m0[19u].x))), _1569);
            frontier_phi_22_46_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1661 = frontier_phi_22_46_ladder_2;
        _1663 = frontier_phi_22_46_ladder_1;
        _1665 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1569);
        _1661 = _1645.x * cbModelParam._m0[1u].z;
        _1663 = _1645.y * cbModelParam._m0[1u].z;
        _1665 = _1645.z * cbModelParam._m0[1u].z;
    }
    float _1678 = (((_695 * _646) + _696) * _661) * ((cbModelParam._m0[1u].w * (_1661 - _1560)) + _1560);
    float _1680 = (((_695 * _648) + _696) * _661) * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1682 = (((_695 * _649) + _696) * _661) * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1685 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, _1678 * cbSceneParam._m0[91u].x));
    uvec4 _1701 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1703 = _1701.x * 14u;
    uint _1704 = _1703 + 13u;
    float _1711 = _661 + (-1.0);
    float _1716 = (cbLight._m0[_1704].x * _1711) + 1.0;
    float _1717 = (cbLight._m0[_1704].y * _1711) + 1.0;
    float _1718 = (cbLight._m0[_1704].z * _1711) + 1.0;
    float _1719 = (cbLight._m0[_1704].w * _1711) + 1.0;
    uint _1720 = _1703 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1703 + 4u;
    float _1736 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1740 = _1703 | 1u;
    float _1751 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_449, _450, _451));
    float _1754 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_449, _450, _451));
    float _3925 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _3936 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1759 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.3183098733425140380859375;
    float _1761 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1768 = ((cbLight._m0[_1720].x * _1726) * _1761) + ((cbLight._m0[_1730].x * _1736) * _1759);
    float _1769 = ((_1726 * cbLight._m0[_1720].y) * _1761) + ((_1736 * cbLight._m0[_1730].y) * _1759);
    float _1770 = ((_1726 * cbLight._m0[_1720].z) * _1761) + ((_1736 * cbLight._m0[_1730].z) * _1759);
    uvec4 _1774 = floatBitsToUint(cbLight._m0[_1703 + 12u]);
    bool _1776 = _1774.x == 0u;
    float _1787;
    float _1789;
    float _1791;
    if (_1776)
    {
        _1787 = _1768;
        _1789 = _1769;
        _1791 = _1770;
    }
    else
    {
        uint _1795 = _1703 + 6u;
        float _1811 = (dot(vec3(cbLight._m0[_1703 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1812 = _1811 * _1811;
        float _3947 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1814 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1787 = (((cbLight._m0[_1795].x * 0.3183098733425140380859375) * _1813) * _1814) + _1768;
        _1789 = (((cbLight._m0[_1795].y * 0.3183098733425140380859375) * _1813) * _1814) + _1769;
        _1791 = (((cbLight._m0[_1795].z * 0.3183098733425140380859375) * _1813) * _1814) + _1770;
    }
    bool _1794 = _1774.y == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1794)
    {
        _1832 = _1787;
        _1834 = _1789;
        _1836 = _1791;
    }
    else
    {
        uint _2002 = _1703 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1703 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3963 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2021 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1832 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1787;
        _1834 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1789;
        _1836 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1791;
    }
    uint _1839 = _1703 + 8u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _581) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1703].x + _529;
    float _1855 = cbLight._m0[_1703].y + _530;
    float _1856 = cbLight._m0[_1703].z + _531;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1703].xyz));
    float _3979 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1868 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1869 = dot(vec3(_449, _450, _451), vec3(_1861, _1862, _1863));
    float _4001 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1861, _1862, _1863));
    float _4012 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1853 * _1853;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1889 = exp2(log2(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * 5.0);
    float _1890 = 0.959999978542327880859375 - _643;
    float _1892 = 0.959999978542327880859375 - _644;
    float _1893 = 0.959999978542327880859375 - _645;
    float _1900 = 1.0 - _1853;
    float _1911 = (0.5 / (((_1868 * ((_1867 * _1900) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1900) + _1853) * _1867))) * _1867;
    float _4023 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    uint _1924 = _1703 + 9u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _581) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1740].x + _529;
    float _1938 = cbLight._m0[_1740].y + _530;
    float _1939 = cbLight._m0[_1740].z + _531;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1740].xyz));
    float _4034 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1951 = dot(vec3(_449, _450, _451), vec3(_1944, _1945, _1946));
    float _4045 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1944, _1945, _1946));
    float _4056 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1936 * _1936;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _1977 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1868 * ((_1950 * _1977) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1977) + _1936) * _1950))) * _1950;
    float _4067 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    float _1999 = (((((_1970 * _1890) + _646) * cbLight._m0[_1924].x) * _1989) * _1726) + (((((_1889 * _1890) + _646) * cbLight._m0[_1839].x) * _1913) * _1736);
    float _2000 = (((((_1970 * _1892) + _648) * cbLight._m0[_1924].y) * _1989) * _1726) + (((((_1889 * _1892) + _648) * cbLight._m0[_1839].y) * _1913) * _1736);
    float _2001 = (((((_1970 * _1893) + _649) * cbLight._m0[_1924].z) * _1989) * _1726) + (((((_1889 * _1893) + _649) * cbLight._m0[_1839].z) * _1913) * _1736);
    float _2063;
    float _2065;
    float _2067;
    if (_1776)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1703 + 2u;
        uint _2073 = _1703 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _581) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _529;
        float _2090 = cbLight._m0[_2069].y + _530;
        float _2091 = cbLight._m0[_2069].z + _531;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2069].xyz));
        float _4078 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2103 = dot(vec3(_449, _450, _451), vec3(_2096, _2097, _2098));
        float _4089 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4100 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1868 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _2129) + _2088) * _2102))) * _2102;
        float _4111 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2063 = (((((_2122 * _1890) + _646) * cbLight._m0[_2073].x) * _2141) * _2142) + _1999;
        _2065 = (((((_2122 * _1892) + _648) * cbLight._m0[_2073].y) * _2141) * _2142) + _2000;
        _2067 = (((((_2122 * _1893) + _649) * cbLight._m0[_2073].z) * _2141) * _2142) + _2001;
    }
    float _2177;
    float _2179;
    float _2181;
    if (_1794)
    {
        _2177 = _2063;
        _2179 = _2065;
        _2181 = _2067;
    }
    else
    {
        uint _2188 = _1703 + 3u;
        uint _2192 = _1703 + 11u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _581) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _529;
        float _2209 = cbLight._m0[_2188].y + _530;
        float _2210 = cbLight._m0[_2188].z + _531;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2188].xyz));
        float _4127 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2222 = dot(vec3(_449, _450, _451), vec3(_2215, _2216, _2217));
        float _4138 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4149 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
        float _2248 = 1.0 - _2207;
        float _2258 = (0.5 / (((_1868 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _2248) + _2207) * _2221))) * _2221;
        float _4160 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2177 = (((((_2241 * _1890) + _646) * cbLight._m0[_2192].x) * _2260) * _2261) + _2063;
        _2179 = (((((_2241 * _1892) + _648) * cbLight._m0[_2192].y) * _2260) * _2261) + _2065;
        _2181 = (((((_2241 * _1893) + _649) * cbLight._m0[_2192].z) * _2260) * _2261) + _2067;
    }
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    if (_1701.y == 0u)
    {
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2336;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2336;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2336;
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.x;
        uint _2363 = uint((float(_2351.y) * floor(float(uint(cbSceneParam._m0[85u].y * _538) / _2352))) + floor(float(uint(cbSceneParam._m0[85u].x * _537) / _2352)));
        float _2373 = (log2(_2339 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2374 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        uint _2377 = uint(isnan(14.0) ? _2374 : (isnan(_2374) ? 14.0 : min(_2374, 14.0)));
        uvec4 _2382 = texelFetch(g_lightClusterGridBuffer, int(((_2377 << 2u) + (_2363 << 6u)) >> 2u));
        uint _2383 = _2382.x;
        uint _2384 = _2351.z;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((((1u << ((_2384 >> 4u) & 15u)) + 4294967295u) & _2383) == 0u) || ((_2384 & 240u) == 0u))
        {
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
        }
        else
        {
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            uint _2706 = 0u;
            uint _2715;
            bool _2716;
            for (;;)
            {
                _2715 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                _2716 = _2715 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2716)
                {
                    frontier_phi_61_pred = _2700;
                    frontier_phi_61_pred_1 = _2705;
                    frontier_phi_61_pred_2 = _2704;
                    frontier_phi_61_pred_3 = _2703;
                    frontier_phi_61_pred_4 = _2702;
                    frontier_phi_61_pred_5 = _2701;
                }
                else
                {
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    uint _2830;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2715;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    for (;;)
                    {
                        uint _2834 = uint(findLSB(_2830)) + (_2706 << 5u);
                        uint _2831 = (_2830 + 4294967295u) & _2830;
                        uint _2836 = _2834 * 48u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2856 = (_2834 * 48u) + 4u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2875 = (_2834 * 48u) + 8u;
                        vec3 _2886 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x));
                        float _2890 = _2850.x - _2337;
                        float _2891 = _2850.y - _2338;
                        float _2892 = _2850.z - _2339;
                        float _2893 = dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892));
                        float _2896 = inversesqrt(_2893);
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2900 = dot(vec3(_562, _565, _568), vec3(_2897, _2898, _2899));
                        float _2905 = 1.0 - (_2893 * _2850.w);
                        float _4186 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2906 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2907 = sqrt(_2893) * _2869.w;
                        float _2910 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2900) + _2911;
                        float _2917 = _2907 * _2907;
                        float _2921 = ((isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))) * _2906) / ((_2917 * 0.699999988079071044921875) + 1.0);
                        float _2925 = (-0.0) - _2337;
                        float _2926 = (-0.0) - _2338;
                        float _2927 = (-0.0) - _2339;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2932 = _2931 * _2925;
                        float _2933 = _2931 * _2926;
                        float _2934 = _2931 * _2927;
                        float _2942 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                        float _2943 = 1.0 - _677;
                        float _2950 = sqrt(1.0 - ((1.0 - (_2943 * _2943)) * (1.0 - (_2942 * _2942))));
                        float _2951 = _2950 * _2950;
                        float _2952 = _2951 * _2951;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2963 = dot(vec3(_562, _565, _568), vec3(_2932, _2933, _2934));
                        float _4202 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2966 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2967 = dot(vec3(_562, _565, _568), vec3(_2959 * _2953, _2959 * _2954, _2959 * _2955));
                        float _4213 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2974 = ((_2970 * _2970) * (_2952 + (-1.0))) + 1.0;
                        float _2975 = _2910 * _2951;
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2900) + _2976;
                        float _4224 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2981 = 1.0 - _2951;
                        float _2991 = (0.5 / (((_2980 * ((_2966 * _2981) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2951) * _2966))) * _2980;
                        float _4235 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _3002 = (((_2952 * 3.1415927410125732421875) * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) / ((_2974 * _2974) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125))) * _2906;
                        _2759 = (_2921 * _2869.x) + _2827;
                        _2760 = (_2921 * _2869.y) + _2828;
                        _2761 = (_2921 * _2869.z) + _2829;
                        _2756 = (_3002 * _2886.x) + _2824;
                        _2757 = (_3002 * _2886.y) + _2825;
                        _2758 = (_3002 * _2886.z) + _2826;
                        if (_2831 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2831;
                        }
                    }
                    frontier_phi_61_pred = _2756;
                    frontier_phi_61_pred_1 = _2761;
                    frontier_phi_61_pred_2 = _2760;
                    frontier_phi_61_pred_3 = _2759;
                    frontier_phi_61_pred_4 = _2758;
                    frontier_phi_61_pred_5 = _2757;
                }
                _2547 = frontier_phi_61_pred;
                _2557 = frontier_phi_61_pred_1;
                _2555 = frontier_phi_61_pred_2;
                _2553 = frontier_phi_61_pred_3;
                _2551 = frontier_phi_61_pred_4;
                _2549 = frontier_phi_61_pred_5;
                uint _2707 = _2706 + 1u;
                if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2700 = _2547;
                    _2701 = _2549;
                    _2702 = _2551;
                    _2703 = _2553;
                    _2704 = _2555;
                    _2705 = _2557;
                    _2706 = _2707;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
        }
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.z;
        uint _2563 = (_2561 >> 8u) & 15u;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((4294967295u << _2563) & _2383) == 0u)
        {
            _2668 = _2546;
            _2670 = _2548;
            _2672 = _2550;
            _2674 = _2552;
            _2676 = _2554;
            _2678 = _2556;
        }
        else
        {
            float _2693 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
            float _2694 = _2693 * _2337;
            float _2695 = _2693 * _2338;
            float _2696 = _2693 * _2339;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2563 < ((_2561 >> 12u) & 15u))
            {
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2807 = _2546;
                float _2808 = _2548;
                float _2809 = _2550;
                float _2810 = _2552;
                float _2811 = _2554;
                float _2812 = _2556;
                uint _2813 = _2563;
                uint _2822;
                bool _2823;
                for (;;)
                {
                    _2822 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                    _2823 = _2822 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2823)
                    {
                        frontier_phi_67_pred = _2810;
                        frontier_phi_67_pred_1 = _2811;
                        frontier_phi_67_pred_2 = _2812;
                        frontier_phi_67_pred_3 = _2809;
                        frontier_phi_67_pred_4 = _2808;
                        frontier_phi_67_pred_5 = _2807;
                    }
                    else
                    {
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        uint _3026 = _2822;
                        uint _3027;
                        vec4 _3052;
                        float _3053;
                        vec4 _3068;
                        vec3 _3080;
                        vec4 _3096;
                        vec4 _3112;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3037 = ((_2813 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3026));
                            _3027 = (_3026 + 4294967295u) & _3026;
                            uint _3039 = _3037 * 40u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3053 = _3052.w;
                            uint _3055 = (_3037 * 40u) + 4u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_3037 * 40u) + 8u;
                            _3080 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x));
                            uint _3083 = (_3037 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3099 = (_3037 * 40u) + 20u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3037 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3037 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2339, _3147.z, fma(_2338, _3147.y, _3147.x * _2337)) + _3147.w;
                            _3160 = !((fma(_2339, _3128.z, fma(_2338, _3128.y, _3128.x * _2337)) + _3128.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3052.x - _2337;
                                float _3188 = _3052.y - _2338;
                                float _3189 = _3052.z - _2339;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3053 * _3053));
                                float _4246 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3205 = sqrt(_3190) * _3068.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_562, _565, _568))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2339, _3096.z, fma(_2338, _3096.y, _3096.x * _2337)) + _3096.w) / _3159;
                                float _3219 = (fma(_2339, _3112.z, fma(_2338, _3112.y, _3112.x * _2337)) + _3112.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4262 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _677;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2694;
                                float _3249 = _3195 - _2695;
                                float _3250 = _3196 - _2696;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_562, _565, _568), vec3((-0.0) - _2694, (-0.0) - _2695, (-0.0) - _2696));
                                float _4273 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3262 = dot(vec3(_562, _565, _568), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4284 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_562, _565, _568), vec3(_3194, _3195, _3196))) + _3271;
                                float _4295 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4306 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3299 * _3080.x;
                                frontier_phi_73_pred_1 = _3299 * _3080.y;
                                frontier_phi_73_pred_2 = _3225 * _3068.z;
                                frontier_phi_73_pred_3 = _3225 * _3068.y;
                                frontier_phi_73_pred_4 = _3225 * _3068.x;
                                frontier_phi_73_pred_5 = _3299 * _3080.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_73_pred;
                            _3304 = frontier_phi_73_pred_1;
                            _3308 = frontier_phi_73_pred_2;
                            _3307 = frontier_phi_73_pred_3;
                            _3306 = frontier_phi_73_pred_4;
                            _3305 = frontier_phi_73_pred_5;
                            _3010 = _3306 + _3023;
                            _3011 = _3307 + _3024;
                            _3012 = _3308 + _3025;
                            _3007 = _3303 + _3020;
                            _3008 = _3304 + _3021;
                            _3009 = _3305 + _3022;
                            if (_3027 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3027;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3010;
                        frontier_phi_67_pred_1 = _3011;
                        frontier_phi_67_pred_2 = _3012;
                        frontier_phi_67_pred_3 = _3009;
                        frontier_phi_67_pred_4 = _3008;
                        frontier_phi_67_pred_5 = _3007;
                    }
                    _2675 = frontier_phi_67_pred;
                    _2677 = frontier_phi_67_pred_1;
                    _2679 = frontier_phi_67_pred_2;
                    _2673 = frontier_phi_67_pred_3;
                    _2671 = frontier_phi_67_pred_4;
                    _2669 = frontier_phi_67_pred_5;
                    uint _2814 = _2813 + 1u;
                    if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2807 = _2669;
                        _2808 = _2671;
                        _2809 = _2673;
                        _2810 = _2675;
                        _2811 = _2677;
                        _2812 = _2679;
                        _2813 = _2814;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2677;
                frontier_phi_55_56_ladder_1 = _2679;
                frontier_phi_55_56_ladder_2 = _2675;
                frontier_phi_55_56_ladder_3 = _2673;
                frontier_phi_55_56_ladder_4 = _2671;
                frontier_phi_55_56_ladder_5 = _2669;
            }
            else
            {
                frontier_phi_55_56_ladder = _2554;
                frontier_phi_55_56_ladder_1 = _2556;
                frontier_phi_55_56_ladder_2 = _2552;
                frontier_phi_55_56_ladder_3 = _2550;
                frontier_phi_55_56_ladder_4 = _2548;
                frontier_phi_55_56_ladder_5 = _2546;
            }
            _2668 = frontier_phi_55_56_ladder_5;
            _2670 = frontier_phi_55_56_ladder_4;
            _2672 = frontier_phi_55_56_ladder_3;
            _2674 = frontier_phi_55_56_ladder_2;
            _2676 = frontier_phi_55_56_ladder;
            _2678 = frontier_phi_55_56_ladder_1;
        }
        float _2683 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2396 = (_2683 * _2674) + _1832;
        _2398 = (_2683 * _2676) + _1834;
        _2400 = (_2683 * _2678) + _1836;
        _2402 = ((_2668 * _646) * _2683) + _2177;
        _2404 = ((_2670 * _648) * _2683) + _2179;
        _2406 = ((_2672 * _649) * _2683) + _2181;
    }
    else
    {
        _2396 = _1832;
        _2398 = _1834;
        _2400 = _1836;
        _2402 = _2177;
        _2404 = _2179;
        _2406 = _2181;
    }
    uint _2412 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _2421 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _400) * _412.x) * cbInstanceData._m0[_2412].x;
    float _2425 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _400) * _412.y) * cbInstanceData._m0[_2412].y;
    float _2429 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _400) * _412.z) * cbInstanceData._m0[_2412].z;
    vec4 _2437 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2451 = ((((_2421 * _542) - _2421) + _2437.x) * cbMtdParam._m0[3u].x) + _2421;
    float _2452 = ((((_2425 * _542) - _2425) + _2437.y) * cbMtdParam._m0[3u].x) + _2425;
    float _2453 = ((((_2429 * _542) - _2429) + _2437.z) * cbMtdParam._m0[3u].x) + _2429;
    float _4322 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4333 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4344 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _2472 = (((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2396 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _661))) + ((_2402 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2451;
    float _2473 = (((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2398 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _661))) + ((_2404 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2452;
    float _2474 = (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2400 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _661))) + ((_2406 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1468)) * cbPerFrame._m0[3u].x)) + _2453;
    float _4370 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2487 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    uint _2488 = _594 + 6u;
    float _2496 = _537 / cbSceneParam._m0[86u].x;
    float _2497 = _538 / cbSceneParam._m0[86u].y;
    vec4 _2511 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, (log2((isnan(cbSceneParam._m0[77u].w) ? _471 : (isnan(_471) ? cbSceneParam._m0[77u].w : min(_471, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2513 = _2511.x;
    float _2514 = _2511.y;
    float _2515 = _2511.z;
    float _2516 = _2511.w;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_471 > cbSceneParam._m0[78u].w)
    {
        float _2571 = isnan(_471) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _471 : min(cbSceneParam._m0[80u].w, _471));
        float _2572 = _2571 / _471;
        float _2583 = _2572 * _522;
        float _2584 = _523 * _2572;
        float _2585 = (-0.0) - _2584;
        float _2587 = _2572 * _524;
        float _2589 = (cbSceneParam._m0[77u].w * _2585) / _2571;
        float _2590 = _2589 + cbSceneParam._m0[79u].w;
        float _2591 = cbSceneParam._m0[79u].w - _2584;
        float _2597 = sqrt(((_2583 * _2583) + (_2584 * _2584)) + (_2587 * _2587));
        float _2600 = (1.0 - (cbSceneParam._m0[77u].w / _2571)) * _2597;
        float _2605 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2769;
        if (abs((_2585 - _2589) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2769 = ((((_2590 > 0.0) ? exp2(_2605 * _2590) : (2.0 - exp2(_2607 * _2590))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2600;
        }
        else
        {
            float _2729 = 1.0 / cbSceneParam._m0[80u].x;
            float _2730 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : max(_2590, _2591));
            float _2731 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : min(_2590, _2591));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            _2769 = ((abs(_2597 / _2585) * cbSceneParam._m0[80u].y) * ((((_2740 - _2741) * 2.0) - ((exp2(_2605 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0)))) - exp2(_2605 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))))) * _2729)) - ((exp2(_2607 * _2740) - exp2(_2607 * _2741)) * _2729))) + (_2600 * cbSceneParam._m0[80u].z);
        }
        vec4 _2771 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, 1.0), 0.0);
        float _2780 = exp2((_2769 * (-1.44269502162933349609375)) * (1.0 - _2771.w));
        float _2781 = log2(_2780);
        float _2797 = log2(_2516);
        _2609 = (exp2(_2797 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].x)) * _2771.x) / cbSceneParam._m0[78u].x)) + _2513;
        _2611 = (exp2(_2797 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].y)) * _2771.y) / cbSceneParam._m0[78u].y)) + _2514;
        _2613 = (exp2(_2797 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].z)) * _2771.z) / cbSceneParam._m0[78u].z)) + _2515;
        _2615 = _2780 * _2516;
    }
    else
    {
        _2609 = _2513;
        _2611 = _2514;
        _2613 = _2515;
        _2615 = _2516;
    }
    float _2627 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2628 = _2627 == 3.0;
    float _2629 = log2(_2615);
    float _2633 = exp2(_2629 * cbSceneParam._m0[78u].x);
    float _2634 = exp2(_2629 * cbSceneParam._m0[78u].y);
    float _2635 = exp2(_2629 * cbSceneParam._m0[78u].z);
    float _2636 = _2633 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)));
    float _2637 = _2634 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2638 = _2635 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)));
    float _2647 = (_2627 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2647 * (_2628 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.y = _2647 * (_2628 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.z = _2647 * (_2628 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.w = cbInstanceData._m0[_2488].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2451) * _2487) * _2633) * _2647;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2452) * _2487) * _2634) * _2647;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2453) * _2487) * _2635) * _2647;
    SV_Target_1.w = cbInstanceData._m0[_2488].w;
}


