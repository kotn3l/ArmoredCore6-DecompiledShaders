#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 43) uniform texture2D g_DecalEmissiveTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1035;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _278 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _294 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _308 = ((_278.x * 4.55000019073486328125) * _294.x) * cbMtdParam._m0[9u].x;
    float _311 = ((_278.y * 4.55000019073486328125) * _294.y) * cbMtdParam._m0[9u].y;
    float _314 = ((_278.z * 4.55000019073486328125) * _294.z) * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.x) * ((_250.x * cbMtdParam._m0[10u].x) - _308)) + _308;
    float _322 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.y) * ((_250.y * cbMtdParam._m0[10u].y) - _311)) + _311;
    float _323 = ((cbMtdParam._m0[13u].x * TEXCOORD_5.z) * ((_250.z * cbMtdParam._m0[10u].z) - _314)) + _314;
    vec4 _335 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _339 = _335.z;
    float _345 = exp2(log2(_339 * 22.0) * 260.0);
    float _346 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    vec4 _366 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _378 = ((((isnan(1.0) ? _346 : (isnan(_346) ? 1.0 : min(_346, 1.0))) * (_339 + (-0.5))) + 0.5) * 2.0) * (cbMtdParam._m0[12u].x + _366.z);
    float _393 = abs((fract(cbMtdParam._m0[12u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3473 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _402 = (((_394 * _394) * (3.0 - (_394 * 2.0))) * cbMtdParam._m0[12u].w) - cbMtdParam._m0[13u].y;
    vec4 _414 = texture(sampler2D(C_DetailBlend1_Detail_Emissive_Glow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _422 = (_335.x * 2.0) + (-1.0);
    float _423 = (_335.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3484 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))));
    float _436 = (cbMtdParam._m0[12u].y * ((_366.x * 2.0) + (-1.0))) + _422;
    float _437 = (cbMtdParam._m0[12u].y * ((_366.y * 2.0) + (-1.0))) + _423;
    float _440 = fma(_429, _221 * NORMAL.x, fma(_437, _228 * TANGENT.x, (_214 * _206) * _436));
    float _443 = fma(_429, _221 * NORMAL.y, fma(_437, _228 * TANGENT.y, (_214 * _207) * _436));
    float _446 = fma(_429, _221 * NORMAL.z, fma(_437, _228 * TANGENT.z, (_214 * _208) * _436));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _3495 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _454 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3517 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3528 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    float _539 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _540 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _542 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _544 = _542.w;
    float _564 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _567 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _570 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    vec4 _572 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _583 = (((_572.y - _454) + (_572.w * _454)) * cbMtdParam._m0[3u].x) + _454;
    uint _596 = uint(roundEven(NORMAL.w)) * 13u;
    uint _597 = _596 + 9u;
    uint _598 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _604 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_598].x;
    float _605 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_598].y;
    float _606 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_598].z;
    float _3539 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    vec4 _610 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _615 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _621 = cbMtdParam._m0[3u].x * _615.x;
    float _634 = (cbMtdParam._m0[3u].x * (((_607 * _544) - _607) + _610.x)) + _607;
    float _635 = (cbMtdParam._m0[3u].x * (((_608 * _544) - _608) + _610.y)) + _608;
    float _636 = (cbMtdParam._m0[3u].x * (((_609 * _544) - _609) + _610.z)) + _609;
    float _637 = 1.0 - _621;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _621;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _621;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _621;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _539, cbSceneParam._m0[86u].y * _540));
    float _663 = _660.x * TEXCOORD_5.w;
    float _664 = dot(vec3(_451, _452, _453), vec3(_531, _532, _533));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _451) - _531;
    float _672 = (_667 * _452) - _532;
    float _673 = (_667 * _453) - _533;
    float _677 = abs(dot(vec3(_531, _532, _533), vec3(_451, _452, _453)));
    float _3572 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_583);
    float _691 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _697 = (1.0 - _691) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _698 = _691 * _679;
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _765 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _769 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _792 = _726 + _451;
        float _793 = _730 + _452;
        float _794 = _734 + _453;
        float _804 = fma(_794, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792)) - _761;
        float _805 = fma(_794, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792)) - _765;
        float _806 = fma(_794, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792)) - _769;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _823 = ((_810 * _804) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_810 * _805) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_810 * _806) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(_451, _452, _453), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3620 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_451, _452, _453), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3653 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_451, _452, _453), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3686 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1075 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1079 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1083 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1106 = _726 + _451;
        float _1107 = _730 + _452;
        float _1108 = _734 + _453;
        float _1118 = fma(_1108, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1106)) - _1075;
        float _1119 = fma(_1108, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1106)) - _1079;
        float _1120 = fma(_1108, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1106)) - _1083;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1075 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1079 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[35u].z) + ((((((_1083 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1174 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1141.x + (-0.5));
        float _1176 = _1174 * (_1141.y + (-0.5));
        float _1177 = _1174 * (_1141.z + (-0.5));
        float _1184 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1148.x + (-0.5));
        float _1186 = _1184 * (_1148.y + (-0.5));
        float _1187 = _1184 * (_1148.z + (-0.5));
        float _1194 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1155.x + (-0.5));
        float _1196 = _1194 * (_1155.y + (-0.5));
        float _1197 = _1194 * (_1155.z + (-0.5));
        float _1204 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1162.x + (-0.5));
        float _1206 = _1204 * (_1162.y + (-0.5));
        float _1207 = _1204 * (_1162.z + (-0.5));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = _1175 * 0.5;
        float _1212 = _1185 * 0.5;
        float _1213 = _1195 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_451, _452, _453), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3749 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1238 + 1.0))) + _1243) * _1208;
        float _1253 = _1176 * 0.5;
        float _1254 = _1186 * 0.5;
        float _1255 = _1196 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_451, _452, _453), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3782 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1280 + 1.0))) + _1285) * _1209;
        float _1295 = _1177 * 0.5;
        float _1296 = _1187 * 0.5;
        float _1297 = _1197 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_451, _452, _453), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3815 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1322 + 1.0))) + _1327) * _1210;
        _1344 = _1177;
        _1345 = _1176;
        _1346 = _1175;
        _1347 = _1187;
        _1348 = _1186;
        _1349 = _1185;
        _1350 = _1197;
        _1351 = _1196;
        _1352 = _1195;
        _1353 = _1210;
        _1354 = _1209;
        _1355 = _1208;
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1035;
        _1345 = _1035;
        _1346 = _1035;
        _1347 = _1035;
        _1348 = _1035;
        _1349 = _1035;
        _1350 = _1035;
        _1351 = _1035;
        _1352 = _1035;
        _1353 = _1035;
        _1354 = _1035;
        _1355 = _1035;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1047)) + _1047;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1048)) + _1048;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1391 = fma(_1370, cbSceneParam._m0[89u].z, fma(_1369, cbSceneParam._m0[89u].y, _1368 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1370, cbSceneParam._m0[90u].z, fma(_1369, cbSceneParam._m0[90u].y, _1368 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1370, cbSceneParam._m0[91u].z, fma(_1369, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1368));
    float _1412 = _671 * 0.5;
    float _1413 = _672 * 0.5;
    float _1414 = _673 * 0.5;
    float _1415 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1418 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1421 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1455;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1428 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1432 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1436 = dot(vec4(_1412, _1413, _1414, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1443 = dot(vec4(cbModelParam._m0[39u]), vec4(_1412, _1413, _1414, 1.0));
        _1455 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1455 = 1.0;
    }
    float _1466;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1457 = dot(vec4(cbModelParam._m0[40u]), vec4(_1412, _1413, _1414, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1470 = (_1466 * cbModelParam._m0[1u].x) + (_1455 * (1.0 - cbModelParam._m0[1u].x));
    float _1480 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1481 = isnan(_1480) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1480 : min(cbModelParam._m0[25u].z, _1480));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1543 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1546 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1574 = frontier_phi_14_12_ladder;
        }
        float _1800;
        if (_1543 > 0.0)
        {
            _1800 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1800 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1546 > 0.0)
        {
            _2057 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1800) ? _1574 : (isnan(_1574) ? _1800 : min(_1574, _1800));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1540) + _1529;
        float _2065 = (_2060 * _1543) + _1533;
        float _2066 = (_2060 * _1546) + _1537;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2194 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1481);
            frontier_phi_13_35_ladder = _2194.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2194.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2194.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_13_35_ladder_2;
        _1564 = frontier_phi_13_35_ladder_1;
        _1566 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1481);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1627 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1631 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1635 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1638 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1641 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1644 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1805;
        if (_1638 > 0.0)
        {
            _1805 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1805 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1641 > 0.0)
        {
            _2084 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2297;
        if (_1644 > 0.0)
        {
            _2297 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2297 = frontier_phi_46_43_ladder;
        }
        float _2299 = isnan(_2084) ? _1805 : (isnan(_1805) ? _2084 : min(_1805, _2084));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1638) + _1627;
        float _2305 = (_2300 * _1641) + _1631;
        float _2306 = (_2300 * _1644) + _1635;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_22_46_ladder = _2567.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2567.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2567.x * cbModelParam._m0[1u].z;
        }
        _1663 = frontier_phi_22_46_ladder_2;
        _1665 = frontier_phi_22_46_ladder_1;
        _1667 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1571);
        _1663 = _1647.x * cbModelParam._m0[1u].z;
        _1665 = _1647.y * cbModelParam._m0[1u].z;
        _1667 = _1647.z * cbModelParam._m0[1u].z;
    }
    float _1680 = (((_697 * _648) + _698) * _663) * ((cbModelParam._m0[1u].w * (_1663 - _1562)) + _1562);
    float _1682 = (((_697 * _650) + _698) * _663) * ((cbModelParam._m0[1u].w * (_1665 - _1564)) + _1564);
    float _1684 = (((_697 * _651) + _698) * _663) * ((cbModelParam._m0[1u].w * (_1667 - _1566)) + _1566);
    float _1687 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1680 * cbSceneParam._m0[91u].x));
    vec4 _1701 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_539, _540));
    float _1703 = _1701.w;
    float _1715 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1703);
    float _1716 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1703);
    float _1717 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1703);
    uvec4 _1721 = floatBitsToUint(cbInstanceData._m0[_596 + 5u]);
    uint _1723 = _1721.x * 14u;
    uint _1724 = _1723 + 13u;
    float _1731 = _663 + (-1.0);
    float _1736 = (cbLight._m0[_1724].x * _1731) + 1.0;
    float _1737 = (cbLight._m0[_1724].y * _1731) + 1.0;
    float _1738 = (cbLight._m0[_1724].z * _1731) + 1.0;
    float _1739 = (cbLight._m0[_1724].w * _1731) + 1.0;
    uint _1740 = _1723 + 5u;
    float _1746 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1750 = _1723 + 4u;
    float _1759 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1763 = _1723 | 1u;
    float _1774 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_451, _452, _453));
    float _1777 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_451, _452, _453));
    float _3951 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _3962 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1782 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.3183098733425140380859375;
    float _1784 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1791 = ((cbLight._m0[_1740].x * _1746) * _1784) + (((cbLight._m0[_1750].x * _1715) * _1759) * _1782);
    float _1792 = ((_1746 * cbLight._m0[_1740].y) * _1784) + (((cbLight._m0[_1750].y * _1716) * _1759) * _1782);
    float _1793 = ((_1746 * cbLight._m0[_1740].z) * _1784) + (((cbLight._m0[_1750].z * _1717) * _1759) * _1782);
    uvec4 _1797 = floatBitsToUint(cbLight._m0[_1723 + 12u]);
    bool _1799 = _1797.x == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1799)
    {
        _1810 = _1791;
        _1812 = _1792;
        _1814 = _1793;
    }
    else
    {
        uint _1818 = _1723 + 6u;
        float _1834 = (dot(vec3(cbLight._m0[_1723 + 2u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _1835 = _1834 * _1834;
        float _3973 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1837 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1810 = (((cbLight._m0[_1818].x * 0.3183098733425140380859375) * _1836) * _1837) + _1791;
        _1812 = (((cbLight._m0[_1818].y * 0.3183098733425140380859375) * _1836) * _1837) + _1792;
        _1814 = (((cbLight._m0[_1818].z * 0.3183098733425140380859375) * _1836) * _1837) + _1793;
    }
    bool _1817 = _1797.y == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1817)
    {
        _1855 = _1810;
        _1857 = _1812;
        _1859 = _1814;
    }
    else
    {
        uint _2028 = _1723 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1723 + 3u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3989 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2047 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1855 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1810;
        _1857 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1812;
        _1859 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1814;
    }
    uint _1862 = _1723 + 8u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _583) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1723].x + _531;
    float _1878 = cbLight._m0[_1723].y + _532;
    float _1879 = cbLight._m0[_1723].z + _533;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1723].xyz));
    float _4005 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1891 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1892 = dot(vec3(_451, _452, _453), vec3(_1884, _1885, _1886));
    float _4027 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1884, _1885, _1886));
    float _4038 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1876 * _1876;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1912 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
    float _1913 = 0.959999978542327880859375 - _645;
    float _1915 = 0.959999978542327880859375 - _646;
    float _1916 = 0.959999978542327880859375 - _647;
    float _1923 = 1.0 - _1876;
    float _1934 = (0.5 / (((_1891 * ((_1890 * _1923) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1923) + _1876) * _1890))) * _1890;
    float _4049 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    uint _1950 = _1723 + 9u;
    float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1763].w)) * _583) * 0.949999988079071044921875);
    float _1962 = _1961 * _1961;
    float _1963 = cbLight._m0[_1763].x + _531;
    float _1964 = cbLight._m0[_1763].y + _532;
    float _1965 = cbLight._m0[_1763].z + _533;
    float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
    float _1970 = _1969 * _1963;
    float _1971 = _1969 * _1964;
    float _1972 = _1969 * _1965;
    float _1973 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1763].xyz));
    float _4060 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1977 = dot(vec3(_451, _452, _453), vec3(_1970, _1971, _1972));
    float _4071 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_1970, _1971, _1972));
    float _4082 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1962 * _1962;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1996 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
    float _2003 = 1.0 - _1962;
    float _2013 = (0.5 / (((_1891 * ((_1976 * _2003) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2003) + _1962) * _1976))) * _1976;
    float _4093 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    float _2025 = (((((_1996 * _1913) + _648) * cbLight._m0[_1950].x) * _2015) * _1746) + ((((cbLight._m0[_1862].x * _1715) * ((_1912 * _1913) + _648)) * _1936) * _1759);
    float _2026 = (((((_1996 * _1915) + _650) * cbLight._m0[_1950].y) * _2015) * _1746) + ((((cbLight._m0[_1862].y * _1716) * ((_1912 * _1915) + _650)) * _1936) * _1759);
    float _2027 = (((((_1996 * _1916) + _651) * cbLight._m0[_1950].z) * _2015) * _1746) + ((((cbLight._m0[_1862].z * _1717) * ((_1912 * _1916) + _651)) * _1936) * _1759);
    float _2089;
    float _2091;
    float _2093;
    if (_1799)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1723 + 2u;
        uint _2099 = _1723 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _583) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _531;
        float _2116 = cbLight._m0[_2095].y + _532;
        float _2117 = cbLight._m0[_2095].z + _533;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2095].xyz));
        float _4104 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2129 = dot(vec3(_451, _452, _453), vec3(_2122, _2123, _2124));
        float _4115 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4126 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
        float _2155 = 1.0 - _2114;
        float _2165 = (0.5 / (((_1891 * ((_2128 * _2155) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2155) + _2114) * _2128))) * _2128;
        float _4137 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2089 = (((((_2148 * _1913) + _648) * cbLight._m0[_2099].x) * _2167) * _2168) + _2025;
        _2091 = (((((_2148 * _1915) + _650) * cbLight._m0[_2099].y) * _2167) * _2168) + _2026;
        _2093 = (((((_2148 * _1916) + _651) * cbLight._m0[_2099].z) * _2167) * _2168) + _2027;
    }
    float _2203;
    float _2205;
    float _2207;
    if (_1817)
    {
        _2203 = _2089;
        _2205 = _2091;
        _2207 = _2093;
    }
    else
    {
        uint _2214 = _1723 + 3u;
        uint _2218 = _1723 + 11u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _583) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _531;
        float _2235 = cbLight._m0[_2214].y + _532;
        float _2236 = cbLight._m0[_2214].z + _533;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2214].xyz));
        float _4153 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2248 = dot(vec3(_451, _452, _453), vec3(_2241, _2242, _2243));
        float _4164 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4175 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
        float _2274 = 1.0 - _2233;
        float _2284 = (0.5 / (((_1891 * ((_2247 * _2274) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _2274) + _2233) * _2247))) * _2247;
        float _4186 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2203 = (((((_2267 * _1913) + _648) * cbLight._m0[_2218].x) * _2286) * _2287) + _2089;
        _2205 = (((((_2267 * _1915) + _650) * cbLight._m0[_2218].y) * _2286) * _2287) + _2091;
        _2207 = (((((_2267 * _1916) + _651) * cbLight._m0[_2218].z) * _2286) * _2287) + _2093;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1721.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _540) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _539) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            uint _2732 = 0u;
            uint _2741;
            bool _2742;
            for (;;)
            {
                _2741 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2732 << 2u)) >> 2u)).x;
                _2742 = _2741 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2742)
                {
                    frontier_phi_61_pred = _2726;
                    frontier_phi_61_pred_1 = _2731;
                    frontier_phi_61_pred_2 = _2730;
                    frontier_phi_61_pred_3 = _2729;
                    frontier_phi_61_pred_4 = _2728;
                    frontier_phi_61_pred_5 = _2727;
                }
                else
                {
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    uint _2856;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2741;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    for (;;)
                    {
                        uint _2860 = uint(findLSB(_2856)) + (_2732 << 5u);
                        uint _2857 = (_2856 + 4294967295u) & _2856;
                        uint _2862 = _2860 * 48u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2882 = (_2860 * 48u) + 4u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2901 = (_2860 * 48u) + 8u;
                        vec3 _2912 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x));
                        float _2916 = _2876.x - _2363;
                        float _2917 = _2876.y - _2364;
                        float _2918 = _2876.z - _2365;
                        float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                        float _2922 = inversesqrt(_2919);
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2926 = dot(vec3(_564, _567, _570), vec3(_2923, _2924, _2925));
                        float _2931 = 1.0 - (_2919 * _2876.w);
                        float _4212 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2933 = sqrt(_2919) * _2895.w;
                        float _2936 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2926) + _2937;
                        float _2943 = _2933 * _2933;
                        float _2947 = ((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2932) / ((_2943 * 0.699999988079071044921875) + 1.0);
                        float _2951 = (-0.0) - _2363;
                        float _2952 = (-0.0) - _2364;
                        float _2953 = (-0.0) - _2365;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2968 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _679;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_564, _567, _570), vec3(_2958, _2959, _2960));
                        float _4228 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2993 = dot(vec3(_564, _567, _570), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4239 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2936 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2926) + _3002;
                        float _4250 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4261 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_3000 * _3000) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125))) * _2932;
                        _2785 = (_2947 * _2895.x) + _2853;
                        _2786 = (_2947 * _2895.y) + _2854;
                        _2787 = (_2947 * _2895.z) + _2855;
                        _2782 = (_3028 * _2912.x) + _2850;
                        _2783 = (_3028 * _2912.y) + _2851;
                        _2784 = (_3028 * _2912.z) + _2852;
                        if (_2857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2857;
                        }
                    }
                    frontier_phi_61_pred = _2782;
                    frontier_phi_61_pred_1 = _2787;
                    frontier_phi_61_pred_2 = _2786;
                    frontier_phi_61_pred_3 = _2785;
                    frontier_phi_61_pred_4 = _2784;
                    frontier_phi_61_pred_5 = _2783;
                }
                _2573 = frontier_phi_61_pred;
                _2583 = frontier_phi_61_pred_1;
                _2581 = frontier_phi_61_pred_2;
                _2579 = frontier_phi_61_pred_3;
                _2577 = frontier_phi_61_pred_4;
                _2575 = frontier_phi_61_pred_5;
                uint _2733 = _2732 + 1u;
                if (_2733 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2726 = _2573;
                    _2727 = _2575;
                    _2728 = _2577;
                    _2729 = _2579;
                    _2730 = _2581;
                    _2731 = _2583;
                    _2732 = _2733;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((4294967295u << _2589) & _2409) == 0u)
        {
            _2694 = _2572;
            _2696 = _2574;
            _2698 = _2576;
            _2700 = _2578;
            _2702 = _2580;
            _2704 = _2582;
        }
        else
        {
            float _2719 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2720 = _2719 * _2363;
            float _2721 = _2719 * _2364;
            float _2722 = _2719 * _2365;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2833 = _2572;
                float _2834 = _2574;
                float _2835 = _2576;
                float _2836 = _2578;
                float _2837 = _2580;
                float _2838 = _2582;
                uint _2839 = _2589;
                uint _2848;
                bool _2849;
                for (;;)
                {
                    _2848 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                    _2849 = _2848 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2849)
                    {
                        frontier_phi_67_pred = _2836;
                        frontier_phi_67_pred_1 = _2837;
                        frontier_phi_67_pred_2 = _2838;
                        frontier_phi_67_pred_3 = _2835;
                        frontier_phi_67_pred_4 = _2834;
                        frontier_phi_67_pred_5 = _2833;
                    }
                    else
                    {
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        uint _3052 = _2848;
                        uint _3053;
                        vec4 _3078;
                        float _3079;
                        vec4 _3094;
                        vec3 _3106;
                        vec4 _3122;
                        vec4 _3138;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3063 = ((_2839 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3052));
                            _3053 = (_3052 + 4294967295u) & _3052;
                            uint _3065 = _3063 * 40u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3079 = _3078.w;
                            uint _3081 = (_3063 * 40u) + 4u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3063 * 40u) + 8u;
                            _3106 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x));
                            uint _3109 = (_3063 * 40u) + 16u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3125 = (_3063 * 40u) + 20u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3141 = (_3063 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3063 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2365, _3173.z, fma(_2364, _3173.y, _3173.x * _2363)) + _3173.w;
                            _3186 = !((fma(_2365, _3154.z, fma(_2364, _3154.y, _3154.x * _2363)) + _3154.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3078.x - _2363;
                                float _3214 = _3078.y - _2364;
                                float _3215 = _3078.z - _2365;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3079 * _3079));
                                float _4272 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3231 = sqrt(_3216) * _3094.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_564, _567, _570))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_2365, _3122.z, fma(_2364, _3122.y, _3122.x * _2363)) + _3122.w) / _3185;
                                float _3245 = (fma(_2365, _3138.z, fma(_2364, _3138.y, _3138.x * _2363)) + _3138.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4288 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _679;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2720;
                                float _3275 = _3221 - _2721;
                                float _3276 = _3222 - _2722;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_564, _567, _570), vec3((-0.0) - _2720, (-0.0) - _2721, (-0.0) - _2722));
                                float _4299 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3288 = dot(vec3(_564, _567, _570), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4310 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_564, _567, _570), vec3(_3220, _3221, _3222))) + _3297;
                                float _4321 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4332 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3325 * _3106.x;
                                frontier_phi_73_pred_1 = _3325 * _3106.y;
                                frontier_phi_73_pred_2 = _3251 * _3094.z;
                                frontier_phi_73_pred_3 = _3251 * _3094.y;
                                frontier_phi_73_pred_4 = _3251 * _3094.x;
                                frontier_phi_73_pred_5 = _3325 * _3106.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_73_pred;
                            _3330 = frontier_phi_73_pred_1;
                            _3334 = frontier_phi_73_pred_2;
                            _3333 = frontier_phi_73_pred_3;
                            _3332 = frontier_phi_73_pred_4;
                            _3331 = frontier_phi_73_pred_5;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            _3038 = _3334 + _3051;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            if (_3053 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3053;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3036;
                        frontier_phi_67_pred_1 = _3037;
                        frontier_phi_67_pred_2 = _3038;
                        frontier_phi_67_pred_3 = _3035;
                        frontier_phi_67_pred_4 = _3034;
                        frontier_phi_67_pred_5 = _3033;
                    }
                    _2701 = frontier_phi_67_pred;
                    _2703 = frontier_phi_67_pred_1;
                    _2705 = frontier_phi_67_pred_2;
                    _2699 = frontier_phi_67_pred_3;
                    _2697 = frontier_phi_67_pred_4;
                    _2695 = frontier_phi_67_pred_5;
                    uint _2840 = _2839 + 1u;
                    if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2833 = _2695;
                        _2834 = _2697;
                        _2835 = _2699;
                        _2836 = _2701;
                        _2837 = _2703;
                        _2838 = _2705;
                        _2839 = _2840;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2703;
                frontier_phi_55_56_ladder_1 = _2705;
                frontier_phi_55_56_ladder_2 = _2701;
                frontier_phi_55_56_ladder_3 = _2699;
                frontier_phi_55_56_ladder_4 = _2697;
                frontier_phi_55_56_ladder_5 = _2695;
            }
            else
            {
                frontier_phi_55_56_ladder = _2580;
                frontier_phi_55_56_ladder_1 = _2582;
                frontier_phi_55_56_ladder_2 = _2578;
                frontier_phi_55_56_ladder_3 = _2576;
                frontier_phi_55_56_ladder_4 = _2574;
                frontier_phi_55_56_ladder_5 = _2572;
            }
            _2694 = frontier_phi_55_56_ladder_5;
            _2696 = frontier_phi_55_56_ladder_4;
            _2698 = frontier_phi_55_56_ladder_3;
            _2700 = frontier_phi_55_56_ladder_2;
            _2702 = frontier_phi_55_56_ladder;
            _2704 = frontier_phi_55_56_ladder_1;
        }
        float _2709 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2422 = (_2709 * _2700) + _1855;
        _2424 = (_2709 * _2702) + _1857;
        _2426 = (_2709 * _2704) + _1859;
        _2428 = ((_2694 * _648) * _2709) + _2203;
        _2430 = ((_2696 * _650) * _2709) + _2205;
        _2432 = ((_2698 * _651) * _2709) + _2207;
    }
    else
    {
        _2422 = _1855;
        _2424 = _1857;
        _2426 = _1859;
        _2428 = _2203;
        _2430 = _2205;
        _2432 = _2207;
    }
    uint _2438 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _2447 = (((cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].z) * _402) * _414.x) * cbInstanceData._m0[_2438].x;
    float _2451 = (((cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].z) * _402) * _414.y) * cbInstanceData._m0[_2438].y;
    float _2455 = (((cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].z) * _402) * _414.z) * cbInstanceData._m0[_2438].z;
    vec4 _2463 = texture(sampler2D(g_DecalEmissiveTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _2477 = ((((_2447 * _544) - _2447) + _2463.x) * cbMtdParam._m0[3u].x) + _2447;
    float _2478 = ((((_2451 * _544) - _2451) + _2463.y) * cbMtdParam._m0[3u].x) + _2451;
    float _2479 = ((((_2455 * _544) - _2455) + _2463.z) * cbMtdParam._m0[3u].x) + _2455;
    float _4348 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4359 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4370 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2498 = (((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2422 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _663))) + ((_2428 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2477;
    float _2499 = (((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2424 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _663))) + ((_2430 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2478;
    float _2500 = (((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2426 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _663))) + ((_2432 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1470)) * cbPerFrame._m0[3u].x)) + _2479;
    float _4396 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2513 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    uint _2514 = _596 + 6u;
    float _2522 = _539 / cbSceneParam._m0[86u].x;
    float _2523 = _540 / cbSceneParam._m0[86u].y;
    vec4 _2537 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2539 = _2537.x;
    float _2540 = _2537.y;
    float _2541 = _2537.z;
    float _2542 = _2537.w;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2598 = _2597 / _473;
        float _2609 = _2598 * _524;
        float _2610 = _525 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2613 = _2598 * _526;
        float _2615 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2616 = _2615 + cbSceneParam._m0[79u].w;
        float _2617 = cbSceneParam._m0[79u].w - _2610;
        float _2623 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2613 * _2613));
        float _2626 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2623;
        float _2631 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2633 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2795;
        if (abs((_2611 - _2615) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2795 = ((((_2616 > 0.0) ? exp2(_2631 * _2616) : (2.0 - exp2(_2633 * _2616))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2626;
        }
        else
        {
            float _2755 = 1.0 / cbSceneParam._m0[80u].x;
            float _2756 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : max(_2616, _2617));
            float _2757 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : min(_2616, _2617));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            _2795 = ((abs(_2623 / _2611) * cbSceneParam._m0[80u].y) * ((((_2766 - _2767) * 2.0) - ((exp2(_2631 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0)))) - exp2(_2631 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))))) * _2755)) - ((exp2(_2633 * _2766) - exp2(_2633 * _2767)) * _2755))) + (_2626 * cbSceneParam._m0[80u].z);
        }
        vec4 _2797 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2522, _2523, 1.0), 0.0);
        float _2806 = exp2((_2795 * (-1.44269502162933349609375)) * (1.0 - _2797.w));
        float _2807 = log2(_2806);
        float _2823 = log2(_2542);
        _2635 = (exp2(_2823 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].x)) * _2797.x) / cbSceneParam._m0[78u].x)) + _2539;
        _2637 = (exp2(_2823 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].y)) * _2797.y) / cbSceneParam._m0[78u].y)) + _2540;
        _2639 = (exp2(_2823 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].z)) * _2797.z) / cbSceneParam._m0[78u].z)) + _2541;
        _2641 = _2806 * _2542;
    }
    else
    {
        _2635 = _2539;
        _2637 = _2540;
        _2639 = _2541;
        _2641 = _2542;
    }
    float _2653 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2654 = _2653 == 3.0;
    float _2655 = log2(_2641);
    float _2659 = exp2(_2655 * cbSceneParam._m0[78u].x);
    float _2660 = exp2(_2655 * cbSceneParam._m0[78u].y);
    float _2661 = exp2(_2655 * cbSceneParam._m0[78u].z);
    float _2662 = _2659 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)));
    float _2663 = _2660 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)));
    float _2664 = _2661 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0)));
    float _2673 = (_2653 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2673 * (_2654 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.y = _2673 * (_2654 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.z = _2673 * (_2654 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.w = cbInstanceData._m0[_2514].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2477) * _2513) * _2659) * _2673;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2478) * _2513) * _2660) * _2673;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2479) * _2513) * _2661) * _2673;
    SV_Target_1.w = cbInstanceData._m0[_2514].w;
}


