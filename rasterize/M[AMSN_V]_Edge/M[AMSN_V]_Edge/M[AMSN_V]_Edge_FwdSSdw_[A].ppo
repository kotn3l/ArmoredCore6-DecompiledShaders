#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _878;
float _3293;
float _3294;
float _3295;
float _3296;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_V_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_V_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3305 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))));
    float _280 = fma(_277, _213, fma(_270, _205 * TANGENT.x, (_191 * _184) * _268));
    float _283 = fma(_277, _214, fma(_270, _205 * TANGENT.y, (_191 * _185) * _268));
    float _286 = fma(_277, _215, fma(_270, _205 * TANGENT.z, (_191 * _186) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3316 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _294 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3338 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3349 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3360 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _298 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _355 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _365 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _355);
    float _366 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _355);
    float _367 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _355);
    float _371 = inversesqrt(dot(vec3(_365, _366, _367), vec3(_365, _366, _367)));
    float _372 = _365 * _371;
    float _373 = _366 * _371;
    float _374 = _367 * _371;
    vec4 _379 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _381 = _379.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _557 = sqrt(((_365 * _365) + (_366 * _366)) + (_367 * _367));
        float _563 = (cbMatDynParam._m0[5u].x * _557) + cbMatDynParam._m0[5u].y;
        float _3371 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _564 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _568 = (cbMatDynParam._m0[5u].z * _557) + cbMatDynParam._m0[5u].w;
        float _3382 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) - _564)) + _564) < ((_381 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _414 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _417 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _420 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _433 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = _433 + 9u;
    uint _436 = _435 + uint(cbMatDynParam._m0[0u].w);
    float _442 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_436].x;
    float _443 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_436].y;
    float _444 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_436].z;
    float _3393 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _448 = 1.0 - _298;
    float _449 = _445 * _448;
    float _450 = _446 * _448;
    float _451 = _447 * _448;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _298;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _298;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _298;
    float _459 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    float _462 = _458 + 0.039999999105930328369140625;
    vec4 _471 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _474 = _471.x * TEXCOORD.z;
    float _475 = dot(vec3(_291, _292, _293), vec3(_372, _373, _374));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _291) - _372;
    float _483 = (_478 * _292) - _373;
    float _484 = (_478 * _293) - _374;
    float _488 = abs(dot(vec3(_372, _373, _374), vec3(_291, _292, _293)));
    float _3426 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _490 = sqrt(_294);
    float _503 = exp2((_490 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_490 * 3.0));
    float _509 = (1.0 - _503) * ((_490 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _510 = _503 * _490;
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _877;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _602 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _606 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _610 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _635 = _538 + _291;
        float _636 = _542 + _292;
        float _637 = _546 + _293;
        float _647 = fma(_637, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635)) - _602;
        float _648 = fma(_637, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635)) - _606;
        float _649 = fma(_637, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635)) - _610;
        float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
        float _666 = ((_653 * _647) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_602 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_653 * _648) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_606 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_653 * _649) / cbModelParam._m0[34u].z) + ((((((_610 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        float _705 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_671.x + (-0.5));
        float _707 = _705 * (_671.y + (-0.5));
        float _708 = _705 * (_671.z + (-0.5));
        float _715 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_678.x + (-0.5));
        float _717 = _715 * (_678.y + (-0.5));
        float _718 = _715 * (_678.z + (-0.5));
        float _725 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_685.x + (-0.5));
        float _727 = _725 * (_685.y + (-0.5));
        float _728 = _725 * (_685.z + (-0.5));
        float _735 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_692.x + (-0.5));
        float _737 = _735 * (_692.y + (-0.5));
        float _738 = _735 * (_692.z + (-0.5));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = _706 * 0.5;
        float _743 = _716 * 0.5;
        float _744 = _726 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _759 = (dot(vec3(_291, _292, _293), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _769 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3474 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_771 + 1.0))) + _776) * _739;
        float _786 = _707 * 0.5;
        float _787 = _717 * 0.5;
        float _788 = _727 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_291, _292, _293), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3507 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_813 + 1.0))) + _818) * _740;
        float _828 = _708 * 0.5;
        float _829 = _718 * 0.5;
        float _830 = _728 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_291, _292, _293), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3540 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_855 + 1.0))) + _860) * _741;
        _877 = _708;
        _879 = _707;
        _880 = _706;
        _881 = _718;
        _882 = _717;
        _883 = _716;
        _884 = _728;
        _885 = _727;
        _886 = _726;
        _887 = _741;
        _888 = _740;
        _889 = _739;
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
    }
    else
    {
        _877 = _878;
        _879 = _878;
        _880 = _878;
        _881 = _878;
        _882 = _878;
        _883 = _878;
        _884 = _878;
        _885 = _878;
        _886 = _878;
        _887 = _878;
        _888 = _878;
        _889 = _878;
        _890 = 0.0;
        _891 = 0.0;
        _892 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _925 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _929 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _952 = _538 + _291;
        float _953 = _542 + _292;
        float _954 = _546 + _293;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_291, _292, _293), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3603 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_291, _292, _293), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3636 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_291, _292, _293), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3669 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _878;
        _1191 = _878;
        _1192 = _878;
        _1193 = _878;
        _1194 = _878;
        _1195 = _878;
        _1196 = _878;
        _1197 = _878;
        _1198 = _878;
        _1199 = _878;
        _1200 = _878;
        _1201 = _878;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_877, _881, _884, _887));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_879, _882, _885, _888));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _883, _886, _889));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _294);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1390 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1393 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1421 = frontier_phi_19_17_ladder;
        }
        float _1650;
        if (_1390 > 0.0)
        {
            _1650 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1650 = frontier_phi_28_24_ladder;
        }
        float _1907;
        if (_1393 > 0.0)
        {
            _1907 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1907 = frontier_phi_40_35_ladder;
        }
        float _1909 = isnan(_1650) ? _1421 : (isnan(_1421) ? _1650 : min(_1421, _1650));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1387) + _1376;
        float _1915 = (_1910 * _1390) + _1380;
        float _1916 = (_1910 * _1393) + _1384;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_18_40_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_18_40_ladder_2;
        _1411 = frontier_phi_18_40_ladder_1;
        _1413 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1327);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _294);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1511;
    float _1513;
    float _1515;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1475 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1479 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1483 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1486 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1489 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1492 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1655;
        if (_1486 > 0.0)
        {
            _1655 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1655 = frontier_phi_30_26_ladder;
        }
        float _1934;
        if (_1489 > 0.0)
        {
            _1934 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1934 = frontier_phi_42_37_ladder;
        }
        float _2147;
        if (_1492 > 0.0)
        {
            _2147 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2147 = frontier_phi_51_48_ladder;
        }
        float _2149 = isnan(_1934) ? _1655 : (isnan(_1655) ? _1934 : min(_1655, _1934));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1486) + _1475;
        float _2155 = (_2150 * _1489) + _1479;
        float _2156 = (_2150 * _1492) + _1483;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2157;
        float _2160 = _2157 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2156 > _2160) || ((_2156 < _2158) || ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 < _2158) || (_2154 > _2160))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2156, cbModelParam._m0[17u].z, fma(_2155, cbModelParam._m0[17u].y, _2154 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2156, cbModelParam._m0[18u].z, fma(_2155, cbModelParam._m0[18u].y, _2154 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2156, cbModelParam._m0[19u].z, fma(_2155, cbModelParam._m0[19u].y, _2154 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_27_51_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1511 = frontier_phi_27_51_ladder_2;
        _1513 = frontier_phi_27_51_ladder_1;
        _1515 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1418);
        _1511 = _1495.x * cbModelParam._m0[1u].z;
        _1513 = _1495.y * cbModelParam._m0[1u].z;
        _1515 = _1495.z * cbModelParam._m0[1u].z;
    }
    float _1528 = (((_509 * _459) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1511 - _1409)) + _1409);
    float _1530 = (((_509 * _461) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_509 * _462) + _510) * _474) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1535 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1528 * cbSceneParam._m0[91u].x));
    vec4 _1549 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_393, _394));
    float _1551 = _1549.w;
    float _1563 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1551);
    float _1564 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1551);
    float _1565 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1551);
    uvec4 _1569 = floatBitsToUint(cbInstanceData._m0[_433 + 5u]);
    uint _1571 = _1569.x * 14u;
    uint _1572 = _1571 + 13u;
    float _1579 = _474 + (-1.0);
    float _1584 = (cbLight._m0[_1572].x * _1579) + 1.0;
    float _1585 = (cbLight._m0[_1572].y * _1579) + 1.0;
    float _1586 = (cbLight._m0[_1572].z * _1579) + 1.0;
    float _1587 = (cbLight._m0[_1572].w * _1579) + 1.0;
    uint _1588 = _1571 + 5u;
    float _1594 = isnan(1.0) ? _1585 : (isnan(_1585) ? 1.0 : min(_1585, 1.0));
    uint _1598 = _1571 + 4u;
    float _1608 = isnan(1.0) ? _1584 : (isnan(_1584) ? 1.0 : min(_1584, 1.0));
    uint _1612 = _1571 | 1u;
    float _1623 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_291, _292, _293));
    float _1626 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_291, _292, _293));
    float _3805 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _3816 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1631 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1633 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1640 = ((cbLight._m0[_1588].x * _1594) * _1633) + (((cbLight._m0[_1598].x * _1563) * _1608) * _1631);
    float _1641 = ((_1594 * cbLight._m0[_1588].y) * _1633) + (((cbLight._m0[_1598].y * _1564) * _1608) * _1631);
    float _1642 = ((_1594 * cbLight._m0[_1588].z) * _1633) + (((cbLight._m0[_1598].z * _1565) * _1608) * _1631);
    uvec4 _1647 = floatBitsToUint(cbLight._m0[_1571 + 12u]);
    bool _1649 = _1647.x == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1649)
    {
        _1660 = _1640;
        _1662 = _1641;
        _1664 = _1642;
    }
    else
    {
        uint _1668 = _1571 + 6u;
        float _1684 = (dot(vec3(cbLight._m0[_1571 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1685 = _1684 * _1684;
        float _3827 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1687 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1660 = (((cbLight._m0[_1668].x * 0.3183098733425140380859375) * _1686) * _1687) + _1640;
        _1662 = (((cbLight._m0[_1668].y * 0.3183098733425140380859375) * _1686) * _1687) + _1641;
        _1664 = (((cbLight._m0[_1668].z * 0.3183098733425140380859375) * _1686) * _1687) + _1642;
    }
    bool _1667 = _1647.y == 0u;
    float _1705;
    float _1707;
    float _1709;
    if (_1667)
    {
        _1705 = _1660;
        _1707 = _1662;
        _1709 = _1664;
    }
    else
    {
        uint _1878 = _1571 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1571 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3843 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1897 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _1705 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1660;
        _1707 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1662;
        _1709 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1664;
    }
    uint _1712 = _1571 + 8u;
    float _1725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _294) * 0.949999988079071044921875);
    float _1726 = _1725 * _1725;
    float _1727 = cbLight._m0[_1571].x + _372;
    float _1728 = cbLight._m0[_1571].y + _373;
    float _1729 = cbLight._m0[_1571].z + _374;
    float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
    float _1734 = _1733 * _1727;
    float _1735 = _1733 * _1728;
    float _1736 = _1733 * _1729;
    float _1737 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1571].xyz));
    float _3859 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _1740 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1741 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1742 = dot(vec3(_291, _292, _293), vec3(_1734, _1735, _1736));
    float _3881 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1746 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1734, _1735, _1736));
    float _3892 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1750 = _1726 * _1726;
    float _1754 = ((_1745 * _1745) * (_1750 + (-1.0))) + 1.0;
    float _1762 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1763 = 0.959999978542327880859375 - _456;
    float _1765 = 0.959999978542327880859375 - _457;
    float _1766 = 0.959999978542327880859375 - _458;
    float _1773 = 1.0 - _1726;
    float _1784 = (0.5 / (((_1741 * ((_1740 * _1773) + _1726)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1773) + _1726) * _1740))) * _1740;
    float _3903 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1786 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1750 / ((_1754 * _1754) * 3.141590118408203125));
    uint _1800 = _1571 + 9u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1612].w)) * _294) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1612].x + _372;
    float _1814 = cbLight._m0[_1612].y + _373;
    float _1815 = cbLight._m0[_1612].z + _374;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1612].xyz));
    float _3914 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1827 = dot(vec3(_291, _292, _293), vec3(_1820, _1821, _1822));
    float _3925 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1612].xyz), vec3(_1820, _1821, _1822));
    float _3936 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1812 * _1812;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1846 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
    float _1853 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1741 * ((_1826 * _1853) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _1853) + _1812) * _1826))) * _1826;
    float _3947 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    float _1875 = (((((_1846 * _1763) + _459) * cbLight._m0[_1800].x) * _1865) * _1594) + ((((cbLight._m0[_1712].x * _1563) * ((_1762 * _1763) + _459)) * _1786) * _1608);
    float _1876 = (((((_1846 * _1765) + _461) * cbLight._m0[_1800].y) * _1865) * _1594) + ((((cbLight._m0[_1712].y * _1564) * ((_1762 * _1765) + _461)) * _1786) * _1608);
    float _1877 = (((((_1846 * _1766) + _462) * cbLight._m0[_1800].z) * _1865) * _1594) + ((((cbLight._m0[_1712].z * _1565) * ((_1762 * _1766) + _462)) * _1786) * _1608);
    float _1939;
    float _1941;
    float _1943;
    if (_1649)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1571 + 2u;
        uint _1949 = _1571 + 10u;
        float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _294) * 0.949999988079071044921875);
        float _1964 = _1963 * _1963;
        float _1965 = cbLight._m0[_1945].x + _372;
        float _1966 = cbLight._m0[_1945].y + _373;
        float _1967 = cbLight._m0[_1945].z + _374;
        float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
        float _1972 = _1971 * _1965;
        float _1973 = _1971 * _1966;
        float _1974 = _1971 * _1967;
        float _1975 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1945].xyz));
        float _3958 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1979 = dot(vec3(_291, _292, _293), vec3(_1972, _1973, _1974));
        float _3969 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1983 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1972, _1973, _1974));
        float _3980 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1987 = _1964 * _1964;
        float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
        float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * 5.0);
        float _2005 = 1.0 - _1964;
        float _2015 = (0.5 / (((_1741 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2005) + _1964) * _1978))) * _1978;
        float _3991 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2017 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
        float _2018 = isnan(1.0) ? _1586 : (isnan(_1586) ? 1.0 : min(_1586, 1.0));
        _1939 = (((((_1998 * _1763) + _459) * cbLight._m0[_1949].x) * _2017) * _2018) + _1875;
        _1941 = (((((_1998 * _1765) + _461) * cbLight._m0[_1949].y) * _2017) * _2018) + _1876;
        _1943 = (((((_1998 * _1766) + _462) * cbLight._m0[_1949].z) * _2017) * _2018) + _1877;
    }
    float _2053;
    float _2055;
    float _2057;
    if (_1667)
    {
        _2053 = _1939;
        _2055 = _1941;
        _2057 = _1943;
    }
    else
    {
        uint _2064 = _1571 + 3u;
        uint _2068 = _1571 + 11u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _294) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _372;
        float _2085 = cbLight._m0[_2064].y + _373;
        float _2086 = cbLight._m0[_2064].z + _374;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2064].xyz));
        float _4007 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2098 = dot(vec3(_291, _292, _293), vec3(_2091, _2092, _2093));
        float _4018 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _4029 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
        float _2124 = 1.0 - _2083;
        float _2134 = (0.5 / (((_1741 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1741 * _2124) + _2083) * _2097))) * _2097;
        float _4040 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
        _2053 = (((((_2117 * _1763) + _459) * cbLight._m0[_2068].x) * _2136) * _2137) + _1939;
        _2055 = (((((_2117 * _1765) + _461) * cbLight._m0[_2068].y) * _2136) * _2137) + _1941;
        _2057 = (((((_2117 * _1766) + _462) * cbLight._m0[_2068].z) * _2136) * _2137) + _1943;
    }
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_1569.y == 0u)
    {
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2212;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2212;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2212;
        uvec4 _2227 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2228 = _2227.x;
        uint _2239 = uint((float(_2227.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2228))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2228)));
        float _2249 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2250 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        uint _2253 = uint(isnan(14.0) ? _2250 : (isnan(_2250) ? 14.0 : min(_2250, 14.0)));
        uvec4 _2258 = texelFetch(g_lightClusterGridBuffer, int(((_2253 << 2u) + (_2239 << 6u)) >> 2u));
        uint _2259 = _2258.x;
        uint _2260 = _2227.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2260 >> 4u) & 15u)) + 4294967295u) & _2259) == 0u) || ((_2260 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2527)
                {
                    frontier_phi_68_pred = _2513;
                    frontier_phi_68_pred_1 = _2516;
                    frontier_phi_68_pred_2 = _2515;
                    frontier_phi_68_pred_3 = _2514;
                    frontier_phi_68_pred_4 = _2512;
                    frontier_phi_68_pred_5 = _2511;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2516;
                    _2662 = _2526;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2517 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _2213;
                        float _2723 = _2682.y - _2214;
                        float _2724 = _2682.z - _2215;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2729 = _2728 * _2722;
                        float _2730 = _2728 * _2723;
                        float _2731 = _2728 * _2724;
                        float _2732 = dot(vec3(_414, _417, _420), vec3(_2729, _2730, _2731));
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _4066 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2732) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _2213;
                        float _2758 = (-0.0) - _2214;
                        float _2759 = (-0.0) - _2215;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2749 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _490;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2787 = _2766 + _2731;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_414, _417, _420), vec3(_2764, _2765, _2766));
                        float _4082 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2799 = dot(vec3(_414, _417, _420), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4093 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2742 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2732) + _2808;
                        float _4104 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4115 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) / ((_2806 * _2806) * ((_2749 * 2.1991131305694580078125) + 3.141590118408203125))) * _2738;
                        _2586 = (_2753 * _2701.x) + _2659;
                        _2587 = (_2753 * _2701.y) + _2660;
                        _2588 = (_2753 * _2701.z) + _2661;
                        _2583 = (_2834 * _2718.x) + _2656;
                        _2584 = (_2834 * _2718.y) + _2657;
                        _2585 = (_2834 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2588;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_68_pred = _2585;
                    frontier_phi_68_pred_1 = _2588;
                    frontier_phi_68_pred_2 = _2587;
                    frontier_phi_68_pred_3 = _2586;
                    frontier_phi_68_pred_4 = _2584;
                    frontier_phi_68_pred_5 = _2583;
                }
                _2364 = frontier_phi_68_pred;
                _2370 = frontier_phi_68_pred_1;
                _2368 = frontier_phi_68_pred_2;
                _2366 = frontier_phi_68_pred_3;
                _2362 = frontier_phi_68_pred_4;
                _2360 = frontier_phi_68_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2360;
                    _2512 = _2362;
                    _2513 = _2364;
                    _2514 = _2366;
                    _2515 = _2368;
                    _2516 = _2370;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2376) & _2259) == 0u)
        {
            _2479 = _2359;
            _2481 = _2361;
            _2483 = _2363;
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _2505 = _2504 * _2213;
            float _2506 = _2504 * _2214;
            float _2507 = _2504 * _2215;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2639 = _2359;
                float _2640 = _2361;
                float _2641 = _2363;
                float _2642 = _2365;
                float _2643 = _2367;
                float _2644 = _2369;
                uint _2645 = _2376;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2655)
                    {
                        frontier_phi_79_pred = _2644;
                        frontier_phi_79_pred_1 = _2643;
                        frontier_phi_79_pred_2 = _2642;
                        frontier_phi_79_pred_3 = _2641;
                        frontier_phi_79_pred_4 = _2640;
                        frontier_phi_79_pred_5 = _2639;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        float _2866 = _2644;
                        uint _2867 = _2654;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2937;
                        vec4 _2953;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2878 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2924 = (_2878 * 40u) + 16u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2878 * 40u) + 20u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2956 = (_2878 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2878 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_2215, _2988.z, fma(_2214, _2988.y, _2988.x * _2213)) + _2988.w;
                            _3001 = !((fma(_2215, _2969.z, fma(_2214, _2969.y, _2969.x * _2213)) + _2969.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2893.x - _2213;
                                float _3029 = _2893.y - _2214;
                                float _3030 = _2893.z - _2215;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2894 * _2894));
                                float _4126 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3046 = sqrt(_3031) * _2909.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3052 = ((1.0 - _3049) * dot(vec3(_3035, _3036, _3037), vec3(_414, _417, _420))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_2215, _2937.z, fma(_2214, _2937.y, _2937.x * _2213)) + _2937.w) / _3000;
                                float _3060 = (fma(_2215, _2953.z, fma(_2214, _2953.y, _2953.x * _2213)) + _2953.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4142 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3078 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                                float _3079 = 1.0 - _490;
                                float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                                float _3087 = _3086 * _3086;
                                float _3088 = _3087 * _3087;
                                float _3089 = _3035 - _2505;
                                float _3090 = _3036 - _2506;
                                float _3091 = _3037 - _2507;
                                float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                                float _3099 = dot(vec3(_414, _417, _420), vec3((-0.0) - _2505, (-0.0) - _2506, (-0.0) - _2507));
                                float _4153 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3103 = dot(vec3(_414, _417, _420), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                                float _4164 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                                float _3111 = _3048 * _3087;
                                float _3112 = _3111 * _3111;
                                float _3118 = ((1.0 - _3112) * dot(vec3(_414, _417, _420), vec3(_3035, _3036, _3037))) + _3112;
                                float _4175 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3120 = 1.0 - _3087;
                                float _3130 = (0.5 / (((_3119 * ((_3102 * _3120) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3087) * _3102))) * _3119;
                                float _4186 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3140 = (_3065 * _3042) * (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) / ((_3110 * _3110) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3066 * _2909.z;
                                frontier_phi_85_pred_1 = _3066 * _2909.y;
                                frontier_phi_85_pred_2 = _3066 * _2909.x;
                                frontier_phi_85_pred_3 = _3140 * _2921.z;
                                frontier_phi_85_pred_4 = _3140 * _2921.y;
                                frontier_phi_85_pred_5 = _3140 * _2921.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_85_pred;
                            _3148 = frontier_phi_85_pred_1;
                            _3147 = frontier_phi_85_pred_2;
                            _3146 = frontier_phi_85_pred_3;
                            _3145 = frontier_phi_85_pred_4;
                            _3144 = frontier_phi_85_pred_5;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            _2848 = _3144 + _2861;
                            _2849 = _3145 + _2862;
                            _2850 = _3146 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2853;
                        frontier_phi_79_pred_1 = _2852;
                        frontier_phi_79_pred_2 = _2851;
                        frontier_phi_79_pred_3 = _2850;
                        frontier_phi_79_pred_4 = _2849;
                        frontier_phi_79_pred_5 = _2848;
                    }
                    _2490 = frontier_phi_79_pred;
                    _2488 = frontier_phi_79_pred_1;
                    _2486 = frontier_phi_79_pred_2;
                    _2484 = frontier_phi_79_pred_3;
                    _2482 = frontier_phi_79_pred_4;
                    _2480 = frontier_phi_79_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2480;
                        _2640 = _2482;
                        _2641 = _2484;
                        _2642 = _2486;
                        _2643 = _2488;
                        _2644 = _2490;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2486;
                frontier_phi_60_61_ladder_1 = _2490;
                frontier_phi_60_61_ladder_2 = _2488;
                frontier_phi_60_61_ladder_3 = _2484;
                frontier_phi_60_61_ladder_4 = _2482;
                frontier_phi_60_61_ladder_5 = _2480;
            }
            else
            {
                frontier_phi_60_61_ladder = _2365;
                frontier_phi_60_61_ladder_1 = _2369;
                frontier_phi_60_61_ladder_2 = _2367;
                frontier_phi_60_61_ladder_3 = _2363;
                frontier_phi_60_61_ladder_4 = _2361;
                frontier_phi_60_61_ladder_5 = _2359;
            }
            _2479 = frontier_phi_60_61_ladder_5;
            _2481 = frontier_phi_60_61_ladder_4;
            _2483 = frontier_phi_60_61_ladder_3;
            _2485 = frontier_phi_60_61_ladder;
            _2487 = frontier_phi_60_61_ladder_2;
            _2489 = frontier_phi_60_61_ladder_1;
        }
        float _2494 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2271 = (_2494 * _2485) + _1705;
        _2273 = (_2494 * _2487) + _1707;
        _2275 = (_2494 * _2489) + _1709;
        _2277 = ((_2479 * _459) * _2494) + _2053;
        _2279 = ((_2481 * _461) * _2494) + _2055;
        _2281 = ((_2483 * _462) * _2494) + _2057;
    }
    else
    {
        _2271 = _1705;
        _2273 = _1707;
        _2275 = _1709;
        _2277 = _2053;
        _2279 = _2055;
        _2281 = _2057;
    }
    float _4202 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4213 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4224 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _2298 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2271 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _474))) + ((_2277 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2299 = ((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2273 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _474))) + ((_2279 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    float _2300 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2275 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _474))) + ((_2281 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1316)) * cbPerFrame._m0[3u].x);
    uint _2301 = _433 + 6u;
    float _2309 = _393 / cbSceneParam._m0[86u].x;
    float _2310 = _394 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2385 = _2384 / _314;
        float _2396 = _2385 * _365;
        float _2397 = _366 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2399 = _2385 * _367;
        float _2401 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2402 = _2401 + cbSceneParam._m0[79u].w;
        float _2403 = cbSceneParam._m0[79u].w - _2397;
        float _2409 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2399 * _2399));
        float _2412 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2409;
        float _2417 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2419 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2596;
        if (abs((_2398 - _2401) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2596 = ((((_2402 > 0.0) ? exp2(_2417 * _2402) : (2.0 - exp2(_2419 * _2402))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2412;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : max(_2402, _2403));
            float _2542 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : min(_2402, _2403));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2596 = ((abs(_2409 / _2398) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2417 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2417 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2419 * _2551) - exp2(_2419 * _2552)) * _2540))) + (_2412 * cbSceneParam._m0[80u].z);
        }
        vec4 _2598 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2607 = exp2((_2596 * (-1.44269502162933349609375)) * (1.0 - _2598.w));
        float _2608 = log2(_2607);
        float _2624 = log2(_2329);
        _2421 = (exp2(_2624 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].x)) * _2598.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2423 = (exp2(_2624 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].y)) * _2598.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2425 = (exp2(_2624 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2608 * cbSceneParam._m0[78u].z)) * _2598.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2427 = _2607 * _2329;
    }
    else
    {
        _2421 = _2326;
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
    }
    bool _2634;
    vec4 _2437;
    vec4 _2459;
    float _2461;
    float _2465;
    float _2466;
    float _2467;
    float _2468;
    bool _2478;
    for (;;)
    {
        _2437 = cbMatDynParam._m0[0u];
        float _2439 = roundEven(_2437.y);
        bool _2440 = _2439 == 3.0;
        float _2441 = log2(_2427);
        float _2448 = exp2(_2441 * cbSceneParam._m0[78u].x) * _2298;
        float _2449 = exp2(_2441 * cbSceneParam._m0[78u].y) * _2299;
        float _2450 = exp2(_2441 * cbSceneParam._m0[78u].z) * _2300;
        float _2457 = _381 + (-0.5);
        _2459 = cbMtdParam._m0[1u];
        _2461 = _2459.y * _2457;
        float _2464 = (_2439 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2465 = _2464 * (_2440 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
        _2466 = _2464 * (_2440 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
        _2467 = _2464 * (_2440 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2425)));
        _2468 = _2457 * 0.999000012874603271484375;
        _2478 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2478)
        {
            if ((cbInstanceData._m0[_433 + 7u].x + _2468) < 0.5)
            {
                _2634 = true;
                break;
            }
        }
        uint _2575 = _435 + uint(_2437.w);
        if ((cbInstanceData._m0[_2575].w < 1.0) && ((cbInstanceData._m0[_2575].w + _2468) < 0.5))
        {
            _2634 = true;
            break;
        }
        if ((_2461 + _241) < _2459.x)
        {
            _2634 = true;
            break;
        }
        _2634 = false;
        break;
    }
    float _2839;
    if (_2634)
    {
        discard_state = true;
        _2839 = 0.0;
    }
    else
    {
        _2839 = cbInstanceData._m0[_2301].w;
    }
    SV_Target.x = _2465;
    SV_Target.y = _2466;
    SV_Target.z = _2467;
    SV_Target.w = _2839;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
    discard_exit();
}


