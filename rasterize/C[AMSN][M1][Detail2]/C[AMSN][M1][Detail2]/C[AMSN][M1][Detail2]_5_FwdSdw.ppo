#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1021;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _309 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3616 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[10u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[10u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[10u].z) - _255)) + _255;
    vec4 _343 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _372 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3627 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _380 = (_373 * ((_343.x * cbMtdParam._m0[11u].x) - _317)) + _317;
    float _381 = (_373 * ((_343.y * cbMtdParam._m0[11u].y) - _318)) + _318;
    float _382 = (_373 * ((_343.z * cbMtdParam._m0[11u].z) - _319)) + _319;
    vec4 _399 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _407 = (_399.x * 2.0) + (-1.0);
    float _409 = (_399.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_407, _409), vec2(_407, _409));
    float _3638 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _415 = sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))));
    float _416 = _399.z * cbMtdParam._m0[13u].y;
    vec4 _429 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _443 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_429.z * cbMtdParam._m0[13u].x) - _416)) + _416;
    vec4 _457 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _471 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_457.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    float _484 = (((((_429.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _407) + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _485 = (((((_429.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _409) + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _488 = fma(_415, _217 * NORMAL.x, fma(_485, _224 * TANGENT.x, (_210 * _202) * _484));
    float _491 = fma(_415, _217 * NORMAL.y, fma(_485, _224 * TANGENT.y, (_210 * _203) * _484));
    float _494 = fma(_415, _217 * NORMAL.z, fma(_485, _224 * TANGENT.z, (_210 * _204) * _484));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    float _499 = _498 * _488;
    float _500 = _498 * _491;
    float _501 = _498 * _494;
    float _3649 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _502 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3671 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3682 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_501, cbSceneParam._m0[5u].z, fma(_500, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _499));
    float _608 = fma(_501, cbSceneParam._m0[6u].z, fma(_500, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _499));
    float _611 = fma(_501, cbSceneParam._m0[7u].z, fma(_500, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _499));
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _626 = (_624 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _632 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_626].x;
    float _633 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_626].y;
    float _634 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_626].z;
    float _3693 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    vec4 _646 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _649 = _646.x * TEXCOORD_5.w;
    float _650 = dot(vec3(_499, _500, _501), vec3(_578, _579, _580));
    float _653 = _650 * 2.0;
    float _657 = (_653 * _499) - _578;
    float _658 = (_653 * _500) - _579;
    float _659 = (_653 * _501) - _580;
    float _663 = abs(dot(vec3(_578, _579, _580), vec3(_499, _500, _501)));
    float _3726 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _665 = sqrt(_502);
    float _678 = exp2((_665 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_665 * 3.0));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _749 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _753 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _778 = _710 + _499;
        float _779 = _714 + _500;
        float _780 = _718 + _501;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_499, _500, _501), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3774 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_499, _500, _501), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3807 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_499, _500, _501), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3840 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1065 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1069 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1092 = _710 + _499;
        float _1093 = _714 + _500;
        float _1094 = _718 + _501;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_499, _500, _501), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3903 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_499, _500, _501), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3936 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_499, _500, _501), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3969 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1021;
        _1331 = _1021;
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = _1021;
        _1341 = _1021;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _657 * 0.5;
    float _1399 = _658 * 0.5;
    float _1400 = _659 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _502);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1514 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1518 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1522 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1525 = fma(_659, cbModelParam._m0[13u].z, fma(_658, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657));
        float _1528 = fma(_659, cbModelParam._m0[14u].z, fma(_658, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657));
        float _1531 = fma(_659, cbModelParam._m0[15u].z, fma(_658, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657));
        float _1559;
        if (_1525 > 0.0)
        {
            _1559 = abs((1.0 - _1514) / _1525);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1514 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1559 = frontier_phi_14_12_ladder;
        }
        float _1732;
        if (_1528 > 0.0)
        {
            _1732 = abs((1.0 - _1518) / _1528);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1518 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1732 = frontier_phi_23_19_ladder;
        }
        float _2027;
        if (_1531 > 0.0)
        {
            _2027 = abs((1.0 - _1522) / _1531);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1522 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2027 = frontier_phi_35_30_ladder;
        }
        float _2029 = isnan(_1732) ? _1559 : (isnan(_1559) ? _1732 : min(_1559, _1732));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1525) + _1514;
        float _2035 = (_2030 * _1528) + _1518;
        float _2036 = (_2030 * _1531) + _1522;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_13_35_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1547 = frontier_phi_13_35_ladder_2;
        _1549 = frontier_phi_13_35_ladder_1;
        _1551 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_657, _658, _659), _1467);
        _1547 = _1535.x * cbModelParam._m0[1u].y;
        _1549 = _1535.y * cbModelParam._m0[1u].y;
        _1551 = _1535.z * cbModelParam._m0[1u].y;
    }
    float _1555 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _502);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1555 : min(cbModelParam._m0[25u].w, _1555));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_659, cbModelParam._m0[21u].z, fma(_658, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657));
        float _1627 = fma(_659, cbModelParam._m0[22u].z, fma(_658, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657));
        float _1630 = fma(_659, cbModelParam._m0[23u].z, fma(_658, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657));
        float _1737;
        if (_1624 > 0.0)
        {
            _1737 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1737 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1627 > 0.0)
        {
            _2054 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2381;
        if (_1630 > 0.0)
        {
            _2381 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2381 = frontier_phi_47_44_ladder;
        }
        float _2383 = isnan(_2054) ? _1737 : (isnan(_1737) ? _2054 : min(_1737, _2054));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1624) + _1613;
        float _2389 = (_2384 * _1627) + _1617;
        float _2390 = (_2384 * _1630) + _1621;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1556);
            frontier_phi_22_47_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_22_47_ladder_2;
        _1651 = frontier_phi_22_47_ladder_1;
        _1653 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_657, _658, _659), _1556);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1665 = ((((1.0 - _678) * ((_665 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_678 * _665)) * _649;
    float _1666 = _1665 * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1667 = _1665 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1668 = _1665 * ((cbModelParam._m0[1u].w * (_1653 - _1551)) + _1551);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    float _1711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1715 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1719 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1724 = _1711 / _1723;
    float _1725 = _1715 / _1723;
    float _1726 = _1719 / _1723;
    float _1873;
    float _1874;
    float _1875;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1753 = ((uint(_1726 > cbSceneParam._m0[59u].y) + uint(_1726 > cbSceneParam._m0[59u].x)) + uint(_1726 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1754 = _1753 + 43u;
        uint _1762 = _1753 + 44u;
        uint _1770 = _1753 + 45u;
        uint _1778 = _1753 + 46u;
        float _1789 = fma(_1723, cbSceneParam._m0[_1754].w, fma(_1719, cbSceneParam._m0[_1754].z, fma(_1715, cbSceneParam._m0[_1754].y, _1711 * cbSceneParam._m0[_1754].x)));
        float _1793 = fma(_1723, cbSceneParam._m0[_1762].w, fma(_1719, cbSceneParam._m0[_1762].z, fma(_1715, cbSceneParam._m0[_1762].y, _1711 * cbSceneParam._m0[_1762].x)));
        float _1801 = fma(_1723, cbSceneParam._m0[_1778].w, fma(_1719, cbSceneParam._m0[_1778].z, fma(_1715, cbSceneParam._m0[_1778].y, _1711 * cbSceneParam._m0[_1778].x)));
        float _1806 = cbSceneParam._m0[33u].z * _1801;
        float _1808 = cbSceneParam._m0[33u].w * _1801;
        float _1811 = fma(_1723, cbSceneParam._m0[_1770].w, fma(_1719, cbSceneParam._m0[_1770].z, fma(_1715, cbSceneParam._m0[_1770].y, _1711 * cbSceneParam._m0[_1770].x))) / _1801;
        float _1859 = (cbSceneParam._m0[33u].x - sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726))) * cbSceneParam._m0[33u].y;
        float _4095 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1866 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1806 + _1789) / _1801, (_1808 + _1793) / _1801), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 + _1789) / _1801, (_1793 - _1806) / _1801), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 - _1806) / _1801, (_1793 - _1808) / _1801), _1811), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 - _1808) / _1801, (_1806 + _1793) / _1801), _1811), 0.0)).x), vec4(0.25)));
        _1873 = 1.0 - (_1866 * cbSceneParam._m0[34u].x);
        _1874 = 1.0 - (_1866 * cbSceneParam._m0[34u].y);
        _1875 = 1.0 - (_1866 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1873 = 1.0;
        _1874 = 1.0;
        _1875 = 1.0;
    }
    float _1939;
    float _1941;
    float _1943;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1927 = fma(_1723, cbSceneParam._m0[63u].w, fma(_1719, cbSceneParam._m0[63u].z, fma(_1715, cbSceneParam._m0[63u].y, _1711 * cbSceneParam._m0[63u].x)));
        float _1928 = fma(_1723, cbSceneParam._m0[60u].w, fma(_1719, cbSceneParam._m0[60u].z, fma(_1715, cbSceneParam._m0[60u].y, _1711 * cbSceneParam._m0[60u].x))) / _1927;
        float _1929 = fma(_1723, cbSceneParam._m0[61u].w, fma(_1719, cbSceneParam._m0[61u].z, fma(_1715, cbSceneParam._m0[61u].y, _1711 * cbSceneParam._m0[61u].x))) / _1927;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1928 >= cbSceneParam._m0[64u].x) && (_1929 >= cbSceneParam._m0[64u].y)) && (_1928 <= cbSceneParam._m0[64u].z)) && (_1929 <= cbSceneParam._m0[64u].w))
        {
            float _2067 = fma(_1723, cbSceneParam._m0[62u].w, fma(_1719, cbSceneParam._m0[62u].z, fma(_1715, cbSceneParam._m0[62u].y, _1711 * cbSceneParam._m0[62u].x))) / _1927;
            float _2071 = isnan(cbSceneParam._m0[41u].w) ? _2067 : (isnan(_2067) ? cbSceneParam._m0[41u].w : max(_2067, cbSceneParam._m0[41u].w));
            float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1725 * _1725) + (_1724 * _1724)) + (_1726 * _1726))) * cbSceneParam._m0[33u].y;
            float _4111 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
            float _2121 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1928, cbSceneParam._m0[33u].w + _1929), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1928, _1929 - cbSceneParam._m0[33u].z), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1928 - cbSceneParam._m0[33u].z, _1929 - cbSceneParam._m0[33u].w), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1928 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1929), _2071), 0.0)).x), vec4(0.25)));
            float _2125 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
            float _2126 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
            float _2127 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2127) ? _1875 : (isnan(_1875) ? _2127 : min(_1875, _2127));
            frontier_phi_34_33_ladder_1 = isnan(_2126) ? _1874 : (isnan(_1874) ? _2126 : min(_1874, _2126));
            frontier_phi_34_33_ladder_2 = isnan(_2125) ? _1873 : (isnan(_1873) ? _2125 : min(_1873, _2125));
        }
        else
        {
            frontier_phi_34_33_ladder = _1875;
            frontier_phi_34_33_ladder_1 = _1874;
            frontier_phi_34_33_ladder_2 = _1873;
        }
        _1939 = frontier_phi_34_33_ladder_2;
        _1941 = frontier_phi_34_33_ladder_1;
        _1943 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1939 = _1873;
        _1941 = _1874;
        _1943 = _1875;
    }
    uvec4 _1948 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1950 = _1948.x * 14u;
    uint _1951 = _1950 + 13u;
    float _1958 = _649 + (-1.0);
    float _1963 = (cbLight._m0[_1951].x * _1958) + 1.0;
    float _1964 = (cbLight._m0[_1951].y * _1958) + 1.0;
    float _1965 = (cbLight._m0[_1951].z * _1958) + 1.0;
    float _1966 = (cbLight._m0[_1951].w * _1958) + 1.0;
    uint _1967 = _1950 + 5u;
    float _1973 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1977 = _1950 + 4u;
    float _1986 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1990 = _1950 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_499, _500, _501));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_499, _500, _501));
    float _4147 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4158 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1967].x * _1973) * _2011) + (((cbLight._m0[_1977].x * _1939) * _1986) * _2009);
    float _2019 = ((_1973 * cbLight._m0[_1967].y) * _2011) + (((cbLight._m0[_1977].y * _1941) * _1986) * _2009);
    float _2020 = ((_1973 * cbLight._m0[_1967].z) * _2011) + (((cbLight._m0[_1977].z * _1943) * _1986) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1950 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2026)
    {
        _2128 = _2018;
        _2130 = _2019;
        _2132 = _2020;
    }
    else
    {
        uint _2136 = _1950 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_1950 + 2u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4169 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2155 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2018;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2019;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2020;
    }
    bool _2135 = _2024.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2135)
    {
        _2190 = _2128;
        _2192 = _2130;
        _2194 = _2132;
    }
    else
    {
        uint _2352 = _1950 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_1950 + 3u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4185 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2371 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2190 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2128;
        _2192 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2130;
        _2194 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2132;
    }
    uint _2197 = _1950 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _502) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_1950].x + _578;
    float _2213 = cbLight._m0[_1950].y + _579;
    float _2214 = cbLight._m0[_1950].z + _580;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1950].xyz));
    float _4201 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2226 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2227 = dot(vec3(_499, _500, _501), vec3(_2219, _2220, _2221));
    float _4223 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2219, _2220, _2221));
    float _4234 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2226 * ((_2225 * _2251) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2251) + _2211) * _2225))) * _2225;
    float _4245 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2278 = _1950 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _502) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_1990].x + _578;
    float _2292 = cbLight._m0[_1990].y + _579;
    float _2293 = cbLight._m0[_1990].z + _580;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1990].xyz));
    float _4256 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2305 = dot(vec3(_499, _500, _501), vec3(_2298, _2299, _2300));
    float _4267 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2298, _2299, _2300));
    float _4278 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2327 = 1.0 - _2290;
    float _2337 = (0.5 / (((_2226 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2327) + _2290) * _2304))) * _2304;
    float _4289 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2349 = (((_2326 * cbLight._m0[_2278].x) * _2339) * _1973) + ((((cbLight._m0[_2197].x * _1939) * _2250) * _2264) * _1986);
    float _2350 = (((_2326 * cbLight._m0[_2278].y) * _2339) * _1973) + ((((cbLight._m0[_2197].y * _1941) * _2250) * _2264) * _1986);
    float _2351 = (((_2326 * cbLight._m0[_2278].z) * _2339) * _1973) + ((((cbLight._m0[_2197].z * _1943) * _2250) * _2264) * _1986);
    float _2407;
    float _2409;
    float _2411;
    if (_2026)
    {
        _2407 = _2349;
        _2409 = _2350;
        _2411 = _2351;
    }
    else
    {
        uint _2413 = _1950 + 2u;
        uint _2417 = _1950 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _502) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _578;
        float _2434 = cbLight._m0[_2413].y + _579;
        float _2435 = cbLight._m0[_2413].z + _580;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2413].xyz));
        float _4300 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2447 = dot(vec3(_499, _500, _501), vec3(_2440, _2441, _2442));
        float _4311 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4322 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2469 = 1.0 - _2432;
        float _2479 = (0.5 / (((_2226 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2469) + _2432) * _2446))) * _2446;
        float _4333 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2407 = (((_2468 * cbLight._m0[_2417].x) * _2481) * _2482) + _2349;
        _2409 = (((_2468 * cbLight._m0[_2417].y) * _2481) * _2482) + _2350;
        _2411 = (((_2468 * cbLight._m0[_2417].z) * _2481) * _2482) + _2351;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2135)
    {
        _2513 = _2407;
        _2515 = _2409;
        _2517 = _2411;
    }
    else
    {
        uint _2524 = _1950 + 3u;
        uint _2528 = _1950 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _502) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _578;
        float _2545 = cbLight._m0[_2524].y + _579;
        float _2546 = cbLight._m0[_2524].z + _580;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2524].xyz));
        float _4349 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2558 = dot(vec3(_499, _500, _501), vec3(_2551, _2552, _2553));
        float _4360 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4371 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2580 = 1.0 - _2543;
        float _2590 = (0.5 / (((_2226 * ((_2557 * _2580) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2580) + _2543) * _2557))) * _2557;
        float _4382 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2513 = (((_2579 * cbLight._m0[_2528].x) * _2592) * _2593) + _2407;
        _2515 = (((_2579 * cbLight._m0[_2528].y) * _2592) * _2593) + _2409;
        _2517 = (((_2579 * cbLight._m0[_2528].z) * _2592) * _2593) + _2411;
    }
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_1948.y == 0u)
    {
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2615)));
        float _2636 = (log2(_1726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
        }
        else
        {
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2887)
                {
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2886;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2877 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _1724;
                        float _3062 = _3021.y - _1725;
                        float _3063 = _3021.z - _1726;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_605, _608, _611), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4408 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _1724;
                        float _3097 = (-0.0) - _1725;
                        float _3098 = (-0.0) - _1726;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3112 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _665;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3125 = _3105 + _3070;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_605, _608, _611), vec3(_3103, _3104, _3105));
                        float _4424 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3137 = dot(vec3(_605, _608, _611), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4435 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3081 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3071) + _3146;
                        float _4446 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4457 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3144 * _3144) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2930 = (_3092 * _3040.x) + _2998;
                        _2931 = (_3092 * _3040.y) + _2999;
                        _2932 = (_3092 * _3040.z) + _3000;
                        _2927 = (_3172 * _3057.x) + _2995;
                        _2928 = (_3172 * _3057.y) + _2996;
                        _2929 = (_3172 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2931;
                    frontier_phi_66_pred_2 = _2930;
                    frontier_phi_66_pred_3 = _2929;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                _2737 = frontier_phi_66_pred;
                _2735 = frontier_phi_66_pred_1;
                _2733 = frontier_phi_66_pred_2;
                _2731 = frontier_phi_66_pred_3;
                _2729 = frontier_phi_66_pred_4;
                _2727 = frontier_phi_66_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2727;
                    _2872 = _2729;
                    _2873 = _2731;
                    _2874 = _2733;
                    _2875 = _2735;
                    _2876 = _2737;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
        }
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.z;
        uint _2743 = (_2741 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2743) & _2646) == 0u)
        {
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
            float _2865 = _2864 * _1724;
            float _2866 = _2864 * _1725;
            float _2867 = _2864 * _1726;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2743 < ((_2741 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2978 = _2726;
                float _2979 = _2728;
                float _2980 = _2730;
                float _2981 = _2732;
                float _2982 = _2734;
                float _2983 = _2736;
                uint _2984 = _2743;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2994)
                    {
                        frontier_phi_72_pred = _2983;
                        frontier_phi_72_pred_1 = _2982;
                        frontier_phi_72_pred_2 = _2981;
                        frontier_phi_72_pred_3 = _2980;
                        frontier_phi_72_pred_4 = _2979;
                        frontier_phi_72_pred_5 = _2978;
                    }
                    else
                    {
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        uint _3196 = _2993;
                        uint _3197;
                        vec4 _3222;
                        float _3223;
                        vec4 _3238;
                        vec3 _3250;
                        vec4 _3266;
                        vec4 _3282;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3207 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3196));
                            _3197 = (_3196 + 4294967295u) & _3196;
                            uint _3209 = _3207 * 40u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.w;
                            uint _3225 = (_3207 * 40u) + 4u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3207 * 40u) + 8u;
                            _3250 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x));
                            uint _3253 = (_3207 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3207 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3207 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3207 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_1726, _3317.z, fma(_1725, _3317.y, _3317.x * _1724)) + _3317.w;
                            _3330 = !((fma(_1726, _3298.z, fma(_1725, _3298.y, _3298.x * _1724)) + _3298.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3222.x - _1724;
                                float _3358 = _3222.y - _1725;
                                float _3359 = _3222.z - _1726;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3223 * _3223));
                                float _4468 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3375 = sqrt(_3360) * _3238.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_605, _608, _611))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_1726, _3266.z, fma(_1725, _3266.y, _3266.x * _1724)) + _3266.w) / _3329;
                                float _3389 = (fma(_1726, _3282.z, fma(_1725, _3282.y, _3282.x * _1724)) + _3282.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4484 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _665;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2865;
                                float _3419 = _3365 - _2866;
                                float _3420 = _3366 - _2867;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4495 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3432 = dot(vec3(_605, _608, _611), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4506 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_605, _608, _611), vec3(_3364, _3365, _3366))) + _3441;
                                float _4517 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4528 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3395 * _3238.y;
                                frontier_phi_78_pred_1 = _3395 * _3238.x;
                                frontier_phi_78_pred_2 = _3469 * _3250.z;
                                frontier_phi_78_pred_3 = _3469 * _3250.y;
                                frontier_phi_78_pred_4 = _3469 * _3250.x;
                                frontier_phi_78_pred_5 = _3395 * _3238.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_78_pred;
                            _3476 = frontier_phi_78_pred_1;
                            _3475 = frontier_phi_78_pred_2;
                            _3474 = frontier_phi_78_pred_3;
                            _3473 = frontier_phi_78_pred_4;
                            _3478 = frontier_phi_78_pred_5;
                            _3180 = _3476 + _3193;
                            _3181 = _3477 + _3194;
                            _3182 = _3478 + _3195;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            if (_3197 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3197;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3182;
                        frontier_phi_72_pred_1 = _3181;
                        frontier_phi_72_pred_2 = _3180;
                        frontier_phi_72_pred_3 = _3179;
                        frontier_phi_72_pred_4 = _3178;
                        frontier_phi_72_pred_5 = _3177;
                    }
                    _2850 = frontier_phi_72_pred;
                    _2848 = frontier_phi_72_pred_1;
                    _2846 = frontier_phi_72_pred_2;
                    _2844 = frontier_phi_72_pred_3;
                    _2842 = frontier_phi_72_pred_4;
                    _2840 = frontier_phi_72_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2840;
                        _2979 = _2842;
                        _2980 = _2844;
                        _2981 = _2846;
                        _2982 = _2848;
                        _2983 = _2850;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2850;
                frontier_phi_60_61_ladder_1 = _2848;
                frontier_phi_60_61_ladder_2 = _2844;
                frontier_phi_60_61_ladder_3 = _2842;
                frontier_phi_60_61_ladder_4 = _2840;
                frontier_phi_60_61_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_60_61_ladder = _2736;
                frontier_phi_60_61_ladder_1 = _2734;
                frontier_phi_60_61_ladder_2 = _2730;
                frontier_phi_60_61_ladder_3 = _2728;
                frontier_phi_60_61_ladder_4 = _2726;
                frontier_phi_60_61_ladder_5 = _2732;
            }
            _2839 = frontier_phi_60_61_ladder_4;
            _2841 = frontier_phi_60_61_ladder_3;
            _2843 = frontier_phi_60_61_ladder_2;
            _2845 = frontier_phi_60_61_ladder_5;
            _2847 = frontier_phi_60_61_ladder_1;
            _2849 = frontier_phi_60_61_ladder;
        }
        float _2854 = isnan(1.0) ? _649 : (isnan(_649) ? 1.0 : min(_649, 1.0));
        _2659 = (_2854 * _2845) + _2190;
        _2661 = (_2854 * _2847) + _2192;
        _2663 = (_2854 * _2849) + _2194;
        _2665 = ((_2839 * 0.039999999105930328369140625) * _2854) + _2513;
        _2667 = ((_2841 * 0.039999999105930328369140625) * _2854) + _2515;
        _2669 = ((_2843 * 0.039999999105930328369140625) * _2854) + _2517;
    }
    else
    {
        _2659 = _2190;
        _2661 = _2192;
        _2663 = _2194;
        _2665 = _2513;
        _2667 = _2515;
        _2669 = _2517;
    }
    float _4544 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4555 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4566 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    uint _2689 = _624 + 6u;
    float _2697 = _586 / cbSceneParam._m0[86u].x;
    float _2698 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2714 = _2712.x;
    float _2715 = _2712.y;
    float _2716 = _2712.z;
    float _2717 = _2712.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2751 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2752 = _2751 / _521;
        float _2763 = _2752 * _571;
        float _2764 = _572 * _2752;
        float _2765 = (-0.0) - _2764;
        float _2767 = _2752 * _573;
        float _2769 = (cbSceneParam._m0[77u].w * _2765) / _2751;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2764;
        float _2777 = sqrt(((_2763 * _2763) + (_2764 * _2764)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2751)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2765 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2902 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2940 = ((abs(_2777 / _2765) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2787 * _2911) - exp2(_2787 * _2912)) * _2900))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2717);
        _2789 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2714;
        _2791 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2715;
        _2793 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2716;
        _2795 = _2951 * _2717;
    }
    else
    {
        _2789 = _2714;
        _2791 = _2715;
        _2793 = _2716;
        _2795 = _2717;
    }
    float _2807 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2808 = _2807 == 3.0;
    float _2809 = log2(_2795);
    float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2659 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _649))) + ((_2665 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2661 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _649))) + ((_2667 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2663 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _649))) + ((_2669 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2827 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2827 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.y = _2827 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.z = _2827 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.w = cbInstanceData._m0[_2689].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2689].w;
}


