#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _995;
float _3384;
float _3385;
float _3386;
float _3387;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _303 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3396 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _311 = (_304 * ((_272.x * cbMtdParam._m0[10u].x) - _247)) + _247;
    float _312 = (_304 * ((_272.y * cbMtdParam._m0[10u].y) - _248)) + _248;
    float _313 = (_304 * ((_272.z * cbMtdParam._m0[10u].z) - _249)) + _249;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _327 = _325.x;
    float _329 = _327 - (_327 * TEXCOORD_5.x);
    vec4 _346 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = (_346.x * 2.0) + (-1.0);
    float _356 = (_346.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3407 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))));
    float _363 = _346.z * cbMtdParam._m0[13u].y;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _390 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_376.z * cbMtdParam._m0[13u].x) - _363)) + _363;
    float _396 = ((((_376.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _354;
    float _397 = ((((_376.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _356;
    float _400 = fma(_362, _211 * NORMAL.x, fma(_397, _218 * TANGENT.x, (_204 * _196) * _396));
    float _403 = fma(_362, _211 * NORMAL.y, fma(_397, _218 * TANGENT.y, (_204 * _197) * _396));
    float _406 = fma(_362, _211 * NORMAL.z, fma(_397, _218 * TANGENT.z, (_204 * _198) * _396));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3418 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _414 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3440 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3451 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3462 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _418 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    vec4 _499 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _501 = _499.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _675 = sqrt(((_485 * _485) + (_486 * _486)) + (_487 * _487));
        float _681 = (cbMatDynParam._m0[5u].x * _675) + cbMatDynParam._m0[5u].y;
        float _3473 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _686 = (cbMatDynParam._m0[5u].z * _675) + cbMatDynParam._m0[5u].w;
        float _3484 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) - _682)) + _682) < ((_501 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _533 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _536 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _539 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _552 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = _552 + 9u;
    uint _554 = _553 + uint(cbMatDynParam._m0[0u].w);
    float _560 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) * cbInstanceData._m0[_554].x;
    float _561 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_554].y;
    float _562 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_554].z;
    float _3495 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _566 = 1.0 - _418;
    float _567 = _563 * _566;
    float _568 = _564 * _566;
    float _569 = _565 * _566;
    float _574 = (_563 + (-0.039999999105930328369140625)) * _418;
    float _575 = (_564 + (-0.039999999105930328369140625)) * _418;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _418;
    float _577 = _574 + 0.039999999105930328369140625;
    float _579 = _575 + 0.039999999105930328369140625;
    float _580 = _576 + 0.039999999105930328369140625;
    vec4 _589 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _592 = _589.x * TEXCOORD_5.w;
    float _593 = dot(vec3(_411, _412, _413), vec3(_492, _493, _494));
    float _596 = _593 * 2.0;
    float _600 = (_596 * _411) - _492;
    float _601 = (_596 * _412) - _493;
    float _602 = (_596 * _413) - _494;
    float _606 = abs(dot(vec3(_492, _493, _494), vec3(_411, _412, _413)));
    float _3528 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _608 = sqrt(_414);
    float _621 = exp2((_608 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_608 * 3.0));
    float _627 = (1.0 - _621) * ((_608 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _628 = _621 * _608;
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _994;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _719 = fma(_664, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656));
        float _723 = fma(_664, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656));
        float _727 = fma(_664, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656));
        float _752 = _656 + _411;
        float _753 = _660 + _412;
        float _754 = _664 + _413;
        float _764 = fma(_754, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752)) - _719;
        float _765 = fma(_754, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752)) - _723;
        float _766 = fma(_754, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752)) - _727;
        float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
        float _783 = ((_770 * _764) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_719 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_770 * _765) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_723 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_770 * _766) / cbModelParam._m0[34u].z) + ((((((_727 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_783, _784, _785), 0.0);
        float _822 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_788.x + (-0.5));
        float _824 = _822 * (_788.y + (-0.5));
        float _825 = _822 * (_788.z + (-0.5));
        float _832 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_795.x + (-0.5));
        float _834 = _832 * (_795.y + (-0.5));
        float _835 = _832 * (_795.z + (-0.5));
        float _842 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_802.x + (-0.5));
        float _844 = _842 * (_802.y + (-0.5));
        float _845 = _842 * (_802.z + (-0.5));
        float _852 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_809.x + (-0.5));
        float _854 = _852 * (_809.y + (-0.5));
        float _855 = _852 * (_809.z + (-0.5));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = _823 * 0.5;
        float _860 = _833 * 0.5;
        float _861 = _843 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _876 = (dot(vec3(_411, _412, _413), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _886 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3576 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_888 + 1.0))) + _893) * _856;
        float _903 = _824 * 0.5;
        float _904 = _834 * 0.5;
        float _905 = _844 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_411, _412, _413), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3609 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_930 + 1.0))) + _935) * _857;
        float _945 = _825 * 0.5;
        float _946 = _835 * 0.5;
        float _947 = _845 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_411, _412, _413), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3642 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_972 + 1.0))) + _977) * _858;
        _994 = _825;
        _996 = _824;
        _997 = _823;
        _998 = _835;
        _999 = _834;
        _1000 = _833;
        _1001 = _845;
        _1002 = _844;
        _1003 = _843;
        _1004 = _858;
        _1005 = _857;
        _1006 = _856;
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
    }
    else
    {
        _994 = _995;
        _996 = _995;
        _997 = _995;
        _998 = _995;
        _999 = _995;
        _1000 = _995;
        _1001 = _995;
        _1002 = _995;
        _1003 = _995;
        _1004 = _995;
        _1005 = _995;
        _1006 = _995;
        _1007 = 0.0;
        _1008 = 0.0;
        _1009 = 0.0;
    }
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1038 = fma(_664, cbModelParam._m0[30u].z, fma(_660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _656));
        float _1042 = fma(_664, cbModelParam._m0[31u].z, fma(_660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _656));
        float _1046 = fma(_664, cbModelParam._m0[32u].z, fma(_660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _656));
        float _1069 = _656 + _411;
        float _1070 = _660 + _412;
        float _1071 = _664 + _413;
        float _1081 = fma(_1071, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1038 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1042 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[35u].z) + ((((((_1046 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1137 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1104.x + (-0.5));
        float _1139 = _1137 * (_1104.y + (-0.5));
        float _1140 = _1137 * (_1104.z + (-0.5));
        float _1147 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1111.x + (-0.5));
        float _1149 = _1147 * (_1111.y + (-0.5));
        float _1150 = _1147 * (_1111.z + (-0.5));
        float _1157 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1118.x + (-0.5));
        float _1159 = _1157 * (_1118.y + (-0.5));
        float _1160 = _1157 * (_1118.z + (-0.5));
        float _1167 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1125.x + (-0.5));
        float _1169 = _1167 * (_1125.y + (-0.5));
        float _1170 = _1167 * (_1125.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_411, _412, _413), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3705 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1201 + 1.0))) + _1206) * _1171;
        float _1216 = _1139 * 0.5;
        float _1217 = _1149 * 0.5;
        float _1218 = _1159 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_411, _412, _413), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3738 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1243 + 1.0))) + _1248) * _1172;
        float _1258 = _1140 * 0.5;
        float _1259 = _1150 * 0.5;
        float _1260 = _1160 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_411, _412, _413), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3771 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1285 + 1.0))) + _1290) * _1173;
        _1307 = _1140;
        _1308 = _1139;
        _1309 = _1138;
        _1310 = _1150;
        _1311 = _1149;
        _1312 = _1148;
        _1313 = _1160;
        _1314 = _1159;
        _1315 = _1158;
        _1316 = _1173;
        _1317 = _1172;
        _1318 = _1171;
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _995;
        _1308 = _995;
        _1309 = _995;
        _1310 = _995;
        _1311 = _995;
        _1312 = _995;
        _1313 = _995;
        _1314 = _995;
        _1315 = _995;
        _1316 = _995;
        _1317 = _995;
        _1318 = _995;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1007)) + _1007;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1354 = fma(_1333, cbSceneParam._m0[89u].z, fma(_1332, cbSceneParam._m0[89u].y, _1331 * cbSceneParam._m0[89u].x));
    float _1357 = fma(_1333, cbSceneParam._m0[90u].z, fma(_1332, cbSceneParam._m0[90u].y, _1331 * cbSceneParam._m0[90u].x));
    float _1360 = fma(_1333, cbSceneParam._m0[91u].z, fma(_1332, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1331));
    float _1375 = _600 * 0.5;
    float _1376 = _601 * 0.5;
    float _1377 = _602 * 0.5;
    float _1378 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1381 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1384 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1418;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1391 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_994, _998, _1001, _1004));
        float _1395 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_996, _999, _1002, _1005));
        float _1399 = dot(vec4(_1375, _1376, _1377, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1406 = dot(vec4(cbModelParam._m0[39u]), vec4(_1375, _1376, _1377, 1.0));
        _1418 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1418 = 1.0;
    }
    float _1429;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1420 = dot(vec4(cbModelParam._m0[40u]), vec4(_1375, _1376, _1377, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1433 = (_1429 * cbModelParam._m0[1u].x) + (_1418 * (1.0 - cbModelParam._m0[1u].x));
    float _1443 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1443 : min(cbModelParam._m0[25u].z, _1443));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_664, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_664, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_664, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_602, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _600));
        float _1506 = fma(_602, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _600));
        float _1509 = fma(_602, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _600));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1537 = frontier_phi_17_15_ladder;
        }
        float _1744;
        if (_1506 > 0.0)
        {
            _1744 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1744 = frontier_phi_26_22_ladder;
        }
        float _1998;
        if (_1509 > 0.0)
        {
            _1998 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1998 = frontier_phi_38_33_ladder;
        }
        float _2000 = isnan(_1744) ? _1537 : (isnan(_1537) ? _1744 : min(_1537, _1744));
        float _2001 = isnan(_1998) ? _2000 : (isnan(_2000) ? _1998 : min(_2000, _1998));
        float _2005 = (_2001 * _1503) + _1492;
        float _2006 = (_2001 * _1506) + _1496;
        float _2007 = (_2001 * _1509) + _1500;
        float _2008 = _2001 * 9.9999997473787516355514526367188e-05;
        float _2010 = (-1.0) - _2008;
        float _2012 = _2008 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2007 > _2012) || ((_2007 < _2010) || ((_2006 > _2012) || ((_2006 < _2010) || ((_2005 < _2010) || (_2005 > _2012))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2007, cbModelParam._m0[9u].z, fma(_2006, cbModelParam._m0[9u].y, _2005 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2007, cbModelParam._m0[10u].z, fma(_2006, cbModelParam._m0[10u].y, _2005 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2007, cbModelParam._m0[11u].z, fma(_2006, cbModelParam._m0[11u].y, _2005 * cbModelParam._m0[11u].x))), _1444);
            frontier_phi_16_38_ladder = _2135.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2135.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2135.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_16_38_ladder_2;
        _1527 = frontier_phi_16_38_ladder_1;
        _1529 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_600, _601, _602), _1444);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_664, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_664, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_664, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_602, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _600));
        float _1605 = fma(_602, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _600));
        float _1608 = fma(_602, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _600));
        float _1749;
        if (_1602 > 0.0)
        {
            _1749 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1749 = frontier_phi_28_24_ladder;
        }
        float _2025;
        if (_1605 > 0.0)
        {
            _2025 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2025 = frontier_phi_40_35_ladder;
        }
        float _2238;
        if (_1608 > 0.0)
        {
            _2238 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2238 = frontier_phi_49_46_ladder;
        }
        float _2240 = isnan(_2025) ? _1749 : (isnan(_1749) ? _2025 : min(_1749, _2025));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1602) + _1591;
        float _2246 = (_2241 * _1605) + _1595;
        float _2247 = (_2241 * _1608) + _1599;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2247, cbModelParam._m0[17u].z, fma(_2246, cbModelParam._m0[17u].y, _2245 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2247, cbModelParam._m0[18u].z, fma(_2246, cbModelParam._m0[18u].y, _2245 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2247, cbModelParam._m0[19u].z, fma(_2246, cbModelParam._m0[19u].y, _2245 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_25_49_ladder = _2446.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2446.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2446.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_25_49_ladder_2;
        _1629 = frontier_phi_25_49_ladder_1;
        _1631 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_600, _601, _602), _1534);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1644 = (((_627 * _577) + _628) * _592) * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1646 = (((_627 * _579) + _628) * _592) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1648 = (((_627 * _580) + _628) * _592) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1651 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    uvec4 _1667 = floatBitsToUint(cbInstanceData._m0[_552 + 5u]);
    uint _1669 = _1667.x * 14u;
    uint _1670 = _1669 + 13u;
    float _1677 = _592 + (-1.0);
    float _1682 = (cbLight._m0[_1670].x * _1677) + 1.0;
    float _1683 = (cbLight._m0[_1670].y * _1677) + 1.0;
    float _1684 = (cbLight._m0[_1670].z * _1677) + 1.0;
    float _1685 = (cbLight._m0[_1670].w * _1677) + 1.0;
    uint _1686 = _1669 + 5u;
    float _1692 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1696 = _1669 + 4u;
    float _1703 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1707 = _1669 | 1u;
    float _1718 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_411, _412, _413));
    float _1721 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_411, _412, _413));
    float _3907 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _3918 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1726 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1728 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1735 = ((cbLight._m0[_1686].x * _1692) * _1728) + ((cbLight._m0[_1696].x * _1703) * _1726);
    float _1736 = ((_1692 * cbLight._m0[_1686].y) * _1728) + ((_1703 * cbLight._m0[_1696].y) * _1726);
    float _1737 = ((_1692 * cbLight._m0[_1686].z) * _1728) + ((_1703 * cbLight._m0[_1696].z) * _1726);
    uvec4 _1741 = floatBitsToUint(cbLight._m0[_1669 + 12u]);
    bool _1743 = _1741.x == 0u;
    float _1754;
    float _1756;
    float _1758;
    if (_1743)
    {
        _1754 = _1735;
        _1756 = _1736;
        _1758 = _1737;
    }
    else
    {
        uint _1762 = _1669 + 6u;
        float _1778 = (dot(vec3(cbLight._m0[_1669 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1779 = _1778 * _1778;
        float _3929 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1781 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1754 = (((cbLight._m0[_1762].x * 0.3183098733425140380859375) * _1780) * _1781) + _1735;
        _1756 = (((cbLight._m0[_1762].y * 0.3183098733425140380859375) * _1780) * _1781) + _1736;
        _1758 = (((cbLight._m0[_1762].z * 0.3183098733425140380859375) * _1780) * _1781) + _1737;
    }
    bool _1761 = _1741.y == 0u;
    float _1799;
    float _1801;
    float _1803;
    if (_1761)
    {
        _1799 = _1754;
        _1801 = _1756;
        _1803 = _1758;
    }
    else
    {
        uint _1969 = _1669 + 7u;
        float _1985 = (dot(vec3(cbLight._m0[_1669 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _3945 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1988 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _1799 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1754;
        _1801 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1756;
        _1803 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1758;
    }
    uint _1806 = _1669 + 8u;
    float _1819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1669].w)) * _414) * 0.949999988079071044921875);
    float _1820 = _1819 * _1819;
    float _1821 = cbLight._m0[_1669].x + _492;
    float _1822 = cbLight._m0[_1669].y + _493;
    float _1823 = cbLight._m0[_1669].z + _494;
    float _1827 = inversesqrt(dot(vec3(_1821, _1822, _1823), vec3(_1821, _1822, _1823)));
    float _1828 = _1827 * _1821;
    float _1829 = _1827 * _1822;
    float _1830 = _1827 * _1823;
    float _1831 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1669].xyz));
    float _3961 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _1835 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1836 = dot(vec3(_411, _412, _413), vec3(_1828, _1829, _1830));
    float _3983 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_1828, _1829, _1830));
    float _3994 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1820 * _1820;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0);
    float _1857 = 0.959999978542327880859375 - _574;
    float _1859 = 0.959999978542327880859375 - _575;
    float _1860 = 0.959999978542327880859375 - _576;
    float _1867 = 1.0 - _1820;
    float _1878 = (0.5 / (((_1835 * ((_1834 * _1867) + _1820)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1867) + _1820) * _1834))) * _1834;
    float _4005 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1880 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    uint _1891 = _1669 + 9u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _414) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1707].x + _492;
    float _1905 = cbLight._m0[_1707].y + _493;
    float _1906 = cbLight._m0[_1707].z + _494;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1707].xyz));
    float _4016 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1918 = dot(vec3(_411, _412, _413), vec3(_1911, _1912, _1913));
    float _4027 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1911, _1912, _1913));
    float _4038 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1903 * _1903;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1937 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
    float _1944 = 1.0 - _1903;
    float _1954 = (0.5 / (((_1835 * ((_1917 * _1944) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _1944) + _1903) * _1917))) * _1917;
    float _4049 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    float _1966 = (((((_1937 * _1857) + _577) * cbLight._m0[_1891].x) * _1956) * _1692) + (((((_1856 * _1857) + _577) * cbLight._m0[_1806].x) * _1880) * _1703);
    float _1967 = (((((_1937 * _1859) + _579) * cbLight._m0[_1891].y) * _1956) * _1692) + (((((_1856 * _1859) + _579) * cbLight._m0[_1806].y) * _1880) * _1703);
    float _1968 = (((((_1937 * _1860) + _580) * cbLight._m0[_1891].z) * _1956) * _1692) + (((((_1856 * _1860) + _580) * cbLight._m0[_1806].z) * _1880) * _1703);
    float _2030;
    float _2032;
    float _2034;
    if (_1743)
    {
        _2030 = _1966;
        _2032 = _1967;
        _2034 = _1968;
    }
    else
    {
        uint _2036 = _1669 + 2u;
        uint _2040 = _1669 + 10u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _414) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _492;
        float _2057 = cbLight._m0[_2036].y + _493;
        float _2058 = cbLight._m0[_2036].z + _494;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2036].xyz));
        float _4060 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2070 = dot(vec3(_411, _412, _413), vec3(_2063, _2064, _2065));
        float _4071 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _4082 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
        float _2096 = 1.0 - _2055;
        float _2106 = (0.5 / (((_1835 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2096) + _2055) * _2069))) * _2069;
        float _4093 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2030 = (((((_2089 * _1857) + _577) * cbLight._m0[_2040].x) * _2108) * _2109) + _1966;
        _2032 = (((((_2089 * _1859) + _579) * cbLight._m0[_2040].y) * _2108) * _2109) + _1967;
        _2034 = (((((_2089 * _1860) + _580) * cbLight._m0[_2040].z) * _2108) * _2109) + _1968;
    }
    float _2144;
    float _2146;
    float _2148;
    if (_1761)
    {
        _2144 = _2030;
        _2146 = _2032;
        _2148 = _2034;
    }
    else
    {
        uint _2155 = _1669 + 3u;
        uint _2159 = _1669 + 11u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _414) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _492;
        float _2176 = cbLight._m0[_2155].y + _493;
        float _2177 = cbLight._m0[_2155].z + _494;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2155].xyz));
        float _4109 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2189 = dot(vec3(_411, _412, _413), vec3(_2182, _2183, _2184));
        float _4120 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4131 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
        float _2215 = 1.0 - _2174;
        float _2225 = (0.5 / (((_1835 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1835 * _2215) + _2174) * _2188))) * _2188;
        float _4142 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _2144 = (((((_2208 * _1857) + _577) * cbLight._m0[_2159].x) * _2227) * _2228) + _2030;
        _2146 = (((((_2208 * _1859) + _579) * cbLight._m0[_2159].y) * _2227) * _2228) + _2032;
        _2148 = (((((_2208 * _1860) + _580) * cbLight._m0[_2159].z) * _2227) * _2228) + _2034;
    }
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    if (_1667.y == 0u)
    {
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2303;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2303;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2303;
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.x;
        uint _2330 = uint((float(_2318.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2319))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2319)));
        float _2340 = (log2(_2306 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2341 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        uint _2344 = uint(isnan(14.0) ? _2341 : (isnan(_2341) ? 14.0 : min(_2341, 14.0)));
        uvec4 _2349 = texelFetch(g_lightClusterGridBuffer, int(((_2344 << 2u) + (_2330 << 6u)) >> 2u));
        uint _2350 = _2349.x;
        uint _2351 = _2318.z;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        if (((((1u << ((_2351 >> 4u) & 15u)) + 4294967295u) & _2350) == 0u) || ((_2351 & 240u) == 0u))
        {
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
        }
        else
        {
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            uint _2610 = 0u;
            uint _2619;
            bool _2620;
            for (;;)
            {
                _2619 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                _2620 = _2619 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2620)
                {
                    frontier_phi_66_pred = _2604;
                    frontier_phi_66_pred_1 = _2609;
                    frontier_phi_66_pred_2 = _2608;
                    frontier_phi_66_pred_3 = _2607;
                    frontier_phi_66_pred_4 = _2606;
                    frontier_phi_66_pred_5 = _2605;
                }
                else
                {
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    uint _2755;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2619;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2759 = uint(findLSB(_2755)) + (_2610 << 5u);
                        uint _2756 = (_2755 + 4294967295u) & _2755;
                        uint _2761 = _2759 * 48u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2781 = (_2759 * 48u) + 4u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2800 = (_2759 * 48u) + 8u;
                        vec3 _2811 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x));
                        float _2815 = _2775.x - _2304;
                        float _2816 = _2775.y - _2305;
                        float _2817 = _2775.z - _2306;
                        float _2818 = dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817));
                        float _2821 = inversesqrt(_2818);
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2825 = dot(vec3(_533, _536, _539), vec3(_2822, _2823, _2824));
                        float _2830 = 1.0 - (_2818 * _2775.w);
                        float _4168 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2832 = sqrt(_2818) * _2794.w;
                        float _2835 = 1.39999997615814208984375 / (_2832 + 1.39999997615814208984375);
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2825) + _2836;
                        float _2842 = _2832 * _2832;
                        float _2846 = ((isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))) * _2831) / ((_2842 * 0.699999988079071044921875) + 1.0);
                        float _2850 = (-0.0) - _2304;
                        float _2851 = (-0.0) - _2305;
                        float _2852 = (-0.0) - _2306;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2867 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                        float _2868 = 1.0 - _608;
                        float _2875 = sqrt(1.0 - ((1.0 - (_2868 * _2868)) * (1.0 - (_2867 * _2867))));
                        float _2876 = _2875 * _2875;
                        float _2877 = _2876 * _2876;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2880 = _2859 + _2824;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_533, _536, _539), vec3(_2857, _2858, _2859));
                        float _4184 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2892 = dot(vec3(_533, _536, _539), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4195 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2899 = ((_2895 * _2895) * (_2877 + (-1.0))) + 1.0;
                        float _2900 = _2835 * _2876;
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2825) + _2901;
                        float _4206 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2906 = 1.0 - _2876;
                        float _2916 = (0.5 / (((_2905 * ((_2891 * _2906) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2905 * _2906) + _2876) * _2891))) * _2905;
                        float _4217 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2927 = (((_2877 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_2899 * _2899) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125))) * _2831;
                        _2679 = (_2846 * _2794.x) + _2752;
                        _2680 = (_2846 * _2794.y) + _2753;
                        _2681 = (_2846 * _2794.z) + _2754;
                        _2676 = (_2927 * _2811.x) + _2749;
                        _2677 = (_2927 * _2811.y) + _2750;
                        _2678 = (_2927 * _2811.z) + _2751;
                        if (_2756 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2756;
                        }
                    }
                    frontier_phi_66_pred = _2676;
                    frontier_phi_66_pred_1 = _2681;
                    frontier_phi_66_pred_2 = _2680;
                    frontier_phi_66_pred_3 = _2679;
                    frontier_phi_66_pred_4 = _2678;
                    frontier_phi_66_pred_5 = _2677;
                }
                _2452 = frontier_phi_66_pred;
                _2462 = frontier_phi_66_pred_1;
                _2460 = frontier_phi_66_pred_2;
                _2458 = frontier_phi_66_pred_3;
                _2456 = frontier_phi_66_pred_4;
                _2454 = frontier_phi_66_pred_5;
                uint _2611 = _2610 + 1u;
                if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2604 = _2452;
                    _2605 = _2454;
                    _2606 = _2456;
                    _2607 = _2458;
                    _2608 = _2460;
                    _2609 = _2462;
                    _2610 = _2611;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
        }
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.z;
        uint _2468 = (_2466 >> 8u) & 15u;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((4294967295u << _2468) & _2350) == 0u)
        {
            _2572 = _2451;
            _2574 = _2453;
            _2576 = _2455;
            _2578 = _2457;
            _2580 = _2459;
            _2582 = _2461;
        }
        else
        {
            float _2597 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
            float _2598 = _2597 * _2304;
            float _2599 = _2597 * _2305;
            float _2600 = _2597 * _2306;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2468 < ((_2466 >> 12u) & 15u))
            {
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2732 = _2451;
                float _2733 = _2453;
                float _2734 = _2455;
                float _2735 = _2457;
                float _2736 = _2459;
                float _2737 = _2461;
                uint _2738 = _2468;
                uint _2747;
                bool _2748;
                for (;;)
                {
                    _2747 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                    _2748 = _2747 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2748)
                    {
                        frontier_phi_77_pred = _2737;
                        frontier_phi_77_pred_1 = _2736;
                        frontier_phi_77_pred_2 = _2735;
                        frontier_phi_77_pred_3 = _2734;
                        frontier_phi_77_pred_4 = _2733;
                        frontier_phi_77_pred_5 = _2732;
                    }
                    else
                    {
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        uint _2960 = _2747;
                        uint _2961;
                        vec4 _2986;
                        float _2987;
                        vec4 _3002;
                        vec3 _3014;
                        vec4 _3030;
                        vec4 _3046;
                        float _3093;
                        bool _3094;
                        for (;;)
                        {
                            uint _2971 = ((_2738 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2960));
                            _2961 = (_2960 + 4294967295u) & _2960;
                            uint _2973 = _2971 * 40u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2987 = _2986.w;
                            uint _2989 = (_2971 * 40u) + 4u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3004 = (_2971 * 40u) + 8u;
                            _3014 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x));
                            uint _3017 = (_2971 * 40u) + 16u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2971 * 40u) + 20u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2971 * 40u) + 24u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3068 = (_2971 * 40u) + 28u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3093 = fma(_2306, _3081.z, fma(_2305, _3081.y, _3081.x * _2304)) + _3081.w;
                            _3094 = !((fma(_2306, _3062.z, fma(_2305, _3062.y, _3062.x * _2304)) + _3062.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3094)
                            {
                                float _3121 = _2986.x - _2304;
                                float _3122 = _2986.y - _2305;
                                float _3123 = _2986.z - _2306;
                                float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                                float _3127 = inversesqrt(_3124);
                                float _3128 = _3127 * _3121;
                                float _3129 = _3127 * _3122;
                                float _3130 = _3127 * _3123;
                                float _3134 = 1.0 - (_3124 / (_2987 * _2987));
                                float _4228 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3139 = sqrt(_3124) * _3002.w;
                                float _3141 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                                float _3142 = _3141 * _3141;
                                float _3145 = ((1.0 - _3142) * dot(vec3(_3128, _3129, _3130), vec3(_533, _536, _539))) + _3142;
                                float _3148 = _3139 * _3139;
                                float _3152 = (fma(_2306, _3030.z, fma(_2305, _3030.y, _3030.x * _2304)) + _3030.w) / _3093;
                                float _3153 = (fma(_2306, _3046.z, fma(_2305, _3046.y, _3046.x * _2304)) + _3046.w) / _3093;
                                float _3157 = 1.0 - dot(vec2(_3152, _3153), vec2(_3152, _3153));
                                float _4244 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3159 = _3158 * (((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3135) / ((_3148 * 0.699999988079071044921875) + 1.0));
                                float _3171 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                                float _3172 = 1.0 - _608;
                                float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                                float _3180 = _3179 * _3179;
                                float _3181 = _3180 * _3180;
                                float _3182 = _3128 - _2598;
                                float _3183 = _3129 - _2599;
                                float _3184 = _3130 - _2600;
                                float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                                float _3192 = dot(vec3(_533, _536, _539), vec3((-0.0) - _2598, (-0.0) - _2599, (-0.0) - _2600));
                                float _4255 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3196 = dot(vec3(_533, _536, _539), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                                float _4266 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                                float _3204 = _3141 * _3180;
                                float _3205 = _3204 * _3204;
                                float _3211 = ((1.0 - _3205) * dot(vec3(_533, _536, _539), vec3(_3128, _3129, _3130))) + _3205;
                                float _4277 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3213 = 1.0 - _3180;
                                float _3223 = (0.5 / (((_3212 * ((_3195 * _3213) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3180) * _3195))) * _3212;
                                float _4288 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3233 = (_3158 * _3135) * (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3203 * _3203) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3159 * _3002.y;
                                frontier_phi_83_pred_1 = _3159 * _3002.x;
                                frontier_phi_83_pred_2 = _3233 * _3014.z;
                                frontier_phi_83_pred_3 = _3233 * _3014.y;
                                frontier_phi_83_pred_4 = _3233 * _3014.x;
                                frontier_phi_83_pred_5 = _3159 * _3002.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3241 = frontier_phi_83_pred;
                            _3240 = frontier_phi_83_pred_1;
                            _3239 = frontier_phi_83_pred_2;
                            _3238 = frontier_phi_83_pred_3;
                            _3237 = frontier_phi_83_pred_4;
                            _3242 = frontier_phi_83_pred_5;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            if (_2961 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2961;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2946;
                        frontier_phi_77_pred_1 = _2945;
                        frontier_phi_77_pred_2 = _2944;
                        frontier_phi_77_pred_3 = _2943;
                        frontier_phi_77_pred_4 = _2942;
                        frontier_phi_77_pred_5 = _2941;
                    }
                    _2583 = frontier_phi_77_pred;
                    _2581 = frontier_phi_77_pred_1;
                    _2579 = frontier_phi_77_pred_2;
                    _2577 = frontier_phi_77_pred_3;
                    _2575 = frontier_phi_77_pred_4;
                    _2573 = frontier_phi_77_pred_5;
                    uint _2739 = _2738 + 1u;
                    if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2732 = _2573;
                        _2733 = _2575;
                        _2734 = _2577;
                        _2735 = _2579;
                        _2736 = _2581;
                        _2737 = _2583;
                        _2738 = _2739;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2577;
                frontier_phi_58_59_ladder_1 = _2583;
                frontier_phi_58_59_ladder_2 = _2581;
                frontier_phi_58_59_ladder_3 = _2579;
                frontier_phi_58_59_ladder_4 = _2575;
                frontier_phi_58_59_ladder_5 = _2573;
            }
            else
            {
                frontier_phi_58_59_ladder = _2455;
                frontier_phi_58_59_ladder_1 = _2461;
                frontier_phi_58_59_ladder_2 = _2459;
                frontier_phi_58_59_ladder_3 = _2457;
                frontier_phi_58_59_ladder_4 = _2453;
                frontier_phi_58_59_ladder_5 = _2451;
            }
            _2572 = frontier_phi_58_59_ladder_5;
            _2574 = frontier_phi_58_59_ladder_4;
            _2576 = frontier_phi_58_59_ladder;
            _2578 = frontier_phi_58_59_ladder_3;
            _2580 = frontier_phi_58_59_ladder_2;
            _2582 = frontier_phi_58_59_ladder_1;
        }
        float _2587 = isnan(1.0) ? _592 : (isnan(_592) ? 1.0 : min(_592, 1.0));
        _2363 = (_2587 * _2578) + _1799;
        _2365 = (_2587 * _2580) + _1801;
        _2367 = (_2587 * _2582) + _1803;
        _2369 = ((_2572 * _577) * _2587) + _2144;
        _2371 = ((_2574 * _579) * _2587) + _2146;
        _2373 = ((_2576 * _580) * _2587) + _2148;
    }
    else
    {
        _2363 = _1799;
        _2365 = _1801;
        _2367 = _1803;
        _2369 = _2144;
        _2371 = _2146;
        _2373 = _2148;
    }
    float _4304 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4315 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4326 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _2390 = ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2363 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _592))) + ((_2369 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2391 = ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2365 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _592))) + ((_2371 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    float _2392 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2367 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _592))) + ((_2373 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1433)) * cbPerFrame._m0[3u].x);
    uint _2393 = _552 + 6u;
    float _2401 = _513 / cbSceneParam._m0[86u].x;
    float _2402 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2416 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2418 = _2416.x;
    float _2419 = _2416.y;
    float _2420 = _2416.z;
    float _2421 = _2416.w;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2476 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2477 = _2476 / _434;
        float _2488 = _2477 * _485;
        float _2489 = _486 * _2477;
        float _2490 = (-0.0) - _2489;
        float _2492 = _2477 * _487;
        float _2494 = (cbSceneParam._m0[77u].w * _2490) / _2476;
        float _2495 = _2494 + cbSceneParam._m0[79u].w;
        float _2496 = cbSceneParam._m0[79u].w - _2489;
        float _2502 = sqrt(((_2488 * _2488) + (_2489 * _2489)) + (_2492 * _2492));
        float _2505 = (1.0 - (cbSceneParam._m0[77u].w / _2476)) * _2502;
        float _2510 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2512 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2490 - _2494) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2495 > 0.0) ? exp2(_2510 * _2495) : (2.0 - exp2(_2512 * _2495))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2505;
        }
        else
        {
            float _2633 = 1.0 / cbSceneParam._m0[80u].x;
            float _2634 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : max(_2495, _2496));
            float _2635 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : min(_2495, _2496));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            _2689 = ((abs(_2502 / _2490) * cbSceneParam._m0[80u].y) * ((((_2644 - _2645) * 2.0) - ((exp2(_2510 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0)))) - exp2(_2510 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))))) * _2633)) - ((exp2(_2512 * _2644) - exp2(_2512 * _2645)) * _2633))) + (_2505 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2421);
        _2514 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2418;
        _2516 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2419;
        _2518 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2420;
        _2520 = _2700 * _2421;
    }
    else
    {
        _2514 = _2418;
        _2516 = _2419;
        _2518 = _2420;
        _2520 = _2421;
    }
    bool _2727;
    vec4 _2530;
    vec4 _2552;
    float _2554;
    float _2558;
    float _2559;
    float _2560;
    float _2561;
    bool _2571;
    for (;;)
    {
        _2530 = cbMatDynParam._m0[0u];
        float _2532 = roundEven(_2530.y);
        bool _2533 = _2532 == 3.0;
        float _2534 = log2(_2520);
        float _2541 = exp2(_2534 * cbSceneParam._m0[78u].x) * _2390;
        float _2542 = exp2(_2534 * cbSceneParam._m0[78u].y) * _2391;
        float _2543 = exp2(_2534 * cbSceneParam._m0[78u].z) * _2392;
        float _2550 = _501 + (-0.5);
        _2552 = cbMtdParam._m0[1u];
        _2554 = _2552.y * _2550;
        float _2557 = (_2532 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2558 = _2557 * (_2533 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2514)));
        _2559 = _2557 * (_2533 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2516)));
        _2560 = _2557 * (_2533 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2518)));
        _2561 = _2550 * 0.999000012874603271484375;
        _2571 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2571)
        {
            if ((cbInstanceData._m0[_552 + 7u].x + _2561) < 0.5)
            {
                _2727 = true;
                break;
            }
        }
        uint _2668 = _553 + uint(_2530.w);
        if ((cbInstanceData._m0[_2668].w < 1.0) && ((cbInstanceData._m0[_2668].w + _2561) < 0.5))
        {
            _2727 = true;
            break;
        }
        if ((_2554 + 1.0) < _2552.x)
        {
            _2727 = true;
            break;
        }
        _2727 = false;
        break;
    }
    float _2932;
    if (_2727)
    {
        discard_state = true;
        _2932 = 0.0;
    }
    else
    {
        _2932 = cbInstanceData._m0[_2393].w;
    }
    SV_Target.x = _2558;
    SV_Target.y = _2559;
    SV_Target.z = _2560;
    SV_Target.w = _2932;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2393].w;
    discard_exit();
}


