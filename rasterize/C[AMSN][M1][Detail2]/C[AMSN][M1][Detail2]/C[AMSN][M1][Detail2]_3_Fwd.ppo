#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _805;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _227 = _221.x * cbMtdParam._m0[9u].x;
    float _228 = _221.y * cbMtdParam._m0[9u].y;
    float _229 = _221.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3120 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0))));
    float _264 = _246.z * cbMtdParam._m0[13u].y;
    float _267 = fma(_263, _191 * NORMAL.x, fma(_256, _198 * TANGENT.x, (_184 * _176) * _254));
    float _270 = fma(_263, _191 * NORMAL.y, fma(_256, _198 * TANGENT.y, (_184 * _177) * _254));
    float _273 = fma(_263, _191 * NORMAL.z, fma(_256, _198 * TANGENT.z, (_184 * _178) * _254));
    float _277 = inversesqrt(dot(vec3(_267, _270, _273), vec3(_267, _270, _273)));
    float _278 = _277 * _267;
    float _279 = _277 * _270;
    float _280 = _277 * _273;
    float _3131 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _281 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
    float _3142 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3153 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3164 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _300 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _343 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _353 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _343);
    float _354 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _343);
    float _355 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _343);
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _353 * _359;
    float _361 = _354 * _359;
    float _362 = _355 * _359;
    float _368 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _369 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _389 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _392 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _395 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _408 = uint(roundEven(NORMAL.w)) * 13u;
    uint _410 = (_408 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _416 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_410].x;
    float _417 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0)))) * cbInstanceData._m0[_410].y;
    float _418 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0)))) * cbInstanceData._m0[_410].z;
    float _3175 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    float _3186 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _3197 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    vec4 _430 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _368, cbSceneParam._m0[86u].y * _369));
    float _433 = _430.x * TEXCOORD_5.w;
    float _434 = dot(vec3(_278, _279, _280), vec3(_360, _361, _362));
    float _437 = _434 * 2.0;
    float _441 = (_437 * _278) - _360;
    float _442 = (_437 * _279) - _361;
    float _443 = (_437 * _280) - _362;
    float _447 = abs(dot(vec3(_360, _361, _362), vec3(_278, _279, _280)));
    float _3208 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _449 = sqrt(_281);
    float _462 = exp2((_449 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_449 * 3.0));
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _804;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _529 = fma(_502, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494));
        float _533 = fma(_502, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494));
        float _537 = fma(_502, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494));
        float _562 = _494 + _278;
        float _563 = _498 + _279;
        float _564 = _502 + _280;
        float _574 = fma(_564, cbModelParam._m0[26u].z, fma(_563, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562)) - _529;
        float _575 = fma(_564, cbModelParam._m0[27u].z, fma(_563, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562)) - _533;
        float _576 = fma(_564, cbModelParam._m0[28u].z, fma(_563, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562)) - _537;
        float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
        float _593 = ((_580 * _574) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_529 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_580 * _575) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_533 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _595 = ((_580 * _576) / cbModelParam._m0[34u].z) + ((((((_537 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _612 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_593, _594, _595), 0.0);
        float _632 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_598.x + (-0.5));
        float _634 = _632 * (_598.y + (-0.5));
        float _635 = _632 * (_598.z + (-0.5));
        float _642 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_605.x + (-0.5));
        float _644 = _642 * (_605.y + (-0.5));
        float _645 = _642 * (_605.z + (-0.5));
        float _652 = exp2((_612.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_612.x + (-0.5));
        float _654 = _652 * (_612.y + (-0.5));
        float _655 = _652 * (_612.z + (-0.5));
        float _662 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_619.x + (-0.5));
        float _664 = _662 * (_619.y + (-0.5));
        float _665 = _662 * (_619.z + (-0.5));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = _633 * 0.5;
        float _670 = _643 * 0.5;
        float _671 = _653 * 0.5;
        float _672 = dot(vec3(_669, _670, _671), vec3(_669, _670, _671));
        float _677 = (_672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_672);
        float _686 = (dot(vec3(_278, _279, _280), vec3(_677 * _669, _677 * _670, _677 * _671)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _696 = sqrt(((_670 * _670) + (_669 * _669)) + (_671 * _671)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _698 = _697 * 2.0;
        float _702 = (1.0 - _697) / (_697 + 1.0);
        float _3256 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _712 = ((((1.0 - _703) * (_698 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_698 + 1.0))) + _703) * _666;
        float _713 = _634 * 0.5;
        float _714 = _644 * 0.5;
        float _715 = _654 * 0.5;
        float _716 = dot(vec3(_713, _714, _715), vec3(_713, _714, _715));
        float _721 = (_716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_716);
        float _729 = (dot(vec3(_278, _279, _280), vec3(_721 * _713, _721 * _714, _721 * _715)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _738 = sqrt(((_714 * _714) + (_713 * _713)) + (_715 * _715)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3289 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_740 + 1.0))) + _745) * _667;
        float _755 = _635 * 0.5;
        float _756 = _645 * 0.5;
        float _757 = _655 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_278, _279, _280), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3322 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_782 + 1.0))) + _787) * _668;
        _804 = _635;
        _806 = _634;
        _807 = _633;
        _808 = _645;
        _809 = _644;
        _810 = _643;
        _811 = _655;
        _812 = _654;
        _813 = _653;
        _814 = _668;
        _815 = _667;
        _816 = _666;
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
    }
    else
    {
        _804 = _805;
        _806 = _805;
        _807 = _805;
        _808 = _805;
        _809 = _805;
        _810 = _805;
        _811 = _805;
        _812 = _805;
        _813 = _805;
        _814 = _805;
        _815 = _805;
        _816 = _805;
        _817 = 0.0;
        _818 = 0.0;
        _819 = 0.0;
    }
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _845 = fma(_502, cbModelParam._m0[30u].z, fma(_498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _494));
        float _849 = fma(_502, cbModelParam._m0[31u].z, fma(_498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _494));
        float _853 = fma(_502, cbModelParam._m0[32u].z, fma(_498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _494));
        float _876 = _494 + _278;
        float _877 = _498 + _279;
        float _878 = _502 + _280;
        float _888 = fma(_878, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876)) - _845;
        float _889 = fma(_878, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876)) - _849;
        float _890 = fma(_878, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876)) - _853;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_845 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_849 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[35u].z) + ((((((_853 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _944 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_911.x + (-0.5));
        float _946 = _944 * (_911.y + (-0.5));
        float _947 = _944 * (_911.z + (-0.5));
        float _954 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_918.x + (-0.5));
        float _956 = _954 * (_918.y + (-0.5));
        float _957 = _954 * (_918.z + (-0.5));
        float _964 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_925.x + (-0.5));
        float _966 = _964 * (_925.y + (-0.5));
        float _967 = _964 * (_925.z + (-0.5));
        float _974 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_932.x + (-0.5));
        float _976 = _974 * (_932.y + (-0.5));
        float _977 = _974 * (_932.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_278, _279, _280), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3385 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_1008 + 1.0))) + _1013) * _978;
        float _1023 = _946 * 0.5;
        float _1024 = _956 * 0.5;
        float _1025 = _966 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_278, _279, _280), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3418 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1050 + 1.0))) + _1055) * _979;
        float _1065 = _947 * 0.5;
        float _1066 = _957 * 0.5;
        float _1067 = _967 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_278, _279, _280), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3451 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1092 + 1.0))) + _1097) * _980;
        _1114 = _947;
        _1115 = _946;
        _1116 = _945;
        _1117 = _957;
        _1118 = _956;
        _1119 = _955;
        _1120 = _967;
        _1121 = _966;
        _1122 = _965;
        _1123 = _980;
        _1124 = _979;
        _1125 = _978;
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _805;
        _1115 = _805;
        _1116 = _805;
        _1117 = _805;
        _1118 = _805;
        _1119 = _805;
        _1120 = _805;
        _1121 = _805;
        _1122 = _805;
        _1123 = _805;
        _1124 = _805;
        _1125 = _805;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _818)) + _818;
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1161 = fma(_1140, cbSceneParam._m0[89u].z, fma(_1139, cbSceneParam._m0[89u].y, _1138 * cbSceneParam._m0[89u].x));
    float _1164 = fma(_1140, cbSceneParam._m0[90u].z, fma(_1139, cbSceneParam._m0[90u].y, _1138 * cbSceneParam._m0[90u].x));
    float _1167 = fma(_1140, cbSceneParam._m0[91u].z, fma(_1139, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1138));
    float _1182 = _441 * 0.5;
    float _1183 = _442 * 0.5;
    float _1184 = _443 * 0.5;
    float _1185 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1188 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1191 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1225;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1198 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_804, _808, _811, _814));
        float _1202 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_806, _809, _812, _815));
        float _1206 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_807, _810, _813, _816));
        float _1213 = dot(vec4(cbModelParam._m0[39u]), vec4(_1182, _1183, _1184, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1213) ? 0.0 : (isnan(0.0) ? _1213 : max(0.0, _1213))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1236;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1227 = dot(vec4(cbModelParam._m0[40u]), vec4(_1182, _1183, _1184, 1.0));
        _1236 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1236 = 1.0;
    }
    float _1240 = (_1236 * cbModelParam._m0[1u].x) + (_1225 * (1.0 - cbModelParam._m0[1u].x));
    float _1250 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _281);
    float _1251 = isnan(_1250) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1250 : min(cbModelParam._m0[25u].z, _1250));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1299 = fma(_502, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494)) + cbModelParam._m0[13u].w;
        float _1303 = fma(_502, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494)) + cbModelParam._m0[14u].w;
        float _1307 = fma(_502, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494)) + cbModelParam._m0[15u].w;
        float _1310 = fma(_443, cbModelParam._m0[13u].z, fma(_442, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _441));
        float _1313 = fma(_443, cbModelParam._m0[14u].z, fma(_442, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _441));
        float _1316 = fma(_443, cbModelParam._m0[15u].z, fma(_442, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _441));
        float _1344;
        if (_1310 > 0.0)
        {
            _1344 = abs((1.0 - _1299) / _1310);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1299 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1344 = frontier_phi_14_12_ladder;
        }
        float _1550;
        if (_1313 > 0.0)
        {
            _1550 = abs((1.0 - _1303) / _1313);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1303 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1550 = frontier_phi_23_19_ladder;
        }
        float _1793;
        if (_1316 > 0.0)
        {
            _1793 = abs((1.0 - _1307) / _1316);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1307 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1793 = frontier_phi_35_30_ladder;
        }
        float _1795 = isnan(_1550) ? _1344 : (isnan(_1344) ? _1550 : min(_1344, _1550));
        float _1796 = isnan(_1793) ? _1795 : (isnan(_1795) ? _1793 : min(_1795, _1793));
        float _1800 = (_1796 * _1310) + _1299;
        float _1801 = (_1796 * _1313) + _1303;
        float _1802 = (_1796 * _1316) + _1307;
        float _1803 = _1796 * 9.9999997473787516355514526367188e-05;
        float _1805 = (-1.0) - _1803;
        float _1807 = _1803 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1802 > _1807) || ((_1802 < _1805) || ((_1801 > _1807) || ((_1801 < _1805) || ((_1800 < _1805) || (_1800 > _1807))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1926 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1802, cbModelParam._m0[9u].z, fma(_1801, cbModelParam._m0[9u].y, _1800 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1802, cbModelParam._m0[10u].z, fma(_1801, cbModelParam._m0[10u].y, _1800 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1802, cbModelParam._m0[11u].z, fma(_1801, cbModelParam._m0[11u].y, _1800 * cbModelParam._m0[11u].x))), _1251);
            frontier_phi_13_35_ladder = _1926.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1926.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1926.x * cbModelParam._m0[1u].y;
        }
        _1332 = frontier_phi_13_35_ladder_2;
        _1334 = frontier_phi_13_35_ladder_1;
        _1336 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_441, _442, _443), _1251);
        _1332 = _1320.x * cbModelParam._m0[1u].y;
        _1334 = _1320.y * cbModelParam._m0[1u].y;
        _1336 = _1320.z * cbModelParam._m0[1u].y;
    }
    float _1340 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _281);
    float _1341 = isnan(_1340) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1340 : min(cbModelParam._m0[25u].w, _1340));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1398 = fma(_502, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494)) + cbModelParam._m0[21u].w;
        float _1402 = fma(_502, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494)) + cbModelParam._m0[22u].w;
        float _1406 = fma(_502, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494)) + cbModelParam._m0[23u].w;
        float _1409 = fma(_443, cbModelParam._m0[21u].z, fma(_442, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _441));
        float _1412 = fma(_443, cbModelParam._m0[22u].z, fma(_442, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _441));
        float _1415 = fma(_443, cbModelParam._m0[23u].z, fma(_442, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _441));
        float _1555;
        if (_1409 > 0.0)
        {
            _1555 = abs((1.0 - _1398) / _1409);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1398 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1555 = frontier_phi_25_21_ladder;
        }
        float _1820;
        if (_1412 > 0.0)
        {
            _1820 = abs((1.0 - _1402) / _1412);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1402 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1820 = frontier_phi_37_32_ladder;
        }
        float _2025;
        if (_1415 > 0.0)
        {
            _2025 = abs((1.0 - _1406) / _1415);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1406 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2025 = frontier_phi_46_43_ladder;
        }
        float _2027 = isnan(_1820) ? _1555 : (isnan(_1555) ? _1820 : min(_1555, _1820));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1409) + _1398;
        float _2033 = (_2028 * _1412) + _1402;
        float _2034 = (_2028 * _1415) + _1406;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2035;
        float _2038 = _2035 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2034 > _2038) || ((_2034 < _2036) || ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 < _2036) || (_2032 > _2038))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2233 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2034, cbModelParam._m0[17u].z, fma(_2033, cbModelParam._m0[17u].y, _2032 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2034, cbModelParam._m0[18u].z, fma(_2033, cbModelParam._m0[18u].y, _2032 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2034, cbModelParam._m0[19u].z, fma(_2033, cbModelParam._m0[19u].y, _2032 * cbModelParam._m0[19u].x))), _1341);
            frontier_phi_22_46_ladder = _2233.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2233.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2233.x * cbModelParam._m0[1u].z;
        }
        _1434 = frontier_phi_22_46_ladder_2;
        _1436 = frontier_phi_22_46_ladder_1;
        _1438 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_441, _442, _443), _1341);
        _1434 = _1418.x * cbModelParam._m0[1u].z;
        _1436 = _1418.y * cbModelParam._m0[1u].z;
        _1438 = _1418.z * cbModelParam._m0[1u].z;
    }
    float _1450 = ((((1.0 - _462) * ((_449 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_462 * _449)) * _433;
    float _1451 = _1450 * ((cbModelParam._m0[1u].w * (_1434 - _1332)) + _1332);
    float _1452 = _1450 * ((cbModelParam._m0[1u].w * (_1436 - _1334)) + _1334);
    float _1453 = _1450 * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1456 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, _1451 * cbSceneParam._m0[91u].x));
    uvec4 _1472 = floatBitsToUint(cbInstanceData._m0[_408 + 5u]);
    uint _1474 = _1472.x * 14u;
    uint _1475 = _1474 + 13u;
    float _1482 = _433 + (-1.0);
    float _1487 = (cbLight._m0[_1475].x * _1482) + 1.0;
    float _1488 = (cbLight._m0[_1475].y * _1482) + 1.0;
    float _1489 = (cbLight._m0[_1475].z * _1482) + 1.0;
    float _1490 = (cbLight._m0[_1475].w * _1482) + 1.0;
    uint _1491 = _1474 + 5u;
    float _1497 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
    uint _1501 = _1474 + 4u;
    float _1508 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
    uint _1512 = _1474 | 1u;
    float _1523 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_278, _279, _280));
    float _1526 = dot(vec3(cbLight._m0[_1512].xyz), vec3(_278, _279, _280));
    float _3587 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _3598 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
    float _1531 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1533 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.3183098733425140380859375;
    float _1540 = ((cbLight._m0[_1491].x * _1497) * _1533) + ((cbLight._m0[_1501].x * _1508) * _1531);
    float _1541 = ((_1497 * cbLight._m0[_1491].y) * _1533) + ((_1508 * cbLight._m0[_1501].y) * _1531);
    float _1542 = ((_1497 * cbLight._m0[_1491].z) * _1533) + ((_1508 * cbLight._m0[_1501].z) * _1531);
    uvec4 _1547 = floatBitsToUint(cbLight._m0[_1474 + 12u]);
    bool _1549 = _1547.x == 0u;
    float _1560;
    float _1562;
    float _1564;
    if (_1549)
    {
        _1560 = _1540;
        _1562 = _1541;
        _1564 = _1542;
    }
    else
    {
        uint _1568 = _1474 + 6u;
        float _1584 = (dot(vec3(cbLight._m0[_1474 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1585 = _1584 * _1584;
        float _3609 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1587 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1560 = (((cbLight._m0[_1568].x * 0.3183098733425140380859375) * _1586) * _1587) + _1540;
        _1562 = (((cbLight._m0[_1568].y * 0.3183098733425140380859375) * _1586) * _1587) + _1541;
        _1564 = (((cbLight._m0[_1568].z * 0.3183098733425140380859375) * _1586) * _1587) + _1542;
    }
    bool _1567 = _1547.y == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1567)
    {
        _1605 = _1560;
        _1607 = _1562;
        _1609 = _1564;
    }
    else
    {
        uint _1764 = _1474 + 7u;
        float _1780 = (dot(vec3(cbLight._m0[_1474 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1781 = _1780 * _1780;
        float _3625 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1783 = isnan(1.0) ? _1490 : (isnan(_1490) ? 1.0 : min(_1490, 1.0));
        _1605 = (((cbLight._m0[_1764].x * 0.3183098733425140380859375) * _1782) * _1783) + _1560;
        _1607 = (((cbLight._m0[_1764].y * 0.3183098733425140380859375) * _1782) * _1783) + _1562;
        _1609 = (((cbLight._m0[_1764].z * 0.3183098733425140380859375) * _1782) * _1783) + _1564;
    }
    uint _1612 = _1474 + 8u;
    float _1625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1474].w)) * _281) * 0.949999988079071044921875);
    float _1626 = _1625 * _1625;
    float _1627 = cbLight._m0[_1474].x + _360;
    float _1628 = cbLight._m0[_1474].y + _361;
    float _1629 = cbLight._m0[_1474].z + _362;
    float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
    float _1634 = _1633 * _1627;
    float _1635 = _1633 * _1628;
    float _1636 = _1633 * _1629;
    float _1637 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1474].xyz));
    float _3641 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1640 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _1641 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _1642 = dot(vec3(_278, _279, _280), vec3(_1634, _1635, _1636));
    float _3663 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1645 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _1646 = dot(vec3(cbLight._m0[_1474].xyz), vec3(_1634, _1635, _1636));
    float _3674 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1650 = _1626 * _1626;
    float _1654 = ((_1645 * _1645) * (_1650 + (-1.0))) + 1.0;
    float _1665 = (exp2(log2(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1666 = 1.0 - _1626;
    float _1677 = (0.5 / (((_1641 * ((_1640 * _1666) + _1626)) + 9.9999999392252902907785028219223e-09) + (((_1641 * _1666) + _1626) * _1640))) * _1640;
    float _3685 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1679 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1650 / ((_1654 * _1654) * 3.141590118408203125));
    uint _1690 = _1474 + 9u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1512].w)) * _281) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1512].x + _360;
    float _1704 = cbLight._m0[_1512].y + _361;
    float _1705 = cbLight._m0[_1512].z + _362;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1512].xyz));
    float _3696 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _1717 = dot(vec3(_278, _279, _280), vec3(_1710, _1711, _1712));
    float _3707 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _1721 = dot(vec3(cbLight._m0[_1512].xyz), vec3(_1710, _1711, _1712));
    float _3718 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1725 = _1702 * _1702;
    float _1729 = ((_1720 * _1720) * (_1725 + (-1.0))) + 1.0;
    float _1738 = (exp2(log2(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1739 = 1.0 - _1702;
    float _1749 = (0.5 / (((_1641 * ((_1716 * _1739) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1641 * _1739) + _1702) * _1716))) * _1716;
    float _3729 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1751 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1725 / ((_1729 * _1729) * 3.141590118408203125));
    float _1761 = (((_1738 * cbLight._m0[_1690].x) * _1751) * _1497) + (((_1665 * cbLight._m0[_1612].x) * _1679) * _1508);
    float _1762 = (((_1738 * cbLight._m0[_1690].y) * _1751) * _1497) + (((_1665 * cbLight._m0[_1612].y) * _1679) * _1508);
    float _1763 = (((_1738 * cbLight._m0[_1690].z) * _1751) * _1497) + (((_1665 * cbLight._m0[_1612].z) * _1679) * _1508);
    float _1825;
    float _1827;
    float _1829;
    if (_1549)
    {
        _1825 = _1761;
        _1827 = _1762;
        _1829 = _1763;
    }
    else
    {
        uint _1831 = _1474 + 2u;
        uint _1835 = _1474 + 10u;
        float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _281) * 0.949999988079071044921875);
        float _1850 = _1849 * _1849;
        float _1851 = cbLight._m0[_1831].x + _360;
        float _1852 = cbLight._m0[_1831].y + _361;
        float _1853 = cbLight._m0[_1831].z + _362;
        float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
        float _1858 = _1857 * _1851;
        float _1859 = _1857 * _1852;
        float _1860 = _1857 * _1853;
        float _1861 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1831].xyz));
        float _3740 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1864 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1865 = dot(vec3(_278, _279, _280), vec3(_1858, _1859, _1860));
        float _3751 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1868 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1869 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1858, _1859, _1860));
        float _3762 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1873 = _1850 * _1850;
        float _1877 = ((_1868 * _1868) * (_1873 + (-1.0))) + 1.0;
        float _1886 = (exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1887 = 1.0 - _1850;
        float _1897 = (0.5 / (((_1641 * ((_1864 * _1887) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1641 * _1887) + _1850) * _1864))) * _1864;
        float _3773 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1899 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1873 / ((_1877 * _1877) * 3.141590118408203125));
        float _1900 = isnan(1.0) ? _1489 : (isnan(_1489) ? 1.0 : min(_1489, 1.0));
        _1825 = (((_1886 * cbLight._m0[_1835].x) * _1899) * _1900) + _1761;
        _1827 = (((_1886 * cbLight._m0[_1835].y) * _1899) * _1900) + _1762;
        _1829 = (((_1886 * cbLight._m0[_1835].z) * _1899) * _1900) + _1763;
    }
    float _1935;
    float _1937;
    float _1939;
    if (_1567)
    {
        _1935 = _1825;
        _1937 = _1827;
        _1939 = _1829;
    }
    else
    {
        uint _1946 = _1474 + 3u;
        uint _1950 = _1474 + 11u;
        float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _281) * 0.949999988079071044921875);
        float _1965 = _1964 * _1964;
        float _1966 = cbLight._m0[_1946].x + _360;
        float _1967 = cbLight._m0[_1946].y + _361;
        float _1968 = cbLight._m0[_1946].z + _362;
        float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
        float _1973 = _1972 * _1966;
        float _1974 = _1972 * _1967;
        float _1975 = _1972 * _1968;
        float _1976 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1946].xyz));
        float _3789 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1979 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1980 = dot(vec3(_278, _279, _280), vec3(_1973, _1974, _1975));
        float _3800 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1984 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_1973, _1974, _1975));
        float _3811 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1988 = _1965 * _1965;
        float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
        float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2002 = 1.0 - _1965;
        float _2012 = (0.5 / (((_1641 * ((_1979 * _2002) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1641 * _2002) + _1965) * _1979))) * _1979;
        float _3822 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2014 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
        float _2015 = isnan(1.0) ? _1490 : (isnan(_1490) ? 1.0 : min(_1490, 1.0));
        _1935 = (((_2001 * cbLight._m0[_1950].x) * _2014) * _2015) + _1825;
        _1937 = (((_2001 * cbLight._m0[_1950].y) * _2014) * _2015) + _1827;
        _1939 = (((_2001 * cbLight._m0[_1950].z) * _2014) * _2015) + _1829;
    }
    float _2150;
    float _2152;
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    if (_1472.y == 0u)
    {
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2091 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2090;
        float _2092 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2090;
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2090;
        uvec4 _2105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2106 = _2105.x;
        uint _2117 = uint((float(_2105.y) * floor(float(uint(cbSceneParam._m0[85u].y * _369) / _2106))) + floor(float(uint(cbSceneParam._m0[85u].x * _368) / _2106)));
        float _2127 = (log2(_2093 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2128 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        uint _2131 = uint(isnan(14.0) ? _2128 : (isnan(_2128) ? 14.0 : min(_2128, 14.0)));
        uvec4 _2136 = texelFetch(g_lightClusterGridBuffer, int(((_2131 << 2u) + (_2117 << 6u)) >> 2u));
        uint _2137 = _2136.x;
        uint _2138 = _2105.z;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        if (((((1u << ((_2138 >> 4u) & 15u)) + 4294967295u) & _2137) == 0u) || ((_2138 & 240u) == 0u))
        {
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
        }
        else
        {
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            uint _2389 = 0u;
            uint _2398;
            bool _2399;
            for (;;)
            {
                _2398 = texelFetch(g_lightClassification, int((((_2131 << 5u) + (_2117 << 9u)) + (_2389 << 2u)) >> 2u)).x;
                _2399 = _2398 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2399)
                {
                    frontier_phi_61_pred = _2383;
                    frontier_phi_61_pred_1 = _2388;
                    frontier_phi_61_pred_2 = _2387;
                    frontier_phi_61_pred_3 = _2386;
                    frontier_phi_61_pred_4 = _2385;
                    frontier_phi_61_pred_5 = _2384;
                }
                else
                {
                    float _2507;
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    uint _2513;
                    _2507 = _2383;
                    _2508 = _2384;
                    _2509 = _2385;
                    _2510 = _2386;
                    _2511 = _2387;
                    _2512 = _2388;
                    _2513 = _2398;
                    float _2439;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    for (;;)
                    {
                        uint _2517 = uint(findLSB(_2513)) + (_2389 << 5u);
                        uint _2514 = (_2513 + 4294967295u) & _2513;
                        uint _2519 = _2517 * 48u;
                        vec4 _2533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 3u)).x));
                        uint _2539 = (_2517 * 48u) + 4u;
                        vec4 _2552 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2539)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2539 + 3u)).x));
                        uint _2558 = (_2517 * 48u) + 8u;
                        vec3 _2569 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2558)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2558 + 2u)).x));
                        float _2573 = _2533.x - _2091;
                        float _2574 = _2533.y - _2092;
                        float _2575 = _2533.z - _2093;
                        float _2576 = dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575));
                        float _2579 = inversesqrt(_2576);
                        float _2580 = _2579 * _2573;
                        float _2581 = _2579 * _2574;
                        float _2582 = _2579 * _2575;
                        float _2583 = dot(vec3(_389, _392, _395), vec3(_2580, _2581, _2582));
                        float _2588 = 1.0 - (_2576 * _2533.w);
                        float _3848 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                        float _2589 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                        float _2590 = sqrt(_2576) * _2552.w;
                        float _2593 = 1.39999997615814208984375 / (_2590 + 1.39999997615814208984375);
                        float _2594 = _2593 * _2593;
                        float _2597 = ((1.0 - _2594) * _2583) + _2594;
                        float _2600 = _2590 * _2590;
                        float _2604 = ((isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))) * _2589) / ((_2600 * 0.699999988079071044921875) + 1.0);
                        float _2608 = (-0.0) - _2091;
                        float _2609 = (-0.0) - _2092;
                        float _2610 = (-0.0) - _2093;
                        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
                        float _2615 = _2614 * _2608;
                        float _2616 = _2614 * _2609;
                        float _2617 = _2614 * _2610;
                        float _2625 = exp2(log2(1.0 / ((_2600 * 3.5) + 5.0)) * 0.25);
                        float _2626 = 1.0 - _449;
                        float _2633 = sqrt(1.0 - ((1.0 - (_2626 * _2626)) * (1.0 - (_2625 * _2625))));
                        float _2634 = _2633 * _2633;
                        float _2635 = _2634 * _2634;
                        float _2636 = _2615 + _2580;
                        float _2637 = _2616 + _2581;
                        float _2638 = _2617 + _2582;
                        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
                        float _2646 = dot(vec3(_389, _392, _395), vec3(_2615, _2616, _2617));
                        float _3864 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2649 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2650 = dot(vec3(_389, _392, _395), vec3(_2642 * _2636, _2642 * _2637, _2642 * _2638));
                        float _3875 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2653 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2657 = ((_2653 * _2653) * (_2635 + (-1.0))) + 1.0;
                        float _2658 = _2593 * _2634;
                        float _2659 = _2658 * _2658;
                        float _2662 = ((1.0 - _2659) * _2583) + _2659;
                        float _3886 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2664 = 1.0 - _2634;
                        float _2674 = (0.5 / (((_2663 * ((_2649 * _2664) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2664) + _2634) * _2649))) * _2663;
                        float _3897 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2685 = (((_2635 * 3.1415927410125732421875) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) / ((_2657 * _2657) * ((_2600 * 2.1991131305694580078125) + 3.141590118408203125))) * _2589;
                        _2442 = (_2604 * _2552.x) + _2510;
                        _2443 = (_2604 * _2552.y) + _2511;
                        _2444 = (_2604 * _2552.z) + _2512;
                        _2439 = (_2685 * _2569.x) + _2507;
                        _2440 = (_2685 * _2569.y) + _2508;
                        _2441 = (_2685 * _2569.z) + _2509;
                        if (_2514 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2507 = _2439;
                            _2508 = _2440;
                            _2509 = _2441;
                            _2510 = _2442;
                            _2511 = _2443;
                            _2512 = _2444;
                            _2513 = _2514;
                        }
                    }
                    frontier_phi_61_pred = _2439;
                    frontier_phi_61_pred_1 = _2444;
                    frontier_phi_61_pred_2 = _2443;
                    frontier_phi_61_pred_3 = _2442;
                    frontier_phi_61_pred_4 = _2441;
                    frontier_phi_61_pred_5 = _2440;
                }
                _2239 = frontier_phi_61_pred;
                _2249 = frontier_phi_61_pred_1;
                _2247 = frontier_phi_61_pred_2;
                _2245 = frontier_phi_61_pred_3;
                _2243 = frontier_phi_61_pred_4;
                _2241 = frontier_phi_61_pred_5;
                uint _2390 = _2389 + 1u;
                if (_2390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2383 = _2239;
                    _2384 = _2241;
                    _2385 = _2243;
                    _2386 = _2245;
                    _2387 = _2247;
                    _2388 = _2249;
                    _2389 = _2390;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
        }
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.z;
        uint _2255 = (_2253 >> 8u) & 15u;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((4294967295u << _2255) & _2137) == 0u)
        {
            _2351 = _2238;
            _2353 = _2240;
            _2355 = _2242;
            _2357 = _2244;
            _2359 = _2246;
            _2361 = _2248;
        }
        else
        {
            float _2376 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
            float _2377 = _2376 * _2091;
            float _2378 = _2376 * _2092;
            float _2379 = _2376 * _2093;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2255 < ((_2253 >> 12u) & 15u))
            {
                float _2352;
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2490 = _2238;
                float _2491 = _2240;
                float _2492 = _2242;
                float _2493 = _2244;
                float _2494 = _2246;
                float _2495 = _2248;
                uint _2496 = _2255;
                uint _2505;
                bool _2506;
                for (;;)
                {
                    _2505 = texelFetch(g_lightClassification, int((((_2131 << 5u) + (_2117 << 9u)) + (_2496 << 2u)) >> 2u)).x;
                    _2506 = _2505 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2506)
                    {
                        frontier_phi_67_pred = _2493;
                        frontier_phi_67_pred_1 = _2494;
                        frontier_phi_67_pred_2 = _2495;
                        frontier_phi_67_pred_3 = _2492;
                        frontier_phi_67_pred_4 = _2491;
                        frontier_phi_67_pred_5 = _2490;
                    }
                    else
                    {
                        float _2690;
                        float _2691;
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2703 = _2490;
                        float _2704 = _2491;
                        float _2705 = _2492;
                        float _2706 = _2493;
                        float _2707 = _2494;
                        float _2708 = _2495;
                        uint _2709 = _2505;
                        uint _2710;
                        vec4 _2735;
                        float _2736;
                        vec4 _2751;
                        vec3 _2763;
                        vec4 _2779;
                        vec4 _2795;
                        float _2842;
                        bool _2843;
                        for (;;)
                        {
                            uint _2720 = ((_2496 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2709));
                            _2710 = (_2709 + 4294967295u) & _2709;
                            uint _2722 = _2720 * 40u;
                            _2735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2722 + 3u)).x));
                            _2736 = _2735.w;
                            uint _2738 = (_2720 * 40u) + 4u;
                            _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            uint _2753 = (_2720 * 40u) + 8u;
                            _2763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x));
                            uint _2766 = (_2720 * 40u) + 16u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2782 = (_2720 * 40u) + 20u;
                            _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            uint _2798 = (_2720 * 40u) + 24u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2817 = (_2720 * 40u) + 28u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2842 = fma(_2093, _2830.z, fma(_2092, _2830.y, _2830.x * _2091)) + _2830.w;
                            _2843 = !((fma(_2093, _2811.z, fma(_2092, _2811.y, _2811.x * _2091)) + _2811.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2843)
                            {
                                float _2870 = _2735.x - _2091;
                                float _2871 = _2735.y - _2092;
                                float _2872 = _2735.z - _2093;
                                float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                                float _2876 = inversesqrt(_2873);
                                float _2877 = _2876 * _2870;
                                float _2878 = _2876 * _2871;
                                float _2879 = _2876 * _2872;
                                float _2883 = 1.0 - (_2873 / (_2736 * _2736));
                                float _3908 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                                float _2888 = sqrt(_2873) * _2751.w;
                                float _2890 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                                float _2891 = _2890 * _2890;
                                float _2894 = ((1.0 - _2891) * dot(vec3(_2877, _2878, _2879), vec3(_389, _392, _395))) + _2891;
                                float _2897 = _2888 * _2888;
                                float _2901 = (fma(_2093, _2779.z, fma(_2092, _2779.y, _2779.x * _2091)) + _2779.w) / _2842;
                                float _2902 = (fma(_2093, _2795.z, fma(_2092, _2795.y, _2795.x * _2091)) + _2795.w) / _2842;
                                float _2906 = 1.0 - dot(vec2(_2901, _2902), vec2(_2901, _2902));
                                float _3924 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                                float _2908 = _2907 * (((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2884) / ((_2897 * 0.699999988079071044921875) + 1.0));
                                float _2920 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                                float _2921 = 1.0 - _449;
                                float _2928 = sqrt(1.0 - ((1.0 - (_2921 * _2921)) * (1.0 - (_2920 * _2920))));
                                float _2929 = _2928 * _2928;
                                float _2930 = _2929 * _2929;
                                float _2931 = _2877 - _2377;
                                float _2932 = _2878 - _2378;
                                float _2933 = _2879 - _2379;
                                float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                                float _2941 = dot(vec3(_389, _392, _395), vec3((-0.0) - _2377, (-0.0) - _2378, (-0.0) - _2379));
                                float _3935 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                                float _2945 = dot(vec3(_389, _392, _395), vec3(_2937 * _2931, _2937 * _2932, _2937 * _2933));
                                float _3946 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2948 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _2952 = ((_2948 * _2948) * (_2930 + (-1.0))) + 1.0;
                                float _2953 = _2890 * _2929;
                                float _2954 = _2953 * _2953;
                                float _2960 = ((1.0 - _2954) * dot(vec3(_389, _392, _395), vec3(_2877, _2878, _2879))) + _2954;
                                float _3957 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _2962 = 1.0 - _2929;
                                float _2972 = (0.5 / (((_2961 * ((_2944 * _2962) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2929) * _2944))) * _2961;
                                float _3968 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2982 = (_2907 * _2884) * (((_2930 * 3.1415927410125732421875) * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) / ((_2952 * _2952) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2982 * _2763.x;
                                frontier_phi_73_pred_1 = _2982 * _2763.y;
                                frontier_phi_73_pred_2 = _2908 * _2751.z;
                                frontier_phi_73_pred_3 = _2908 * _2751.y;
                                frontier_phi_73_pred_4 = _2908 * _2751.x;
                                frontier_phi_73_pred_5 = _2982 * _2763.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2986 = frontier_phi_73_pred;
                            _2987 = frontier_phi_73_pred_1;
                            _2991 = frontier_phi_73_pred_2;
                            _2990 = frontier_phi_73_pred_3;
                            _2989 = frontier_phi_73_pred_4;
                            _2988 = frontier_phi_73_pred_5;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            _2695 = _2991 + _2708;
                            _2690 = _2986 + _2703;
                            _2691 = _2987 + _2704;
                            _2692 = _2988 + _2705;
                            if (_2710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2710;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2693;
                        frontier_phi_67_pred_1 = _2694;
                        frontier_phi_67_pred_2 = _2695;
                        frontier_phi_67_pred_3 = _2692;
                        frontier_phi_67_pred_4 = _2691;
                        frontier_phi_67_pred_5 = _2690;
                    }
                    _2358 = frontier_phi_67_pred;
                    _2360 = frontier_phi_67_pred_1;
                    _2362 = frontier_phi_67_pred_2;
                    _2356 = frontier_phi_67_pred_3;
                    _2354 = frontier_phi_67_pred_4;
                    _2352 = frontier_phi_67_pred_5;
                    uint _2497 = _2496 + 1u;
                    if (_2497 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2490 = _2352;
                        _2491 = _2354;
                        _2492 = _2356;
                        _2493 = _2358;
                        _2494 = _2360;
                        _2495 = _2362;
                        _2496 = _2497;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2360;
                frontier_phi_55_56_ladder_1 = _2362;
                frontier_phi_55_56_ladder_2 = _2358;
                frontier_phi_55_56_ladder_3 = _2356;
                frontier_phi_55_56_ladder_4 = _2354;
                frontier_phi_55_56_ladder_5 = _2352;
            }
            else
            {
                frontier_phi_55_56_ladder = _2246;
                frontier_phi_55_56_ladder_1 = _2248;
                frontier_phi_55_56_ladder_2 = _2244;
                frontier_phi_55_56_ladder_3 = _2242;
                frontier_phi_55_56_ladder_4 = _2240;
                frontier_phi_55_56_ladder_5 = _2238;
            }
            _2351 = frontier_phi_55_56_ladder_5;
            _2353 = frontier_phi_55_56_ladder_4;
            _2355 = frontier_phi_55_56_ladder_3;
            _2357 = frontier_phi_55_56_ladder_2;
            _2359 = frontier_phi_55_56_ladder;
            _2361 = frontier_phi_55_56_ladder_1;
        }
        float _2366 = isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0));
        _2150 = (_2366 * _2357) + _1605;
        _2152 = (_2366 * _2359) + _1607;
        _2154 = (_2366 * _2361) + _1609;
        _2156 = ((_2351 * 0.039999999105930328369140625) * _2366) + _1935;
        _2158 = ((_2353 * 0.039999999105930328369140625) * _2366) + _1937;
        _2160 = ((_2355 * 0.039999999105930328369140625) * _2366) + _1939;
    }
    else
    {
        _2150 = _1605;
        _2152 = _1607;
        _2154 = _1609;
        _2156 = _1935;
        _2158 = _1937;
        _2160 = _1939;
    }
    float _3984 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _3995 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _4006 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    uint _2180 = _408 + 6u;
    float _2188 = _368 / cbSceneParam._m0[86u].x;
    float _2189 = _369 / cbSceneParam._m0[86u].y;
    vec4 _2203 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2188, _2189, (log2((isnan(cbSceneParam._m0[77u].w) ? _300 : (isnan(_300) ? cbSceneParam._m0[77u].w : min(_300, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2205 = _2203.x;
    float _2206 = _2203.y;
    float _2207 = _2203.z;
    float _2208 = _2203.w;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_300 > cbSceneParam._m0[78u].w)
    {
        float _2263 = isnan(_300) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _300 : min(cbSceneParam._m0[80u].w, _300));
        float _2264 = _2263 / _300;
        float _2275 = _2264 * _353;
        float _2276 = _354 * _2264;
        float _2277 = (-0.0) - _2276;
        float _2279 = _2264 * _355;
        float _2281 = (cbSceneParam._m0[77u].w * _2277) / _2263;
        float _2282 = _2281 + cbSceneParam._m0[79u].w;
        float _2283 = cbSceneParam._m0[79u].w - _2276;
        float _2289 = sqrt(((_2275 * _2275) + (_2276 * _2276)) + (_2279 * _2279));
        float _2292 = (1.0 - (cbSceneParam._m0[77u].w / _2263)) * _2289;
        float _2297 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2299 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2452;
        if (abs((_2277 - _2281) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2452 = ((((_2282 > 0.0) ? exp2(_2297 * _2282) : (2.0 - exp2(_2299 * _2282))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2292;
        }
        else
        {
            float _2412 = 1.0 / cbSceneParam._m0[80u].x;
            float _2413 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : max(_2282, _2283));
            float _2414 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : min(_2282, _2283));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            float _2424 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : min(_2414, 0.0));
            _2452 = ((abs(_2289 / _2277) * cbSceneParam._m0[80u].y) * ((((_2423 - _2424) * 2.0) - ((exp2(_2297 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0)))) - exp2(_2297 * (isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0))))) * _2412)) - ((exp2(_2299 * _2423) - exp2(_2299 * _2424)) * _2412))) + (_2292 * cbSceneParam._m0[80u].z);
        }
        vec4 _2454 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2188, _2189, 1.0), 0.0);
        float _2463 = exp2((_2452 * (-1.44269502162933349609375)) * (1.0 - _2454.w));
        float _2464 = log2(_2463);
        float _2480 = log2(_2208);
        _2301 = (exp2(_2480 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].x)) * _2454.x) / cbSceneParam._m0[78u].x)) + _2205;
        _2303 = (exp2(_2480 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].y)) * _2454.y) / cbSceneParam._m0[78u].y)) + _2206;
        _2305 = (exp2(_2480 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2464 * cbSceneParam._m0[78u].z)) * _2454.z) / cbSceneParam._m0[78u].z)) + _2207;
        _2307 = _2463 * _2208;
    }
    else
    {
        _2301 = _2205;
        _2303 = _2206;
        _2305 = _2207;
        _2307 = _2208;
    }
    float _2319 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2320 = _2319 == 3.0;
    float _2321 = log2(_2307);
    float _2328 = exp2(_2321 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2150 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _433))) + ((_2156 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2329 = exp2(_2321 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2152 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _433))) + ((_2158 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2330 = exp2(_2321 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2154 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _433))) + ((_2160 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1240)) * cbPerFrame._m0[3u].x));
    float _2339 = (_2319 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2339 * (_2320 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.y = _2339 * (_2320 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.z = _2339 * (_2320 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.w = cbInstanceData._m0[_2180].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2180].w;
}


