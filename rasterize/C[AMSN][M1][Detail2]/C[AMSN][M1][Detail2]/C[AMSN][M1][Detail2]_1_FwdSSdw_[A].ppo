#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _960;
float _3352;
float _3353;
float _3354;
float _3355;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _303 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3364 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _311 = (_304 * ((_272.x * cbMtdParam._m0[10u].x) - _247)) + _247;
    float _312 = (_304 * ((_272.y * cbMtdParam._m0[10u].y) - _248)) + _248;
    float _313 = (_304 * ((_272.z * cbMtdParam._m0[10u].z) - _249)) + _249;
    vec4 _330 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = (_330.x * 2.0) + (-1.0);
    float _340 = (_330.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3375 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _346 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    float _347 = _330.z * cbMtdParam._m0[13u].y;
    vec4 _360 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _374 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_360.z * cbMtdParam._m0[13u].x) - _347)) + _347;
    float _380 = ((((_360.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _338;
    float _381 = ((((_360.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _340;
    float _384 = fma(_346, _211 * NORMAL.x, fma(_381, _218 * TANGENT.x, (_204 * _196) * _380));
    float _387 = fma(_346, _211 * NORMAL.y, fma(_381, _218 * TANGENT.y, (_204 * _197) * _380));
    float _390 = fma(_346, _211 * NORMAL.z, fma(_381, _218 * TANGENT.z, (_204 * _198) * _380));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    float _395 = _394 * _384;
    float _396 = _394 * _387;
    float _397 = _394 * _390;
    float _3386 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _398 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3408 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3419 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _417 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _458 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _468 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _458);
    float _469 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _458);
    float _470 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _458);
    float _474 = inversesqrt(dot(vec3(_468, _469, _470), vec3(_468, _469, _470)));
    float _475 = _468 * _474;
    float _476 = _469 * _474;
    float _477 = _470 * _474;
    vec4 _482 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _484 = _482.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _640 = sqrt(((_468 * _468) + (_469 * _469)) + (_470 * _470));
        float _646 = (cbMatDynParam._m0[5u].x * _640) + cbMatDynParam._m0[5u].y;
        float _3430 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _651 = (cbMatDynParam._m0[5u].z * _640) + cbMatDynParam._m0[5u].w;
        float _3441 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) - _647)) + _647) < ((_484 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _496 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _497 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _516 = fma(_397, cbSceneParam._m0[5u].z, fma(_396, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _395));
    float _519 = fma(_397, cbSceneParam._m0[6u].z, fma(_396, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _395));
    float _522 = fma(_397, cbSceneParam._m0[7u].z, fma(_396, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _395));
    uint _535 = uint(roundEven(NORMAL.w)) * 13u;
    uint _536 = _535 + 9u;
    uint _537 = _536 + uint(cbMatDynParam._m0[0u].w);
    float _543 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_537].x;
    float _544 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_537].y;
    float _545 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_537].z;
    float _3452 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    vec4 _557 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _496, cbSceneParam._m0[86u].y * _497));
    float _560 = _557.x * TEXCOORD_5.w;
    float _561 = dot(vec3(_395, _396, _397), vec3(_475, _476, _477));
    float _564 = _561 * 2.0;
    float _568 = (_564 * _395) - _475;
    float _569 = (_564 * _396) - _476;
    float _570 = (_564 * _397) - _477;
    float _574 = abs(dot(vec3(_475, _476, _477), vec3(_395, _396, _397)));
    float _3485 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _576 = sqrt(_398);
    float _589 = exp2((_576 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_576 * 3.0));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _959;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = fma(_629, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621));
        float _688 = fma(_629, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621));
        float _692 = fma(_629, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621));
        float _717 = _621 + _395;
        float _718 = _625 + _396;
        float _719 = _629 + _397;
        float _729 = fma(_719, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _717)) - _684;
        float _730 = fma(_719, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _717)) - _688;
        float _731 = fma(_719, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _717)) - _692;
        float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
        float _748 = ((_735 * _729) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_684 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _749 = ((_735 * _730) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_688 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_735 * _731) / cbModelParam._m0[34u].z) + ((((((_692 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _749, _750), 0.0);
        float _787 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_753.x + (-0.5));
        float _789 = _787 * (_753.y + (-0.5));
        float _790 = _787 * (_753.z + (-0.5));
        float _797 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_760.x + (-0.5));
        float _799 = _797 * (_760.y + (-0.5));
        float _800 = _797 * (_760.z + (-0.5));
        float _807 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_767.x + (-0.5));
        float _809 = _807 * (_767.y + (-0.5));
        float _810 = _807 * (_767.z + (-0.5));
        float _817 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_774.x + (-0.5));
        float _819 = _817 * (_774.y + (-0.5));
        float _820 = _817 * (_774.z + (-0.5));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = _788 * 0.5;
        float _825 = _798 * 0.5;
        float _826 = _808 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _841 = (dot(vec3(_395, _396, _397), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _851 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3533 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_853 + 1.0))) + _858) * _821;
        float _868 = _789 * 0.5;
        float _869 = _799 * 0.5;
        float _870 = _809 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_395, _396, _397), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3566 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_895 + 1.0))) + _900) * _822;
        float _910 = _790 * 0.5;
        float _911 = _800 * 0.5;
        float _912 = _810 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_395, _396, _397), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3599 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_937 + 1.0))) + _942) * _823;
        _959 = _790;
        _961 = _789;
        _962 = _788;
        _963 = _800;
        _964 = _799;
        _965 = _798;
        _966 = _810;
        _967 = _809;
        _968 = _808;
        _969 = _823;
        _970 = _822;
        _971 = _821;
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
    }
    else
    {
        _959 = _960;
        _961 = _960;
        _962 = _960;
        _963 = _960;
        _964 = _960;
        _965 = _960;
        _966 = _960;
        _967 = _960;
        _968 = _960;
        _969 = _960;
        _970 = _960;
        _971 = _960;
        _972 = 0.0;
        _973 = 0.0;
        _974 = 0.0;
    }
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1003 = fma(_629, cbModelParam._m0[30u].z, fma(_625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _621));
        float _1007 = fma(_629, cbModelParam._m0[31u].z, fma(_625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _621));
        float _1011 = fma(_629, cbModelParam._m0[32u].z, fma(_625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _621));
        float _1034 = _621 + _395;
        float _1035 = _625 + _396;
        float _1036 = _629 + _397;
        float _1046 = fma(_1036, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1034)) - _1003;
        float _1047 = fma(_1036, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1034)) - _1007;
        float _1048 = fma(_1036, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1034)) - _1011;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1003 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1007 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[35u].z) + ((((((_1011 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1102 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1069.x + (-0.5));
        float _1104 = _1102 * (_1069.y + (-0.5));
        float _1105 = _1102 * (_1069.z + (-0.5));
        float _1112 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1076.x + (-0.5));
        float _1114 = _1112 * (_1076.y + (-0.5));
        float _1115 = _1112 * (_1076.z + (-0.5));
        float _1122 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1083.x + (-0.5));
        float _1124 = _1122 * (_1083.y + (-0.5));
        float _1125 = _1122 * (_1083.z + (-0.5));
        float _1132 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1090.x + (-0.5));
        float _1134 = _1132 * (_1090.y + (-0.5));
        float _1135 = _1132 * (_1090.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_395, _396, _397), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3662 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1166 + 1.0))) + _1171) * _1136;
        float _1181 = _1104 * 0.5;
        float _1182 = _1114 * 0.5;
        float _1183 = _1124 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_395, _396, _397), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3695 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1208 + 1.0))) + _1213) * _1137;
        float _1223 = _1105 * 0.5;
        float _1224 = _1115 * 0.5;
        float _1225 = _1125 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_395, _396, _397), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3728 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1250 + 1.0))) + _1255) * _1138;
        _1272 = _1105;
        _1273 = _1104;
        _1274 = _1103;
        _1275 = _1115;
        _1276 = _1114;
        _1277 = _1113;
        _1278 = _1125;
        _1279 = _1124;
        _1280 = _1123;
        _1281 = _1138;
        _1282 = _1137;
        _1283 = _1136;
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _960;
        _1273 = _960;
        _1274 = _960;
        _1275 = _960;
        _1276 = _960;
        _1277 = _960;
        _1278 = _960;
        _1279 = _960;
        _1280 = _960;
        _1281 = _960;
        _1282 = _960;
        _1283 = _960;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _973)) + _973;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _974)) + _974;
    float _1319 = fma(_1298, cbSceneParam._m0[89u].z, fma(_1297, cbSceneParam._m0[89u].y, _1296 * cbSceneParam._m0[89u].x));
    float _1322 = fma(_1298, cbSceneParam._m0[90u].z, fma(_1297, cbSceneParam._m0[90u].y, _1296 * cbSceneParam._m0[90u].x));
    float _1325 = fma(_1298, cbSceneParam._m0[91u].z, fma(_1297, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1296));
    float _1340 = _568 * 0.5;
    float _1341 = _569 * 0.5;
    float _1342 = _570 * 0.5;
    float _1343 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1346 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1349 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1383;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1356 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_959, _963, _966, _969));
        float _1360 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_961, _964, _967, _970));
        float _1364 = dot(vec4(_1340, _1341, _1342, 1.0), vec4(_962, _965, _968, _971));
        float _1371 = dot(vec4(cbModelParam._m0[39u]), vec4(_1340, _1341, _1342, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1371) ? 0.0 : (isnan(0.0) ? _1371 : max(0.0, _1371))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1394;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1385 = dot(vec4(cbModelParam._m0[40u]), vec4(_1340, _1341, _1342, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1385) ? 0.0 : (isnan(0.0) ? _1385 : max(0.0, _1385))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1398 = (_1394 * cbModelParam._m0[1u].x) + (_1383 * (1.0 - cbModelParam._m0[1u].x));
    float _1408 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _398);
    float _1409 = isnan(_1408) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1408 : min(cbModelParam._m0[25u].z, _1408));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1457 = fma(_629, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621)) + cbModelParam._m0[13u].w;
        float _1461 = fma(_629, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621)) + cbModelParam._m0[14u].w;
        float _1465 = fma(_629, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621)) + cbModelParam._m0[15u].w;
        float _1468 = fma(_570, cbModelParam._m0[13u].z, fma(_569, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568));
        float _1471 = fma(_570, cbModelParam._m0[14u].z, fma(_569, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568));
        float _1474 = fma(_570, cbModelParam._m0[15u].z, fma(_569, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568));
        float _1502;
        if (_1468 > 0.0)
        {
            _1502 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1502 = frontier_phi_17_15_ladder;
        }
        float _1728;
        if (_1471 > 0.0)
        {
            _1728 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1728 = frontier_phi_26_22_ladder;
        }
        float _1974;
        if (_1474 > 0.0)
        {
            _1974 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1974 = frontier_phi_38_33_ladder;
        }
        float _1976 = isnan(_1728) ? _1502 : (isnan(_1502) ? _1728 : min(_1502, _1728));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1468) + _1457;
        float _1982 = (_1977 * _1471) + _1461;
        float _1983 = (_1977 * _1474) + _1465;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1986 = (-1.0) - _1984;
        float _1988 = _1984 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1983 > _1988) || ((_1983 < _1986) || ((_1982 > _1988) || ((_1982 < _1986) || ((_1981 < _1986) || (_1981 > _1988))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1983, cbModelParam._m0[9u].z, fma(_1982, cbModelParam._m0[9u].y, _1981 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1983, cbModelParam._m0[10u].z, fma(_1982, cbModelParam._m0[10u].y, _1981 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1983, cbModelParam._m0[11u].z, fma(_1982, cbModelParam._m0[11u].y, _1981 * cbModelParam._m0[11u].x))), _1409);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1490 = frontier_phi_16_38_ladder_2;
        _1492 = frontier_phi_16_38_ladder_1;
        _1494 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_568, _569, _570), _1409);
        _1490 = _1478.x * cbModelParam._m0[1u].y;
        _1492 = _1478.y * cbModelParam._m0[1u].y;
        _1494 = _1478.z * cbModelParam._m0[1u].y;
    }
    float _1498 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _398);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1498 : min(cbModelParam._m0[25u].w, _1498));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1556 = fma(_629, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621)) + cbModelParam._m0[21u].w;
        float _1560 = fma(_629, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621)) + cbModelParam._m0[22u].w;
        float _1564 = fma(_629, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621)) + cbModelParam._m0[23u].w;
        float _1567 = fma(_570, cbModelParam._m0[21u].z, fma(_569, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568));
        float _1570 = fma(_570, cbModelParam._m0[22u].z, fma(_569, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568));
        float _1573 = fma(_570, cbModelParam._m0[23u].z, fma(_569, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568));
        float _1733;
        if (_1567 > 0.0)
        {
            _1733 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1733 = frontier_phi_28_24_ladder;
        }
        float _2001;
        if (_1570 > 0.0)
        {
            _2001 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2001 = frontier_phi_40_35_ladder;
        }
        float _2206;
        if (_1573 > 0.0)
        {
            _2206 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2206 = frontier_phi_49_46_ladder;
        }
        float _2208 = isnan(_2001) ? _1733 : (isnan(_1733) ? _2001 : min(_1733, _2001));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1567) + _1556;
        float _2214 = (_2209 * _1570) + _1560;
        float _2215 = (_2209 * _1573) + _1564;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2216;
        float _2219 = _2216 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2215 > _2219) || ((_2215 < _2217) || ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 < _2217) || (_2213 > _2219))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2215, cbModelParam._m0[17u].z, fma(_2214, cbModelParam._m0[17u].y, _2213 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2215, cbModelParam._m0[18u].z, fma(_2214, cbModelParam._m0[18u].y, _2213 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2215, cbModelParam._m0[19u].z, fma(_2214, cbModelParam._m0[19u].y, _2213 * cbModelParam._m0[19u].x))), _1499);
            frontier_phi_25_49_ladder = _2414.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2414.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2414.x * cbModelParam._m0[1u].z;
        }
        _1592 = frontier_phi_25_49_ladder_2;
        _1594 = frontier_phi_25_49_ladder_1;
        _1596 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_568, _569, _570), _1499);
        _1592 = _1576.x * cbModelParam._m0[1u].z;
        _1594 = _1576.y * cbModelParam._m0[1u].z;
        _1596 = _1576.z * cbModelParam._m0[1u].z;
    }
    float _1608 = ((((1.0 - _589) * ((_576 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_589 * _576)) * _560;
    float _1609 = _1608 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1610 = _1608 * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1611 = _1608 * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1614 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, _1609 * cbSceneParam._m0[91u].x));
    vec4 _1628 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_496, _497));
    float _1630 = _1628.w;
    float _1642 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1630);
    float _1643 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1630);
    float _1644 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1630);
    uvec4 _1648 = floatBitsToUint(cbInstanceData._m0[_535 + 5u]);
    uint _1650 = _1648.x * 14u;
    uint _1651 = _1650 + 13u;
    float _1658 = _560 + (-1.0);
    float _1663 = (cbLight._m0[_1651].x * _1658) + 1.0;
    float _1664 = (cbLight._m0[_1651].y * _1658) + 1.0;
    float _1665 = (cbLight._m0[_1651].z * _1658) + 1.0;
    float _1666 = (cbLight._m0[_1651].w * _1658) + 1.0;
    uint _1667 = _1650 + 5u;
    float _1673 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
    uint _1677 = _1650 + 4u;
    float _1687 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1691 = _1650 | 1u;
    float _1702 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_395, _396, _397));
    float _1705 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_395, _396, _397));
    float _3864 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _3875 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1710 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1712 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1719 = ((cbLight._m0[_1667].x * _1673) * _1712) + (((cbLight._m0[_1677].x * _1642) * _1687) * _1710);
    float _1720 = ((_1673 * cbLight._m0[_1667].y) * _1712) + (((cbLight._m0[_1677].y * _1643) * _1687) * _1710);
    float _1721 = ((_1673 * cbLight._m0[_1667].z) * _1712) + (((cbLight._m0[_1677].z * _1644) * _1687) * _1710);
    uvec4 _1725 = floatBitsToUint(cbLight._m0[_1650 + 12u]);
    bool _1727 = _1725.x == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1727)
    {
        _1738 = _1719;
        _1740 = _1720;
        _1742 = _1721;
    }
    else
    {
        uint _1746 = _1650 + 6u;
        float _1762 = (dot(vec3(cbLight._m0[_1650 + 2u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1763 = _1762 * _1762;
        float _3886 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1765 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1738 = (((cbLight._m0[_1746].x * 0.3183098733425140380859375) * _1764) * _1765) + _1719;
        _1740 = (((cbLight._m0[_1746].y * 0.3183098733425140380859375) * _1764) * _1765) + _1720;
        _1742 = (((cbLight._m0[_1746].z * 0.3183098733425140380859375) * _1764) * _1765) + _1721;
    }
    bool _1745 = _1725.y == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1745)
    {
        _1783 = _1738;
        _1785 = _1740;
        _1787 = _1742;
    }
    else
    {
        uint _1945 = _1650 + 7u;
        float _1961 = (dot(vec3(cbLight._m0[_1650 + 3u].xyz), vec3(_395, _396, _397)) * 0.5) + 0.5;
        float _1962 = _1961 * _1961;
        float _3902 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1964 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
        _1783 = (((cbLight._m0[_1945].x * 0.3183098733425140380859375) * _1963) * _1964) + _1738;
        _1785 = (((cbLight._m0[_1945].y * 0.3183098733425140380859375) * _1963) * _1964) + _1740;
        _1787 = (((cbLight._m0[_1945].z * 0.3183098733425140380859375) * _1963) * _1964) + _1742;
    }
    uint _1790 = _1650 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1650].w)) * _398) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1650].x + _475;
    float _1806 = cbLight._m0[_1650].y + _476;
    float _1807 = cbLight._m0[_1650].z + _477;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1650].xyz));
    float _3918 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _1819 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1820 = dot(vec3(_395, _396, _397), vec3(_1812, _1813, _1814));
    float _3940 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1650].xyz), vec3(_1812, _1813, _1814));
    float _3951 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1819 * ((_1818 * _1844) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1844) + _1804) * _1818))) * _1818;
    float _3962 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1871 = _1650 + 9u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1691].w)) * _398) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1691].x + _475;
    float _1885 = cbLight._m0[_1691].y + _476;
    float _1886 = cbLight._m0[_1691].z + _477;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_1691].xyz));
    float _3973 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1898 = dot(vec3(_395, _396, _397), vec3(_1891, _1892, _1893));
    float _3984 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_1891, _1892, _1893));
    float _3995 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1883 * _1883;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1920 = 1.0 - _1883;
    float _1930 = (0.5 / (((_1819 * ((_1897 * _1920) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1920) + _1883) * _1897))) * _1897;
    float _4006 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    float _1942 = (((_1919 * cbLight._m0[_1871].x) * _1932) * _1673) + ((((cbLight._m0[_1790].x * _1642) * _1843) * _1857) * _1687);
    float _1943 = (((_1919 * cbLight._m0[_1871].y) * _1932) * _1673) + ((((cbLight._m0[_1790].y * _1643) * _1843) * _1857) * _1687);
    float _1944 = (((_1919 * cbLight._m0[_1871].z) * _1932) * _1673) + ((((cbLight._m0[_1790].z * _1644) * _1843) * _1857) * _1687);
    float _2006;
    float _2008;
    float _2010;
    if (_1727)
    {
        _2006 = _1942;
        _2008 = _1943;
        _2010 = _1944;
    }
    else
    {
        uint _2012 = _1650 + 2u;
        uint _2016 = _1650 + 10u;
        float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _398) * 0.949999988079071044921875);
        float _2031 = _2030 * _2030;
        float _2032 = cbLight._m0[_2012].x + _475;
        float _2033 = cbLight._m0[_2012].y + _476;
        float _2034 = cbLight._m0[_2012].z + _477;
        float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
        float _2039 = _2038 * _2032;
        float _2040 = _2038 * _2033;
        float _2041 = _2038 * _2034;
        float _2042 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2012].xyz));
        float _4017 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2045 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2046 = dot(vec3(_395, _396, _397), vec3(_2039, _2040, _2041));
        float _4028 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2050 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2039, _2040, _2041));
        float _4039 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2054 = _2031 * _2031;
        float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
        float _2067 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2068 = 1.0 - _2031;
        float _2078 = (0.5 / (((_1819 * ((_2045 * _2068) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2068) + _2031) * _2045))) * _2045;
        float _4050 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2080 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
        float _2081 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2006 = (((_2067 * cbLight._m0[_2016].x) * _2080) * _2081) + _1942;
        _2008 = (((_2067 * cbLight._m0[_2016].y) * _2080) * _2081) + _1943;
        _2010 = (((_2067 * cbLight._m0[_2016].z) * _2080) * _2081) + _1944;
    }
    float _2116;
    float _2118;
    float _2120;
    if (_1745)
    {
        _2116 = _2006;
        _2118 = _2008;
        _2120 = _2010;
    }
    else
    {
        uint _2127 = _1650 + 3u;
        uint _2131 = _1650 + 11u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _398) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _475;
        float _2148 = cbLight._m0[_2127].y + _476;
        float _2149 = cbLight._m0[_2127].z + _477;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_395, _396, _397), vec3(cbLight._m0[_2127].xyz));
        float _4066 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2161 = dot(vec3(_395, _396, _397), vec3(_2154, _2155, _2156));
        float _4077 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4088 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2183 = 1.0 - _2146;
        float _2193 = (0.5 / (((_1819 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2183) + _2146) * _2160))) * _2160;
        float _4099 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
        _2116 = (((_2182 * cbLight._m0[_2131].x) * _2195) * _2196) + _2006;
        _2118 = (((_2182 * cbLight._m0[_2131].y) * _2195) * _2196) + _2008;
        _2120 = (((_2182 * cbLight._m0[_2131].z) * _2195) * _2196) + _2010;
    }
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    if (_1648.y == 0u)
    {
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2271;
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2271;
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2271;
        uvec4 _2286 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2287 = _2286.x;
        uint _2298 = uint((float(_2286.y) * floor(float(uint(cbSceneParam._m0[85u].y * _497) / _2287))) + floor(float(uint(cbSceneParam._m0[85u].x * _496) / _2287)));
        float _2308 = (log2(_2274 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2309 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        uint _2312 = uint(isnan(14.0) ? _2309 : (isnan(_2309) ? 14.0 : min(_2309, 14.0)));
        uvec4 _2317 = texelFetch(g_lightClusterGridBuffer, int(((_2312 << 2u) + (_2298 << 6u)) >> 2u));
        uint _2318 = _2317.x;
        uint _2319 = _2286.z;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        if (((((1u << ((_2319 >> 4u) & 15u)) + 4294967295u) & _2318) == 0u) || ((_2319 & 240u) == 0u))
        {
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
        }
        else
        {
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            uint _2578 = 0u;
            uint _2587;
            bool _2588;
            for (;;)
            {
                _2587 = texelFetch(g_lightClassification, int((((_2312 << 5u) + (_2298 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                _2588 = _2587 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2588)
                {
                    frontier_phi_66_pred = _2572;
                    frontier_phi_66_pred_1 = _2577;
                    frontier_phi_66_pred_2 = _2576;
                    frontier_phi_66_pred_3 = _2575;
                    frontier_phi_66_pred_4 = _2574;
                    frontier_phi_66_pred_5 = _2573;
                }
                else
                {
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    uint _2723;
                    _2717 = _2572;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2587;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    for (;;)
                    {
                        uint _2727 = uint(findLSB(_2723)) + (_2578 << 5u);
                        uint _2724 = (_2723 + 4294967295u) & _2723;
                        uint _2729 = _2727 * 48u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2749 = (_2727 * 48u) + 4u;
                        vec4 _2762 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2768 = (_2727 * 48u) + 8u;
                        vec3 _2779 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x));
                        float _2783 = _2743.x - _2272;
                        float _2784 = _2743.y - _2273;
                        float _2785 = _2743.z - _2274;
                        float _2786 = dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785));
                        float _2789 = inversesqrt(_2786);
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2793 = dot(vec3(_516, _519, _522), vec3(_2790, _2791, _2792));
                        float _2798 = 1.0 - (_2786 * _2743.w);
                        float _4125 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2800 = sqrt(_2786) * _2762.w;
                        float _2803 = 1.39999997615814208984375 / (_2800 + 1.39999997615814208984375);
                        float _2804 = _2803 * _2803;
                        float _2807 = ((1.0 - _2804) * _2793) + _2804;
                        float _2810 = _2800 * _2800;
                        float _2814 = ((isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))) * _2799) / ((_2810 * 0.699999988079071044921875) + 1.0);
                        float _2818 = (-0.0) - _2272;
                        float _2819 = (-0.0) - _2273;
                        float _2820 = (-0.0) - _2274;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2835 = exp2(log2(1.0 / ((_2810 * 3.5) + 5.0)) * 0.25);
                        float _2836 = 1.0 - _576;
                        float _2843 = sqrt(1.0 - ((1.0 - (_2836 * _2836)) * (1.0 - (_2835 * _2835))));
                        float _2844 = _2843 * _2843;
                        float _2845 = _2844 * _2844;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2856 = dot(vec3(_516, _519, _522), vec3(_2825, _2826, _2827));
                        float _4141 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2859 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2860 = dot(vec3(_516, _519, _522), vec3(_2852 * _2846, _2852 * _2847, _2852 * _2848));
                        float _4152 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2867 = ((_2863 * _2863) * (_2845 + (-1.0))) + 1.0;
                        float _2868 = _2803 * _2844;
                        float _2869 = _2868 * _2868;
                        float _2872 = ((1.0 - _2869) * _2793) + _2869;
                        float _4163 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2874 = 1.0 - _2844;
                        float _2884 = (0.5 / (((_2873 * ((_2859 * _2874) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2873 * _2874) + _2844) * _2859))) * _2873;
                        float _4174 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2895 = (((_2845 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_2867 * _2867) * ((_2810 * 2.1991131305694580078125) + 3.141590118408203125))) * _2799;
                        _2647 = (_2814 * _2762.x) + _2720;
                        _2648 = (_2814 * _2762.y) + _2721;
                        _2649 = (_2814 * _2762.z) + _2722;
                        _2644 = (_2895 * _2779.x) + _2717;
                        _2645 = (_2895 * _2779.y) + _2718;
                        _2646 = (_2895 * _2779.z) + _2719;
                        if (_2724 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2724;
                        }
                    }
                    frontier_phi_66_pred = _2644;
                    frontier_phi_66_pred_1 = _2649;
                    frontier_phi_66_pred_2 = _2648;
                    frontier_phi_66_pred_3 = _2647;
                    frontier_phi_66_pred_4 = _2646;
                    frontier_phi_66_pred_5 = _2645;
                }
                _2420 = frontier_phi_66_pred;
                _2430 = frontier_phi_66_pred_1;
                _2428 = frontier_phi_66_pred_2;
                _2426 = frontier_phi_66_pred_3;
                _2424 = frontier_phi_66_pred_4;
                _2422 = frontier_phi_66_pred_5;
                uint _2579 = _2578 + 1u;
                if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2572 = _2420;
                    _2573 = _2422;
                    _2574 = _2424;
                    _2575 = _2426;
                    _2576 = _2428;
                    _2577 = _2430;
                    _2578 = _2579;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
        }
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.z;
        uint _2436 = (_2434 >> 8u) & 15u;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((4294967295u << _2436) & _2318) == 0u)
        {
            _2540 = _2419;
            _2542 = _2421;
            _2544 = _2423;
            _2546 = _2425;
            _2548 = _2427;
            _2550 = _2429;
        }
        else
        {
            float _2565 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
            float _2566 = _2565 * _2272;
            float _2567 = _2565 * _2273;
            float _2568 = _2565 * _2274;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2436 < ((_2434 >> 12u) & 15u))
            {
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2700 = _2419;
                float _2701 = _2421;
                float _2702 = _2423;
                float _2703 = _2425;
                float _2704 = _2427;
                float _2705 = _2429;
                uint _2706 = _2436;
                uint _2715;
                bool _2716;
                for (;;)
                {
                    _2715 = texelFetch(g_lightClassification, int((((_2312 << 5u) + (_2298 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                    _2716 = _2715 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2716)
                    {
                        frontier_phi_77_pred = _2705;
                        frontier_phi_77_pred_1 = _2704;
                        frontier_phi_77_pred_2 = _2703;
                        frontier_phi_77_pred_3 = _2702;
                        frontier_phi_77_pred_4 = _2701;
                        frontier_phi_77_pred_5 = _2700;
                    }
                    else
                    {
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _2922 = _2700;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        uint _2928 = _2715;
                        uint _2929;
                        vec4 _2954;
                        float _2955;
                        vec4 _2970;
                        vec3 _2982;
                        vec4 _2998;
                        vec4 _3014;
                        float _3061;
                        bool _3062;
                        for (;;)
                        {
                            uint _2939 = ((_2706 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2928));
                            _2929 = (_2928 + 4294967295u) & _2928;
                            uint _2941 = _2939 * 40u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2955 = _2954.w;
                            uint _2957 = (_2939 * 40u) + 4u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2939 * 40u) + 8u;
                            _2982 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x));
                            uint _2985 = (_2939 * 40u) + 16u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3001 = (_2939 * 40u) + 20u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2939 * 40u) + 24u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3036 = (_2939 * 40u) + 28u;
                            vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3061 = fma(_2274, _3049.z, fma(_2273, _3049.y, _3049.x * _2272)) + _3049.w;
                            _3062 = !((fma(_2274, _3030.z, fma(_2273, _3030.y, _3030.x * _2272)) + _3030.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3062)
                            {
                                float _3089 = _2954.x - _2272;
                                float _3090 = _2954.y - _2273;
                                float _3091 = _2954.z - _2274;
                                float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                                float _3095 = inversesqrt(_3092);
                                float _3096 = _3095 * _3089;
                                float _3097 = _3095 * _3090;
                                float _3098 = _3095 * _3091;
                                float _3102 = 1.0 - (_3092 / (_2955 * _2955));
                                float _4185 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3107 = sqrt(_3092) * _2970.w;
                                float _3109 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                                float _3110 = _3109 * _3109;
                                float _3113 = ((1.0 - _3110) * dot(vec3(_3096, _3097, _3098), vec3(_516, _519, _522))) + _3110;
                                float _3116 = _3107 * _3107;
                                float _3120 = (fma(_2274, _2998.z, fma(_2273, _2998.y, _2998.x * _2272)) + _2998.w) / _3061;
                                float _3121 = (fma(_2274, _3014.z, fma(_2273, _3014.y, _3014.x * _2272)) + _3014.w) / _3061;
                                float _3125 = 1.0 - dot(vec2(_3120, _3121), vec2(_3120, _3121));
                                float _4201 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3126 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3127 = _3126 * (((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3103) / ((_3116 * 0.699999988079071044921875) + 1.0));
                                float _3139 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                                float _3140 = 1.0 - _576;
                                float _3147 = sqrt(1.0 - ((1.0 - (_3140 * _3140)) * (1.0 - (_3139 * _3139))));
                                float _3148 = _3147 * _3147;
                                float _3149 = _3148 * _3148;
                                float _3150 = _3096 - _2566;
                                float _3151 = _3097 - _2567;
                                float _3152 = _3098 - _2568;
                                float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                                float _3160 = dot(vec3(_516, _519, _522), vec3((-0.0) - _2566, (-0.0) - _2567, (-0.0) - _2568));
                                float _4212 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3164 = dot(vec3(_516, _519, _522), vec3(_3156 * _3150, _3156 * _3151, _3156 * _3152));
                                float _4223 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3167 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3171 = ((_3167 * _3167) * (_3149 + (-1.0))) + 1.0;
                                float _3172 = _3109 * _3148;
                                float _3173 = _3172 * _3172;
                                float _3179 = ((1.0 - _3173) * dot(vec3(_516, _519, _522), vec3(_3096, _3097, _3098))) + _3173;
                                float _4234 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3181 = 1.0 - _3148;
                                float _3191 = (0.5 / (((_3180 * ((_3163 * _3181) + _3148)) + 9.9999999392252902907785028219223e-09) + (((_3180 * _3181) + _3148) * _3163))) * _3180;
                                float _4245 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3201 = (_3126 * _3103) * (((_3149 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_3171 * _3171) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3127 * _2970.y;
                                frontier_phi_83_pred_1 = _3127 * _2970.x;
                                frontier_phi_83_pred_2 = _3201 * _2982.z;
                                frontier_phi_83_pred_3 = _3201 * _2982.y;
                                frontier_phi_83_pred_4 = _3201 * _2982.x;
                                frontier_phi_83_pred_5 = _3127 * _2970.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3209 = frontier_phi_83_pred;
                            _3208 = frontier_phi_83_pred_1;
                            _3207 = frontier_phi_83_pred_2;
                            _3206 = frontier_phi_83_pred_3;
                            _3205 = frontier_phi_83_pred_4;
                            _3210 = frontier_phi_83_pred_5;
                            _2912 = _3208 + _2925;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2909 = _3205 + _2922;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            if (_2929 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2929;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2914;
                        frontier_phi_77_pred_1 = _2913;
                        frontier_phi_77_pred_2 = _2912;
                        frontier_phi_77_pred_3 = _2911;
                        frontier_phi_77_pred_4 = _2910;
                        frontier_phi_77_pred_5 = _2909;
                    }
                    _2551 = frontier_phi_77_pred;
                    _2549 = frontier_phi_77_pred_1;
                    _2547 = frontier_phi_77_pred_2;
                    _2545 = frontier_phi_77_pred_3;
                    _2543 = frontier_phi_77_pred_4;
                    _2541 = frontier_phi_77_pred_5;
                    uint _2707 = _2706 + 1u;
                    if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2700 = _2541;
                        _2701 = _2543;
                        _2702 = _2545;
                        _2703 = _2547;
                        _2704 = _2549;
                        _2705 = _2551;
                        _2706 = _2707;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2545;
                frontier_phi_58_59_ladder_1 = _2551;
                frontier_phi_58_59_ladder_2 = _2549;
                frontier_phi_58_59_ladder_3 = _2547;
                frontier_phi_58_59_ladder_4 = _2543;
                frontier_phi_58_59_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_58_59_ladder = _2423;
                frontier_phi_58_59_ladder_1 = _2429;
                frontier_phi_58_59_ladder_2 = _2427;
                frontier_phi_58_59_ladder_3 = _2425;
                frontier_phi_58_59_ladder_4 = _2421;
                frontier_phi_58_59_ladder_5 = _2419;
            }
            _2540 = frontier_phi_58_59_ladder_5;
            _2542 = frontier_phi_58_59_ladder_4;
            _2544 = frontier_phi_58_59_ladder;
            _2546 = frontier_phi_58_59_ladder_3;
            _2548 = frontier_phi_58_59_ladder_2;
            _2550 = frontier_phi_58_59_ladder_1;
        }
        float _2555 = isnan(1.0) ? _560 : (isnan(_560) ? 1.0 : min(_560, 1.0));
        _2331 = (_2555 * _2546) + _1783;
        _2333 = (_2555 * _2548) + _1785;
        _2335 = (_2555 * _2550) + _1787;
        _2337 = ((_2540 * 0.039999999105930328369140625) * _2555) + _2116;
        _2339 = ((_2542 * 0.039999999105930328369140625) * _2555) + _2118;
        _2341 = ((_2544 * 0.039999999105930328369140625) * _2555) + _2120;
    }
    else
    {
        _2331 = _1783;
        _2333 = _1785;
        _2335 = _1787;
        _2337 = _2116;
        _2339 = _2118;
        _2341 = _2120;
    }
    float _4261 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4272 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4283 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _2358 = ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2331 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _560))) + ((_2337 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    float _2359 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2333 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _560))) + ((_2339 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    float _2360 = ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2335 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _560))) + ((_2341 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1398)) * cbPerFrame._m0[3u].x);
    uint _2361 = _535 + 6u;
    float _2369 = _496 / cbSceneParam._m0[86u].x;
    float _2370 = _497 / cbSceneParam._m0[86u].y;
    vec4 _2384 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, (log2((isnan(cbSceneParam._m0[77u].w) ? _417 : (isnan(_417) ? cbSceneParam._m0[77u].w : min(_417, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2386 = _2384.x;
    float _2387 = _2384.y;
    float _2388 = _2384.z;
    float _2389 = _2384.w;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    if (_417 > cbSceneParam._m0[78u].w)
    {
        float _2444 = isnan(_417) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _417 : min(cbSceneParam._m0[80u].w, _417));
        float _2445 = _2444 / _417;
        float _2456 = _2445 * _468;
        float _2457 = _469 * _2445;
        float _2458 = (-0.0) - _2457;
        float _2460 = _2445 * _470;
        float _2462 = (cbSceneParam._m0[77u].w * _2458) / _2444;
        float _2463 = _2462 + cbSceneParam._m0[79u].w;
        float _2464 = cbSceneParam._m0[79u].w - _2457;
        float _2470 = sqrt(((_2456 * _2456) + (_2457 * _2457)) + (_2460 * _2460));
        float _2473 = (1.0 - (cbSceneParam._m0[77u].w / _2444)) * _2470;
        float _2478 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2480 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2657;
        if (abs((_2458 - _2462) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2657 = ((((_2463 > 0.0) ? exp2(_2478 * _2463) : (2.0 - exp2(_2480 * _2463))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2473;
        }
        else
        {
            float _2601 = 1.0 / cbSceneParam._m0[80u].x;
            float _2602 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : max(_2463, _2464));
            float _2603 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : min(_2463, _2464));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            _2657 = ((abs(_2470 / _2458) * cbSceneParam._m0[80u].y) * ((((_2612 - _2613) * 2.0) - ((exp2(_2478 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)))) - exp2(_2478 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))))) * _2601)) - ((exp2(_2480 * _2612) - exp2(_2480 * _2613)) * _2601))) + (_2473 * cbSceneParam._m0[80u].z);
        }
        vec4 _2659 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2369, _2370, 1.0), 0.0);
        float _2668 = exp2((_2657 * (-1.44269502162933349609375)) * (1.0 - _2659.w));
        float _2669 = log2(_2668);
        float _2685 = log2(_2389);
        _2482 = (exp2(_2685 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].x)) * _2659.x) / cbSceneParam._m0[78u].x)) + _2386;
        _2484 = (exp2(_2685 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].y)) * _2659.y) / cbSceneParam._m0[78u].y)) + _2387;
        _2486 = (exp2(_2685 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2669 * cbSceneParam._m0[78u].z)) * _2659.z) / cbSceneParam._m0[78u].z)) + _2388;
        _2488 = _2668 * _2389;
    }
    else
    {
        _2482 = _2386;
        _2484 = _2387;
        _2486 = _2388;
        _2488 = _2389;
    }
    bool _2695;
    vec4 _2498;
    vec4 _2520;
    float _2522;
    float _2526;
    float _2527;
    float _2528;
    float _2529;
    bool _2539;
    for (;;)
    {
        _2498 = cbMatDynParam._m0[0u];
        float _2500 = roundEven(_2498.y);
        bool _2501 = _2500 == 3.0;
        float _2502 = log2(_2488);
        float _2509 = exp2(_2502 * cbSceneParam._m0[78u].x) * _2358;
        float _2510 = exp2(_2502 * cbSceneParam._m0[78u].y) * _2359;
        float _2511 = exp2(_2502 * cbSceneParam._m0[78u].z) * _2360;
        float _2518 = _484 + (-0.5);
        _2520 = cbMtdParam._m0[1u];
        _2522 = _2520.y * _2518;
        float _2525 = (_2500 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2526 = _2525 * (_2501 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2482)));
        _2527 = _2525 * (_2501 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2484)));
        _2528 = _2525 * (_2501 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2486)));
        _2529 = _2518 * 0.999000012874603271484375;
        _2539 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2539)
        {
            if ((cbInstanceData._m0[_535 + 7u].x + _2529) < 0.5)
            {
                _2695 = true;
                break;
            }
        }
        uint _2636 = _536 + uint(_2498.w);
        if ((cbInstanceData._m0[_2636].w < 1.0) && ((cbInstanceData._m0[_2636].w + _2529) < 0.5))
        {
            _2695 = true;
            break;
        }
        if ((_2522 + 1.0) < _2520.x)
        {
            _2695 = true;
            break;
        }
        _2695 = false;
        break;
    }
    float _2900;
    if (_2695)
    {
        discard_state = true;
        _2900 = 0.0;
    }
    else
    {
        _2900 = cbInstanceData._m0[_2361].w;
    }
    SV_Target.x = _2526;
    SV_Target.y = _2527;
    SV_Target.z = _2528;
    SV_Target.w = _2900;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2361].w;
    discard_exit();
}


