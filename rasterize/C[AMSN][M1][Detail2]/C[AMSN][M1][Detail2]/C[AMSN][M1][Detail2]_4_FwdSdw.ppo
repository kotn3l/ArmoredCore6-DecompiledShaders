#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1058;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _311 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3674 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[10u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[10u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[10u].z) - _257)) + _257;
    vec4 _345 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _374 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3685 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _382 = (_375 * ((_345.x * cbMtdParam._m0[11u].x) - _319)) + _319;
    float _383 = (_375 * ((_345.y * cbMtdParam._m0[11u].y) - _320)) + _320;
    float _384 = (_375 * ((_345.z * cbMtdParam._m0[11u].z) - _321)) + _321;
    vec4 _396 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _398 = _396.x;
    float _400 = _398 - (_398 * TEXCOORD_5.x);
    vec4 _417 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _425 = (_417.x * 2.0) + (-1.0);
    float _427 = (_417.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3696 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))));
    float _434 = _417.z * cbMtdParam._m0[13u].y;
    vec4 _447 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _461 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_447.z * cbMtdParam._m0[13u].x) - _434)) + _434;
    vec4 _475 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_475.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _502 = (((((_447.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _425) + ((((_475.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _503 = (((((_447.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _427) + ((((_475.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _506 = fma(_433, _219 * NORMAL.x, fma(_503, _226 * TANGENT.x, (_212 * _204) * _502));
    float _509 = fma(_433, _219 * NORMAL.y, fma(_503, _226 * TANGENT.y, (_212 * _205) * _502));
    float _512 = fma(_433, _219 * NORMAL.z, fma(_503, _226 * TANGENT.z, (_212 * _206) * _502));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3707 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _520 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3729 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3740 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3751 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _524 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    float _605 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _606 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _624 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _627 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _630 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _643 = uint(roundEven(NORMAL.w)) * 13u;
    uint _645 = (_643 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _651 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_645].x;
    float _652 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_645].y;
    float _653 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_645].z;
    float _3762 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _657 = 1.0 - _524;
    float _658 = _654 * _657;
    float _659 = _655 * _657;
    float _660 = _656 * _657;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _524;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _524;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _524;
    float _668 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _605, cbSceneParam._m0[86u].y * _606));
    float _683 = _680.x * TEXCOORD_5.w;
    float _684 = dot(vec3(_517, _518, _519), vec3(_597, _598, _599));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _517) - _597;
    float _692 = (_687 * _518) - _598;
    float _693 = (_687 * _519) - _599;
    float _697 = abs(dot(vec3(_597, _598, _599), vec3(_517, _518, _519)));
    float _3795 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_520);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _718 = (1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _719 = _712 * _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1057;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _782 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _786 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _790 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _815 = _747 + _517;
        float _816 = _751 + _518;
        float _817 = _755 + _519;
        float _827 = fma(_817, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815)) - _782;
        float _828 = fma(_817, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815)) - _786;
        float _829 = fma(_817, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815)) - _790;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_782 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_786 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[34u].z) + ((((((_790 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _885 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_851.x + (-0.5));
        float _887 = _885 * (_851.y + (-0.5));
        float _888 = _885 * (_851.z + (-0.5));
        float _895 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_858.x + (-0.5));
        float _897 = _895 * (_858.y + (-0.5));
        float _898 = _895 * (_858.z + (-0.5));
        float _905 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_865.x + (-0.5));
        float _907 = _905 * (_865.y + (-0.5));
        float _908 = _905 * (_865.z + (-0.5));
        float _915 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_872.x + (-0.5));
        float _917 = _915 * (_872.y + (-0.5));
        float _918 = _915 * (_872.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _939 = (dot(vec3(_517, _518, _519), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _949 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3843 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_951 + 1.0))) + _956) * _919;
        float _966 = _887 * 0.5;
        float _967 = _897 * 0.5;
        float _968 = _907 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_517, _518, _519), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3876 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_993 + 1.0))) + _998) * _920;
        float _1008 = _888 * 0.5;
        float _1009 = _898 * 0.5;
        float _1010 = _908 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_517, _518, _519), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3909 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1035 + 1.0))) + _1040) * _921;
        _1057 = _888;
        _1059 = _887;
        _1060 = _886;
        _1061 = _898;
        _1062 = _897;
        _1063 = _896;
        _1064 = _908;
        _1065 = _907;
        _1066 = _906;
        _1067 = _921;
        _1068 = _920;
        _1069 = _919;
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _1058;
        _1059 = _1058;
        _1060 = _1058;
        _1061 = _1058;
        _1062 = _1058;
        _1063 = _1058;
        _1064 = _1058;
        _1065 = _1058;
        _1066 = _1058;
        _1067 = _1058;
        _1068 = _1058;
        _1069 = _1058;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1098 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1102 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1106 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1129 = _747 + _517;
        float _1130 = _751 + _518;
        float _1131 = _755 + _519;
        float _1141 = fma(_1131, cbModelParam._m0[30u].z, fma(_1130, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1129)) - _1098;
        float _1142 = fma(_1131, cbModelParam._m0[31u].z, fma(_1130, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1129)) - _1102;
        float _1143 = fma(_1131, cbModelParam._m0[32u].z, fma(_1130, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1129)) - _1106;
        float _1147 = inversesqrt(dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143)));
        float _1160 = ((_1147 * _1141) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1098 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1147 * _1142) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1102 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1147 * _1143) / cbModelParam._m0[35u].z) + ((((((_1106 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1160, _1161, _1162), 0.0);
        float _1197 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1164.x + (-0.5));
        float _1199 = _1197 * (_1164.y + (-0.5));
        float _1200 = _1197 * (_1164.z + (-0.5));
        float _1207 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1171.x + (-0.5));
        float _1209 = _1207 * (_1171.y + (-0.5));
        float _1210 = _1207 * (_1171.z + (-0.5));
        float _1217 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1178.x + (-0.5));
        float _1219 = _1217 * (_1178.y + (-0.5));
        float _1220 = _1217 * (_1178.z + (-0.5));
        float _1227 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1185.x + (-0.5));
        float _1229 = _1227 * (_1185.y + (-0.5));
        float _1230 = _1227 * (_1185.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_517, _518, _519), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3972 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1261 + 1.0))) + _1266) * _1231;
        float _1276 = _1199 * 0.5;
        float _1277 = _1209 * 0.5;
        float _1278 = _1219 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_517, _518, _519), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4005 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1303 + 1.0))) + _1308) * _1232;
        float _1318 = _1200 * 0.5;
        float _1319 = _1210 * 0.5;
        float _1320 = _1220 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_517, _518, _519), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4038 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1345 + 1.0))) + _1350) * _1233;
        _1367 = _1200;
        _1368 = _1199;
        _1369 = _1198;
        _1370 = _1210;
        _1371 = _1209;
        _1372 = _1208;
        _1373 = _1220;
        _1374 = _1219;
        _1375 = _1218;
        _1376 = _1233;
        _1377 = _1232;
        _1378 = _1231;
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1058;
        _1368 = _1058;
        _1369 = _1058;
        _1370 = _1058;
        _1371 = _1058;
        _1372 = _1058;
        _1373 = _1058;
        _1374 = _1058;
        _1375 = _1058;
        _1376 = _1058;
        _1377 = _1058;
        _1378 = _1058;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1072)) + _1072;
    float _1414 = fma(_1393, cbSceneParam._m0[89u].z, fma(_1392, cbSceneParam._m0[89u].y, _1391 * cbSceneParam._m0[89u].x));
    float _1417 = fma(_1393, cbSceneParam._m0[90u].z, fma(_1392, cbSceneParam._m0[90u].y, _1391 * cbSceneParam._m0[90u].x));
    float _1420 = fma(_1393, cbSceneParam._m0[91u].z, fma(_1392, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1391));
    float _1435 = _691 * 0.5;
    float _1436 = _692 * 0.5;
    float _1437 = _693 * 0.5;
    float _1438 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1441 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1444 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1478;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1451 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1057, _1061, _1064, _1067));
        float _1455 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1459 = dot(vec4(_1435, _1436, _1437, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1466 = dot(vec4(cbModelParam._m0[39u]), vec4(_1435, _1436, _1437, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1489;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1480 = dot(vec4(cbModelParam._m0[40u]), vec4(_1435, _1436, _1437, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1493 = (_1489 * cbModelParam._m0[1u].x) + (_1478 * (1.0 - cbModelParam._m0[1u].x));
    float _1503 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1504 = isnan(_1503) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1503 : min(cbModelParam._m0[25u].z, _1503));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1551 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1555 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1559 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1562 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1565 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1568 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1596;
        if (_1562 > 0.0)
        {
            _1596 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1596 = frontier_phi_14_12_ladder;
        }
        float _1771;
        if (_1565 > 0.0)
        {
            _1771 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1771 = frontier_phi_23_19_ladder;
        }
        float _2066;
        if (_1568 > 0.0)
        {
            _2066 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2066 = frontier_phi_35_30_ladder;
        }
        float _2068 = isnan(_1771) ? _1596 : (isnan(_1596) ? _1771 : min(_1596, _1771));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1562) + _1551;
        float _2074 = (_2069 * _1565) + _1555;
        float _2075 = (_2069 * _1568) + _1559;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1504);
            frontier_phi_13_35_ladder = _2220.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2220.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2220.x * cbModelParam._m0[1u].y;
        }
        _1584 = frontier_phi_13_35_ladder_2;
        _1586 = frontier_phi_13_35_ladder_1;
        _1588 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1504);
        _1584 = _1572.x * cbModelParam._m0[1u].y;
        _1586 = _1572.y * cbModelParam._m0[1u].y;
        _1588 = _1572.z * cbModelParam._m0[1u].y;
    }
    float _1592 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1592 : min(cbModelParam._m0[25u].w, _1592));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1650 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1654 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1658 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1661 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1664 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1667 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1776;
        if (_1661 > 0.0)
        {
            _1776 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1776 = frontier_phi_25_21_ladder;
        }
        float _2093;
        if (_1664 > 0.0)
        {
            _2093 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2093 = frontier_phi_37_32_ladder;
        }
        float _2431;
        if (_1667 > 0.0)
        {
            _2431 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2431 = frontier_phi_47_44_ladder;
        }
        float _2433 = isnan(_2093) ? _1776 : (isnan(_1776) ? _2093 : min(_1776, _2093));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1661) + _1650;
        float _2439 = (_2434 * _1664) + _1654;
        float _2440 = (_2434 * _1667) + _1658;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1593);
            frontier_phi_22_47_ladder = _2562.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2562.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2562.x * cbModelParam._m0[1u].z;
        }
        _1686 = frontier_phi_22_47_ladder_2;
        _1688 = frontier_phi_22_47_ladder_1;
        _1690 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1593);
        _1686 = _1670.x * cbModelParam._m0[1u].z;
        _1688 = _1670.y * cbModelParam._m0[1u].z;
        _1690 = _1670.z * cbModelParam._m0[1u].z;
    }
    float _1703 = (((_718 * _668) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1705 = (((_718 * _670) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1688 - _1586)) + _1586);
    float _1707 = (((_718 * _671) + _719) * _683) * ((cbModelParam._m0[1u].w * (_1690 - _1588)) + _1588);
    float _1710 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, _1703 * cbSceneParam._m0[91u].x));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1763 = _1750 / _1762;
    float _1764 = _1754 / _1762;
    float _1765 = _1758 / _1762;
    float _1912;
    float _1913;
    float _1914;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1792 = ((uint(_1765 > cbSceneParam._m0[59u].y) + uint(_1765 > cbSceneParam._m0[59u].x)) + uint(_1765 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1793 = _1792 + 43u;
        uint _1801 = _1792 + 44u;
        uint _1809 = _1792 + 45u;
        uint _1817 = _1792 + 46u;
        float _1828 = fma(_1762, cbSceneParam._m0[_1793].w, fma(_1758, cbSceneParam._m0[_1793].z, fma(_1754, cbSceneParam._m0[_1793].y, _1750 * cbSceneParam._m0[_1793].x)));
        float _1832 = fma(_1762, cbSceneParam._m0[_1801].w, fma(_1758, cbSceneParam._m0[_1801].z, fma(_1754, cbSceneParam._m0[_1801].y, _1750 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1762, cbSceneParam._m0[_1817].w, fma(_1758, cbSceneParam._m0[_1817].z, fma(_1754, cbSceneParam._m0[_1817].y, _1750 * cbSceneParam._m0[_1817].x)));
        float _1845 = cbSceneParam._m0[33u].z * _1840;
        float _1847 = cbSceneParam._m0[33u].w * _1840;
        float _1850 = fma(_1762, cbSceneParam._m0[_1809].w, fma(_1758, cbSceneParam._m0[_1809].z, fma(_1754, cbSceneParam._m0[_1809].y, _1750 * cbSceneParam._m0[_1809].x))) / _1840;
        float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
        float _4164 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1905 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1828) / _1840, (_1847 + _1832) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1828) / _1840, (_1832 - _1845) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1845) / _1840, (_1832 - _1847) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1847) / _1840, (_1845 + _1832) / _1840), _1850), 0.0)).x), vec4(0.25)));
        _1912 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
        _1913 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
        _1914 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1912 = 1.0;
        _1913 = 1.0;
        _1914 = 1.0;
    }
    float _1978;
    float _1980;
    float _1982;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1966 = fma(_1762, cbSceneParam._m0[63u].w, fma(_1758, cbSceneParam._m0[63u].z, fma(_1754, cbSceneParam._m0[63u].y, _1750 * cbSceneParam._m0[63u].x)));
        float _1967 = fma(_1762, cbSceneParam._m0[60u].w, fma(_1758, cbSceneParam._m0[60u].z, fma(_1754, cbSceneParam._m0[60u].y, _1750 * cbSceneParam._m0[60u].x))) / _1966;
        float _1968 = fma(_1762, cbSceneParam._m0[61u].w, fma(_1758, cbSceneParam._m0[61u].z, fma(_1754, cbSceneParam._m0[61u].y, _1750 * cbSceneParam._m0[61u].x))) / _1966;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1967 >= cbSceneParam._m0[64u].x) && (_1968 >= cbSceneParam._m0[64u].y)) && (_1967 <= cbSceneParam._m0[64u].z)) && (_1968 <= cbSceneParam._m0[64u].w))
        {
            float _2106 = fma(_1762, cbSceneParam._m0[62u].w, fma(_1758, cbSceneParam._m0[62u].z, fma(_1754, cbSceneParam._m0[62u].y, _1750 * cbSceneParam._m0[62u].x))) / _1966;
            float _2110 = isnan(cbSceneParam._m0[41u].w) ? _2106 : (isnan(_2106) ? cbSceneParam._m0[41u].w : max(_2106, cbSceneParam._m0[41u].w));
            float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
            float _4180 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
            float _2160 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1967, cbSceneParam._m0[33u].w + _1968), _2110), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1967, _1968 - cbSceneParam._m0[33u].z), _2110), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].z, _1968 - cbSceneParam._m0[33u].w), _2110), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1968), _2110), 0.0)).x), vec4(0.25)));
            float _2164 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
            float _2165 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
            float _2166 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2166) ? _1914 : (isnan(_1914) ? _2166 : min(_1914, _2166));
            frontier_phi_34_33_ladder_1 = isnan(_2165) ? _1913 : (isnan(_1913) ? _2165 : min(_1913, _2165));
            frontier_phi_34_33_ladder_2 = isnan(_2164) ? _1912 : (isnan(_1912) ? _2164 : min(_1912, _2164));
        }
        else
        {
            frontier_phi_34_33_ladder = _1914;
            frontier_phi_34_33_ladder_1 = _1913;
            frontier_phi_34_33_ladder_2 = _1912;
        }
        _1978 = frontier_phi_34_33_ladder_2;
        _1980 = frontier_phi_34_33_ladder_1;
        _1982 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1978 = _1912;
        _1980 = _1913;
        _1982 = _1914;
    }
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_643 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _683 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2025 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2029 = _1989 | 1u;
    float _2040 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_517, _518, _519));
    float _2043 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_517, _518, _519));
    float _4216 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _4227 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2048 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2050 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2057 = ((cbLight._m0[_2006].x * _2012) * _2050) + (((cbLight._m0[_2016].x * _1978) * _2025) * _2048);
    float _2058 = ((_2012 * cbLight._m0[_2006].y) * _2050) + (((cbLight._m0[_2016].y * _1980) * _2025) * _2048);
    float _2059 = ((_2012 * cbLight._m0[_2006].z) * _2050) + (((cbLight._m0[_2016].z * _1982) * _2025) * _2048);
    uvec4 _2063 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2065 = _2063.x == 0u;
    float _2167;
    float _2169;
    float _2171;
    if (_2065)
    {
        _2167 = _2057;
        _2169 = _2058;
        _2171 = _2059;
    }
    else
    {
        uint _2175 = _1989 + 6u;
        float _2191 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2192 = _2191 * _2191;
        float _4238 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2194 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2167 = (((cbLight._m0[_2175].x * 0.3183098733425140380859375) * _2193) * _2194) + _2057;
        _2169 = (((cbLight._m0[_2175].y * 0.3183098733425140380859375) * _2193) * _2194) + _2058;
        _2171 = (((cbLight._m0[_2175].z * 0.3183098733425140380859375) * _2193) * _2194) + _2059;
    }
    bool _2174 = _2063.y == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2174)
    {
        _2229 = _2167;
        _2231 = _2169;
        _2233 = _2171;
    }
    else
    {
        uint _2402 = _1989 + 7u;
        float _2418 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4254 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2421 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2229 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2167;
        _2231 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2169;
        _2233 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2171;
    }
    uint _2236 = _1989 + 8u;
    float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _520) * 0.949999988079071044921875);
    float _2250 = _2249 * _2249;
    float _2251 = cbLight._m0[_1989].x + _597;
    float _2252 = cbLight._m0[_1989].y + _598;
    float _2253 = cbLight._m0[_1989].z + _599;
    float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
    float _2258 = _2257 * _2251;
    float _2259 = _2257 * _2252;
    float _2260 = _2257 * _2253;
    float _2261 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1989].xyz));
    float _4270 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2265 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2266 = dot(vec3(_517, _518, _519), vec3(_2258, _2259, _2260));
    float _4292 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2258, _2259, _2260));
    float _4303 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2250 * _2250;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0);
    float _2287 = 0.959999978542327880859375 - _665;
    float _2289 = 0.959999978542327880859375 - _666;
    float _2290 = 0.959999978542327880859375 - _667;
    float _2297 = 1.0 - _2250;
    float _2308 = (0.5 / (((_2265 * ((_2264 * _2297) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2297) + _2250) * _2264))) * _2264;
    float _4314 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    uint _2324 = _1989 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _520) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2029].x + _597;
    float _2338 = cbLight._m0[_2029].y + _598;
    float _2339 = cbLight._m0[_2029].z + _599;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2029].xyz));
    float _4325 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2351 = dot(vec3(_517, _518, _519), vec3(_2344, _2345, _2346));
    float _4336 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2344, _2345, _2346));
    float _4347 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0);
    float _2377 = 1.0 - _2336;
    float _2387 = (0.5 / (((_2265 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2377) + _2336) * _2350))) * _2350;
    float _4358 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2399 = (((((_2370 * _2287) + _668) * cbLight._m0[_2324].x) * _2389) * _2012) + ((((cbLight._m0[_2236].x * _1978) * ((_2286 * _2287) + _668)) * _2310) * _2025);
    float _2400 = (((((_2370 * _2289) + _670) * cbLight._m0[_2324].y) * _2389) * _2012) + ((((cbLight._m0[_2236].y * _1980) * ((_2286 * _2289) + _670)) * _2310) * _2025);
    float _2401 = (((((_2370 * _2290) + _671) * cbLight._m0[_2324].z) * _2389) * _2012) + ((((cbLight._m0[_2236].z * _1982) * ((_2286 * _2290) + _671)) * _2310) * _2025);
    float _2457;
    float _2459;
    float _2461;
    if (_2065)
    {
        _2457 = _2399;
        _2459 = _2400;
        _2461 = _2401;
    }
    else
    {
        uint _2463 = _1989 + 2u;
        uint _2467 = _1989 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _520) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _597;
        float _2484 = cbLight._m0[_2463].y + _598;
        float _2485 = cbLight._m0[_2463].z + _599;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2463].xyz));
        float _4369 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2497 = dot(vec3(_517, _518, _519), vec3(_2490, _2491, _2492));
        float _4380 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4391 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2265 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2523) + _2482) * _2496))) * _2496;
        float _4402 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2457 = (((((_2516 * _2287) + _668) * cbLight._m0[_2467].x) * _2535) * _2536) + _2399;
        _2459 = (((((_2516 * _2289) + _670) * cbLight._m0[_2467].y) * _2535) * _2536) + _2400;
        _2461 = (((((_2516 * _2290) + _671) * cbLight._m0[_2467].z) * _2535) * _2536) + _2401;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2174)
    {
        _2567 = _2457;
        _2569 = _2459;
        _2571 = _2461;
    }
    else
    {
        uint _2578 = _1989 + 3u;
        uint _2582 = _1989 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _520) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _597;
        float _2599 = cbLight._m0[_2578].y + _598;
        float _2600 = cbLight._m0[_2578].z + _599;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2578].xyz));
        float _4418 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2612 = dot(vec3(_517, _518, _519), vec3(_2605, _2606, _2607));
        float _4429 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4440 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2265 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2265 * _2638) + _2597) * _2611))) * _2611;
        float _4451 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2567 = (((((_2631 * _2287) + _668) * cbLight._m0[_2582].x) * _2650) * _2651) + _2457;
        _2569 = (((((_2631 * _2289) + _670) * cbLight._m0[_2582].y) * _2650) * _2651) + _2459;
        _2571 = (((((_2631 * _2290) + _671) * cbLight._m0[_2582].z) * _2650) * _2651) + _2461;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_1987.y == 0u)
    {
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _606) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _605) / _2673)));
        float _2694 = (log2(_1765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2945)
                {
                    frontier_phi_66_pred = _2934;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _1763;
                        float _3120 = _3079.y - _1764;
                        float _3121 = _3079.z - _1765;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_624, _627, _630), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4477 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _1763;
                        float _3155 = (-0.0) - _1764;
                        float _3156 = (-0.0) - _1765;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3170 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _699;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_624, _627, _630), vec3(_3161, _3162, _3163));
                        float _4493 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3195 = dot(vec3(_624, _627, _630), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4504 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3139 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3129) + _3204;
                        float _4515 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4526 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3202 * _3202) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3150 * _3098.x) + _3056;
                        _2989 = (_3150 * _3098.y) + _3057;
                        _2990 = (_3150 * _3098.z) + _3058;
                        _2985 = (_3230 * _3115.x) + _3053;
                        _2986 = (_3230 * _3115.y) + _3054;
                        _2987 = (_3230 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                _2795 = frontier_phi_66_pred;
                _2793 = frontier_phi_66_pred_1;
                _2791 = frontier_phi_66_pred_2;
                _2789 = frontier_phi_66_pred_3;
                _2787 = frontier_phi_66_pred_4;
                _2785 = frontier_phi_66_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2785;
                    _2930 = _2787;
                    _2931 = _2789;
                    _2932 = _2791;
                    _2933 = _2793;
                    _2934 = _2795;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2801) & _2704) == 0u)
        {
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
            float _2923 = _2922 * _1763;
            float _2924 = _2922 * _1764;
            float _2925 = _2922 * _1765;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2784;
                float _3037 = _2786;
                float _3038 = _2788;
                float _3039 = _2790;
                float _3040 = _2792;
                float _3041 = _2794;
                uint _3042 = _2801;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3052)
                    {
                        frontier_phi_72_pred = _3041;
                        frontier_phi_72_pred_1 = _3040;
                        frontier_phi_72_pred_2 = _3039;
                        frontier_phi_72_pred_3 = _3038;
                        frontier_phi_72_pred_4 = _3037;
                        frontier_phi_72_pred_5 = _3036;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        uint _3254 = _3051;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3265 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3311 = (_3265 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3265 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3265 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3265 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1765, _3375.z, fma(_1764, _3375.y, _3375.x * _1763)) + _3375.w;
                            _3388 = !((fma(_1765, _3356.z, fma(_1764, _3356.y, _3356.x * _1763)) + _3356.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3280.x - _1763;
                                float _3416 = _3280.y - _1764;
                                float _3417 = _3280.z - _1765;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3281 * _3281));
                                float _4537 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3433 = sqrt(_3418) * _3296.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_624, _627, _630))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_1765, _3324.z, fma(_1764, _3324.y, _3324.x * _1763)) + _3324.w) / _3387;
                                float _3447 = (fma(_1765, _3340.z, fma(_1764, _3340.y, _3340.x * _1763)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4553 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _699;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2923;
                                float _3477 = _3423 - _2924;
                                float _3478 = _3424 - _2925;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_624, _627, _630), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4564 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3490 = dot(vec3(_624, _627, _630), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4575 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_624, _627, _630), vec3(_3422, _3423, _3424))) + _3499;
                                float _4586 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4597 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3453 * _3296.y;
                                frontier_phi_78_pred_1 = _3453 * _3296.x;
                                frontier_phi_78_pred_2 = _3527 * _3308.z;
                                frontier_phi_78_pred_3 = _3527 * _3308.y;
                                frontier_phi_78_pred_4 = _3527 * _3308.x;
                                frontier_phi_78_pred_5 = _3453 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_78_pred;
                            _3534 = frontier_phi_78_pred_1;
                            _3533 = frontier_phi_78_pred_2;
                            _3532 = frontier_phi_78_pred_3;
                            _3531 = frontier_phi_78_pred_4;
                            _3536 = frontier_phi_78_pred_5;
                            _3238 = _3534 + _3251;
                            _3239 = _3535 + _3252;
                            _3240 = _3536 + _3253;
                            _3235 = _3531 + _3248;
                            _3236 = _3532 + _3249;
                            _3237 = _3533 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3240;
                        frontier_phi_72_pred_1 = _3239;
                        frontier_phi_72_pred_2 = _3238;
                        frontier_phi_72_pred_3 = _3237;
                        frontier_phi_72_pred_4 = _3236;
                        frontier_phi_72_pred_5 = _3235;
                    }
                    _2908 = frontier_phi_72_pred;
                    _2906 = frontier_phi_72_pred_1;
                    _2904 = frontier_phi_72_pred_2;
                    _2902 = frontier_phi_72_pred_3;
                    _2900 = frontier_phi_72_pred_4;
                    _2898 = frontier_phi_72_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2908;
                frontier_phi_60_61_ladder_1 = _2906;
                frontier_phi_60_61_ladder_2 = _2902;
                frontier_phi_60_61_ladder_3 = _2900;
                frontier_phi_60_61_ladder_4 = _2898;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_60_61_ladder = _2794;
                frontier_phi_60_61_ladder_1 = _2792;
                frontier_phi_60_61_ladder_2 = _2788;
                frontier_phi_60_61_ladder_3 = _2786;
                frontier_phi_60_61_ladder_4 = _2784;
                frontier_phi_60_61_ladder_5 = _2790;
            }
            _2897 = frontier_phi_60_61_ladder_4;
            _2899 = frontier_phi_60_61_ladder_3;
            _2901 = frontier_phi_60_61_ladder_2;
            _2903 = frontier_phi_60_61_ladder_5;
            _2905 = frontier_phi_60_61_ladder_1;
            _2907 = frontier_phi_60_61_ladder;
        }
        float _2912 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2717 = (_2912 * _2903) + _2229;
        _2719 = (_2912 * _2905) + _2231;
        _2721 = (_2912 * _2907) + _2233;
        _2723 = ((_2897 * _668) * _2912) + _2567;
        _2725 = ((_2899 * _670) * _2912) + _2569;
        _2727 = ((_2901 * _671) * _2912) + _2571;
    }
    else
    {
        _2717 = _2229;
        _2719 = _2231;
        _2721 = _2233;
        _2723 = _2567;
        _2725 = _2569;
        _2727 = _2571;
    }
    float _4613 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4624 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4635 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    uint _2747 = _643 + 6u;
    float _2755 = _605 / cbSceneParam._m0[86u].x;
    float _2756 = _606 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2810 = _2809 / _540;
        float _2821 = _2810 * _590;
        float _2822 = _591 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2825 = _2810 * _592;
        float _2827 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2822;
        float _2835 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2823 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2960 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2835 / _2823) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2845 * _2969) - exp2(_2845 * _2970)) * _2958))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2775);
        _2847 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2849 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2851 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2853 = _3009 * _2775;
    }
    else
    {
        _2847 = _2772;
        _2849 = _2773;
        _2851 = _2774;
        _2853 = _2775;
    }
    float _2865 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2866 = _2865 == 3.0;
    float _2867 = log2(_2853);
    float _2874 = exp2(_2867 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2717 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _683))) + ((_2723 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2867 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2719 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _683))) + ((_2725 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2876 = exp2(_2867 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2721 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _683))) + ((_2727 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1493)) * cbPerFrame._m0[3u].x));
    float _2885 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2885 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.y = _2885 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.z = _2885 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.w = cbInstanceData._m0[_2747].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
}


