#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _854;
float _3506;
float _3507;
float _3508;
float _3509;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _262 = (_254.x * 2.0) + (-1.0);
    float _264 = (_254.y * 2.0) + (-1.0);
    float _265 = dot(vec2(_262, _264), vec2(_262, _264));
    float _3518 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _272 = _254.z * cbMtdParam._m0[13u].y;
    float _275 = fma(_271, _199 * NORMAL.x, fma(_264, _206 * TANGENT.x, (_192 * _184) * _262));
    float _278 = fma(_271, _199 * NORMAL.y, fma(_264, _206 * TANGENT.y, (_192 * _185) * _262));
    float _281 = fma(_271, _199 * NORMAL.z, fma(_264, _206 * TANGENT.z, (_192 * _186) * _262));
    float _285 = inversesqrt(dot(vec3(_275, _278, _281), vec3(_275, _278, _281)));
    float _286 = _285 * _275;
    float _287 = _285 * _278;
    float _288 = _285 * _281;
    float _3529 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _289 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3551 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3562 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _361 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _351);
    float _362 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _351);
    float _363 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _351);
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _361 * _367;
    float _369 = _362 * _367;
    float _370 = _363 * _367;
    vec4 _375 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _377 = _375.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _533 = sqrt(((_361 * _361) + (_362 * _362)) + (_363 * _363));
        float _539 = (cbMatDynParam._m0[5u].x * _533) + cbMatDynParam._m0[5u].y;
        float _3573 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
        float _540 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _544 = (cbMatDynParam._m0[5u].z * _533) + cbMatDynParam._m0[5u].w;
        float _3584 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) - _540)) + _540) < ((_377 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_288, cbSceneParam._m0[5u].z, fma(_287, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _286));
    float _412 = fma(_288, cbSceneParam._m0[6u].z, fma(_287, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _286));
    float _415 = fma(_288, cbSceneParam._m0[7u].z, fma(_287, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _286));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = _428 + 9u;
    uint _430 = _429 + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3595 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    vec4 _450 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _453 = _450.x * TEXCOORD_5.w;
    float _454 = dot(vec3(_286, _287, _288), vec3(_368, _369, _370));
    float _457 = _454 * 2.0;
    float _461 = (_457 * _286) - _368;
    float _462 = (_457 * _287) - _369;
    float _463 = (_457 * _288) - _370;
    float _467 = abs(dot(vec3(_368, _369, _370), vec3(_286, _287, _288)));
    float _3628 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _469 = sqrt(_289);
    float _482 = exp2((_469 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_469 * 3.0));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_522, cbModelParam._m0[26u].z, fma(_518, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _514));
        float _582 = fma(_522, cbModelParam._m0[27u].z, fma(_518, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _514));
        float _586 = fma(_522, cbModelParam._m0[28u].z, fma(_518, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _514));
        float _611 = _514 + _286;
        float _612 = _518 + _287;
        float _613 = _522 + _288;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_286, _287, _288), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3676 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_286, _287, _288), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3709 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_286, _287, _288), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3742 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_522, cbModelParam._m0[30u].z, fma(_518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _514));
        float _901 = fma(_522, cbModelParam._m0[31u].z, fma(_518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _514));
        float _905 = fma(_522, cbModelParam._m0[32u].z, fma(_518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _514));
        float _928 = _514 + _286;
        float _929 = _518 + _287;
        float _930 = _522 + _288;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_286, _287, _288), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3805 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_286, _287, _288), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3838 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_286, _287, _288), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3871 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = _854;
        _1176 = _854;
        _1177 = _854;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _461 * 0.5;
    float _1235 = _462 * 0.5;
    float _1236 = _463 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_853, _857, _860, _863));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_855, _858, _861, _864));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _859, _862, _865));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _289);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1384;
    float _1386;
    float _1388;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1351 = fma(_522, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514)) + cbModelParam._m0[13u].w;
        float _1355 = fma(_522, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514)) + cbModelParam._m0[14u].w;
        float _1359 = fma(_522, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514)) + cbModelParam._m0[15u].w;
        float _1362 = fma(_463, cbModelParam._m0[13u].z, fma(_462, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461));
        float _1365 = fma(_463, cbModelParam._m0[14u].z, fma(_462, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461));
        float _1368 = fma(_463, cbModelParam._m0[15u].z, fma(_462, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461));
        float _1396;
        if (_1362 > 0.0)
        {
            _1396 = abs((1.0 - _1351) / _1362);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1351 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1396 = frontier_phi_17_15_ladder;
        }
        float _1570;
        if (_1365 > 0.0)
        {
            _1570 = abs((1.0 - _1355) / _1365);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1355 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1570 = frontier_phi_26_22_ladder;
        }
        float _1866;
        if (_1368 > 0.0)
        {
            _1866 = abs((1.0 - _1359) / _1368);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1359 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1866 = frontier_phi_38_33_ladder;
        }
        float _1868 = isnan(_1570) ? _1396 : (isnan(_1396) ? _1570 : min(_1396, _1570));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1362) + _1351;
        float _1874 = (_1869 * _1365) + _1355;
        float _1875 = (_1869 * _1368) + _1359;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1876;
        float _1880 = _1876 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 > _1880) || ((_1874 < _1878) || ((_1873 < _1878) || (_1873 > _1880))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1875, cbModelParam._m0[9u].z, fma(_1874, cbModelParam._m0[9u].y, _1873 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1875, cbModelParam._m0[10u].z, fma(_1874, cbModelParam._m0[10u].y, _1873 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1875, cbModelParam._m0[11u].z, fma(_1874, cbModelParam._m0[11u].y, _1873 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_16_38_ladder = _2020.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2020.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2020.x * cbModelParam._m0[1u].y;
        }
        _1384 = frontier_phi_16_38_ladder_2;
        _1386 = frontier_phi_16_38_ladder_1;
        _1388 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1372 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_461, _462, _463), _1303);
        _1384 = _1372.x * cbModelParam._m0[1u].y;
        _1386 = _1372.y * cbModelParam._m0[1u].y;
        _1388 = _1372.z * cbModelParam._m0[1u].y;
    }
    float _1392 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _289);
    float _1393 = isnan(_1392) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1392 : min(cbModelParam._m0[25u].w, _1392));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1450 = fma(_522, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514)) + cbModelParam._m0[21u].w;
        float _1454 = fma(_522, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514)) + cbModelParam._m0[22u].w;
        float _1458 = fma(_522, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514)) + cbModelParam._m0[23u].w;
        float _1461 = fma(_463, cbModelParam._m0[21u].z, fma(_462, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461));
        float _1464 = fma(_463, cbModelParam._m0[22u].z, fma(_462, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461));
        float _1467 = fma(_463, cbModelParam._m0[23u].z, fma(_462, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461));
        float _1575;
        if (_1461 > 0.0)
        {
            _1575 = abs((1.0 - _1450) / _1461);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1450 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1575 = frontier_phi_28_24_ladder;
        }
        float _1893;
        if (_1464 > 0.0)
        {
            _1893 = abs((1.0 - _1454) / _1464);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1454 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1893 = frontier_phi_40_35_ladder;
        }
        float _2220;
        if (_1467 > 0.0)
        {
            _2220 = abs((1.0 - _1458) / _1467);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1458 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2220 = frontier_phi_50_47_ladder;
        }
        float _2222 = isnan(_1893) ? _1575 : (isnan(_1575) ? _1893 : min(_1575, _1893));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1461) + _1450;
        float _2228 = (_2223 * _1464) + _1454;
        float _2229 = (_2223 * _1467) + _1458;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2230;
        float _2233 = _2230 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2229 > _2233) || ((_2229 < _2231) || ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 < _2231) || (_2227 > _2233))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2229, cbModelParam._m0[17u].z, fma(_2228, cbModelParam._m0[17u].y, _2227 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2229, cbModelParam._m0[18u].z, fma(_2228, cbModelParam._m0[18u].y, _2227 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2229, cbModelParam._m0[19u].z, fma(_2228, cbModelParam._m0[19u].y, _2227 * cbModelParam._m0[19u].x))), _1393);
            frontier_phi_25_50_ladder = _2347.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2347.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2347.x * cbModelParam._m0[1u].z;
        }
        _1486 = frontier_phi_25_50_ladder_2;
        _1488 = frontier_phi_25_50_ladder_1;
        _1490 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_461, _462, _463), _1393);
        _1486 = _1470.x * cbModelParam._m0[1u].z;
        _1488 = _1470.y * cbModelParam._m0[1u].z;
        _1490 = _1470.z * cbModelParam._m0[1u].z;
    }
    float _1502 = ((((1.0 - _482) * ((_469 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_482 * _469)) * _453;
    float _1503 = _1502 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1504 = _1502 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1505 = _1502 * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1508 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1511 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1514 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1503 * cbSceneParam._m0[91u].x));
    float _1549 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1557 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1561 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1562 = _1549 / _1561;
    float _1563 = _1553 / _1561;
    float _1564 = _1557 / _1561;
    float _1711;
    float _1712;
    float _1713;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1591 = ((uint(_1564 > cbSceneParam._m0[59u].y) + uint(_1564 > cbSceneParam._m0[59u].x)) + uint(_1564 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1592 = _1591 + 43u;
        uint _1600 = _1591 + 44u;
        uint _1608 = _1591 + 45u;
        uint _1616 = _1591 + 46u;
        float _1627 = fma(_1561, cbSceneParam._m0[_1592].w, fma(_1557, cbSceneParam._m0[_1592].z, fma(_1553, cbSceneParam._m0[_1592].y, _1549 * cbSceneParam._m0[_1592].x)));
        float _1631 = fma(_1561, cbSceneParam._m0[_1600].w, fma(_1557, cbSceneParam._m0[_1600].z, fma(_1553, cbSceneParam._m0[_1600].y, _1549 * cbSceneParam._m0[_1600].x)));
        float _1639 = fma(_1561, cbSceneParam._m0[_1616].w, fma(_1557, cbSceneParam._m0[_1616].z, fma(_1553, cbSceneParam._m0[_1616].y, _1549 * cbSceneParam._m0[_1616].x)));
        float _1644 = cbSceneParam._m0[33u].z * _1639;
        float _1646 = cbSceneParam._m0[33u].w * _1639;
        float _1649 = fma(_1561, cbSceneParam._m0[_1608].w, fma(_1557, cbSceneParam._m0[_1608].z, fma(_1553, cbSceneParam._m0[_1608].y, _1549 * cbSceneParam._m0[_1608].x))) / _1639;
        float _1697 = (cbSceneParam._m0[33u].x - sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564))) * cbSceneParam._m0[33u].y;
        float _3997 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1704 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1644 + _1627) / _1639, (_1646 + _1631) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1646 + _1627) / _1639, (_1631 - _1644) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 - _1644) / _1639, (_1631 - _1646) / _1639), _1649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1627 - _1646) / _1639, (_1644 + _1631) / _1639), _1649), 0.0)).x), vec4(0.25)));
        _1711 = 1.0 - (_1704 * cbSceneParam._m0[34u].x);
        _1712 = 1.0 - (_1704 * cbSceneParam._m0[34u].y);
        _1713 = 1.0 - (_1704 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1711 = 1.0;
        _1712 = 1.0;
        _1713 = 1.0;
    }
    float _1777;
    float _1779;
    float _1781;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1765 = fma(_1561, cbSceneParam._m0[63u].w, fma(_1557, cbSceneParam._m0[63u].z, fma(_1553, cbSceneParam._m0[63u].y, _1549 * cbSceneParam._m0[63u].x)));
        float _1766 = fma(_1561, cbSceneParam._m0[60u].w, fma(_1557, cbSceneParam._m0[60u].z, fma(_1553, cbSceneParam._m0[60u].y, _1549 * cbSceneParam._m0[60u].x))) / _1765;
        float _1767 = fma(_1561, cbSceneParam._m0[61u].w, fma(_1557, cbSceneParam._m0[61u].z, fma(_1553, cbSceneParam._m0[61u].y, _1549 * cbSceneParam._m0[61u].x))) / _1765;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1766 >= cbSceneParam._m0[64u].x) && (_1767 >= cbSceneParam._m0[64u].y)) && (_1766 <= cbSceneParam._m0[64u].z)) && (_1767 <= cbSceneParam._m0[64u].w))
        {
            float _1906 = fma(_1561, cbSceneParam._m0[62u].w, fma(_1557, cbSceneParam._m0[62u].z, fma(_1553, cbSceneParam._m0[62u].y, _1549 * cbSceneParam._m0[62u].x))) / _1765;
            float _1910 = isnan(cbSceneParam._m0[41u].w) ? _1906 : (isnan(_1906) ? cbSceneParam._m0[41u].w : max(_1906, cbSceneParam._m0[41u].w));
            float _1953 = (cbSceneParam._m0[33u].x - sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564))) * cbSceneParam._m0[33u].y;
            float _4013 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
            float _1960 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1766, cbSceneParam._m0[33u].w + _1767), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1766, _1767 - cbSceneParam._m0[33u].z), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1766 - cbSceneParam._m0[33u].z, _1767 - cbSceneParam._m0[33u].w), _1910), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1766 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1767), _1910), 0.0)).x), vec4(0.25)));
            float _1964 = 1.0 - (_1960 * cbSceneParam._m0[34u].x);
            float _1965 = 1.0 - (_1960 * cbSceneParam._m0[34u].y);
            float _1966 = 1.0 - (_1960 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1966) ? _1713 : (isnan(_1713) ? _1966 : min(_1713, _1966));
            frontier_phi_37_36_ladder_1 = isnan(_1965) ? _1712 : (isnan(_1712) ? _1965 : min(_1712, _1965));
            frontier_phi_37_36_ladder_2 = isnan(_1964) ? _1711 : (isnan(_1711) ? _1964 : min(_1711, _1964));
        }
        else
        {
            frontier_phi_37_36_ladder = _1713;
            frontier_phi_37_36_ladder_1 = _1712;
            frontier_phi_37_36_ladder_2 = _1711;
        }
        _1777 = frontier_phi_37_36_ladder_2;
        _1779 = frontier_phi_37_36_ladder_1;
        _1781 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1777 = _1711;
        _1779 = _1712;
        _1781 = _1713;
    }
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1796 = _453 + (-1.0);
    float _1801 = (cbLight._m0[_1789].x * _1796) + 1.0;
    float _1802 = (cbLight._m0[_1789].y * _1796) + 1.0;
    float _1803 = (cbLight._m0[_1789].z * _1796) + 1.0;
    float _1804 = (cbLight._m0[_1789].w * _1796) + 1.0;
    uint _1805 = _1788 + 5u;
    float _1811 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1815 = _1788 + 4u;
    float _1825 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1829 = _1788 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_286, _287, _288));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_286, _287, _288));
    float _4049 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _4060 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1805].x * _1811) * _1850) + (((cbLight._m0[_1815].x * _1777) * _1825) * _1848);
    float _1858 = ((_1811 * cbLight._m0[_1805].y) * _1850) + (((cbLight._m0[_1815].y * _1779) * _1825) * _1848);
    float _1859 = ((_1811 * cbLight._m0[_1805].z) * _1850) + (((cbLight._m0[_1815].z * _1781) * _1825) * _1848);
    uvec4 _1863 = floatBitsToUint(cbLight._m0[_1788 + 12u]);
    bool _1865 = _1863.x == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1865)
    {
        _1967 = _1857;
        _1969 = _1858;
        _1971 = _1859;
    }
    else
    {
        uint _1975 = _1788 + 6u;
        float _1991 = (dot(vec3(cbLight._m0[_1788 + 2u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4071 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1994 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1967 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1857;
        _1969 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1858;
        _1971 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1859;
    }
    bool _1974 = _1863.y == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1974)
    {
        _2029 = _1967;
        _2031 = _1969;
        _2033 = _1971;
    }
    else
    {
        uint _2191 = _1788 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1788 + 3u].xyz), vec3(_286, _287, _288)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4087 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2210 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2029 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1967;
        _2031 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1969;
        _2033 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1971;
    }
    uint _2036 = _1788 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _289) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1788].x + _368;
    float _2052 = cbLight._m0[_1788].y + _369;
    float _2053 = cbLight._m0[_1788].z + _370;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1788].xyz));
    float _4103 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2065 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2066 = dot(vec3(_286, _287, _288), vec3(_2058, _2059, _2060));
    float _4125 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_2058, _2059, _2060));
    float _4136 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2050;
    float _2101 = (0.5 / (((_2065 * ((_2064 * _2090) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2090) + _2050) * _2064))) * _2064;
    float _4147 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2117 = _1788 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _289) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1829].x + _368;
    float _2131 = cbLight._m0[_1829].y + _369;
    float _2132 = cbLight._m0[_1829].z + _370;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_1829].xyz));
    float _4158 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2144 = dot(vec3(_286, _287, _288), vec3(_2137, _2138, _2139));
    float _4169 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2137, _2138, _2139));
    float _4180 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2129;
    float _2176 = (0.5 / (((_2065 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2166) + _2129) * _2143))) * _2143;
    float _4191 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2188 = (((_2165 * cbLight._m0[_2117].x) * _2178) * _1811) + ((((cbLight._m0[_2036].x * _1777) * _2089) * _2103) * _1825);
    float _2189 = (((_2165 * cbLight._m0[_2117].y) * _2178) * _1811) + ((((cbLight._m0[_2036].y * _1779) * _2089) * _2103) * _1825);
    float _2190 = (((_2165 * cbLight._m0[_2117].z) * _2178) * _1811) + ((((cbLight._m0[_2036].z * _1781) * _2089) * _2103) * _1825);
    float _2246;
    float _2248;
    float _2250;
    if (_1865)
    {
        _2246 = _2188;
        _2248 = _2189;
        _2250 = _2190;
    }
    else
    {
        uint _2252 = _1788 + 2u;
        uint _2256 = _1788 + 10u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _289) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _368;
        float _2273 = cbLight._m0[_2252].y + _369;
        float _2274 = cbLight._m0[_2252].z + _370;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2252].xyz));
        float _4202 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2286 = dot(vec3(_286, _287, _288), vec3(_2279, _2280, _2281));
        float _4213 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4224 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2308 = 1.0 - _2271;
        float _2318 = (0.5 / (((_2065 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2308) + _2271) * _2285))) * _2285;
        float _4235 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2246 = (((_2307 * cbLight._m0[_2256].x) * _2320) * _2321) + _2188;
        _2248 = (((_2307 * cbLight._m0[_2256].y) * _2320) * _2321) + _2189;
        _2250 = (((_2307 * cbLight._m0[_2256].z) * _2320) * _2321) + _2190;
    }
    float _2352;
    float _2354;
    float _2356;
    if (_1974)
    {
        _2352 = _2246;
        _2354 = _2248;
        _2356 = _2250;
    }
    else
    {
        uint _2363 = _1788 + 3u;
        uint _2367 = _1788 + 11u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _289) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _368;
        float _2384 = cbLight._m0[_2363].y + _369;
        float _2385 = cbLight._m0[_2363].z + _370;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_286, _287, _288), vec3(cbLight._m0[_2363].xyz));
        float _4251 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2397 = dot(vec3(_286, _287, _288), vec3(_2390, _2391, _2392));
        float _4262 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4273 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2419 = 1.0 - _2382;
        float _2429 = (0.5 / (((_2065 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2419) + _2382) * _2396))) * _2396;
        float _4284 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2352 = (((_2418 * cbLight._m0[_2367].x) * _2431) * _2432) + _2246;
        _2354 = (((_2418 * cbLight._m0[_2367].y) * _2431) * _2432) + _2248;
        _2356 = (((_2418 * cbLight._m0[_2367].z) * _2431) * _2432) + _2250;
    }
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_1786.y == 0u)
    {
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.x;
        uint _2465 = uint((float(_2453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2454))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2454)));
        float _2475 = (log2(_1564 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2476 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        uint _2479 = uint(isnan(14.0) ? _2476 : (isnan(_2476) ? 14.0 : min(_2476, 14.0)));
        uvec4 _2484 = texelFetch(g_lightClusterGridBuffer, int(((_2479 << 2u) + (_2465 << 6u)) >> 2u));
        uint _2485 = _2484.x;
        uint _2486 = _2453.z;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        if (((((1u << ((_2486 >> 4u) & 15u)) + 4294967295u) & _2485) == 0u) || ((_2486 & 240u) == 0u))
        {
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
        }
        else
        {
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            uint _2724 = 0u;
            uint _2733;
            bool _2734;
            for (;;)
            {
                _2733 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                _2734 = _2733 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2734)
                {
                    frontier_phi_71_pred = _2723;
                    frontier_phi_71_pred_1 = _2722;
                    frontier_phi_71_pred_2 = _2721;
                    frontier_phi_71_pred_3 = _2720;
                    frontier_phi_71_pred_4 = _2719;
                    frontier_phi_71_pred_5 = _2718;
                }
                else
                {
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    uint _2869;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2733;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2873 = uint(findLSB(_2869)) + (_2724 << 5u);
                        uint _2870 = (_2869 + 4294967295u) & _2869;
                        uint _2875 = _2873 * 48u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2895 = (_2873 * 48u) + 4u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2914 = (_2873 * 48u) + 8u;
                        vec3 _2925 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x));
                        float _2929 = _2889.x - _1562;
                        float _2930 = _2889.y - _1563;
                        float _2931 = _2889.z - _1564;
                        float _2932 = dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931));
                        float _2935 = inversesqrt(_2932);
                        float _2936 = _2935 * _2929;
                        float _2937 = _2935 * _2930;
                        float _2938 = _2935 * _2931;
                        float _2939 = dot(vec3(_409, _412, _415), vec3(_2936, _2937, _2938));
                        float _2944 = 1.0 - (_2932 * _2889.w);
                        float _4310 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2946 = sqrt(_2932) * _2908.w;
                        float _2949 = 1.39999997615814208984375 / (_2946 + 1.39999997615814208984375);
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2939) + _2950;
                        float _2956 = _2946 * _2946;
                        float _2960 = ((isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0))) * _2945) / ((_2956 * 0.699999988079071044921875) + 1.0);
                        float _2964 = (-0.0) - _1562;
                        float _2965 = (-0.0) - _1563;
                        float _2966 = (-0.0) - _1564;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2980 = exp2(log2(1.0 / ((_2956 * 3.5) + 5.0)) * 0.25);
                        float _2981 = 1.0 - _469;
                        float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                        float _2989 = _2988 * _2988;
                        float _2990 = _2989 * _2989;
                        float _2991 = _2971 + _2936;
                        float _2992 = _2972 + _2937;
                        float _2993 = _2973 + _2938;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _3001 = dot(vec3(_409, _412, _415), vec3(_2971, _2972, _2973));
                        float _4326 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3005 = dot(vec3(_409, _412, _415), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                        float _4337 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                        float _3013 = _2949 * _2989;
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _2939) + _3014;
                        float _4348 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3019 = 1.0 - _2989;
                        float _3029 = (0.5 / (((_3018 * ((_3004 * _3019) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3018 * _3019) + _2989) * _3004))) * _3018;
                        float _4359 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3040 = (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3012 * _3012) * ((_2956 * 2.1991131305694580078125) + 3.141590118408203125))) * _2945;
                        _2793 = (_2960 * _2908.x) + _2866;
                        _2794 = (_2960 * _2908.y) + _2867;
                        _2795 = (_2960 * _2908.z) + _2868;
                        _2790 = (_3040 * _2925.x) + _2863;
                        _2791 = (_3040 * _2925.y) + _2864;
                        _2792 = (_3040 * _2925.z) + _2865;
                        if (_2870 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2870;
                        }
                    }
                    frontier_phi_71_pred = _2795;
                    frontier_phi_71_pred_1 = _2794;
                    frontier_phi_71_pred_2 = _2793;
                    frontier_phi_71_pred_3 = _2792;
                    frontier_phi_71_pred_4 = _2791;
                    frontier_phi_71_pred_5 = _2790;
                }
                _2576 = frontier_phi_71_pred;
                _2574 = frontier_phi_71_pred_1;
                _2572 = frontier_phi_71_pred_2;
                _2570 = frontier_phi_71_pred_3;
                _2568 = frontier_phi_71_pred_4;
                _2566 = frontier_phi_71_pred_5;
                uint _2725 = _2724 + 1u;
                if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2718 = _2566;
                    _2719 = _2568;
                    _2720 = _2570;
                    _2721 = _2572;
                    _2722 = _2574;
                    _2723 = _2576;
                    _2724 = _2725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
        }
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.z;
        uint _2582 = (_2580 >> 8u) & 15u;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((4294967295u << _2582) & _2485) == 0u)
        {
            _2686 = _2565;
            _2688 = _2567;
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
        }
        else
        {
            float _2711 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
            float _2712 = _2711 * _1562;
            float _2713 = _2711 * _1563;
            float _2714 = _2711 * _1564;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2582 < ((_2580 >> 12u) & 15u))
            {
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2846 = _2565;
                float _2847 = _2567;
                float _2848 = _2569;
                float _2849 = _2571;
                float _2850 = _2573;
                float _2851 = _2575;
                uint _2852 = _2582;
                uint _2861;
                bool _2862;
                for (;;)
                {
                    _2861 = texelFetch(g_lightClassification, int((((_2479 << 5u) + (_2465 << 9u)) + (_2852 << 2u)) >> 2u)).x;
                    _2862 = _2861 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2862)
                    {
                        frontier_phi_82_pred = _2851;
                        frontier_phi_82_pred_1 = _2850;
                        frontier_phi_82_pred_2 = _2849;
                        frontier_phi_82_pred_3 = _2848;
                        frontier_phi_82_pred_4 = _2847;
                        frontier_phi_82_pred_5 = _2846;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        float _3070 = _2849;
                        float _3071 = _2850;
                        float _3072 = _2851;
                        uint _3073 = _2861;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3159;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3084 = ((_2852 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3084 * 40u) + 20u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3162 = (_3084 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3084 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_1564, _3194.z, fma(_1563, _3194.y, _3194.x * _1562)) + _3194.w;
                            _3207 = !((fma(_1564, _3175.z, fma(_1563, _3175.y, _3175.x * _1562)) + _3175.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3099.x - _1562;
                                float _3235 = _3099.y - _1563;
                                float _3236 = _3099.z - _1564;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3100 * _3100));
                                float _4370 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3252 = sqrt(_3237) * _3115.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_409, _412, _415))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_1564, _3143.z, fma(_1563, _3143.y, _3143.x * _1562)) + _3143.w) / _3206;
                                float _3266 = (fma(_1564, _3159.z, fma(_1563, _3159.y, _3159.x * _1562)) + _3159.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4386 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _469;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2712;
                                float _3296 = _3242 - _2713;
                                float _3297 = _3243 - _2714;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2712, (-0.0) - _2713, (-0.0) - _2714));
                                float _4397 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3309 = dot(vec3(_409, _412, _415), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4408 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_409, _412, _415), vec3(_3241, _3242, _3243))) + _3318;
                                float _4419 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4430 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3272 * _3115.z;
                                frontier_phi_88_pred_1 = _3272 * _3115.y;
                                frontier_phi_88_pred_2 = _3272 * _3115.x;
                                frontier_phi_88_pred_3 = _3346 * _3127.z;
                                frontier_phi_88_pred_4 = _3346 * _3127.y;
                                frontier_phi_88_pred_5 = _3346 * _3127.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_88_pred;
                            _3354 = frontier_phi_88_pred_1;
                            _3353 = frontier_phi_88_pred_2;
                            _3352 = frontier_phi_88_pred_3;
                            _3351 = frontier_phi_88_pred_4;
                            _3350 = frontier_phi_88_pred_5;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3059;
                        frontier_phi_82_pred_1 = _3058;
                        frontier_phi_82_pred_2 = _3057;
                        frontier_phi_82_pred_3 = _3056;
                        frontier_phi_82_pred_4 = _3055;
                        frontier_phi_82_pred_5 = _3054;
                    }
                    _2697 = frontier_phi_82_pred;
                    _2695 = frontier_phi_82_pred_1;
                    _2693 = frontier_phi_82_pred_2;
                    _2691 = frontier_phi_82_pred_3;
                    _2689 = frontier_phi_82_pred_4;
                    _2687 = frontier_phi_82_pred_5;
                    uint _2853 = _2852 + 1u;
                    if (_2853 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2846 = _2687;
                        _2847 = _2689;
                        _2848 = _2691;
                        _2849 = _2693;
                        _2850 = _2695;
                        _2851 = _2697;
                        _2852 = _2853;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2693;
                frontier_phi_63_64_ladder_1 = _2697;
                frontier_phi_63_64_ladder_2 = _2695;
                frontier_phi_63_64_ladder_3 = _2691;
                frontier_phi_63_64_ladder_4 = _2689;
                frontier_phi_63_64_ladder_5 = _2687;
            }
            else
            {
                frontier_phi_63_64_ladder = _2571;
                frontier_phi_63_64_ladder_1 = _2575;
                frontier_phi_63_64_ladder_2 = _2573;
                frontier_phi_63_64_ladder_3 = _2569;
                frontier_phi_63_64_ladder_4 = _2567;
                frontier_phi_63_64_ladder_5 = _2565;
            }
            _2686 = frontier_phi_63_64_ladder_5;
            _2688 = frontier_phi_63_64_ladder_4;
            _2690 = frontier_phi_63_64_ladder_3;
            _2692 = frontier_phi_63_64_ladder;
            _2694 = frontier_phi_63_64_ladder_2;
            _2696 = frontier_phi_63_64_ladder_1;
        }
        float _2701 = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
        _2498 = (_2701 * _2692) + _2029;
        _2500 = (_2701 * _2694) + _2031;
        _2502 = (_2701 * _2696) + _2033;
        _2504 = ((_2686 * 0.039999999105930328369140625) * _2701) + _2352;
        _2506 = ((_2688 * 0.039999999105930328369140625) * _2701) + _2354;
        _2508 = ((_2690 * 0.039999999105930328369140625) * _2701) + _2356;
    }
    else
    {
        _2498 = _2029;
        _2500 = _2031;
        _2502 = _2033;
        _2504 = _2352;
        _2506 = _2354;
        _2508 = _2356;
    }
    float _4446 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4457 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4468 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _2525 = ((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2498 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _453))) + ((_2504 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2526 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2500 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _453))) + ((_2506 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2502 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _453))) + ((_2508 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    uint _2528 = _428 + 6u;
    float _2536 = _389 / cbSceneParam._m0[86u].x;
    float _2537 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2551 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2553 = _2551.x;
    float _2554 = _2551.y;
    float _2555 = _2551.z;
    float _2556 = _2551.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2590 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2591 = _2590 / _308;
        float _2602 = _2591 * _361;
        float _2603 = _362 * _2591;
        float _2604 = (-0.0) - _2603;
        float _2606 = _2591 * _363;
        float _2608 = (cbSceneParam._m0[77u].w * _2604) / _2590;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2603;
        float _2616 = sqrt(((_2602 * _2602) + (_2603 * _2603)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2590)) * _2616;
        float _2624 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2604 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2609 > 0.0) ? exp2(_2624 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2749 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _2803 = ((abs(_2616 / _2604) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2624 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2624 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2626 * _2758) - exp2(_2626 * _2759)) * _2747))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2536, _2537, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2556);
        _2628 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2553;
        _2630 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2554;
        _2632 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2555;
        _2634 = _2814 * _2556;
    }
    else
    {
        _2628 = _2553;
        _2630 = _2554;
        _2632 = _2555;
        _2634 = _2556;
    }
    bool _2841;
    vec4 _2644;
    vec4 _2666;
    float _2668;
    float _2672;
    float _2673;
    float _2674;
    float _2675;
    bool _2685;
    for (;;)
    {
        _2644 = cbMatDynParam._m0[0u];
        float _2646 = roundEven(_2644.y);
        bool _2647 = _2646 == 3.0;
        float _2648 = log2(_2634);
        float _2655 = exp2(_2648 * cbSceneParam._m0[78u].x) * _2525;
        float _2656 = exp2(_2648 * cbSceneParam._m0[78u].y) * _2526;
        float _2657 = exp2(_2648 * cbSceneParam._m0[78u].z) * _2527;
        float _2664 = _377 + (-0.5);
        _2666 = cbMtdParam._m0[1u];
        _2668 = _2666.y * _2664;
        float _2671 = (_2646 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2672 = _2671 * (_2647 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2628)));
        _2673 = _2671 * (_2647 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2630)));
        _2674 = _2671 * (_2647 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2632)));
        _2675 = _2664 * 0.999000012874603271484375;
        _2685 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2685)
        {
            if ((cbInstanceData._m0[_428 + 7u].x + _2675) < 0.5)
            {
                _2841 = true;
                break;
            }
        }
        uint _2782 = _429 + uint(_2644.w);
        if ((cbInstanceData._m0[_2782].w < 1.0) && ((cbInstanceData._m0[_2782].w + _2675) < 0.5))
        {
            _2841 = true;
            break;
        }
        if ((_2668 + 1.0) < _2666.x)
        {
            _2841 = true;
            break;
        }
        _2841 = false;
        break;
    }
    float _3045;
    if (_2841)
    {
        discard_state = true;
        _3045 = 0.0;
    }
    else
    {
        _3045 = cbInstanceData._m0[_2528].w;
    }
    SV_Target.x = _2672;
    SV_Target.y = _2673;
    SV_Target.z = _2674;
    SV_Target.w = _3045;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2528].w;
    discard_exit();
}


