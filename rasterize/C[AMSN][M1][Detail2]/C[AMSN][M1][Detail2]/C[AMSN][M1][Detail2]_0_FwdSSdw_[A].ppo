#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _997;
float _3410;
float _3411;
float _3412;
float _3413;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _305 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3422 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[10u].x) - _249)) + _249;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[10u].y) - _250)) + _250;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[10u].z) - _251)) + _251;
    vec4 _327 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _329 = _327.x;
    float _331 = _329 - (_329 * TEXCOORD_5.x);
    vec4 _348 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _356 = (_348.x * 2.0) + (-1.0);
    float _358 = (_348.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3433 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _364 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _365 = _348.z * cbMtdParam._m0[13u].y;
    vec4 _378 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _392 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_378.z * cbMtdParam._m0[13u].x) - _365)) + _365;
    float _398 = ((((_378.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _356;
    float _399 = ((((_378.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _358;
    float _402 = fma(_364, _213 * NORMAL.x, fma(_399, _220 * TANGENT.x, (_206 * _198) * _398));
    float _405 = fma(_364, _213 * NORMAL.y, fma(_399, _220 * TANGENT.y, (_206 * _199) * _398));
    float _408 = fma(_364, _213 * NORMAL.z, fma(_399, _220 * TANGENT.z, (_206 * _200) * _398));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3444 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _416 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3466 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3477 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3488 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _420 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _487 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _489 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
    float _494 = _487 * _493;
    float _495 = _488 * _493;
    float _496 = _489 * _493;
    vec4 _501 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _503 = _501.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _677 = sqrt(((_487 * _487) + (_488 * _488)) + (_489 * _489));
        float _683 = (cbMatDynParam._m0[5u].x * _677) + cbMatDynParam._m0[5u].y;
        float _3499 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _688 = (cbMatDynParam._m0[5u].z * _677) + cbMatDynParam._m0[5u].w;
        float _3510 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) - _684)) + _684) < ((_503 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _535 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _538 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _541 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _554 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = _554 + 9u;
    uint _556 = _555 + uint(cbMatDynParam._m0[0u].w);
    float _562 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_556].x;
    float _563 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_556].y;
    float _564 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_556].z;
    float _3521 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _568 = 1.0 - _420;
    float _569 = _565 * _568;
    float _570 = _566 * _568;
    float _571 = _567 * _568;
    float _576 = (_565 + (-0.039999999105930328369140625)) * _420;
    float _577 = (_566 + (-0.039999999105930328369140625)) * _420;
    float _578 = (_567 + (-0.039999999105930328369140625)) * _420;
    float _579 = _576 + 0.039999999105930328369140625;
    float _581 = _577 + 0.039999999105930328369140625;
    float _582 = _578 + 0.039999999105930328369140625;
    vec4 _591 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _594 = _591.x * TEXCOORD_5.w;
    float _595 = dot(vec3(_413, _414, _415), vec3(_494, _495, _496));
    float _598 = _595 * 2.0;
    float _602 = (_598 * _413) - _494;
    float _603 = (_598 * _414) - _495;
    float _604 = (_598 * _415) - _496;
    float _608 = abs(dot(vec3(_494, _495, _496), vec3(_413, _414, _415)));
    float _3554 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = sqrt(_416);
    float _623 = exp2((_610 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_610 * 3.0));
    float _629 = (1.0 - _623) * ((_610 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _630 = _623 * _610;
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658));
        float _725 = fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658));
        float _729 = fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658));
        float _754 = _658 + _413;
        float _755 = _662 + _414;
        float _756 = _666 + _415;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _721;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _725;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _729;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_413, _414, _415), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3602 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_413, _414, _415), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3635 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_413, _414, _415), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3668 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1040 = fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658));
        float _1044 = fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658));
        float _1048 = fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658));
        float _1071 = _658 + _413;
        float _1072 = _662 + _414;
        float _1073 = _666 + _415;
        float _1083 = fma(_1073, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1040 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1044 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[35u].z) + ((((((_1048 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1139 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1106.x + (-0.5));
        float _1141 = _1139 * (_1106.y + (-0.5));
        float _1142 = _1139 * (_1106.z + (-0.5));
        float _1149 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1113.x + (-0.5));
        float _1151 = _1149 * (_1113.y + (-0.5));
        float _1152 = _1149 * (_1113.z + (-0.5));
        float _1159 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1120.x + (-0.5));
        float _1161 = _1159 * (_1120.y + (-0.5));
        float _1162 = _1159 * (_1120.z + (-0.5));
        float _1169 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1127.x + (-0.5));
        float _1171 = _1169 * (_1127.y + (-0.5));
        float _1172 = _1169 * (_1127.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_413, _414, _415), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3731 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1203 + 1.0))) + _1208) * _1173;
        float _1218 = _1141 * 0.5;
        float _1219 = _1151 * 0.5;
        float _1220 = _1161 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_413, _414, _415), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3764 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1245 + 1.0))) + _1250) * _1174;
        float _1260 = _1142 * 0.5;
        float _1261 = _1152 * 0.5;
        float _1262 = _1162 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_413, _414, _415), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3797 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1287 + 1.0))) + _1292) * _1175;
        _1309 = _1142;
        _1310 = _1141;
        _1311 = _1140;
        _1312 = _1152;
        _1313 = _1151;
        _1314 = _1150;
        _1315 = _1162;
        _1316 = _1161;
        _1317 = _1160;
        _1318 = _1175;
        _1319 = _1174;
        _1320 = _1173;
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = _997;
        _1318 = _997;
        _1319 = _997;
        _1320 = _997;
        _1321 = 0.0;
        _1322 = 0.0;
        _1323 = 0.0;
    }
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1010)) + _1010;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1011)) + _1011;
    float _1356 = fma(_1335, cbSceneParam._m0[89u].z, fma(_1334, cbSceneParam._m0[89u].y, _1333 * cbSceneParam._m0[89u].x));
    float _1359 = fma(_1335, cbSceneParam._m0[90u].z, fma(_1334, cbSceneParam._m0[90u].y, _1333 * cbSceneParam._m0[90u].x));
    float _1362 = fma(_1335, cbSceneParam._m0[91u].z, fma(_1334, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1333));
    float _1377 = _602 * 0.5;
    float _1378 = _603 * 0.5;
    float _1379 = _604 * 0.5;
    float _1380 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1383 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1386 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1420;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1393 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1397 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1401 = dot(vec4(_1377, _1378, _1379, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1408 = dot(vec4(cbModelParam._m0[39u]), vec4(_1377, _1378, _1379, 1.0));
        _1420 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1420 = 1.0;
    }
    float _1431;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1422 = dot(vec4(cbModelParam._m0[40u]), vec4(_1377, _1378, _1379, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1435 = (_1431 * cbModelParam._m0[1u].x) + (_1420 * (1.0 - cbModelParam._m0[1u].x));
    float _1445 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1445 : min(cbModelParam._m0[25u].z, _1445));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1494 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1498 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1502 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1505 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1508 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1511 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1539;
        if (_1505 > 0.0)
        {
            _1539 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1539 = frontier_phi_17_15_ladder;
        }
        float _1767;
        if (_1508 > 0.0)
        {
            _1767 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1767 = frontier_phi_26_22_ladder;
        }
        float _2024;
        if (_1511 > 0.0)
        {
            _2024 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2024 = frontier_phi_38_33_ladder;
        }
        float _2026 = isnan(_1767) ? _1539 : (isnan(_1539) ? _1767 : min(_1539, _1767));
        float _2027 = isnan(_2024) ? _2026 : (isnan(_2026) ? _2024 : min(_2026, _2024));
        float _2031 = (_2027 * _1505) + _1494;
        float _2032 = (_2027 * _1508) + _1498;
        float _2033 = (_2027 * _1511) + _1502;
        float _2034 = _2027 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2034;
        float _2038 = _2034 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 > _2038) || ((_2032 < _2036) || ((_2031 < _2036) || (_2031 > _2038))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2033, cbModelParam._m0[9u].z, fma(_2032, cbModelParam._m0[9u].y, _2031 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2033, cbModelParam._m0[10u].z, fma(_2032, cbModelParam._m0[10u].y, _2031 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2033, cbModelParam._m0[11u].z, fma(_2032, cbModelParam._m0[11u].y, _2031 * cbModelParam._m0[11u].x))), _1446);
            frontier_phi_16_38_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1527 = frontier_phi_16_38_ladder_2;
        _1529 = frontier_phi_16_38_ladder_1;
        _1531 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1446);
        _1527 = _1515.x * cbModelParam._m0[1u].y;
        _1529 = _1515.y * cbModelParam._m0[1u].y;
        _1531 = _1515.z * cbModelParam._m0[1u].y;
    }
    float _1535 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1535 : min(cbModelParam._m0[25u].w, _1535));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1593 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1597 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1601 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1604 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1607 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1610 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1772;
        if (_1604 > 0.0)
        {
            _1772 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2051;
        if (_1607 > 0.0)
        {
            _2051 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2051 = frontier_phi_40_35_ladder;
        }
        float _2264;
        if (_1610 > 0.0)
        {
            _2264 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2264 = frontier_phi_49_46_ladder;
        }
        float _2266 = isnan(_2051) ? _1772 : (isnan(_1772) ? _2051 : min(_1772, _2051));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1604) + _1593;
        float _2272 = (_2267 * _1607) + _1597;
        float _2273 = (_2267 * _1610) + _1601;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2274;
        float _2277 = _2274 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2273 > _2277) || ((_2273 < _2275) || ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 < _2275) || (_2271 > _2277))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2273, cbModelParam._m0[17u].z, fma(_2272, cbModelParam._m0[17u].y, _2271 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2273, cbModelParam._m0[18u].z, fma(_2272, cbModelParam._m0[18u].y, _2271 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2273, cbModelParam._m0[19u].z, fma(_2272, cbModelParam._m0[19u].y, _2271 * cbModelParam._m0[19u].x))), _1536);
            frontier_phi_25_49_ladder = _2472.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2472.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2472.x * cbModelParam._m0[1u].z;
        }
        _1629 = frontier_phi_25_49_ladder_2;
        _1631 = frontier_phi_25_49_ladder_1;
        _1633 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1536);
        _1629 = _1613.x * cbModelParam._m0[1u].z;
        _1631 = _1613.y * cbModelParam._m0[1u].z;
        _1633 = _1613.z * cbModelParam._m0[1u].z;
    }
    float _1646 = (((_629 * _579) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1648 = (((_629 * _581) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1650 = (((_629 * _582) + _630) * _594) * ((cbModelParam._m0[1u].w * (_1633 - _1531)) + _1531);
    float _1653 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, _1646 * cbSceneParam._m0[91u].x));
    vec4 _1667 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_515, _516));
    float _1669 = _1667.w;
    float _1681 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1669);
    float _1682 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1669);
    float _1683 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1669);
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_554 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1697 = _594 + (-1.0);
    float _1702 = (cbLight._m0[_1690].x * _1697) + 1.0;
    float _1703 = (cbLight._m0[_1690].y * _1697) + 1.0;
    float _1704 = (cbLight._m0[_1690].z * _1697) + 1.0;
    float _1705 = (cbLight._m0[_1690].w * _1697) + 1.0;
    uint _1706 = _1689 + 5u;
    float _1712 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1716 = _1689 + 4u;
    float _1726 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1730 = _1689 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_413, _414, _415));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_413, _414, _415));
    float _3933 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3944 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1706].x * _1712) * _1751) + (((cbLight._m0[_1716].x * _1681) * _1726) * _1749);
    float _1759 = ((_1712 * cbLight._m0[_1706].y) * _1751) + (((cbLight._m0[_1716].y * _1682) * _1726) * _1749);
    float _1760 = ((_1712 * cbLight._m0[_1706].z) * _1751) + (((cbLight._m0[_1716].z * _1683) * _1726) * _1749);
    uvec4 _1764 = floatBitsToUint(cbLight._m0[_1689 + 12u]);
    bool _1766 = _1764.x == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1766)
    {
        _1777 = _1758;
        _1779 = _1759;
        _1781 = _1760;
    }
    else
    {
        uint _1785 = _1689 + 6u;
        float _1801 = (dot(vec3(cbLight._m0[_1689 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1802 = _1801 * _1801;
        float _3955 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1804 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1777 = (((cbLight._m0[_1785].x * 0.3183098733425140380859375) * _1803) * _1804) + _1758;
        _1779 = (((cbLight._m0[_1785].y * 0.3183098733425140380859375) * _1803) * _1804) + _1759;
        _1781 = (((cbLight._m0[_1785].z * 0.3183098733425140380859375) * _1803) * _1804) + _1760;
    }
    bool _1784 = _1764.y == 0u;
    float _1822;
    float _1824;
    float _1826;
    if (_1784)
    {
        _1822 = _1777;
        _1824 = _1779;
        _1826 = _1781;
    }
    else
    {
        uint _1995 = _1689 + 7u;
        float _2011 = (dot(vec3(cbLight._m0[_1689 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _3971 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _2014 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1822 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1777;
        _1824 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1779;
        _1826 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1781;
    }
    uint _1829 = _1689 + 8u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _416) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1689].x + _494;
    float _1845 = cbLight._m0[_1689].y + _495;
    float _1846 = cbLight._m0[_1689].z + _496;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1689].xyz));
    float _3987 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _1858 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1859 = dot(vec3(_413, _414, _415), vec3(_1851, _1852, _1853));
    float _4009 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1851, _1852, _1853));
    float _4020 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1843 * _1843;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1879 = exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0);
    float _1880 = 0.959999978542327880859375 - _576;
    float _1882 = 0.959999978542327880859375 - _577;
    float _1883 = 0.959999978542327880859375 - _578;
    float _1890 = 1.0 - _1843;
    float _1901 = (0.5 / (((_1858 * ((_1857 * _1890) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1890) + _1843) * _1857))) * _1857;
    float _4031 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    uint _1917 = _1689 + 9u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _416) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1730].x + _494;
    float _1931 = cbLight._m0[_1730].y + _495;
    float _1932 = cbLight._m0[_1730].z + _496;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1730].xyz));
    float _4042 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1944 = dot(vec3(_413, _414, _415), vec3(_1937, _1938, _1939));
    float _4053 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1937, _1938, _1939));
    float _4064 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1929 * _1929;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0);
    float _1970 = 1.0 - _1929;
    float _1980 = (0.5 / (((_1858 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1970) + _1929) * _1943))) * _1943;
    float _4075 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    float _1992 = (((((_1963 * _1880) + _579) * cbLight._m0[_1917].x) * _1982) * _1712) + ((((cbLight._m0[_1829].x * _1681) * ((_1879 * _1880) + _579)) * _1903) * _1726);
    float _1993 = (((((_1963 * _1882) + _581) * cbLight._m0[_1917].y) * _1982) * _1712) + ((((cbLight._m0[_1829].y * _1682) * ((_1879 * _1882) + _581)) * _1903) * _1726);
    float _1994 = (((((_1963 * _1883) + _582) * cbLight._m0[_1917].z) * _1982) * _1712) + ((((cbLight._m0[_1829].z * _1683) * ((_1879 * _1883) + _582)) * _1903) * _1726);
    float _2056;
    float _2058;
    float _2060;
    if (_1766)
    {
        _2056 = _1992;
        _2058 = _1993;
        _2060 = _1994;
    }
    else
    {
        uint _2062 = _1689 + 2u;
        uint _2066 = _1689 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _416) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _494;
        float _2083 = cbLight._m0[_2062].y + _495;
        float _2084 = cbLight._m0[_2062].z + _496;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2062].xyz));
        float _4086 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2096 = dot(vec3(_413, _414, _415), vec3(_2089, _2090, _2091));
        float _4097 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4108 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1858 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _2122) + _2081) * _2095))) * _2095;
        float _4119 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2056 = (((((_2115 * _1880) + _579) * cbLight._m0[_2066].x) * _2134) * _2135) + _1992;
        _2058 = (((((_2115 * _1882) + _581) * cbLight._m0[_2066].y) * _2134) * _2135) + _1993;
        _2060 = (((((_2115 * _1883) + _582) * cbLight._m0[_2066].z) * _2134) * _2135) + _1994;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1784)
    {
        _2170 = _2056;
        _2172 = _2058;
        _2174 = _2060;
    }
    else
    {
        uint _2181 = _1689 + 3u;
        uint _2185 = _1689 + 11u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _416) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _494;
        float _2202 = cbLight._m0[_2181].y + _495;
        float _2203 = cbLight._m0[_2181].z + _496;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2181].xyz));
        float _4135 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2215 = dot(vec3(_413, _414, _415), vec3(_2208, _2209, _2210));
        float _4146 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4157 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
        float _2241 = 1.0 - _2200;
        float _2251 = (0.5 / (((_1858 * ((_2214 * _2241) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _2241) + _2200) * _2214))) * _2214;
        float _4168 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2170 = (((((_2234 * _1880) + _579) * cbLight._m0[_2185].x) * _2253) * _2254) + _2056;
        _2172 = (((((_2234 * _1882) + _581) * cbLight._m0[_2185].y) * _2253) * _2254) + _2058;
        _2174 = (((((_2234 * _1883) + _582) * cbLight._m0[_2185].z) * _2253) * _2254) + _2060;
    }
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_1687.y == 0u)
    {
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2329;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2329;
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2329;
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.x;
        uint _2356 = uint((float(_2344.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2345))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2345)));
        float _2366 = (log2(_2332 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2367 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        uint _2370 = uint(isnan(14.0) ? _2367 : (isnan(_2367) ? 14.0 : min(_2367, 14.0)));
        uvec4 _2375 = texelFetch(g_lightClusterGridBuffer, int(((_2370 << 2u) + (_2356 << 6u)) >> 2u));
        uint _2376 = _2375.x;
        uint _2377 = _2344.z;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        if (((((1u << ((_2377 >> 4u) & 15u)) + 4294967295u) & _2376) == 0u) || ((_2377 & 240u) == 0u))
        {
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
        }
        else
        {
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            uint _2636 = 0u;
            uint _2645;
            bool _2646;
            for (;;)
            {
                _2645 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                _2646 = _2645 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2646)
                {
                    frontier_phi_66_pred = _2630;
                    frontier_phi_66_pred_1 = _2635;
                    frontier_phi_66_pred_2 = _2634;
                    frontier_phi_66_pred_3 = _2633;
                    frontier_phi_66_pred_4 = _2632;
                    frontier_phi_66_pred_5 = _2631;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2645;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2636 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2330;
                        float _2842 = _2801.y - _2331;
                        float _2843 = _2801.z - _2332;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_535, _538, _541), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4194 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2330;
                        float _2877 = (-0.0) - _2331;
                        float _2878 = (-0.0) - _2332;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _610;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_535, _538, _541), vec3(_2883, _2884, _2885));
                        float _4210 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2918 = dot(vec3(_535, _538, _541), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4221 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4232 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4243 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2705 = (_2872 * _2820.x) + _2778;
                        _2706 = (_2872 * _2820.y) + _2779;
                        _2707 = (_2872 * _2820.z) + _2780;
                        _2702 = (_2953 * _2837.x) + _2775;
                        _2703 = (_2953 * _2837.y) + _2776;
                        _2704 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_66_pred = _2702;
                    frontier_phi_66_pred_1 = _2707;
                    frontier_phi_66_pred_2 = _2706;
                    frontier_phi_66_pred_3 = _2705;
                    frontier_phi_66_pred_4 = _2704;
                    frontier_phi_66_pred_5 = _2703;
                }
                _2478 = frontier_phi_66_pred;
                _2488 = frontier_phi_66_pred_1;
                _2486 = frontier_phi_66_pred_2;
                _2484 = frontier_phi_66_pred_3;
                _2482 = frontier_phi_66_pred_4;
                _2480 = frontier_phi_66_pred_5;
                uint _2637 = _2636 + 1u;
                if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2630 = _2478;
                    _2631 = _2480;
                    _2632 = _2482;
                    _2633 = _2484;
                    _2634 = _2486;
                    _2635 = _2488;
                    _2636 = _2637;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
        }
        uvec4 _2491 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2492 = _2491.z;
        uint _2494 = (_2492 >> 8u) & 15u;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        if (((4294967295u << _2494) & _2376) == 0u)
        {
            _2598 = _2477;
            _2600 = _2479;
            _2602 = _2481;
            _2604 = _2483;
            _2606 = _2485;
            _2608 = _2487;
        }
        else
        {
            float _2623 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
            float _2624 = _2623 * _2330;
            float _2625 = _2623 * _2331;
            float _2626 = _2623 * _2332;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2494 < ((_2492 >> 12u) & 15u))
            {
                float _2599;
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2758 = _2477;
                float _2759 = _2479;
                float _2760 = _2481;
                float _2761 = _2483;
                float _2762 = _2485;
                float _2763 = _2487;
                uint _2764 = _2494;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2774)
                    {
                        frontier_phi_77_pred = _2763;
                        frontier_phi_77_pred_1 = _2762;
                        frontier_phi_77_pred_2 = _2761;
                        frontier_phi_77_pred_3 = _2760;
                        frontier_phi_77_pred_4 = _2759;
                        frontier_phi_77_pred_5 = _2758;
                    }
                    else
                    {
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        uint _2986 = _2773;
                        uint _2987;
                        vec4 _3012;
                        float _3013;
                        vec4 _3028;
                        vec3 _3040;
                        vec4 _3056;
                        vec4 _3072;
                        float _3119;
                        bool _3120;
                        for (;;)
                        {
                            uint _2997 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2986));
                            _2987 = (_2986 + 4294967295u) & _2986;
                            uint _2999 = _2997 * 40u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3013 = _3012.w;
                            uint _3015 = (_2997 * 40u) + 4u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2997 * 40u) + 8u;
                            _3040 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x));
                            uint _3043 = (_2997 * 40u) + 16u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3059 = (_2997 * 40u) + 20u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_2997 * 40u) + 24u;
                            vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3094 = (_2997 * 40u) + 28u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3119 = fma(_2332, _3107.z, fma(_2331, _3107.y, _3107.x * _2330)) + _3107.w;
                            _3120 = !((fma(_2332, _3088.z, fma(_2331, _3088.y, _3088.x * _2330)) + _3088.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3120)
                            {
                                float _3147 = _3012.x - _2330;
                                float _3148 = _3012.y - _2331;
                                float _3149 = _3012.z - _2332;
                                float _3150 = dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149));
                                float _3153 = inversesqrt(_3150);
                                float _3154 = _3153 * _3147;
                                float _3155 = _3153 * _3148;
                                float _3156 = _3153 * _3149;
                                float _3160 = 1.0 - (_3150 / (_3013 * _3013));
                                float _4254 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3165 = sqrt(_3150) * _3028.w;
                                float _3167 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                                float _3168 = _3167 * _3167;
                                float _3171 = ((1.0 - _3168) * dot(vec3(_3154, _3155, _3156), vec3(_535, _538, _541))) + _3168;
                                float _3174 = _3165 * _3165;
                                float _3178 = (fma(_2332, _3056.z, fma(_2331, _3056.y, _3056.x * _2330)) + _3056.w) / _3119;
                                float _3179 = (fma(_2332, _3072.z, fma(_2331, _3072.y, _3072.x * _2330)) + _3072.w) / _3119;
                                float _3183 = 1.0 - dot(vec2(_3178, _3179), vec2(_3178, _3179));
                                float _4270 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3184 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3185 = _3184 * (((isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))) * _3161) / ((_3174 * 0.699999988079071044921875) + 1.0));
                                float _3197 = exp2(log2(1.0 / ((_3174 * 3.5) + 5.0)) * 0.25);
                                float _3198 = 1.0 - _610;
                                float _3205 = sqrt(1.0 - ((1.0 - (_3198 * _3198)) * (1.0 - (_3197 * _3197))));
                                float _3206 = _3205 * _3205;
                                float _3207 = _3206 * _3206;
                                float _3208 = _3154 - _2624;
                                float _3209 = _3155 - _2625;
                                float _3210 = _3156 - _2626;
                                float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                                float _3218 = dot(vec3(_535, _538, _541), vec3((-0.0) - _2624, (-0.0) - _2625, (-0.0) - _2626));
                                float _4281 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3222 = dot(vec3(_535, _538, _541), vec3(_3214 * _3208, _3214 * _3209, _3214 * _3210));
                                float _4292 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3229 = ((_3225 * _3225) * (_3207 + (-1.0))) + 1.0;
                                float _3230 = _3167 * _3206;
                                float _3231 = _3230 * _3230;
                                float _3237 = ((1.0 - _3231) * dot(vec3(_535, _538, _541), vec3(_3154, _3155, _3156))) + _3231;
                                float _4303 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3239 = 1.0 - _3206;
                                float _3249 = (0.5 / (((_3238 * ((_3221 * _3239) + _3206)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3206) * _3221))) * _3238;
                                float _4314 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3259 = (_3184 * _3161) * (((_3207 * 3.1415927410125732421875) * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) / ((_3229 * _3229) * ((_3174 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3185 * _3028.y;
                                frontier_phi_83_pred_1 = _3185 * _3028.x;
                                frontier_phi_83_pred_2 = _3259 * _3040.z;
                                frontier_phi_83_pred_3 = _3259 * _3040.y;
                                frontier_phi_83_pred_4 = _3259 * _3040.x;
                                frontier_phi_83_pred_5 = _3185 * _3028.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3267 = frontier_phi_83_pred;
                            _3266 = frontier_phi_83_pred_1;
                            _3265 = frontier_phi_83_pred_2;
                            _3264 = frontier_phi_83_pred_3;
                            _3263 = frontier_phi_83_pred_4;
                            _3268 = frontier_phi_83_pred_5;
                            _2970 = _3266 + _2983;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            _2967 = _3263 + _2980;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            if (_2987 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2987;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2972;
                        frontier_phi_77_pred_1 = _2971;
                        frontier_phi_77_pred_2 = _2970;
                        frontier_phi_77_pred_3 = _2969;
                        frontier_phi_77_pred_4 = _2968;
                        frontier_phi_77_pred_5 = _2967;
                    }
                    _2609 = frontier_phi_77_pred;
                    _2607 = frontier_phi_77_pred_1;
                    _2605 = frontier_phi_77_pred_2;
                    _2603 = frontier_phi_77_pred_3;
                    _2601 = frontier_phi_77_pred_4;
                    _2599 = frontier_phi_77_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2599;
                        _2759 = _2601;
                        _2760 = _2603;
                        _2761 = _2605;
                        _2762 = _2607;
                        _2763 = _2609;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2603;
                frontier_phi_58_59_ladder_1 = _2609;
                frontier_phi_58_59_ladder_2 = _2607;
                frontier_phi_58_59_ladder_3 = _2605;
                frontier_phi_58_59_ladder_4 = _2601;
                frontier_phi_58_59_ladder_5 = _2599;
            }
            else
            {
                frontier_phi_58_59_ladder = _2481;
                frontier_phi_58_59_ladder_1 = _2487;
                frontier_phi_58_59_ladder_2 = _2485;
                frontier_phi_58_59_ladder_3 = _2483;
                frontier_phi_58_59_ladder_4 = _2479;
                frontier_phi_58_59_ladder_5 = _2477;
            }
            _2598 = frontier_phi_58_59_ladder_5;
            _2600 = frontier_phi_58_59_ladder_4;
            _2602 = frontier_phi_58_59_ladder;
            _2604 = frontier_phi_58_59_ladder_3;
            _2606 = frontier_phi_58_59_ladder_2;
            _2608 = frontier_phi_58_59_ladder_1;
        }
        float _2613 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
        _2389 = (_2613 * _2604) + _1822;
        _2391 = (_2613 * _2606) + _1824;
        _2393 = (_2613 * _2608) + _1826;
        _2395 = ((_2598 * _579) * _2613) + _2170;
        _2397 = ((_2600 * _581) * _2613) + _2172;
        _2399 = ((_2602 * _582) * _2613) + _2174;
    }
    else
    {
        _2389 = _1822;
        _2391 = _1824;
        _2393 = _1826;
        _2395 = _2170;
        _2397 = _2172;
        _2399 = _2174;
    }
    float _4330 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4341 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4352 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _2416 = ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2389 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _594))) + ((_2395 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2417 = ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2391 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _594))) + ((_2397 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    float _2418 = ((isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2393 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _594))) + ((_2399 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1435)) * cbPerFrame._m0[3u].x);
    uint _2419 = _554 + 6u;
    float _2427 = _515 / cbSceneParam._m0[86u].x;
    float _2428 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2442 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2427, _2428, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2444 = _2442.x;
    float _2445 = _2442.y;
    float _2446 = _2442.z;
    float _2447 = _2442.w;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2502 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2503 = _2502 / _436;
        float _2514 = _2503 * _487;
        float _2515 = _488 * _2503;
        float _2516 = (-0.0) - _2515;
        float _2518 = _2503 * _489;
        float _2520 = (cbSceneParam._m0[77u].w * _2516) / _2502;
        float _2521 = _2520 + cbSceneParam._m0[79u].w;
        float _2522 = cbSceneParam._m0[79u].w - _2515;
        float _2528 = sqrt(((_2514 * _2514) + (_2515 * _2515)) + (_2518 * _2518));
        float _2531 = (1.0 - (cbSceneParam._m0[77u].w / _2502)) * _2528;
        float _2536 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2538 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2715;
        if (abs((_2516 - _2520) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2715 = ((((_2521 > 0.0) ? exp2(_2536 * _2521) : (2.0 - exp2(_2538 * _2521))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2531;
        }
        else
        {
            float _2659 = 1.0 / cbSceneParam._m0[80u].x;
            float _2660 = isnan(_2522) ? _2521 : (isnan(_2521) ? _2522 : max(_2521, _2522));
            float _2661 = isnan(_2522) ? _2521 : (isnan(_2521) ? _2522 : min(_2521, _2522));
            float _2670 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : min(_2660, 0.0));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            _2715 = ((abs(_2528 / _2516) * cbSceneParam._m0[80u].y) * ((((_2670 - _2671) * 2.0) - ((exp2(_2536 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)))) - exp2(_2536 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))))) * _2659)) - ((exp2(_2538 * _2670) - exp2(_2538 * _2671)) * _2659))) + (_2531 * cbSceneParam._m0[80u].z);
        }
        vec4 _2717 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2427, _2428, 1.0), 0.0);
        float _2726 = exp2((_2715 * (-1.44269502162933349609375)) * (1.0 - _2717.w));
        float _2727 = log2(_2726);
        float _2743 = log2(_2447);
        _2540 = (exp2(_2743 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].x)) * _2717.x) / cbSceneParam._m0[78u].x)) + _2444;
        _2542 = (exp2(_2743 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].y)) * _2717.y) / cbSceneParam._m0[78u].y)) + _2445;
        _2544 = (exp2(_2743 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].z)) * _2717.z) / cbSceneParam._m0[78u].z)) + _2446;
        _2546 = _2726 * _2447;
    }
    else
    {
        _2540 = _2444;
        _2542 = _2445;
        _2544 = _2446;
        _2546 = _2447;
    }
    bool _2753;
    vec4 _2556;
    vec4 _2578;
    float _2580;
    float _2584;
    float _2585;
    float _2586;
    float _2587;
    bool _2597;
    for (;;)
    {
        _2556 = cbMatDynParam._m0[0u];
        float _2558 = roundEven(_2556.y);
        bool _2559 = _2558 == 3.0;
        float _2560 = log2(_2546);
        float _2567 = exp2(_2560 * cbSceneParam._m0[78u].x) * _2416;
        float _2568 = exp2(_2560 * cbSceneParam._m0[78u].y) * _2417;
        float _2569 = exp2(_2560 * cbSceneParam._m0[78u].z) * _2418;
        float _2576 = _503 + (-0.5);
        _2578 = cbMtdParam._m0[1u];
        _2580 = _2578.y * _2576;
        float _2583 = (_2558 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2584 = _2583 * (_2559 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2540)));
        _2585 = _2583 * (_2559 ? _2568 : (_2568 + (cbSceneParam._m0[72u].w * _2542)));
        _2586 = _2583 * (_2559 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2544)));
        _2587 = _2576 * 0.999000012874603271484375;
        _2597 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2597)
        {
            if ((cbInstanceData._m0[_554 + 7u].x + _2587) < 0.5)
            {
                _2753 = true;
                break;
            }
        }
        uint _2694 = _555 + uint(_2556.w);
        if ((cbInstanceData._m0[_2694].w < 1.0) && ((cbInstanceData._m0[_2694].w + _2587) < 0.5))
        {
            _2753 = true;
            break;
        }
        if ((_2580 + 1.0) < _2578.x)
        {
            _2753 = true;
            break;
        }
        _2753 = false;
        break;
    }
    float _2958;
    if (_2753)
    {
        discard_state = true;
        _2958 = 0.0;
    }
    else
    {
        _2958 = cbInstanceData._m0[_2419].w;
    }
    SV_Target.x = _2584;
    SV_Target.y = _2585;
    SV_Target.z = _2586;
    SV_Target.w = _2958;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2419].w;
    discard_exit();
}


