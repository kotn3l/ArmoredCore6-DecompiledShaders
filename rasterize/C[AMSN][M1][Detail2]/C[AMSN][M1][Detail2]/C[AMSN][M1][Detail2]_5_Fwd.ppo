#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1017;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _305 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3329 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[10u].x) - _249)) + _249;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[10u].y) - _250)) + _250;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[10u].z) - _251)) + _251;
    vec4 _339 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _368 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3340 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _376 = (_369 * ((_339.x * cbMtdParam._m0[11u].x) - _313)) + _313;
    float _377 = (_369 * ((_339.y * cbMtdParam._m0[11u].y) - _314)) + _314;
    float _378 = (_369 * ((_339.z * cbMtdParam._m0[11u].z) - _315)) + _315;
    vec4 _395 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _403 = (_395.x * 2.0) + (-1.0);
    float _405 = (_395.y * 2.0) + (-1.0);
    float _406 = dot(vec2(_403, _405), vec2(_403, _405));
    float _3351 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _411 = sqrt(1.0 - (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))));
    float _412 = _395.z * cbMtdParam._m0[13u].y;
    vec4 _425 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _439 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_425.z * cbMtdParam._m0[13u].x) - _412)) + _412;
    vec4 _453 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _467 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_453.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    float _480 = (((((_425.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _403) + ((((_453.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _481 = (((((_425.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _405) + ((((_453.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _484 = fma(_411, _213 * NORMAL.x, fma(_481, _220 * TANGENT.x, (_206 * _198) * _480));
    float _487 = fma(_411, _213 * NORMAL.y, fma(_481, _220 * TANGENT.y, (_206 * _199) * _480));
    float _490 = fma(_411, _213 * NORMAL.z, fma(_481, _220 * TANGENT.z, (_206 * _200) * _480));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _3362 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _498 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3384 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3395 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _517 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _567 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _557);
    float _568 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _557);
    float _569 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _557);
    float _573 = inversesqrt(dot(vec3(_567, _568, _569), vec3(_567, _568, _569)));
    float _574 = _567 * _573;
    float _575 = _568 * _573;
    float _576 = _569 * _573;
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_497, cbSceneParam._m0[5u].z, fma(_496, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _495));
    float _604 = fma(_497, cbSceneParam._m0[6u].z, fma(_496, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _495));
    float _607 = fma(_497, cbSceneParam._m0[7u].z, fma(_496, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _495));
    uint _620 = uint(roundEven(NORMAL.w)) * 13u;
    uint _622 = (_620 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3406 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _3428 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _645 = _642.x * TEXCOORD_5.w;
    float _646 = dot(vec3(_495, _496, _497), vec3(_574, _575, _576));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _495) - _574;
    float _654 = (_649 * _496) - _575;
    float _655 = (_649 * _497) - _576;
    float _659 = abs(dot(vec3(_574, _575, _576), vec3(_495, _496, _497)));
    float _3439 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_498);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1016;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _741 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _745 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _749 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _774 = _706 + _495;
        float _775 = _710 + _496;
        float _776 = _714 + _497;
        float _786 = fma(_776, cbModelParam._m0[26u].z, fma(_775, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774)) - _741;
        float _787 = fma(_776, cbModelParam._m0[27u].z, fma(_775, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774)) - _745;
        float _788 = fma(_776, cbModelParam._m0[28u].z, fma(_775, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774)) - _749;
        float _792 = inversesqrt(dot(vec3(_786, _787, _788), vec3(_786, _787, _788)));
        float _805 = ((_792 * _786) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_741 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_792 * _787) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_745 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_792 * _788) / cbModelParam._m0[34u].z) + ((((((_749 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        float _844 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_810.x + (-0.5));
        float _846 = _844 * (_810.y + (-0.5));
        float _847 = _844 * (_810.z + (-0.5));
        float _854 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_817.x + (-0.5));
        float _856 = _854 * (_817.y + (-0.5));
        float _857 = _854 * (_817.z + (-0.5));
        float _864 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_824.x + (-0.5));
        float _866 = _864 * (_824.y + (-0.5));
        float _867 = _864 * (_824.z + (-0.5));
        float _874 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_831.x + (-0.5));
        float _876 = _874 * (_831.y + (-0.5));
        float _877 = _874 * (_831.z + (-0.5));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = _845 * 0.5;
        float _882 = _855 * 0.5;
        float _883 = _865 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _898 = (dot(vec3(_495, _496, _497), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _908 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3487 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_910 + 1.0))) + _915) * _878;
        float _925 = _846 * 0.5;
        float _926 = _856 * 0.5;
        float _927 = _866 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_495, _496, _497), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3520 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_952 + 1.0))) + _957) * _879;
        float _967 = _847 * 0.5;
        float _968 = _857 * 0.5;
        float _969 = _867 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_495, _496, _497), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3553 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_994 + 1.0))) + _999) * _880;
        _1016 = _847;
        _1018 = _846;
        _1019 = _845;
        _1020 = _857;
        _1021 = _856;
        _1022 = _855;
        _1023 = _867;
        _1024 = _866;
        _1025 = _865;
        _1026 = _880;
        _1027 = _879;
        _1028 = _878;
        _1029 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
    }
    else
    {
        _1016 = _1017;
        _1018 = _1017;
        _1019 = _1017;
        _1020 = _1017;
        _1021 = _1017;
        _1022 = _1017;
        _1023 = _1017;
        _1024 = _1017;
        _1025 = _1017;
        _1026 = _1017;
        _1027 = _1017;
        _1028 = _1017;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1061 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1065 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1088 = _706 + _495;
        float _1089 = _710 + _496;
        float _1090 = _714 + _497;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_495, _496, _497), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _3616 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_495, _496, _497), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3649 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_495, _496, _497), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3682 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1017;
        _1327 = _1017;
        _1328 = _1017;
        _1329 = _1017;
        _1330 = _1017;
        _1331 = _1017;
        _1332 = _1017;
        _1333 = _1017;
        _1334 = _1017;
        _1335 = _1017;
        _1336 = _1017;
        _1337 = _1017;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1029)) + _1029;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1030)) + _1030;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _653 * 0.5;
    float _1395 = _654 * 0.5;
    float _1396 = _655 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1020, _1023, _1026));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1018, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _498);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1524 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1527 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1555 = frontier_phi_14_12_ladder;
        }
        float _1759;
        if (_1524 > 0.0)
        {
            _1759 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1759 = frontier_phi_23_19_ladder;
        }
        float _2002;
        if (_1527 > 0.0)
        {
            _2002 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2002 = frontier_phi_35_30_ladder;
        }
        float _2004 = isnan(_1759) ? _1555 : (isnan(_1555) ? _1759 : min(_1555, _1759));
        float _2005 = isnan(_2002) ? _2004 : (isnan(_2004) ? _2002 : min(_2004, _2002));
        float _2009 = (_2005 * _1521) + _1510;
        float _2010 = (_2005 * _1524) + _1514;
        float _2011 = (_2005 * _1527) + _1518;
        float _2012 = _2005 * 9.9999997473787516355514526367188e-05;
        float _2014 = (-1.0) - _2012;
        float _2016 = _2012 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2011 > _2016) || ((_2011 < _2014) || ((_2010 > _2016) || ((_2010 < _2014) || ((_2009 < _2014) || (_2009 > _2016))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2011, cbModelParam._m0[9u].z, fma(_2010, cbModelParam._m0[9u].y, _2009 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2011, cbModelParam._m0[10u].z, fma(_2010, cbModelParam._m0[10u].y, _2009 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2011, cbModelParam._m0[11u].z, fma(_2010, cbModelParam._m0[11u].y, _2009 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_13_35_ladder = _2135.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2135.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2135.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_13_35_ladder_2;
        _1545 = frontier_phi_13_35_ladder_1;
        _1547 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1463);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _498);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1609 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1613 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1617 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1620 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1623 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1626 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1764;
        if (_1620 > 0.0)
        {
            _1764 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1764 = frontier_phi_25_21_ladder;
        }
        float _2029;
        if (_1623 > 0.0)
        {
            _2029 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2029 = frontier_phi_37_32_ladder;
        }
        float _2234;
        if (_1626 > 0.0)
        {
            _2234 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2234 = frontier_phi_46_43_ladder;
        }
        float _2236 = isnan(_2029) ? _1764 : (isnan(_1764) ? _2029 : min(_1764, _2029));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1620) + _1609;
        float _2242 = (_2237 * _1623) + _1613;
        float _2243 = (_2237 * _1626) + _1617;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2244;
        float _2247 = _2244 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2243 > _2247) || ((_2243 < _2245) || ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 < _2245) || (_2241 > _2247))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2243, cbModelParam._m0[17u].z, fma(_2242, cbModelParam._m0[17u].y, _2241 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2243, cbModelParam._m0[18u].z, fma(_2242, cbModelParam._m0[18u].y, _2241 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2243, cbModelParam._m0[19u].z, fma(_2242, cbModelParam._m0[19u].y, _2241 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_22_46_ladder = _2442.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2442.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2442.x * cbModelParam._m0[1u].z;
        }
        _1645 = frontier_phi_22_46_ladder_2;
        _1647 = frontier_phi_22_46_ladder_1;
        _1649 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1552);
        _1645 = _1629.x * cbModelParam._m0[1u].z;
        _1647 = _1629.y * cbModelParam._m0[1u].z;
        _1649 = _1629.z * cbModelParam._m0[1u].z;
    }
    float _1661 = ((((1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_674 * _661)) * _645;
    float _1662 = _1661 * ((cbModelParam._m0[1u].w * (_1645 - _1543)) + _1543);
    float _1663 = _1661 * ((cbModelParam._m0[1u].w * (_1647 - _1545)) + _1545);
    float _1664 = _1661 * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1667 = fma(_1664, cbSceneParam._m0[89u].z, fma(_1663, cbSceneParam._m0[89u].y, _1662 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1664, cbSceneParam._m0[90u].z, fma(_1663, cbSceneParam._m0[90u].y, _1662 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1664, cbSceneParam._m0[91u].z, fma(_1663, cbSceneParam._m0[91u].y, _1662 * cbSceneParam._m0[91u].x));
    uvec4 _1683 = floatBitsToUint(cbInstanceData._m0[_620 + 5u]);
    uint _1685 = _1683.x * 14u;
    uint _1686 = _1685 + 13u;
    float _1693 = _645 + (-1.0);
    float _1698 = (cbLight._m0[_1686].x * _1693) + 1.0;
    float _1699 = (cbLight._m0[_1686].y * _1693) + 1.0;
    float _1700 = (cbLight._m0[_1686].z * _1693) + 1.0;
    float _1701 = (cbLight._m0[_1686].w * _1693) + 1.0;
    uint _1702 = _1685 + 5u;
    float _1708 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1712 = _1685 + 4u;
    float _1718 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1722 = _1685 | 1u;
    float _1733 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_495, _496, _497));
    float _1736 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_495, _496, _497));
    float _3818 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _3829 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1741 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.3183098733425140380859375;
    float _1743 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.3183098733425140380859375;
    float _1750 = ((cbLight._m0[_1702].x * _1708) * _1743) + ((cbLight._m0[_1712].x * _1718) * _1741);
    float _1751 = ((_1708 * cbLight._m0[_1702].y) * _1743) + ((_1718 * cbLight._m0[_1712].y) * _1741);
    float _1752 = ((_1708 * cbLight._m0[_1702].z) * _1743) + ((_1718 * cbLight._m0[_1712].z) * _1741);
    uvec4 _1756 = floatBitsToUint(cbLight._m0[_1685 + 12u]);
    bool _1758 = _1756.x == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1758)
    {
        _1769 = _1750;
        _1771 = _1751;
        _1773 = _1752;
    }
    else
    {
        uint _1777 = _1685 + 6u;
        float _1793 = (dot(vec3(cbLight._m0[_1685 + 2u].xyz), vec3(_495, _496, _497)) * 0.5) + 0.5;
        float _1794 = _1793 * _1793;
        float _3840 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1796 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1769 = (((cbLight._m0[_1777].x * 0.3183098733425140380859375) * _1795) * _1796) + _1750;
        _1771 = (((cbLight._m0[_1777].y * 0.3183098733425140380859375) * _1795) * _1796) + _1751;
        _1773 = (((cbLight._m0[_1777].z * 0.3183098733425140380859375) * _1795) * _1796) + _1752;
    }
    bool _1776 = _1756.y == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1776)
    {
        _1814 = _1769;
        _1816 = _1771;
        _1818 = _1773;
    }
    else
    {
        uint _1973 = _1685 + 7u;
        float _1989 = (dot(vec3(cbLight._m0[_1685 + 3u].xyz), vec3(_495, _496, _497)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _3856 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1992 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1814 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1769;
        _1816 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1771;
        _1818 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1773;
    }
    uint _1821 = _1685 + 8u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _498) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1685].x + _574;
    float _1837 = cbLight._m0[_1685].y + _575;
    float _1838 = cbLight._m0[_1685].z + _576;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1685].xyz));
    float _3872 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1850 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _1851 = dot(vec3(_495, _496, _497), vec3(_1843, _1844, _1845));
    float _3894 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1843, _1844, _1845));
    float _3905 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1835 * _1835;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1874 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1875 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1850 * ((_1849 * _1875) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1875) + _1835) * _1849))) * _1849;
    float _3916 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    uint _1899 = _1685 + 9u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _498) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1722].x + _574;
    float _1913 = cbLight._m0[_1722].y + _575;
    float _1914 = cbLight._m0[_1722].z + _576;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1722].xyz));
    float _3927 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1926 = dot(vec3(_495, _496, _497), vec3(_1919, _1920, _1921));
    float _3938 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1930 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1919, _1920, _1921));
    float _3949 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1934 = _1911 * _1911;
    float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
    float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1948 = 1.0 - _1911;
    float _1958 = (0.5 / (((_1850 * ((_1925 * _1948) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1948) + _1911) * _1925))) * _1925;
    float _3960 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
    float _1970 = (((_1947 * cbLight._m0[_1899].x) * _1960) * _1708) + (((_1874 * cbLight._m0[_1821].x) * _1888) * _1718);
    float _1971 = (((_1947 * cbLight._m0[_1899].y) * _1960) * _1708) + (((_1874 * cbLight._m0[_1821].y) * _1888) * _1718);
    float _1972 = (((_1947 * cbLight._m0[_1899].z) * _1960) * _1708) + (((_1874 * cbLight._m0[_1821].z) * _1888) * _1718);
    float _2034;
    float _2036;
    float _2038;
    if (_1758)
    {
        _2034 = _1970;
        _2036 = _1971;
        _2038 = _1972;
    }
    else
    {
        uint _2040 = _1685 + 2u;
        uint _2044 = _1685 + 10u;
        float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _498) * 0.949999988079071044921875);
        float _2059 = _2058 * _2058;
        float _2060 = cbLight._m0[_2040].x + _574;
        float _2061 = cbLight._m0[_2040].y + _575;
        float _2062 = cbLight._m0[_2040].z + _576;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2067 = _2066 * _2060;
        float _2068 = _2066 * _2061;
        float _2069 = _2066 * _2062;
        float _2070 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_2040].xyz));
        float _3971 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _2074 = dot(vec3(_495, _496, _497), vec3(_2067, _2068, _2069));
        float _3982 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2077 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _2078 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2067, _2068, _2069));
        float _3993 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2082 = _2059 * _2059;
        float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
        float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2096 = 1.0 - _2059;
        float _2106 = (0.5 / (((_1850 * ((_2073 * _2096) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2096) + _2059) * _2073))) * _2073;
        float _4004 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2108 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
        float _2109 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2034 = (((_2095 * cbLight._m0[_2044].x) * _2108) * _2109) + _1970;
        _2036 = (((_2095 * cbLight._m0[_2044].y) * _2108) * _2109) + _1971;
        _2038 = (((_2095 * cbLight._m0[_2044].z) * _2108) * _2109) + _1972;
    }
    float _2144;
    float _2146;
    float _2148;
    if (_1776)
    {
        _2144 = _2034;
        _2146 = _2036;
        _2148 = _2038;
    }
    else
    {
        uint _2155 = _1685 + 3u;
        uint _2159 = _1685 + 11u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _498) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _574;
        float _2176 = cbLight._m0[_2155].y + _575;
        float _2177 = cbLight._m0[_2155].z + _576;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_2155].xyz));
        float _4020 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _2189 = dot(vec3(_495, _496, _497), vec3(_2182, _2183, _2184));
        float _4031 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4042 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2211 = 1.0 - _2174;
        float _2221 = (0.5 / (((_1850 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2211) + _2174) * _2188))) * _2188;
        float _4053 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2144 = (((_2210 * cbLight._m0[_2159].x) * _2223) * _2224) + _2034;
        _2146 = (((_2210 * cbLight._m0[_2159].y) * _2223) * _2224) + _2036;
        _2148 = (((_2210 * cbLight._m0[_2159].z) * _2223) * _2224) + _2038;
    }
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_1683.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
        }
        else
        {
            float _2448;
            float _2450;
            float _2452;
            float _2454;
            float _2456;
            float _2458;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2608)
                {
                    frontier_phi_61_pred = _2592;
                    frontier_phi_61_pred_1 = _2597;
                    frontier_phi_61_pred_2 = _2596;
                    frontier_phi_61_pred_3 = _2595;
                    frontier_phi_61_pred_4 = _2594;
                    frontier_phi_61_pred_5 = _2593;
                }
                else
                {
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    uint _2722;
                    _2716 = _2592;
                    _2717 = _2593;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2607;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    for (;;)
                    {
                        uint _2726 = uint(findLSB(_2722)) + (_2598 << 5u);
                        uint _2723 = (_2722 + 4294967295u) & _2722;
                        uint _2728 = _2726 * 48u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2748 = (_2726 * 48u) + 4u;
                        vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 3u)).x));
                        uint _2767 = (_2726 * 48u) + 8u;
                        vec3 _2778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x));
                        float _2782 = _2742.x - _2300;
                        float _2783 = _2742.y - _2301;
                        float _2784 = _2742.z - _2302;
                        float _2785 = dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784));
                        float _2788 = inversesqrt(_2785);
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2792 = dot(vec3(_601, _604, _607), vec3(_2789, _2790, _2791));
                        float _2797 = 1.0 - (_2785 * _2742.w);
                        float _4079 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                        float _2799 = sqrt(_2785) * _2761.w;
                        float _2802 = 1.39999997615814208984375 / (_2799 + 1.39999997615814208984375);
                        float _2803 = _2802 * _2802;
                        float _2806 = ((1.0 - _2803) * _2792) + _2803;
                        float _2809 = _2799 * _2799;
                        float _2813 = ((isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))) * _2798) / ((_2809 * 0.699999988079071044921875) + 1.0);
                        float _2817 = (-0.0) - _2300;
                        float _2818 = (-0.0) - _2301;
                        float _2819 = (-0.0) - _2302;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2834 = exp2(log2(1.0 / ((_2809 * 3.5) + 5.0)) * 0.25);
                        float _2835 = 1.0 - _661;
                        float _2842 = sqrt(1.0 - ((1.0 - (_2835 * _2835)) * (1.0 - (_2834 * _2834))));
                        float _2843 = _2842 * _2842;
                        float _2844 = _2843 * _2843;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2847 = _2826 + _2791;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2855 = dot(vec3(_601, _604, _607), vec3(_2824, _2825, _2826));
                        float _4095 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2859 = dot(vec3(_601, _604, _607), vec3(_2851 * _2845, _2851 * _2846, _2851 * _2847));
                        float _4106 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2866 = ((_2862 * _2862) * (_2844 + (-1.0))) + 1.0;
                        float _2867 = _2802 * _2843;
                        float _2868 = _2867 * _2867;
                        float _2871 = ((1.0 - _2868) * _2792) + _2868;
                        float _4117 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2872 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2873 = 1.0 - _2843;
                        float _2883 = (0.5 / (((_2872 * ((_2858 * _2873) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2872 * _2873) + _2843) * _2858))) * _2872;
                        float _4128 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2894 = (((_2844 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_2866 * _2866) * ((_2809 * 2.1991131305694580078125) + 3.141590118408203125))) * _2798;
                        _2651 = (_2813 * _2761.x) + _2719;
                        _2652 = (_2813 * _2761.y) + _2720;
                        _2653 = (_2813 * _2761.z) + _2721;
                        _2648 = (_2894 * _2778.x) + _2716;
                        _2649 = (_2894 * _2778.y) + _2717;
                        _2650 = (_2894 * _2778.z) + _2718;
                        if (_2723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2716 = _2648;
                            _2717 = _2649;
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2723;
                        }
                    }
                    frontier_phi_61_pred = _2648;
                    frontier_phi_61_pred_1 = _2653;
                    frontier_phi_61_pred_2 = _2652;
                    frontier_phi_61_pred_3 = _2651;
                    frontier_phi_61_pred_4 = _2650;
                    frontier_phi_61_pred_5 = _2649;
                }
                _2448 = frontier_phi_61_pred;
                _2458 = frontier_phi_61_pred_1;
                _2456 = frontier_phi_61_pred_2;
                _2454 = frontier_phi_61_pred_3;
                _2452 = frontier_phi_61_pred_4;
                _2450 = frontier_phi_61_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2448;
                    _2593 = _2450;
                    _2594 = _2452;
                    _2595 = _2454;
                    _2596 = _2456;
                    _2597 = _2458;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
        }
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.z;
        uint _2464 = (_2462 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2464) & _2346) == 0u)
        {
            _2560 = _2447;
            _2562 = _2449;
            _2564 = _2451;
            _2566 = _2453;
            _2568 = _2455;
            _2570 = _2457;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2586 = _2585 * _2300;
            float _2587 = _2585 * _2301;
            float _2588 = _2585 * _2302;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2464 < ((_2462 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2699 = _2447;
                float _2700 = _2449;
                float _2701 = _2451;
                float _2702 = _2453;
                float _2703 = _2455;
                float _2704 = _2457;
                uint _2705 = _2464;
                uint _2714;
                bool _2715;
                for (;;)
                {
                    _2714 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                    _2715 = _2714 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2715)
                    {
                        frontier_phi_67_pred = _2702;
                        frontier_phi_67_pred_1 = _2703;
                        frontier_phi_67_pred_2 = _2704;
                        frontier_phi_67_pred_3 = _2701;
                        frontier_phi_67_pred_4 = _2700;
                        frontier_phi_67_pred_5 = _2699;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2699;
                        float _2913 = _2700;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        uint _2918 = _2714;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2302, _3039.z, fma(_2301, _3039.y, _3039.x * _2300)) + _3039.w;
                            _3052 = !((fma(_2302, _3020.z, fma(_2301, _3020.y, _3020.x * _2300)) + _3020.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2300;
                                float _3080 = _2944.y - _2301;
                                float _3081 = _2944.z - _2302;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4139 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_601, _604, _607))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2302, _2988.z, fma(_2301, _2988.y, _2988.x * _2300)) + _2988.w) / _3051;
                                float _3111 = (fma(_2302, _3004.z, fma(_2301, _3004.y, _3004.x * _2300)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4155 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _661;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2586;
                                float _3141 = _3087 - _2587;
                                float _3142 = _3088 - _2588;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4166 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3154 = dot(vec3(_601, _604, _607), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4177 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_601, _604, _607), vec3(_3086, _3087, _3088))) + _3163;
                                float _4188 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4199 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3191 * _2972.x;
                                frontier_phi_73_pred_1 = _3191 * _2972.y;
                                frontier_phi_73_pred_2 = _3117 * _2960.z;
                                frontier_phi_73_pred_3 = _3117 * _2960.y;
                                frontier_phi_73_pred_4 = _3117 * _2960.x;
                                frontier_phi_73_pred_5 = _3191 * _2972.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3195 = frontier_phi_73_pred;
                            _3196 = frontier_phi_73_pred_1;
                            _3200 = frontier_phi_73_pred_2;
                            _3199 = frontier_phi_73_pred_3;
                            _3198 = frontier_phi_73_pred_4;
                            _3197 = frontier_phi_73_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2902;
                        frontier_phi_67_pred_1 = _2903;
                        frontier_phi_67_pred_2 = _2904;
                        frontier_phi_67_pred_3 = _2901;
                        frontier_phi_67_pred_4 = _2900;
                        frontier_phi_67_pred_5 = _2899;
                    }
                    _2567 = frontier_phi_67_pred;
                    _2569 = frontier_phi_67_pred_1;
                    _2571 = frontier_phi_67_pred_2;
                    _2565 = frontier_phi_67_pred_3;
                    _2563 = frontier_phi_67_pred_4;
                    _2561 = frontier_phi_67_pred_5;
                    uint _2706 = _2705 + 1u;
                    if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2699 = _2561;
                        _2700 = _2563;
                        _2701 = _2565;
                        _2702 = _2567;
                        _2703 = _2569;
                        _2704 = _2571;
                        _2705 = _2706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2569;
                frontier_phi_55_56_ladder_1 = _2571;
                frontier_phi_55_56_ladder_2 = _2567;
                frontier_phi_55_56_ladder_3 = _2565;
                frontier_phi_55_56_ladder_4 = _2563;
                frontier_phi_55_56_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_55_56_ladder = _2455;
                frontier_phi_55_56_ladder_1 = _2457;
                frontier_phi_55_56_ladder_2 = _2453;
                frontier_phi_55_56_ladder_3 = _2451;
                frontier_phi_55_56_ladder_4 = _2449;
                frontier_phi_55_56_ladder_5 = _2447;
            }
            _2560 = frontier_phi_55_56_ladder_5;
            _2562 = frontier_phi_55_56_ladder_4;
            _2564 = frontier_phi_55_56_ladder_3;
            _2566 = frontier_phi_55_56_ladder_2;
            _2568 = frontier_phi_55_56_ladder;
            _2570 = frontier_phi_55_56_ladder_1;
        }
        float _2575 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2359 = (_2575 * _2566) + _1814;
        _2361 = (_2575 * _2568) + _1816;
        _2363 = (_2575 * _2570) + _1818;
        _2365 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2144;
        _2367 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2146;
        _2369 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2148;
    }
    else
    {
        _2359 = _1814;
        _2361 = _1816;
        _2363 = _1818;
        _2365 = _2144;
        _2367 = _2146;
        _2369 = _2148;
    }
    float _4215 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4226 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4237 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    uint _2389 = _620 + 6u;
    float _2397 = _582 / cbSceneParam._m0[86u].x;
    float _2398 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2412 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, (log2((isnan(cbSceneParam._m0[77u].w) ? _517 : (isnan(_517) ? cbSceneParam._m0[77u].w : min(_517, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2414 = _2412.x;
    float _2415 = _2412.y;
    float _2416 = _2412.z;
    float _2417 = _2412.w;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_517 > cbSceneParam._m0[78u].w)
    {
        float _2472 = isnan(_517) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _517 : min(cbSceneParam._m0[80u].w, _517));
        float _2473 = _2472 / _517;
        float _2484 = _2473 * _567;
        float _2485 = _568 * _2473;
        float _2486 = (-0.0) - _2485;
        float _2488 = _2473 * _569;
        float _2490 = (cbSceneParam._m0[77u].w * _2486) / _2472;
        float _2491 = _2490 + cbSceneParam._m0[79u].w;
        float _2492 = cbSceneParam._m0[79u].w - _2485;
        float _2498 = sqrt(((_2484 * _2484) + (_2485 * _2485)) + (_2488 * _2488));
        float _2501 = (1.0 - (cbSceneParam._m0[77u].w / _2472)) * _2498;
        float _2506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2661;
        if (abs((_2486 - _2490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2661 = ((((_2491 > 0.0) ? exp2(_2506 * _2491) : (2.0 - exp2(_2508 * _2491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2501;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : max(_2491, _2492));
            float _2623 = isnan(_2492) ? _2491 : (isnan(_2491) ? _2492 : min(_2491, _2492));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2661 = ((abs(_2498 / _2486) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2506 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2506 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2508 * _2632) - exp2(_2508 * _2633)) * _2621))) + (_2501 * cbSceneParam._m0[80u].z);
        }
        vec4 _2663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2397, _2398, 1.0), 0.0);
        float _2672 = exp2((_2661 * (-1.44269502162933349609375)) * (1.0 - _2663.w));
        float _2673 = log2(_2672);
        float _2689 = log2(_2417);
        _2510 = (exp2(_2689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].x)) * _2663.x) / cbSceneParam._m0[78u].x)) + _2414;
        _2512 = (exp2(_2689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].y)) * _2663.y) / cbSceneParam._m0[78u].y)) + _2415;
        _2514 = (exp2(_2689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2673 * cbSceneParam._m0[78u].z)) * _2663.z) / cbSceneParam._m0[78u].z)) + _2416;
        _2516 = _2672 * _2417;
    }
    else
    {
        _2510 = _2414;
        _2512 = _2415;
        _2514 = _2416;
        _2516 = _2417;
    }
    float _2528 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2529 = _2528 == 3.0;
    float _2530 = log2(_2516);
    float _2537 = exp2(_2530 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2359 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _645))) + ((_2365 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2538 = exp2(_2530 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2361 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _645))) + ((_2367 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2539 = exp2(_2530 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2363 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _645))) + ((_2369 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1452)) * cbPerFrame._m0[3u].x));
    float _2548 = (_2528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2548 * (_2529 ? _2537 : (_2537 + (cbSceneParam._m0[72u].w * _2510)));
    SV_Target.y = _2548 * (_2529 ? _2538 : (_2538 + (cbSceneParam._m0[72u].w * _2512)));
    SV_Target.z = _2548 * (_2529 ? _2539 : (_2539 + (cbSceneParam._m0[72u].w * _2514)));
    SV_Target.w = cbInstanceData._m0[_2389].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2389].w;
}


