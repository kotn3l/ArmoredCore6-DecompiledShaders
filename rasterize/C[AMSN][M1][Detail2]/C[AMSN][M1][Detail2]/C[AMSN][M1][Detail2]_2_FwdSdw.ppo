#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _249 = _247.x;
    vec4 _266 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3463 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))));
    float _284 = _266.z * cbMtdParam._m0[13u].y;
    float _287 = fma(_283, _197 * NORMAL.x, fma(_276, _204 * TANGENT.x, (_190 * _182) * _274));
    float _290 = fma(_283, _197 * NORMAL.y, fma(_276, _204 * TANGENT.y, (_190 * _183) * _274));
    float _293 = fma(_283, _197 * NORMAL.z, fma(_276, _204 * TANGENT.z, (_190 * _184) * _274));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3474 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _301 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3496 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3507 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3518 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _305 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _413 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _416 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = (_429 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3529 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _443 = 1.0 - _305;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _305;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _469 = _466.x * TEXCOORD_5.w;
    float _470 = dot(vec3(_298, _299, _300), vec3(_381, _382, _383));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _298) - _381;
    float _478 = (_473 * _299) - _382;
    float _479 = (_473 * _300) - _383;
    float _483 = abs(dot(vec3(_381, _382, _383), vec3(_298, _299, _300)));
    float _3562 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_301);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _298;
        float _602 = _537 + _299;
        float _603 = _541 + _300;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_298, _299, _300), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3610 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_298, _299, _300), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3643 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_298, _299, _300), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3676 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _298;
        float _916 = _537 + _299;
        float _917 = _541 + _300;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_298, _299, _300), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3739 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_298, _299, _300), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3772 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_298, _299, _300), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3805 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1371;
    float _1373;
    float _1375;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1338 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1342 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1346 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1349 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1352 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1355 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1383;
        if (_1349 > 0.0)
        {
            _1383 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1383 = frontier_phi_14_12_ladder;
        }
        float _1559;
        if (_1352 > 0.0)
        {
            _1559 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1559 = frontier_phi_23_19_ladder;
        }
        float _1855;
        if (_1355 > 0.0)
        {
            _1855 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1855 = frontier_phi_35_30_ladder;
        }
        float _1857 = isnan(_1559) ? _1383 : (isnan(_1383) ? _1559 : min(_1383, _1559));
        float _1858 = isnan(_1855) ? _1857 : (isnan(_1857) ? _1855 : min(_1857, _1855));
        float _1862 = (_1858 * _1349) + _1338;
        float _1863 = (_1858 * _1352) + _1342;
        float _1864 = (_1858 * _1355) + _1346;
        float _1865 = _1858 * 9.9999997473787516355514526367188e-05;
        float _1867 = (-1.0) - _1865;
        float _1869 = _1865 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1864 > _1869) || ((_1864 < _1867) || ((_1863 > _1869) || ((_1863 < _1867) || ((_1862 < _1867) || (_1862 > _1869))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1864, cbModelParam._m0[9u].z, fma(_1863, cbModelParam._m0[9u].y, _1862 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1864, cbModelParam._m0[10u].z, fma(_1863, cbModelParam._m0[10u].y, _1862 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1864, cbModelParam._m0[11u].z, fma(_1863, cbModelParam._m0[11u].y, _1862 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_13_35_ladder = _2009.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2009.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2009.x * cbModelParam._m0[1u].y;
        }
        _1371 = frontier_phi_13_35_ladder_2;
        _1373 = frontier_phi_13_35_ladder_1;
        _1375 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1290);
        _1371 = _1359.x * cbModelParam._m0[1u].y;
        _1373 = _1359.y * cbModelParam._m0[1u].y;
        _1375 = _1359.z * cbModelParam._m0[1u].y;
    }
    float _1379 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1379 : min(cbModelParam._m0[25u].w, _1379));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1437 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1441 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1445 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1448 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1451 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1454 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1564;
        if (_1448 > 0.0)
        {
            _1564 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1564 = frontier_phi_25_21_ladder;
        }
        float _1882;
        if (_1451 > 0.0)
        {
            _1882 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1882 = frontier_phi_37_32_ladder;
        }
        float _2220;
        if (_1454 > 0.0)
        {
            _2220 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2220 = frontier_phi_47_44_ladder;
        }
        float _2222 = isnan(_1882) ? _1564 : (isnan(_1564) ? _1882 : min(_1564, _1882));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1448) + _1437;
        float _2228 = (_2223 * _1451) + _1441;
        float _2229 = (_2223 * _1454) + _1445;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2230;
        float _2233 = _2230 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2229 > _2233) || ((_2229 < _2231) || ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 < _2231) || (_2227 > _2233))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2229, cbModelParam._m0[17u].z, fma(_2228, cbModelParam._m0[17u].y, _2227 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2229, cbModelParam._m0[18u].z, fma(_2228, cbModelParam._m0[18u].y, _2227 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2229, cbModelParam._m0[19u].z, fma(_2228, cbModelParam._m0[19u].y, _2227 * cbModelParam._m0[19u].x))), _1380);
            frontier_phi_22_47_ladder = _2351.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2351.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2351.x * cbModelParam._m0[1u].z;
        }
        _1473 = frontier_phi_22_47_ladder_2;
        _1475 = frontier_phi_22_47_ladder_1;
        _1477 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1380);
        _1473 = _1457.x * cbModelParam._m0[1u].z;
        _1475 = _1457.y * cbModelParam._m0[1u].z;
        _1477 = _1457.z * cbModelParam._m0[1u].z;
    }
    float _1490 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1473 - _1371)) + _1371);
    float _1492 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1494 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1490 * cbSceneParam._m0[91u].x));
    float _1538 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1551 = _1538 / _1550;
    float _1552 = _1542 / _1550;
    float _1553 = _1546 / _1550;
    float _1700;
    float _1701;
    float _1702;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1580 = ((uint(_1553 > cbSceneParam._m0[59u].y) + uint(_1553 > cbSceneParam._m0[59u].x)) + uint(_1553 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1581 = _1580 + 43u;
        uint _1589 = _1580 + 44u;
        uint _1597 = _1580 + 45u;
        uint _1605 = _1580 + 46u;
        float _1616 = fma(_1550, cbSceneParam._m0[_1581].w, fma(_1546, cbSceneParam._m0[_1581].z, fma(_1542, cbSceneParam._m0[_1581].y, _1538 * cbSceneParam._m0[_1581].x)));
        float _1620 = fma(_1550, cbSceneParam._m0[_1589].w, fma(_1546, cbSceneParam._m0[_1589].z, fma(_1542, cbSceneParam._m0[_1589].y, _1538 * cbSceneParam._m0[_1589].x)));
        float _1628 = fma(_1550, cbSceneParam._m0[_1605].w, fma(_1546, cbSceneParam._m0[_1605].z, fma(_1542, cbSceneParam._m0[_1605].y, _1538 * cbSceneParam._m0[_1605].x)));
        float _1633 = cbSceneParam._m0[33u].z * _1628;
        float _1635 = cbSceneParam._m0[33u].w * _1628;
        float _1638 = fma(_1550, cbSceneParam._m0[_1597].w, fma(_1546, cbSceneParam._m0[_1597].z, fma(_1542, cbSceneParam._m0[_1597].y, _1538 * cbSceneParam._m0[_1597].x))) / _1628;
        float _1686 = (cbSceneParam._m0[33u].x - sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553))) * cbSceneParam._m0[33u].y;
        float _3931 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1693 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1633 + _1616) / _1628, (_1635 + _1620) / _1628), _1638), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1635 + _1616) / _1628, (_1620 - _1633) / _1628), _1638), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1616 - _1633) / _1628, (_1620 - _1635) / _1628), _1638), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1616 - _1635) / _1628, (_1633 + _1620) / _1628), _1638), 0.0)).x), vec4(0.25)));
        _1700 = 1.0 - (_1693 * cbSceneParam._m0[34u].x);
        _1701 = 1.0 - (_1693 * cbSceneParam._m0[34u].y);
        _1702 = 1.0 - (_1693 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1700 = 1.0;
        _1701 = 1.0;
        _1702 = 1.0;
    }
    float _1766;
    float _1768;
    float _1770;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1754 = fma(_1550, cbSceneParam._m0[63u].w, fma(_1546, cbSceneParam._m0[63u].z, fma(_1542, cbSceneParam._m0[63u].y, _1538 * cbSceneParam._m0[63u].x)));
        float _1755 = fma(_1550, cbSceneParam._m0[60u].w, fma(_1546, cbSceneParam._m0[60u].z, fma(_1542, cbSceneParam._m0[60u].y, _1538 * cbSceneParam._m0[60u].x))) / _1754;
        float _1756 = fma(_1550, cbSceneParam._m0[61u].w, fma(_1546, cbSceneParam._m0[61u].z, fma(_1542, cbSceneParam._m0[61u].y, _1538 * cbSceneParam._m0[61u].x))) / _1754;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1755 >= cbSceneParam._m0[64u].x) && (_1756 >= cbSceneParam._m0[64u].y)) && (_1755 <= cbSceneParam._m0[64u].z)) && (_1756 <= cbSceneParam._m0[64u].w))
        {
            float _1895 = fma(_1550, cbSceneParam._m0[62u].w, fma(_1546, cbSceneParam._m0[62u].z, fma(_1542, cbSceneParam._m0[62u].y, _1538 * cbSceneParam._m0[62u].x))) / _1754;
            float _1899 = isnan(cbSceneParam._m0[41u].w) ? _1895 : (isnan(_1895) ? cbSceneParam._m0[41u].w : max(_1895, cbSceneParam._m0[41u].w));
            float _1942 = (cbSceneParam._m0[33u].x - sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553))) * cbSceneParam._m0[33u].y;
            float _3947 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
            float _1949 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1755, cbSceneParam._m0[33u].w + _1756), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1755, _1756 - cbSceneParam._m0[33u].z), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1755 - cbSceneParam._m0[33u].z, _1756 - cbSceneParam._m0[33u].w), _1899), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1755 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1756), _1899), 0.0)).x), vec4(0.25)));
            float _1953 = 1.0 - (_1949 * cbSceneParam._m0[34u].x);
            float _1954 = 1.0 - (_1949 * cbSceneParam._m0[34u].y);
            float _1955 = 1.0 - (_1949 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1955) ? _1702 : (isnan(_1702) ? _1955 : min(_1702, _1955));
            frontier_phi_34_33_ladder_1 = isnan(_1954) ? _1701 : (isnan(_1701) ? _1954 : min(_1701, _1954));
            frontier_phi_34_33_ladder_2 = isnan(_1953) ? _1700 : (isnan(_1700) ? _1953 : min(_1700, _1953));
        }
        else
        {
            frontier_phi_34_33_ladder = _1702;
            frontier_phi_34_33_ladder_1 = _1701;
            frontier_phi_34_33_ladder_2 = _1700;
        }
        _1766 = frontier_phi_34_33_ladder_2;
        _1768 = frontier_phi_34_33_ladder_1;
        _1770 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1766 = _1700;
        _1768 = _1701;
        _1770 = _1702;
    }
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _469 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1814 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1818 = _1777 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_298, _299, _300));
    float _1832 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_298, _299, _300));
    float _3983 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _3994 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1837 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _1839 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1846 = ((cbLight._m0[_1794].x * _1800) * _1839) + (((cbLight._m0[_1804].x * _1766) * _1814) * _1837);
    float _1847 = ((_1800 * cbLight._m0[_1794].y) * _1839) + (((cbLight._m0[_1804].y * _1768) * _1814) * _1837);
    float _1848 = ((_1800 * cbLight._m0[_1794].z) * _1839) + (((cbLight._m0[_1804].z * _1770) * _1814) * _1837);
    uvec4 _1852 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1854 = _1852.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1854)
    {
        _1956 = _1846;
        _1958 = _1847;
        _1960 = _1848;
    }
    else
    {
        uint _1964 = _1777 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4005 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1983 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1846;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1847;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1848;
    }
    bool _1963 = _1852.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1963)
    {
        _2018 = _1956;
        _2020 = _1958;
        _2022 = _1960;
    }
    else
    {
        uint _2191 = _1777 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4021 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2210 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2018 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1956;
        _2020 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1958;
        _2022 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1960;
    }
    uint _2025 = _1777 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _301) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1777].x + _381;
    float _2041 = cbLight._m0[_1777].y + _382;
    float _2042 = cbLight._m0[_1777].z + _383;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1777].xyz));
    float _4037 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _2054 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _2055 = dot(vec3(_298, _299, _300), vec3(_2047, _2048, _2049));
    float _4059 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_2047, _2048, _2049));
    float _4070 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0);
    float _2076 = 0.959999978542327880859375 - _451;
    float _2078 = 0.959999978542327880859375 - _452;
    float _2079 = 0.959999978542327880859375 - _453;
    float _2086 = 1.0 - _2039;
    float _2097 = (0.5 / (((_2054 * ((_2053 * _2086) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2086) + _2039) * _2053))) * _2053;
    float _4081 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2113 = _1777 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _301) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1818].x + _381;
    float _2127 = cbLight._m0[_1818].y + _382;
    float _2128 = cbLight._m0[_1818].z + _383;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1818].xyz));
    float _4092 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2140 = dot(vec3(_298, _299, _300), vec3(_2133, _2134, _2135));
    float _4103 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2133, _2134, _2135));
    float _4114 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0);
    float _2166 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2054 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2166) + _2125) * _2139))) * _2139;
    float _4125 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2188 = (((((_2159 * _2076) + _454) * cbLight._m0[_2113].x) * _2178) * _1800) + ((((cbLight._m0[_2025].x * _1766) * ((_2075 * _2076) + _454)) * _2099) * _1814);
    float _2189 = (((((_2159 * _2078) + _456) * cbLight._m0[_2113].y) * _2178) * _1800) + ((((cbLight._m0[_2025].y * _1768) * ((_2075 * _2078) + _456)) * _2099) * _1814);
    float _2190 = (((((_2159 * _2079) + _457) * cbLight._m0[_2113].z) * _2178) * _1800) + ((((cbLight._m0[_2025].z * _1770) * ((_2075 * _2079) + _457)) * _2099) * _1814);
    float _2246;
    float _2248;
    float _2250;
    if (_1854)
    {
        _2246 = _2188;
        _2248 = _2189;
        _2250 = _2190;
    }
    else
    {
        uint _2252 = _1777 + 2u;
        uint _2256 = _1777 + 10u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _301) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _381;
        float _2273 = cbLight._m0[_2252].y + _382;
        float _2274 = cbLight._m0[_2252].z + _383;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2252].xyz));
        float _4136 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2286 = dot(vec3(_298, _299, _300), vec3(_2279, _2280, _2281));
        float _4147 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4158 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
        float _2312 = 1.0 - _2271;
        float _2322 = (0.5 / (((_2054 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2312) + _2271) * _2285))) * _2285;
        float _4169 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2246 = (((((_2305 * _2076) + _454) * cbLight._m0[_2256].x) * _2324) * _2325) + _2188;
        _2248 = (((((_2305 * _2078) + _456) * cbLight._m0[_2256].y) * _2324) * _2325) + _2189;
        _2250 = (((((_2305 * _2079) + _457) * cbLight._m0[_2256].z) * _2324) * _2325) + _2190;
    }
    float _2356;
    float _2358;
    float _2360;
    if (_1963)
    {
        _2356 = _2246;
        _2358 = _2248;
        _2360 = _2250;
    }
    else
    {
        uint _2367 = _1777 + 3u;
        uint _2371 = _1777 + 11u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _301) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _381;
        float _2388 = cbLight._m0[_2367].y + _382;
        float _2389 = cbLight._m0[_2367].z + _383;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2367].xyz));
        float _4185 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2401 = dot(vec3(_298, _299, _300), vec3(_2394, _2395, _2396));
        float _4196 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4207 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2420 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
        float _2427 = 1.0 - _2386;
        float _2437 = (0.5 / (((_2054 * ((_2400 * _2427) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2427) + _2386) * _2400))) * _2400;
        float _4218 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2356 = (((((_2420 * _2076) + _454) * cbLight._m0[_2371].x) * _2439) * _2440) + _2246;
        _2358 = (((((_2420 * _2078) + _456) * cbLight._m0[_2371].y) * _2439) * _2440) + _2248;
        _2360 = (((((_2420 * _2079) + _457) * cbLight._m0[_2371].z) * _2439) * _2440) + _2250;
    }
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_1775.y == 0u)
    {
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2462)));
        float _2483 = (log2(_1553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
        }
        else
        {
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            uint _2724 = 0u;
            uint _2733;
            bool _2734;
            for (;;)
            {
                _2733 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2724 << 2u)) >> 2u)).x;
                _2734 = _2733 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2734)
                {
                    frontier_phi_66_pred = _2723;
                    frontier_phi_66_pred_1 = _2722;
                    frontier_phi_66_pred_2 = _2721;
                    frontier_phi_66_pred_3 = _2720;
                    frontier_phi_66_pred_4 = _2719;
                    frontier_phi_66_pred_5 = _2718;
                }
                else
                {
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    uint _2848;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2733;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    for (;;)
                    {
                        uint _2852 = uint(findLSB(_2848)) + (_2724 << 5u);
                        uint _2849 = (_2848 + 4294967295u) & _2848;
                        uint _2854 = _2852 * 48u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2874 = (_2852 * 48u) + 4u;
                        vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2893 = (_2852 * 48u) + 8u;
                        vec3 _2904 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x));
                        float _2908 = _2868.x - _1551;
                        float _2909 = _2868.y - _1552;
                        float _2910 = _2868.z - _1553;
                        float _2911 = dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910));
                        float _2914 = inversesqrt(_2911);
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2918 = dot(vec3(_410, _413, _416), vec3(_2915, _2916, _2917));
                        float _2923 = 1.0 - (_2911 * _2868.w);
                        float _4244 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2924 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2925 = sqrt(_2911) * _2887.w;
                        float _2928 = 1.39999997615814208984375 / (_2925 + 1.39999997615814208984375);
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2918) + _2929;
                        float _2935 = _2925 * _2925;
                        float _2939 = ((isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0))) * _2924) / ((_2935 * 0.699999988079071044921875) + 1.0);
                        float _2943 = (-0.0) - _1551;
                        float _2944 = (-0.0) - _1552;
                        float _2945 = (-0.0) - _1553;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2959 = exp2(log2(1.0 / ((_2935 * 3.5) + 5.0)) * 0.25);
                        float _2960 = 1.0 - _485;
                        float _2967 = sqrt(1.0 - ((1.0 - (_2960 * _2960)) * (1.0 - (_2959 * _2959))));
                        float _2968 = _2967 * _2967;
                        float _2969 = _2968 * _2968;
                        float _2970 = _2950 + _2915;
                        float _2971 = _2951 + _2916;
                        float _2972 = _2952 + _2917;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2980 = dot(vec3(_410, _413, _416), vec3(_2950, _2951, _2952));
                        float _4260 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2984 = dot(vec3(_410, _413, _416), vec3(_2976 * _2970, _2976 * _2971, _2976 * _2972));
                        float _4271 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2991 = ((_2987 * _2987) * (_2969 + (-1.0))) + 1.0;
                        float _2992 = _2928 * _2968;
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2918) + _2993;
                        float _4282 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2998 = 1.0 - _2968;
                        float _3008 = (0.5 / (((_2997 * ((_2983 * _2998) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2997 * _2998) + _2968) * _2983))) * _2997;
                        float _4293 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3019 = (((_2969 * 3.1415927410125732421875) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) / ((_2991 * _2991) * ((_2935 * 2.1991131305694580078125) + 3.141590118408203125))) * _2924;
                        _2777 = (_2939 * _2887.x) + _2845;
                        _2778 = (_2939 * _2887.y) + _2846;
                        _2779 = (_2939 * _2887.z) + _2847;
                        _2774 = (_3019 * _2904.x) + _2842;
                        _2775 = (_3019 * _2904.y) + _2843;
                        _2776 = (_3019 * _2904.z) + _2844;
                        if (_2849 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2849;
                        }
                    }
                    frontier_phi_66_pred = _2779;
                    frontier_phi_66_pred_1 = _2778;
                    frontier_phi_66_pred_2 = _2777;
                    frontier_phi_66_pred_3 = _2776;
                    frontier_phi_66_pred_4 = _2775;
                    frontier_phi_66_pred_5 = _2774;
                }
                _2584 = frontier_phi_66_pred;
                _2582 = frontier_phi_66_pred_1;
                _2580 = frontier_phi_66_pred_2;
                _2578 = frontier_phi_66_pred_3;
                _2576 = frontier_phi_66_pred_4;
                _2574 = frontier_phi_66_pred_5;
                uint _2725 = _2724 + 1u;
                if (_2725 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2718 = _2574;
                    _2719 = _2576;
                    _2720 = _2578;
                    _2721 = _2580;
                    _2722 = _2582;
                    _2723 = _2584;
                    _2724 = _2725;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
        }
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.z;
        uint _2590 = (_2588 >> 8u) & 15u;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((4294967295u << _2590) & _2493) == 0u)
        {
            _2686 = _2573;
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
            _2696 = _2583;
        }
        else
        {
            float _2711 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
            float _2712 = _2711 * _1551;
            float _2713 = _2711 * _1552;
            float _2714 = _2711 * _1553;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2590 < ((_2588 >> 12u) & 15u))
            {
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2825 = _2573;
                float _2826 = _2575;
                float _2827 = _2577;
                float _2828 = _2579;
                float _2829 = _2581;
                float _2830 = _2583;
                uint _2831 = _2590;
                uint _2840;
                bool _2841;
                for (;;)
                {
                    _2840 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                    _2841 = _2840 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2841)
                    {
                        frontier_phi_72_pred = _2830;
                        frontier_phi_72_pred_1 = _2829;
                        frontier_phi_72_pred_2 = _2828;
                        frontier_phi_72_pred_3 = _2827;
                        frontier_phi_72_pred_4 = _2826;
                        frontier_phi_72_pred_5 = _2825;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3037 = _2825;
                        float _3038 = _2826;
                        float _3039 = _2827;
                        float _3040 = _2828;
                        float _3041 = _2829;
                        float _3042 = _2830;
                        uint _3043 = _2840;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3054 = ((_2831 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3054 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3054 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3054 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_1553, _3164.z, fma(_1552, _3164.y, _3164.x * _1551)) + _3164.w;
                            _3177 = !((fma(_1553, _3145.z, fma(_1552, _3145.y, _3145.x * _1551)) + _3145.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3177)
                            {
                                float _3204 = _3069.x - _1551;
                                float _3205 = _3069.y - _1552;
                                float _3206 = _3069.z - _1553;
                                float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                                float _3210 = inversesqrt(_3207);
                                float _3211 = _3210 * _3204;
                                float _3212 = _3210 * _3205;
                                float _3213 = _3210 * _3206;
                                float _3217 = 1.0 - (_3207 / (_3070 * _3070));
                                float _4304 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3222 = sqrt(_3207) * _3085.w;
                                float _3224 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                                float _3225 = _3224 * _3224;
                                float _3228 = ((1.0 - _3225) * dot(vec3(_3211, _3212, _3213), vec3(_410, _413, _416))) + _3225;
                                float _3231 = _3222 * _3222;
                                float _3235 = (fma(_1553, _3113.z, fma(_1552, _3113.y, _3113.x * _1551)) + _3113.w) / _3176;
                                float _3236 = (fma(_1553, _3129.z, fma(_1552, _3129.y, _3129.x * _1551)) + _3129.w) / _3176;
                                float _3240 = 1.0 - dot(vec2(_3235, _3236), vec2(_3235, _3236));
                                float _4320 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3242 = _3241 * (((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3218) / ((_3231 * 0.699999988079071044921875) + 1.0));
                                float _3254 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                                float _3255 = 1.0 - _485;
                                float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                                float _3263 = _3262 * _3262;
                                float _3264 = _3263 * _3263;
                                float _3265 = _3211 - _2712;
                                float _3266 = _3212 - _2713;
                                float _3267 = _3213 - _2714;
                                float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                                float _3275 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2712, (-0.0) - _2713, (-0.0) - _2714));
                                float _4331 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3279 = dot(vec3(_410, _413, _416), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                                float _4342 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                                float _3287 = _3224 * _3263;
                                float _3288 = _3287 * _3287;
                                float _3294 = ((1.0 - _3288) * dot(vec3(_410, _413, _416), vec3(_3211, _3212, _3213))) + _3288;
                                float _4353 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3296 = 1.0 - _3263;
                                float _3306 = (0.5 / (((_3295 * ((_3278 * _3296) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3263) * _3278))) * _3295;
                                float _4364 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3316 = (_3241 * _3218) * (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3286 * _3286) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3242 * _3085.y;
                                frontier_phi_78_pred_1 = _3242 * _3085.x;
                                frontier_phi_78_pred_2 = _3316 * _3097.z;
                                frontier_phi_78_pred_3 = _3316 * _3097.y;
                                frontier_phi_78_pred_4 = _3316 * _3097.x;
                                frontier_phi_78_pred_5 = _3242 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3324 = frontier_phi_78_pred;
                            _3323 = frontier_phi_78_pred_1;
                            _3322 = frontier_phi_78_pred_2;
                            _3321 = frontier_phi_78_pred_3;
                            _3320 = frontier_phi_78_pred_4;
                            _3325 = frontier_phi_78_pred_5;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            _3026 = _3322 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3029;
                        frontier_phi_72_pred_1 = _3028;
                        frontier_phi_72_pred_2 = _3027;
                        frontier_phi_72_pred_3 = _3026;
                        frontier_phi_72_pred_4 = _3025;
                        frontier_phi_72_pred_5 = _3024;
                    }
                    _2697 = frontier_phi_72_pred;
                    _2695 = frontier_phi_72_pred_1;
                    _2693 = frontier_phi_72_pred_2;
                    _2691 = frontier_phi_72_pred_3;
                    _2689 = frontier_phi_72_pred_4;
                    _2687 = frontier_phi_72_pred_5;
                    uint _2832 = _2831 + 1u;
                    if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2825 = _2687;
                        _2826 = _2689;
                        _2827 = _2691;
                        _2828 = _2693;
                        _2829 = _2695;
                        _2830 = _2697;
                        _2831 = _2832;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2697;
                frontier_phi_60_61_ladder_1 = _2695;
                frontier_phi_60_61_ladder_2 = _2691;
                frontier_phi_60_61_ladder_3 = _2689;
                frontier_phi_60_61_ladder_4 = _2687;
                frontier_phi_60_61_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_60_61_ladder = _2583;
                frontier_phi_60_61_ladder_1 = _2581;
                frontier_phi_60_61_ladder_2 = _2577;
                frontier_phi_60_61_ladder_3 = _2575;
                frontier_phi_60_61_ladder_4 = _2573;
                frontier_phi_60_61_ladder_5 = _2579;
            }
            _2686 = frontier_phi_60_61_ladder_4;
            _2688 = frontier_phi_60_61_ladder_3;
            _2690 = frontier_phi_60_61_ladder_2;
            _2692 = frontier_phi_60_61_ladder_5;
            _2694 = frontier_phi_60_61_ladder_1;
            _2696 = frontier_phi_60_61_ladder;
        }
        float _2701 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2506 = (_2701 * _2692) + _2018;
        _2508 = (_2701 * _2694) + _2020;
        _2510 = (_2701 * _2696) + _2022;
        _2512 = ((_2686 * _454) * _2701) + _2356;
        _2514 = ((_2688 * _456) * _2701) + _2358;
        _2516 = ((_2690 * _457) * _2701) + _2360;
    }
    else
    {
        _2506 = _2018;
        _2508 = _2020;
        _2510 = _2022;
        _2512 = _2356;
        _2514 = _2358;
        _2516 = _2360;
    }
    float _4380 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4391 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4402 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _2536 = _429 + 6u;
    float _2544 = _389 / cbSceneParam._m0[86u].x;
    float _2545 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2598 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2599 = _2598 / _321;
        float _2610 = _2599 * _374;
        float _2611 = _375 * _2599;
        float _2612 = (-0.0) - _2611;
        float _2614 = _2599 * _376;
        float _2616 = (cbSceneParam._m0[77u].w * _2612) / _2598;
        float _2617 = _2616 + cbSceneParam._m0[79u].w;
        float _2618 = cbSceneParam._m0[79u].w - _2611;
        float _2624 = sqrt(((_2610 * _2610) + (_2611 * _2611)) + (_2614 * _2614));
        float _2627 = (1.0 - (cbSceneParam._m0[77u].w / _2598)) * _2624;
        float _2632 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2634 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2787;
        if (abs((_2612 - _2616) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2787 = ((((_2617 > 0.0) ? exp2(_2632 * _2617) : (2.0 - exp2(_2634 * _2617))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2627;
        }
        else
        {
            float _2747 = 1.0 / cbSceneParam._m0[80u].x;
            float _2748 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : max(_2617, _2618));
            float _2749 = isnan(_2618) ? _2617 : (isnan(_2617) ? _2618 : min(_2617, _2618));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            _2787 = ((abs(_2624 / _2612) * cbSceneParam._m0[80u].y) * ((((_2758 - _2759) * 2.0) - ((exp2(_2632 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)))) - exp2(_2632 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0))))) * _2747)) - ((exp2(_2634 * _2758) - exp2(_2634 * _2759)) * _2747))) + (_2627 * cbSceneParam._m0[80u].z);
        }
        vec4 _2789 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2798 = exp2((_2787 * (-1.44269502162933349609375)) * (1.0 - _2789.w));
        float _2799 = log2(_2798);
        float _2815 = log2(_2564);
        _2636 = (exp2(_2815 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].x)) * _2789.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2638 = (exp2(_2815 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].y)) * _2789.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2640 = (exp2(_2815 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2799 * cbSceneParam._m0[78u].z)) * _2789.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2642 = _2798 * _2564;
    }
    else
    {
        _2636 = _2561;
        _2638 = _2562;
        _2640 = _2563;
        _2642 = _2564;
    }
    float _2654 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2655 = _2654 == 3.0;
    float _2656 = log2(_2642);
    float _2663 = exp2(_2656 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2506 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _469))) + ((_2512 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2664 = exp2(_2656 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2508 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _469))) + ((_2514 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2665 = exp2(_2656 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2510 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _469))) + ((_2516 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2674 = (_2654 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2674 * (_2655 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2636)));
    SV_Target.y = _2674 * (_2655 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.z = _2674 * (_2655 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.w = cbInstanceData._m0[_2536].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
}


