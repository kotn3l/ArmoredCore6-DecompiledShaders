#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _958;
float _3326;
float _3327;
float _3328;
float _3329;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _301 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3338 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _309 = (_302 * ((_270.x * cbMtdParam._m0[10u].x) - _245)) + _245;
    float _310 = (_302 * ((_270.y * cbMtdParam._m0[10u].y) - _246)) + _246;
    float _311 = (_302 * ((_270.z * cbMtdParam._m0[10u].z) - _247)) + _247;
    vec4 _328 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3349 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))));
    float _345 = _328.z * cbMtdParam._m0[13u].y;
    vec4 _358 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _372 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_358.z * cbMtdParam._m0[13u].x) - _345)) + _345;
    float _378 = ((((_358.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _336;
    float _379 = ((((_358.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _338;
    float _382 = fma(_344, _209 * NORMAL.x, fma(_379, _216 * TANGENT.x, (_202 * _194) * _378));
    float _385 = fma(_344, _209 * NORMAL.y, fma(_379, _216 * TANGENT.y, (_202 * _195) * _378));
    float _388 = fma(_344, _209 * NORMAL.z, fma(_379, _216 * TANGENT.z, (_202 * _196) * _378));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3360 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _396 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3382 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3393 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    vec4 _480 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _482 = _480.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _638 = sqrt(((_466 * _466) + (_467 * _467)) + (_468 * _468));
        float _644 = (cbMatDynParam._m0[5u].x * _638) + cbMatDynParam._m0[5u].y;
        float _3404 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _649 = (cbMatDynParam._m0[5u].z * _638) + cbMatDynParam._m0[5u].w;
        float _3415 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) - _645)) + _645) < ((_482 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _494 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _495 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _514 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _517 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _520 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _533 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = _533 + 9u;
    uint _535 = _534 + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3426 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    vec4 _555 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _494, cbSceneParam._m0[86u].y * _495));
    float _558 = _555.x * TEXCOORD_5.w;
    float _559 = dot(vec3(_393, _394, _395), vec3(_473, _474, _475));
    float _562 = _559 * 2.0;
    float _566 = (_562 * _393) - _473;
    float _567 = (_562 * _394) - _474;
    float _568 = (_562 * _395) - _475;
    float _572 = abs(dot(vec3(_473, _474, _475), vec3(_393, _394, _395)));
    float _3459 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _574 = sqrt(_396);
    float _587 = exp2((_574 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_574 * 3.0));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _957;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = fma(_627, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619));
        float _686 = fma(_627, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619));
        float _690 = fma(_627, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619));
        float _715 = _619 + _393;
        float _716 = _623 + _394;
        float _717 = _627 + _395;
        float _727 = fma(_717, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) - _682;
        float _728 = fma(_717, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) - _686;
        float _729 = fma(_717, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) - _690;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_682 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_686 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[34u].z) + ((((((_690 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _785 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_751.x + (-0.5));
        float _787 = _785 * (_751.y + (-0.5));
        float _788 = _785 * (_751.z + (-0.5));
        float _795 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_758.x + (-0.5));
        float _797 = _795 * (_758.y + (-0.5));
        float _798 = _795 * (_758.z + (-0.5));
        float _805 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_765.x + (-0.5));
        float _807 = _805 * (_765.y + (-0.5));
        float _808 = _805 * (_765.z + (-0.5));
        float _815 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_772.x + (-0.5));
        float _817 = _815 * (_772.y + (-0.5));
        float _818 = _815 * (_772.z + (-0.5));
        float _819 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _820 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _821 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _822 = _786 * 0.5;
        float _823 = _796 * 0.5;
        float _824 = _806 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _839 = (dot(vec3(_393, _394, _395), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _849 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_819 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3507 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_851 + 1.0))) + _856) * _819;
        float _866 = _787 * 0.5;
        float _867 = _797 * 0.5;
        float _868 = _807 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_393, _394, _395), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_820 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3540 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_893 + 1.0))) + _898) * _820;
        float _908 = _788 * 0.5;
        float _909 = _798 * 0.5;
        float _910 = _808 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_393, _394, _395), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_821 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3573 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_935 + 1.0))) + _940) * _821;
        _957 = _788;
        _959 = _787;
        _960 = _786;
        _961 = _798;
        _962 = _797;
        _963 = _796;
        _964 = _808;
        _965 = _807;
        _966 = _806;
        _967 = _821;
        _968 = _820;
        _969 = _819;
        _970 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _971 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _972 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
    }
    else
    {
        _957 = _958;
        _959 = _958;
        _960 = _958;
        _961 = _958;
        _962 = _958;
        _963 = _958;
        _964 = _958;
        _965 = _958;
        _966 = _958;
        _967 = _958;
        _968 = _958;
        _969 = _958;
        _970 = 0.0;
        _971 = 0.0;
        _972 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_627, cbModelParam._m0[30u].z, fma(_623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _619));
        float _1005 = fma(_627, cbModelParam._m0[31u].z, fma(_623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _619));
        float _1009 = fma(_627, cbModelParam._m0[32u].z, fma(_623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _619));
        float _1032 = _619 + _393;
        float _1033 = _623 + _394;
        float _1034 = _627 + _395;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_393, _394, _395), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3636 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_393, _394, _395), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3669 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_393, _394, _395), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3702 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _958;
        _1271 = _958;
        _1272 = _958;
        _1273 = _958;
        _1274 = _958;
        _1275 = _958;
        _1276 = _958;
        _1277 = _958;
        _1278 = _958;
        _1279 = _958;
        _1280 = _958;
        _1281 = _958;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _970)) + _970;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _971)) + _971;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _972)) + _972;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _566 * 0.5;
    float _1339 = _567 * 0.5;
    float _1340 = _568 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_957, _961, _964, _967));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_959, _962, _965, _968));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_960, _963, _966, _969));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_627, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_627, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_627, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_568, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566));
        float _1469 = fma(_568, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566));
        float _1472 = fma(_568, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1500 = frontier_phi_17_15_ladder;
        }
        float _1705;
        if (_1469 > 0.0)
        {
            _1705 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1705 = frontier_phi_26_22_ladder;
        }
        float _1948;
        if (_1472 > 0.0)
        {
            _1948 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1948 = frontier_phi_38_33_ladder;
        }
        float _1950 = isnan(_1705) ? _1500 : (isnan(_1500) ? _1705 : min(_1500, _1705));
        float _1951 = isnan(_1948) ? _1950 : (isnan(_1950) ? _1948 : min(_1950, _1948));
        float _1955 = (_1951 * _1466) + _1455;
        float _1956 = (_1951 * _1469) + _1459;
        float _1957 = (_1951 * _1472) + _1463;
        float _1958 = _1951 * 9.9999997473787516355514526367188e-05;
        float _1960 = (-1.0) - _1958;
        float _1962 = _1958 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1957 > _1962) || ((_1957 < _1960) || ((_1956 > _1962) || ((_1956 < _1960) || ((_1955 < _1960) || (_1955 > _1962))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2081 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1957, cbModelParam._m0[9u].z, fma(_1956, cbModelParam._m0[9u].y, _1955 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1957, cbModelParam._m0[10u].z, fma(_1956, cbModelParam._m0[10u].y, _1955 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1957, cbModelParam._m0[11u].z, fma(_1956, cbModelParam._m0[11u].y, _1955 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_16_38_ladder = _2081.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2081.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2081.x * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_16_38_ladder_2;
        _1490 = frontier_phi_16_38_ladder_1;
        _1492 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_566, _567, _568), _1407);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1554 = fma(_627, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619)) + cbModelParam._m0[21u].w;
        float _1558 = fma(_627, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619)) + cbModelParam._m0[22u].w;
        float _1562 = fma(_627, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619)) + cbModelParam._m0[23u].w;
        float _1565 = fma(_568, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566));
        float _1568 = fma(_568, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566));
        float _1571 = fma(_568, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566));
        float _1710;
        if (_1565 > 0.0)
        {
            _1710 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1710 = frontier_phi_28_24_ladder;
        }
        float _1975;
        if (_1568 > 0.0)
        {
            _1975 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1975 = frontier_phi_40_35_ladder;
        }
        float _2180;
        if (_1571 > 0.0)
        {
            _2180 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2180 = frontier_phi_49_46_ladder;
        }
        float _2182 = isnan(_1975) ? _1710 : (isnan(_1710) ? _1975 : min(_1710, _1975));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1565) + _1554;
        float _2188 = (_2183 * _1568) + _1558;
        float _2189 = (_2183 * _1571) + _1562;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2190;
        float _2193 = _2190 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2189 > _2193) || ((_2189 < _2191) || ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 < _2191) || (_2187 > _2193))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2189, cbModelParam._m0[17u].z, fma(_2188, cbModelParam._m0[17u].y, _2187 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2189, cbModelParam._m0[18u].z, fma(_2188, cbModelParam._m0[18u].y, _2187 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2189, cbModelParam._m0[19u].z, fma(_2188, cbModelParam._m0[19u].y, _2187 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_25_49_ladder = _2388.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2388.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2388.x * cbModelParam._m0[1u].z;
        }
        _1590 = frontier_phi_25_49_ladder_2;
        _1592 = frontier_phi_25_49_ladder_1;
        _1594 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_566, _567, _568), _1497);
        _1590 = _1574.x * cbModelParam._m0[1u].z;
        _1592 = _1574.y * cbModelParam._m0[1u].z;
        _1594 = _1574.z * cbModelParam._m0[1u].z;
    }
    float _1606 = ((((1.0 - _587) * ((_574 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_587 * _574)) * _558;
    float _1607 = _1606 * ((cbModelParam._m0[1u].w * (_1590 - _1488)) + _1488);
    float _1608 = _1606 * ((cbModelParam._m0[1u].w * (_1592 - _1490)) + _1490);
    float _1609 = _1606 * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1612 = fma(_1609, cbSceneParam._m0[89u].z, fma(_1608, cbSceneParam._m0[89u].y, _1607 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1609, cbSceneParam._m0[90u].z, fma(_1608, cbSceneParam._m0[90u].y, _1607 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1609, cbSceneParam._m0[91u].z, fma(_1608, cbSceneParam._m0[91u].y, _1607 * cbSceneParam._m0[91u].x));
    uvec4 _1628 = floatBitsToUint(cbInstanceData._m0[_533 + 5u]);
    uint _1630 = _1628.x * 14u;
    uint _1631 = _1630 + 13u;
    float _1638 = _558 + (-1.0);
    float _1643 = (cbLight._m0[_1631].x * _1638) + 1.0;
    float _1644 = (cbLight._m0[_1631].y * _1638) + 1.0;
    float _1645 = (cbLight._m0[_1631].z * _1638) + 1.0;
    float _1646 = (cbLight._m0[_1631].w * _1638) + 1.0;
    uint _1647 = _1630 + 5u;
    float _1653 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
    uint _1657 = _1630 + 4u;
    float _1664 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1668 = _1630 | 1u;
    float _1679 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_393, _394, _395));
    float _1682 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_393, _394, _395));
    float _3838 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _3849 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1687 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1689 = (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.3183098733425140380859375;
    float _1696 = ((cbLight._m0[_1647].x * _1653) * _1689) + ((cbLight._m0[_1657].x * _1664) * _1687);
    float _1697 = ((_1653 * cbLight._m0[_1647].y) * _1689) + ((_1664 * cbLight._m0[_1657].y) * _1687);
    float _1698 = ((_1653 * cbLight._m0[_1647].z) * _1689) + ((_1664 * cbLight._m0[_1657].z) * _1687);
    uvec4 _1702 = floatBitsToUint(cbLight._m0[_1630 + 12u]);
    bool _1704 = _1702.x == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1704)
    {
        _1715 = _1696;
        _1717 = _1697;
        _1719 = _1698;
    }
    else
    {
        uint _1723 = _1630 + 6u;
        float _1739 = (dot(vec3(cbLight._m0[_1630 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1740 = _1739 * _1739;
        float _3860 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1742 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1715 = (((cbLight._m0[_1723].x * 0.3183098733425140380859375) * _1741) * _1742) + _1696;
        _1717 = (((cbLight._m0[_1723].y * 0.3183098733425140380859375) * _1741) * _1742) + _1697;
        _1719 = (((cbLight._m0[_1723].z * 0.3183098733425140380859375) * _1741) * _1742) + _1698;
    }
    bool _1722 = _1702.y == 0u;
    float _1760;
    float _1762;
    float _1764;
    if (_1722)
    {
        _1760 = _1715;
        _1762 = _1717;
        _1764 = _1719;
    }
    else
    {
        uint _1919 = _1630 + 7u;
        float _1935 = (dot(vec3(cbLight._m0[_1630 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _3876 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1938 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _1760 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1715;
        _1762 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1717;
        _1764 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1719;
    }
    uint _1767 = _1630 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _396) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1630].x + _473;
    float _1783 = cbLight._m0[_1630].y + _474;
    float _1784 = cbLight._m0[_1630].z + _475;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1630].xyz));
    float _3892 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _1796 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1797 = dot(vec3(_393, _394, _395), vec3(_1789, _1790, _1791));
    float _3914 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1789, _1790, _1791));
    float _3925 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1796 * ((_1795 * _1821) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1821) + _1781) * _1795))) * _1795;
    float _3936 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    uint _1845 = _1630 + 9u;
    float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _396) * 0.949999988079071044921875);
    float _1857 = _1856 * _1856;
    float _1858 = cbLight._m0[_1668].x + _473;
    float _1859 = cbLight._m0[_1668].y + _474;
    float _1860 = cbLight._m0[_1668].z + _475;
    float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
    float _1865 = _1864 * _1858;
    float _1866 = _1864 * _1859;
    float _1867 = _1864 * _1860;
    float _1868 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1668].xyz));
    float _3947 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1872 = dot(vec3(_393, _394, _395), vec3(_1865, _1866, _1867));
    float _3958 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1875 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1876 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1865, _1866, _1867));
    float _3969 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1880 = _1857 * _1857;
    float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1857;
    float _1904 = (0.5 / (((_1796 * ((_1871 * _1894) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1894) + _1857) * _1871))) * _1871;
    float _3980 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
    float _1916 = (((_1893 * cbLight._m0[_1845].x) * _1906) * _1653) + (((_1820 * cbLight._m0[_1767].x) * _1834) * _1664);
    float _1917 = (((_1893 * cbLight._m0[_1845].y) * _1906) * _1653) + (((_1820 * cbLight._m0[_1767].y) * _1834) * _1664);
    float _1918 = (((_1893 * cbLight._m0[_1845].z) * _1906) * _1653) + (((_1820 * cbLight._m0[_1767].z) * _1834) * _1664);
    float _1980;
    float _1982;
    float _1984;
    if (_1704)
    {
        _1980 = _1916;
        _1982 = _1917;
        _1984 = _1918;
    }
    else
    {
        uint _1986 = _1630 + 2u;
        uint _1990 = _1630 + 10u;
        float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _396) * 0.949999988079071044921875);
        float _2005 = _2004 * _2004;
        float _2006 = cbLight._m0[_1986].x + _473;
        float _2007 = cbLight._m0[_1986].y + _474;
        float _2008 = cbLight._m0[_1986].z + _475;
        float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
        float _2013 = _2012 * _2006;
        float _2014 = _2012 * _2007;
        float _2015 = _2012 * _2008;
        float _2016 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1986].xyz));
        float _3991 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2019 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2020 = dot(vec3(_393, _394, _395), vec3(_2013, _2014, _2015));
        float _4002 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2023 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2024 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2013, _2014, _2015));
        float _4013 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2028 = _2005 * _2005;
        float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
        float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2042 = 1.0 - _2005;
        float _2052 = (0.5 / (((_1796 * ((_2019 * _2042) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2042) + _2005) * _2019))) * _2019;
        float _4024 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2054 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
        float _2055 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1980 = (((_2041 * cbLight._m0[_1990].x) * _2054) * _2055) + _1916;
        _1982 = (((_2041 * cbLight._m0[_1990].y) * _2054) * _2055) + _1917;
        _1984 = (((_2041 * cbLight._m0[_1990].z) * _2054) * _2055) + _1918;
    }
    float _2090;
    float _2092;
    float _2094;
    if (_1722)
    {
        _2090 = _1980;
        _2092 = _1982;
        _2094 = _1984;
    }
    else
    {
        uint _2101 = _1630 + 3u;
        uint _2105 = _1630 + 11u;
        float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _396) * 0.949999988079071044921875);
        float _2120 = _2119 * _2119;
        float _2121 = cbLight._m0[_2101].x + _473;
        float _2122 = cbLight._m0[_2101].y + _474;
        float _2123 = cbLight._m0[_2101].z + _475;
        float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
        float _2128 = _2127 * _2121;
        float _2129 = _2127 * _2122;
        float _2130 = _2127 * _2123;
        float _2131 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2101].xyz));
        float _4040 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2134 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2135 = dot(vec3(_393, _394, _395), vec3(_2128, _2129, _2130));
        float _4051 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2128, _2129, _2130));
        float _4062 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2143 = _2120 * _2120;
        float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
        float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = 1.0 - _2120;
        float _2167 = (0.5 / (((_1796 * ((_2134 * _2157) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2157) + _2120) * _2134))) * _2134;
        float _4073 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2169 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
        float _2170 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _2090 = (((_2156 * cbLight._m0[_2105].x) * _2169) * _2170) + _1980;
        _2092 = (((_2156 * cbLight._m0[_2105].y) * _2169) * _2170) + _1982;
        _2094 = (((_2156 * cbLight._m0[_2105].z) * _2169) * _2170) + _1984;
    }
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1628.y == 0u)
    {
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2245;
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2245;
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2245;
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _495) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _494) / _2261)));
        float _2282 = (log2(_2248 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        float _2403;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
        }
        else
        {
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2404;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            uint _2552 = 0u;
            uint _2561;
            bool _2562;
            for (;;)
            {
                _2561 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                _2562 = _2561 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2562)
                {
                    frontier_phi_66_pred = _2546;
                    frontier_phi_66_pred_1 = _2551;
                    frontier_phi_66_pred_2 = _2550;
                    frontier_phi_66_pred_3 = _2549;
                    frontier_phi_66_pred_4 = _2548;
                    frontier_phi_66_pred_5 = _2547;
                }
                else
                {
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    uint _2697;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2549;
                    _2695 = _2550;
                    _2696 = _2551;
                    _2697 = _2561;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    for (;;)
                    {
                        uint _2701 = uint(findLSB(_2697)) + (_2552 << 5u);
                        uint _2698 = (_2697 + 4294967295u) & _2697;
                        uint _2703 = _2701 * 48u;
                        vec4 _2717 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2723 = (_2701 * 48u) + 4u;
                        vec4 _2736 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2742 = (_2701 * 48u) + 8u;
                        vec3 _2753 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2742)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2742 + 2u)).x));
                        float _2757 = _2717.x - _2246;
                        float _2758 = _2717.y - _2247;
                        float _2759 = _2717.z - _2248;
                        float _2760 = dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759));
                        float _2763 = inversesqrt(_2760);
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2767 = dot(vec3(_514, _517, _520), vec3(_2764, _2765, _2766));
                        float _2772 = 1.0 - (_2760 * _2717.w);
                        float _4099 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2774 = sqrt(_2760) * _2736.w;
                        float _2777 = 1.39999997615814208984375 / (_2774 + 1.39999997615814208984375);
                        float _2778 = _2777 * _2777;
                        float _2781 = ((1.0 - _2778) * _2767) + _2778;
                        float _2784 = _2774 * _2774;
                        float _2788 = ((isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))) * _2773) / ((_2784 * 0.699999988079071044921875) + 1.0);
                        float _2792 = (-0.0) - _2246;
                        float _2793 = (-0.0) - _2247;
                        float _2794 = (-0.0) - _2248;
                        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2809 = exp2(log2(1.0 / ((_2784 * 3.5) + 5.0)) * 0.25);
                        float _2810 = 1.0 - _574;
                        float _2817 = sqrt(1.0 - ((1.0 - (_2810 * _2810)) * (1.0 - (_2809 * _2809))));
                        float _2818 = _2817 * _2817;
                        float _2819 = _2818 * _2818;
                        float _2820 = _2799 + _2764;
                        float _2821 = _2800 + _2765;
                        float _2822 = _2801 + _2766;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2830 = dot(vec3(_514, _517, _520), vec3(_2799, _2800, _2801));
                        float _4115 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2834 = dot(vec3(_514, _517, _520), vec3(_2826 * _2820, _2826 * _2821, _2826 * _2822));
                        float _4126 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2837 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2841 = ((_2837 * _2837) * (_2819 + (-1.0))) + 1.0;
                        float _2842 = _2777 * _2818;
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2767) + _2843;
                        float _4137 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2847 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                        float _2848 = 1.0 - _2818;
                        float _2858 = (0.5 / (((_2847 * ((_2833 * _2848) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2847 * _2848) + _2818) * _2833))) * _2847;
                        float _4148 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2869 = (((_2819 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_2841 * _2841) * ((_2784 * 2.1991131305694580078125) + 3.141590118408203125))) * _2773;
                        _2621 = (_2788 * _2736.x) + _2694;
                        _2622 = (_2788 * _2736.y) + _2695;
                        _2623 = (_2788 * _2736.z) + _2696;
                        _2618 = (_2869 * _2753.x) + _2691;
                        _2619 = (_2869 * _2753.y) + _2692;
                        _2620 = (_2869 * _2753.z) + _2693;
                        if (_2698 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2621;
                            _2695 = _2622;
                            _2696 = _2623;
                            _2697 = _2698;
                        }
                    }
                    frontier_phi_66_pred = _2618;
                    frontier_phi_66_pred_1 = _2623;
                    frontier_phi_66_pred_2 = _2622;
                    frontier_phi_66_pred_3 = _2621;
                    frontier_phi_66_pred_4 = _2620;
                    frontier_phi_66_pred_5 = _2619;
                }
                _2394 = frontier_phi_66_pred;
                _2404 = frontier_phi_66_pred_1;
                _2402 = frontier_phi_66_pred_2;
                _2400 = frontier_phi_66_pred_3;
                _2398 = frontier_phi_66_pred_4;
                _2396 = frontier_phi_66_pred_5;
                uint _2553 = _2552 + 1u;
                if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2546 = _2394;
                    _2547 = _2396;
                    _2548 = _2398;
                    _2549 = _2400;
                    _2550 = _2402;
                    _2551 = _2404;
                    _2552 = _2553;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
        }
        uvec4 _2407 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2408 = _2407.z;
        uint _2410 = (_2408 >> 8u) & 15u;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((4294967295u << _2410) & _2292) == 0u)
        {
            _2514 = _2393;
            _2516 = _2395;
            _2518 = _2397;
            _2520 = _2399;
            _2522 = _2401;
            _2524 = _2403;
        }
        else
        {
            float _2539 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
            float _2540 = _2539 * _2246;
            float _2541 = _2539 * _2247;
            float _2542 = _2539 * _2248;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2410 < ((_2408 >> 12u) & 15u))
            {
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2674 = _2393;
                float _2675 = _2395;
                float _2676 = _2397;
                float _2677 = _2399;
                float _2678 = _2401;
                float _2679 = _2403;
                uint _2680 = _2410;
                uint _2689;
                bool _2690;
                for (;;)
                {
                    _2689 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                    _2690 = _2689 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2690)
                    {
                        frontier_phi_77_pred = _2679;
                        frontier_phi_77_pred_1 = _2678;
                        frontier_phi_77_pred_2 = _2677;
                        frontier_phi_77_pred_3 = _2676;
                        frontier_phi_77_pred_4 = _2675;
                        frontier_phi_77_pred_5 = _2674;
                    }
                    else
                    {
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        float _2899 = _2677;
                        float _2900 = _2678;
                        float _2901 = _2679;
                        uint _2902 = _2689;
                        uint _2903;
                        vec4 _2928;
                        float _2929;
                        vec4 _2944;
                        vec3 _2956;
                        vec4 _2972;
                        vec4 _2988;
                        float _3035;
                        bool _3036;
                        for (;;)
                        {
                            uint _2913 = ((_2680 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2902));
                            _2903 = (_2902 + 4294967295u) & _2902;
                            uint _2915 = _2913 * 40u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2929 = _2928.w;
                            uint _2931 = (_2913 * 40u) + 4u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2913 * 40u) + 8u;
                            _2956 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x));
                            uint _2959 = (_2913 * 40u) + 16u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2913 * 40u) + 20u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2913 * 40u) + 24u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3010 = (_2913 * 40u) + 28u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3035 = fma(_2248, _3023.z, fma(_2247, _3023.y, _3023.x * _2246)) + _3023.w;
                            _3036 = !((fma(_2248, _3004.z, fma(_2247, _3004.y, _3004.x * _2246)) + _3004.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3036)
                            {
                                float _3063 = _2928.x - _2246;
                                float _3064 = _2928.y - _2247;
                                float _3065 = _2928.z - _2248;
                                float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                                float _3069 = inversesqrt(_3066);
                                float _3070 = _3069 * _3063;
                                float _3071 = _3069 * _3064;
                                float _3072 = _3069 * _3065;
                                float _3076 = 1.0 - (_3066 / (_2929 * _2929));
                                float _4159 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3081 = sqrt(_3066) * _2944.w;
                                float _3083 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                                float _3084 = _3083 * _3083;
                                float _3087 = ((1.0 - _3084) * dot(vec3(_3070, _3071, _3072), vec3(_514, _517, _520))) + _3084;
                                float _3090 = _3081 * _3081;
                                float _3094 = (fma(_2248, _2972.z, fma(_2247, _2972.y, _2972.x * _2246)) + _2972.w) / _3035;
                                float _3095 = (fma(_2248, _2988.z, fma(_2247, _2988.y, _2988.x * _2246)) + _2988.w) / _3035;
                                float _3099 = 1.0 - dot(vec2(_3094, _3095), vec2(_3094, _3095));
                                float _4175 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3101 = _3100 * (((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3077) / ((_3090 * 0.699999988079071044921875) + 1.0));
                                float _3113 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                                float _3114 = 1.0 - _574;
                                float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                                float _3122 = _3121 * _3121;
                                float _3123 = _3122 * _3122;
                                float _3124 = _3070 - _2540;
                                float _3125 = _3071 - _2541;
                                float _3126 = _3072 - _2542;
                                float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                                float _3134 = dot(vec3(_514, _517, _520), vec3((-0.0) - _2540, (-0.0) - _2541, (-0.0) - _2542));
                                float _4186 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3138 = dot(vec3(_514, _517, _520), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                                float _4197 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                                float _3146 = _3083 * _3122;
                                float _3147 = _3146 * _3146;
                                float _3153 = ((1.0 - _3147) * dot(vec3(_514, _517, _520), vec3(_3070, _3071, _3072))) + _3147;
                                float _4208 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3155 = 1.0 - _3122;
                                float _3165 = (0.5 / (((_3154 * ((_3137 * _3155) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3122) * _3137))) * _3154;
                                float _4219 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3175 = (_3100 * _3077) * (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_3145 * _3145) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3101 * _2944.y;
                                frontier_phi_83_pred_1 = _3101 * _2944.x;
                                frontier_phi_83_pred_2 = _3175 * _2956.z;
                                frontier_phi_83_pred_3 = _3175 * _2956.y;
                                frontier_phi_83_pred_4 = _3175 * _2956.x;
                                frontier_phi_83_pred_5 = _3101 * _2944.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3183 = frontier_phi_83_pred;
                            _3182 = frontier_phi_83_pred_1;
                            _3181 = frontier_phi_83_pred_2;
                            _3180 = frontier_phi_83_pred_3;
                            _3179 = frontier_phi_83_pred_4;
                            _3184 = frontier_phi_83_pred_5;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2888 = _3184 + _2901;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            if (_2903 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2903;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2888;
                        frontier_phi_77_pred_1 = _2887;
                        frontier_phi_77_pred_2 = _2886;
                        frontier_phi_77_pred_3 = _2885;
                        frontier_phi_77_pred_4 = _2884;
                        frontier_phi_77_pred_5 = _2883;
                    }
                    _2525 = frontier_phi_77_pred;
                    _2523 = frontier_phi_77_pred_1;
                    _2521 = frontier_phi_77_pred_2;
                    _2519 = frontier_phi_77_pred_3;
                    _2517 = frontier_phi_77_pred_4;
                    _2515 = frontier_phi_77_pred_5;
                    uint _2681 = _2680 + 1u;
                    if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2674 = _2515;
                        _2675 = _2517;
                        _2676 = _2519;
                        _2677 = _2521;
                        _2678 = _2523;
                        _2679 = _2525;
                        _2680 = _2681;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2519;
                frontier_phi_58_59_ladder_1 = _2525;
                frontier_phi_58_59_ladder_2 = _2523;
                frontier_phi_58_59_ladder_3 = _2521;
                frontier_phi_58_59_ladder_4 = _2517;
                frontier_phi_58_59_ladder_5 = _2515;
            }
            else
            {
                frontier_phi_58_59_ladder = _2397;
                frontier_phi_58_59_ladder_1 = _2403;
                frontier_phi_58_59_ladder_2 = _2401;
                frontier_phi_58_59_ladder_3 = _2399;
                frontier_phi_58_59_ladder_4 = _2395;
                frontier_phi_58_59_ladder_5 = _2393;
            }
            _2514 = frontier_phi_58_59_ladder_5;
            _2516 = frontier_phi_58_59_ladder_4;
            _2518 = frontier_phi_58_59_ladder;
            _2520 = frontier_phi_58_59_ladder_3;
            _2522 = frontier_phi_58_59_ladder_2;
            _2524 = frontier_phi_58_59_ladder_1;
        }
        float _2529 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
        _2305 = (_2529 * _2520) + _1760;
        _2307 = (_2529 * _2522) + _1762;
        _2309 = (_2529 * _2524) + _1764;
        _2311 = ((_2514 * 0.039999999105930328369140625) * _2529) + _2090;
        _2313 = ((_2516 * 0.039999999105930328369140625) * _2529) + _2092;
        _2315 = ((_2518 * 0.039999999105930328369140625) * _2529) + _2094;
    }
    else
    {
        _2305 = _1760;
        _2307 = _1762;
        _2309 = _1764;
        _2311 = _2090;
        _2313 = _2092;
        _2315 = _2094;
    }
    float _4235 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4246 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4257 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2332 = ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2305 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _558))) + ((_2311 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2333 = ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2307 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _558))) + ((_2313 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    float _2334 = ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2309 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _558))) + ((_2315 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1396)) * cbPerFrame._m0[3u].x);
    uint _2335 = _533 + 6u;
    float _2343 = _494 / cbSceneParam._m0[86u].x;
    float _2344 = _495 / cbSceneParam._m0[86u].y;
    vec4 _2358 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2343, _2344, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2360 = _2358.x;
    float _2361 = _2358.y;
    float _2362 = _2358.z;
    float _2363 = _2358.w;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2418 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2419 = _2418 / _415;
        float _2430 = _2419 * _466;
        float _2431 = _467 * _2419;
        float _2432 = (-0.0) - _2431;
        float _2434 = _2419 * _468;
        float _2436 = (cbSceneParam._m0[77u].w * _2432) / _2418;
        float _2437 = _2436 + cbSceneParam._m0[79u].w;
        float _2438 = cbSceneParam._m0[79u].w - _2431;
        float _2444 = sqrt(((_2430 * _2430) + (_2431 * _2431)) + (_2434 * _2434));
        float _2447 = (1.0 - (cbSceneParam._m0[77u].w / _2418)) * _2444;
        float _2452 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2454 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2631;
        if (abs((_2432 - _2436) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2631 = ((((_2437 > 0.0) ? exp2(_2452 * _2437) : (2.0 - exp2(_2454 * _2437))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2447;
        }
        else
        {
            float _2575 = 1.0 / cbSceneParam._m0[80u].x;
            float _2576 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : max(_2437, _2438));
            float _2577 = isnan(_2438) ? _2437 : (isnan(_2437) ? _2438 : min(_2437, _2438));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            float _2587 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : min(_2577, 0.0));
            _2631 = ((abs(_2444 / _2432) * cbSceneParam._m0[80u].y) * ((((_2586 - _2587) * 2.0) - ((exp2(_2452 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0)))) - exp2(_2452 * (isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0))))) * _2575)) - ((exp2(_2454 * _2586) - exp2(_2454 * _2587)) * _2575))) + (_2447 * cbSceneParam._m0[80u].z);
        }
        vec4 _2633 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2343, _2344, 1.0), 0.0);
        float _2642 = exp2((_2631 * (-1.44269502162933349609375)) * (1.0 - _2633.w));
        float _2643 = log2(_2642);
        float _2659 = log2(_2363);
        _2456 = (exp2(_2659 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].x)) * _2633.x) / cbSceneParam._m0[78u].x)) + _2360;
        _2458 = (exp2(_2659 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].y)) * _2633.y) / cbSceneParam._m0[78u].y)) + _2361;
        _2460 = (exp2(_2659 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2643 * cbSceneParam._m0[78u].z)) * _2633.z) / cbSceneParam._m0[78u].z)) + _2362;
        _2462 = _2642 * _2363;
    }
    else
    {
        _2456 = _2360;
        _2458 = _2361;
        _2460 = _2362;
        _2462 = _2363;
    }
    bool _2669;
    vec4 _2472;
    vec4 _2494;
    float _2496;
    float _2500;
    float _2501;
    float _2502;
    float _2503;
    bool _2513;
    for (;;)
    {
        _2472 = cbMatDynParam._m0[0u];
        float _2474 = roundEven(_2472.y);
        bool _2475 = _2474 == 3.0;
        float _2476 = log2(_2462);
        float _2483 = exp2(_2476 * cbSceneParam._m0[78u].x) * _2332;
        float _2484 = exp2(_2476 * cbSceneParam._m0[78u].y) * _2333;
        float _2485 = exp2(_2476 * cbSceneParam._m0[78u].z) * _2334;
        float _2492 = _482 + (-0.5);
        _2494 = cbMtdParam._m0[1u];
        _2496 = _2494.y * _2492;
        float _2499 = (_2474 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2500 = _2499 * (_2475 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2456)));
        _2501 = _2499 * (_2475 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2458)));
        _2502 = _2499 * (_2475 ? _2485 : (_2485 + (cbSceneParam._m0[72u].w * _2460)));
        _2503 = _2492 * 0.999000012874603271484375;
        _2513 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2513)
        {
            if ((cbInstanceData._m0[_533 + 7u].x + _2503) < 0.5)
            {
                _2669 = true;
                break;
            }
        }
        uint _2610 = _534 + uint(_2472.w);
        if ((cbInstanceData._m0[_2610].w < 1.0) && ((cbInstanceData._m0[_2610].w + _2503) < 0.5))
        {
            _2669 = true;
            break;
        }
        if ((_2496 + 1.0) < _2494.x)
        {
            _2669 = true;
            break;
        }
        _2669 = false;
        break;
    }
    float _2874;
    if (_2669)
    {
        discard_state = true;
        _2874 = 0.0;
    }
    else
    {
        _2874 = cbInstanceData._m0[_2335].w;
    }
    SV_Target.x = _2500;
    SV_Target.y = _2501;
    SV_Target.z = _2502;
    SV_Target.w = _2874;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2335].w;
    discard_exit();
}


