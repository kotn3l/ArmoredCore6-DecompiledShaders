#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _889;
float _3562;
float _3563;
float _3564;
float _3565;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _253 = _251.x;
    vec4 _270 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3574 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _288 = _270.z * cbMtdParam._m0[13u].y;
    float _291 = fma(_287, _201 * NORMAL.x, fma(_280, _208 * TANGENT.x, (_194 * _186) * _278));
    float _294 = fma(_287, _201 * NORMAL.y, fma(_280, _208 * TANGENT.y, (_194 * _187) * _278));
    float _297 = fma(_287, _201 * NORMAL.z, fma(_280, _208 * TANGENT.z, (_194 * _188) * _278));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3585 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _305 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3607 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3618 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3629 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _309 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _568 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _574 = (cbMatDynParam._m0[5u].x * _568) + cbMatDynParam._m0[5u].y;
        float _3640 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _579 = (cbMatDynParam._m0[5u].z * _568) + cbMatDynParam._m0[5u].w;
        float _3651 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) - _575)) + _575) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _429 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _432 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _445 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3662 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _459 = 1.0 - _309;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _309;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _309;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _485 = _482.x * TEXCOORD_5.w;
    float _486 = dot(vec3(_302, _303, _304), vec3(_385, _386, _387));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _302) - _385;
    float _494 = (_489 * _303) - _386;
    float _495 = (_489 * _304) - _387;
    float _499 = abs(dot(vec3(_385, _386, _387), vec3(_302, _303, _304)));
    float _3695 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_305);
    float _514 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _520 = (1.0 - _514) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _501;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _617 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _621 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _646 = _549 + _302;
        float _647 = _553 + _303;
        float _648 = _557 + _304;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_302, _303, _304), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3743 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_302, _303, _304), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3776 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_302, _303, _304), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3809 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _936 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _940 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _963 = _549 + _302;
        float _964 = _553 + _303;
        float _965 = _557 + _304;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_302, _303, _304), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3872 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_302, _303, _304), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3905 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_302, _303, _304), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3938 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = _889;
        _1211 = _889;
        _1212 = _889;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _493 * 0.5;
    float _1270 = _494 * 0.5;
    float _1271 = _495 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_888, _892, _895, _898));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_890, _893, _896, _899));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _894, _897, _900));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1419;
    float _1421;
    float _1423;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1386 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1390 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1394 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1397 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1400 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1403 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1431;
        if (_1397 > 0.0)
        {
            _1431 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1431 = frontier_phi_17_15_ladder;
        }
        float _1607;
        if (_1400 > 0.0)
        {
            _1607 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1607 = frontier_phi_26_22_ladder;
        }
        float _1903;
        if (_1403 > 0.0)
        {
            _1903 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1903 = frontier_phi_38_33_ladder;
        }
        float _1905 = isnan(_1607) ? _1431 : (isnan(_1431) ? _1607 : min(_1431, _1607));
        float _1906 = isnan(_1903) ? _1905 : (isnan(_1905) ? _1903 : min(_1905, _1903));
        float _1910 = (_1906 * _1397) + _1386;
        float _1911 = (_1906 * _1400) + _1390;
        float _1912 = (_1906 * _1403) + _1394;
        float _1913 = _1906 * 9.9999997473787516355514526367188e-05;
        float _1915 = (-1.0) - _1913;
        float _1917 = _1913 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1912 > _1917) || ((_1912 < _1915) || ((_1911 > _1917) || ((_1911 < _1915) || ((_1910 < _1915) || (_1910 > _1917))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1912, cbModelParam._m0[9u].z, fma(_1911, cbModelParam._m0[9u].y, _1910 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1912, cbModelParam._m0[10u].z, fma(_1911, cbModelParam._m0[10u].y, _1910 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1912, cbModelParam._m0[11u].z, fma(_1911, cbModelParam._m0[11u].y, _1910 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_16_38_ladder = _2057.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2057.x * cbModelParam._m0[1u].y;
        }
        _1419 = frontier_phi_16_38_ladder_2;
        _1421 = frontier_phi_16_38_ladder_1;
        _1423 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1338);
        _1419 = _1407.x * cbModelParam._m0[1u].y;
        _1421 = _1407.y * cbModelParam._m0[1u].y;
        _1423 = _1407.z * cbModelParam._m0[1u].y;
    }
    float _1427 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1427 : min(cbModelParam._m0[25u].w, _1427));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1485 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1489 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1493 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1496 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1499 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1502 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1612;
        if (_1496 > 0.0)
        {
            _1612 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1612 = frontier_phi_28_24_ladder;
        }
        float _1930;
        if (_1499 > 0.0)
        {
            _1930 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1930 = frontier_phi_40_35_ladder;
        }
        float _2268;
        if (_1502 > 0.0)
        {
            _2268 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2268 = frontier_phi_50_47_ladder;
        }
        float _2270 = isnan(_1930) ? _1612 : (isnan(_1612) ? _1930 : min(_1612, _1930));
        float _2271 = isnan(_2268) ? _2270 : (isnan(_2270) ? _2268 : min(_2270, _2268));
        float _2275 = (_2271 * _1496) + _1485;
        float _2276 = (_2271 * _1499) + _1489;
        float _2277 = (_2271 * _1502) + _1493;
        float _2278 = _2271 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2278;
        float _2281 = _2278 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2277 > _2281) || ((_2277 < _2279) || ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 < _2279) || (_2275 > _2281))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2277, cbModelParam._m0[17u].z, fma(_2276, cbModelParam._m0[17u].y, _2275 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2277, cbModelParam._m0[18u].z, fma(_2276, cbModelParam._m0[18u].y, _2275 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2277, cbModelParam._m0[19u].z, fma(_2276, cbModelParam._m0[19u].y, _2275 * cbModelParam._m0[19u].x))), _1428);
            frontier_phi_25_50_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1521 = frontier_phi_25_50_ladder_2;
        _1523 = frontier_phi_25_50_ladder_1;
        _1525 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1428);
        _1521 = _1505.x * cbModelParam._m0[1u].z;
        _1523 = _1505.y * cbModelParam._m0[1u].z;
        _1525 = _1505.z * cbModelParam._m0[1u].z;
    }
    float _1538 = (((_520 * _470) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1540 = (((_520 * _472) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_520 * _473) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1545 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1538 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1538 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1538 * cbSceneParam._m0[91u].x));
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1599 = _1586 / _1598;
    float _1600 = _1590 / _1598;
    float _1601 = _1594 / _1598;
    float _1748;
    float _1749;
    float _1750;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1628 = ((uint(_1601 > cbSceneParam._m0[59u].y) + uint(_1601 > cbSceneParam._m0[59u].x)) + uint(_1601 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1629 = _1628 + 43u;
        uint _1637 = _1628 + 44u;
        uint _1645 = _1628 + 45u;
        uint _1653 = _1628 + 46u;
        float _1664 = fma(_1598, cbSceneParam._m0[_1629].w, fma(_1594, cbSceneParam._m0[_1629].z, fma(_1590, cbSceneParam._m0[_1629].y, _1586 * cbSceneParam._m0[_1629].x)));
        float _1668 = fma(_1598, cbSceneParam._m0[_1637].w, fma(_1594, cbSceneParam._m0[_1637].z, fma(_1590, cbSceneParam._m0[_1637].y, _1586 * cbSceneParam._m0[_1637].x)));
        float _1676 = fma(_1598, cbSceneParam._m0[_1653].w, fma(_1594, cbSceneParam._m0[_1653].z, fma(_1590, cbSceneParam._m0[_1653].y, _1586 * cbSceneParam._m0[_1653].x)));
        float _1681 = cbSceneParam._m0[33u].z * _1676;
        float _1683 = cbSceneParam._m0[33u].w * _1676;
        float _1686 = fma(_1598, cbSceneParam._m0[_1645].w, fma(_1594, cbSceneParam._m0[_1645].z, fma(_1590, cbSceneParam._m0[_1645].y, _1586 * cbSceneParam._m0[_1645].x))) / _1676;
        float _1734 = (cbSceneParam._m0[33u].x - sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601))) * cbSceneParam._m0[33u].y;
        float _4064 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1741 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1664) / _1676, (_1683 + _1668) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 + _1664) / _1676, (_1668 - _1681) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 - _1681) / _1676, (_1668 - _1683) / _1676), _1686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 - _1683) / _1676, (_1681 + _1668) / _1676), _1686), 0.0)).x), vec4(0.25)));
        _1748 = 1.0 - (_1741 * cbSceneParam._m0[34u].x);
        _1749 = 1.0 - (_1741 * cbSceneParam._m0[34u].y);
        _1750 = 1.0 - (_1741 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1748 = 1.0;
        _1749 = 1.0;
        _1750 = 1.0;
    }
    float _1814;
    float _1816;
    float _1818;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1802 = fma(_1598, cbSceneParam._m0[63u].w, fma(_1594, cbSceneParam._m0[63u].z, fma(_1590, cbSceneParam._m0[63u].y, _1586 * cbSceneParam._m0[63u].x)));
        float _1803 = fma(_1598, cbSceneParam._m0[60u].w, fma(_1594, cbSceneParam._m0[60u].z, fma(_1590, cbSceneParam._m0[60u].y, _1586 * cbSceneParam._m0[60u].x))) / _1802;
        float _1804 = fma(_1598, cbSceneParam._m0[61u].w, fma(_1594, cbSceneParam._m0[61u].z, fma(_1590, cbSceneParam._m0[61u].y, _1586 * cbSceneParam._m0[61u].x))) / _1802;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1803 >= cbSceneParam._m0[64u].x) && (_1804 >= cbSceneParam._m0[64u].y)) && (_1803 <= cbSceneParam._m0[64u].z)) && (_1804 <= cbSceneParam._m0[64u].w))
        {
            float _1943 = fma(_1598, cbSceneParam._m0[62u].w, fma(_1594, cbSceneParam._m0[62u].z, fma(_1590, cbSceneParam._m0[62u].y, _1586 * cbSceneParam._m0[62u].x))) / _1802;
            float _1947 = isnan(cbSceneParam._m0[41u].w) ? _1943 : (isnan(_1943) ? cbSceneParam._m0[41u].w : max(_1943, cbSceneParam._m0[41u].w));
            float _1990 = (cbSceneParam._m0[33u].x - sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601))) * cbSceneParam._m0[33u].y;
            float _4080 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
            float _1997 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1803, cbSceneParam._m0[33u].w + _1804), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1803, _1804 - cbSceneParam._m0[33u].z), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1803 - cbSceneParam._m0[33u].z, _1804 - cbSceneParam._m0[33u].w), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1803 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1804), _1947), 0.0)).x), vec4(0.25)));
            float _2001 = 1.0 - (_1997 * cbSceneParam._m0[34u].x);
            float _2002 = 1.0 - (_1997 * cbSceneParam._m0[34u].y);
            float _2003 = 1.0 - (_1997 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
            frontier_phi_37_36_ladder_1 = isnan(_2002) ? _1749 : (isnan(_1749) ? _2002 : min(_1749, _2002));
            frontier_phi_37_36_ladder_2 = isnan(_2001) ? _1748 : (isnan(_1748) ? _2001 : min(_1748, _2001));
        }
        else
        {
            frontier_phi_37_36_ladder = _1750;
            frontier_phi_37_36_ladder_1 = _1749;
            frontier_phi_37_36_ladder_2 = _1748;
        }
        _1814 = frontier_phi_37_36_ladder_2;
        _1816 = frontier_phi_37_36_ladder_1;
        _1818 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1814 = _1748;
        _1816 = _1749;
        _1818 = _1750;
    }
    uvec4 _1823 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1825 = _1823.x * 14u;
    uint _1826 = _1825 + 13u;
    float _1833 = _485 + (-1.0);
    float _1838 = (cbLight._m0[_1826].x * _1833) + 1.0;
    float _1839 = (cbLight._m0[_1826].y * _1833) + 1.0;
    float _1840 = (cbLight._m0[_1826].z * _1833) + 1.0;
    float _1841 = (cbLight._m0[_1826].w * _1833) + 1.0;
    uint _1842 = _1825 + 5u;
    float _1848 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1852 = _1825 + 4u;
    float _1862 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1866 = _1825 | 1u;
    float _1877 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_302, _303, _304));
    float _1880 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_302, _303, _304));
    float _4116 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _4127 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1885 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1887 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1894 = ((cbLight._m0[_1842].x * _1848) * _1887) + (((cbLight._m0[_1852].x * _1814) * _1862) * _1885);
    float _1895 = ((_1848 * cbLight._m0[_1842].y) * _1887) + (((cbLight._m0[_1852].y * _1816) * _1862) * _1885);
    float _1896 = ((_1848 * cbLight._m0[_1842].z) * _1887) + (((cbLight._m0[_1852].z * _1818) * _1862) * _1885);
    uvec4 _1900 = floatBitsToUint(cbLight._m0[_1825 + 12u]);
    bool _1902 = _1900.x == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1902)
    {
        _2004 = _1894;
        _2006 = _1895;
        _2008 = _1896;
    }
    else
    {
        uint _2012 = _1825 + 6u;
        float _2028 = (dot(vec3(cbLight._m0[_1825 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _4138 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2031 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2004 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1894;
        _2006 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1895;
        _2008 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1896;
    }
    bool _2011 = _1900.y == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2011)
    {
        _2066 = _2004;
        _2068 = _2006;
        _2070 = _2008;
    }
    else
    {
        uint _2239 = _1825 + 7u;
        float _2255 = (dot(vec3(cbLight._m0[_1825 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4154 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2258 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2066 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2004;
        _2068 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2006;
        _2070 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2008;
    }
    uint _2073 = _1825 + 8u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _305) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1825].x + _385;
    float _2089 = cbLight._m0[_1825].y + _386;
    float _2090 = cbLight._m0[_1825].z + _387;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1825].xyz));
    float _4170 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _2102 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2103 = dot(vec3(_302, _303, _304), vec3(_2095, _2096, _2097));
    float _4192 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2095, _2096, _2097));
    float _4203 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2087 * _2087;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2123 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
    float _2124 = 0.959999978542327880859375 - _467;
    float _2126 = 0.959999978542327880859375 - _468;
    float _2127 = 0.959999978542327880859375 - _469;
    float _2134 = 1.0 - _2087;
    float _2145 = (0.5 / (((_2102 * ((_2101 * _2134) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2134) + _2087) * _2101))) * _2101;
    float _4214 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    uint _2161 = _1825 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _305) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_1866].x + _385;
    float _2175 = cbLight._m0[_1866].y + _386;
    float _2176 = cbLight._m0[_1866].z + _387;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1866].xyz));
    float _4225 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2188 = dot(vec3(_302, _303, _304), vec3(_2181, _2182, _2183));
    float _4236 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2181, _2182, _2183));
    float _4247 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0);
    float _2214 = 1.0 - _2173;
    float _2224 = (0.5 / (((_2102 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2214) + _2173) * _2187))) * _2187;
    float _4258 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2236 = (((((_2207 * _2124) + _470) * cbLight._m0[_2161].x) * _2226) * _1848) + ((((cbLight._m0[_2073].x * _1814) * ((_2123 * _2124) + _470)) * _2147) * _1862);
    float _2237 = (((((_2207 * _2126) + _472) * cbLight._m0[_2161].y) * _2226) * _1848) + ((((cbLight._m0[_2073].y * _1816) * ((_2123 * _2126) + _472)) * _2147) * _1862);
    float _2238 = (((((_2207 * _2127) + _473) * cbLight._m0[_2161].z) * _2226) * _1848) + ((((cbLight._m0[_2073].z * _1818) * ((_2123 * _2127) + _473)) * _2147) * _1862);
    float _2294;
    float _2296;
    float _2298;
    if (_1902)
    {
        _2294 = _2236;
        _2296 = _2237;
        _2298 = _2238;
    }
    else
    {
        uint _2300 = _1825 + 2u;
        uint _2304 = _1825 + 10u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _305) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _385;
        float _2321 = cbLight._m0[_2300].y + _386;
        float _2322 = cbLight._m0[_2300].z + _387;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2300].xyz));
        float _4269 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2334 = dot(vec3(_302, _303, _304), vec3(_2327, _2328, _2329));
        float _4280 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4291 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
        float _2360 = 1.0 - _2319;
        float _2370 = (0.5 / (((_2102 * ((_2333 * _2360) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2360) + _2319) * _2333))) * _2333;
        float _4302 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2294 = (((((_2353 * _2124) + _470) * cbLight._m0[_2304].x) * _2372) * _2373) + _2236;
        _2296 = (((((_2353 * _2126) + _472) * cbLight._m0[_2304].y) * _2372) * _2373) + _2237;
        _2298 = (((((_2353 * _2127) + _473) * cbLight._m0[_2304].z) * _2372) * _2373) + _2238;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2011)
    {
        _2404 = _2294;
        _2406 = _2296;
        _2408 = _2298;
    }
    else
    {
        uint _2415 = _1825 + 3u;
        uint _2419 = _1825 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _305) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _385;
        float _2436 = cbLight._m0[_2415].y + _386;
        float _2437 = cbLight._m0[_2415].z + _387;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2415].xyz));
        float _4318 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2449 = dot(vec3(_302, _303, _304), vec3(_2442, _2443, _2444));
        float _4329 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4340 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2102 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2475) + _2434) * _2448))) * _2448;
        float _4351 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2404 = (((((_2468 * _2124) + _470) * cbLight._m0[_2419].x) * _2487) * _2488) + _2294;
        _2406 = (((((_2468 * _2126) + _472) * cbLight._m0[_2419].y) * _2487) * _2488) + _2296;
        _2408 = (((((_2468 * _2127) + _473) * cbLight._m0[_2419].z) * _2487) * _2488) + _2298;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1823.y == 0u)
    {
        uvec4 _2509 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2510 = _2509.x;
        uint _2521 = uint((float(_2509.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2510))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2510)));
        float _2531 = (log2(_1601 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2532 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        uint _2535 = uint(isnan(14.0) ? _2532 : (isnan(_2532) ? 14.0 : min(_2532, 14.0)));
        uvec4 _2540 = texelFetch(g_lightClusterGridBuffer, int(((_2535 << 2u) + (_2521 << 6u)) >> 2u));
        uint _2541 = _2540.x;
        uint _2542 = _2509.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2542 >> 4u) & 15u)) + 4294967295u) & _2541) == 0u) || ((_2542 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            uint _2780 = 0u;
            uint _2789;
            bool _2790;
            for (;;)
            {
                _2789 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                _2790 = _2789 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2790)
                {
                    frontier_phi_71_pred = _2779;
                    frontier_phi_71_pred_1 = _2778;
                    frontier_phi_71_pred_2 = _2777;
                    frontier_phi_71_pred_3 = _2776;
                    frontier_phi_71_pred_4 = _2775;
                    frontier_phi_71_pred_5 = _2774;
                }
                else
                {
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    uint _2925;
                    _2919 = _2774;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2789;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    for (;;)
                    {
                        uint _2929 = uint(findLSB(_2925)) + (_2780 << 5u);
                        uint _2926 = (_2925 + 4294967295u) & _2925;
                        uint _2931 = _2929 * 48u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2951 = (_2929 * 48u) + 4u;
                        vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2970 = (_2929 * 48u) + 8u;
                        vec3 _2981 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x));
                        float _2985 = _2945.x - _1599;
                        float _2986 = _2945.y - _1600;
                        float _2987 = _2945.z - _1601;
                        float _2988 = dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987));
                        float _2991 = inversesqrt(_2988);
                        float _2992 = _2991 * _2985;
                        float _2993 = _2991 * _2986;
                        float _2994 = _2991 * _2987;
                        float _2995 = dot(vec3(_426, _429, _432), vec3(_2992, _2993, _2994));
                        float _3000 = 1.0 - (_2988 * _2945.w);
                        float _4377 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3002 = sqrt(_2988) * _2964.w;
                        float _3005 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                        float _3006 = _3005 * _3005;
                        float _3009 = ((1.0 - _3006) * _2995) + _3006;
                        float _3012 = _3002 * _3002;
                        float _3016 = ((isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))) * _3001) / ((_3012 * 0.699999988079071044921875) + 1.0);
                        float _3020 = (-0.0) - _1599;
                        float _3021 = (-0.0) - _1600;
                        float _3022 = (-0.0) - _1601;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3036 = exp2(log2(1.0 / ((_3012 * 3.5) + 5.0)) * 0.25);
                        float _3037 = 1.0 - _501;
                        float _3044 = sqrt(1.0 - ((1.0 - (_3037 * _3037)) * (1.0 - (_3036 * _3036))));
                        float _3045 = _3044 * _3044;
                        float _3046 = _3045 * _3045;
                        float _3047 = _3027 + _2992;
                        float _3048 = _3028 + _2993;
                        float _3049 = _3029 + _2994;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3057 = dot(vec3(_426, _429, _432), vec3(_3027, _3028, _3029));
                        float _4393 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3061 = dot(vec3(_426, _429, _432), vec3(_3053 * _3047, _3053 * _3048, _3053 * _3049));
                        float _4404 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3068 = ((_3064 * _3064) * (_3046 + (-1.0))) + 1.0;
                        float _3069 = _3005 * _3045;
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _2995) + _3070;
                        float _4415 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3075 = 1.0 - _3045;
                        float _3085 = (0.5 / (((_3074 * ((_3060 * _3075) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3045) * _3060))) * _3074;
                        float _4426 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3096 = (((_3046 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3068 * _3068) * ((_3012 * 2.1991131305694580078125) + 3.141590118408203125))) * _3001;
                        _2849 = (_3016 * _2964.x) + _2922;
                        _2850 = (_3016 * _2964.y) + _2923;
                        _2851 = (_3016 * _2964.z) + _2924;
                        _2846 = (_3096 * _2981.x) + _2919;
                        _2847 = (_3096 * _2981.y) + _2920;
                        _2848 = (_3096 * _2981.z) + _2921;
                        if (_2926 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2919 = _2846;
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2926;
                        }
                    }
                    frontier_phi_71_pred = _2851;
                    frontier_phi_71_pred_1 = _2850;
                    frontier_phi_71_pred_2 = _2849;
                    frontier_phi_71_pred_3 = _2848;
                    frontier_phi_71_pred_4 = _2847;
                    frontier_phi_71_pred_5 = _2846;
                }
                _2632 = frontier_phi_71_pred;
                _2630 = frontier_phi_71_pred_1;
                _2628 = frontier_phi_71_pred_2;
                _2626 = frontier_phi_71_pred_3;
                _2624 = frontier_phi_71_pred_4;
                _2622 = frontier_phi_71_pred_5;
                uint _2781 = _2780 + 1u;
                if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2774 = _2622;
                    _2775 = _2624;
                    _2776 = _2626;
                    _2777 = _2628;
                    _2778 = _2630;
                    _2779 = _2632;
                    _2780 = _2781;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((4294967295u << _2638) & _2541) == 0u)
        {
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
        }
        else
        {
            float _2767 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
            float _2768 = _2767 * _1599;
            float _2769 = _2767 * _1600;
            float _2770 = _2767 * _1601;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2902 = _2621;
                float _2903 = _2623;
                float _2904 = _2625;
                float _2905 = _2627;
                float _2906 = _2629;
                float _2907 = _2631;
                uint _2908 = _2638;
                uint _2917;
                bool _2918;
                for (;;)
                {
                    _2917 = texelFetch(g_lightClassification, int((((_2535 << 5u) + (_2521 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                    _2918 = _2917 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2918)
                    {
                        frontier_phi_82_pred = _2907;
                        frontier_phi_82_pred_1 = _2906;
                        frontier_phi_82_pred_2 = _2905;
                        frontier_phi_82_pred_3 = _2904;
                        frontier_phi_82_pred_4 = _2903;
                        frontier_phi_82_pred_5 = _2902;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3123 = _2902;
                        float _3124 = _2903;
                        float _3125 = _2904;
                        float _3126 = _2905;
                        float _3127 = _2906;
                        float _3128 = _2907;
                        uint _3129 = _2917;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3140 = ((_2908 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3140 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3140 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_1601, _3250.z, fma(_1600, _3250.y, _3250.x * _1599)) + _3250.w;
                            _3263 = !((fma(_1601, _3231.z, fma(_1600, _3231.y, _3231.x * _1599)) + _3231.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3155.x - _1599;
                                float _3291 = _3155.y - _1600;
                                float _3292 = _3155.z - _1601;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3156 * _3156));
                                float _4437 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3308 = sqrt(_3293) * _3171.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_426, _429, _432))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_1601, _3199.z, fma(_1600, _3199.y, _3199.x * _1599)) + _3199.w) / _3262;
                                float _3322 = (fma(_1601, _3215.z, fma(_1600, _3215.y, _3215.x * _1599)) + _3215.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4453 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _501;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2768;
                                float _3352 = _3298 - _2769;
                                float _3353 = _3299 - _2770;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2768, (-0.0) - _2769, (-0.0) - _2770));
                                float _4464 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3365 = dot(vec3(_426, _429, _432), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4475 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_426, _429, _432), vec3(_3297, _3298, _3299))) + _3374;
                                float _4486 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4497 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3328 * _3171.z;
                                frontier_phi_88_pred_1 = _3328 * _3171.y;
                                frontier_phi_88_pred_2 = _3328 * _3171.x;
                                frontier_phi_88_pred_3 = _3402 * _3183.z;
                                frontier_phi_88_pred_4 = _3402 * _3183.y;
                                frontier_phi_88_pred_5 = _3402 * _3183.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_88_pred;
                            _3410 = frontier_phi_88_pred_1;
                            _3409 = frontier_phi_88_pred_2;
                            _3408 = frontier_phi_88_pred_3;
                            _3407 = frontier_phi_88_pred_4;
                            _3406 = frontier_phi_88_pred_5;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3115;
                        frontier_phi_82_pred_1 = _3114;
                        frontier_phi_82_pred_2 = _3113;
                        frontier_phi_82_pred_3 = _3112;
                        frontier_phi_82_pred_4 = _3111;
                        frontier_phi_82_pred_5 = _3110;
                    }
                    _2753 = frontier_phi_82_pred;
                    _2751 = frontier_phi_82_pred_1;
                    _2749 = frontier_phi_82_pred_2;
                    _2747 = frontier_phi_82_pred_3;
                    _2745 = frontier_phi_82_pred_4;
                    _2743 = frontier_phi_82_pred_5;
                    uint _2909 = _2908 + 1u;
                    if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2902 = _2743;
                        _2903 = _2745;
                        _2904 = _2747;
                        _2905 = _2749;
                        _2906 = _2751;
                        _2907 = _2753;
                        _2908 = _2909;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2749;
                frontier_phi_63_64_ladder_1 = _2753;
                frontier_phi_63_64_ladder_2 = _2751;
                frontier_phi_63_64_ladder_3 = _2747;
                frontier_phi_63_64_ladder_4 = _2745;
                frontier_phi_63_64_ladder_5 = _2743;
            }
            else
            {
                frontier_phi_63_64_ladder = _2627;
                frontier_phi_63_64_ladder_1 = _2631;
                frontier_phi_63_64_ladder_2 = _2629;
                frontier_phi_63_64_ladder_3 = _2625;
                frontier_phi_63_64_ladder_4 = _2623;
                frontier_phi_63_64_ladder_5 = _2621;
            }
            _2742 = frontier_phi_63_64_ladder_5;
            _2744 = frontier_phi_63_64_ladder_4;
            _2746 = frontier_phi_63_64_ladder_3;
            _2748 = frontier_phi_63_64_ladder;
            _2750 = frontier_phi_63_64_ladder_2;
            _2752 = frontier_phi_63_64_ladder_1;
        }
        float _2757 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2554 = (_2757 * _2748) + _2066;
        _2556 = (_2757 * _2750) + _2068;
        _2558 = (_2757 * _2752) + _2070;
        _2560 = ((_2742 * _470) * _2757) + _2404;
        _2562 = ((_2744 * _472) * _2757) + _2406;
        _2564 = ((_2746 * _473) * _2757) + _2408;
    }
    else
    {
        _2554 = _2066;
        _2556 = _2068;
        _2558 = _2070;
        _2560 = _2404;
        _2562 = _2406;
        _2564 = _2408;
    }
    float _4513 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4524 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4535 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2581 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2554 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _485))) + ((_2560 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2582 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2556 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _485))) + ((_2562 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2583 = ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2558 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _485))) + ((_2564 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    uint _2584 = _445 + 6u;
    float _2592 = _406 / cbSceneParam._m0[86u].x;
    float _2593 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2607 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2609 = _2607.x;
    float _2610 = _2607.y;
    float _2611 = _2607.z;
    float _2612 = _2607.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2647 = _2646 / _325;
        float _2658 = _2647 * _378;
        float _2659 = _379 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _380;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2859;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2859 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2803 = 1.0 / cbSceneParam._m0[80u].x;
            float _2804 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2805 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            _2859 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2814 - _2815) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))))) * _2803)) - ((exp2(_2682 * _2814) - exp2(_2682 * _2815)) * _2803))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2861 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, 1.0), 0.0);
        float _2870 = exp2((_2859 * (-1.44269502162933349609375)) * (1.0 - _2861.w));
        float _2871 = log2(_2870);
        float _2887 = log2(_2612);
        _2684 = (exp2(_2887 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].x)) * _2861.x) / cbSceneParam._m0[78u].x)) + _2609;
        _2686 = (exp2(_2887 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].y)) * _2861.y) / cbSceneParam._m0[78u].y)) + _2610;
        _2688 = (exp2(_2887 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].z)) * _2861.z) / cbSceneParam._m0[78u].z)) + _2611;
        _2690 = _2870 * _2612;
    }
    else
    {
        _2684 = _2609;
        _2686 = _2610;
        _2688 = _2611;
        _2690 = _2612;
    }
    bool _2897;
    vec4 _2700;
    vec4 _2722;
    float _2724;
    float _2728;
    float _2729;
    float _2730;
    float _2731;
    bool _2741;
    for (;;)
    {
        _2700 = cbMatDynParam._m0[0u];
        float _2702 = roundEven(_2700.y);
        bool _2703 = _2702 == 3.0;
        float _2704 = log2(_2690);
        float _2711 = exp2(_2704 * cbSceneParam._m0[78u].x) * _2581;
        float _2712 = exp2(_2704 * cbSceneParam._m0[78u].y) * _2582;
        float _2713 = exp2(_2704 * cbSceneParam._m0[78u].z) * _2583;
        float _2720 = _394 + (-0.5);
        _2722 = cbMtdParam._m0[1u];
        _2724 = _2722.y * _2720;
        float _2727 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2728 = _2727 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
        _2729 = _2727 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
        _2730 = _2727 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
        _2731 = _2720 * 0.999000012874603271484375;
        _2741 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2741)
        {
            if ((cbInstanceData._m0[_445 + 7u].x + _2731) < 0.5)
            {
                _2897 = true;
                break;
            }
        }
        uint _2838 = _446 + uint(_2700.w);
        if ((cbInstanceData._m0[_2838].w < 1.0) && ((cbInstanceData._m0[_2838].w + _2731) < 0.5))
        {
            _2897 = true;
            break;
        }
        if ((_2724 + 1.0) < _2722.x)
        {
            _2897 = true;
            break;
        }
        _2897 = false;
        break;
    }
    float _3101;
    if (_2897)
    {
        discard_state = true;
        _3101 = 0.0;
    }
    else
    {
        _3101 = cbInstanceData._m0[_2584].w;
    }
    SV_Target.x = _2728;
    SV_Target.y = _2729;
    SV_Target.z = _2730;
    SV_Target.w = _3101;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2584].w;
    discard_exit();
}


