#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _951;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _299 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3286 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _307 = (_300 * ((_268.x * cbMtdParam._m0[10u].x) - _243)) + _243;
    float _308 = (_300 * ((_268.y * cbMtdParam._m0[10u].y) - _244)) + _244;
    float _309 = (_300 * ((_268.z * cbMtdParam._m0[10u].z) - _245)) + _245;
    vec4 _321 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _323 = _321.x;
    float _325 = _323 - (_323 * TEXCOORD_5.x);
    vec4 _342 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = (_342.x * 2.0) + (-1.0);
    float _352 = (_342.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_350, _352), vec2(_350, _352));
    float _3297 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))));
    float _359 = _342.z * cbMtdParam._m0[13u].y;
    vec4 _372 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _386 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_372.z * cbMtdParam._m0[13u].x) - _359)) + _359;
    float _392 = ((((_372.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _350;
    float _393 = ((((_372.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _352;
    float _396 = fma(_358, _207 * NORMAL.x, fma(_393, _214 * TANGENT.x, (_200 * _192) * _392));
    float _399 = fma(_358, _207 * NORMAL.y, fma(_393, _214 * TANGENT.y, (_200 * _193) * _392));
    float _402 = fma(_358, _207 * NORMAL.z, fma(_393, _214 * TANGENT.z, (_200 * _194) * _392));
    float _406 = inversesqrt(dot(vec3(_396, _399, _402), vec3(_396, _399, _402)));
    float _407 = _406 * _396;
    float _408 = _406 * _399;
    float _409 = _406 * _402;
    float _3308 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _410 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3330 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3341 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3352 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _414 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _471 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _481 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _471);
    float _482 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _471);
    float _483 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _471);
    float _487 = inversesqrt(dot(vec3(_481, _482, _483), vec3(_481, _482, _483)));
    float _488 = _481 * _487;
    float _489 = _482 * _487;
    float _490 = _483 * _487;
    float _496 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _497 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _517 = fma(_409, cbSceneParam._m0[5u].z, fma(_408, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _407));
    float _520 = fma(_409, cbSceneParam._m0[6u].z, fma(_408, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _407));
    float _523 = fma(_409, cbSceneParam._m0[7u].z, fma(_408, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _407));
    uint _536 = uint(roundEven(NORMAL.w)) * 13u;
    uint _538 = (_536 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _544 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_538].x;
    float _545 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_538].y;
    float _546 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_538].z;
    float _3363 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _547 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _550 = 1.0 - _414;
    float _551 = _547 * _550;
    float _552 = _548 * _550;
    float _553 = _549 * _550;
    float _558 = (_547 + (-0.039999999105930328369140625)) * _414;
    float _559 = (_548 + (-0.039999999105930328369140625)) * _414;
    float _560 = (_549 + (-0.039999999105930328369140625)) * _414;
    float _561 = _558 + 0.039999999105930328369140625;
    float _563 = _559 + 0.039999999105930328369140625;
    float _564 = _560 + 0.039999999105930328369140625;
    vec4 _573 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _496, cbSceneParam._m0[86u].y * _497));
    float _576 = _573.x * TEXCOORD_5.w;
    float _577 = dot(vec3(_407, _408, _409), vec3(_488, _489, _490));
    float _580 = _577 * 2.0;
    float _584 = (_580 * _407) - _488;
    float _585 = (_580 * _408) - _489;
    float _586 = (_580 * _409) - _490;
    float _590 = abs(dot(vec3(_488, _489, _490), vec3(_407, _408, _409)));
    float _3396 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _592 = sqrt(_410);
    float _605 = exp2((_592 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_592 * 3.0));
    float _611 = (1.0 - _605) * ((_592 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _612 = _605 * _592;
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _950;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = fma(_648, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640));
        float _679 = fma(_648, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640));
        float _683 = fma(_648, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640));
        float _708 = _640 + _407;
        float _709 = _644 + _408;
        float _710 = _648 + _409;
        float _720 = fma(_710, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708)) - _675;
        float _721 = fma(_710, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708)) - _679;
        float _722 = fma(_710, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708)) - _683;
        float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
        float _739 = ((_726 * _720) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_675 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_726 * _721) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_679 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_726 * _722) / cbModelParam._m0[34u].z) + ((((((_683 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_739, _740, _741), 0.0);
        float _778 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_744.x + (-0.5));
        float _780 = _778 * (_744.y + (-0.5));
        float _781 = _778 * (_744.z + (-0.5));
        float _788 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_751.x + (-0.5));
        float _790 = _788 * (_751.y + (-0.5));
        float _791 = _788 * (_751.z + (-0.5));
        float _798 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_758.x + (-0.5));
        float _800 = _798 * (_758.y + (-0.5));
        float _801 = _798 * (_758.z + (-0.5));
        float _808 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_765.x + (-0.5));
        float _810 = _808 * (_765.y + (-0.5));
        float _811 = _808 * (_765.z + (-0.5));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = _779 * 0.5;
        float _816 = _789 * 0.5;
        float _817 = _799 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _832 = (dot(vec3(_407, _408, _409), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _842 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3444 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_844 + 1.0))) + _849) * _812;
        float _859 = _780 * 0.5;
        float _860 = _790 * 0.5;
        float _861 = _800 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_407, _408, _409), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3477 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_886 + 1.0))) + _891) * _813;
        float _901 = _781 * 0.5;
        float _902 = _791 * 0.5;
        float _903 = _801 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(_407, _408, _409), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3510 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_928 + 1.0))) + _933) * _814;
        _950 = _781;
        _952 = _780;
        _953 = _779;
        _954 = _791;
        _955 = _790;
        _956 = _789;
        _957 = _801;
        _958 = _800;
        _959 = _799;
        _960 = _814;
        _961 = _813;
        _962 = _812;
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
    }
    else
    {
        _950 = _951;
        _952 = _951;
        _953 = _951;
        _954 = _951;
        _955 = _951;
        _956 = _951;
        _957 = _951;
        _958 = _951;
        _959 = _951;
        _960 = _951;
        _961 = _951;
        _962 = _951;
        _963 = 0.0;
        _964 = 0.0;
        _965 = 0.0;
    }
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _991 = fma(_648, cbModelParam._m0[30u].z, fma(_644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _640));
        float _995 = fma(_648, cbModelParam._m0[31u].z, fma(_644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _640));
        float _999 = fma(_648, cbModelParam._m0[32u].z, fma(_644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _640));
        float _1022 = _640 + _407;
        float _1023 = _644 + _408;
        float _1024 = _648 + _409;
        float _1034 = fma(_1024, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022)) - _991;
        float _1035 = fma(_1024, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022)) - _995;
        float _1036 = fma(_1024, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022)) - _999;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_991 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_995 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[35u].z) + ((((((_999 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1090 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1057.x + (-0.5));
        float _1092 = _1090 * (_1057.y + (-0.5));
        float _1093 = _1090 * (_1057.z + (-0.5));
        float _1100 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1064.x + (-0.5));
        float _1102 = _1100 * (_1064.y + (-0.5));
        float _1103 = _1100 * (_1064.z + (-0.5));
        float _1110 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1071.x + (-0.5));
        float _1112 = _1110 * (_1071.y + (-0.5));
        float _1113 = _1110 * (_1071.z + (-0.5));
        float _1120 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1078.x + (-0.5));
        float _1122 = _1120 * (_1078.y + (-0.5));
        float _1123 = _1120 * (_1078.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_407, _408, _409), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3573 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1154 + 1.0))) + _1159) * _1124;
        float _1169 = _1092 * 0.5;
        float _1170 = _1102 * 0.5;
        float _1171 = _1112 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_407, _408, _409), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3606 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1196 + 1.0))) + _1201) * _1125;
        float _1211 = _1093 * 0.5;
        float _1212 = _1103 * 0.5;
        float _1213 = _1113 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_407, _408, _409), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3639 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1238 + 1.0))) + _1243) * _1126;
        _1260 = _1093;
        _1261 = _1092;
        _1262 = _1091;
        _1263 = _1103;
        _1264 = _1102;
        _1265 = _1101;
        _1266 = _1113;
        _1267 = _1112;
        _1268 = _1111;
        _1269 = _1126;
        _1270 = _1125;
        _1271 = _1124;
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
    }
    else
    {
        _1260 = _951;
        _1261 = _951;
        _1262 = _951;
        _1263 = _951;
        _1264 = _951;
        _1265 = _951;
        _1266 = _951;
        _1267 = _951;
        _1268 = _951;
        _1269 = _951;
        _1270 = _951;
        _1271 = _951;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _965)) + _965;
    float _1307 = fma(_1286, cbSceneParam._m0[89u].z, fma(_1285, cbSceneParam._m0[89u].y, _1284 * cbSceneParam._m0[89u].x));
    float _1310 = fma(_1286, cbSceneParam._m0[90u].z, fma(_1285, cbSceneParam._m0[90u].y, _1284 * cbSceneParam._m0[90u].x));
    float _1313 = fma(_1286, cbSceneParam._m0[91u].z, fma(_1285, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1284));
    float _1328 = _584 * 0.5;
    float _1329 = _585 * 0.5;
    float _1330 = _586 * 0.5;
    float _1331 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1334 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1337 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1371;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1344 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_950, _954, _957, _960));
        float _1348 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_952, _955, _958, _961));
        float _1352 = dot(vec4(_1328, _1329, _1330, 1.0), vec4(_953, _956, _959, _962));
        float _1359 = dot(vec4(cbModelParam._m0[39u]), vec4(_1328, _1329, _1330, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1382;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1373 = dot(vec4(cbModelParam._m0[40u]), vec4(_1328, _1329, _1330, 1.0));
        _1382 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1382 = 1.0;
    }
    float _1386 = (_1382 * cbModelParam._m0[1u].x) + (_1371 * (1.0 - cbModelParam._m0[1u].x));
    float _1396 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _410);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1396 : min(cbModelParam._m0[25u].z, _1396));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_648, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_648, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_648, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_586, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584));
        float _1459 = fma(_586, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584));
        float _1462 = fma(_586, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1490 = frontier_phi_14_12_ladder;
        }
        float _1697;
        if (_1459 > 0.0)
        {
            _1697 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1697 = frontier_phi_23_19_ladder;
        }
        float _1951;
        if (_1462 > 0.0)
        {
            _1951 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1951 = frontier_phi_35_30_ladder;
        }
        float _1953 = isnan(_1697) ? _1490 : (isnan(_1490) ? _1697 : min(_1490, _1697));
        float _1954 = isnan(_1951) ? _1953 : (isnan(_1953) ? _1951 : min(_1953, _1951));
        float _1958 = (_1954 * _1456) + _1445;
        float _1959 = (_1954 * _1459) + _1449;
        float _1960 = (_1954 * _1462) + _1453;
        float _1961 = _1954 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1961;
        float _1965 = _1961 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 > _1965) || ((_1959 < _1963) || ((_1958 < _1963) || (_1958 > _1965))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1960, cbModelParam._m0[9u].z, fma(_1959, cbModelParam._m0[9u].y, _1958 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1960, cbModelParam._m0[10u].z, fma(_1959, cbModelParam._m0[10u].y, _1958 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1960, cbModelParam._m0[11u].z, fma(_1959, cbModelParam._m0[11u].y, _1958 * cbModelParam._m0[11u].x))), _1397);
            frontier_phi_13_35_ladder = _2088.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2088.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2088.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_13_35_ladder_2;
        _1480 = frontier_phi_13_35_ladder_1;
        _1482 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_584, _585, _586), _1397);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _410);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_648, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_648, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_648, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_586, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584));
        float _1558 = fma(_586, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584));
        float _1561 = fma(_586, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584));
        float _1702;
        if (_1555 > 0.0)
        {
            _1702 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1702 = frontier_phi_25_21_ladder;
        }
        float _1978;
        if (_1558 > 0.0)
        {
            _1978 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1978 = frontier_phi_37_32_ladder;
        }
        float _2191;
        if (_1561 > 0.0)
        {
            _2191 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2191 = frontier_phi_46_43_ladder;
        }
        float _2193 = isnan(_1978) ? _1702 : (isnan(_1702) ? _1978 : min(_1702, _1978));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1555) + _1544;
        float _2199 = (_2194 * _1558) + _1548;
        float _2200 = (_2194 * _1561) + _1552;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2201;
        float _2204 = _2201 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2200 > _2204) || ((_2200 < _2202) || ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 < _2202) || (_2198 > _2204))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2200, cbModelParam._m0[17u].z, fma(_2199, cbModelParam._m0[17u].y, _2198 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2200, cbModelParam._m0[18u].z, fma(_2199, cbModelParam._m0[18u].y, _2198 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2200, cbModelParam._m0[19u].z, fma(_2199, cbModelParam._m0[19u].y, _2198 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_22_46_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_22_46_ladder_2;
        _1582 = frontier_phi_22_46_ladder_1;
        _1584 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_584, _585, _586), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1597 = (((_611 * _561) + _612) * _576) * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1599 = (((_611 * _563) + _612) * _576) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_611 * _564) + _612) * _576) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1604 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1599, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1599, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1599, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    uvec4 _1620 = floatBitsToUint(cbInstanceData._m0[_536 + 5u]);
    uint _1622 = _1620.x * 14u;
    uint _1623 = _1622 + 13u;
    float _1630 = _576 + (-1.0);
    float _1635 = (cbLight._m0[_1623].x * _1630) + 1.0;
    float _1636 = (cbLight._m0[_1623].y * _1630) + 1.0;
    float _1637 = (cbLight._m0[_1623].z * _1630) + 1.0;
    float _1638 = (cbLight._m0[_1623].w * _1630) + 1.0;
    uint _1639 = _1622 + 5u;
    float _1645 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1649 = _1622 + 4u;
    float _1656 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1660 = _1622 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_407, _408, _409));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_407, _408, _409));
    float _3775 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3786 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1639].x * _1645) * _1681) + ((cbLight._m0[_1649].x * _1656) * _1679);
    float _1689 = ((_1645 * cbLight._m0[_1639].y) * _1681) + ((_1656 * cbLight._m0[_1649].y) * _1679);
    float _1690 = ((_1645 * cbLight._m0[_1639].z) * _1681) + ((_1656 * cbLight._m0[_1649].z) * _1679);
    uvec4 _1694 = floatBitsToUint(cbLight._m0[_1622 + 12u]);
    bool _1696 = _1694.x == 0u;
    float _1707;
    float _1709;
    float _1711;
    if (_1696)
    {
        _1707 = _1688;
        _1709 = _1689;
        _1711 = _1690;
    }
    else
    {
        uint _1715 = _1622 + 6u;
        float _1731 = (dot(vec3(cbLight._m0[_1622 + 2u].xyz), vec3(_407, _408, _409)) * 0.5) + 0.5;
        float _1732 = _1731 * _1731;
        float _3797 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1734 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1707 = (((cbLight._m0[_1715].x * 0.3183098733425140380859375) * _1733) * _1734) + _1688;
        _1709 = (((cbLight._m0[_1715].y * 0.3183098733425140380859375) * _1733) * _1734) + _1689;
        _1711 = (((cbLight._m0[_1715].z * 0.3183098733425140380859375) * _1733) * _1734) + _1690;
    }
    bool _1714 = _1694.y == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1714)
    {
        _1752 = _1707;
        _1754 = _1709;
        _1756 = _1711;
    }
    else
    {
        uint _1922 = _1622 + 7u;
        float _1938 = (dot(vec3(cbLight._m0[_1622 + 3u].xyz), vec3(_407, _408, _409)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _3813 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1941 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1752 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1707;
        _1754 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1709;
        _1756 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1711;
    }
    uint _1759 = _1622 + 8u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _410) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1622].x + _488;
    float _1775 = cbLight._m0[_1622].y + _489;
    float _1776 = cbLight._m0[_1622].z + _490;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1622].xyz));
    float _3829 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _1788 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1789 = dot(vec3(_407, _408, _409), vec3(_1781, _1782, _1783));
    float _3851 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1793 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1781, _1782, _1783));
    float _3862 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1797 = _1773 * _1773;
    float _1801 = ((_1792 * _1792) * (_1797 + (-1.0))) + 1.0;
    float _1809 = exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0);
    float _1810 = 0.959999978542327880859375 - _558;
    float _1812 = 0.959999978542327880859375 - _559;
    float _1813 = 0.959999978542327880859375 - _560;
    float _1820 = 1.0 - _1773;
    float _1831 = (0.5 / (((_1788 * ((_1787 * _1820) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1820) + _1773) * _1787))) * _1787;
    float _3873 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1833 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1797 / ((_1801 * _1801) * 3.141590118408203125));
    uint _1844 = _1622 + 9u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _410) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1660].x + _488;
    float _1858 = cbLight._m0[_1660].y + _489;
    float _1859 = cbLight._m0[_1660].z + _490;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1660].xyz));
    float _3884 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1871 = dot(vec3(_407, _408, _409), vec3(_1864, _1865, _1866));
    float _3895 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1864, _1865, _1866));
    float _3906 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1856 * _1856;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1890 = exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0);
    float _1897 = 1.0 - _1856;
    float _1907 = (0.5 / (((_1788 * ((_1870 * _1897) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _1897) + _1856) * _1870))) * _1870;
    float _3917 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    float _1919 = (((((_1890 * _1810) + _561) * cbLight._m0[_1844].x) * _1909) * _1645) + (((((_1809 * _1810) + _561) * cbLight._m0[_1759].x) * _1833) * _1656);
    float _1920 = (((((_1890 * _1812) + _563) * cbLight._m0[_1844].y) * _1909) * _1645) + (((((_1809 * _1812) + _563) * cbLight._m0[_1759].y) * _1833) * _1656);
    float _1921 = (((((_1890 * _1813) + _564) * cbLight._m0[_1844].z) * _1909) * _1645) + (((((_1809 * _1813) + _564) * cbLight._m0[_1759].z) * _1833) * _1656);
    float _1983;
    float _1985;
    float _1987;
    if (_1696)
    {
        _1983 = _1919;
        _1985 = _1920;
        _1987 = _1921;
    }
    else
    {
        uint _1989 = _1622 + 2u;
        uint _1993 = _1622 + 10u;
        float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _410) * 0.949999988079071044921875);
        float _2008 = _2007 * _2007;
        float _2009 = cbLight._m0[_1989].x + _488;
        float _2010 = cbLight._m0[_1989].y + _489;
        float _2011 = cbLight._m0[_1989].z + _490;
        float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
        float _2016 = _2015 * _2009;
        float _2017 = _2015 * _2010;
        float _2018 = _2015 * _2011;
        float _2019 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_1989].xyz));
        float _3928 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _2023 = dot(vec3(_407, _408, _409), vec3(_2016, _2017, _2018));
        float _3939 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2027 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2016, _2017, _2018));
        float _3950 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2031 = _2008 * _2008;
        float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
        float _2042 = exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0);
        float _2049 = 1.0 - _2008;
        float _2059 = (0.5 / (((_1788 * ((_2022 * _2049) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2049) + _2008) * _2022))) * _2022;
        float _3961 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2061 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
        float _2062 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1983 = (((((_2042 * _1810) + _561) * cbLight._m0[_1993].x) * _2061) * _2062) + _1919;
        _1985 = (((((_2042 * _1812) + _563) * cbLight._m0[_1993].y) * _2061) * _2062) + _1920;
        _1987 = (((((_2042 * _1813) + _564) * cbLight._m0[_1993].z) * _2061) * _2062) + _1921;
    }
    float _2097;
    float _2099;
    float _2101;
    if (_1714)
    {
        _2097 = _1983;
        _2099 = _1985;
        _2101 = _1987;
    }
    else
    {
        uint _2108 = _1622 + 3u;
        uint _2112 = _1622 + 11u;
        float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _410) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2108].x + _488;
        float _2129 = cbLight._m0[_2108].y + _489;
        float _2130 = cbLight._m0[_2108].z + _490;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_407, _408, _409), vec3(cbLight._m0[_2108].xyz));
        float _3977 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2142 = dot(vec3(_407, _408, _409), vec3(_2135, _2136, _2137));
        float _3988 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2135, _2136, _2137));
        float _3999 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
        float _2168 = 1.0 - _2127;
        float _2178 = (0.5 / (((_1788 * ((_2141 * _2168) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1788 * _2168) + _2127) * _2141))) * _2141;
        float _4010 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _2097 = (((((_2161 * _1810) + _561) * cbLight._m0[_2112].x) * _2180) * _2181) + _1983;
        _2099 = (((((_2161 * _1812) + _563) * cbLight._m0[_2112].y) * _2180) * _2181) + _1985;
        _2101 = (((((_2161 * _1813) + _564) * cbLight._m0[_2112].z) * _2180) * _2181) + _1987;
    }
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1620.y == 0u)
    {
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2256;
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2256;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2256;
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.x;
        uint _2283 = uint((float(_2271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _497) / _2272))) + floor(float(uint(cbSceneParam._m0[85u].x * _496) / _2272)));
        float _2293 = (log2(_2259 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2294 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        uint _2297 = uint(isnan(14.0) ? _2294 : (isnan(_2294) ? 14.0 : min(_2294, 14.0)));
        uvec4 _2302 = texelFetch(g_lightClusterGridBuffer, int(((_2297 << 2u) + (_2283 << 6u)) >> 2u));
        uint _2303 = _2302.x;
        uint _2304 = _2271.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2304 >> 4u) & 15u)) + 4294967295u) & _2303) == 0u) || ((_2304 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2565)
                {
                    frontier_phi_61_pred = _2549;
                    frontier_phi_61_pred_1 = _2554;
                    frontier_phi_61_pred_2 = _2553;
                    frontier_phi_61_pred_3 = _2552;
                    frontier_phi_61_pred_4 = _2551;
                    frontier_phi_61_pred_5 = _2550;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2564;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2555 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2257;
                        float _2740 = _2699.y - _2258;
                        float _2741 = _2699.z - _2259;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_517, _520, _523), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4036 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2257;
                        float _2775 = (-0.0) - _2258;
                        float _2776 = (-0.0) - _2259;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _592;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_517, _520, _523), vec3(_2781, _2782, _2783));
                        float _4052 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2816 = dot(vec3(_517, _520, _523), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4063 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4074 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4085 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2608 = (_2770 * _2718.x) + _2676;
                        _2609 = (_2770 * _2718.y) + _2677;
                        _2610 = (_2770 * _2718.z) + _2678;
                        _2605 = (_2851 * _2735.x) + _2673;
                        _2606 = (_2851 * _2735.y) + _2674;
                        _2607 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_61_pred = _2605;
                    frontier_phi_61_pred_1 = _2610;
                    frontier_phi_61_pred_2 = _2609;
                    frontier_phi_61_pred_3 = _2608;
                    frontier_phi_61_pred_4 = _2607;
                    frontier_phi_61_pred_5 = _2606;
                }
                _2405 = frontier_phi_61_pred;
                _2415 = frontier_phi_61_pred_1;
                _2413 = frontier_phi_61_pred_2;
                _2411 = frontier_phi_61_pred_3;
                _2409 = frontier_phi_61_pred_4;
                _2407 = frontier_phi_61_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2405;
                    _2550 = _2407;
                    _2551 = _2409;
                    _2552 = _2411;
                    _2553 = _2413;
                    _2554 = _2415;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2421) & _2303) == 0u)
        {
            _2517 = _2404;
            _2519 = _2406;
            _2521 = _2408;
            _2523 = _2410;
            _2525 = _2412;
            _2527 = _2414;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
            float _2543 = _2542 * _2257;
            float _2544 = _2542 * _2258;
            float _2545 = _2542 * _2259;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2656 = _2404;
                float _2657 = _2406;
                float _2658 = _2408;
                float _2659 = _2410;
                float _2660 = _2412;
                float _2661 = _2414;
                uint _2662 = _2421;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2672)
                    {
                        frontier_phi_67_pred = _2659;
                        frontier_phi_67_pred_1 = _2660;
                        frontier_phi_67_pred_2 = _2661;
                        frontier_phi_67_pred_3 = _2658;
                        frontier_phi_67_pred_4 = _2657;
                        frontier_phi_67_pred_5 = _2656;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        uint _2875 = _2671;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2961;
                        float _3008;
                        bool _3009;
                        for (;;)
                        {
                            uint _2886 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2886 * 40u) + 20u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2964 = (_2886 * 40u) + 24u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2983 = (_2886 * 40u) + 28u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _3008 = fma(_2259, _2996.z, fma(_2258, _2996.y, _2996.x * _2257)) + _2996.w;
                            _3009 = !((fma(_2259, _2977.z, fma(_2258, _2977.y, _2977.x * _2257)) + _2977.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3009)
                            {
                                float _3036 = _2901.x - _2257;
                                float _3037 = _2901.y - _2258;
                                float _3038 = _2901.z - _2259;
                                float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                                float _3042 = inversesqrt(_3039);
                                float _3043 = _3042 * _3036;
                                float _3044 = _3042 * _3037;
                                float _3045 = _3042 * _3038;
                                float _3049 = 1.0 - (_3039 / (_2902 * _2902));
                                float _4096 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3054 = sqrt(_3039) * _2917.w;
                                float _3056 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                                float _3057 = _3056 * _3056;
                                float _3060 = ((1.0 - _3057) * dot(vec3(_3043, _3044, _3045), vec3(_517, _520, _523))) + _3057;
                                float _3063 = _3054 * _3054;
                                float _3067 = (fma(_2259, _2945.z, fma(_2258, _2945.y, _2945.x * _2257)) + _2945.w) / _3008;
                                float _3068 = (fma(_2259, _2961.z, fma(_2258, _2961.y, _2961.x * _2257)) + _2961.w) / _3008;
                                float _3072 = 1.0 - dot(vec2(_3067, _3068), vec2(_3067, _3068));
                                float _4112 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3074 = _3073 * (((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3050) / ((_3063 * 0.699999988079071044921875) + 1.0));
                                float _3086 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                                float _3087 = 1.0 - _592;
                                float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                                float _3095 = _3094 * _3094;
                                float _3096 = _3095 * _3095;
                                float _3097 = _3043 - _2543;
                                float _3098 = _3044 - _2544;
                                float _3099 = _3045 - _2545;
                                float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                                float _3107 = dot(vec3(_517, _520, _523), vec3((-0.0) - _2543, (-0.0) - _2544, (-0.0) - _2545));
                                float _4123 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3111 = dot(vec3(_517, _520, _523), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                                float _4134 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                                float _3119 = _3056 * _3095;
                                float _3120 = _3119 * _3119;
                                float _3126 = ((1.0 - _3120) * dot(vec3(_517, _520, _523), vec3(_3043, _3044, _3045))) + _3120;
                                float _4145 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3128 = 1.0 - _3095;
                                float _3138 = (0.5 / (((_3127 * ((_3110 * _3128) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3095) * _3110))) * _3127;
                                float _4156 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3148 = (_3073 * _3050) * (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_3118 * _3118) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3148 * _2929.x;
                                frontier_phi_73_pred_1 = _3148 * _2929.y;
                                frontier_phi_73_pred_2 = _3074 * _2917.z;
                                frontier_phi_73_pred_3 = _3074 * _2917.y;
                                frontier_phi_73_pred_4 = _3074 * _2917.x;
                                frontier_phi_73_pred_5 = _3148 * _2929.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3152 = frontier_phi_73_pred;
                            _3153 = frontier_phi_73_pred_1;
                            _3157 = frontier_phi_73_pred_2;
                            _3156 = frontier_phi_73_pred_3;
                            _3155 = frontier_phi_73_pred_4;
                            _3154 = frontier_phi_73_pred_5;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2859;
                        frontier_phi_67_pred_1 = _2860;
                        frontier_phi_67_pred_2 = _2861;
                        frontier_phi_67_pred_3 = _2858;
                        frontier_phi_67_pred_4 = _2857;
                        frontier_phi_67_pred_5 = _2856;
                    }
                    _2524 = frontier_phi_67_pred;
                    _2526 = frontier_phi_67_pred_1;
                    _2528 = frontier_phi_67_pred_2;
                    _2522 = frontier_phi_67_pred_3;
                    _2520 = frontier_phi_67_pred_4;
                    _2518 = frontier_phi_67_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2518;
                        _2657 = _2520;
                        _2658 = _2522;
                        _2659 = _2524;
                        _2660 = _2526;
                        _2661 = _2528;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2526;
                frontier_phi_55_56_ladder_1 = _2528;
                frontier_phi_55_56_ladder_2 = _2524;
                frontier_phi_55_56_ladder_3 = _2522;
                frontier_phi_55_56_ladder_4 = _2520;
                frontier_phi_55_56_ladder_5 = _2518;
            }
            else
            {
                frontier_phi_55_56_ladder = _2412;
                frontier_phi_55_56_ladder_1 = _2414;
                frontier_phi_55_56_ladder_2 = _2410;
                frontier_phi_55_56_ladder_3 = _2408;
                frontier_phi_55_56_ladder_4 = _2406;
                frontier_phi_55_56_ladder_5 = _2404;
            }
            _2517 = frontier_phi_55_56_ladder_5;
            _2519 = frontier_phi_55_56_ladder_4;
            _2521 = frontier_phi_55_56_ladder_3;
            _2523 = frontier_phi_55_56_ladder_2;
            _2525 = frontier_phi_55_56_ladder;
            _2527 = frontier_phi_55_56_ladder_1;
        }
        float _2532 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
        _2316 = (_2532 * _2523) + _1752;
        _2318 = (_2532 * _2525) + _1754;
        _2320 = (_2532 * _2527) + _1756;
        _2322 = ((_2517 * _561) * _2532) + _2097;
        _2324 = ((_2519 * _563) * _2532) + _2099;
        _2326 = ((_2521 * _564) * _2532) + _2101;
    }
    else
    {
        _2316 = _1752;
        _2318 = _1754;
        _2320 = _1756;
        _2322 = _2097;
        _2324 = _2099;
        _2326 = _2101;
    }
    float _4172 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4183 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4194 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    uint _2346 = _536 + 6u;
    float _2354 = _496 / cbSceneParam._m0[86u].x;
    float _2355 = _497 / cbSceneParam._m0[86u].y;
    vec4 _2369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2371 = _2369.x;
    float _2372 = _2369.y;
    float _2373 = _2369.z;
    float _2374 = _2369.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _2430 = _2429 / _430;
        float _2441 = _2430 * _481;
        float _2442 = _482 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2445 = _2430 * _483;
        float _2447 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2442;
        float _2455 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2443 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2580 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2618 = ((abs(_2455 / _2443) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2465 * _2589) - exp2(_2465 * _2590)) * _2578))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2374);
        _2467 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2371;
        _2469 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2372;
        _2471 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2373;
        _2473 = _2629 * _2374;
    }
    else
    {
        _2467 = _2371;
        _2469 = _2372;
        _2471 = _2373;
        _2473 = _2374;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2316 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _576))) + ((_2322 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2318 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _576))) + ((_2324 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2320 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _576))) + ((_2326 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1386)) * cbPerFrame._m0[3u].x));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2346].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2346].w;
}


