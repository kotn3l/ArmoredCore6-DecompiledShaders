#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1056;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _309 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3413 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[10u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[10u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[10u].z) - _255)) + _255;
    vec4 _343 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _372 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3424 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _380 = (_373 * ((_343.x * cbMtdParam._m0[11u].x) - _317)) + _317;
    float _381 = (_373 * ((_343.y * cbMtdParam._m0[11u].y) - _318)) + _318;
    float _382 = (_373 * ((_343.z * cbMtdParam._m0[11u].z) - _319)) + _319;
    vec4 _394 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _396 = _394.x;
    float _398 = _396 - (_396 * TEXCOORD_5.x);
    vec4 _415 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _423 = (_415.x * 2.0) + (-1.0);
    float _425 = (_415.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_423, _425), vec2(_423, _425));
    float _3435 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    float _432 = _415.z * cbMtdParam._m0[13u].y;
    vec4 _445 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _459 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_445.z * cbMtdParam._m0[13u].x) - _432)) + _432;
    vec4 _473 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _487 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_473.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    float _500 = (((((_445.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _423) + ((((_473.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _501 = (((((_445.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _425) + ((((_473.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _504 = fma(_431, _217 * NORMAL.x, fma(_501, _224 * TANGENT.x, (_210 * _202) * _500));
    float _507 = fma(_431, _217 * NORMAL.y, fma(_501, _224 * TANGENT.y, (_210 * _203) * _500));
    float _510 = fma(_431, _217 * NORMAL.z, fma(_501, _224 * TANGENT.z, (_210 * _204) * _500));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3446 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _518 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3468 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3479 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3490 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _522 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    float _603 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _604 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _625 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _628 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _641 = uint(roundEven(NORMAL.w)) * 13u;
    uint _643 = (_641 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3501 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _655 = 1.0 - _522;
    float _656 = _652 * _655;
    float _657 = _653 * _655;
    float _658 = _654 * _655;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _522;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _522;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _522;
    float _666 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    vec4 _678 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _603, cbSceneParam._m0[86u].y * _604));
    float _681 = _678.x * TEXCOORD_5.w;
    float _682 = dot(vec3(_515, _516, _517), vec3(_595, _596, _597));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _515) - _595;
    float _690 = (_685 * _516) - _596;
    float _691 = (_685 * _517) - _597;
    float _695 = abs(dot(vec3(_595, _596, _597), vec3(_515, _516, _517)));
    float _3534 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_518);
    float _710 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _716 = (1.0 - _710) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _717 = _710 * _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1055;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _780 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _784 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _788 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _813 = _745 + _515;
        float _814 = _749 + _516;
        float _815 = _753 + _517;
        float _825 = fma(_815, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813)) - _780;
        float _826 = fma(_815, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813)) - _784;
        float _827 = fma(_815, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813)) - _788;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_780 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_784 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[34u].z) + ((((((_788 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _883 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_849.x + (-0.5));
        float _885 = _883 * (_849.y + (-0.5));
        float _886 = _883 * (_849.z + (-0.5));
        float _893 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_856.x + (-0.5));
        float _895 = _893 * (_856.y + (-0.5));
        float _896 = _893 * (_856.z + (-0.5));
        float _903 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_863.x + (-0.5));
        float _905 = _903 * (_863.y + (-0.5));
        float _906 = _903 * (_863.z + (-0.5));
        float _913 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_870.x + (-0.5));
        float _915 = _913 * (_870.y + (-0.5));
        float _916 = _913 * (_870.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _937 = (dot(vec3(_515, _516, _517), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _947 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3582 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_949 + 1.0))) + _954) * _917;
        float _964 = _885 * 0.5;
        float _965 = _895 * 0.5;
        float _966 = _905 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_515, _516, _517), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3615 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_991 + 1.0))) + _996) * _918;
        float _1006 = _886 * 0.5;
        float _1007 = _896 * 0.5;
        float _1008 = _906 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_515, _516, _517), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3648 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1033 + 1.0))) + _1038) * _919;
        _1055 = _886;
        _1057 = _885;
        _1058 = _884;
        _1059 = _896;
        _1060 = _895;
        _1061 = _894;
        _1062 = _906;
        _1063 = _905;
        _1064 = _904;
        _1065 = _919;
        _1066 = _918;
        _1067 = _917;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _1056;
        _1057 = _1056;
        _1058 = _1056;
        _1059 = _1056;
        _1060 = _1056;
        _1061 = _1056;
        _1062 = _1056;
        _1063 = _1056;
        _1064 = _1056;
        _1065 = _1056;
        _1066 = _1056;
        _1067 = _1056;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1096 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1100 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1104 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1127 = _745 + _515;
        float _1128 = _749 + _516;
        float _1129 = _753 + _517;
        float _1139 = fma(_1129, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127)) - _1096;
        float _1140 = fma(_1129, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127)) - _1100;
        float _1141 = fma(_1129, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127)) - _1104;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1096 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1100 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[35u].z) + ((((((_1104 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1195 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1162.x + (-0.5));
        float _1197 = _1195 * (_1162.y + (-0.5));
        float _1198 = _1195 * (_1162.z + (-0.5));
        float _1205 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1169.x + (-0.5));
        float _1207 = _1205 * (_1169.y + (-0.5));
        float _1208 = _1205 * (_1169.z + (-0.5));
        float _1215 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1176.x + (-0.5));
        float _1217 = _1215 * (_1176.y + (-0.5));
        float _1218 = _1215 * (_1176.z + (-0.5));
        float _1225 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1183.x + (-0.5));
        float _1227 = _1225 * (_1183.y + (-0.5));
        float _1228 = _1225 * (_1183.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_515, _516, _517), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3711 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1259 + 1.0))) + _1264) * _1229;
        float _1274 = _1197 * 0.5;
        float _1275 = _1207 * 0.5;
        float _1276 = _1217 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_515, _516, _517), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3744 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1301 + 1.0))) + _1306) * _1230;
        float _1316 = _1198 * 0.5;
        float _1317 = _1208 * 0.5;
        float _1318 = _1218 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_515, _516, _517), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3777 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1343 + 1.0))) + _1348) * _1231;
        _1365 = _1198;
        _1366 = _1197;
        _1367 = _1196;
        _1368 = _1208;
        _1369 = _1207;
        _1370 = _1206;
        _1371 = _1218;
        _1372 = _1217;
        _1373 = _1216;
        _1374 = _1231;
        _1375 = _1230;
        _1376 = _1229;
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1056;
        _1366 = _1056;
        _1367 = _1056;
        _1368 = _1056;
        _1369 = _1056;
        _1370 = _1056;
        _1371 = _1056;
        _1372 = _1056;
        _1373 = _1056;
        _1374 = _1056;
        _1375 = _1056;
        _1376 = _1056;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1412 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1389));
    float _1433 = _689 * 0.5;
    float _1434 = _690 * 0.5;
    float _1435 = _691 * 0.5;
    float _1436 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1439 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1442 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1476;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1449 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1055, _1059, _1062, _1065));
        float _1453 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1457 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1464 = dot(vec4(cbModelParam._m0[39u]), vec4(_1433, _1434, _1435, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1487;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1478 = dot(vec4(cbModelParam._m0[40u]), vec4(_1433, _1434, _1435, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1491 = (_1487 * cbModelParam._m0[1u].x) + (_1476 * (1.0 - cbModelParam._m0[1u].x));
    float _1501 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1501 : min(cbModelParam._m0[25u].z, _1501));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1549 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1553 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1557 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1560 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1563 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1566 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1594;
        if (_1560 > 0.0)
        {
            _1594 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1594 = frontier_phi_14_12_ladder;
        }
        float _1821;
        if (_1563 > 0.0)
        {
            _1821 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1821 = frontier_phi_23_19_ladder;
        }
        float _2078;
        if (_1566 > 0.0)
        {
            _2078 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2078 = frontier_phi_35_30_ladder;
        }
        float _2080 = isnan(_1821) ? _1594 : (isnan(_1594) ? _1821 : min(_1594, _1821));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1560) + _1549;
        float _2086 = (_2081 * _1563) + _1553;
        float _2087 = (_2081 * _1566) + _1557;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2090 = (-1.0) - _2088;
        float _2092 = _2088 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2087 > _2092) || ((_2087 < _2090) || ((_2086 > _2092) || ((_2086 < _2090) || ((_2085 < _2090) || (_2085 > _2092))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2215 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2087, cbModelParam._m0[9u].z, fma(_2086, cbModelParam._m0[9u].y, _2085 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2087, cbModelParam._m0[10u].z, fma(_2086, cbModelParam._m0[10u].y, _2085 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2087, cbModelParam._m0[11u].z, fma(_2086, cbModelParam._m0[11u].y, _2085 * cbModelParam._m0[11u].x))), _1502);
            frontier_phi_13_35_ladder = _2215.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2215.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2215.x * cbModelParam._m0[1u].y;
        }
        _1582 = frontier_phi_13_35_ladder_2;
        _1584 = frontier_phi_13_35_ladder_1;
        _1586 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1570 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1502);
        _1582 = _1570.x * cbModelParam._m0[1u].y;
        _1584 = _1570.y * cbModelParam._m0[1u].y;
        _1586 = _1570.z * cbModelParam._m0[1u].y;
    }
    float _1590 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1590 : min(cbModelParam._m0[25u].w, _1590));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1648 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1652 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1656 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1659 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1662 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1665 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1826;
        if (_1659 > 0.0)
        {
            _1826 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1826 = frontier_phi_25_21_ladder;
        }
        float _2105;
        if (_1662 > 0.0)
        {
            _2105 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2105 = frontier_phi_37_32_ladder;
        }
        float _2318;
        if (_1665 > 0.0)
        {
            _2318 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2318 = frontier_phi_46_43_ladder;
        }
        float _2320 = isnan(_2105) ? _1826 : (isnan(_1826) ? _2105 : min(_1826, _2105));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1659) + _1648;
        float _2326 = (_2321 * _1662) + _1652;
        float _2327 = (_2321 * _1665) + _1656;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2328;
        float _2331 = _2328 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2327 > _2331) || ((_2327 < _2329) || ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 < _2329) || (_2325 > _2331))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2327, cbModelParam._m0[17u].z, fma(_2326, cbModelParam._m0[17u].y, _2325 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2327, cbModelParam._m0[18u].z, fma(_2326, cbModelParam._m0[18u].y, _2325 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2327, cbModelParam._m0[19u].z, fma(_2326, cbModelParam._m0[19u].y, _2325 * cbModelParam._m0[19u].x))), _1591);
            frontier_phi_22_46_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1684 = frontier_phi_22_46_ladder_2;
        _1686 = frontier_phi_22_46_ladder_1;
        _1688 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1591);
        _1684 = _1668.x * cbModelParam._m0[1u].z;
        _1686 = _1668.y * cbModelParam._m0[1u].z;
        _1688 = _1668.z * cbModelParam._m0[1u].z;
    }
    float _1701 = (((_716 * _666) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1703 = (((_716 * _668) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1705 = (((_716 * _669) + _717) * _681) * ((cbModelParam._m0[1u].w * (_1688 - _1586)) + _1586);
    float _1708 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1701 * cbSceneParam._m0[91u].x));
    vec4 _1722 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_603, _604));
    float _1724 = _1722.w;
    float _1736 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1724);
    float _1737 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1724);
    float _1738 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1724);
    uvec4 _1742 = floatBitsToUint(cbInstanceData._m0[_641 + 5u]);
    uint _1744 = _1742.x * 14u;
    uint _1745 = _1744 + 13u;
    float _1752 = _681 + (-1.0);
    float _1757 = (cbLight._m0[_1745].x * _1752) + 1.0;
    float _1758 = (cbLight._m0[_1745].y * _1752) + 1.0;
    float _1759 = (cbLight._m0[_1745].z * _1752) + 1.0;
    float _1760 = (cbLight._m0[_1745].w * _1752) + 1.0;
    uint _1761 = _1744 + 5u;
    float _1767 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1771 = _1744 + 4u;
    float _1780 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1784 = _1744 | 1u;
    float _1795 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_515, _516, _517));
    float _1798 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_515, _516, _517));
    float _3913 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _3924 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1803 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1805 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1812 = ((cbLight._m0[_1761].x * _1767) * _1805) + (((cbLight._m0[_1771].x * _1736) * _1780) * _1803);
    float _1813 = ((_1767 * cbLight._m0[_1761].y) * _1805) + (((cbLight._m0[_1771].y * _1737) * _1780) * _1803);
    float _1814 = ((_1767 * cbLight._m0[_1761].z) * _1805) + (((cbLight._m0[_1771].z * _1738) * _1780) * _1803);
    uvec4 _1818 = floatBitsToUint(cbLight._m0[_1744 + 12u]);
    bool _1820 = _1818.x == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1820)
    {
        _1831 = _1812;
        _1833 = _1813;
        _1835 = _1814;
    }
    else
    {
        uint _1839 = _1744 + 6u;
        float _1855 = (dot(vec3(cbLight._m0[_1744 + 2u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _1856 = _1855 * _1855;
        float _3935 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1858 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _1831 = (((cbLight._m0[_1839].x * 0.3183098733425140380859375) * _1857) * _1858) + _1812;
        _1833 = (((cbLight._m0[_1839].y * 0.3183098733425140380859375) * _1857) * _1858) + _1813;
        _1835 = (((cbLight._m0[_1839].z * 0.3183098733425140380859375) * _1857) * _1858) + _1814;
    }
    bool _1838 = _1818.y == 0u;
    float _1876;
    float _1878;
    float _1880;
    if (_1838)
    {
        _1876 = _1831;
        _1878 = _1833;
        _1880 = _1835;
    }
    else
    {
        uint _2049 = _1744 + 7u;
        float _2065 = (dot(vec3(cbLight._m0[_1744 + 3u].xyz), vec3(_515, _516, _517)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _3951 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2068 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1876 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _1831;
        _1878 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _1833;
        _1880 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _1835;
    }
    uint _1883 = _1744 + 8u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1744].w)) * _518) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1744].x + _595;
    float _1899 = cbLight._m0[_1744].y + _596;
    float _1900 = cbLight._m0[_1744].z + _597;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1744].xyz));
    float _3967 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1912 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1913 = dot(vec3(_515, _516, _517), vec3(_1905, _1906, _1907));
    float _3989 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1905, _1906, _1907));
    float _4000 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1897 * _1897;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1933 = exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0);
    float _1934 = 0.959999978542327880859375 - _663;
    float _1936 = 0.959999978542327880859375 - _664;
    float _1937 = 0.959999978542327880859375 - _665;
    float _1944 = 1.0 - _1897;
    float _1955 = (0.5 / (((_1912 * ((_1911 * _1944) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _1944) + _1897) * _1911))) * _1911;
    float _4011 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    uint _1971 = _1744 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _518) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1784].x + _595;
    float _1985 = cbLight._m0[_1784].y + _596;
    float _1986 = cbLight._m0[_1784].z + _597;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1784].xyz));
    float _4022 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1998 = dot(vec3(_515, _516, _517), vec3(_1991, _1992, _1993));
    float _4033 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1991, _1992, _1993));
    float _4044 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2017 = exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0);
    float _2024 = 1.0 - _1983;
    float _2034 = (0.5 / (((_1912 * ((_1997 * _2024) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2024) + _1983) * _1997))) * _1997;
    float _4055 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2046 = (((((_2017 * _1934) + _666) * cbLight._m0[_1971].x) * _2036) * _1767) + ((((cbLight._m0[_1883].x * _1736) * ((_1933 * _1934) + _666)) * _1957) * _1780);
    float _2047 = (((((_2017 * _1936) + _668) * cbLight._m0[_1971].y) * _2036) * _1767) + ((((cbLight._m0[_1883].y * _1737) * ((_1933 * _1936) + _668)) * _1957) * _1780);
    float _2048 = (((((_2017 * _1937) + _669) * cbLight._m0[_1971].z) * _2036) * _1767) + ((((cbLight._m0[_1883].z * _1738) * ((_1933 * _1937) + _669)) * _1957) * _1780);
    float _2110;
    float _2112;
    float _2114;
    if (_1820)
    {
        _2110 = _2046;
        _2112 = _2047;
        _2114 = _2048;
    }
    else
    {
        uint _2116 = _1744 + 2u;
        uint _2120 = _1744 + 10u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _518) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _595;
        float _2137 = cbLight._m0[_2116].y + _596;
        float _2138 = cbLight._m0[_2116].z + _597;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2116].xyz));
        float _4066 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2150 = dot(vec3(_515, _516, _517), vec3(_2143, _2144, _2145));
        float _4077 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4088 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
        float _2176 = 1.0 - _2135;
        float _2186 = (0.5 / (((_1912 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2176) + _2135) * _2149))) * _2149;
        float _4099 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
        _2110 = (((((_2169 * _1934) + _666) * cbLight._m0[_2120].x) * _2188) * _2189) + _2046;
        _2112 = (((((_2169 * _1936) + _668) * cbLight._m0[_2120].y) * _2188) * _2189) + _2047;
        _2114 = (((((_2169 * _1937) + _669) * cbLight._m0[_2120].z) * _2188) * _2189) + _2048;
    }
    float _2224;
    float _2226;
    float _2228;
    if (_1838)
    {
        _2224 = _2110;
        _2226 = _2112;
        _2228 = _2114;
    }
    else
    {
        uint _2235 = _1744 + 3u;
        uint _2239 = _1744 + 11u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _518) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _595;
        float _2256 = cbLight._m0[_2235].y + _596;
        float _2257 = cbLight._m0[_2235].z + _597;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_2235].xyz));
        float _4115 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2269 = dot(vec3(_515, _516, _517), vec3(_2262, _2263, _2264));
        float _4126 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4137 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0);
        float _2295 = 1.0 - _2254;
        float _2305 = (0.5 / (((_1912 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2295) + _2254) * _2268))) * _2268;
        float _4148 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2224 = (((((_2288 * _1934) + _666) * cbLight._m0[_2239].x) * _2307) * _2308) + _2110;
        _2226 = (((((_2288 * _1936) + _668) * cbLight._m0[_2239].y) * _2307) * _2308) + _2112;
        _2228 = (((((_2288 * _1937) + _669) * cbLight._m0[_2239].z) * _2307) * _2308) + _2114;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1742.y == 0u)
    {
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2383;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2383;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2383;
        uvec4 _2398 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2399 = _2398.x;
        uint _2410 = uint((float(_2398.y) * floor(float(uint(cbSceneParam._m0[85u].y * _604) / _2399))) + floor(float(uint(cbSceneParam._m0[85u].x * _603) / _2399)));
        float _2420 = (log2(_2386 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2421 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        uint _2424 = uint(isnan(14.0) ? _2421 : (isnan(_2421) ? 14.0 : min(_2421, 14.0)));
        uvec4 _2429 = texelFetch(g_lightClusterGridBuffer, int(((_2424 << 2u) + (_2410 << 6u)) >> 2u));
        uint _2430 = _2429.x;
        uint _2431 = _2398.z;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((((1u << ((_2431 >> 4u) & 15u)) + 4294967295u) & _2430) == 0u) || ((_2431 & 240u) == 0u))
        {
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
        }
        else
        {
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            uint _2682 = 0u;
            uint _2691;
            bool _2692;
            for (;;)
            {
                _2691 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                _2692 = _2691 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2692)
                {
                    frontier_phi_61_pred = _2676;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2677;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2691;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2682 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2384;
                        float _2867 = _2826.y - _2385;
                        float _2868 = _2826.z - _2386;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_622, _625, _628), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4174 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2384;
                        float _2902 = (-0.0) - _2385;
                        float _2903 = (-0.0) - _2386;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _697;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_622, _625, _628), vec3(_2908, _2909, _2910));
                        float _4190 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2943 = dot(vec3(_622, _625, _628), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4201 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4212 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4223 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2735 = (_2897 * _2845.x) + _2803;
                        _2736 = (_2897 * _2845.y) + _2804;
                        _2737 = (_2897 * _2845.z) + _2805;
                        _2732 = (_2978 * _2862.x) + _2800;
                        _2733 = (_2978 * _2862.y) + _2801;
                        _2734 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_61_pred = _2732;
                    frontier_phi_61_pred_1 = _2737;
                    frontier_phi_61_pred_2 = _2736;
                    frontier_phi_61_pred_3 = _2735;
                    frontier_phi_61_pred_4 = _2734;
                    frontier_phi_61_pred_5 = _2733;
                }
                _2532 = frontier_phi_61_pred;
                _2542 = frontier_phi_61_pred_1;
                _2540 = frontier_phi_61_pred_2;
                _2538 = frontier_phi_61_pred_3;
                _2536 = frontier_phi_61_pred_4;
                _2534 = frontier_phi_61_pred_5;
                uint _2683 = _2682 + 1u;
                if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2676 = _2532;
                    _2677 = _2534;
                    _2678 = _2536;
                    _2679 = _2538;
                    _2680 = _2540;
                    _2681 = _2542;
                    _2682 = _2683;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
        }
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.z;
        uint _2548 = (_2546 >> 8u) & 15u;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((4294967295u << _2548) & _2430) == 0u)
        {
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
            _2654 = _2541;
        }
        else
        {
            float _2669 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
            float _2670 = _2669 * _2384;
            float _2671 = _2669 * _2385;
            float _2672 = _2669 * _2386;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2548 < ((_2546 >> 12u) & 15u))
            {
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2783 = _2531;
                float _2784 = _2533;
                float _2785 = _2535;
                float _2786 = _2537;
                float _2787 = _2539;
                float _2788 = _2541;
                uint _2789 = _2548;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2799)
                    {
                        frontier_phi_67_pred = _2786;
                        frontier_phi_67_pred_1 = _2787;
                        frontier_phi_67_pred_2 = _2788;
                        frontier_phi_67_pred_3 = _2785;
                        frontier_phi_67_pred_4 = _2784;
                        frontier_phi_67_pred_5 = _2783;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        uint _3002 = _2798;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3072;
                        vec4 _3088;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3013 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3059 = (_3013 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_3013 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3013 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3013 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2386, _3123.z, fma(_2385, _3123.y, _3123.x * _2384)) + _3123.w;
                            _3136 = !((fma(_2386, _3104.z, fma(_2385, _3104.y, _3104.x * _2384)) + _3104.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3028.x - _2384;
                                float _3164 = _3028.y - _2385;
                                float _3165 = _3028.z - _2386;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3029 * _3029));
                                float _4234 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3181 = sqrt(_3166) * _3044.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_622, _625, _628))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2386, _3072.z, fma(_2385, _3072.y, _3072.x * _2384)) + _3072.w) / _3135;
                                float _3195 = (fma(_2386, _3088.z, fma(_2385, _3088.y, _3088.x * _2384)) + _3088.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4250 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _697;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2670;
                                float _3225 = _3171 - _2671;
                                float _3226 = _3172 - _2672;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2670, (-0.0) - _2671, (-0.0) - _2672));
                                float _4261 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3238 = dot(vec3(_622, _625, _628), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4272 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_622, _625, _628), vec3(_3170, _3171, _3172))) + _3247;
                                float _4283 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4294 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3275 * _3056.x;
                                frontier_phi_73_pred_1 = _3275 * _3056.y;
                                frontier_phi_73_pred_2 = _3201 * _3044.z;
                                frontier_phi_73_pred_3 = _3201 * _3044.y;
                                frontier_phi_73_pred_4 = _3201 * _3044.x;
                                frontier_phi_73_pred_5 = _3275 * _3056.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_73_pred;
                            _3280 = frontier_phi_73_pred_1;
                            _3284 = frontier_phi_73_pred_2;
                            _3283 = frontier_phi_73_pred_3;
                            _3282 = frontier_phi_73_pred_4;
                            _3281 = frontier_phi_73_pred_5;
                            _2986 = _3282 + _2999;
                            _2987 = _3283 + _3000;
                            _2988 = _3284 + _3001;
                            _2983 = _3279 + _2996;
                            _2984 = _3280 + _2997;
                            _2985 = _3281 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2986;
                        frontier_phi_67_pred_1 = _2987;
                        frontier_phi_67_pred_2 = _2988;
                        frontier_phi_67_pred_3 = _2985;
                        frontier_phi_67_pred_4 = _2984;
                        frontier_phi_67_pred_5 = _2983;
                    }
                    _2651 = frontier_phi_67_pred;
                    _2653 = frontier_phi_67_pred_1;
                    _2655 = frontier_phi_67_pred_2;
                    _2649 = frontier_phi_67_pred_3;
                    _2647 = frontier_phi_67_pred_4;
                    _2645 = frontier_phi_67_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2645;
                        _2784 = _2647;
                        _2785 = _2649;
                        _2786 = _2651;
                        _2787 = _2653;
                        _2788 = _2655;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2653;
                frontier_phi_55_56_ladder_1 = _2655;
                frontier_phi_55_56_ladder_2 = _2651;
                frontier_phi_55_56_ladder_3 = _2649;
                frontier_phi_55_56_ladder_4 = _2647;
                frontier_phi_55_56_ladder_5 = _2645;
            }
            else
            {
                frontier_phi_55_56_ladder = _2539;
                frontier_phi_55_56_ladder_1 = _2541;
                frontier_phi_55_56_ladder_2 = _2537;
                frontier_phi_55_56_ladder_3 = _2535;
                frontier_phi_55_56_ladder_4 = _2533;
                frontier_phi_55_56_ladder_5 = _2531;
            }
            _2644 = frontier_phi_55_56_ladder_5;
            _2646 = frontier_phi_55_56_ladder_4;
            _2648 = frontier_phi_55_56_ladder_3;
            _2650 = frontier_phi_55_56_ladder_2;
            _2652 = frontier_phi_55_56_ladder;
            _2654 = frontier_phi_55_56_ladder_1;
        }
        float _2659 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2443 = (_2659 * _2650) + _1876;
        _2445 = (_2659 * _2652) + _1878;
        _2447 = (_2659 * _2654) + _1880;
        _2449 = ((_2644 * _666) * _2659) + _2224;
        _2451 = ((_2646 * _668) * _2659) + _2226;
        _2453 = ((_2648 * _669) * _2659) + _2228;
    }
    else
    {
        _2443 = _1876;
        _2445 = _1878;
        _2447 = _1880;
        _2449 = _2224;
        _2451 = _2226;
        _2453 = _2228;
    }
    float _4310 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4321 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4332 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    uint _2473 = _641 + 6u;
    float _2481 = _603 / cbSceneParam._m0[86u].x;
    float _2482 = _604 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _2556 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _2557 = _2556 / _538;
        float _2568 = _2557 * _588;
        float _2569 = _589 * _2557;
        float _2570 = (-0.0) - _2569;
        float _2572 = _2557 * _590;
        float _2574 = (cbSceneParam._m0[77u].w * _2570) / _2556;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2569;
        float _2582 = sqrt(((_2568 * _2568) + (_2569 * _2569)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2556)) * _2582;
        float _2590 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2592 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2570 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2575 > 0.0) ? exp2(_2590 * _2575) : (2.0 - exp2(_2592 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2705 = 1.0 / cbSceneParam._m0[80u].x;
            float _2706 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2707 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            _2745 = ((abs(_2582 / _2570) * cbSceneParam._m0[80u].y) * ((((_2716 - _2717) * 2.0) - ((exp2(_2590 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)))) - exp2(_2590 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))))) * _2705)) - ((exp2(_2592 * _2716) - exp2(_2592 * _2717)) * _2705))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2501);
        _2594 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2596 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2598 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2600 = _2756 * _2501;
    }
    else
    {
        _2594 = _2498;
        _2596 = _2499;
        _2598 = _2500;
        _2600 = _2501;
    }
    float _2612 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2613 = _2612 == 3.0;
    float _2614 = log2(_2600);
    float _2621 = exp2(_2614 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2443 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _681))) + ((_2449 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2622 = exp2(_2614 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2445 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _681))) + ((_2451 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2623 = exp2(_2614 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2447 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _681))) + ((_2453 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2632 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2632 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.y = _2632 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.z = _2632 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.w = cbInstanceData._m0[_2473].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
}


