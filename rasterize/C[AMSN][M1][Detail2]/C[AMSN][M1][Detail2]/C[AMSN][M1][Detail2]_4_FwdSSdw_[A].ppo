#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1100;
float _3511;
float _3512;
float _3513;
float _3514;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _313 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3523 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _321 = (_314 * ((_282.x * cbMtdParam._m0[10u].x) - _257)) + _257;
    float _322 = (_314 * ((_282.y * cbMtdParam._m0[10u].y) - _258)) + _258;
    float _323 = (_314 * ((_282.z * cbMtdParam._m0[10u].z) - _259)) + _259;
    vec4 _347 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _376 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3534 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _384 = (_377 * ((_347.x * cbMtdParam._m0[11u].x) - _321)) + _321;
    float _385 = (_377 * ((_347.y * cbMtdParam._m0[11u].y) - _322)) + _322;
    float _386 = (_377 * ((_347.z * cbMtdParam._m0[11u].z) - _323)) + _323;
    vec4 _398 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _400 = _398.x;
    float _402 = _400 - (_400 * TEXCOORD_5.x);
    vec4 _419 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _427 = (_419.x * 2.0) + (-1.0);
    float _429 = (_419.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3545 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))));
    float _436 = _419.z * cbMtdParam._m0[13u].y;
    vec4 _449 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _463 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_449.z * cbMtdParam._m0[13u].x) - _436)) + _436;
    vec4 _477 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _491 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_477.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    float _504 = (((((_449.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _427) + ((((_477.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _505 = (((((_449.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _429) + ((((_477.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _508 = fma(_435, _221 * NORMAL.x, fma(_505, _228 * TANGENT.x, (_214 * _206) * _504));
    float _511 = fma(_435, _221 * NORMAL.y, fma(_505, _228 * TANGENT.y, (_214 * _207) * _504));
    float _514 = fma(_435, _221 * NORMAL.z, fma(_505, _228 * TANGENT.z, (_214 * _208) * _504));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3556 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _522 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3578 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3589 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3600 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _526 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _592 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _582);
    float _593 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _582);
    float _594 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _582);
    float _598 = inversesqrt(dot(vec3(_592, _593, _594), vec3(_592, _593, _594)));
    float _599 = _592 * _598;
    float _600 = _593 * _598;
    float _601 = _594 * _598;
    vec4 _606 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _608 = _606.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _780 = sqrt(((_592 * _592) + (_593 * _593)) + (_594 * _594));
        float _786 = (cbMatDynParam._m0[5u].x * _780) + cbMatDynParam._m0[5u].y;
        float _3611 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _791 = (cbMatDynParam._m0[5u].z * _780) + cbMatDynParam._m0[5u].w;
        float _3622 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) - _787)) + _787) < ((_608 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _641 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _644 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _657 = uint(roundEven(NORMAL.w)) * 13u;
    uint _658 = _657 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3633 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _671 = 1.0 - _526;
    float _672 = _668 * _671;
    float _673 = _669 * _671;
    float _674 = _670 * _671;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _526;
    float _680 = (_669 + (-0.039999999105930328369140625)) * _526;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _526;
    float _682 = _679 + 0.039999999105930328369140625;
    float _684 = _680 + 0.039999999105930328369140625;
    float _685 = _681 + 0.039999999105930328369140625;
    vec4 _694 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _697 = _694.x * TEXCOORD_5.w;
    float _698 = dot(vec3(_519, _520, _521), vec3(_599, _600, _601));
    float _701 = _698 * 2.0;
    float _705 = (_701 * _519) - _599;
    float _706 = (_701 * _520) - _600;
    float _707 = (_701 * _521) - _601;
    float _711 = abs(dot(vec3(_599, _600, _601), vec3(_519, _520, _521)));
    float _3666 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _713 = sqrt(_522);
    float _726 = exp2((_713 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_713 * 3.0));
    float _732 = (1.0 - _726) * ((_713 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _733 = _726 * _713;
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_769, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761));
        float _828 = fma(_769, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761));
        float _832 = fma(_769, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761));
        float _857 = _761 + _519;
        float _858 = _765 + _520;
        float _859 = _769 + _521;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_519, _520, _521), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3714 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_519, _520, _521), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3747 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_519, _520, _521), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3780 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1143 = fma(_769, cbModelParam._m0[30u].z, fma(_765, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _761));
        float _1147 = fma(_769, cbModelParam._m0[31u].z, fma(_765, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _761));
        float _1151 = fma(_769, cbModelParam._m0[32u].z, fma(_765, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _761));
        float _1174 = _761 + _519;
        float _1175 = _765 + _520;
        float _1176 = _769 + _521;
        float _1186 = fma(_1176, cbModelParam._m0[30u].z, fma(_1175, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174)) - _1143;
        float _1187 = fma(_1176, cbModelParam._m0[31u].z, fma(_1175, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174)) - _1147;
        float _1188 = fma(_1176, cbModelParam._m0[32u].z, fma(_1175, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174)) - _1151;
        float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
        float _1205 = ((_1192 * _1186) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1143 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1192 * _1187) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1147 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1192 * _1188) / cbModelParam._m0[35u].z) + ((((((_1151 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1205, _1206, _1207), 0.0);
        float _1242 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1209.x + (-0.5));
        float _1244 = _1242 * (_1209.y + (-0.5));
        float _1245 = _1242 * (_1209.z + (-0.5));
        float _1252 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1216.x + (-0.5));
        float _1254 = _1252 * (_1216.y + (-0.5));
        float _1255 = _1252 * (_1216.z + (-0.5));
        float _1262 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1223.x + (-0.5));
        float _1264 = _1262 * (_1223.y + (-0.5));
        float _1265 = _1262 * (_1223.z + (-0.5));
        float _1272 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1230.x + (-0.5));
        float _1274 = _1272 * (_1230.y + (-0.5));
        float _1275 = _1272 * (_1230.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_519, _520, _521), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3843 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1306 + 1.0))) + _1311) * _1276;
        float _1321 = _1244 * 0.5;
        float _1322 = _1254 * 0.5;
        float _1323 = _1264 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_519, _520, _521), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3876 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1348 + 1.0))) + _1353) * _1277;
        float _1363 = _1245 * 0.5;
        float _1364 = _1255 * 0.5;
        float _1365 = _1265 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_519, _520, _521), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3909 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1390 + 1.0))) + _1395) * _1278;
        _1412 = _1245;
        _1413 = _1244;
        _1414 = _1243;
        _1415 = _1255;
        _1416 = _1254;
        _1417 = _1253;
        _1418 = _1265;
        _1419 = _1264;
        _1420 = _1263;
        _1421 = _1278;
        _1422 = _1277;
        _1423 = _1276;
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
    }
    else
    {
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = _1100;
        _1420 = _1100;
        _1421 = _1100;
        _1422 = _1100;
        _1423 = _1100;
        _1424 = 0.0;
        _1425 = 0.0;
        _1426 = 0.0;
    }
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1113)) + _1113;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1459 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1462 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1465 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1436));
    float _1480 = _705 * 0.5;
    float _1481 = _706 * 0.5;
    float _1482 = _707 * 0.5;
    float _1483 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1486 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1489 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1523;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1496 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1500 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1504 = dot(vec4(_1480, _1481, _1482, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1511 = dot(vec4(cbModelParam._m0[39u]), vec4(_1480, _1481, _1482, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1534;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1525 = dot(vec4(cbModelParam._m0[40u]), vec4(_1480, _1481, _1482, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1538 = (_1534 * cbModelParam._m0[1u].x) + (_1523 * (1.0 - cbModelParam._m0[1u].x));
    float _1548 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1548 : min(cbModelParam._m0[25u].z, _1548));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1596 = fma(_769, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761)) + cbModelParam._m0[13u].w;
        float _1600 = fma(_769, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761)) + cbModelParam._m0[14u].w;
        float _1604 = fma(_769, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761)) + cbModelParam._m0[15u].w;
        float _1607 = fma(_707, cbModelParam._m0[13u].z, fma(_706, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705));
        float _1610 = fma(_707, cbModelParam._m0[14u].z, fma(_706, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705));
        float _1613 = fma(_707, cbModelParam._m0[15u].z, fma(_706, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705));
        float _1641;
        if (_1607 > 0.0)
        {
            _1641 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1641 = frontier_phi_17_15_ladder;
        }
        float _1868;
        if (_1610 > 0.0)
        {
            _1868 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1868 = frontier_phi_26_22_ladder;
        }
        float _2125;
        if (_1613 > 0.0)
        {
            _2125 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2125 = frontier_phi_38_33_ladder;
        }
        float _2127 = isnan(_1868) ? _1641 : (isnan(_1641) ? _1868 : min(_1641, _1868));
        float _2128 = isnan(_2125) ? _2127 : (isnan(_2127) ? _2125 : min(_2127, _2125));
        float _2132 = (_2128 * _1607) + _1596;
        float _2133 = (_2128 * _1610) + _1600;
        float _2134 = (_2128 * _1613) + _1604;
        float _2135 = _2128 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2135;
        float _2139 = _2135 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 > _2139) || ((_2133 < _2137) || ((_2132 < _2137) || (_2132 > _2139))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2134, cbModelParam._m0[9u].z, fma(_2133, cbModelParam._m0[9u].y, _2132 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2134, cbModelParam._m0[10u].z, fma(_2133, cbModelParam._m0[10u].y, _2132 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2134, cbModelParam._m0[11u].z, fma(_2133, cbModelParam._m0[11u].y, _2132 * cbModelParam._m0[11u].x))), _1549);
            frontier_phi_16_38_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1629 = frontier_phi_16_38_ladder_2;
        _1631 = frontier_phi_16_38_ladder_1;
        _1633 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_705, _706, _707), _1549);
        _1629 = _1617.x * cbModelParam._m0[1u].y;
        _1631 = _1617.y * cbModelParam._m0[1u].y;
        _1633 = _1617.z * cbModelParam._m0[1u].y;
    }
    float _1637 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1637 : min(cbModelParam._m0[25u].w, _1637));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1695 = fma(_769, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761)) + cbModelParam._m0[21u].w;
        float _1699 = fma(_769, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761)) + cbModelParam._m0[22u].w;
        float _1703 = fma(_769, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761)) + cbModelParam._m0[23u].w;
        float _1706 = fma(_707, cbModelParam._m0[21u].z, fma(_706, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705));
        float _1709 = fma(_707, cbModelParam._m0[22u].z, fma(_706, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705));
        float _1712 = fma(_707, cbModelParam._m0[23u].z, fma(_706, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705));
        float _1873;
        if (_1706 > 0.0)
        {
            _1873 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1873 = frontier_phi_28_24_ladder;
        }
        float _2152;
        if (_1709 > 0.0)
        {
            _2152 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2152 = frontier_phi_40_35_ladder;
        }
        float _2365;
        if (_1712 > 0.0)
        {
            _2365 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2365 = frontier_phi_49_46_ladder;
        }
        float _2367 = isnan(_2152) ? _1873 : (isnan(_1873) ? _2152 : min(_1873, _2152));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1706) + _1695;
        float _2373 = (_2368 * _1709) + _1699;
        float _2374 = (_2368 * _1712) + _1703;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2573 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2374, cbModelParam._m0[17u].z, fma(_2373, cbModelParam._m0[17u].y, _2372 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2374, cbModelParam._m0[18u].z, fma(_2373, cbModelParam._m0[18u].y, _2372 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2374, cbModelParam._m0[19u].z, fma(_2373, cbModelParam._m0[19u].y, _2372 * cbModelParam._m0[19u].x))), _1638);
            frontier_phi_25_49_ladder = _2573.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2573.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2573.x * cbModelParam._m0[1u].z;
        }
        _1731 = frontier_phi_25_49_ladder_2;
        _1733 = frontier_phi_25_49_ladder_1;
        _1735 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_705, _706, _707), _1638);
        _1731 = _1715.x * cbModelParam._m0[1u].z;
        _1733 = _1715.y * cbModelParam._m0[1u].z;
        _1735 = _1715.z * cbModelParam._m0[1u].z;
    }
    float _1748 = (((_732 * _682) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1731 - _1629)) + _1629);
    float _1750 = (((_732 * _684) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1733 - _1631)) + _1631);
    float _1752 = (((_732 * _685) + _733) * _697) * ((cbModelParam._m0[1u].w * (_1735 - _1633)) + _1633);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1748 * cbSceneParam._m0[91u].x));
    vec4 _1769 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_619, _620));
    float _1771 = _1769.w;
    float _1783 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1771);
    float _1784 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1771);
    float _1785 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1771);
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_657 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _697 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1808 = _1791 + 5u;
    float _1814 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1818 = _1791 + 4u;
    float _1827 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1831 = _1791 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_519, _520, _521));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_519, _520, _521));
    float _4045 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _4056 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1808].x * _1814) * _1852) + (((cbLight._m0[_1818].x * _1783) * _1827) * _1850);
    float _1860 = ((_1814 * cbLight._m0[_1808].y) * _1852) + (((cbLight._m0[_1818].y * _1784) * _1827) * _1850);
    float _1861 = ((_1814 * cbLight._m0[_1808].z) * _1852) + (((cbLight._m0[_1818].z * _1785) * _1827) * _1850);
    uvec4 _1865 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _1867 = _1865.x == 0u;
    float _1878;
    float _1880;
    float _1882;
    if (_1867)
    {
        _1878 = _1859;
        _1880 = _1860;
        _1882 = _1861;
    }
    else
    {
        uint _1886 = _1791 + 6u;
        float _1902 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _1903 = _1902 * _1902;
        float _4067 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1905 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1878 = (((cbLight._m0[_1886].x * 0.3183098733425140380859375) * _1904) * _1905) + _1859;
        _1880 = (((cbLight._m0[_1886].y * 0.3183098733425140380859375) * _1904) * _1905) + _1860;
        _1882 = (((cbLight._m0[_1886].z * 0.3183098733425140380859375) * _1904) * _1905) + _1861;
    }
    bool _1885 = _1865.y == 0u;
    float _1923;
    float _1925;
    float _1927;
    if (_1885)
    {
        _1923 = _1878;
        _1925 = _1880;
        _1927 = _1882;
    }
    else
    {
        uint _2096 = _1791 + 7u;
        float _2112 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4083 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2115 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1923 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _1878;
        _1925 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _1880;
        _1927 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _1882;
    }
    uint _1930 = _1791 + 8u;
    float _1943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _522) * 0.949999988079071044921875);
    float _1944 = _1943 * _1943;
    float _1945 = cbLight._m0[_1791].x + _599;
    float _1946 = cbLight._m0[_1791].y + _600;
    float _1947 = cbLight._m0[_1791].z + _601;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1952 = _1951 * _1945;
    float _1953 = _1951 * _1946;
    float _1954 = _1951 * _1947;
    float _1955 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1791].xyz));
    float _4099 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _1959 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1960 = dot(vec3(_519, _520, _521), vec3(_1952, _1953, _1954));
    float _4121 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1964 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1952, _1953, _1954));
    float _4132 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1968 = _1944 * _1944;
    float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
    float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _1981 = 0.959999978542327880859375 - _679;
    float _1983 = 0.959999978542327880859375 - _680;
    float _1984 = 0.959999978542327880859375 - _681;
    float _1991 = 1.0 - _1944;
    float _2002 = (0.5 / (((_1959 * ((_1958 * _1991) + _1944)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _1991) + _1944) * _1958))) * _1958;
    float _4143 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
    uint _2018 = _1791 + 9u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _522) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1831].x + _599;
    float _2032 = cbLight._m0[_1831].y + _600;
    float _2033 = cbLight._m0[_1831].z + _601;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1831].xyz));
    float _4154 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2045 = dot(vec3(_519, _520, _521), vec3(_2038, _2039, _2040));
    float _4165 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2038, _2039, _2040));
    float _4176 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2030 * _2030;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2064 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
    float _2071 = 1.0 - _2030;
    float _2081 = (0.5 / (((_1959 * ((_2044 * _2071) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2071) + _2030) * _2044))) * _2044;
    float _4187 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    float _2093 = (((((_2064 * _1981) + _682) * cbLight._m0[_2018].x) * _2083) * _1814) + ((((cbLight._m0[_1930].x * _1783) * ((_1980 * _1981) + _682)) * _2004) * _1827);
    float _2094 = (((((_2064 * _1983) + _684) * cbLight._m0[_2018].y) * _2083) * _1814) + ((((cbLight._m0[_1930].y * _1784) * ((_1980 * _1983) + _684)) * _2004) * _1827);
    float _2095 = (((((_2064 * _1984) + _685) * cbLight._m0[_2018].z) * _2083) * _1814) + ((((cbLight._m0[_1930].z * _1785) * ((_1980 * _1984) + _685)) * _2004) * _1827);
    float _2157;
    float _2159;
    float _2161;
    if (_1867)
    {
        _2157 = _2093;
        _2159 = _2094;
        _2161 = _2095;
    }
    else
    {
        uint _2163 = _1791 + 2u;
        uint _2167 = _1791 + 10u;
        float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _522) * 0.949999988079071044921875);
        float _2182 = _2181 * _2181;
        float _2183 = cbLight._m0[_2163].x + _599;
        float _2184 = cbLight._m0[_2163].y + _600;
        float _2185 = cbLight._m0[_2163].z + _601;
        float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
        float _2190 = _2189 * _2183;
        float _2191 = _2189 * _2184;
        float _2192 = _2189 * _2185;
        float _2193 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2163].xyz));
        float _4198 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2197 = dot(vec3(_519, _520, _521), vec3(_2190, _2191, _2192));
        float _4209 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2201 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2190, _2191, _2192));
        float _4220 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2205 = _2182 * _2182;
        float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
        float _2216 = exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0);
        float _2223 = 1.0 - _2182;
        float _2233 = (0.5 / (((_1959 * ((_2196 * _2223) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2223) + _2182) * _2196))) * _2196;
        float _4231 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2235 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
        float _2236 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2157 = (((((_2216 * _1981) + _682) * cbLight._m0[_2167].x) * _2235) * _2236) + _2093;
        _2159 = (((((_2216 * _1983) + _684) * cbLight._m0[_2167].y) * _2235) * _2236) + _2094;
        _2161 = (((((_2216 * _1984) + _685) * cbLight._m0[_2167].z) * _2235) * _2236) + _2095;
    }
    float _2271;
    float _2273;
    float _2275;
    if (_1885)
    {
        _2271 = _2157;
        _2273 = _2159;
        _2275 = _2161;
    }
    else
    {
        uint _2282 = _1791 + 3u;
        uint _2286 = _1791 + 11u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _522) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _599;
        float _2303 = cbLight._m0[_2282].y + _600;
        float _2304 = cbLight._m0[_2282].z + _601;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2282].xyz));
        float _4247 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2316 = dot(vec3(_519, _520, _521), vec3(_2309, _2310, _2311));
        float _4258 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4269 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
        float _2342 = 1.0 - _2301;
        float _2352 = (0.5 / (((_1959 * ((_2315 * _2342) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_1959 * _2342) + _2301) * _2315))) * _2315;
        float _4280 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2354 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2355 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2271 = (((((_2335 * _1981) + _682) * cbLight._m0[_2286].x) * _2354) * _2355) + _2157;
        _2273 = (((((_2335 * _1983) + _684) * cbLight._m0[_2286].y) * _2354) * _2355) + _2159;
        _2275 = (((((_2335 * _1984) + _685) * cbLight._m0[_2286].z) * _2354) * _2355) + _2161;
    }
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_1789.y == 0u)
    {
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2430;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2430;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2430;
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.x;
        uint _2457 = uint((float(_2445.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2446))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2446)));
        float _2467 = (log2(_2433 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2468 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        uint _2471 = uint(isnan(14.0) ? _2468 : (isnan(_2468) ? 14.0 : min(_2468, 14.0)));
        uvec4 _2476 = texelFetch(g_lightClusterGridBuffer, int(((_2471 << 2u) + (_2457 << 6u)) >> 2u));
        uint _2477 = _2476.x;
        uint _2478 = _2445.z;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((((1u << ((_2478 >> 4u) & 15u)) + 4294967295u) & _2477) == 0u) || ((_2478 & 240u) == 0u))
        {
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
        }
        else
        {
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2471 << 5u) + (_2457 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2747)
                {
                    frontier_phi_66_pred = _2731;
                    frontier_phi_66_pred_1 = _2736;
                    frontier_phi_66_pred_2 = _2735;
                    frontier_phi_66_pred_3 = _2734;
                    frontier_phi_66_pred_4 = _2733;
                    frontier_phi_66_pred_5 = _2732;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2746;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2737 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _2431;
                        float _2943 = _2902.y - _2432;
                        float _2944 = _2902.z - _2433;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_638, _641, _644), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4306 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _2431;
                        float _2978 = (-0.0) - _2432;
                        float _2979 = (-0.0) - _2433;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2994 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2995 = 1.0 - _713;
                        float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                        float _3003 = _3002 * _3002;
                        float _3004 = _3003 * _3003;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3015 = dot(vec3(_638, _641, _644), vec3(_2984, _2985, _2986));
                        float _4322 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3019 = dot(vec3(_638, _641, _644), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                        float _4333 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                        float _3027 = _2962 * _3003;
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _2952) + _3028;
                        float _4344 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3033 = 1.0 - _3003;
                        float _3043 = (0.5 / (((_3032 * ((_3018 * _3033) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3003) * _3018))) * _3032;
                        float _4355 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3054 = (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3026 * _3026) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2806 = (_2973 * _2921.x) + _2879;
                        _2807 = (_2973 * _2921.y) + _2880;
                        _2808 = (_2973 * _2921.z) + _2881;
                        _2803 = (_3054 * _2938.x) + _2876;
                        _2804 = (_3054 * _2938.y) + _2877;
                        _2805 = (_3054 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_66_pred = _2803;
                    frontier_phi_66_pred_1 = _2808;
                    frontier_phi_66_pred_2 = _2807;
                    frontier_phi_66_pred_3 = _2806;
                    frontier_phi_66_pred_4 = _2805;
                    frontier_phi_66_pred_5 = _2804;
                }
                _2579 = frontier_phi_66_pred;
                _2589 = frontier_phi_66_pred_1;
                _2587 = frontier_phi_66_pred_2;
                _2585 = frontier_phi_66_pred_3;
                _2583 = frontier_phi_66_pred_4;
                _2581 = frontier_phi_66_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2579;
                    _2732 = _2581;
                    _2733 = _2583;
                    _2734 = _2585;
                    _2735 = _2587;
                    _2736 = _2589;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
        }
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.z;
        uint _2595 = (_2593 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2595) & _2477) == 0u)
        {
            _2699 = _2578;
            _2701 = _2580;
            _2703 = _2582;
            _2705 = _2584;
            _2707 = _2586;
            _2709 = _2588;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
            float _2725 = _2724 * _2431;
            float _2726 = _2724 * _2432;
            float _2727 = _2724 * _2433;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2595 < ((_2593 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2859 = _2578;
                float _2860 = _2580;
                float _2861 = _2582;
                float _2862 = _2584;
                float _2863 = _2586;
                float _2864 = _2588;
                uint _2865 = _2595;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2471 << 5u) + (_2457 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2875)
                    {
                        frontier_phi_77_pred = _2864;
                        frontier_phi_77_pred_1 = _2863;
                        frontier_phi_77_pred_2 = _2862;
                        frontier_phi_77_pred_3 = _2861;
                        frontier_phi_77_pred_4 = _2860;
                        frontier_phi_77_pred_5 = _2859;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        uint _3087 = _2874;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3157;
                        vec4 _3173;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3098 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3144 = (_3098 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3160 = (_3098 * 40u) + 20u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3176 = (_3098 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3098 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2433, _3208.z, fma(_2432, _3208.y, _3208.x * _2431)) + _3208.w;
                            _3221 = !((fma(_2433, _3189.z, fma(_2432, _3189.y, _3189.x * _2431)) + _3189.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3113.x - _2431;
                                float _3249 = _3113.y - _2432;
                                float _3250 = _3113.z - _2433;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3114 * _3114));
                                float _4366 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3266 = sqrt(_3251) * _3129.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_638, _641, _644))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2433, _3157.z, fma(_2432, _3157.y, _3157.x * _2431)) + _3157.w) / _3220;
                                float _3280 = (fma(_2433, _3173.z, fma(_2432, _3173.y, _3173.x * _2431)) + _3173.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4382 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _713;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2725;
                                float _3310 = _3256 - _2726;
                                float _3311 = _3257 - _2727;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_638, _641, _644), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4393 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3323 = dot(vec3(_638, _641, _644), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4404 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_638, _641, _644), vec3(_3255, _3256, _3257))) + _3332;
                                float _4415 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4426 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3286 * _3129.y;
                                frontier_phi_83_pred_1 = _3286 * _3129.x;
                                frontier_phi_83_pred_2 = _3360 * _3141.z;
                                frontier_phi_83_pred_3 = _3360 * _3141.y;
                                frontier_phi_83_pred_4 = _3360 * _3141.x;
                                frontier_phi_83_pred_5 = _3286 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3368 = frontier_phi_83_pred;
                            _3367 = frontier_phi_83_pred_1;
                            _3366 = frontier_phi_83_pred_2;
                            _3365 = frontier_phi_83_pred_3;
                            _3364 = frontier_phi_83_pred_4;
                            _3369 = frontier_phi_83_pred_5;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            _3070 = _3366 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3073;
                        frontier_phi_77_pred_1 = _3072;
                        frontier_phi_77_pred_2 = _3071;
                        frontier_phi_77_pred_3 = _3070;
                        frontier_phi_77_pred_4 = _3069;
                        frontier_phi_77_pred_5 = _3068;
                    }
                    _2710 = frontier_phi_77_pred;
                    _2708 = frontier_phi_77_pred_1;
                    _2706 = frontier_phi_77_pred_2;
                    _2704 = frontier_phi_77_pred_3;
                    _2702 = frontier_phi_77_pred_4;
                    _2700 = frontier_phi_77_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2700;
                        _2860 = _2702;
                        _2861 = _2704;
                        _2862 = _2706;
                        _2863 = _2708;
                        _2864 = _2710;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2704;
                frontier_phi_58_59_ladder_1 = _2710;
                frontier_phi_58_59_ladder_2 = _2708;
                frontier_phi_58_59_ladder_3 = _2706;
                frontier_phi_58_59_ladder_4 = _2702;
                frontier_phi_58_59_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_58_59_ladder = _2582;
                frontier_phi_58_59_ladder_1 = _2588;
                frontier_phi_58_59_ladder_2 = _2586;
                frontier_phi_58_59_ladder_3 = _2584;
                frontier_phi_58_59_ladder_4 = _2580;
                frontier_phi_58_59_ladder_5 = _2578;
            }
            _2699 = frontier_phi_58_59_ladder_5;
            _2701 = frontier_phi_58_59_ladder_4;
            _2703 = frontier_phi_58_59_ladder;
            _2705 = frontier_phi_58_59_ladder_3;
            _2707 = frontier_phi_58_59_ladder_2;
            _2709 = frontier_phi_58_59_ladder_1;
        }
        float _2714 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
        _2490 = (_2714 * _2705) + _1923;
        _2492 = (_2714 * _2707) + _1925;
        _2494 = (_2714 * _2709) + _1927;
        _2496 = ((_2699 * _682) * _2714) + _2271;
        _2498 = ((_2701 * _684) * _2714) + _2273;
        _2500 = ((_2703 * _685) * _2714) + _2275;
    }
    else
    {
        _2490 = _1923;
        _2492 = _1925;
        _2494 = _1927;
        _2496 = _2271;
        _2498 = _2273;
        _2500 = _2275;
    }
    float _4442 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4453 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4464 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _2517 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2490 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _697))) + ((_2496 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    float _2518 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2492 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _697))) + ((_2498 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    float _2519 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2494 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _697))) + ((_2500 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1538)) * cbPerFrame._m0[3u].x);
    uint _2520 = _657 + 6u;
    float _2528 = _619 / cbSceneParam._m0[86u].x;
    float _2529 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2543 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2528, _2529, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2545 = _2543.x;
    float _2546 = _2543.y;
    float _2547 = _2543.z;
    float _2548 = _2543.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2603 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2604 = _2603 / _542;
        float _2615 = _2604 * _592;
        float _2616 = _593 * _2604;
        float _2617 = (-0.0) - _2616;
        float _2619 = _2604 * _594;
        float _2621 = (cbSceneParam._m0[77u].w * _2617) / _2603;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2616;
        float _2629 = sqrt(((_2615 * _2615) + (_2616 * _2616)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2603)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2816;
        if (abs((_2617 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2816 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2762 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2816 = ((abs(_2629 / _2617) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2639 * _2771) - exp2(_2639 * _2772)) * _2760))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2818 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2528, _2529, 1.0), 0.0);
        float _2827 = exp2((_2816 * (-1.44269502162933349609375)) * (1.0 - _2818.w));
        float _2828 = log2(_2827);
        float _2844 = log2(_2548);
        _2641 = (exp2(_2844 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].x)) * _2818.x) / cbSceneParam._m0[78u].x)) + _2545;
        _2643 = (exp2(_2844 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].y)) * _2818.y) / cbSceneParam._m0[78u].y)) + _2546;
        _2645 = (exp2(_2844 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].z)) * _2818.z) / cbSceneParam._m0[78u].z)) + _2547;
        _2647 = _2827 * _2548;
    }
    else
    {
        _2641 = _2545;
        _2643 = _2546;
        _2645 = _2547;
        _2647 = _2548;
    }
    bool _2854;
    vec4 _2657;
    vec4 _2679;
    float _2681;
    float _2685;
    float _2686;
    float _2687;
    float _2688;
    bool _2698;
    for (;;)
    {
        _2657 = cbMatDynParam._m0[0u];
        float _2659 = roundEven(_2657.y);
        bool _2660 = _2659 == 3.0;
        float _2661 = log2(_2647);
        float _2668 = exp2(_2661 * cbSceneParam._m0[78u].x) * _2517;
        float _2669 = exp2(_2661 * cbSceneParam._m0[78u].y) * _2518;
        float _2670 = exp2(_2661 * cbSceneParam._m0[78u].z) * _2519;
        float _2677 = _608 + (-0.5);
        _2679 = cbMtdParam._m0[1u];
        _2681 = _2679.y * _2677;
        float _2684 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2685 = _2684 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
        _2686 = _2684 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
        _2687 = _2684 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
        _2688 = _2677 * 0.999000012874603271484375;
        _2698 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2698)
        {
            if ((cbInstanceData._m0[_657 + 7u].x + _2688) < 0.5)
            {
                _2854 = true;
                break;
            }
        }
        uint _2795 = _658 + uint(_2657.w);
        if ((cbInstanceData._m0[_2795].w < 1.0) && ((cbInstanceData._m0[_2795].w + _2688) < 0.5))
        {
            _2854 = true;
            break;
        }
        if ((_2681 + 1.0) < _2679.x)
        {
            _2854 = true;
            break;
        }
        _2854 = false;
        break;
    }
    float _3059;
    if (_2854)
    {
        discard_state = true;
        _3059 = 0.0;
    }
    else
    {
        _3059 = cbInstanceData._m0[_2520].w;
    }
    SV_Target.x = _2685;
    SV_Target.y = _2686;
    SV_Target.z = _2687;
    SV_Target.w = _3059;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2520].w;
    discard_exit();
}


