#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1065;
float _3714;
float _3715;
float _3716;
float _3717;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _313 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3726 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _321 = (_314 * ((_282.x * cbMtdParam._m0[10u].x) - _257)) + _257;
    float _322 = (_314 * ((_282.y * cbMtdParam._m0[10u].y) - _258)) + _258;
    float _323 = (_314 * ((_282.z * cbMtdParam._m0[10u].z) - _259)) + _259;
    vec4 _347 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _376 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3737 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _384 = (_377 * ((_347.x * cbMtdParam._m0[11u].x) - _321)) + _321;
    float _385 = (_377 * ((_347.y * cbMtdParam._m0[11u].y) - _322)) + _322;
    float _386 = (_377 * ((_347.z * cbMtdParam._m0[11u].z) - _323)) + _323;
    vec4 _403 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _411 = (_403.x * 2.0) + (-1.0);
    float _413 = (_403.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_411, _413), vec2(_411, _413));
    float _3748 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))));
    float _420 = _403.z * cbMtdParam._m0[13u].y;
    vec4 _433 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _447 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_433.z * cbMtdParam._m0[13u].x) - _420)) + _420;
    vec4 _461 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _475 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_461.z * cbMtdParam._m0[13u].z) - _447)) + _447;
    float _488 = (((((_433.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _411) + ((((_461.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _489 = (((((_433.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _413) + ((((_461.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _492 = fma(_419, _221 * NORMAL.x, fma(_489, _228 * TANGENT.x, (_214 * _206) * _488));
    float _495 = fma(_419, _221 * NORMAL.y, fma(_489, _228 * TANGENT.y, (_214 * _207) * _488));
    float _498 = fma(_419, _221 * NORMAL.z, fma(_489, _228 * TANGENT.z, (_214 * _208) * _488));
    float _502 = inversesqrt(dot(vec3(_492, _495, _498), vec3(_492, _495, _498)));
    float _503 = _502 * _492;
    float _504 = _502 * _495;
    float _505 = _502 * _498;
    float _3759 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _506 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3781 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3792 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _575 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _565);
    float _576 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _565);
    float _577 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _565);
    float _581 = inversesqrt(dot(vec3(_575, _576, _577), vec3(_575, _576, _577)));
    float _582 = _575 * _581;
    float _583 = _576 * _581;
    float _584 = _577 * _581;
    vec4 _589 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _591 = _589.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _745 = sqrt(((_575 * _575) + (_576 * _576)) + (_577 * _577));
        float _751 = (cbMatDynParam._m0[5u].x * _745) + cbMatDynParam._m0[5u].y;
        float _3803 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _756 = (cbMatDynParam._m0[5u].z * _745) + cbMatDynParam._m0[5u].w;
        float _3814 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) - _752)) + _752) < ((_591 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_505, cbSceneParam._m0[5u].z, fma(_504, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _503));
    float _624 = fma(_505, cbSceneParam._m0[6u].z, fma(_504, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _503));
    float _627 = fma(_505, cbSceneParam._m0[7u].z, fma(_504, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _503));
    uint _640 = uint(roundEven(NORMAL.w)) * 13u;
    uint _641 = _640 + 9u;
    uint _642 = _641 + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3825 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _665 = _662.x * TEXCOORD_5.w;
    float _666 = dot(vec3(_503, _504, _505), vec3(_582, _583, _584));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _503) - _582;
    float _674 = (_669 * _504) - _583;
    float _675 = (_669 * _505) - _584;
    float _679 = abs(dot(vec3(_582, _583, _584), vec3(_503, _504, _505)));
    float _3858 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_506);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _793 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _797 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _822 = _726 + _503;
        float _823 = _730 + _504;
        float _824 = _734 + _505;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_503, _504, _505), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3906 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_503, _504, _505), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3939 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_503, _504, _505), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3972 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1112 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1116 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1139 = _726 + _503;
        float _1140 = _730 + _504;
        float _1141 = _734 + _505;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_503, _504, _505), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4035 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_503, _504, _505), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4068 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_503, _504, _505), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4101 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = _1065;
        _1387 = _1065;
        _1388 = _1065;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1078)) + _1078;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1079)) + _1079;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _673 * 0.5;
    float _1446 = _674 * 0.5;
    float _1447 = _675 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _506);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1561 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1565 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1569 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1572 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1575 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1578 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1606;
        if (_1572 > 0.0)
        {
            _1606 = abs((1.0 - _1561) / _1572);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1561 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1606 = frontier_phi_17_15_ladder;
        }
        float _1779;
        if (_1575 > 0.0)
        {
            _1779 = abs((1.0 - _1565) / _1575);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1565 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1779 = frontier_phi_26_22_ladder;
        }
        float _2074;
        if (_1578 > 0.0)
        {
            _2074 = abs((1.0 - _1569) / _1578);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1569 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2074 = frontier_phi_38_33_ladder;
        }
        float _2076 = isnan(_1779) ? _1606 : (isnan(_1606) ? _1779 : min(_1606, _1779));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1572) + _1561;
        float _2082 = (_2077 * _1575) + _1565;
        float _2083 = (_2077 * _1578) + _1569;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_16_38_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1594 = frontier_phi_16_38_ladder_2;
        _1596 = frontier_phi_16_38_ladder_1;
        _1598 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1514);
        _1594 = _1582.x * cbModelParam._m0[1u].y;
        _1596 = _1582.y * cbModelParam._m0[1u].y;
        _1598 = _1582.z * cbModelParam._m0[1u].y;
    }
    float _1602 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _506);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1602 : min(cbModelParam._m0[25u].w, _1602));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1660 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1664 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1668 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1671 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1674 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1677 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1784;
        if (_1671 > 0.0)
        {
            _1784 = abs((1.0 - _1660) / _1671);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1660 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1784 = frontier_phi_28_24_ladder;
        }
        float _2101;
        if (_1674 > 0.0)
        {
            _2101 = abs((1.0 - _1664) / _1674);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1664 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2101 = frontier_phi_40_35_ladder;
        }
        float _2428;
        if (_1677 > 0.0)
        {
            _2428 = abs((1.0 - _1668) / _1677);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1668 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2428 = frontier_phi_50_47_ladder;
        }
        float _2430 = isnan(_2101) ? _1784 : (isnan(_1784) ? _2101 : min(_1784, _2101));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1671) + _1660;
        float _2436 = (_2431 * _1674) + _1664;
        float _2437 = (_2431 * _1677) + _1668;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1603);
            frontier_phi_25_50_ladder = _2555.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2555.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2555.x * cbModelParam._m0[1u].z;
        }
        _1696 = frontier_phi_25_50_ladder_2;
        _1698 = frontier_phi_25_50_ladder_1;
        _1700 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1603);
        _1696 = _1680.x * cbModelParam._m0[1u].z;
        _1698 = _1680.y * cbModelParam._m0[1u].z;
        _1700 = _1680.z * cbModelParam._m0[1u].z;
    }
    float _1712 = ((((1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_694 * _681)) * _665;
    float _1713 = _1712 * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1714 = _1712 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1715 = _1712 * ((cbModelParam._m0[1u].w * (_1700 - _1598)) + _1598);
    float _1718 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1721 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1724 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, _1713 * cbSceneParam._m0[91u].x));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1770 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1771 = _1758 / _1770;
    float _1772 = _1762 / _1770;
    float _1773 = _1766 / _1770;
    float _1920;
    float _1921;
    float _1922;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1800 = ((uint(_1773 > cbSceneParam._m0[59u].y) + uint(_1773 > cbSceneParam._m0[59u].x)) + uint(_1773 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1801 = _1800 + 43u;
        uint _1809 = _1800 + 44u;
        uint _1817 = _1800 + 45u;
        uint _1825 = _1800 + 46u;
        float _1836 = fma(_1770, cbSceneParam._m0[_1801].w, fma(_1766, cbSceneParam._m0[_1801].z, fma(_1762, cbSceneParam._m0[_1801].y, _1758 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1770, cbSceneParam._m0[_1809].w, fma(_1766, cbSceneParam._m0[_1809].z, fma(_1762, cbSceneParam._m0[_1809].y, _1758 * cbSceneParam._m0[_1809].x)));
        float _1848 = fma(_1770, cbSceneParam._m0[_1825].w, fma(_1766, cbSceneParam._m0[_1825].z, fma(_1762, cbSceneParam._m0[_1825].y, _1758 * cbSceneParam._m0[_1825].x)));
        float _1853 = cbSceneParam._m0[33u].z * _1848;
        float _1855 = cbSceneParam._m0[33u].w * _1848;
        float _1858 = fma(_1770, cbSceneParam._m0[_1817].w, fma(_1766, cbSceneParam._m0[_1817].z, fma(_1762, cbSceneParam._m0[_1817].y, _1758 * cbSceneParam._m0[_1817].x))) / _1848;
        float _1906 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
        float _4227 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1913 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1853 + _1836) / _1848, (_1855 + _1840) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1836) / _1848, (_1840 - _1853) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1853) / _1848, (_1840 - _1855) / _1848), _1858), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 - _1855) / _1848, (_1853 + _1840) / _1848), _1858), 0.0)).x), vec4(0.25)));
        _1920 = 1.0 - (_1913 * cbSceneParam._m0[34u].x);
        _1921 = 1.0 - (_1913 * cbSceneParam._m0[34u].y);
        _1922 = 1.0 - (_1913 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1920 = 1.0;
        _1921 = 1.0;
        _1922 = 1.0;
    }
    float _1986;
    float _1988;
    float _1990;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1974 = fma(_1770, cbSceneParam._m0[63u].w, fma(_1766, cbSceneParam._m0[63u].z, fma(_1762, cbSceneParam._m0[63u].y, _1758 * cbSceneParam._m0[63u].x)));
        float _1975 = fma(_1770, cbSceneParam._m0[60u].w, fma(_1766, cbSceneParam._m0[60u].z, fma(_1762, cbSceneParam._m0[60u].y, _1758 * cbSceneParam._m0[60u].x))) / _1974;
        float _1976 = fma(_1770, cbSceneParam._m0[61u].w, fma(_1766, cbSceneParam._m0[61u].z, fma(_1762, cbSceneParam._m0[61u].y, _1758 * cbSceneParam._m0[61u].x))) / _1974;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1975 >= cbSceneParam._m0[64u].x) && (_1976 >= cbSceneParam._m0[64u].y)) && (_1975 <= cbSceneParam._m0[64u].z)) && (_1976 <= cbSceneParam._m0[64u].w))
        {
            float _2114 = fma(_1770, cbSceneParam._m0[62u].w, fma(_1766, cbSceneParam._m0[62u].z, fma(_1762, cbSceneParam._m0[62u].y, _1758 * cbSceneParam._m0[62u].x))) / _1974;
            float _2118 = isnan(cbSceneParam._m0[41u].w) ? _2114 : (isnan(_2114) ? cbSceneParam._m0[41u].w : max(_2114, cbSceneParam._m0[41u].w));
            float _2161 = (cbSceneParam._m0[33u].x - sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773))) * cbSceneParam._m0[33u].y;
            float _4243 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
            float _2168 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1975, cbSceneParam._m0[33u].w + _1976), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1975, _1976 - cbSceneParam._m0[33u].z), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].z, _1976 - cbSceneParam._m0[33u].w), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1975 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1976), _2118), 0.0)).x), vec4(0.25)));
            float _2172 = 1.0 - (_2168 * cbSceneParam._m0[34u].x);
            float _2173 = 1.0 - (_2168 * cbSceneParam._m0[34u].y);
            float _2174 = 1.0 - (_2168 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2174) ? _1922 : (isnan(_1922) ? _2174 : min(_1922, _2174));
            frontier_phi_37_36_ladder_1 = isnan(_2173) ? _1921 : (isnan(_1921) ? _2173 : min(_1921, _2173));
            frontier_phi_37_36_ladder_2 = isnan(_2172) ? _1920 : (isnan(_1920) ? _2172 : min(_1920, _2172));
        }
        else
        {
            frontier_phi_37_36_ladder = _1922;
            frontier_phi_37_36_ladder_1 = _1921;
            frontier_phi_37_36_ladder_2 = _1920;
        }
        _1986 = frontier_phi_37_36_ladder_2;
        _1988 = frontier_phi_37_36_ladder_1;
        _1990 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1986 = _1920;
        _1988 = _1921;
        _1990 = _1922;
    }
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_640 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _665 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2033 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2037 = _1997 | 1u;
    float _2048 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_503, _504, _505));
    float _2051 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_503, _504, _505));
    float _4279 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _4290 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2056 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2058 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2065 = ((cbLight._m0[_2014].x * _2020) * _2058) + (((cbLight._m0[_2024].x * _1986) * _2033) * _2056);
    float _2066 = ((_2020 * cbLight._m0[_2014].y) * _2058) + (((cbLight._m0[_2024].y * _1988) * _2033) * _2056);
    float _2067 = ((_2020 * cbLight._m0[_2014].z) * _2058) + (((cbLight._m0[_2024].z * _1990) * _2033) * _2056);
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2073)
    {
        _2175 = _2065;
        _2177 = _2066;
        _2179 = _2067;
    }
    else
    {
        uint _2183 = _1997 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4301 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2202 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2065;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2066;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2067;
    }
    bool _2182 = _2071.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2182)
    {
        _2237 = _2175;
        _2239 = _2177;
        _2241 = _2179;
    }
    else
    {
        uint _2399 = _1997 + 7u;
        float _2415 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_503, _504, _505)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4317 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2418 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2237 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2175;
        _2239 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2177;
        _2241 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2179;
    }
    uint _2244 = _1997 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _506) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_1997].x + _582;
    float _2260 = cbLight._m0[_1997].y + _583;
    float _2261 = cbLight._m0[_1997].z + _584;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_1997].xyz));
    float _4333 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2273 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2274 = dot(vec3(_503, _504, _505), vec3(_2266, _2267, _2268));
    float _4355 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2266, _2267, _2268));
    float _4366 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2298 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2273 * ((_2272 * _2298) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2298) + _2258) * _2272))) * _2272;
    float _4377 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2325 = _1997 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _506) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2037].x + _582;
    float _2339 = cbLight._m0[_2037].y + _583;
    float _2340 = cbLight._m0[_2037].z + _584;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2037].xyz));
    float _4388 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2352 = dot(vec3(_503, _504, _505), vec3(_2345, _2346, _2347));
    float _4399 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2345, _2346, _2347));
    float _4410 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2374 = 1.0 - _2337;
    float _2384 = (0.5 / (((_2273 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2374) + _2337) * _2351))) * _2351;
    float _4421 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2396 = (((_2373 * cbLight._m0[_2325].x) * _2386) * _2020) + ((((cbLight._m0[_2244].x * _1986) * _2297) * _2311) * _2033);
    float _2397 = (((_2373 * cbLight._m0[_2325].y) * _2386) * _2020) + ((((cbLight._m0[_2244].y * _1988) * _2297) * _2311) * _2033);
    float _2398 = (((_2373 * cbLight._m0[_2325].z) * _2386) * _2020) + ((((cbLight._m0[_2244].z * _1990) * _2297) * _2311) * _2033);
    float _2454;
    float _2456;
    float _2458;
    if (_2073)
    {
        _2454 = _2396;
        _2456 = _2397;
        _2458 = _2398;
    }
    else
    {
        uint _2460 = _1997 + 2u;
        uint _2464 = _1997 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _506) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _582;
        float _2481 = cbLight._m0[_2460].y + _583;
        float _2482 = cbLight._m0[_2460].z + _584;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2460].xyz));
        float _4432 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2494 = dot(vec3(_503, _504, _505), vec3(_2487, _2488, _2489));
        float _4443 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4454 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2516 = 1.0 - _2479;
        float _2526 = (0.5 / (((_2273 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2516) + _2479) * _2493))) * _2493;
        float _4465 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2454 = (((_2515 * cbLight._m0[_2464].x) * _2528) * _2529) + _2396;
        _2456 = (((_2515 * cbLight._m0[_2464].y) * _2528) * _2529) + _2397;
        _2458 = (((_2515 * cbLight._m0[_2464].z) * _2528) * _2529) + _2398;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2182)
    {
        _2560 = _2454;
        _2562 = _2456;
        _2564 = _2458;
    }
    else
    {
        uint _2571 = _1997 + 3u;
        uint _2575 = _1997 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _506) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _582;
        float _2592 = cbLight._m0[_2571].y + _583;
        float _2593 = cbLight._m0[_2571].z + _584;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_503, _504, _505), vec3(cbLight._m0[_2571].xyz));
        float _4481 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2605 = dot(vec3(_503, _504, _505), vec3(_2598, _2599, _2600));
        float _4492 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4503 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2627 = 1.0 - _2590;
        float _2637 = (0.5 / (((_2273 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2627) + _2590) * _2604))) * _2604;
        float _4514 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2560 = (((_2626 * cbLight._m0[_2575].x) * _2639) * _2640) + _2454;
        _2562 = (((_2626 * cbLight._m0[_2575].y) * _2639) * _2640) + _2456;
        _2564 = (((_2626 * cbLight._m0[_2575].z) * _2639) * _2640) + _2458;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_1995.y == 0u)
    {
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.x;
        uint _2673 = uint((float(_2661.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2662))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2662)));
        float _2683 = (log2(_1773 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2684 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        uint _2687 = uint(isnan(14.0) ? _2684 : (isnan(_2684) ? 14.0 : min(_2684, 14.0)));
        uvec4 _2692 = texelFetch(g_lightClusterGridBuffer, int(((_2687 << 2u) + (_2673 << 6u)) >> 2u));
        uint _2693 = _2692.x;
        uint _2694 = _2661.z;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((((1u << ((_2694 >> 4u) & 15u)) + 4294967295u) & _2693) == 0u) || ((_2694 & 240u) == 0u))
        {
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
        }
        else
        {
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2942)
                {
                    frontier_phi_71_pred = _2931;
                    frontier_phi_71_pred_1 = _2930;
                    frontier_phi_71_pred_2 = _2929;
                    frontier_phi_71_pred_3 = _2928;
                    frontier_phi_71_pred_4 = _2927;
                    frontier_phi_71_pred_5 = _2926;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2941;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2932 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _1771;
                        float _3138 = _3097.y - _1772;
                        float _3139 = _3097.z - _1773;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_621, _624, _627), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4540 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _1771;
                        float _3173 = (-0.0) - _1772;
                        float _3174 = (-0.0) - _1773;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3188 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _681;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_621, _624, _627), vec3(_3179, _3180, _3181));
                        float _4556 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3213 = dot(vec3(_621, _624, _627), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4567 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3157 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3147) + _3222;
                        float _4578 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4589 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3248 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3220 * _3220) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3248 * _3133.x) + _3071;
                        _2999 = (_3248 * _3133.y) + _3072;
                        _3000 = (_3248 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_71_pred = _3003;
                    frontier_phi_71_pred_1 = _3002;
                    frontier_phi_71_pred_2 = _3001;
                    frontier_phi_71_pred_3 = _3000;
                    frontier_phi_71_pred_4 = _2999;
                    frontier_phi_71_pred_5 = _2998;
                }
                _2784 = frontier_phi_71_pred;
                _2782 = frontier_phi_71_pred_1;
                _2780 = frontier_phi_71_pred_2;
                _2778 = frontier_phi_71_pred_3;
                _2776 = frontier_phi_71_pred_4;
                _2774 = frontier_phi_71_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2774;
                    _2927 = _2776;
                    _2928 = _2778;
                    _2929 = _2780;
                    _2930 = _2782;
                    _2931 = _2784;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
        }
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.z;
        uint _2790 = (_2788 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2790) & _2693) == 0u)
        {
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
            float _2920 = _2919 * _1771;
            float _2921 = _2919 * _1772;
            float _2922 = _2919 * _1773;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2790 < ((_2788 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3054 = _2773;
                float _3055 = _2775;
                float _3056 = _2777;
                float _3057 = _2779;
                float _3058 = _2781;
                float _3059 = _2783;
                uint _3060 = _2790;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3070)
                    {
                        frontier_phi_82_pred = _3059;
                        frontier_phi_82_pred_1 = _3058;
                        frontier_phi_82_pred_2 = _3057;
                        frontier_phi_82_pred_3 = _3056;
                        frontier_phi_82_pred_4 = _3055;
                        frontier_phi_82_pred_5 = _3054;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        uint _3281 = _3069;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3351;
                        vec4 _3367;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3292 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3338 = (_3292 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3354 = (_3292 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3370 = (_3292 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3292 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_1773, _3402.z, fma(_1772, _3402.y, _3402.x * _1771)) + _3402.w;
                            _3415 = !((fma(_1773, _3383.z, fma(_1772, _3383.y, _3383.x * _1771)) + _3383.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3307.x - _1771;
                                float _3443 = _3307.y - _1772;
                                float _3444 = _3307.z - _1773;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3308 * _3308));
                                float _4600 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3460 = sqrt(_3445) * _3323.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_621, _624, _627))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_1773, _3351.z, fma(_1772, _3351.y, _3351.x * _1771)) + _3351.w) / _3414;
                                float _3474 = (fma(_1773, _3367.z, fma(_1772, _3367.y, _3367.x * _1771)) + _3367.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4616 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _681;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2920;
                                float _3504 = _3450 - _2921;
                                float _3505 = _3451 - _2922;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4627 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3517 = dot(vec3(_621, _624, _627), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4638 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_621, _624, _627), vec3(_3449, _3450, _3451))) + _3526;
                                float _4649 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4660 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3480 * _3323.z;
                                frontier_phi_88_pred_1 = _3480 * _3323.y;
                                frontier_phi_88_pred_2 = _3480 * _3323.x;
                                frontier_phi_88_pred_3 = _3554 * _3335.z;
                                frontier_phi_88_pred_4 = _3554 * _3335.y;
                                frontier_phi_88_pred_5 = _3554 * _3335.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_88_pred;
                            _3562 = frontier_phi_88_pred_1;
                            _3561 = frontier_phi_88_pred_2;
                            _3560 = frontier_phi_88_pred_3;
                            _3559 = frontier_phi_88_pred_4;
                            _3558 = frontier_phi_88_pred_5;
                            _3265 = _3561 + _3278;
                            _3266 = _3562 + _3279;
                            _3267 = _3563 + _3280;
                            _3262 = _3558 + _3275;
                            _3263 = _3559 + _3276;
                            _3264 = _3560 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3267;
                        frontier_phi_82_pred_1 = _3266;
                        frontier_phi_82_pred_2 = _3265;
                        frontier_phi_82_pred_3 = _3264;
                        frontier_phi_82_pred_4 = _3263;
                        frontier_phi_82_pred_5 = _3262;
                    }
                    _2905 = frontier_phi_82_pred;
                    _2903 = frontier_phi_82_pred_1;
                    _2901 = frontier_phi_82_pred_2;
                    _2899 = frontier_phi_82_pred_3;
                    _2897 = frontier_phi_82_pred_4;
                    _2895 = frontier_phi_82_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2895;
                        _3055 = _2897;
                        _3056 = _2899;
                        _3057 = _2901;
                        _3058 = _2903;
                        _3059 = _2905;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2901;
                frontier_phi_63_64_ladder_1 = _2905;
                frontier_phi_63_64_ladder_2 = _2903;
                frontier_phi_63_64_ladder_3 = _2899;
                frontier_phi_63_64_ladder_4 = _2897;
                frontier_phi_63_64_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_63_64_ladder = _2779;
                frontier_phi_63_64_ladder_1 = _2783;
                frontier_phi_63_64_ladder_2 = _2781;
                frontier_phi_63_64_ladder_3 = _2777;
                frontier_phi_63_64_ladder_4 = _2775;
                frontier_phi_63_64_ladder_5 = _2773;
            }
            _2894 = frontier_phi_63_64_ladder_5;
            _2896 = frontier_phi_63_64_ladder_4;
            _2898 = frontier_phi_63_64_ladder_3;
            _2900 = frontier_phi_63_64_ladder;
            _2902 = frontier_phi_63_64_ladder_2;
            _2904 = frontier_phi_63_64_ladder_1;
        }
        float _2909 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2706 = (_2909 * _2900) + _2237;
        _2708 = (_2909 * _2902) + _2239;
        _2710 = (_2909 * _2904) + _2241;
        _2712 = ((_2894 * 0.039999999105930328369140625) * _2909) + _2560;
        _2714 = ((_2896 * 0.039999999105930328369140625) * _2909) + _2562;
        _2716 = ((_2898 * 0.039999999105930328369140625) * _2909) + _2564;
    }
    else
    {
        _2706 = _2237;
        _2708 = _2239;
        _2710 = _2241;
        _2712 = _2560;
        _2714 = _2562;
        _2716 = _2564;
    }
    float _4676 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4687 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4698 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _2733 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2706 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _665))) + ((_2712 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2734 = ((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2708 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _665))) + ((_2714 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2710 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _665))) + ((_2716 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    uint _2736 = _640 + 6u;
    float _2744 = _602 / cbSceneParam._m0[86u].x;
    float _2745 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2759 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2761 = _2759.x;
    float _2762 = _2759.y;
    float _2763 = _2759.z;
    float _2764 = _2759.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2798 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2799 = _2798 / _525;
        float _2810 = _2799 * _575;
        float _2811 = _576 * _2799;
        float _2812 = (-0.0) - _2811;
        float _2814 = _2799 * _577;
        float _2816 = (cbSceneParam._m0[77u].w * _2812) / _2798;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2811;
        float _2824 = sqrt(((_2810 * _2810) + (_2811 * _2811)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2798)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2812 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2957 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _3011 = ((abs(_2824 / _2812) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2834 * _2966) - exp2(_2834 * _2967)) * _2955))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2764);
        _2836 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2761;
        _2838 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2762;
        _2840 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2763;
        _2842 = _3022 * _2764;
    }
    else
    {
        _2836 = _2761;
        _2838 = _2762;
        _2840 = _2763;
        _2842 = _2764;
    }
    bool _3049;
    vec4 _2852;
    vec4 _2874;
    float _2876;
    float _2880;
    float _2881;
    float _2882;
    float _2883;
    bool _2893;
    for (;;)
    {
        _2852 = cbMatDynParam._m0[0u];
        float _2854 = roundEven(_2852.y);
        bool _2855 = _2854 == 3.0;
        float _2856 = log2(_2842);
        float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * _2733;
        float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * _2734;
        float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * _2735;
        float _2872 = _591 + (-0.5);
        _2874 = cbMtdParam._m0[1u];
        _2876 = _2874.y * _2872;
        float _2879 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2880 = _2879 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
        _2881 = _2879 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
        _2882 = _2879 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
        _2883 = _2872 * 0.999000012874603271484375;
        _2893 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2893)
        {
            if ((cbInstanceData._m0[_640 + 7u].x + _2883) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2990 = _641 + uint(_2852.w);
        if ((cbInstanceData._m0[_2990].w < 1.0) && ((cbInstanceData._m0[_2990].w + _2883) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2876 + 1.0) < _2874.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3253;
    if (_3049)
    {
        discard_state = true;
        _3253 = 0.0;
    }
    else
    {
        _3253 = cbInstanceData._m0[_2736].w;
    }
    SV_Target.x = _2880;
    SV_Target.y = _2881;
    SV_Target.z = _2882;
    SV_Target.w = _3253;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2736].w;
    discard_exit();
}


