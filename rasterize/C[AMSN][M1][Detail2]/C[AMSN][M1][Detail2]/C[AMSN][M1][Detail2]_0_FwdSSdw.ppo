#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _953;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _301 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3312 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _309 = (_302 * ((_270.x * cbMtdParam._m0[10u].x) - _245)) + _245;
    float _310 = (_302 * ((_270.y * cbMtdParam._m0[10u].y) - _246)) + _246;
    float _311 = (_302 * ((_270.z * cbMtdParam._m0[10u].z) - _247)) + _247;
    vec4 _323 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _325 = _323.x;
    float _327 = _325 - (_325 * TEXCOORD_5.x);
    vec4 _344 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _352 = (_344.x * 2.0) + (-1.0);
    float _354 = (_344.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_352, _354), vec2(_352, _354));
    float _3323 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _360 = sqrt(1.0 - (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))));
    float _361 = _344.z * cbMtdParam._m0[13u].y;
    vec4 _374 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _388 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_374.z * cbMtdParam._m0[13u].x) - _361)) + _361;
    float _394 = ((((_374.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _352;
    float _395 = ((((_374.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _354;
    float _398 = fma(_360, _209 * NORMAL.x, fma(_395, _216 * TANGENT.x, (_202 * _194) * _394));
    float _401 = fma(_360, _209 * NORMAL.y, fma(_395, _216 * TANGENT.y, (_202 * _195) * _394));
    float _404 = fma(_360, _209 * NORMAL.z, fma(_395, _216 * TANGENT.z, (_202 * _196) * _394));
    float _408 = inversesqrt(dot(vec3(_398, _401, _404), vec3(_398, _401, _404)));
    float _409 = _408 * _398;
    float _410 = _408 * _401;
    float _411 = _408 * _404;
    float _3334 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _412 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3356 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3367 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3378 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _416 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _483 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _473);
    float _484 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _473);
    float _485 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _473);
    float _489 = inversesqrt(dot(vec3(_483, _484, _485), vec3(_483, _484, _485)));
    float _490 = _483 * _489;
    float _491 = _484 * _489;
    float _492 = _485 * _489;
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_411, cbSceneParam._m0[5u].z, fma(_410, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _409));
    float _522 = fma(_411, cbSceneParam._m0[6u].z, fma(_410, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _409));
    float _525 = fma(_411, cbSceneParam._m0[7u].z, fma(_410, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _409));
    uint _538 = uint(roundEven(NORMAL.w)) * 13u;
    uint _540 = (_538 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _546 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_540].x;
    float _547 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_540].y;
    float _548 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_540].z;
    float _3389 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _552 = 1.0 - _416;
    float _553 = _549 * _552;
    float _554 = _550 * _552;
    float _555 = _551 * _552;
    float _560 = (_549 + (-0.039999999105930328369140625)) * _416;
    float _561 = (_550 + (-0.039999999105930328369140625)) * _416;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _416;
    float _563 = _560 + 0.039999999105930328369140625;
    float _565 = _561 + 0.039999999105930328369140625;
    float _566 = _562 + 0.039999999105930328369140625;
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _578 = _575.x * TEXCOORD_5.w;
    float _579 = dot(vec3(_409, _410, _411), vec3(_490, _491, _492));
    float _582 = _579 * 2.0;
    float _586 = (_582 * _409) - _490;
    float _587 = (_582 * _410) - _491;
    float _588 = (_582 * _411) - _492;
    float _592 = abs(dot(vec3(_490, _491, _492), vec3(_409, _410, _411)));
    float _3422 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _594 = sqrt(_412);
    float _607 = exp2((_594 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_594 * 3.0));
    float _613 = (1.0 - _607) * ((_594 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _614 = _607 * _594;
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _952;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = fma(_650, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642));
        float _681 = fma(_650, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642));
        float _685 = fma(_650, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642));
        float _710 = _642 + _409;
        float _711 = _646 + _410;
        float _712 = _650 + _411;
        float _722 = fma(_712, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710)) - _677;
        float _723 = fma(_712, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710)) - _681;
        float _724 = fma(_712, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710)) - _685;
        float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
        float _741 = ((_728 * _722) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_677 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_728 * _723) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_681 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_728 * _724) / cbModelParam._m0[34u].z) + ((((((_685 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _753 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_741, _742, _743), 0.0);
        float _780 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_746.x + (-0.5));
        float _782 = _780 * (_746.y + (-0.5));
        float _783 = _780 * (_746.z + (-0.5));
        float _790 = exp2((_753.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_753.x + (-0.5));
        float _792 = _790 * (_753.y + (-0.5));
        float _793 = _790 * (_753.z + (-0.5));
        float _800 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_760.x + (-0.5));
        float _802 = _800 * (_760.y + (-0.5));
        float _803 = _800 * (_760.z + (-0.5));
        float _810 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_767.x + (-0.5));
        float _812 = _810 * (_767.y + (-0.5));
        float _813 = _810 * (_767.z + (-0.5));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = _781 * 0.5;
        float _818 = _791 * 0.5;
        float _819 = _801 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _834 = (dot(vec3(_409, _410, _411), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _844 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3470 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_846 + 1.0))) + _851) * _814;
        float _861 = _782 * 0.5;
        float _862 = _792 * 0.5;
        float _863 = _802 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _877 = (dot(vec3(_409, _410, _411), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _886 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _888 = _887 * 2.0;
        float _892 = (1.0 - _887) / (_887 + 1.0);
        float _3503 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _902 = ((((1.0 - _893) * (_888 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_888 + 1.0))) + _893) * _815;
        float _903 = _783 * 0.5;
        float _904 = _793 * 0.5;
        float _905 = _803 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _919 = (dot(vec3(_409, _410, _411), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _928 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3536 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_930 + 1.0))) + _935) * _816;
        _952 = _783;
        _954 = _782;
        _955 = _781;
        _956 = _793;
        _957 = _792;
        _958 = _791;
        _959 = _803;
        _960 = _802;
        _961 = _801;
        _962 = _816;
        _963 = _815;
        _964 = _814;
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
    }
    else
    {
        _952 = _953;
        _954 = _953;
        _955 = _953;
        _956 = _953;
        _957 = _953;
        _958 = _953;
        _959 = _953;
        _960 = _953;
        _961 = _953;
        _962 = _953;
        _963 = _953;
        _964 = _953;
        _965 = 0.0;
        _966 = 0.0;
        _967 = 0.0;
    }
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = fma(_650, cbModelParam._m0[30u].z, fma(_646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _642));
        float _997 = fma(_650, cbModelParam._m0[31u].z, fma(_646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _642));
        float _1001 = fma(_650, cbModelParam._m0[32u].z, fma(_646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _642));
        float _1024 = _642 + _409;
        float _1025 = _646 + _410;
        float _1026 = _650 + _411;
        float _1036 = fma(_1026, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024)) - _993;
        float _1037 = fma(_1026, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024)) - _997;
        float _1038 = fma(_1026, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024)) - _1001;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_993 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_997 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[35u].z) + ((((((_1001 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1092 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1059.x + (-0.5));
        float _1094 = _1092 * (_1059.y + (-0.5));
        float _1095 = _1092 * (_1059.z + (-0.5));
        float _1102 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1066.x + (-0.5));
        float _1104 = _1102 * (_1066.y + (-0.5));
        float _1105 = _1102 * (_1066.z + (-0.5));
        float _1112 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1073.x + (-0.5));
        float _1114 = _1112 * (_1073.y + (-0.5));
        float _1115 = _1112 * (_1073.z + (-0.5));
        float _1122 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1080.x + (-0.5));
        float _1124 = _1122 * (_1080.y + (-0.5));
        float _1125 = _1122 * (_1080.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_409, _410, _411), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3599 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1156 + 1.0))) + _1161) * _1126;
        float _1171 = _1094 * 0.5;
        float _1172 = _1104 * 0.5;
        float _1173 = _1114 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_409, _410, _411), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3632 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1198 + 1.0))) + _1203) * _1127;
        float _1213 = _1095 * 0.5;
        float _1214 = _1105 * 0.5;
        float _1215 = _1115 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_409, _410, _411), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3665 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1240 + 1.0))) + _1245) * _1128;
        _1262 = _1095;
        _1263 = _1094;
        _1264 = _1093;
        _1265 = _1105;
        _1266 = _1104;
        _1267 = _1103;
        _1268 = _1115;
        _1269 = _1114;
        _1270 = _1113;
        _1271 = _1128;
        _1272 = _1127;
        _1273 = _1126;
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _953;
        _1263 = _953;
        _1264 = _953;
        _1265 = _953;
        _1266 = _953;
        _1267 = _953;
        _1268 = _953;
        _1269 = _953;
        _1270 = _953;
        _1271 = _953;
        _1272 = _953;
        _1273 = _953;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _965)) + _965;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _966)) + _966;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _967)) + _967;
    float _1309 = fma(_1288, cbSceneParam._m0[89u].z, fma(_1287, cbSceneParam._m0[89u].y, _1286 * cbSceneParam._m0[89u].x));
    float _1312 = fma(_1288, cbSceneParam._m0[90u].z, fma(_1287, cbSceneParam._m0[90u].y, _1286 * cbSceneParam._m0[90u].x));
    float _1315 = fma(_1288, cbSceneParam._m0[91u].z, fma(_1287, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1286));
    float _1330 = _586 * 0.5;
    float _1331 = _587 * 0.5;
    float _1332 = _588 * 0.5;
    float _1333 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1336 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1339 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1373;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1346 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_952, _956, _959, _962));
        float _1350 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_954, _957, _960, _963));
        float _1354 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_955, _958, _961, _964));
        float _1361 = dot(vec4(cbModelParam._m0[39u]), vec4(_1330, _1331, _1332, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1384;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1375 = dot(vec4(cbModelParam._m0[40u]), vec4(_1330, _1331, _1332, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1388 = (_1384 * cbModelParam._m0[1u].x) + (_1373 * (1.0 - cbModelParam._m0[1u].x));
    float _1398 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _412);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1398 : min(cbModelParam._m0[25u].z, _1398));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1447 = fma(_650, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642)) + cbModelParam._m0[13u].w;
        float _1451 = fma(_650, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642)) + cbModelParam._m0[14u].w;
        float _1455 = fma(_650, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642)) + cbModelParam._m0[15u].w;
        float _1458 = fma(_588, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586));
        float _1461 = fma(_588, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586));
        float _1464 = fma(_588, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586));
        float _1492;
        if (_1458 > 0.0)
        {
            _1492 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1492 = frontier_phi_14_12_ladder;
        }
        float _1720;
        if (_1461 > 0.0)
        {
            _1720 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1720 = frontier_phi_23_19_ladder;
        }
        float _1977;
        if (_1464 > 0.0)
        {
            _1977 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1977 = frontier_phi_35_30_ladder;
        }
        float _1979 = isnan(_1720) ? _1492 : (isnan(_1492) ? _1720 : min(_1492, _1720));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1458) + _1447;
        float _1985 = (_1980 * _1461) + _1451;
        float _1986 = (_1980 * _1464) + _1455;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1399);
            frontier_phi_13_35_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1480 = frontier_phi_13_35_ladder_2;
        _1482 = frontier_phi_13_35_ladder_1;
        _1484 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_586, _587, _588), _1399);
        _1480 = _1468.x * cbModelParam._m0[1u].y;
        _1482 = _1468.y * cbModelParam._m0[1u].y;
        _1484 = _1468.z * cbModelParam._m0[1u].y;
    }
    float _1488 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _412);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1488 : min(cbModelParam._m0[25u].w, _1488));
    float _1582;
    float _1584;
    float _1586;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1546 = fma(_650, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642)) + cbModelParam._m0[21u].w;
        float _1550 = fma(_650, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642)) + cbModelParam._m0[22u].w;
        float _1554 = fma(_650, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642)) + cbModelParam._m0[23u].w;
        float _1557 = fma(_588, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586));
        float _1560 = fma(_588, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586));
        float _1563 = fma(_588, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586));
        float _1725;
        if (_1557 > 0.0)
        {
            _1725 = abs((1.0 - _1546) / _1557);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1546 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1725 = frontier_phi_25_21_ladder;
        }
        float _2004;
        if (_1560 > 0.0)
        {
            _2004 = abs((1.0 - _1550) / _1560);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1550 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2004 = frontier_phi_37_32_ladder;
        }
        float _2217;
        if (_1563 > 0.0)
        {
            _2217 = abs((1.0 - _1554) / _1563);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1554 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2217 = frontier_phi_46_43_ladder;
        }
        float _2219 = isnan(_2004) ? _1725 : (isnan(_1725) ? _2004 : min(_1725, _2004));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1557) + _1546;
        float _2225 = (_2220 * _1560) + _1550;
        float _2226 = (_2220 * _1563) + _1554;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1489);
            frontier_phi_22_46_ladder = _2425.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2425.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2425.x * cbModelParam._m0[1u].z;
        }
        _1582 = frontier_phi_22_46_ladder_2;
        _1584 = frontier_phi_22_46_ladder_1;
        _1586 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_586, _587, _588), _1489);
        _1582 = _1566.x * cbModelParam._m0[1u].z;
        _1584 = _1566.y * cbModelParam._m0[1u].z;
        _1586 = _1566.z * cbModelParam._m0[1u].z;
    }
    float _1599 = (((_613 * _563) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1601 = (((_613 * _565) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_613 * _566) + _614) * _578) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1606 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1601, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1601, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1601, cbSceneParam._m0[91u].y, _1599 * cbSceneParam._m0[91u].x));
    vec4 _1620 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_498, _499));
    float _1622 = _1620.w;
    float _1634 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1622);
    float _1635 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1622);
    float _1636 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1622);
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_538 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _578 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1679 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1683 = _1642 | 1u;
    float _1694 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_409, _410, _411));
    float _1697 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_409, _410, _411));
    float _3801 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _3812 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1702 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1704 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1711 = ((cbLight._m0[_1659].x * _1665) * _1704) + (((cbLight._m0[_1669].x * _1634) * _1679) * _1702);
    float _1712 = ((_1665 * cbLight._m0[_1659].y) * _1704) + (((cbLight._m0[_1669].y * _1635) * _1679) * _1702);
    float _1713 = ((_1665 * cbLight._m0[_1659].z) * _1704) + (((cbLight._m0[_1669].z * _1636) * _1679) * _1702);
    uvec4 _1717 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1719 = _1717.x == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1719)
    {
        _1730 = _1711;
        _1732 = _1712;
        _1734 = _1713;
    }
    else
    {
        uint _1738 = _1642 + 6u;
        float _1754 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_409, _410, _411)) * 0.5) + 0.5;
        float _1755 = _1754 * _1754;
        float _3823 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1757 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1730 = (((cbLight._m0[_1738].x * 0.3183098733425140380859375) * _1756) * _1757) + _1711;
        _1732 = (((cbLight._m0[_1738].y * 0.3183098733425140380859375) * _1756) * _1757) + _1712;
        _1734 = (((cbLight._m0[_1738].z * 0.3183098733425140380859375) * _1756) * _1757) + _1713;
    }
    bool _1737 = _1717.y == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1737)
    {
        _1775 = _1730;
        _1777 = _1732;
        _1779 = _1734;
    }
    else
    {
        uint _1948 = _1642 + 7u;
        float _1964 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_409, _410, _411)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _3839 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1967 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1775 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1730;
        _1777 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1732;
        _1779 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1734;
    }
    uint _1782 = _1642 + 8u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _412) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1642].x + _490;
    float _1798 = cbLight._m0[_1642].y + _491;
    float _1799 = cbLight._m0[_1642].z + _492;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_1642].xyz));
    float _3855 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _1811 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1812 = dot(vec3(_409, _410, _411), vec3(_1804, _1805, _1806));
    float _3877 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1816 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1804, _1805, _1806));
    float _3888 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = _1796 * _1796;
    float _1824 = ((_1815 * _1815) * (_1820 + (-1.0))) + 1.0;
    float _1832 = exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0);
    float _1833 = 0.959999978542327880859375 - _560;
    float _1835 = 0.959999978542327880859375 - _561;
    float _1836 = 0.959999978542327880859375 - _562;
    float _1843 = 1.0 - _1796;
    float _1854 = (0.5 / (((_1811 * ((_1810 * _1843) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _1843) + _1796) * _1810))) * _1810;
    float _3899 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1856 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1820 / ((_1824 * _1824) * 3.141590118408203125));
    uint _1870 = _1642 + 9u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1683].w)) * _412) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1683].x + _490;
    float _1884 = cbLight._m0[_1683].y + _491;
    float _1885 = cbLight._m0[_1683].z + _492;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_1683].xyz));
    float _3910 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1897 = dot(vec3(_409, _410, _411), vec3(_1890, _1891, _1892));
    float _3921 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1683].xyz), vec3(_1890, _1891, _1892));
    float _3932 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1882 * _1882;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1916 = exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0);
    float _1923 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1811 * ((_1896 * _1923) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _1923) + _1882) * _1896))) * _1896;
    float _3943 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    float _1945 = (((((_1916 * _1833) + _563) * cbLight._m0[_1870].x) * _1935) * _1665) + ((((cbLight._m0[_1782].x * _1634) * ((_1832 * _1833) + _563)) * _1856) * _1679);
    float _1946 = (((((_1916 * _1835) + _565) * cbLight._m0[_1870].y) * _1935) * _1665) + ((((cbLight._m0[_1782].y * _1635) * ((_1832 * _1835) + _565)) * _1856) * _1679);
    float _1947 = (((((_1916 * _1836) + _566) * cbLight._m0[_1870].z) * _1935) * _1665) + ((((cbLight._m0[_1782].z * _1636) * ((_1832 * _1836) + _566)) * _1856) * _1679);
    float _2009;
    float _2011;
    float _2013;
    if (_1719)
    {
        _2009 = _1945;
        _2011 = _1946;
        _2013 = _1947;
    }
    else
    {
        uint _2015 = _1642 + 2u;
        uint _2019 = _1642 + 10u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _412) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _490;
        float _2036 = cbLight._m0[_2015].y + _491;
        float _2037 = cbLight._m0[_2015].z + _492;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_2015].xyz));
        float _3954 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2049 = dot(vec3(_409, _410, _411), vec3(_2042, _2043, _2044));
        float _3965 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _3976 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0);
        float _2075 = 1.0 - _2034;
        float _2085 = (0.5 / (((_1811 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _2075) + _2034) * _2048))) * _2048;
        float _3987 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _2009 = (((((_2068 * _1833) + _563) * cbLight._m0[_2019].x) * _2087) * _2088) + _1945;
        _2011 = (((((_2068 * _1835) + _565) * cbLight._m0[_2019].y) * _2087) * _2088) + _1946;
        _2013 = (((((_2068 * _1836) + _566) * cbLight._m0[_2019].z) * _2087) * _2088) + _1947;
    }
    float _2123;
    float _2125;
    float _2127;
    if (_1737)
    {
        _2123 = _2009;
        _2125 = _2011;
        _2127 = _2013;
    }
    else
    {
        uint _2134 = _1642 + 3u;
        uint _2138 = _1642 + 11u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _412) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _490;
        float _2155 = cbLight._m0[_2134].y + _491;
        float _2156 = cbLight._m0[_2134].z + _492;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_2134].xyz));
        float _4003 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2168 = dot(vec3(_409, _410, _411), vec3(_2161, _2162, _2163));
        float _4014 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4025 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
        float _2194 = 1.0 - _2153;
        float _2204 = (0.5 / (((_1811 * ((_2167 * _2194) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _2194) + _2153) * _2167))) * _2167;
        float _4036 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2206 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2207 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2123 = (((((_2187 * _1833) + _563) * cbLight._m0[_2138].x) * _2206) * _2207) + _2009;
        _2125 = (((((_2187 * _1835) + _565) * cbLight._m0[_2138].y) * _2206) * _2207) + _2011;
        _2127 = (((((_2187 * _1836) + _566) * cbLight._m0[_2138].z) * _2206) * _2207) + _2013;
    }
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_1640.y == 0u)
    {
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2282;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2282;
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2282;
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.x;
        uint _2309 = uint((float(_2297.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2298))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2298)));
        float _2319 = (log2(_2285 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2320 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        uint _2323 = uint(isnan(14.0) ? _2320 : (isnan(_2320) ? 14.0 : min(_2320, 14.0)));
        uvec4 _2328 = texelFetch(g_lightClusterGridBuffer, int(((_2323 << 2u) + (_2309 << 6u)) >> 2u));
        uint _2329 = _2328.x;
        uint _2330 = _2297.z;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        float _2440;
        if (((((1u << ((_2330 >> 4u) & 15u)) + 4294967295u) & _2329) == 0u) || ((_2330 & 240u) == 0u))
        {
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
        }
        else
        {
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2439;
            float _2441;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            uint _2581 = 0u;
            uint _2590;
            bool _2591;
            for (;;)
            {
                _2590 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                _2591 = _2590 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2591)
                {
                    frontier_phi_61_pred = _2575;
                    frontier_phi_61_pred_1 = _2580;
                    frontier_phi_61_pred_2 = _2579;
                    frontier_phi_61_pred_3 = _2578;
                    frontier_phi_61_pred_4 = _2577;
                    frontier_phi_61_pred_5 = _2576;
                }
                else
                {
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    uint _2705;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2590;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    for (;;)
                    {
                        uint _2709 = uint(findLSB(_2705)) + (_2581 << 5u);
                        uint _2706 = (_2705 + 4294967295u) & _2705;
                        uint _2711 = _2709 * 48u;
                        vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 3u)).x));
                        uint _2731 = (_2709 * 48u) + 4u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2750 = (_2709 * 48u) + 8u;
                        vec3 _2761 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x));
                        float _2765 = _2725.x - _2283;
                        float _2766 = _2725.y - _2284;
                        float _2767 = _2725.z - _2285;
                        float _2768 = dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767));
                        float _2771 = inversesqrt(_2768);
                        float _2772 = _2771 * _2765;
                        float _2773 = _2771 * _2766;
                        float _2774 = _2771 * _2767;
                        float _2775 = dot(vec3(_519, _522, _525), vec3(_2772, _2773, _2774));
                        float _2780 = 1.0 - (_2768 * _2725.w);
                        float _4062 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2782 = sqrt(_2768) * _2744.w;
                        float _2785 = 1.39999997615814208984375 / (_2782 + 1.39999997615814208984375);
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2775) + _2786;
                        float _2792 = _2782 * _2782;
                        float _2796 = ((isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))) * _2781) / ((_2792 * 0.699999988079071044921875) + 1.0);
                        float _2800 = (-0.0) - _2283;
                        float _2801 = (-0.0) - _2284;
                        float _2802 = (-0.0) - _2285;
                        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
                        float _2807 = _2806 * _2800;
                        float _2808 = _2806 * _2801;
                        float _2809 = _2806 * _2802;
                        float _2817 = exp2(log2(1.0 / ((_2792 * 3.5) + 5.0)) * 0.25);
                        float _2818 = 1.0 - _594;
                        float _2825 = sqrt(1.0 - ((1.0 - (_2818 * _2818)) * (1.0 - (_2817 * _2817))));
                        float _2826 = _2825 * _2825;
                        float _2827 = _2826 * _2826;
                        float _2828 = _2807 + _2772;
                        float _2829 = _2808 + _2773;
                        float _2830 = _2809 + _2774;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2838 = dot(vec3(_519, _522, _525), vec3(_2807, _2808, _2809));
                        float _4078 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2841 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2842 = dot(vec3(_519, _522, _525), vec3(_2834 * _2828, _2834 * _2829, _2834 * _2830));
                        float _4089 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2845 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2849 = ((_2845 * _2845) * (_2827 + (-1.0))) + 1.0;
                        float _2850 = _2785 * _2826;
                        float _2851 = _2850 * _2850;
                        float _2854 = ((1.0 - _2851) * _2775) + _2851;
                        float _4100 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2855 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2856 = 1.0 - _2826;
                        float _2866 = (0.5 / (((_2855 * ((_2841 * _2856) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2855 * _2856) + _2826) * _2841))) * _2855;
                        float _4111 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2877 = (((_2827 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_2849 * _2849) * ((_2792 * 2.1991131305694580078125) + 3.141590118408203125))) * _2781;
                        _2634 = (_2796 * _2744.x) + _2702;
                        _2635 = (_2796 * _2744.y) + _2703;
                        _2636 = (_2796 * _2744.z) + _2704;
                        _2631 = (_2877 * _2761.x) + _2699;
                        _2632 = (_2877 * _2761.y) + _2700;
                        _2633 = (_2877 * _2761.z) + _2701;
                        if (_2706 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2706;
                        }
                    }
                    frontier_phi_61_pred = _2631;
                    frontier_phi_61_pred_1 = _2636;
                    frontier_phi_61_pred_2 = _2635;
                    frontier_phi_61_pred_3 = _2634;
                    frontier_phi_61_pred_4 = _2633;
                    frontier_phi_61_pred_5 = _2632;
                }
                _2431 = frontier_phi_61_pred;
                _2441 = frontier_phi_61_pred_1;
                _2439 = frontier_phi_61_pred_2;
                _2437 = frontier_phi_61_pred_3;
                _2435 = frontier_phi_61_pred_4;
                _2433 = frontier_phi_61_pred_5;
                uint _2582 = _2581 + 1u;
                if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2575 = _2431;
                    _2576 = _2433;
                    _2577 = _2435;
                    _2578 = _2437;
                    _2579 = _2439;
                    _2580 = _2441;
                    _2581 = _2582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
        }
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.z;
        uint _2447 = (_2445 >> 8u) & 15u;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((4294967295u << _2447) & _2329) == 0u)
        {
            _2543 = _2430;
            _2545 = _2432;
            _2547 = _2434;
            _2549 = _2436;
            _2551 = _2438;
            _2553 = _2440;
        }
        else
        {
            float _2568 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
            float _2569 = _2568 * _2283;
            float _2570 = _2568 * _2284;
            float _2571 = _2568 * _2285;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2447 < ((_2445 >> 12u) & 15u))
            {
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2682 = _2430;
                float _2683 = _2432;
                float _2684 = _2434;
                float _2685 = _2436;
                float _2686 = _2438;
                float _2687 = _2440;
                uint _2688 = _2447;
                uint _2697;
                bool _2698;
                for (;;)
                {
                    _2697 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2688 << 2u)) >> 2u)).x;
                    _2698 = _2697 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2698)
                    {
                        frontier_phi_67_pred = _2685;
                        frontier_phi_67_pred_1 = _2686;
                        frontier_phi_67_pred_2 = _2687;
                        frontier_phi_67_pred_3 = _2684;
                        frontier_phi_67_pred_4 = _2683;
                        frontier_phi_67_pred_5 = _2682;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        uint _2901 = _2697;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2971;
                        vec4 _2987;
                        float _3034;
                        bool _3035;
                        for (;;)
                        {
                            uint _2912 = ((_2688 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2958 = (_2912 * 40u) + 16u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2912 * 40u) + 20u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2990 = (_2912 * 40u) + 24u;
                            vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3009 = (_2912 * 40u) + 28u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            _3034 = fma(_2285, _3022.z, fma(_2284, _3022.y, _3022.x * _2283)) + _3022.w;
                            _3035 = !((fma(_2285, _3003.z, fma(_2284, _3003.y, _3003.x * _2283)) + _3003.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3035)
                            {
                                float _3062 = _2927.x - _2283;
                                float _3063 = _2927.y - _2284;
                                float _3064 = _2927.z - _2285;
                                float _3065 = dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064));
                                float _3068 = inversesqrt(_3065);
                                float _3069 = _3068 * _3062;
                                float _3070 = _3068 * _3063;
                                float _3071 = _3068 * _3064;
                                float _3075 = 1.0 - (_3065 / (_2928 * _2928));
                                float _4122 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3080 = sqrt(_3065) * _2943.w;
                                float _3082 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                                float _3083 = _3082 * _3082;
                                float _3086 = ((1.0 - _3083) * dot(vec3(_3069, _3070, _3071), vec3(_519, _522, _525))) + _3083;
                                float _3089 = _3080 * _3080;
                                float _3093 = (fma(_2285, _2971.z, fma(_2284, _2971.y, _2971.x * _2283)) + _2971.w) / _3034;
                                float _3094 = (fma(_2285, _2987.z, fma(_2284, _2987.y, _2987.x * _2283)) + _2987.w) / _3034;
                                float _3098 = 1.0 - dot(vec2(_3093, _3094), vec2(_3093, _3094));
                                float _4138 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3100 = _3099 * (((isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))) * _3076) / ((_3089 * 0.699999988079071044921875) + 1.0));
                                float _3112 = exp2(log2(1.0 / ((_3089 * 3.5) + 5.0)) * 0.25);
                                float _3113 = 1.0 - _594;
                                float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                                float _3121 = _3120 * _3120;
                                float _3122 = _3121 * _3121;
                                float _3123 = _3069 - _2569;
                                float _3124 = _3070 - _2570;
                                float _3125 = _3071 - _2571;
                                float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                                float _3133 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2569, (-0.0) - _2570, (-0.0) - _2571));
                                float _4149 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3137 = dot(vec3(_519, _522, _525), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                                float _4160 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3140 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                                float _3145 = _3082 * _3121;
                                float _3146 = _3145 * _3145;
                                float _3152 = ((1.0 - _3146) * dot(vec3(_519, _522, _525), vec3(_3069, _3070, _3071))) + _3146;
                                float _4171 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3154 = 1.0 - _3121;
                                float _3164 = (0.5 / (((_3153 * ((_3136 * _3154) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3121) * _3136))) * _3153;
                                float _4182 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3174 = (_3099 * _3076) * (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) / ((_3144 * _3144) * ((_3089 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3174 * _2955.x;
                                frontier_phi_73_pred_1 = _3174 * _2955.y;
                                frontier_phi_73_pred_2 = _3100 * _2943.z;
                                frontier_phi_73_pred_3 = _3100 * _2943.y;
                                frontier_phi_73_pred_4 = _3100 * _2943.x;
                                frontier_phi_73_pred_5 = _3174 * _2955.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3178 = frontier_phi_73_pred;
                            _3179 = frontier_phi_73_pred_1;
                            _3183 = frontier_phi_73_pred_2;
                            _3182 = frontier_phi_73_pred_3;
                            _3181 = frontier_phi_73_pred_4;
                            _3180 = frontier_phi_73_pred_5;
                            _2885 = _3181 + _2898;
                            _2886 = _3182 + _2899;
                            _2887 = _3183 + _2900;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2885;
                        frontier_phi_67_pred_1 = _2886;
                        frontier_phi_67_pred_2 = _2887;
                        frontier_phi_67_pred_3 = _2884;
                        frontier_phi_67_pred_4 = _2883;
                        frontier_phi_67_pred_5 = _2882;
                    }
                    _2550 = frontier_phi_67_pred;
                    _2552 = frontier_phi_67_pred_1;
                    _2554 = frontier_phi_67_pred_2;
                    _2548 = frontier_phi_67_pred_3;
                    _2546 = frontier_phi_67_pred_4;
                    _2544 = frontier_phi_67_pred_5;
                    uint _2689 = _2688 + 1u;
                    if (_2689 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2682 = _2544;
                        _2683 = _2546;
                        _2684 = _2548;
                        _2685 = _2550;
                        _2686 = _2552;
                        _2687 = _2554;
                        _2688 = _2689;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2552;
                frontier_phi_55_56_ladder_1 = _2554;
                frontier_phi_55_56_ladder_2 = _2550;
                frontier_phi_55_56_ladder_3 = _2548;
                frontier_phi_55_56_ladder_4 = _2546;
                frontier_phi_55_56_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_55_56_ladder = _2438;
                frontier_phi_55_56_ladder_1 = _2440;
                frontier_phi_55_56_ladder_2 = _2436;
                frontier_phi_55_56_ladder_3 = _2434;
                frontier_phi_55_56_ladder_4 = _2432;
                frontier_phi_55_56_ladder_5 = _2430;
            }
            _2543 = frontier_phi_55_56_ladder_5;
            _2545 = frontier_phi_55_56_ladder_4;
            _2547 = frontier_phi_55_56_ladder_3;
            _2549 = frontier_phi_55_56_ladder_2;
            _2551 = frontier_phi_55_56_ladder;
            _2553 = frontier_phi_55_56_ladder_1;
        }
        float _2558 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _2342 = (_2558 * _2549) + _1775;
        _2344 = (_2558 * _2551) + _1777;
        _2346 = (_2558 * _2553) + _1779;
        _2348 = ((_2543 * _563) * _2558) + _2123;
        _2350 = ((_2545 * _565) * _2558) + _2125;
        _2352 = ((_2547 * _566) * _2558) + _2127;
    }
    else
    {
        _2342 = _1775;
        _2344 = _1777;
        _2346 = _1779;
        _2348 = _2123;
        _2350 = _2125;
        _2352 = _2127;
    }
    float _4198 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4209 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4220 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    uint _2372 = _538 + 6u;
    float _2380 = _498 / cbSceneParam._m0[86u].x;
    float _2381 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2455 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2456 = _2455 / _432;
        float _2467 = _2456 * _483;
        float _2468 = _484 * _2456;
        float _2469 = (-0.0) - _2468;
        float _2471 = _2456 * _485;
        float _2473 = (cbSceneParam._m0[77u].w * _2469) / _2455;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2468;
        float _2481 = sqrt(((_2467 * _2467) + (_2468 * _2468)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2455)) * _2481;
        float _2489 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2491 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2644;
        if (abs((_2469 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2644 = ((((_2474 > 0.0) ? exp2(_2489 * _2474) : (2.0 - exp2(_2491 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2604 = 1.0 / cbSceneParam._m0[80u].x;
            float _2605 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2606 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            float _2616 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : min(_2606, 0.0));
            _2644 = ((abs(_2481 / _2469) * cbSceneParam._m0[80u].y) * ((((_2615 - _2616) * 2.0) - ((exp2(_2489 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0)))) - exp2(_2489 * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0))))) * _2604)) - ((exp2(_2491 * _2615) - exp2(_2491 * _2616)) * _2604))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2646 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2655 = exp2((_2644 * (-1.44269502162933349609375)) * (1.0 - _2646.w));
        float _2656 = log2(_2655);
        float _2672 = log2(_2400);
        _2493 = (exp2(_2672 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].x)) * _2646.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2495 = (exp2(_2672 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].y)) * _2646.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2497 = (exp2(_2672 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].z)) * _2646.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2499 = _2655 * _2400;
    }
    else
    {
        _2493 = _2397;
        _2495 = _2398;
        _2497 = _2399;
        _2499 = _2400;
    }
    float _2511 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2512 = _2511 == 3.0;
    float _2513 = log2(_2499);
    float _2520 = exp2(_2513 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2342 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _578))) + ((_2348 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1388)) * cbPerFrame._m0[3u].x));
    float _2521 = exp2(_2513 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2344 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _578))) + ((_2350 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1388)) * cbPerFrame._m0[3u].x));
    float _2522 = exp2(_2513 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2346 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _578))) + ((_2352 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1388)) * cbPerFrame._m0[3u].x));
    float _2531 = (_2511 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2531 * (_2512 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2493)));
    SV_Target.y = _2531 * (_2512 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2495)));
    SV_Target.z = _2531 * (_2512 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2497)));
    SV_Target.w = cbInstanceData._m0[_2372].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
}


