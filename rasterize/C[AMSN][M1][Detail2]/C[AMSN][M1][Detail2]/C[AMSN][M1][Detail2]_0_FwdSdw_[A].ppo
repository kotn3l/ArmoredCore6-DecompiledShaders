#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _999;
float _3671;
float _3672;
float _3673;
float _3674;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _307 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3683 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[10u].x) - _251)) + _251;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[10u].y) - _252)) + _252;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[10u].z) - _253)) + _253;
    vec4 _329 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _331 = _329.x;
    float _333 = _331 - (_331 * TEXCOORD_5.x);
    vec4 _350 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _358 = (_350.x * 2.0) + (-1.0);
    float _360 = (_350.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_358, _360), vec2(_358, _360));
    float _3694 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))));
    float _367 = _350.z * cbMtdParam._m0[13u].y;
    vec4 _380 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _394 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_380.z * cbMtdParam._m0[13u].x) - _367)) + _367;
    float _400 = ((((_380.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _358;
    float _401 = ((((_380.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _360;
    float _404 = fma(_366, _215 * NORMAL.x, fma(_401, _222 * TANGENT.x, (_208 * _200) * _400));
    float _407 = fma(_366, _215 * NORMAL.y, fma(_401, _222 * TANGENT.y, (_208 * _201) * _400));
    float _410 = fma(_366, _215 * NORMAL.z, fma(_401, _222 * TANGENT.z, (_208 * _202) * _400));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3705 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _418 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3727 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3738 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3749 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _422 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _438 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _489 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _479);
    float _490 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _479);
    float _491 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _479);
    float _495 = inversesqrt(dot(vec3(_489, _490, _491), vec3(_489, _490, _491)));
    float _496 = _489 * _495;
    float _497 = _490 * _495;
    float _498 = _491 * _495;
    vec4 _503 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _505 = _503.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _679 = sqrt(((_489 * _489) + (_490 * _490)) + (_491 * _491));
        float _685 = (cbMatDynParam._m0[5u].x * _679) + cbMatDynParam._m0[5u].y;
        float _3760 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _690 = (cbMatDynParam._m0[5u].z * _679) + cbMatDynParam._m0[5u].w;
        float _3771 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) - _686)) + _686) < ((_505 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _540 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _543 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _557 = _556 + 9u;
    uint _558 = _557 + uint(cbMatDynParam._m0[0u].w);
    float _564 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_558].x;
    float _565 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_558].y;
    float _566 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_558].z;
    float _3782 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _570 = 1.0 - _422;
    float _571 = _567 * _570;
    float _572 = _568 * _570;
    float _573 = _569 * _570;
    float _578 = (_567 + (-0.039999999105930328369140625)) * _422;
    float _579 = (_568 + (-0.039999999105930328369140625)) * _422;
    float _580 = (_569 + (-0.039999999105930328369140625)) * _422;
    float _581 = _578 + 0.039999999105930328369140625;
    float _583 = _579 + 0.039999999105930328369140625;
    float _584 = _580 + 0.039999999105930328369140625;
    vec4 _593 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _596 = _593.x * TEXCOORD_5.w;
    float _597 = dot(vec3(_415, _416, _417), vec3(_496, _497, _498));
    float _600 = _597 * 2.0;
    float _604 = (_600 * _415) - _496;
    float _605 = (_600 * _416) - _497;
    float _606 = (_600 * _417) - _498;
    float _610 = abs(dot(vec3(_496, _497, _498), vec3(_415, _416, _417)));
    float _3815 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = sqrt(_418);
    float _625 = exp2((_612 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_612 * 3.0));
    float _631 = (1.0 - _625) * ((_612 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _632 = _625 * _612;
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _998;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = fma(_668, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660));
        float _727 = fma(_668, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660));
        float _731 = fma(_668, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660));
        float _756 = _660 + _415;
        float _757 = _664 + _416;
        float _758 = _668 + _417;
        float _768 = fma(_758, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) - _723;
        float _769 = fma(_758, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) - _727;
        float _770 = fma(_758, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) - _731;
        float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
        float _787 = ((_774 * _768) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_723 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_774 * _769) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_727 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_774 * _770) / cbModelParam._m0[34u].z) + ((((((_731 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        float _826 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_792.x + (-0.5));
        float _828 = _826 * (_792.y + (-0.5));
        float _829 = _826 * (_792.z + (-0.5));
        float _836 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_799.x + (-0.5));
        float _838 = _836 * (_799.y + (-0.5));
        float _839 = _836 * (_799.z + (-0.5));
        float _846 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_806.x + (-0.5));
        float _848 = _846 * (_806.y + (-0.5));
        float _849 = _846 * (_806.z + (-0.5));
        float _856 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_813.x + (-0.5));
        float _858 = _856 * (_813.y + (-0.5));
        float _859 = _856 * (_813.z + (-0.5));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = _827 * 0.5;
        float _864 = _837 * 0.5;
        float _865 = _847 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _880 = (dot(vec3(_415, _416, _417), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _890 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3863 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_892 + 1.0))) + _897) * _860;
        float _907 = _828 * 0.5;
        float _908 = _838 * 0.5;
        float _909 = _848 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_415, _416, _417), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3896 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_934 + 1.0))) + _939) * _861;
        float _949 = _829 * 0.5;
        float _950 = _839 * 0.5;
        float _951 = _849 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_415, _416, _417), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3929 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_976 + 1.0))) + _981) * _862;
        _998 = _829;
        _1000 = _828;
        _1001 = _827;
        _1002 = _839;
        _1003 = _838;
        _1004 = _837;
        _1005 = _849;
        _1006 = _848;
        _1007 = _847;
        _1008 = _862;
        _1009 = _861;
        _1010 = _860;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = _999;
        _1000 = _999;
        _1001 = _999;
        _1002 = _999;
        _1003 = _999;
        _1004 = _999;
        _1005 = _999;
        _1006 = _999;
        _1007 = _999;
        _1008 = _999;
        _1009 = _999;
        _1010 = _999;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1042 = fma(_668, cbModelParam._m0[30u].z, fma(_664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _660));
        float _1046 = fma(_668, cbModelParam._m0[31u].z, fma(_664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _660));
        float _1050 = fma(_668, cbModelParam._m0[32u].z, fma(_664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _660));
        float _1073 = _660 + _415;
        float _1074 = _664 + _416;
        float _1075 = _668 + _417;
        float _1085 = fma(_1075, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073)) - _1042;
        float _1086 = fma(_1075, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073)) - _1046;
        float _1087 = fma(_1075, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073)) - _1050;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1042 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1046 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[35u].z) + ((((((_1050 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1108.x + (-0.5));
        float _1143 = _1141 * (_1108.y + (-0.5));
        float _1144 = _1141 * (_1108.z + (-0.5));
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1115.x + (-0.5));
        float _1153 = _1151 * (_1115.y + (-0.5));
        float _1154 = _1151 * (_1115.z + (-0.5));
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1122.x + (-0.5));
        float _1163 = _1161 * (_1122.y + (-0.5));
        float _1164 = _1161 * (_1122.z + (-0.5));
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_415, _416, _417), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3992 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1205 + 1.0))) + _1210) * _1175;
        float _1220 = _1143 * 0.5;
        float _1221 = _1153 * 0.5;
        float _1222 = _1163 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_415, _416, _417), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4025 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1247 + 1.0))) + _1252) * _1176;
        float _1262 = _1144 * 0.5;
        float _1263 = _1154 * 0.5;
        float _1264 = _1164 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_415, _416, _417), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4058 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1289 + 1.0))) + _1294) * _1177;
        _1311 = _1144;
        _1312 = _1143;
        _1313 = _1142;
        _1314 = _1154;
        _1315 = _1153;
        _1316 = _1152;
        _1317 = _1164;
        _1318 = _1163;
        _1319 = _1162;
        _1320 = _1177;
        _1321 = _1176;
        _1322 = _1175;
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _999;
        _1312 = _999;
        _1313 = _999;
        _1314 = _999;
        _1315 = _999;
        _1316 = _999;
        _1317 = _999;
        _1318 = _999;
        _1319 = _999;
        _1320 = _999;
        _1321 = _999;
        _1322 = _999;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1011)) + _1011;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1012)) + _1012;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1013)) + _1013;
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1335));
    float _1379 = _604 * 0.5;
    float _1380 = _605 * 0.5;
    float _1381 = _606 * 0.5;
    float _1382 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1385 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1388 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1422;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1395 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_998, _1002, _1005, _1008));
        float _1399 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1403 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1410 = dot(vec4(cbModelParam._m0[39u]), vec4(_1379, _1380, _1381, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1433;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1424 = dot(vec4(cbModelParam._m0[40u]), vec4(_1379, _1380, _1381, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1437 = (_1433 * cbModelParam._m0[1u].x) + (_1422 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1447 : min(cbModelParam._m0[25u].z, _1447));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_668, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_668, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_668, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1510 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1513 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1541 = frontier_phi_17_15_ladder;
        }
        float _1716;
        if (_1510 > 0.0)
        {
            _1716 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1716 = frontier_phi_26_22_ladder;
        }
        float _2012;
        if (_1513 > 0.0)
        {
            _2012 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2012 = frontier_phi_38_33_ladder;
        }
        float _2014 = isnan(_1716) ? _1541 : (isnan(_1541) ? _1716 : min(_1541, _1716));
        float _2015 = isnan(_2012) ? _2014 : (isnan(_2014) ? _2012 : min(_2014, _2012));
        float _2019 = (_2015 * _1507) + _1496;
        float _2020 = (_2015 * _1510) + _1500;
        float _2021 = (_2015 * _1513) + _1504;
        float _2022 = _2015 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2022;
        float _2026 = _2022 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 > _2026) || ((_2020 < _2024) || ((_2019 < _2024) || (_2019 > _2026))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2166 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2021, cbModelParam._m0[9u].z, fma(_2020, cbModelParam._m0[9u].y, _2019 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2021, cbModelParam._m0[10u].z, fma(_2020, cbModelParam._m0[10u].y, _2019 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2021, cbModelParam._m0[11u].z, fma(_2020, cbModelParam._m0[11u].y, _2019 * cbModelParam._m0[11u].x))), _1448);
            frontier_phi_16_38_ladder = _2166.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2166.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2166.x * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_16_38_ladder_2;
        _1531 = frontier_phi_16_38_ladder_1;
        _1533 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1448);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_668, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_668, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_668, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1609 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1612 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1721;
        if (_1606 > 0.0)
        {
            _1721 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1721 = frontier_phi_28_24_ladder;
        }
        float _2039;
        if (_1609 > 0.0)
        {
            _2039 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2039 = frontier_phi_40_35_ladder;
        }
        float _2377;
        if (_1612 > 0.0)
        {
            _2377 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2377 = frontier_phi_50_47_ladder;
        }
        float _2379 = isnan(_2039) ? _1721 : (isnan(_1721) ? _2039 : min(_1721, _2039));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1606) + _1595;
        float _2385 = (_2380 * _1609) + _1599;
        float _2386 = (_2380 * _1612) + _1603;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_25_50_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_25_50_ladder_2;
        _1633 = frontier_phi_25_50_ladder_1;
        _1635 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1538);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1648 = (((_631 * _581) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1650 = (((_631 * _583) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1633 - _1531)) + _1531);
    float _1652 = (((_631 * _584) + _632) * _596) * ((cbModelParam._m0[1u].w * (_1635 - _1533)) + _1533);
    float _1655 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1648 * cbSceneParam._m0[91u].x));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1699 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1703 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1707 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1708 = _1695 / _1707;
    float _1709 = _1699 / _1707;
    float _1710 = _1703 / _1707;
    float _1857;
    float _1858;
    float _1859;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1737 = ((uint(_1710 > cbSceneParam._m0[59u].y) + uint(_1710 > cbSceneParam._m0[59u].x)) + uint(_1710 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1738 = _1737 + 43u;
        uint _1746 = _1737 + 44u;
        uint _1754 = _1737 + 45u;
        uint _1762 = _1737 + 46u;
        float _1773 = fma(_1707, cbSceneParam._m0[_1738].w, fma(_1703, cbSceneParam._m0[_1738].z, fma(_1699, cbSceneParam._m0[_1738].y, _1695 * cbSceneParam._m0[_1738].x)));
        float _1777 = fma(_1707, cbSceneParam._m0[_1746].w, fma(_1703, cbSceneParam._m0[_1746].z, fma(_1699, cbSceneParam._m0[_1746].y, _1695 * cbSceneParam._m0[_1746].x)));
        float _1785 = fma(_1707, cbSceneParam._m0[_1762].w, fma(_1703, cbSceneParam._m0[_1762].z, fma(_1699, cbSceneParam._m0[_1762].y, _1695 * cbSceneParam._m0[_1762].x)));
        float _1790 = cbSceneParam._m0[33u].z * _1785;
        float _1792 = cbSceneParam._m0[33u].w * _1785;
        float _1795 = fma(_1707, cbSceneParam._m0[_1754].w, fma(_1703, cbSceneParam._m0[_1754].z, fma(_1699, cbSceneParam._m0[_1754].y, _1695 * cbSceneParam._m0[_1754].x))) / _1785;
        float _1843 = (cbSceneParam._m0[33u].x - sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710))) * cbSceneParam._m0[33u].y;
        float _4184 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1850 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 + _1773) / _1785, (_1792 + _1777) / _1785), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 + _1773) / _1785, (_1777 - _1790) / _1785), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1773 - _1790) / _1785, (_1777 - _1792) / _1785), _1795), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1773 - _1792) / _1785, (_1790 + _1777) / _1785), _1795), 0.0)).x), vec4(0.25)));
        _1857 = 1.0 - (_1850 * cbSceneParam._m0[34u].x);
        _1858 = 1.0 - (_1850 * cbSceneParam._m0[34u].y);
        _1859 = 1.0 - (_1850 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1857 = 1.0;
        _1858 = 1.0;
        _1859 = 1.0;
    }
    float _1923;
    float _1925;
    float _1927;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1911 = fma(_1707, cbSceneParam._m0[63u].w, fma(_1703, cbSceneParam._m0[63u].z, fma(_1699, cbSceneParam._m0[63u].y, _1695 * cbSceneParam._m0[63u].x)));
        float _1912 = fma(_1707, cbSceneParam._m0[60u].w, fma(_1703, cbSceneParam._m0[60u].z, fma(_1699, cbSceneParam._m0[60u].y, _1695 * cbSceneParam._m0[60u].x))) / _1911;
        float _1913 = fma(_1707, cbSceneParam._m0[61u].w, fma(_1703, cbSceneParam._m0[61u].z, fma(_1699, cbSceneParam._m0[61u].y, _1695 * cbSceneParam._m0[61u].x))) / _1911;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1912 >= cbSceneParam._m0[64u].x) && (_1913 >= cbSceneParam._m0[64u].y)) && (_1912 <= cbSceneParam._m0[64u].z)) && (_1913 <= cbSceneParam._m0[64u].w))
        {
            float _2052 = fma(_1707, cbSceneParam._m0[62u].w, fma(_1703, cbSceneParam._m0[62u].z, fma(_1699, cbSceneParam._m0[62u].y, _1695 * cbSceneParam._m0[62u].x))) / _1911;
            float _2056 = isnan(cbSceneParam._m0[41u].w) ? _2052 : (isnan(_2052) ? cbSceneParam._m0[41u].w : max(_2052, cbSceneParam._m0[41u].w));
            float _2099 = (cbSceneParam._m0[33u].x - sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710))) * cbSceneParam._m0[33u].y;
            float _4200 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
            float _2106 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1912, cbSceneParam._m0[33u].w + _1913), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1912, _1913 - cbSceneParam._m0[33u].z), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1912 - cbSceneParam._m0[33u].z, _1913 - cbSceneParam._m0[33u].w), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1912 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1913), _2056), 0.0)).x), vec4(0.25)));
            float _2110 = 1.0 - (_2106 * cbSceneParam._m0[34u].x);
            float _2111 = 1.0 - (_2106 * cbSceneParam._m0[34u].y);
            float _2112 = 1.0 - (_2106 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2112) ? _1859 : (isnan(_1859) ? _2112 : min(_1859, _2112));
            frontier_phi_37_36_ladder_1 = isnan(_2111) ? _1858 : (isnan(_1858) ? _2111 : min(_1858, _2111));
            frontier_phi_37_36_ladder_2 = isnan(_2110) ? _1857 : (isnan(_1857) ? _2110 : min(_1857, _2110));
        }
        else
        {
            frontier_phi_37_36_ladder = _1859;
            frontier_phi_37_36_ladder_1 = _1858;
            frontier_phi_37_36_ladder_2 = _1857;
        }
        _1923 = frontier_phi_37_36_ladder_2;
        _1925 = frontier_phi_37_36_ladder_1;
        _1927 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1923 = _1857;
        _1925 = _1858;
        _1927 = _1859;
    }
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1942 = _596 + (-1.0);
    float _1947 = (cbLight._m0[_1935].x * _1942) + 1.0;
    float _1948 = (cbLight._m0[_1935].y * _1942) + 1.0;
    float _1949 = (cbLight._m0[_1935].z * _1942) + 1.0;
    float _1950 = (cbLight._m0[_1935].w * _1942) + 1.0;
    uint _1951 = _1934 + 5u;
    float _1957 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1961 = _1934 + 4u;
    float _1971 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1975 = _1934 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_415, _416, _417));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_415, _416, _417));
    float _4236 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _4247 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1951].x * _1957) * _1996) + (((cbLight._m0[_1961].x * _1923) * _1971) * _1994);
    float _2004 = ((_1957 * cbLight._m0[_1951].y) * _1996) + (((cbLight._m0[_1961].y * _1925) * _1971) * _1994);
    float _2005 = ((_1957 * cbLight._m0[_1951].z) * _1996) + (((cbLight._m0[_1961].z * _1927) * _1971) * _1994);
    uvec4 _2009 = floatBitsToUint(cbLight._m0[_1934 + 12u]);
    bool _2011 = _2009.x == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2011)
    {
        _2113 = _2003;
        _2115 = _2004;
        _2117 = _2005;
    }
    else
    {
        uint _2121 = _1934 + 6u;
        float _2137 = (dot(vec3(cbLight._m0[_1934 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4258 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2140 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2113 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _2003;
        _2115 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _2004;
        _2117 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _2005;
    }
    bool _2120 = _2009.y == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2120)
    {
        _2175 = _2113;
        _2177 = _2115;
        _2179 = _2117;
    }
    else
    {
        uint _2348 = _1934 + 7u;
        float _2364 = (dot(vec3(cbLight._m0[_1934 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4274 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2367 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2175 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2113;
        _2177 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2115;
        _2179 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2117;
    }
    uint _2182 = _1934 + 8u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _418) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_1934].x + _496;
    float _2198 = cbLight._m0[_1934].y + _497;
    float _2199 = cbLight._m0[_1934].z + _498;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1934].xyz));
    float _4290 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _2211 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2212 = dot(vec3(_415, _416, _417), vec3(_2204, _2205, _2206));
    float _4312 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2204, _2205, _2206));
    float _4323 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2196 * _2196;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
    float _2233 = 0.959999978542327880859375 - _578;
    float _2235 = 0.959999978542327880859375 - _579;
    float _2236 = 0.959999978542327880859375 - _580;
    float _2243 = 1.0 - _2196;
    float _2254 = (0.5 / (((_2211 * ((_2210 * _2243) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2243) + _2196) * _2210))) * _2210;
    float _4334 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    uint _2270 = _1934 + 9u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _418) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_1975].x + _496;
    float _2284 = cbLight._m0[_1975].y + _497;
    float _2285 = cbLight._m0[_1975].z + _498;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1975].xyz));
    float _4345 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2297 = dot(vec3(_415, _416, _417), vec3(_2290, _2291, _2292));
    float _4356 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2301 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2290, _2291, _2292));
    float _4367 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2305 = _2282 * _2282;
    float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0);
    float _2323 = 1.0 - _2282;
    float _2333 = (0.5 / (((_2211 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2323) + _2282) * _2296))) * _2296;
    float _4378 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
    float _2345 = (((((_2316 * _2233) + _581) * cbLight._m0[_2270].x) * _2335) * _1957) + ((((cbLight._m0[_2182].x * _1923) * ((_2232 * _2233) + _581)) * _2256) * _1971);
    float _2346 = (((((_2316 * _2235) + _583) * cbLight._m0[_2270].y) * _2335) * _1957) + ((((cbLight._m0[_2182].y * _1925) * ((_2232 * _2235) + _583)) * _2256) * _1971);
    float _2347 = (((((_2316 * _2236) + _584) * cbLight._m0[_2270].z) * _2335) * _1957) + ((((cbLight._m0[_2182].z * _1927) * ((_2232 * _2236) + _584)) * _2256) * _1971);
    float _2403;
    float _2405;
    float _2407;
    if (_2011)
    {
        _2403 = _2345;
        _2405 = _2346;
        _2407 = _2347;
    }
    else
    {
        uint _2409 = _1934 + 2u;
        uint _2413 = _1934 + 10u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _418) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _496;
        float _2430 = cbLight._m0[_2409].y + _497;
        float _2431 = cbLight._m0[_2409].z + _498;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2409].xyz));
        float _4389 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2443 = dot(vec3(_415, _416, _417), vec3(_2436, _2437, _2438));
        float _4400 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4411 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0);
        float _2469 = 1.0 - _2428;
        float _2479 = (0.5 / (((_2211 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2469) + _2428) * _2442))) * _2442;
        float _4422 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2403 = (((((_2462 * _2233) + _581) * cbLight._m0[_2413].x) * _2481) * _2482) + _2345;
        _2405 = (((((_2462 * _2235) + _583) * cbLight._m0[_2413].y) * _2481) * _2482) + _2346;
        _2407 = (((((_2462 * _2236) + _584) * cbLight._m0[_2413].z) * _2481) * _2482) + _2347;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2120)
    {
        _2513 = _2403;
        _2515 = _2405;
        _2517 = _2407;
    }
    else
    {
        uint _2524 = _1934 + 3u;
        uint _2528 = _1934 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _418) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _496;
        float _2545 = cbLight._m0[_2524].y + _497;
        float _2546 = cbLight._m0[_2524].z + _498;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2524].xyz));
        float _4438 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2558 = dot(vec3(_415, _416, _417), vec3(_2551, _2552, _2553));
        float _4449 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4460 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
        float _2584 = 1.0 - _2543;
        float _2594 = (0.5 / (((_2211 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2584) + _2543) * _2557))) * _2557;
        float _4471 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2596 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2597 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2513 = (((((_2577 * _2233) + _581) * cbLight._m0[_2528].x) * _2596) * _2597) + _2403;
        _2515 = (((((_2577 * _2235) + _583) * cbLight._m0[_2528].y) * _2596) * _2597) + _2405;
        _2517 = (((((_2577 * _2236) + _584) * cbLight._m0[_2528].z) * _2596) * _2597) + _2407;
    }
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_1932.y == 0u)
    {
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.x;
        uint _2630 = uint((float(_2618.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2619))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2619)));
        float _2640 = (log2(_1710 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        uint _2644 = uint(isnan(14.0) ? _2641 : (isnan(_2641) ? 14.0 : min(_2641, 14.0)));
        uvec4 _2649 = texelFetch(g_lightClusterGridBuffer, int(((_2644 << 2u) + (_2630 << 6u)) >> 2u));
        uint _2650 = _2649.x;
        uint _2651 = _2618.z;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((((1u << ((_2651 >> 4u) & 15u)) + 4294967295u) & _2650) == 0u) || ((_2651 & 240u) == 0u))
        {
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
        }
        else
        {
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2899)
                {
                    frontier_phi_71_pred = _2888;
                    frontier_phi_71_pred_1 = _2887;
                    frontier_phi_71_pred_2 = _2886;
                    frontier_phi_71_pred_3 = _2885;
                    frontier_phi_71_pred_4 = _2884;
                    frontier_phi_71_pred_5 = _2883;
                }
                else
                {
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    uint _3034;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2898;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3038 = uint(findLSB(_3034)) + (_2889 << 5u);
                        uint _3035 = (_3034 + 4294967295u) & _3034;
                        uint _3040 = _3038 * 48u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3060 = (_3038 * 48u) + 4u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3079 = (_3038 * 48u) + 8u;
                        vec3 _3090 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x));
                        float _3094 = _3054.x - _1708;
                        float _3095 = _3054.y - _1709;
                        float _3096 = _3054.z - _1710;
                        float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                        float _3100 = inversesqrt(_3097);
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3104 = dot(vec3(_537, _540, _543), vec3(_3101, _3102, _3103));
                        float _3109 = 1.0 - (_3097 * _3054.w);
                        float _4497 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3111 = sqrt(_3097) * _3073.w;
                        float _3114 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3104) + _3115;
                        float _3121 = _3111 * _3111;
                        float _3125 = ((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3110) / ((_3121 * 0.699999988079071044921875) + 1.0);
                        float _3129 = (-0.0) - _1708;
                        float _3130 = (-0.0) - _1709;
                        float _3131 = (-0.0) - _1710;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3145 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                        float _3146 = 1.0 - _612;
                        float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                        float _3154 = _3153 * _3153;
                        float _3155 = _3154 * _3154;
                        float _3156 = _3136 + _3101;
                        float _3157 = _3137 + _3102;
                        float _3158 = _3138 + _3103;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3166 = dot(vec3(_537, _540, _543), vec3(_3136, _3137, _3138));
                        float _4513 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3170 = dot(vec3(_537, _540, _543), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                        float _4524 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                        float _3178 = _3114 * _3154;
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3104) + _3179;
                        float _4535 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3184 = 1.0 - _3154;
                        float _3194 = (0.5 / (((_3183 * ((_3169 * _3184) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3154) * _3169))) * _3183;
                        float _4546 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3205 = (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3177 * _3177) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125))) * _3110;
                        _2958 = (_3125 * _3073.x) + _3031;
                        _2959 = (_3125 * _3073.y) + _3032;
                        _2960 = (_3125 * _3073.z) + _3033;
                        _2955 = (_3205 * _3090.x) + _3028;
                        _2956 = (_3205 * _3090.y) + _3029;
                        _2957 = (_3205 * _3090.z) + _3030;
                        if (_3035 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _3035;
                        }
                    }
                    frontier_phi_71_pred = _2960;
                    frontier_phi_71_pred_1 = _2959;
                    frontier_phi_71_pred_2 = _2958;
                    frontier_phi_71_pred_3 = _2957;
                    frontier_phi_71_pred_4 = _2956;
                    frontier_phi_71_pred_5 = _2955;
                }
                _2741 = frontier_phi_71_pred;
                _2739 = frontier_phi_71_pred_1;
                _2737 = frontier_phi_71_pred_2;
                _2735 = frontier_phi_71_pred_3;
                _2733 = frontier_phi_71_pred_4;
                _2731 = frontier_phi_71_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2731;
                    _2884 = _2733;
                    _2885 = _2735;
                    _2886 = _2737;
                    _2887 = _2739;
                    _2888 = _2741;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
        }
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.z;
        uint _2747 = (_2745 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2747) & _2650) == 0u)
        {
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
            float _2877 = _2876 * _1708;
            float _2878 = _2876 * _1709;
            float _2879 = _2876 * _1710;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2747 < ((_2745 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _3011 = _2730;
                float _3012 = _2732;
                float _3013 = _2734;
                float _3014 = _2736;
                float _3015 = _2738;
                float _3016 = _2740;
                uint _3017 = _2747;
                uint _3026;
                bool _3027;
                for (;;)
                {
                    _3026 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                    _3027 = _3026 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3027)
                    {
                        frontier_phi_82_pred = _3016;
                        frontier_phi_82_pred_1 = _3015;
                        frontier_phi_82_pred_2 = _3014;
                        frontier_phi_82_pred_3 = _3013;
                        frontier_phi_82_pred_4 = _3012;
                        frontier_phi_82_pred_5 = _3011;
                    }
                    else
                    {
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3232 = _3011;
                        float _3233 = _3012;
                        float _3234 = _3013;
                        float _3235 = _3014;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        uint _3238 = _3026;
                        uint _3239;
                        vec4 _3264;
                        float _3265;
                        vec4 _3280;
                        vec3 _3292;
                        vec4 _3308;
                        vec4 _3324;
                        float _3371;
                        bool _3372;
                        for (;;)
                        {
                            uint _3249 = ((_3017 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3238));
                            _3239 = (_3238 + 4294967295u) & _3238;
                            uint _3251 = _3249 * 40u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3265 = _3264.w;
                            uint _3267 = (_3249 * 40u) + 4u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3249 * 40u) + 8u;
                            _3292 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x));
                            uint _3295 = (_3249 * 40u) + 16u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3311 = (_3249 * 40u) + 20u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3249 * 40u) + 24u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3346 = (_3249 * 40u) + 28u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3371 = fma(_1710, _3359.z, fma(_1709, _3359.y, _3359.x * _1708)) + _3359.w;
                            _3372 = !((fma(_1710, _3340.z, fma(_1709, _3340.y, _3340.x * _1708)) + _3340.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3372)
                            {
                                float _3399 = _3264.x - _1708;
                                float _3400 = _3264.y - _1709;
                                float _3401 = _3264.z - _1710;
                                float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                                float _3405 = inversesqrt(_3402);
                                float _3406 = _3405 * _3399;
                                float _3407 = _3405 * _3400;
                                float _3408 = _3405 * _3401;
                                float _3412 = 1.0 - (_3402 / (_3265 * _3265));
                                float _4557 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3417 = sqrt(_3402) * _3280.w;
                                float _3419 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                                float _3420 = _3419 * _3419;
                                float _3423 = ((1.0 - _3420) * dot(vec3(_3406, _3407, _3408), vec3(_537, _540, _543))) + _3420;
                                float _3426 = _3417 * _3417;
                                float _3430 = (fma(_1710, _3308.z, fma(_1709, _3308.y, _3308.x * _1708)) + _3308.w) / _3371;
                                float _3431 = (fma(_1710, _3324.z, fma(_1709, _3324.y, _3324.x * _1708)) + _3324.w) / _3371;
                                float _3435 = 1.0 - dot(vec2(_3430, _3431), vec2(_3430, _3431));
                                float _4573 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3437 = _3436 * (((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3413) / ((_3426 * 0.699999988079071044921875) + 1.0));
                                float _3449 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                                float _3450 = 1.0 - _612;
                                float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                                float _3458 = _3457 * _3457;
                                float _3459 = _3458 * _3458;
                                float _3460 = _3406 - _2877;
                                float _3461 = _3407 - _2878;
                                float _3462 = _3408 - _2879;
                                float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                                float _3470 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4584 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3474 = dot(vec3(_537, _540, _543), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                                float _4595 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                                float _3482 = _3419 * _3458;
                                float _3483 = _3482 * _3482;
                                float _3489 = ((1.0 - _3483) * dot(vec3(_537, _540, _543), vec3(_3406, _3407, _3408))) + _3483;
                                float _4606 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3491 = 1.0 - _3458;
                                float _3501 = (0.5 / (((_3490 * ((_3473 * _3491) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3458) * _3473))) * _3490;
                                float _4617 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3511 = (_3436 * _3413) * (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3481 * _3481) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3437 * _3280.z;
                                frontier_phi_88_pred_1 = _3437 * _3280.y;
                                frontier_phi_88_pred_2 = _3437 * _3280.x;
                                frontier_phi_88_pred_3 = _3511 * _3292.z;
                                frontier_phi_88_pred_4 = _3511 * _3292.y;
                                frontier_phi_88_pred_5 = _3511 * _3292.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3520 = frontier_phi_88_pred;
                            _3519 = frontier_phi_88_pred_1;
                            _3518 = frontier_phi_88_pred_2;
                            _3517 = frontier_phi_88_pred_3;
                            _3516 = frontier_phi_88_pred_4;
                            _3515 = frontier_phi_88_pred_5;
                            _3222 = _3518 + _3235;
                            _3223 = _3519 + _3236;
                            _3224 = _3520 + _3237;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3221 = _3517 + _3234;
                            if (_3239 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3239;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3224;
                        frontier_phi_82_pred_1 = _3223;
                        frontier_phi_82_pred_2 = _3222;
                        frontier_phi_82_pred_3 = _3221;
                        frontier_phi_82_pred_4 = _3220;
                        frontier_phi_82_pred_5 = _3219;
                    }
                    _2862 = frontier_phi_82_pred;
                    _2860 = frontier_phi_82_pred_1;
                    _2858 = frontier_phi_82_pred_2;
                    _2856 = frontier_phi_82_pred_3;
                    _2854 = frontier_phi_82_pred_4;
                    _2852 = frontier_phi_82_pred_5;
                    uint _3018 = _3017 + 1u;
                    if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3011 = _2852;
                        _3012 = _2854;
                        _3013 = _2856;
                        _3014 = _2858;
                        _3015 = _2860;
                        _3016 = _2862;
                        _3017 = _3018;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2858;
                frontier_phi_63_64_ladder_1 = _2862;
                frontier_phi_63_64_ladder_2 = _2860;
                frontier_phi_63_64_ladder_3 = _2856;
                frontier_phi_63_64_ladder_4 = _2854;
                frontier_phi_63_64_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_63_64_ladder = _2736;
                frontier_phi_63_64_ladder_1 = _2740;
                frontier_phi_63_64_ladder_2 = _2738;
                frontier_phi_63_64_ladder_3 = _2734;
                frontier_phi_63_64_ladder_4 = _2732;
                frontier_phi_63_64_ladder_5 = _2730;
            }
            _2851 = frontier_phi_63_64_ladder_5;
            _2853 = frontier_phi_63_64_ladder_4;
            _2855 = frontier_phi_63_64_ladder_3;
            _2857 = frontier_phi_63_64_ladder;
            _2859 = frontier_phi_63_64_ladder_2;
            _2861 = frontier_phi_63_64_ladder_1;
        }
        float _2866 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _2663 = (_2866 * _2857) + _2175;
        _2665 = (_2866 * _2859) + _2177;
        _2667 = (_2866 * _2861) + _2179;
        _2669 = ((_2851 * _581) * _2866) + _2513;
        _2671 = ((_2853 * _583) * _2866) + _2515;
        _2673 = ((_2855 * _584) * _2866) + _2517;
    }
    else
    {
        _2663 = _2175;
        _2665 = _2177;
        _2667 = _2179;
        _2669 = _2513;
        _2671 = _2515;
        _2673 = _2517;
    }
    float _4633 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4644 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4655 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _2690 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2663 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _596))) + ((_2669 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2691 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2665 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _596))) + ((_2671 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    float _2692 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2667 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _596))) + ((_2673 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1437)) * cbPerFrame._m0[3u].x);
    uint _2693 = _556 + 6u;
    float _2701 = _517 / cbSceneParam._m0[86u].x;
    float _2702 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2716 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, (log2((isnan(cbSceneParam._m0[77u].w) ? _438 : (isnan(_438) ? cbSceneParam._m0[77u].w : min(_438, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2718 = _2716.x;
    float _2719 = _2716.y;
    float _2720 = _2716.z;
    float _2721 = _2716.w;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_438 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_438) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _438 : min(cbSceneParam._m0[80u].w, _438));
        float _2756 = _2755 / _438;
        float _2767 = _2756 * _489;
        float _2768 = _490 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2771 = _2756 * _491;
        float _2773 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2774 = _2773 + cbSceneParam._m0[79u].w;
        float _2775 = cbSceneParam._m0[79u].w - _2768;
        float _2781 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2771 * _2771));
        float _2784 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2781;
        float _2789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2769 - _2773) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2774 > 0.0) ? exp2(_2789 * _2774) : (2.0 - exp2(_2791 * _2774))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2784;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : max(_2774, _2775));
            float _2914 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : min(_2774, _2775));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2968 = ((abs(_2781 / _2769) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2789 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2789 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2791 * _2923) - exp2(_2791 * _2924)) * _2912))) + (_2784 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2721);
        _2793 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2718;
        _2795 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2719;
        _2797 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2720;
        _2799 = _2979 * _2721;
    }
    else
    {
        _2793 = _2718;
        _2795 = _2719;
        _2797 = _2720;
        _2799 = _2721;
    }
    bool _3006;
    vec4 _2809;
    vec4 _2831;
    float _2833;
    float _2837;
    float _2838;
    float _2839;
    float _2840;
    bool _2850;
    for (;;)
    {
        _2809 = cbMatDynParam._m0[0u];
        float _2811 = roundEven(_2809.y);
        bool _2812 = _2811 == 3.0;
        float _2813 = log2(_2799);
        float _2820 = exp2(_2813 * cbSceneParam._m0[78u].x) * _2690;
        float _2821 = exp2(_2813 * cbSceneParam._m0[78u].y) * _2691;
        float _2822 = exp2(_2813 * cbSceneParam._m0[78u].z) * _2692;
        float _2829 = _505 + (-0.5);
        _2831 = cbMtdParam._m0[1u];
        _2833 = _2831.y * _2829;
        float _2836 = (_2811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2837 = _2836 * (_2812 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2793)));
        _2838 = _2836 * (_2812 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2795)));
        _2839 = _2836 * (_2812 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2797)));
        _2840 = _2829 * 0.999000012874603271484375;
        _2850 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2850)
        {
            if ((cbInstanceData._m0[_556 + 7u].x + _2840) < 0.5)
            {
                _3006 = true;
                break;
            }
        }
        uint _2947 = _557 + uint(_2809.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2840) < 0.5))
        {
            _3006 = true;
            break;
        }
        if ((_2833 + 1.0) < _2831.x)
        {
            _3006 = true;
            break;
        }
        _3006 = false;
        break;
    }
    float _3210;
    if (_3006)
    {
        discard_state = true;
        _3210 = 0.0;
    }
    else
    {
        _3210 = cbInstanceData._m0[_2693].w;
    }
    SV_Target.x = _2837;
    SV_Target.y = _2838;
    SV_Target.z = _2839;
    SV_Target.w = _3210;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2693].w;
    discard_exit();
}


