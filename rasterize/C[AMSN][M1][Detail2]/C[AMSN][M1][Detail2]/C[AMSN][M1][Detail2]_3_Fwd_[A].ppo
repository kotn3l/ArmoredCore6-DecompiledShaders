#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _850;
float _3219;
float _3220;
float _3221;
float _3222;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _231 = _225.x * cbMtdParam._m0[9u].x;
    float _232 = _225.y * cbMtdParam._m0[9u].y;
    float _233 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3231 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))));
    float _268 = _250.z * cbMtdParam._m0[13u].y;
    float _271 = fma(_267, _195 * NORMAL.x, fma(_260, _202 * TANGENT.x, (_188 * _180) * _258));
    float _274 = fma(_267, _195 * NORMAL.y, fma(_260, _202 * TANGENT.y, (_188 * _181) * _258));
    float _277 = fma(_267, _195 * NORMAL.z, fma(_260, _202 * TANGENT.z, (_188 * _182) * _258));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3242 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _285 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3264 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3275 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _304 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _347 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _357 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _347);
    float _358 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _347);
    float _359 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _347);
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _357 * _363;
    float _365 = _358 * _363;
    float _366 = _359 * _363;
    vec4 _371 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _373 = _371.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _529 = sqrt(((_357 * _357) + (_358 * _358)) + (_359 * _359));
        float _535 = (cbMatDynParam._m0[5u].x * _529) + cbMatDynParam._m0[5u].y;
        float _3286 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
        float _536 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _540 = (cbMatDynParam._m0[5u].z * _529) + cbMatDynParam._m0[5u].w;
        float _3297 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) - _536)) + _536) < ((_373 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _385 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _386 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _408 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _411 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _424 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3308 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _385, cbSceneParam._m0[86u].y * _386));
    float _449 = _446.x * TEXCOORD_5.w;
    float _450 = dot(vec3(_282, _283, _284), vec3(_364, _365, _366));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _282) - _364;
    float _458 = (_453 * _283) - _365;
    float _459 = (_453 * _284) - _366;
    float _463 = abs(dot(vec3(_364, _365, _366), vec3(_282, _283, _284)));
    float _3341 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_285);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_518, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510));
        float _578 = fma(_518, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510));
        float _582 = fma(_518, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510));
        float _607 = _510 + _282;
        float _608 = _514 + _283;
        float _609 = _518 + _284;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_282, _283, _284), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3389 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_282, _283, _284), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3422 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_282, _283, _284), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3455 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_518, cbModelParam._m0[30u].z, fma(_514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _510));
        float _897 = fma(_518, cbModelParam._m0[31u].z, fma(_514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _510));
        float _901 = fma(_518, cbModelParam._m0[32u].z, fma(_514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _510));
        float _924 = _510 + _282;
        float _925 = _514 + _283;
        float _926 = _518 + _284;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_282, _283, _284), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3518 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_282, _283, _284), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3551 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_282, _283, _284), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3584 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = _850;
        _1172 = _850;
        _1173 = _850;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _863)) + _863;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _457 * 0.5;
    float _1231 = _458 * 0.5;
    float _1232 = _459 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_849, _853, _856, _859));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_851, _854, _857, _860));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _855, _858, _861));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _285);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_518, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_518, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_518, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1361 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1364 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1392;
        if (_1358 > 0.0)
        {
            _1392 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1392 = frontier_phi_17_15_ladder;
        }
        float _1598;
        if (_1361 > 0.0)
        {
            _1598 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1598 = frontier_phi_26_22_ladder;
        }
        float _1841;
        if (_1364 > 0.0)
        {
            _1841 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1841 = frontier_phi_38_33_ladder;
        }
        float _1843 = isnan(_1598) ? _1392 : (isnan(_1392) ? _1598 : min(_1392, _1598));
        float _1844 = isnan(_1841) ? _1843 : (isnan(_1843) ? _1841 : min(_1843, _1841));
        float _1848 = (_1844 * _1358) + _1347;
        float _1849 = (_1844 * _1361) + _1351;
        float _1850 = (_1844 * _1364) + _1355;
        float _1851 = _1844 * 9.9999997473787516355514526367188e-05;
        float _1853 = (-1.0) - _1851;
        float _1855 = _1851 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1850 > _1855) || ((_1850 < _1853) || ((_1849 > _1855) || ((_1849 < _1853) || ((_1848 < _1853) || (_1848 > _1855))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1850, cbModelParam._m0[9u].z, fma(_1849, cbModelParam._m0[9u].y, _1848 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1850, cbModelParam._m0[10u].z, fma(_1849, cbModelParam._m0[10u].y, _1848 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1850, cbModelParam._m0[11u].z, fma(_1849, cbModelParam._m0[11u].y, _1848 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_16_38_ladder = _1974.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1974.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1974.x * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_16_38_ladder_2;
        _1382 = frontier_phi_16_38_ladder_1;
        _1384 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1299);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1388 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _285);
    float _1389 = isnan(_1388) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1388 : min(cbModelParam._m0[25u].w, _1388));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1446 = fma(_518, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510)) + cbModelParam._m0[21u].w;
        float _1450 = fma(_518, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510)) + cbModelParam._m0[22u].w;
        float _1454 = fma(_518, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510)) + cbModelParam._m0[23u].w;
        float _1457 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1460 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1463 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1603;
        if (_1457 > 0.0)
        {
            _1603 = abs((1.0 - _1446) / _1457);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1446 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1603 = frontier_phi_28_24_ladder;
        }
        float _1868;
        if (_1460 > 0.0)
        {
            _1868 = abs((1.0 - _1450) / _1460);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1450 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1868 = frontier_phi_40_35_ladder;
        }
        float _2073;
        if (_1463 > 0.0)
        {
            _2073 = abs((1.0 - _1454) / _1463);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1454 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2073 = frontier_phi_49_46_ladder;
        }
        float _2075 = isnan(_1868) ? _1603 : (isnan(_1603) ? _1868 : min(_1603, _1868));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1457) + _1446;
        float _2081 = (_2076 * _1460) + _1450;
        float _2082 = (_2076 * _1463) + _1454;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2083;
        float _2086 = _2083 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2082 > _2086) || ((_2082 < _2084) || ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 < _2084) || (_2080 > _2086))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2281 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2082, cbModelParam._m0[17u].z, fma(_2081, cbModelParam._m0[17u].y, _2080 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2082, cbModelParam._m0[18u].z, fma(_2081, cbModelParam._m0[18u].y, _2080 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2082, cbModelParam._m0[19u].z, fma(_2081, cbModelParam._m0[19u].y, _2080 * cbModelParam._m0[19u].x))), _1389);
            frontier_phi_25_49_ladder = _2281.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2281.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2281.x * cbModelParam._m0[1u].z;
        }
        _1482 = frontier_phi_25_49_ladder_2;
        _1484 = frontier_phi_25_49_ladder_1;
        _1486 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1389);
        _1482 = _1466.x * cbModelParam._m0[1u].z;
        _1484 = _1466.y * cbModelParam._m0[1u].z;
        _1486 = _1466.z * cbModelParam._m0[1u].z;
    }
    float _1498 = ((((1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_478 * _465)) * _449;
    float _1499 = _1498 * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1500 = _1498 * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1501 = _1498 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1504 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, _1499 * cbSceneParam._m0[91u].x));
    uvec4 _1520 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1522 = _1520.x * 14u;
    uint _1523 = _1522 + 13u;
    float _1530 = _449 + (-1.0);
    float _1535 = (cbLight._m0[_1523].x * _1530) + 1.0;
    float _1536 = (cbLight._m0[_1523].y * _1530) + 1.0;
    float _1537 = (cbLight._m0[_1523].z * _1530) + 1.0;
    float _1538 = (cbLight._m0[_1523].w * _1530) + 1.0;
    uint _1539 = _1522 + 5u;
    float _1545 = isnan(1.0) ? _1536 : (isnan(_1536) ? 1.0 : min(_1536, 1.0));
    uint _1549 = _1522 + 4u;
    float _1556 = isnan(1.0) ? _1535 : (isnan(_1535) ? 1.0 : min(_1535, 1.0));
    uint _1560 = _1522 | 1u;
    float _1571 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_282, _283, _284));
    float _1574 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_282, _283, _284));
    float _3720 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _3731 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1579 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1581 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.3183098733425140380859375;
    float _1588 = ((cbLight._m0[_1539].x * _1545) * _1581) + ((cbLight._m0[_1549].x * _1556) * _1579);
    float _1589 = ((_1545 * cbLight._m0[_1539].y) * _1581) + ((_1556 * cbLight._m0[_1549].y) * _1579);
    float _1590 = ((_1545 * cbLight._m0[_1539].z) * _1581) + ((_1556 * cbLight._m0[_1549].z) * _1579);
    uvec4 _1595 = floatBitsToUint(cbLight._m0[_1522 + 12u]);
    bool _1597 = _1595.x == 0u;
    float _1608;
    float _1610;
    float _1612;
    if (_1597)
    {
        _1608 = _1588;
        _1610 = _1589;
        _1612 = _1590;
    }
    else
    {
        uint _1616 = _1522 + 6u;
        float _1632 = (dot(vec3(cbLight._m0[_1522 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1633 = _1632 * _1632;
        float _3742 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1635 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1608 = (((cbLight._m0[_1616].x * 0.3183098733425140380859375) * _1634) * _1635) + _1588;
        _1610 = (((cbLight._m0[_1616].y * 0.3183098733425140380859375) * _1634) * _1635) + _1589;
        _1612 = (((cbLight._m0[_1616].z * 0.3183098733425140380859375) * _1634) * _1635) + _1590;
    }
    bool _1615 = _1595.y == 0u;
    float _1653;
    float _1655;
    float _1657;
    if (_1615)
    {
        _1653 = _1608;
        _1655 = _1610;
        _1657 = _1612;
    }
    else
    {
        uint _1812 = _1522 + 7u;
        float _1828 = (dot(vec3(cbLight._m0[_1522 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1829 = _1828 * _1828;
        float _3758 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1831 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1653 = (((cbLight._m0[_1812].x * 0.3183098733425140380859375) * _1830) * _1831) + _1608;
        _1655 = (((cbLight._m0[_1812].y * 0.3183098733425140380859375) * _1830) * _1831) + _1610;
        _1657 = (((cbLight._m0[_1812].z * 0.3183098733425140380859375) * _1830) * _1831) + _1612;
    }
    uint _1660 = _1522 + 8u;
    float _1673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1522].w)) * _285) * 0.949999988079071044921875);
    float _1674 = _1673 * _1673;
    float _1675 = cbLight._m0[_1522].x + _364;
    float _1676 = cbLight._m0[_1522].y + _365;
    float _1677 = cbLight._m0[_1522].z + _366;
    float _1681 = inversesqrt(dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677)));
    float _1682 = _1681 * _1675;
    float _1683 = _1681 * _1676;
    float _1684 = _1681 * _1677;
    float _1685 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1522].xyz));
    float _3774 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1689 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1690 = dot(vec3(_282, _283, _284), vec3(_1682, _1683, _1684));
    float _3796 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1694 = dot(vec3(cbLight._m0[_1522].xyz), vec3(_1682, _1683, _1684));
    float _3807 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1698 = _1674 * _1674;
    float _1702 = ((_1693 * _1693) * (_1698 + (-1.0))) + 1.0;
    float _1713 = (exp2(log2(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1714 = 1.0 - _1674;
    float _1725 = (0.5 / (((_1689 * ((_1688 * _1714) + _1674)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1714) + _1674) * _1688))) * _1688;
    float _3818 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1727 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1698 / ((_1702 * _1702) * 3.141590118408203125));
    uint _1738 = _1522 + 9u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1560].w)) * _285) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1560].x + _364;
    float _1752 = cbLight._m0[_1560].y + _365;
    float _1753 = cbLight._m0[_1560].z + _366;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1560].xyz));
    float _3829 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1765 = dot(vec3(_282, _283, _284), vec3(_1758, _1759, _1760));
    float _3840 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1560].xyz), vec3(_1758, _1759, _1760));
    float _3851 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1750 * _1750;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1786 = (exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1787 = 1.0 - _1750;
    float _1797 = (0.5 / (((_1689 * ((_1764 * _1787) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1787) + _1750) * _1764))) * _1764;
    float _3862 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    float _1809 = (((_1786 * cbLight._m0[_1738].x) * _1799) * _1545) + (((_1713 * cbLight._m0[_1660].x) * _1727) * _1556);
    float _1810 = (((_1786 * cbLight._m0[_1738].y) * _1799) * _1545) + (((_1713 * cbLight._m0[_1660].y) * _1727) * _1556);
    float _1811 = (((_1786 * cbLight._m0[_1738].z) * _1799) * _1545) + (((_1713 * cbLight._m0[_1660].z) * _1727) * _1556);
    float _1873;
    float _1875;
    float _1877;
    if (_1597)
    {
        _1873 = _1809;
        _1875 = _1810;
        _1877 = _1811;
    }
    else
    {
        uint _1879 = _1522 + 2u;
        uint _1883 = _1522 + 10u;
        float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _285) * 0.949999988079071044921875);
        float _1898 = _1897 * _1897;
        float _1899 = cbLight._m0[_1879].x + _364;
        float _1900 = cbLight._m0[_1879].y + _365;
        float _1901 = cbLight._m0[_1879].z + _366;
        float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
        float _1906 = _1905 * _1899;
        float _1907 = _1905 * _1900;
        float _1908 = _1905 * _1901;
        float _1909 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1879].xyz));
        float _3873 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1912 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1913 = dot(vec3(_282, _283, _284), vec3(_1906, _1907, _1908));
        float _3884 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1917 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_1906, _1907, _1908));
        float _3895 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1921 = _1898 * _1898;
        float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
        float _1934 = (exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1935 = 1.0 - _1898;
        float _1945 = (0.5 / (((_1689 * ((_1912 * _1935) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _1935) + _1898) * _1912))) * _1912;
        float _3906 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1947 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
        float _1948 = isnan(1.0) ? _1537 : (isnan(_1537) ? 1.0 : min(_1537, 1.0));
        _1873 = (((_1934 * cbLight._m0[_1883].x) * _1947) * _1948) + _1809;
        _1875 = (((_1934 * cbLight._m0[_1883].y) * _1947) * _1948) + _1810;
        _1877 = (((_1934 * cbLight._m0[_1883].z) * _1947) * _1948) + _1811;
    }
    float _1983;
    float _1985;
    float _1987;
    if (_1615)
    {
        _1983 = _1873;
        _1985 = _1875;
        _1987 = _1877;
    }
    else
    {
        uint _1994 = _1522 + 3u;
        uint _1998 = _1522 + 11u;
        float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _285) * 0.949999988079071044921875);
        float _2013 = _2012 * _2012;
        float _2014 = cbLight._m0[_1994].x + _364;
        float _2015 = cbLight._m0[_1994].y + _365;
        float _2016 = cbLight._m0[_1994].z + _366;
        float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
        float _2021 = _2020 * _2014;
        float _2022 = _2020 * _2015;
        float _2023 = _2020 * _2016;
        float _2024 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1994].xyz));
        float _3922 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2028 = dot(vec3(_282, _283, _284), vec3(_2021, _2022, _2023));
        float _3933 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2032 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2021, _2022, _2023));
        float _3944 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2036 = _2013 * _2013;
        float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
        float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2050 = 1.0 - _2013;
        float _2060 = (0.5 / (((_1689 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1689 * _2050) + _2013) * _2027))) * _2027;
        float _3955 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2062 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
        float _2063 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
        _1983 = (((_2049 * cbLight._m0[_1998].x) * _2062) * _2063) + _1873;
        _1985 = (((_2049 * cbLight._m0[_1998].y) * _2062) * _2063) + _1875;
        _1987 = (((_2049 * cbLight._m0[_1998].z) * _2062) * _2063) + _1877;
    }
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    if (_1520.y == 0u)
    {
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2138;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2138;
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2138;
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.x;
        uint _2165 = uint((float(_2153.y) * floor(float(uint(cbSceneParam._m0[85u].y * _386) / _2154))) + floor(float(uint(cbSceneParam._m0[85u].x * _385) / _2154)));
        float _2175 = (log2(_2141 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2176 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        uint _2179 = uint(isnan(14.0) ? _2176 : (isnan(_2176) ? 14.0 : min(_2176, 14.0)));
        uvec4 _2184 = texelFetch(g_lightClusterGridBuffer, int(((_2179 << 2u) + (_2165 << 6u)) >> 2u));
        uint _2185 = _2184.x;
        uint _2186 = _2153.z;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        if (((((1u << ((_2186 >> 4u) & 15u)) + 4294967295u) & _2185) == 0u) || ((_2186 & 240u) == 0u))
        {
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
        }
        else
        {
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            uint _2445 = 0u;
            uint _2454;
            bool _2455;
            for (;;)
            {
                _2454 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2445 << 2u)) >> 2u)).x;
                _2455 = _2454 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2455)
                {
                    frontier_phi_66_pred = _2439;
                    frontier_phi_66_pred_1 = _2444;
                    frontier_phi_66_pred_2 = _2443;
                    frontier_phi_66_pred_3 = _2442;
                    frontier_phi_66_pred_4 = _2441;
                    frontier_phi_66_pred_5 = _2440;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2439;
                    _2585 = _2440;
                    _2586 = _2441;
                    _2587 = _2442;
                    _2588 = _2443;
                    _2589 = _2444;
                    _2590 = _2454;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2445 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2139;
                        float _2651 = _2610.y - _2140;
                        float _2652 = _2610.z - _2141;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_405, _408, _411), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3981 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2139;
                        float _2686 = (-0.0) - _2140;
                        float _2687 = (-0.0) - _2141;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _465;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_405, _408, _411), vec3(_2692, _2693, _2694));
                        float _3997 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2727 = dot(vec3(_405, _408, _411), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _4008 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _4019 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _4030 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2514 = (_2681 * _2629.x) + _2587;
                        _2515 = (_2681 * _2629.y) + _2588;
                        _2516 = (_2681 * _2629.z) + _2589;
                        _2511 = (_2762 * _2646.x) + _2584;
                        _2512 = (_2762 * _2646.y) + _2585;
                        _2513 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2511;
                            _2585 = _2512;
                            _2586 = _2513;
                            _2587 = _2514;
                            _2588 = _2515;
                            _2589 = _2516;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_66_pred = _2511;
                    frontier_phi_66_pred_1 = _2516;
                    frontier_phi_66_pred_2 = _2515;
                    frontier_phi_66_pred_3 = _2514;
                    frontier_phi_66_pred_4 = _2513;
                    frontier_phi_66_pred_5 = _2512;
                }
                _2287 = frontier_phi_66_pred;
                _2297 = frontier_phi_66_pred_1;
                _2295 = frontier_phi_66_pred_2;
                _2293 = frontier_phi_66_pred_3;
                _2291 = frontier_phi_66_pred_4;
                _2289 = frontier_phi_66_pred_5;
                uint _2446 = _2445 + 1u;
                if (_2446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2439 = _2287;
                    _2440 = _2289;
                    _2441 = _2291;
                    _2442 = _2293;
                    _2443 = _2295;
                    _2444 = _2297;
                    _2445 = _2446;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
        }
        uvec4 _2300 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2301 = _2300.z;
        uint _2303 = (_2301 >> 8u) & 15u;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((4294967295u << _2303) & _2185) == 0u)
        {
            _2407 = _2286;
            _2409 = _2288;
            _2411 = _2290;
            _2413 = _2292;
            _2415 = _2294;
            _2417 = _2296;
        }
        else
        {
            float _2432 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
            float _2433 = _2432 * _2139;
            float _2434 = _2432 * _2140;
            float _2435 = _2432 * _2141;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2303 < ((_2301 >> 12u) & 15u))
            {
                float _2408;
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2567 = _2286;
                float _2568 = _2288;
                float _2569 = _2290;
                float _2570 = _2292;
                float _2571 = _2294;
                float _2572 = _2296;
                uint _2573 = _2303;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2179 << 5u) + (_2165 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2583)
                    {
                        frontier_phi_77_pred = _2572;
                        frontier_phi_77_pred_1 = _2571;
                        frontier_phi_77_pred_2 = _2570;
                        frontier_phi_77_pred_3 = _2569;
                        frontier_phi_77_pred_4 = _2568;
                        frontier_phi_77_pred_5 = _2567;
                    }
                    else
                    {
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2789 = _2567;
                        float _2790 = _2568;
                        float _2791 = _2569;
                        float _2792 = _2570;
                        float _2793 = _2571;
                        float _2794 = _2572;
                        uint _2795 = _2582;
                        uint _2796;
                        vec4 _2821;
                        float _2822;
                        vec4 _2837;
                        vec3 _2849;
                        vec4 _2865;
                        vec4 _2881;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2806 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2795));
                            _2796 = (_2795 + 4294967295u) & _2795;
                            uint _2808 = _2806 * 40u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            _2822 = _2821.w;
                            uint _2824 = (_2806 * 40u) + 4u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2806 * 40u) + 8u;
                            _2849 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x));
                            uint _2852 = (_2806 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2806 * 40u) + 20u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2806 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2806 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2141, _2916.z, fma(_2140, _2916.y, _2916.x * _2139)) + _2916.w;
                            _2929 = !((fma(_2141, _2897.z, fma(_2140, _2897.y, _2897.x * _2139)) + _2897.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2821.x - _2139;
                                float _2957 = _2821.y - _2140;
                                float _2958 = _2821.z - _2141;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2822 * _2822));
                                float _4041 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _2974 = sqrt(_2959) * _2837.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_405, _408, _411))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2141, _2865.z, fma(_2140, _2865.y, _2865.x * _2139)) + _2865.w) / _2928;
                                float _2988 = (fma(_2141, _2881.z, fma(_2140, _2881.y, _2881.x * _2139)) + _2881.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _4057 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _465;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2433;
                                float _3018 = _2964 - _2434;
                                float _3019 = _2965 - _2435;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_405, _408, _411), vec3((-0.0) - _2433, (-0.0) - _2434, (-0.0) - _2435));
                                float _4068 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3031 = dot(vec3(_405, _408, _411), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _4079 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_405, _408, _411), vec3(_2963, _2964, _2965))) + _3040;
                                float _4090 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4101 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2994 * _2837.y;
                                frontier_phi_83_pred_1 = _2994 * _2837.x;
                                frontier_phi_83_pred_2 = _3068 * _2849.z;
                                frontier_phi_83_pred_3 = _3068 * _2849.y;
                                frontier_phi_83_pred_4 = _3068 * _2849.x;
                                frontier_phi_83_pred_5 = _2994 * _2837.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3076 = frontier_phi_83_pred;
                            _3075 = frontier_phi_83_pred_1;
                            _3074 = frontier_phi_83_pred_2;
                            _3073 = frontier_phi_83_pred_3;
                            _3072 = frontier_phi_83_pred_4;
                            _3077 = frontier_phi_83_pred_5;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            if (_2796 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2796;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2781;
                        frontier_phi_77_pred_1 = _2780;
                        frontier_phi_77_pred_2 = _2779;
                        frontier_phi_77_pred_3 = _2778;
                        frontier_phi_77_pred_4 = _2777;
                        frontier_phi_77_pred_5 = _2776;
                    }
                    _2418 = frontier_phi_77_pred;
                    _2416 = frontier_phi_77_pred_1;
                    _2414 = frontier_phi_77_pred_2;
                    _2412 = frontier_phi_77_pred_3;
                    _2410 = frontier_phi_77_pred_4;
                    _2408 = frontier_phi_77_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2408;
                        _2568 = _2410;
                        _2569 = _2412;
                        _2570 = _2414;
                        _2571 = _2416;
                        _2572 = _2418;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2412;
                frontier_phi_58_59_ladder_1 = _2418;
                frontier_phi_58_59_ladder_2 = _2416;
                frontier_phi_58_59_ladder_3 = _2414;
                frontier_phi_58_59_ladder_4 = _2410;
                frontier_phi_58_59_ladder_5 = _2408;
            }
            else
            {
                frontier_phi_58_59_ladder = _2290;
                frontier_phi_58_59_ladder_1 = _2296;
                frontier_phi_58_59_ladder_2 = _2294;
                frontier_phi_58_59_ladder_3 = _2292;
                frontier_phi_58_59_ladder_4 = _2288;
                frontier_phi_58_59_ladder_5 = _2286;
            }
            _2407 = frontier_phi_58_59_ladder_5;
            _2409 = frontier_phi_58_59_ladder_4;
            _2411 = frontier_phi_58_59_ladder;
            _2413 = frontier_phi_58_59_ladder_3;
            _2415 = frontier_phi_58_59_ladder_2;
            _2417 = frontier_phi_58_59_ladder_1;
        }
        float _2422 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2198 = (_2422 * _2413) + _1653;
        _2200 = (_2422 * _2415) + _1655;
        _2202 = (_2422 * _2417) + _1657;
        _2204 = ((_2407 * 0.039999999105930328369140625) * _2422) + _1983;
        _2206 = ((_2409 * 0.039999999105930328369140625) * _2422) + _1985;
        _2208 = ((_2411 * 0.039999999105930328369140625) * _2422) + _1987;
    }
    else
    {
        _2198 = _1653;
        _2200 = _1655;
        _2202 = _1657;
        _2204 = _1983;
        _2206 = _1985;
        _2208 = _1987;
    }
    float _4117 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4128 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4139 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _2225 = ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2198 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _449))) + ((_2204 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2226 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2200 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _449))) + ((_2206 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2227 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2202 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _449))) + ((_2208 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    uint _2228 = _424 + 6u;
    float _2236 = _385 / cbSceneParam._m0[86u].x;
    float _2237 = _386 / cbSceneParam._m0[86u].y;
    vec4 _2251 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2236, _2237, (log2((isnan(cbSceneParam._m0[77u].w) ? _304 : (isnan(_304) ? cbSceneParam._m0[77u].w : min(_304, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2253 = _2251.x;
    float _2254 = _2251.y;
    float _2255 = _2251.z;
    float _2256 = _2251.w;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_304 > cbSceneParam._m0[78u].w)
    {
        float _2311 = isnan(_304) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _304 : min(cbSceneParam._m0[80u].w, _304));
        float _2312 = _2311 / _304;
        float _2323 = _2312 * _357;
        float _2324 = _358 * _2312;
        float _2325 = (-0.0) - _2324;
        float _2327 = _2312 * _359;
        float _2329 = (cbSceneParam._m0[77u].w * _2325) / _2311;
        float _2330 = _2329 + cbSceneParam._m0[79u].w;
        float _2331 = cbSceneParam._m0[79u].w - _2324;
        float _2337 = sqrt(((_2323 * _2323) + (_2324 * _2324)) + (_2327 * _2327));
        float _2340 = (1.0 - (cbSceneParam._m0[77u].w / _2311)) * _2337;
        float _2345 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2347 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2524;
        if (abs((_2325 - _2329) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2524 = ((((_2330 > 0.0) ? exp2(_2345 * _2330) : (2.0 - exp2(_2347 * _2330))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2340;
        }
        else
        {
            float _2468 = 1.0 / cbSceneParam._m0[80u].x;
            float _2469 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : max(_2330, _2331));
            float _2470 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : min(_2330, _2331));
            float _2479 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : min(_2469, 0.0));
            float _2480 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : min(_2470, 0.0));
            _2524 = ((abs(_2337 / _2325) * cbSceneParam._m0[80u].y) * ((((_2479 - _2480) * 2.0) - ((exp2(_2345 * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)))) - exp2(_2345 * (isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))))) * _2468)) - ((exp2(_2347 * _2479) - exp2(_2347 * _2480)) * _2468))) + (_2340 * cbSceneParam._m0[80u].z);
        }
        vec4 _2526 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2236, _2237, 1.0), 0.0);
        float _2535 = exp2((_2524 * (-1.44269502162933349609375)) * (1.0 - _2526.w));
        float _2536 = log2(_2535);
        float _2552 = log2(_2256);
        _2349 = (exp2(_2552 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].x)) * _2526.x) / cbSceneParam._m0[78u].x)) + _2253;
        _2351 = (exp2(_2552 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].y)) * _2526.y) / cbSceneParam._m0[78u].y)) + _2254;
        _2353 = (exp2(_2552 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2536 * cbSceneParam._m0[78u].z)) * _2526.z) / cbSceneParam._m0[78u].z)) + _2255;
        _2355 = _2535 * _2256;
    }
    else
    {
        _2349 = _2253;
        _2351 = _2254;
        _2353 = _2255;
        _2355 = _2256;
    }
    bool _2562;
    vec4 _2365;
    vec4 _2387;
    float _2389;
    float _2393;
    float _2394;
    float _2395;
    float _2396;
    bool _2406;
    for (;;)
    {
        _2365 = cbMatDynParam._m0[0u];
        float _2367 = roundEven(_2365.y);
        bool _2368 = _2367 == 3.0;
        float _2369 = log2(_2355);
        float _2376 = exp2(_2369 * cbSceneParam._m0[78u].x) * _2225;
        float _2377 = exp2(_2369 * cbSceneParam._m0[78u].y) * _2226;
        float _2378 = exp2(_2369 * cbSceneParam._m0[78u].z) * _2227;
        float _2385 = _373 + (-0.5);
        _2387 = cbMtdParam._m0[1u];
        _2389 = _2387.y * _2385;
        float _2392 = (_2367 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2393 = _2392 * (_2368 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2349)));
        _2394 = _2392 * (_2368 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2351)));
        _2395 = _2392 * (_2368 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2353)));
        _2396 = _2385 * 0.999000012874603271484375;
        _2406 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2406)
        {
            if ((cbInstanceData._m0[_424 + 7u].x + _2396) < 0.5)
            {
                _2562 = true;
                break;
            }
        }
        uint _2503 = _425 + uint(_2365.w);
        if ((cbInstanceData._m0[_2503].w < 1.0) && ((cbInstanceData._m0[_2503].w + _2396) < 0.5))
        {
            _2562 = true;
            break;
        }
        if ((_2389 + 1.0) < _2387.x)
        {
            _2562 = true;
            break;
        }
        _2562 = false;
        break;
    }
    float _2767;
    if (_2562)
    {
        discard_state = true;
        _2767 = 0.0;
    }
    else
    {
        _2767 = cbInstanceData._m0[_2228].w;
    }
    SV_Target.x = _2393;
    SV_Target.y = _2394;
    SV_Target.z = _2395;
    SV_Target.w = _2767;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2228].w;
    discard_exit();
}


