#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _885;
float _3275;
float _3276;
float _3277;
float _3278;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _249 = _247.x;
    vec4 _266 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3287 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))));
    float _284 = _266.z * cbMtdParam._m0[13u].y;
    float _287 = fma(_283, _197 * NORMAL.x, fma(_276, _204 * TANGENT.x, (_190 * _182) * _274));
    float _290 = fma(_283, _197 * NORMAL.y, fma(_276, _204 * TANGENT.y, (_190 * _183) * _274));
    float _293 = fma(_283, _197 * NORMAL.z, fma(_276, _204 * TANGENT.z, (_190 * _184) * _274));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3298 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _301 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _3309 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3320 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3331 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3342 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _305 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    vec4 _388 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _390 = _388.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _564 = sqrt(((_374 * _374) + (_375 * _375)) + (_376 * _376));
        float _570 = (cbMatDynParam._m0[5u].x * _564) + cbMatDynParam._m0[5u].y;
        float _3353 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        float _571 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _575 = (cbMatDynParam._m0[5u].z * _564) + cbMatDynParam._m0[5u].w;
        float _3364 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) - _571)) + _571) < ((_390 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _425 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _428 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = _441 + 9u;
    uint _443 = _442 + uint(cbMatDynParam._m0[0u].w);
    float _449 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_443].x;
    float _450 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_443].y;
    float _451 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_443].z;
    float _3375 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _455 = 1.0 - _305;
    float _456 = _452 * _455;
    float _457 = _453 * _455;
    float _458 = _454 * _455;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _305;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _305;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _305;
    float _466 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    vec4 _478 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _481 = _478.x * TEXCOORD_5.w;
    float _482 = dot(vec3(_298, _299, _300), vec3(_381, _382, _383));
    float _485 = _482 * 2.0;
    float _489 = (_485 * _298) - _381;
    float _490 = (_485 * _299) - _382;
    float _491 = (_485 * _300) - _383;
    float _495 = abs(dot(vec3(_381, _382, _383), vec3(_298, _299, _300)));
    float _3408 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_301);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _516 = (1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _517 = _510 * _497;
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _884;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _609 = fma(_553, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _545));
        float _613 = fma(_553, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _545));
        float _617 = fma(_553, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _545));
        float _642 = _545 + _298;
        float _643 = _549 + _299;
        float _644 = _553 + _300;
        float _654 = fma(_644, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642)) - _609;
        float _655 = fma(_644, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642)) - _613;
        float _656 = fma(_644, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642)) - _617;
        float _660 = inversesqrt(dot(vec3(_654, _655, _656), vec3(_654, _655, _656)));
        float _673 = ((_660 * _654) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_609 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _674 = ((_660 * _655) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_613 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _675 = ((_660 * _656) / cbModelParam._m0[34u].z) + ((((((_617 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_673, _674, _675), 0.0);
        float _712 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_678.x + (-0.5));
        float _714 = _712 * (_678.y + (-0.5));
        float _715 = _712 * (_678.z + (-0.5));
        float _722 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_685.x + (-0.5));
        float _724 = _722 * (_685.y + (-0.5));
        float _725 = _722 * (_685.z + (-0.5));
        float _732 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_692.x + (-0.5));
        float _734 = _732 * (_692.y + (-0.5));
        float _735 = _732 * (_692.z + (-0.5));
        float _742 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_699.x + (-0.5));
        float _744 = _742 * (_699.y + (-0.5));
        float _745 = _742 * (_699.z + (-0.5));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = _713 * 0.5;
        float _750 = _723 * 0.5;
        float _751 = _733 * 0.5;
        float _752 = dot(vec3(_749, _750, _751), vec3(_749, _750, _751));
        float _757 = (_752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_752);
        float _766 = (dot(vec3(_298, _299, _300), vec3(_757 * _749, _757 * _750, _757 * _751)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _776 = sqrt(((_750 * _750) + (_749 * _749)) + (_751 * _751)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3456 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_778 + 1.0))) + _783) * _746;
        float _793 = _714 * 0.5;
        float _794 = _724 * 0.5;
        float _795 = _734 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_298, _299, _300), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_747 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3489 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_820 + 1.0))) + _825) * _747;
        float _835 = _715 * 0.5;
        float _836 = _725 * 0.5;
        float _837 = _735 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _851 = (dot(vec3(_298, _299, _300), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _860 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3522 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_862 + 1.0))) + _867) * _748;
        _884 = _715;
        _886 = _714;
        _887 = _713;
        _888 = _725;
        _889 = _724;
        _890 = _723;
        _891 = _735;
        _892 = _734;
        _893 = _733;
        _894 = _748;
        _895 = _747;
        _896 = _746;
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _898 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
    }
    else
    {
        _884 = _885;
        _886 = _885;
        _887 = _885;
        _888 = _885;
        _889 = _885;
        _890 = _885;
        _891 = _885;
        _892 = _885;
        _893 = _885;
        _894 = _885;
        _895 = _885;
        _896 = _885;
        _897 = 0.0;
        _898 = 0.0;
        _899 = 0.0;
    }
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _928 = fma(_553, cbModelParam._m0[30u].z, fma(_549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _545));
        float _932 = fma(_553, cbModelParam._m0[31u].z, fma(_549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _545));
        float _936 = fma(_553, cbModelParam._m0[32u].z, fma(_549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _545));
        float _959 = _545 + _298;
        float _960 = _549 + _299;
        float _961 = _553 + _300;
        float _971 = fma(_961, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959)) - _928;
        float _972 = fma(_961, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959)) - _932;
        float _973 = fma(_961, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959)) - _936;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_928 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_932 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[35u].z) + ((((((_936 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1027 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_994.x + (-0.5));
        float _1029 = _1027 * (_994.y + (-0.5));
        float _1030 = _1027 * (_994.z + (-0.5));
        float _1037 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1001.x + (-0.5));
        float _1039 = _1037 * (_1001.y + (-0.5));
        float _1040 = _1037 * (_1001.z + (-0.5));
        float _1047 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1008.x + (-0.5));
        float _1049 = _1047 * (_1008.y + (-0.5));
        float _1050 = _1047 * (_1008.z + (-0.5));
        float _1057 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1015.x + (-0.5));
        float _1059 = _1057 * (_1015.y + (-0.5));
        float _1060 = _1057 * (_1015.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_298, _299, _300), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3585 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1091 + 1.0))) + _1096) * _1061;
        float _1106 = _1029 * 0.5;
        float _1107 = _1039 * 0.5;
        float _1108 = _1049 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_298, _299, _300), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3618 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1133 + 1.0))) + _1138) * _1062;
        float _1148 = _1030 * 0.5;
        float _1149 = _1040 * 0.5;
        float _1150 = _1050 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_298, _299, _300), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3651 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1175 + 1.0))) + _1180) * _1063;
        _1197 = _1030;
        _1198 = _1029;
        _1199 = _1028;
        _1200 = _1040;
        _1201 = _1039;
        _1202 = _1038;
        _1203 = _1050;
        _1204 = _1049;
        _1205 = _1048;
        _1206 = _1063;
        _1207 = _1062;
        _1208 = _1061;
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1210 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _885;
        _1198 = _885;
        _1199 = _885;
        _1200 = _885;
        _1201 = _885;
        _1202 = _885;
        _1203 = _885;
        _1204 = _885;
        _1205 = _885;
        _1206 = _885;
        _1207 = _885;
        _1208 = _885;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _897)) + _897;
    float _1222 = (cbModelParam._m0[1u].x * (_1210 - _898)) + _898;
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1244 = fma(_1223, cbSceneParam._m0[89u].z, fma(_1222, cbSceneParam._m0[89u].y, _1221 * cbSceneParam._m0[89u].x));
    float _1247 = fma(_1223, cbSceneParam._m0[90u].z, fma(_1222, cbSceneParam._m0[90u].y, _1221 * cbSceneParam._m0[90u].x));
    float _1250 = fma(_1223, cbSceneParam._m0[91u].z, fma(_1222, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1221));
    float _1265 = _489 * 0.5;
    float _1266 = _490 * 0.5;
    float _1267 = _491 * 0.5;
    float _1268 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1271 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1198, _1201, _1204, _1207));
    float _1274 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1308;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1281 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_884, _888, _891, _894));
        float _1285 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_886, _889, _892, _895));
        float _1289 = dot(vec4(_1265, _1266, _1267, 1.0), vec4(_887, _890, _893, _896));
        float _1296 = dot(vec4(cbModelParam._m0[39u]), vec4(_1265, _1266, _1267, 1.0));
        _1308 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1296) ? 0.0 : (isnan(0.0) ? _1296 : max(0.0, _1296))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1308 = 1.0;
    }
    float _1319;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1310 = dot(vec4(cbModelParam._m0[40u]), vec4(_1265, _1266, _1267, 1.0));
        _1319 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1310) ? 0.0 : (isnan(0.0) ? _1310 : max(0.0, _1310))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1319 = 1.0;
    }
    float _1323 = (_1319 * cbModelParam._m0[1u].x) + (_1308 * (1.0 - cbModelParam._m0[1u].x));
    float _1333 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1334 = isnan(_1333) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1333 : min(cbModelParam._m0[25u].z, _1333));
    float _1415;
    float _1417;
    float _1419;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1382 = fma(_553, cbModelParam._m0[13u].z, fma(_549, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _545)) + cbModelParam._m0[13u].w;
        float _1386 = fma(_553, cbModelParam._m0[14u].z, fma(_549, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _545)) + cbModelParam._m0[14u].w;
        float _1390 = fma(_553, cbModelParam._m0[15u].z, fma(_549, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _545)) + cbModelParam._m0[15u].w;
        float _1393 = fma(_491, cbModelParam._m0[13u].z, fma(_490, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _489));
        float _1396 = fma(_491, cbModelParam._m0[14u].z, fma(_490, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _489));
        float _1399 = fma(_491, cbModelParam._m0[15u].z, fma(_490, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _489));
        float _1427;
        if (_1393 > 0.0)
        {
            _1427 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1427 = frontier_phi_17_15_ladder;
        }
        float _1635;
        if (_1396 > 0.0)
        {
            _1635 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1635 = frontier_phi_26_22_ladder;
        }
        float _1889;
        if (_1399 > 0.0)
        {
            _1889 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1889 = frontier_phi_38_33_ladder;
        }
        float _1891 = isnan(_1635) ? _1427 : (isnan(_1427) ? _1635 : min(_1427, _1635));
        float _1892 = isnan(_1889) ? _1891 : (isnan(_1891) ? _1889 : min(_1891, _1889));
        float _1896 = (_1892 * _1393) + _1382;
        float _1897 = (_1892 * _1396) + _1386;
        float _1898 = (_1892 * _1399) + _1390;
        float _1899 = _1892 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1899;
        float _1903 = _1899 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 > _1903) || ((_1897 < _1901) || ((_1896 < _1901) || (_1896 > _1903))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1898, cbModelParam._m0[9u].z, fma(_1897, cbModelParam._m0[9u].y, _1896 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1898, cbModelParam._m0[10u].z, fma(_1897, cbModelParam._m0[10u].y, _1896 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1898, cbModelParam._m0[11u].z, fma(_1897, cbModelParam._m0[11u].y, _1896 * cbModelParam._m0[11u].x))), _1334);
            frontier_phi_16_38_ladder = _2026.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2026.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2026.x * cbModelParam._m0[1u].y;
        }
        _1415 = frontier_phi_16_38_ladder_2;
        _1417 = frontier_phi_16_38_ladder_1;
        _1419 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_489, _490, _491), _1334);
        _1415 = _1403.x * cbModelParam._m0[1u].y;
        _1417 = _1403.y * cbModelParam._m0[1u].y;
        _1419 = _1403.z * cbModelParam._m0[1u].y;
    }
    float _1423 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1423 : min(cbModelParam._m0[25u].w, _1423));
    float _1517;
    float _1519;
    float _1521;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1481 = fma(_553, cbModelParam._m0[21u].z, fma(_549, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _545)) + cbModelParam._m0[21u].w;
        float _1485 = fma(_553, cbModelParam._m0[22u].z, fma(_549, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _545)) + cbModelParam._m0[22u].w;
        float _1489 = fma(_553, cbModelParam._m0[23u].z, fma(_549, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _545)) + cbModelParam._m0[23u].w;
        float _1492 = fma(_491, cbModelParam._m0[21u].z, fma(_490, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _489));
        float _1495 = fma(_491, cbModelParam._m0[22u].z, fma(_490, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _489));
        float _1498 = fma(_491, cbModelParam._m0[23u].z, fma(_490, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _489));
        float _1640;
        if (_1492 > 0.0)
        {
            _1640 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1640 = frontier_phi_28_24_ladder;
        }
        float _1916;
        if (_1495 > 0.0)
        {
            _1916 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1916 = frontier_phi_40_35_ladder;
        }
        float _2129;
        if (_1498 > 0.0)
        {
            _2129 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2129 = frontier_phi_49_46_ladder;
        }
        float _2131 = isnan(_1916) ? _1640 : (isnan(_1640) ? _1916 : min(_1640, _1916));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1492) + _1481;
        float _2137 = (_2132 * _1495) + _1485;
        float _2138 = (_2132 * _1498) + _1489;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2139;
        float _2142 = _2139 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2138 > _2142) || ((_2138 < _2140) || ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 < _2140) || (_2136 > _2142))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2138, cbModelParam._m0[17u].z, fma(_2137, cbModelParam._m0[17u].y, _2136 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2138, cbModelParam._m0[18u].z, fma(_2137, cbModelParam._m0[18u].y, _2136 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2138, cbModelParam._m0[19u].z, fma(_2137, cbModelParam._m0[19u].y, _2136 * cbModelParam._m0[19u].x))), _1424);
            frontier_phi_25_49_ladder = _2337.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2337.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2337.x * cbModelParam._m0[1u].z;
        }
        _1517 = frontier_phi_25_49_ladder_2;
        _1519 = frontier_phi_25_49_ladder_1;
        _1521 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1501 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_489, _490, _491), _1424);
        _1517 = _1501.x * cbModelParam._m0[1u].z;
        _1519 = _1501.y * cbModelParam._m0[1u].z;
        _1521 = _1501.z * cbModelParam._m0[1u].z;
    }
    float _1534 = (((_516 * _466) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1536 = (((_516 * _468) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1519 - _1417)) + _1417);
    float _1538 = (((_516 * _469) + _517) * _481) * ((cbModelParam._m0[1u].w * (_1521 - _1419)) + _1419);
    float _1541 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, _1534 * cbSceneParam._m0[91u].x));
    uvec4 _1557 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1559 = _1557.x * 14u;
    uint _1560 = _1559 + 13u;
    float _1567 = _481 + (-1.0);
    float _1572 = (cbLight._m0[_1560].x * _1567) + 1.0;
    float _1573 = (cbLight._m0[_1560].y * _1567) + 1.0;
    float _1574 = (cbLight._m0[_1560].z * _1567) + 1.0;
    float _1575 = (cbLight._m0[_1560].w * _1567) + 1.0;
    uint _1576 = _1559 + 5u;
    float _1582 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
    uint _1586 = _1559 + 4u;
    float _1593 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1597 = _1559 | 1u;
    float _1608 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_298, _299, _300));
    float _1611 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_298, _299, _300));
    float _3787 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _3798 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1616 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1618 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1625 = ((cbLight._m0[_1576].x * _1582) * _1618) + ((cbLight._m0[_1586].x * _1593) * _1616);
    float _1626 = ((_1582 * cbLight._m0[_1576].y) * _1618) + ((_1593 * cbLight._m0[_1586].y) * _1616);
    float _1627 = ((_1582 * cbLight._m0[_1576].z) * _1618) + ((_1593 * cbLight._m0[_1586].z) * _1616);
    uvec4 _1632 = floatBitsToUint(cbLight._m0[_1559 + 12u]);
    bool _1634 = _1632.x == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1634)
    {
        _1645 = _1625;
        _1647 = _1626;
        _1649 = _1627;
    }
    else
    {
        uint _1653 = _1559 + 6u;
        float _1669 = (dot(vec3(cbLight._m0[_1559 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3809 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1672 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1645 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1625;
        _1647 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1626;
        _1649 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1627;
    }
    bool _1652 = _1632.y == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1652)
    {
        _1690 = _1645;
        _1692 = _1647;
        _1694 = _1649;
    }
    else
    {
        uint _1860 = _1559 + 7u;
        float _1876 = (dot(vec3(cbLight._m0[_1559 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1877 = _1876 * _1876;
        float _3825 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1879 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _1690 = (((cbLight._m0[_1860].x * 0.3183098733425140380859375) * _1878) * _1879) + _1645;
        _1692 = (((cbLight._m0[_1860].y * 0.3183098733425140380859375) * _1878) * _1879) + _1647;
        _1694 = (((cbLight._m0[_1860].z * 0.3183098733425140380859375) * _1878) * _1879) + _1649;
    }
    uint _1697 = _1559 + 8u;
    float _1710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1559].w)) * _301) * 0.949999988079071044921875);
    float _1711 = _1710 * _1710;
    float _1712 = cbLight._m0[_1559].x + _381;
    float _1713 = cbLight._m0[_1559].y + _382;
    float _1714 = cbLight._m0[_1559].z + _383;
    float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
    float _1719 = _1718 * _1712;
    float _1720 = _1718 * _1713;
    float _1721 = _1718 * _1714;
    float _1722 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1559].xyz));
    float _3841 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1726 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1727 = dot(vec3(_298, _299, _300), vec3(_1719, _1720, _1721));
    float _3863 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1731 = dot(vec3(cbLight._m0[_1559].xyz), vec3(_1719, _1720, _1721));
    float _3874 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1735 = _1711 * _1711;
    float _1739 = ((_1730 * _1730) * (_1735 + (-1.0))) + 1.0;
    float _1747 = exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0);
    float _1748 = 0.959999978542327880859375 - _463;
    float _1750 = 0.959999978542327880859375 - _464;
    float _1751 = 0.959999978542327880859375 - _465;
    float _1758 = 1.0 - _1711;
    float _1769 = (0.5 / (((_1726 * ((_1725 * _1758) + _1711)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1758) + _1711) * _1725))) * _1725;
    float _3885 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1735 / ((_1739 * _1739) * 3.141590118408203125));
    uint _1782 = _1559 + 9u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1597].w)) * _301) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1597].x + _381;
    float _1796 = cbLight._m0[_1597].y + _382;
    float _1797 = cbLight._m0[_1597].z + _383;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1597].xyz));
    float _3896 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1809 = dot(vec3(_298, _299, _300), vec3(_1802, _1803, _1804));
    float _3907 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_1802, _1803, _1804));
    float _3918 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1794 * _1794;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1828 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
    float _1835 = 1.0 - _1794;
    float _1845 = (0.5 / (((_1726 * ((_1808 * _1835) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1835) + _1794) * _1808))) * _1808;
    float _3929 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    float _1857 = (((((_1828 * _1748) + _466) * cbLight._m0[_1782].x) * _1847) * _1582) + (((((_1747 * _1748) + _466) * cbLight._m0[_1697].x) * _1771) * _1593);
    float _1858 = (((((_1828 * _1750) + _468) * cbLight._m0[_1782].y) * _1847) * _1582) + (((((_1747 * _1750) + _468) * cbLight._m0[_1697].y) * _1771) * _1593);
    float _1859 = (((((_1828 * _1751) + _469) * cbLight._m0[_1782].z) * _1847) * _1582) + (((((_1747 * _1751) + _469) * cbLight._m0[_1697].z) * _1771) * _1593);
    float _1921;
    float _1923;
    float _1925;
    if (_1634)
    {
        _1921 = _1857;
        _1923 = _1858;
        _1925 = _1859;
    }
    else
    {
        uint _1927 = _1559 + 2u;
        uint _1931 = _1559 + 10u;
        float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _301) * 0.949999988079071044921875);
        float _1946 = _1945 * _1945;
        float _1947 = cbLight._m0[_1927].x + _381;
        float _1948 = cbLight._m0[_1927].y + _382;
        float _1949 = cbLight._m0[_1927].z + _383;
        float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
        float _1954 = _1953 * _1947;
        float _1955 = _1953 * _1948;
        float _1956 = _1953 * _1949;
        float _1957 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1927].xyz));
        float _3940 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1960 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1961 = dot(vec3(_298, _299, _300), vec3(_1954, _1955, _1956));
        float _3951 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1965 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_1954, _1955, _1956));
        float _3962 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1969 = _1946 * _1946;
        float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
        float _1980 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
        float _1987 = 1.0 - _1946;
        float _1997 = (0.5 / (((_1726 * ((_1960 * _1987) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1987) + _1946) * _1960))) * _1960;
        float _3973 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1999 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
        float _2000 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1921 = (((((_1980 * _1748) + _466) * cbLight._m0[_1931].x) * _1999) * _2000) + _1857;
        _1923 = (((((_1980 * _1750) + _468) * cbLight._m0[_1931].y) * _1999) * _2000) + _1858;
        _1925 = (((((_1980 * _1751) + _469) * cbLight._m0[_1931].z) * _1999) * _2000) + _1859;
    }
    float _2035;
    float _2037;
    float _2039;
    if (_1652)
    {
        _2035 = _1921;
        _2037 = _1923;
        _2039 = _1925;
    }
    else
    {
        uint _2046 = _1559 + 3u;
        uint _2050 = _1559 + 11u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _301) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _381;
        float _2067 = cbLight._m0[_2046].y + _382;
        float _2068 = cbLight._m0[_2046].z + _383;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2046].xyz));
        float _3989 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2080 = dot(vec3(_298, _299, _300), vec3(_2073, _2074, _2075));
        float _4000 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _4011 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2099 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
        float _2106 = 1.0 - _2065;
        float _2116 = (0.5 / (((_1726 * ((_2079 * _2106) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _2106) + _2065) * _2079))) * _2079;
        float _4022 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
        _2035 = (((((_2099 * _1748) + _466) * cbLight._m0[_2050].x) * _2118) * _2119) + _1921;
        _2037 = (((((_2099 * _1750) + _468) * cbLight._m0[_2050].y) * _2118) * _2119) + _1923;
        _2039 = (((((_2099 * _1751) + _469) * cbLight._m0[_2050].z) * _2118) * _2119) + _1925;
    }
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_1557.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2511)
                {
                    frontier_phi_66_pred = _2495;
                    frontier_phi_66_pred_1 = _2500;
                    frontier_phi_66_pred_2 = _2499;
                    frontier_phi_66_pred_3 = _2498;
                    frontier_phi_66_pred_4 = _2497;
                    frontier_phi_66_pred_5 = _2496;
                }
                else
                {
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    uint _2646;
                    _2640 = _2495;
                    _2641 = _2496;
                    _2642 = _2497;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2510;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    for (;;)
                    {
                        uint _2650 = uint(findLSB(_2646)) + (_2501 << 5u);
                        uint _2647 = (_2646 + 4294967295u) & _2646;
                        uint _2652 = _2650 * 48u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        uint _2672 = (_2650 * 48u) + 4u;
                        vec4 _2685 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2691 = (_2650 * 48u) + 8u;
                        vec3 _2702 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x));
                        float _2706 = _2666.x - _2195;
                        float _2707 = _2666.y - _2196;
                        float _2708 = _2666.z - _2197;
                        float _2709 = dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708));
                        float _2712 = inversesqrt(_2709);
                        float _2713 = _2712 * _2706;
                        float _2714 = _2712 * _2707;
                        float _2715 = _2712 * _2708;
                        float _2716 = dot(vec3(_422, _425, _428), vec3(_2713, _2714, _2715));
                        float _2721 = 1.0 - (_2709 * _2666.w);
                        float _4048 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2723 = sqrt(_2709) * _2685.w;
                        float _2726 = 1.39999997615814208984375 / (_2723 + 1.39999997615814208984375);
                        float _2727 = _2726 * _2726;
                        float _2730 = ((1.0 - _2727) * _2716) + _2727;
                        float _2733 = _2723 * _2723;
                        float _2737 = ((isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))) * _2722) / ((_2733 * 0.699999988079071044921875) + 1.0);
                        float _2741 = (-0.0) - _2195;
                        float _2742 = (-0.0) - _2196;
                        float _2743 = (-0.0) - _2197;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2758 = exp2(log2(1.0 / ((_2733 * 3.5) + 5.0)) * 0.25);
                        float _2759 = 1.0 - _497;
                        float _2766 = sqrt(1.0 - ((1.0 - (_2759 * _2759)) * (1.0 - (_2758 * _2758))));
                        float _2767 = _2766 * _2766;
                        float _2768 = _2767 * _2767;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2779 = dot(vec3(_422, _425, _428), vec3(_2748, _2749, _2750));
                        float _4064 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2783 = dot(vec3(_422, _425, _428), vec3(_2775 * _2769, _2775 * _2770, _2775 * _2771));
                        float _4075 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2786 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2790 = ((_2786 * _2786) * (_2768 + (-1.0))) + 1.0;
                        float _2791 = _2726 * _2767;
                        float _2792 = _2791 * _2791;
                        float _2795 = ((1.0 - _2792) * _2716) + _2792;
                        float _4086 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2797 = 1.0 - _2767;
                        float _2807 = (0.5 / (((_2796 * ((_2782 * _2797) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _2797) + _2767) * _2782))) * _2796;
                        float _4097 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2818 = (((_2768 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_2790 * _2790) * ((_2733 * 2.1991131305694580078125) + 3.141590118408203125))) * _2722;
                        _2570 = (_2737 * _2685.x) + _2643;
                        _2571 = (_2737 * _2685.y) + _2644;
                        _2572 = (_2737 * _2685.z) + _2645;
                        _2567 = (_2818 * _2702.x) + _2640;
                        _2568 = (_2818 * _2702.y) + _2641;
                        _2569 = (_2818 * _2702.z) + _2642;
                        if (_2647 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2640 = _2567;
                            _2641 = _2568;
                            _2642 = _2569;
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2647;
                        }
                    }
                    frontier_phi_66_pred = _2567;
                    frontier_phi_66_pred_1 = _2572;
                    frontier_phi_66_pred_2 = _2571;
                    frontier_phi_66_pred_3 = _2570;
                    frontier_phi_66_pred_4 = _2569;
                    frontier_phi_66_pred_5 = _2568;
                }
                _2343 = frontier_phi_66_pred;
                _2353 = frontier_phi_66_pred_1;
                _2351 = frontier_phi_66_pred_2;
                _2349 = frontier_phi_66_pred_3;
                _2347 = frontier_phi_66_pred_4;
                _2345 = frontier_phi_66_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2343;
                    _2496 = _2345;
                    _2497 = _2347;
                    _2498 = _2349;
                    _2499 = _2351;
                    _2500 = _2353;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2359) & _2241) == 0u)
        {
            _2463 = _2342;
            _2465 = _2344;
            _2467 = _2346;
            _2469 = _2348;
            _2471 = _2350;
            _2473 = _2352;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2489 = _2488 * _2195;
            float _2490 = _2488 * _2196;
            float _2491 = _2488 * _2197;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2623 = _2342;
                float _2624 = _2344;
                float _2625 = _2346;
                float _2626 = _2348;
                float _2627 = _2350;
                float _2628 = _2352;
                uint _2629 = _2359;
                uint _2638;
                bool _2639;
                for (;;)
                {
                    _2638 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2629 << 2u)) >> 2u)).x;
                    _2639 = _2638 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2639)
                    {
                        frontier_phi_77_pred = _2628;
                        frontier_phi_77_pred_1 = _2627;
                        frontier_phi_77_pred_2 = _2626;
                        frontier_phi_77_pred_3 = _2625;
                        frontier_phi_77_pred_4 = _2624;
                        frontier_phi_77_pred_5 = _2623;
                    }
                    else
                    {
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _2845 = _2623;
                        float _2846 = _2624;
                        float _2847 = _2625;
                        float _2848 = _2626;
                        float _2849 = _2627;
                        float _2850 = _2628;
                        uint _2851 = _2638;
                        uint _2852;
                        vec4 _2877;
                        float _2878;
                        vec4 _2893;
                        vec3 _2905;
                        vec4 _2921;
                        vec4 _2937;
                        float _2984;
                        bool _2985;
                        for (;;)
                        {
                            uint _2862 = ((_2629 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2851));
                            _2852 = (_2851 + 4294967295u) & _2851;
                            uint _2864 = _2862 * 40u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2878 = _2877.w;
                            uint _2880 = (_2862 * 40u) + 4u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2862 * 40u) + 8u;
                            _2905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x));
                            uint _2908 = (_2862 * 40u) + 16u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2862 * 40u) + 20u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2862 * 40u) + 24u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2959 = (_2862 * 40u) + 28u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2984 = fma(_2197, _2972.z, fma(_2196, _2972.y, _2972.x * _2195)) + _2972.w;
                            _2985 = !((fma(_2197, _2953.z, fma(_2196, _2953.y, _2953.x * _2195)) + _2953.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2985)
                            {
                                float _3012 = _2877.x - _2195;
                                float _3013 = _2877.y - _2196;
                                float _3014 = _2877.z - _2197;
                                float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                                float _3018 = inversesqrt(_3015);
                                float _3019 = _3018 * _3012;
                                float _3020 = _3018 * _3013;
                                float _3021 = _3018 * _3014;
                                float _3025 = 1.0 - (_3015 / (_2878 * _2878));
                                float _4108 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3030 = sqrt(_3015) * _2893.w;
                                float _3032 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                                float _3033 = _3032 * _3032;
                                float _3036 = ((1.0 - _3033) * dot(vec3(_3019, _3020, _3021), vec3(_422, _425, _428))) + _3033;
                                float _3039 = _3030 * _3030;
                                float _3043 = (fma(_2197, _2921.z, fma(_2196, _2921.y, _2921.x * _2195)) + _2921.w) / _2984;
                                float _3044 = (fma(_2197, _2937.z, fma(_2196, _2937.y, _2937.x * _2195)) + _2937.w) / _2984;
                                float _3048 = 1.0 - dot(vec2(_3043, _3044), vec2(_3043, _3044));
                                float _4124 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3050 = _3049 * (((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3026) / ((_3039 * 0.699999988079071044921875) + 1.0));
                                float _3062 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                                float _3063 = 1.0 - _497;
                                float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                                float _3071 = _3070 * _3070;
                                float _3072 = _3071 * _3071;
                                float _3073 = _3019 - _2489;
                                float _3074 = _3020 - _2490;
                                float _3075 = _3021 - _2491;
                                float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                                float _3083 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2489, (-0.0) - _2490, (-0.0) - _2491));
                                float _4135 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3087 = dot(vec3(_422, _425, _428), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                                float _4146 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                                float _3095 = _3032 * _3071;
                                float _3096 = _3095 * _3095;
                                float _3102 = ((1.0 - _3096) * dot(vec3(_422, _425, _428), vec3(_3019, _3020, _3021))) + _3096;
                                float _4157 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3104 = 1.0 - _3071;
                                float _3114 = (0.5 / (((_3103 * ((_3086 * _3104) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3071) * _3086))) * _3103;
                                float _4168 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3124 = (_3049 * _3026) * (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_3094 * _3094) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3050 * _2893.y;
                                frontier_phi_83_pred_1 = _3050 * _2893.x;
                                frontier_phi_83_pred_2 = _3124 * _2905.z;
                                frontier_phi_83_pred_3 = _3124 * _2905.y;
                                frontier_phi_83_pred_4 = _3124 * _2905.x;
                                frontier_phi_83_pred_5 = _3050 * _2893.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3132 = frontier_phi_83_pred;
                            _3131 = frontier_phi_83_pred_1;
                            _3130 = frontier_phi_83_pred_2;
                            _3129 = frontier_phi_83_pred_3;
                            _3128 = frontier_phi_83_pred_4;
                            _3133 = frontier_phi_83_pred_5;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            if (_2852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2852;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2837;
                        frontier_phi_77_pred_1 = _2836;
                        frontier_phi_77_pred_2 = _2835;
                        frontier_phi_77_pred_3 = _2834;
                        frontier_phi_77_pred_4 = _2833;
                        frontier_phi_77_pred_5 = _2832;
                    }
                    _2474 = frontier_phi_77_pred;
                    _2472 = frontier_phi_77_pred_1;
                    _2470 = frontier_phi_77_pred_2;
                    _2468 = frontier_phi_77_pred_3;
                    _2466 = frontier_phi_77_pred_4;
                    _2464 = frontier_phi_77_pred_5;
                    uint _2630 = _2629 + 1u;
                    if (_2630 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2623 = _2464;
                        _2624 = _2466;
                        _2625 = _2468;
                        _2626 = _2470;
                        _2627 = _2472;
                        _2628 = _2474;
                        _2629 = _2630;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2468;
                frontier_phi_58_59_ladder_1 = _2474;
                frontier_phi_58_59_ladder_2 = _2472;
                frontier_phi_58_59_ladder_3 = _2470;
                frontier_phi_58_59_ladder_4 = _2466;
                frontier_phi_58_59_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_58_59_ladder = _2346;
                frontier_phi_58_59_ladder_1 = _2352;
                frontier_phi_58_59_ladder_2 = _2350;
                frontier_phi_58_59_ladder_3 = _2348;
                frontier_phi_58_59_ladder_4 = _2344;
                frontier_phi_58_59_ladder_5 = _2342;
            }
            _2463 = frontier_phi_58_59_ladder_5;
            _2465 = frontier_phi_58_59_ladder_4;
            _2467 = frontier_phi_58_59_ladder;
            _2469 = frontier_phi_58_59_ladder_3;
            _2471 = frontier_phi_58_59_ladder_2;
            _2473 = frontier_phi_58_59_ladder_1;
        }
        float _2478 = isnan(1.0) ? _481 : (isnan(_481) ? 1.0 : min(_481, 1.0));
        _2254 = (_2478 * _2469) + _1690;
        _2256 = (_2478 * _2471) + _1692;
        _2258 = (_2478 * _2473) + _1694;
        _2260 = ((_2463 * _466) * _2478) + _2035;
        _2262 = ((_2465 * _468) * _2478) + _2037;
        _2264 = ((_2467 * _469) * _2478) + _2039;
    }
    else
    {
        _2254 = _1690;
        _2256 = _1692;
        _2258 = _1694;
        _2260 = _2035;
        _2262 = _2037;
        _2264 = _2039;
    }
    float _4184 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4195 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4206 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2281 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2254 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _481))) + ((_2260 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    float _2282 = ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2256 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _481))) + ((_2262 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    float _2283 = ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2258 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _481))) + ((_2264 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1323)) * cbPerFrame._m0[3u].x);
    uint _2284 = _441 + 6u;
    float _2292 = _402 / cbSceneParam._m0[86u].x;
    float _2293 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2307 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2309 = _2307.x;
    float _2310 = _2307.y;
    float _2311 = _2307.z;
    float _2312 = _2307.w;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2368 = _2367 / _321;
        float _2379 = _2368 * _374;
        float _2380 = _375 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2383 = _2368 * _376;
        float _2385 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2386 = _2385 + cbSceneParam._m0[79u].w;
        float _2387 = cbSceneParam._m0[79u].w - _2380;
        float _2393 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2383 * _2383));
        float _2396 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2393;
        float _2401 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2403 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2580;
        if (abs((_2381 - _2385) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2580 = ((((_2386 > 0.0) ? exp2(_2401 * _2386) : (2.0 - exp2(_2403 * _2386))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2396;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : max(_2386, _2387));
            float _2526 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : min(_2386, _2387));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2580 = ((abs(_2393 / _2381) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2401 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2401 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2403 * _2535) - exp2(_2403 * _2536)) * _2524))) + (_2396 * cbSceneParam._m0[80u].z);
        }
        vec4 _2582 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, 1.0), 0.0);
        float _2591 = exp2((_2580 * (-1.44269502162933349609375)) * (1.0 - _2582.w));
        float _2592 = log2(_2591);
        float _2608 = log2(_2312);
        _2405 = (exp2(_2608 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].x)) * _2582.x) / cbSceneParam._m0[78u].x)) + _2309;
        _2407 = (exp2(_2608 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].y)) * _2582.y) / cbSceneParam._m0[78u].y)) + _2310;
        _2409 = (exp2(_2608 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].z)) * _2582.z) / cbSceneParam._m0[78u].z)) + _2311;
        _2411 = _2591 * _2312;
    }
    else
    {
        _2405 = _2309;
        _2407 = _2310;
        _2409 = _2311;
        _2411 = _2312;
    }
    bool _2618;
    vec4 _2421;
    vec4 _2443;
    float _2445;
    float _2449;
    float _2450;
    float _2451;
    float _2452;
    bool _2462;
    for (;;)
    {
        _2421 = cbMatDynParam._m0[0u];
        float _2423 = roundEven(_2421.y);
        bool _2424 = _2423 == 3.0;
        float _2425 = log2(_2411);
        float _2432 = exp2(_2425 * cbSceneParam._m0[78u].x) * _2281;
        float _2433 = exp2(_2425 * cbSceneParam._m0[78u].y) * _2282;
        float _2434 = exp2(_2425 * cbSceneParam._m0[78u].z) * _2283;
        float _2441 = _390 + (-0.5);
        _2443 = cbMtdParam._m0[1u];
        _2445 = _2443.y * _2441;
        float _2448 = (_2423 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2449 = _2448 * (_2424 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2405)));
        _2450 = _2448 * (_2424 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2407)));
        _2451 = _2448 * (_2424 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2409)));
        _2452 = _2441 * 0.999000012874603271484375;
        _2462 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2462)
        {
            if ((cbInstanceData._m0[_441 + 7u].x + _2452) < 0.5)
            {
                _2618 = true;
                break;
            }
        }
        uint _2559 = _442 + uint(_2421.w);
        if ((cbInstanceData._m0[_2559].w < 1.0) && ((cbInstanceData._m0[_2559].w + _2452) < 0.5))
        {
            _2618 = true;
            break;
        }
        if ((_2445 + 1.0) < _2443.x)
        {
            _2618 = true;
            break;
        }
        _2618 = false;
        break;
    }
    float _2823;
    if (_2618)
    {
        discard_state = true;
        _2823 = 0.0;
    }
    else
    {
        _2823 = cbInstanceData._m0[_2284].w;
    }
    SV_Target.x = _2449;
    SV_Target.y = _2450;
    SV_Target.z = _2451;
    SV_Target.w = _2823;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2284].w;
    discard_exit();
}


