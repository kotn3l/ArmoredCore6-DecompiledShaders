#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _962;
float _3613;
float _3614;
float _3615;
float _3616;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _305 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3625 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[10u].x) - _249)) + _249;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[10u].y) - _250)) + _250;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[10u].z) - _251)) + _251;
    vec4 _332 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = (_332.x * 2.0) + (-1.0);
    float _342 = (_332.y * 2.0) + (-1.0);
    float _343 = dot(vec2(_340, _342), vec2(_340, _342));
    float _3636 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    float _349 = _332.z * cbMtdParam._m0[13u].y;
    vec4 _362 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _376 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_362.z * cbMtdParam._m0[13u].x) - _349)) + _349;
    float _382 = ((((_362.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _340;
    float _383 = ((((_362.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _342;
    float _386 = fma(_348, _213 * NORMAL.x, fma(_383, _220 * TANGENT.x, (_206 * _198) * _382));
    float _389 = fma(_348, _213 * NORMAL.y, fma(_383, _220 * TANGENT.y, (_206 * _199) * _382));
    float _392 = fma(_348, _213 * NORMAL.z, fma(_383, _220 * TANGENT.z, (_206 * _200) * _382));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    float _397 = _396 * _386;
    float _398 = _396 * _389;
    float _399 = _396 * _392;
    float _3647 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _400 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3669 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3680 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _419 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _470 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _460);
    float _471 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _460);
    float _472 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _460);
    float _476 = inversesqrt(dot(vec3(_470, _471, _472), vec3(_470, _471, _472)));
    float _477 = _470 * _476;
    float _478 = _471 * _476;
    float _479 = _472 * _476;
    vec4 _484 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _486 = _484.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _642 = sqrt(((_470 * _470) + (_471 * _471)) + (_472 * _472));
        float _648 = (cbMatDynParam._m0[5u].x * _642) + cbMatDynParam._m0[5u].y;
        float _3691 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _653 = (cbMatDynParam._m0[5u].z * _642) + cbMatDynParam._m0[5u].w;
        float _3702 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) - _649)) + _649) < ((_486 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _518 = fma(_399, cbSceneParam._m0[5u].z, fma(_398, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _397));
    float _521 = fma(_399, cbSceneParam._m0[6u].z, fma(_398, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _397));
    float _524 = fma(_399, cbSceneParam._m0[7u].z, fma(_398, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _397));
    uint _537 = uint(roundEven(NORMAL.w)) * 13u;
    uint _538 = _537 + 9u;
    uint _539 = _538 + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3713 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _562 = _559.x * TEXCOORD_5.w;
    float _563 = dot(vec3(_397, _398, _399), vec3(_477, _478, _479));
    float _566 = _563 * 2.0;
    float _570 = (_566 * _397) - _477;
    float _571 = (_566 * _398) - _478;
    float _572 = (_566 * _399) - _479;
    float _576 = abs(dot(vec3(_477, _478, _479), vec3(_397, _398, _399)));
    float _3746 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _578 = sqrt(_400);
    float _591 = exp2((_578 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_578 * 3.0));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = fma(_631, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623));
        float _690 = fma(_631, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623));
        float _694 = fma(_631, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623));
        float _719 = _623 + _397;
        float _720 = _627 + _398;
        float _721 = _631 + _399;
        float _731 = fma(_721, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719)) - _686;
        float _732 = fma(_721, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719)) - _690;
        float _733 = fma(_721, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719)) - _694;
        float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
        float _750 = ((_737 * _731) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_686 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_737 * _732) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_690 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_737 * _733) / cbModelParam._m0[34u].z) + ((((((_694 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(_397, _398, _399), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3794 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_397, _398, _399), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3827 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_397, _398, _399), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3860 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1005 = fma(_631, cbModelParam._m0[30u].z, fma(_627, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _623));
        float _1009 = fma(_631, cbModelParam._m0[31u].z, fma(_627, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _623));
        float _1013 = fma(_631, cbModelParam._m0[32u].z, fma(_627, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _623));
        float _1036 = _623 + _397;
        float _1037 = _627 + _398;
        float _1038 = _631 + _399;
        float _1048 = fma(_1038, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036)) - _1005;
        float _1049 = fma(_1038, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036)) - _1009;
        float _1050 = fma(_1038, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036)) - _1013;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1005 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1009 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[35u].z) + ((((((_1013 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1104 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1071.x + (-0.5));
        float _1106 = _1104 * (_1071.y + (-0.5));
        float _1107 = _1104 * (_1071.z + (-0.5));
        float _1114 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1078.x + (-0.5));
        float _1116 = _1114 * (_1078.y + (-0.5));
        float _1117 = _1114 * (_1078.z + (-0.5));
        float _1124 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1085.x + (-0.5));
        float _1126 = _1124 * (_1085.y + (-0.5));
        float _1127 = _1124 * (_1085.z + (-0.5));
        float _1134 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1092.x + (-0.5));
        float _1136 = _1134 * (_1092.y + (-0.5));
        float _1137 = _1134 * (_1092.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_397, _398, _399), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3923 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1168 + 1.0))) + _1173) * _1138;
        float _1183 = _1106 * 0.5;
        float _1184 = _1116 * 0.5;
        float _1185 = _1126 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_397, _398, _399), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3956 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1210 + 1.0))) + _1215) * _1139;
        float _1225 = _1107 * 0.5;
        float _1226 = _1117 * 0.5;
        float _1227 = _1127 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_397, _398, _399), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3989 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1252 + 1.0))) + _1257) * _1140;
        _1274 = _1107;
        _1275 = _1106;
        _1276 = _1105;
        _1277 = _1117;
        _1278 = _1116;
        _1279 = _1115;
        _1280 = _1127;
        _1281 = _1126;
        _1282 = _1125;
        _1283 = _1140;
        _1284 = _1139;
        _1285 = _1138;
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _962;
        _1275 = _962;
        _1276 = _962;
        _1277 = _962;
        _1278 = _962;
        _1279 = _962;
        _1280 = _962;
        _1281 = _962;
        _1282 = _962;
        _1283 = _962;
        _1284 = _962;
        _1285 = _962;
        _1286 = 0.0;
        _1287 = 0.0;
        _1288 = 0.0;
    }
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _974)) + _974;
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _975)) + _975;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _976)) + _976;
    float _1321 = fma(_1300, cbSceneParam._m0[89u].z, fma(_1299, cbSceneParam._m0[89u].y, _1298 * cbSceneParam._m0[89u].x));
    float _1324 = fma(_1300, cbSceneParam._m0[90u].z, fma(_1299, cbSceneParam._m0[90u].y, _1298 * cbSceneParam._m0[90u].x));
    float _1327 = fma(_1300, cbSceneParam._m0[91u].z, fma(_1299, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1298));
    float _1342 = _570 * 0.5;
    float _1343 = _571 * 0.5;
    float _1344 = _572 * 0.5;
    float _1345 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1348 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1351 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1385;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1358 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_961, _965, _968, _971));
        float _1362 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_963, _966, _969, _972));
        float _1366 = dot(vec4(_1342, _1343, _1344, 1.0), vec4(_964, _967, _970, _973));
        float _1373 = dot(vec4(cbModelParam._m0[39u]), vec4(_1342, _1343, _1344, 1.0));
        _1385 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1373) ? 0.0 : (isnan(0.0) ? _1373 : max(0.0, _1373))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1385 = 1.0;
    }
    float _1396;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1387 = dot(vec4(cbModelParam._m0[40u]), vec4(_1342, _1343, _1344, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)), isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1387) ? 0.0 : (isnan(0.0) ? _1387 : max(0.0, _1387))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1400 = (_1396 * cbModelParam._m0[1u].x) + (_1385 * (1.0 - cbModelParam._m0[1u].x));
    float _1410 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _400);
    float _1411 = isnan(_1410) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1410 : min(cbModelParam._m0[25u].z, _1410));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1459 = fma(_631, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623)) + cbModelParam._m0[13u].w;
        float _1463 = fma(_631, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623)) + cbModelParam._m0[14u].w;
        float _1467 = fma(_631, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623)) + cbModelParam._m0[15u].w;
        float _1470 = fma(_572, cbModelParam._m0[13u].z, fma(_571, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570));
        float _1473 = fma(_572, cbModelParam._m0[14u].z, fma(_571, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570));
        float _1476 = fma(_572, cbModelParam._m0[15u].z, fma(_571, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570));
        float _1504;
        if (_1470 > 0.0)
        {
            _1504 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1504 = frontier_phi_17_15_ladder;
        }
        float _1677;
        if (_1473 > 0.0)
        {
            _1677 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1677 = frontier_phi_26_22_ladder;
        }
        float _1973;
        if (_1476 > 0.0)
        {
            _1973 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1973 = frontier_phi_38_33_ladder;
        }
        float _1975 = isnan(_1677) ? _1504 : (isnan(_1504) ? _1677 : min(_1504, _1677));
        float _1976 = isnan(_1973) ? _1975 : (isnan(_1975) ? _1973 : min(_1975, _1973));
        float _1980 = (_1976 * _1470) + _1459;
        float _1981 = (_1976 * _1473) + _1463;
        float _1982 = (_1976 * _1476) + _1467;
        float _1983 = _1976 * 9.9999997473787516355514526367188e-05;
        float _1985 = (-1.0) - _1983;
        float _1987 = _1983 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1982 > _1987) || ((_1982 < _1985) || ((_1981 > _1987) || ((_1981 < _1985) || ((_1980 < _1985) || (_1980 > _1987))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2127 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1982, cbModelParam._m0[9u].z, fma(_1981, cbModelParam._m0[9u].y, _1980 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1982, cbModelParam._m0[10u].z, fma(_1981, cbModelParam._m0[10u].y, _1980 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1982, cbModelParam._m0[11u].z, fma(_1981, cbModelParam._m0[11u].y, _1980 * cbModelParam._m0[11u].x))), _1411);
            frontier_phi_16_38_ladder = _2127.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2127.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2127.x * cbModelParam._m0[1u].y;
        }
        _1492 = frontier_phi_16_38_ladder_2;
        _1494 = frontier_phi_16_38_ladder_1;
        _1496 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_570, _571, _572), _1411);
        _1492 = _1480.x * cbModelParam._m0[1u].y;
        _1494 = _1480.y * cbModelParam._m0[1u].y;
        _1496 = _1480.z * cbModelParam._m0[1u].y;
    }
    float _1500 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _400);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1500 : min(cbModelParam._m0[25u].w, _1500));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1558 = fma(_631, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623)) + cbModelParam._m0[21u].w;
        float _1562 = fma(_631, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623)) + cbModelParam._m0[22u].w;
        float _1566 = fma(_631, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623)) + cbModelParam._m0[23u].w;
        float _1569 = fma(_572, cbModelParam._m0[21u].z, fma(_571, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570));
        float _1572 = fma(_572, cbModelParam._m0[22u].z, fma(_571, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570));
        float _1575 = fma(_572, cbModelParam._m0[23u].z, fma(_571, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570));
        float _1682;
        if (_1569 > 0.0)
        {
            _1682 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1682 = frontier_phi_28_24_ladder;
        }
        float _2000;
        if (_1572 > 0.0)
        {
            _2000 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2000 = frontier_phi_40_35_ladder;
        }
        float _2327;
        if (_1575 > 0.0)
        {
            _2327 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2327 = frontier_phi_50_47_ladder;
        }
        float _2329 = isnan(_2000) ? _1682 : (isnan(_1682) ? _2000 : min(_1682, _2000));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1569) + _1558;
        float _2335 = (_2330 * _1572) + _1562;
        float _2336 = (_2330 * _1575) + _1566;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2337;
        float _2340 = _2337 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2336 > _2340) || ((_2336 < _2338) || ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 < _2338) || (_2334 > _2340))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2336, cbModelParam._m0[17u].z, fma(_2335, cbModelParam._m0[17u].y, _2334 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2336, cbModelParam._m0[18u].z, fma(_2335, cbModelParam._m0[18u].y, _2334 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2336, cbModelParam._m0[19u].z, fma(_2335, cbModelParam._m0[19u].y, _2334 * cbModelParam._m0[19u].x))), _1501);
            frontier_phi_25_50_ladder = _2454.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2454.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2454.x * cbModelParam._m0[1u].z;
        }
        _1594 = frontier_phi_25_50_ladder_2;
        _1596 = frontier_phi_25_50_ladder_1;
        _1598 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_570, _571, _572), _1501);
        _1594 = _1578.x * cbModelParam._m0[1u].z;
        _1596 = _1578.y * cbModelParam._m0[1u].z;
        _1598 = _1578.z * cbModelParam._m0[1u].z;
    }
    float _1610 = ((((1.0 - _591) * ((_578 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_591 * _578)) * _562;
    float _1611 = _1610 * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1612 = _1610 * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1613 = _1610 * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1616 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, _1611 * cbSceneParam._m0[91u].x));
    float _1656 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1664 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1669 = _1656 / _1668;
    float _1670 = _1660 / _1668;
    float _1671 = _1664 / _1668;
    float _1818;
    float _1819;
    float _1820;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1698 = ((uint(_1671 > cbSceneParam._m0[59u].y) + uint(_1671 > cbSceneParam._m0[59u].x)) + uint(_1671 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1699 = _1698 + 43u;
        uint _1707 = _1698 + 44u;
        uint _1715 = _1698 + 45u;
        uint _1723 = _1698 + 46u;
        float _1734 = fma(_1668, cbSceneParam._m0[_1699].w, fma(_1664, cbSceneParam._m0[_1699].z, fma(_1660, cbSceneParam._m0[_1699].y, _1656 * cbSceneParam._m0[_1699].x)));
        float _1738 = fma(_1668, cbSceneParam._m0[_1707].w, fma(_1664, cbSceneParam._m0[_1707].z, fma(_1660, cbSceneParam._m0[_1707].y, _1656 * cbSceneParam._m0[_1707].x)));
        float _1746 = fma(_1668, cbSceneParam._m0[_1723].w, fma(_1664, cbSceneParam._m0[_1723].z, fma(_1660, cbSceneParam._m0[_1723].y, _1656 * cbSceneParam._m0[_1723].x)));
        float _1751 = cbSceneParam._m0[33u].z * _1746;
        float _1753 = cbSceneParam._m0[33u].w * _1746;
        float _1756 = fma(_1668, cbSceneParam._m0[_1715].w, fma(_1664, cbSceneParam._m0[_1715].z, fma(_1660, cbSceneParam._m0[_1715].y, _1656 * cbSceneParam._m0[_1715].x))) / _1746;
        float _1804 = (cbSceneParam._m0[33u].x - sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671))) * cbSceneParam._m0[33u].y;
        float _4115 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1811 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1751 + _1734) / _1746, (_1753 + _1738) / _1746), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1753 + _1734) / _1746, (_1738 - _1751) / _1746), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1734 - _1751) / _1746, (_1738 - _1753) / _1746), _1756), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1734 - _1753) / _1746, (_1751 + _1738) / _1746), _1756), 0.0)).x), vec4(0.25)));
        _1818 = 1.0 - (_1811 * cbSceneParam._m0[34u].x);
        _1819 = 1.0 - (_1811 * cbSceneParam._m0[34u].y);
        _1820 = 1.0 - (_1811 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1818 = 1.0;
        _1819 = 1.0;
        _1820 = 1.0;
    }
    float _1884;
    float _1886;
    float _1888;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1872 = fma(_1668, cbSceneParam._m0[63u].w, fma(_1664, cbSceneParam._m0[63u].z, fma(_1660, cbSceneParam._m0[63u].y, _1656 * cbSceneParam._m0[63u].x)));
        float _1873 = fma(_1668, cbSceneParam._m0[60u].w, fma(_1664, cbSceneParam._m0[60u].z, fma(_1660, cbSceneParam._m0[60u].y, _1656 * cbSceneParam._m0[60u].x))) / _1872;
        float _1874 = fma(_1668, cbSceneParam._m0[61u].w, fma(_1664, cbSceneParam._m0[61u].z, fma(_1660, cbSceneParam._m0[61u].y, _1656 * cbSceneParam._m0[61u].x))) / _1872;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1873 >= cbSceneParam._m0[64u].x) && (_1874 >= cbSceneParam._m0[64u].y)) && (_1873 <= cbSceneParam._m0[64u].z)) && (_1874 <= cbSceneParam._m0[64u].w))
        {
            float _2013 = fma(_1668, cbSceneParam._m0[62u].w, fma(_1664, cbSceneParam._m0[62u].z, fma(_1660, cbSceneParam._m0[62u].y, _1656 * cbSceneParam._m0[62u].x))) / _1872;
            float _2017 = isnan(cbSceneParam._m0[41u].w) ? _2013 : (isnan(_2013) ? cbSceneParam._m0[41u].w : max(_2013, cbSceneParam._m0[41u].w));
            float _2060 = (cbSceneParam._m0[33u].x - sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671))) * cbSceneParam._m0[33u].y;
            float _4131 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
            float _2067 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1873, cbSceneParam._m0[33u].w + _1874), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1873, _1874 - cbSceneParam._m0[33u].z), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1873 - cbSceneParam._m0[33u].z, _1874 - cbSceneParam._m0[33u].w), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1873 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1874), _2017), 0.0)).x), vec4(0.25)));
            float _2071 = 1.0 - (_2067 * cbSceneParam._m0[34u].x);
            float _2072 = 1.0 - (_2067 * cbSceneParam._m0[34u].y);
            float _2073 = 1.0 - (_2067 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2073) ? _1820 : (isnan(_1820) ? _2073 : min(_1820, _2073));
            frontier_phi_37_36_ladder_1 = isnan(_2072) ? _1819 : (isnan(_1819) ? _2072 : min(_1819, _2072));
            frontier_phi_37_36_ladder_2 = isnan(_2071) ? _1818 : (isnan(_1818) ? _2071 : min(_1818, _2071));
        }
        else
        {
            frontier_phi_37_36_ladder = _1820;
            frontier_phi_37_36_ladder_1 = _1819;
            frontier_phi_37_36_ladder_2 = _1818;
        }
        _1884 = frontier_phi_37_36_ladder_2;
        _1886 = frontier_phi_37_36_ladder_1;
        _1888 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1884 = _1818;
        _1886 = _1819;
        _1888 = _1820;
    }
    uvec4 _1893 = floatBitsToUint(cbInstanceData._m0[_537 + 5u]);
    uint _1895 = _1893.x * 14u;
    uint _1896 = _1895 + 13u;
    float _1903 = _562 + (-1.0);
    float _1908 = (cbLight._m0[_1896].x * _1903) + 1.0;
    float _1909 = (cbLight._m0[_1896].y * _1903) + 1.0;
    float _1910 = (cbLight._m0[_1896].z * _1903) + 1.0;
    float _1911 = (cbLight._m0[_1896].w * _1903) + 1.0;
    uint _1912 = _1895 + 5u;
    float _1918 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1922 = _1895 + 4u;
    float _1932 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1936 = _1895 | 1u;
    float _1947 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_397, _398, _399));
    float _1950 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_397, _398, _399));
    float _4167 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _4178 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1955 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1957 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _1964 = ((cbLight._m0[_1912].x * _1918) * _1957) + (((cbLight._m0[_1922].x * _1884) * _1932) * _1955);
    float _1965 = ((_1918 * cbLight._m0[_1912].y) * _1957) + (((cbLight._m0[_1922].y * _1886) * _1932) * _1955);
    float _1966 = ((_1918 * cbLight._m0[_1912].z) * _1957) + (((cbLight._m0[_1922].z * _1888) * _1932) * _1955);
    uvec4 _1970 = floatBitsToUint(cbLight._m0[_1895 + 12u]);
    bool _1972 = _1970.x == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_1972)
    {
        _2074 = _1964;
        _2076 = _1965;
        _2078 = _1966;
    }
    else
    {
        uint _2082 = _1895 + 6u;
        float _2098 = (dot(vec3(cbLight._m0[_1895 + 2u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _4189 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2101 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2074 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1964;
        _2076 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1965;
        _2078 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1966;
    }
    bool _2081 = _1970.y == 0u;
    float _2136;
    float _2138;
    float _2140;
    if (_2081)
    {
        _2136 = _2074;
        _2138 = _2076;
        _2140 = _2078;
    }
    else
    {
        uint _2298 = _1895 + 7u;
        float _2314 = (dot(vec3(cbLight._m0[_1895 + 3u].xyz), vec3(_397, _398, _399)) * 0.5) + 0.5;
        float _2315 = _2314 * _2314;
        float _4205 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2316 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2317 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2136 = (((cbLight._m0[_2298].x * 0.3183098733425140380859375) * _2316) * _2317) + _2074;
        _2138 = (((cbLight._m0[_2298].y * 0.3183098733425140380859375) * _2316) * _2317) + _2076;
        _2140 = (((cbLight._m0[_2298].z * 0.3183098733425140380859375) * _2316) * _2317) + _2078;
    }
    uint _2143 = _1895 + 8u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _400) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_1895].x + _477;
    float _2159 = cbLight._m0[_1895].y + _478;
    float _2160 = cbLight._m0[_1895].z + _479;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1895].xyz));
    float _4221 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _2172 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2173 = dot(vec3(_397, _398, _399), vec3(_2165, _2166, _2167));
    float _4243 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2177 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2165, _2166, _2167));
    float _4254 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2181 = _2157 * _2157;
    float _2185 = ((_2176 * _2176) * (_2181 + (-1.0))) + 1.0;
    float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2197 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2172 * ((_2171 * _2197) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2197) + _2157) * _2171))) * _2171;
    float _4265 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2181 / ((_2185 * _2185) * 3.141590118408203125));
    uint _2224 = _1895 + 9u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _400) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_1936].x + _477;
    float _2238 = cbLight._m0[_1936].y + _478;
    float _2239 = cbLight._m0[_1936].z + _479;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_1936].xyz));
    float _4276 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2251 = dot(vec3(_397, _398, _399), vec3(_2244, _2245, _2246));
    float _4287 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2255 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2244, _2245, _2246));
    float _4298 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2259 = _2236 * _2236;
    float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
    float _2272 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2273 = 1.0 - _2236;
    float _2283 = (0.5 / (((_2172 * ((_2250 * _2273) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2273) + _2236) * _2250))) * _2250;
    float _4309 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
    float _2295 = (((_2272 * cbLight._m0[_2224].x) * _2285) * _1918) + ((((cbLight._m0[_2143].x * _1884) * _2196) * _2210) * _1932);
    float _2296 = (((_2272 * cbLight._m0[_2224].y) * _2285) * _1918) + ((((cbLight._m0[_2143].y * _1886) * _2196) * _2210) * _1932);
    float _2297 = (((_2272 * cbLight._m0[_2224].z) * _2285) * _1918) + ((((cbLight._m0[_2143].z * _1888) * _2196) * _2210) * _1932);
    float _2353;
    float _2355;
    float _2357;
    if (_1972)
    {
        _2353 = _2295;
        _2355 = _2296;
        _2357 = _2297;
    }
    else
    {
        uint _2359 = _1895 + 2u;
        uint _2363 = _1895 + 10u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _400) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _477;
        float _2380 = cbLight._m0[_2359].y + _478;
        float _2381 = cbLight._m0[_2359].z + _479;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2359].xyz));
        float _4320 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2393 = dot(vec3(_397, _398, _399), vec3(_2386, _2387, _2388));
        float _4331 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4342 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2415 = 1.0 - _2378;
        float _2425 = (0.5 / (((_2172 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2415) + _2378) * _2392))) * _2392;
        float _4353 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2353 = (((_2414 * cbLight._m0[_2363].x) * _2427) * _2428) + _2295;
        _2355 = (((_2414 * cbLight._m0[_2363].y) * _2427) * _2428) + _2296;
        _2357 = (((_2414 * cbLight._m0[_2363].z) * _2427) * _2428) + _2297;
    }
    float _2459;
    float _2461;
    float _2463;
    if (_2081)
    {
        _2459 = _2353;
        _2461 = _2355;
        _2463 = _2357;
    }
    else
    {
        uint _2470 = _1895 + 3u;
        uint _2474 = _1895 + 11u;
        float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _400) * 0.949999988079071044921875);
        float _2489 = _2488 * _2488;
        float _2490 = cbLight._m0[_2470].x + _477;
        float _2491 = cbLight._m0[_2470].y + _478;
        float _2492 = cbLight._m0[_2470].z + _479;
        float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
        float _2497 = _2496 * _2490;
        float _2498 = _2496 * _2491;
        float _2499 = _2496 * _2492;
        float _2500 = dot(vec3(_397, _398, _399), vec3(cbLight._m0[_2470].xyz));
        float _4369 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2504 = dot(vec3(_397, _398, _399), vec3(_2497, _2498, _2499));
        float _4380 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2507 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2508 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2497, _2498, _2499));
        float _4391 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2512 = _2489 * _2489;
        float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
        float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2526 = 1.0 - _2489;
        float _2536 = (0.5 / (((_2172 * ((_2503 * _2526) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2172 * _2526) + _2489) * _2503))) * _2503;
        float _4402 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2459 = (((_2525 * cbLight._m0[_2474].x) * _2538) * _2539) + _2353;
        _2461 = (((_2525 * cbLight._m0[_2474].y) * _2538) * _2539) + _2355;
        _2463 = (((_2525 * cbLight._m0[_2474].z) * _2538) * _2539) + _2357;
    }
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_1893.y == 0u)
    {
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.x;
        uint _2572 = uint((float(_2560.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2561))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2561)));
        float _2582 = (log2(_1671 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        uint _2586 = uint(isnan(14.0) ? _2583 : (isnan(_2583) ? 14.0 : min(_2583, 14.0)));
        uvec4 _2591 = texelFetch(g_lightClusterGridBuffer, int(((_2586 << 2u) + (_2572 << 6u)) >> 2u));
        uint _2592 = _2591.x;
        uint _2593 = _2560.z;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((((1u << ((_2593 >> 4u) & 15u)) + 4294967295u) & _2592) == 0u) || ((_2593 & 240u) == 0u))
        {
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
        }
        else
        {
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2841)
                {
                    frontier_phi_71_pred = _2830;
                    frontier_phi_71_pred_1 = _2829;
                    frontier_phi_71_pred_2 = _2828;
                    frontier_phi_71_pred_3 = _2827;
                    frontier_phi_71_pred_4 = _2826;
                    frontier_phi_71_pred_5 = _2825;
                }
                else
                {
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    uint _2976;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2840;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    for (;;)
                    {
                        uint _2980 = uint(findLSB(_2976)) + (_2831 << 5u);
                        uint _2977 = (_2976 + 4294967295u) & _2976;
                        uint _2982 = _2980 * 48u;
                        vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3002 = (_2980 * 48u) + 4u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3021 = (_2980 * 48u) + 8u;
                        vec3 _3032 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x));
                        float _3036 = _2996.x - _1669;
                        float _3037 = _2996.y - _1670;
                        float _3038 = _2996.z - _1671;
                        float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                        float _3042 = inversesqrt(_3039);
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3046 = dot(vec3(_518, _521, _524), vec3(_3043, _3044, _3045));
                        float _3051 = 1.0 - (_3039 * _2996.w);
                        float _4428 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3052 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3053 = sqrt(_3039) * _3015.w;
                        float _3056 = 1.39999997615814208984375 / (_3053 + 1.39999997615814208984375);
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _3046) + _3057;
                        float _3063 = _3053 * _3053;
                        float _3067 = ((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3052) / ((_3063 * 0.699999988079071044921875) + 1.0);
                        float _3071 = (-0.0) - _1669;
                        float _3072 = (-0.0) - _1670;
                        float _3073 = (-0.0) - _1671;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3087 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                        float _3088 = 1.0 - _578;
                        float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                        float _3096 = _3095 * _3095;
                        float _3097 = _3096 * _3096;
                        float _3098 = _3078 + _3043;
                        float _3099 = _3079 + _3044;
                        float _3100 = _3080 + _3045;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3108 = dot(vec3(_518, _521, _524), vec3(_3078, _3079, _3080));
                        float _4444 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3112 = dot(vec3(_518, _521, _524), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                        float _4455 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                        float _3120 = _3056 * _3096;
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3046) + _3121;
                        float _4466 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3126 = 1.0 - _3096;
                        float _3136 = (0.5 / (((_3125 * ((_3111 * _3126) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3096) * _3111))) * _3125;
                        float _4477 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3147 = (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3119 * _3119) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125))) * _3052;
                        _2900 = (_3067 * _3015.x) + _2973;
                        _2901 = (_3067 * _3015.y) + _2974;
                        _2902 = (_3067 * _3015.z) + _2975;
                        _2897 = (_3147 * _3032.x) + _2970;
                        _2898 = (_3147 * _3032.y) + _2971;
                        _2899 = (_3147 * _3032.z) + _2972;
                        if (_2977 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2977;
                        }
                    }
                    frontier_phi_71_pred = _2902;
                    frontier_phi_71_pred_1 = _2901;
                    frontier_phi_71_pred_2 = _2900;
                    frontier_phi_71_pred_3 = _2899;
                    frontier_phi_71_pred_4 = _2898;
                    frontier_phi_71_pred_5 = _2897;
                }
                _2683 = frontier_phi_71_pred;
                _2681 = frontier_phi_71_pred_1;
                _2679 = frontier_phi_71_pred_2;
                _2677 = frontier_phi_71_pred_3;
                _2675 = frontier_phi_71_pred_4;
                _2673 = frontier_phi_71_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2673;
                    _2826 = _2675;
                    _2827 = _2677;
                    _2828 = _2679;
                    _2829 = _2681;
                    _2830 = _2683;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
        }
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.z;
        uint _2689 = (_2687 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2689) & _2592) == 0u)
        {
            _2793 = _2672;
            _2795 = _2674;
            _2797 = _2676;
            _2799 = _2678;
            _2801 = _2680;
            _2803 = _2682;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
            float _2819 = _2818 * _1669;
            float _2820 = _2818 * _1670;
            float _2821 = _2818 * _1671;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2689 < ((_2687 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2953 = _2672;
                float _2954 = _2674;
                float _2955 = _2676;
                float _2956 = _2678;
                float _2957 = _2680;
                float _2958 = _2682;
                uint _2959 = _2689;
                uint _2968;
                bool _2969;
                for (;;)
                {
                    _2968 = texelFetch(g_lightClassification, int((((_2586 << 5u) + (_2572 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                    _2969 = _2968 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2969)
                    {
                        frontier_phi_82_pred = _2958;
                        frontier_phi_82_pred_1 = _2957;
                        frontier_phi_82_pred_2 = _2956;
                        frontier_phi_82_pred_3 = _2955;
                        frontier_phi_82_pred_4 = _2954;
                        frontier_phi_82_pred_5 = _2953;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        float _3177 = _2956;
                        float _3178 = _2957;
                        float _3179 = _2958;
                        uint _3180 = _2968;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3250;
                        vec4 _3266;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3191 = ((_2959 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3237 = (_3191 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3191 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3191 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3191 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_1671, _3301.z, fma(_1670, _3301.y, _3301.x * _1669)) + _3301.w;
                            _3314 = !((fma(_1671, _3282.z, fma(_1670, _3282.y, _3282.x * _1669)) + _3282.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3206.x - _1669;
                                float _3342 = _3206.y - _1670;
                                float _3343 = _3206.z - _1671;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3207 * _3207));
                                float _4488 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3359 = sqrt(_3344) * _3222.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_518, _521, _524))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_1671, _3250.z, fma(_1670, _3250.y, _3250.x * _1669)) + _3250.w) / _3313;
                                float _3373 = (fma(_1671, _3266.z, fma(_1670, _3266.y, _3266.x * _1669)) + _3266.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4504 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _578;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2819;
                                float _3403 = _3349 - _2820;
                                float _3404 = _3350 - _2821;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_518, _521, _524), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4515 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3416 = dot(vec3(_518, _521, _524), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4526 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_518, _521, _524), vec3(_3348, _3349, _3350))) + _3425;
                                float _4537 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4548 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3379 * _3222.z;
                                frontier_phi_88_pred_1 = _3379 * _3222.y;
                                frontier_phi_88_pred_2 = _3379 * _3222.x;
                                frontier_phi_88_pred_3 = _3453 * _3234.z;
                                frontier_phi_88_pred_4 = _3453 * _3234.y;
                                frontier_phi_88_pred_5 = _3453 * _3234.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_88_pred;
                            _3461 = frontier_phi_88_pred_1;
                            _3460 = frontier_phi_88_pred_2;
                            _3459 = frontier_phi_88_pred_3;
                            _3458 = frontier_phi_88_pred_4;
                            _3457 = frontier_phi_88_pred_5;
                            _3164 = _3460 + _3177;
                            _3165 = _3461 + _3178;
                            _3166 = _3462 + _3179;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3166;
                        frontier_phi_82_pred_1 = _3165;
                        frontier_phi_82_pred_2 = _3164;
                        frontier_phi_82_pred_3 = _3163;
                        frontier_phi_82_pred_4 = _3162;
                        frontier_phi_82_pred_5 = _3161;
                    }
                    _2804 = frontier_phi_82_pred;
                    _2802 = frontier_phi_82_pred_1;
                    _2800 = frontier_phi_82_pred_2;
                    _2798 = frontier_phi_82_pred_3;
                    _2796 = frontier_phi_82_pred_4;
                    _2794 = frontier_phi_82_pred_5;
                    uint _2960 = _2959 + 1u;
                    if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2953 = _2794;
                        _2954 = _2796;
                        _2955 = _2798;
                        _2956 = _2800;
                        _2957 = _2802;
                        _2958 = _2804;
                        _2959 = _2960;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2800;
                frontier_phi_63_64_ladder_1 = _2804;
                frontier_phi_63_64_ladder_2 = _2802;
                frontier_phi_63_64_ladder_3 = _2798;
                frontier_phi_63_64_ladder_4 = _2796;
                frontier_phi_63_64_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_63_64_ladder = _2678;
                frontier_phi_63_64_ladder_1 = _2682;
                frontier_phi_63_64_ladder_2 = _2680;
                frontier_phi_63_64_ladder_3 = _2676;
                frontier_phi_63_64_ladder_4 = _2674;
                frontier_phi_63_64_ladder_5 = _2672;
            }
            _2793 = frontier_phi_63_64_ladder_5;
            _2795 = frontier_phi_63_64_ladder_4;
            _2797 = frontier_phi_63_64_ladder_3;
            _2799 = frontier_phi_63_64_ladder;
            _2801 = frontier_phi_63_64_ladder_2;
            _2803 = frontier_phi_63_64_ladder_1;
        }
        float _2808 = isnan(1.0) ? _562 : (isnan(_562) ? 1.0 : min(_562, 1.0));
        _2605 = (_2808 * _2799) + _2136;
        _2607 = (_2808 * _2801) + _2138;
        _2609 = (_2808 * _2803) + _2140;
        _2611 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2459;
        _2613 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2461;
        _2615 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2463;
    }
    else
    {
        _2605 = _2136;
        _2607 = _2138;
        _2609 = _2140;
        _2611 = _2459;
        _2613 = _2461;
        _2615 = _2463;
    }
    float _4564 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4575 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4586 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2632 = ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2605 + ((isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))) * _562))) + ((_2611 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    float _2633 = ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2607 + ((isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))) * _562))) + ((_2613 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    float _2634 = ((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2609 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _562))) + ((_2615 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _1400)) * cbPerFrame._m0[3u].x);
    uint _2635 = _537 + 6u;
    float _2643 = _498 / cbSceneParam._m0[86u].x;
    float _2644 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2658 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, (log2((isnan(cbSceneParam._m0[77u].w) ? _419 : (isnan(_419) ? cbSceneParam._m0[77u].w : min(_419, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2660 = _2658.x;
    float _2661 = _2658.y;
    float _2662 = _2658.z;
    float _2663 = _2658.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_419 > cbSceneParam._m0[78u].w)
    {
        float _2697 = isnan(_419) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _419 : min(cbSceneParam._m0[80u].w, _419));
        float _2698 = _2697 / _419;
        float _2709 = _2698 * _470;
        float _2710 = _471 * _2698;
        float _2711 = (-0.0) - _2710;
        float _2713 = _2698 * _472;
        float _2715 = (cbSceneParam._m0[77u].w * _2711) / _2697;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2710;
        float _2723 = sqrt(((_2709 * _2709) + (_2710 * _2710)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2697)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2910;
        if (abs((_2711 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2910 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2856 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2910 = ((abs(_2723 / _2711) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2733 * _2865) - exp2(_2733 * _2866)) * _2854))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2912 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2643, _2644, 1.0), 0.0);
        float _2921 = exp2((_2910 * (-1.44269502162933349609375)) * (1.0 - _2912.w));
        float _2922 = log2(_2921);
        float _2938 = log2(_2663);
        _2735 = (exp2(_2938 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].x)) * _2912.x) / cbSceneParam._m0[78u].x)) + _2660;
        _2737 = (exp2(_2938 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].y)) * _2912.y) / cbSceneParam._m0[78u].y)) + _2661;
        _2739 = (exp2(_2938 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2922 * cbSceneParam._m0[78u].z)) * _2912.z) / cbSceneParam._m0[78u].z)) + _2662;
        _2741 = _2921 * _2663;
    }
    else
    {
        _2735 = _2660;
        _2737 = _2661;
        _2739 = _2662;
        _2741 = _2663;
    }
    bool _2948;
    vec4 _2751;
    vec4 _2773;
    float _2775;
    float _2779;
    float _2780;
    float _2781;
    float _2782;
    bool _2792;
    for (;;)
    {
        _2751 = cbMatDynParam._m0[0u];
        float _2753 = roundEven(_2751.y);
        bool _2754 = _2753 == 3.0;
        float _2755 = log2(_2741);
        float _2762 = exp2(_2755 * cbSceneParam._m0[78u].x) * _2632;
        float _2763 = exp2(_2755 * cbSceneParam._m0[78u].y) * _2633;
        float _2764 = exp2(_2755 * cbSceneParam._m0[78u].z) * _2634;
        float _2771 = _486 + (-0.5);
        _2773 = cbMtdParam._m0[1u];
        _2775 = _2773.y * _2771;
        float _2778 = (_2753 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2779 = _2778 * (_2754 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2735)));
        _2780 = _2778 * (_2754 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2737)));
        _2781 = _2778 * (_2754 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2739)));
        _2782 = _2771 * 0.999000012874603271484375;
        _2792 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2792)
        {
            if ((cbInstanceData._m0[_537 + 7u].x + _2782) < 0.5)
            {
                _2948 = true;
                break;
            }
        }
        uint _2889 = _538 + uint(_2751.w);
        if ((cbInstanceData._m0[_2889].w < 1.0) && ((cbInstanceData._m0[_2889].w + _2782) < 0.5))
        {
            _2948 = true;
            break;
        }
        if ((_2775 + 1.0) < _2773.x)
        {
            _2948 = true;
            break;
        }
        _2948 = false;
        break;
    }
    float _3152;
    if (_2948)
    {
        discard_state = true;
        _3152 = 0.0;
    }
    else
    {
        _3152 = cbInstanceData._m0[_2635].w;
    }
    SV_Target.x = _2779;
    SV_Target.y = _2780;
    SV_Target.z = _2781;
    SV_Target.w = _3152;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2635].w;
    discard_exit();
}


