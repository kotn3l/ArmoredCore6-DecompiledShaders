#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1063;
float _3453;
float _3454;
float _3455;
float _3456;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _311 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3465 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[10u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[10u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[10u].z) - _257)) + _257;
    vec4 _345 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _374 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3476 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _382 = (_375 * ((_345.x * cbMtdParam._m0[11u].x) - _319)) + _319;
    float _383 = (_375 * ((_345.y * cbMtdParam._m0[11u].y) - _320)) + _320;
    float _384 = (_375 * ((_345.z * cbMtdParam._m0[11u].z) - _321)) + _321;
    vec4 _401 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _409 = (_401.x * 2.0) + (-1.0);
    float _411 = (_401.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_409, _411), vec2(_409, _411));
    float _3487 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _417 = sqrt(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))));
    float _418 = _401.z * cbMtdParam._m0[13u].y;
    vec4 _431 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _445 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_431.z * cbMtdParam._m0[13u].x) - _418)) + _418;
    vec4 _459 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _473 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_459.z * cbMtdParam._m0[13u].z) - _445)) + _445;
    float _486 = (((((_431.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _409) + ((((_459.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _487 = (((((_431.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _411) + ((((_459.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _490 = fma(_417, _219 * NORMAL.x, fma(_487, _226 * TANGENT.x, (_212 * _204) * _486));
    float _493 = fma(_417, _219 * NORMAL.y, fma(_487, _226 * TANGENT.y, (_212 * _205) * _486));
    float _496 = fma(_417, _219 * NORMAL.z, fma(_487, _226 * TANGENT.z, (_212 * _206) * _486));
    float _500 = inversesqrt(dot(vec3(_490, _493, _496), vec3(_490, _493, _496)));
    float _501 = _500 * _490;
    float _502 = _500 * _493;
    float _503 = _500 * _496;
    float _3498 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _504 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3520 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3531 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _573 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _563);
    float _574 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _563);
    float _575 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _563);
    float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
    float _580 = _573 * _579;
    float _581 = _574 * _579;
    float _582 = _575 * _579;
    vec4 _587 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _589 = _587.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _743 = sqrt(((_573 * _573) + (_574 * _574)) + (_575 * _575));
        float _749 = (cbMatDynParam._m0[5u].x * _743) + cbMatDynParam._m0[5u].y;
        float _3542 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _754 = (cbMatDynParam._m0[5u].z * _743) + cbMatDynParam._m0[5u].w;
        float _3553 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) - _750)) + _750) < ((_589 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_503, cbSceneParam._m0[5u].z, fma(_502, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _501));
    float _622 = fma(_503, cbSceneParam._m0[6u].z, fma(_502, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _501));
    float _625 = fma(_503, cbSceneParam._m0[7u].z, fma(_502, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _501));
    uint _638 = uint(roundEven(NORMAL.w)) * 13u;
    uint _639 = _638 + 9u;
    uint _640 = _639 + uint(cbMatDynParam._m0[0u].w);
    float _646 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_640].x;
    float _647 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_640].y;
    float _648 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_640].z;
    float _3564 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _663 = _660.x * TEXCOORD_5.w;
    float _664 = dot(vec3(_501, _502, _503), vec3(_580, _581, _582));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _501) - _580;
    float _672 = (_667 * _502) - _581;
    float _673 = (_667 * _503) - _582;
    float _677 = abs(dot(vec3(_580, _581, _582), vec3(_501, _502, _503)));
    float _3597 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_504);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _791 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _795 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _820 = _724 + _501;
        float _821 = _728 + _502;
        float _822 = _732 + _503;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _787;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _791;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _795;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_501, _502, _503), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3645 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_501, _502, _503), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3678 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_501, _502, _503), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3711 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1110 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1114 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1137 = _724 + _501;
        float _1138 = _728 + _502;
        float _1139 = _732 + _503;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_501, _502, _503), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3774 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_501, _502, _503), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3807 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_501, _502, _503), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3840 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = _1063;
        _1385 = _1063;
        _1386 = _1063;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1075)) + _1075;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1076)) + _1076;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1077)) + _1077;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _671 * 0.5;
    float _1444 = _672 * 0.5;
    float _1445 = _673 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _504);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1559 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1563 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1567 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1570 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1573 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1576 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1604;
        if (_1570 > 0.0)
        {
            _1604 = abs((1.0 - _1559) / _1570);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1559 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1604 = frontier_phi_17_15_ladder;
        }
        float _1829;
        if (_1573 > 0.0)
        {
            _1829 = abs((1.0 - _1563) / _1573);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1563 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1829 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1576 > 0.0)
        {
            _2075 = abs((1.0 - _1567) / _1576);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1567 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1829) ? _1604 : (isnan(_1604) ? _1829 : min(_1604, _1829));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1570) + _1559;
        float _2083 = (_2078 * _1573) + _1563;
        float _2084 = (_2078 * _1576) + _1567;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_16_38_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1592 = frontier_phi_16_38_ladder_2;
        _1594 = frontier_phi_16_38_ladder_1;
        _1596 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1580 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1512);
        _1592 = _1580.x * cbModelParam._m0[1u].y;
        _1594 = _1580.y * cbModelParam._m0[1u].y;
        _1596 = _1580.z * cbModelParam._m0[1u].y;
    }
    float _1600 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _504);
    float _1601 = isnan(_1600) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1600 : min(cbModelParam._m0[25u].w, _1600));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1672 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1675 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1834;
        if (_1669 > 0.0)
        {
            _1834 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1834 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1672 > 0.0)
        {
            _2102 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2307;
        if (_1675 > 0.0)
        {
            _2307 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2307 = frontier_phi_49_46_ladder;
        }
        float _2309 = isnan(_2102) ? _1834 : (isnan(_1834) ? _2102 : min(_1834, _2102));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1669) + _1658;
        float _2315 = (_2310 * _1672) + _1662;
        float _2316 = (_2310 * _1675) + _1666;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1601);
            frontier_phi_25_49_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_25_49_ladder_2;
        _1696 = frontier_phi_25_49_ladder_1;
        _1698 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1601);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1710 = ((((1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_692 * _679)) * _663;
    float _1711 = _1710 * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1712 = _1710 * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1713 = _1710 * ((cbModelParam._m0[1u].w * (_1698 - _1596)) + _1596);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    vec4 _1730 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_600, _601));
    float _1732 = _1730.w;
    float _1744 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1732);
    float _1745 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1732);
    float _1746 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1732);
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_638 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1760 = _663 + (-1.0);
    float _1765 = (cbLight._m0[_1753].x * _1760) + 1.0;
    float _1766 = (cbLight._m0[_1753].y * _1760) + 1.0;
    float _1767 = (cbLight._m0[_1753].z * _1760) + 1.0;
    float _1768 = (cbLight._m0[_1753].w * _1760) + 1.0;
    uint _1769 = _1752 + 5u;
    float _1775 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1779 = _1752 + 4u;
    float _1788 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1792 = _1752 | 1u;
    float _1803 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_501, _502, _503));
    float _1806 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_501, _502, _503));
    float _3976 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _3987 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1811 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 0.3183098733425140380859375;
    float _1813 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1820 = ((cbLight._m0[_1769].x * _1775) * _1813) + (((cbLight._m0[_1779].x * _1744) * _1788) * _1811);
    float _1821 = ((_1775 * cbLight._m0[_1769].y) * _1813) + (((cbLight._m0[_1779].y * _1745) * _1788) * _1811);
    float _1822 = ((_1775 * cbLight._m0[_1769].z) * _1813) + (((cbLight._m0[_1779].z * _1746) * _1788) * _1811);
    uvec4 _1826 = floatBitsToUint(cbLight._m0[_1752 + 12u]);
    bool _1828 = _1826.x == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1828)
    {
        _1839 = _1820;
        _1841 = _1821;
        _1843 = _1822;
    }
    else
    {
        uint _1847 = _1752 + 6u;
        float _1863 = (dot(vec3(cbLight._m0[_1752 + 2u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3998 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1866 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1839 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1820;
        _1841 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1821;
        _1843 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1822;
    }
    bool _1846 = _1826.y == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1846)
    {
        _1884 = _1839;
        _1886 = _1841;
        _1888 = _1843;
    }
    else
    {
        uint _2046 = _1752 + 7u;
        float _2062 = (dot(vec3(cbLight._m0[_1752 + 3u].xyz), vec3(_501, _502, _503)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4014 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2065 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1884 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1839;
        _1886 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1841;
        _1888 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1843;
    }
    uint _1891 = _1752 + 8u;
    float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _504) * 0.949999988079071044921875);
    float _1905 = _1904 * _1904;
    float _1906 = cbLight._m0[_1752].x + _580;
    float _1907 = cbLight._m0[_1752].y + _581;
    float _1908 = cbLight._m0[_1752].z + _582;
    float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
    float _1913 = _1912 * _1906;
    float _1914 = _1912 * _1907;
    float _1915 = _1912 * _1908;
    float _1916 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_1752].xyz));
    float _4030 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1920 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1921 = dot(vec3(_501, _502, _503), vec3(_1913, _1914, _1915));
    float _4052 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1913, _1914, _1915));
    float _4063 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1929 = _1905 * _1905;
    float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
    float _1944 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1945 = 1.0 - _1905;
    float _1956 = (0.5 / (((_1920 * ((_1919 * _1945) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _1945) + _1905) * _1919))) * _1919;
    float _4074 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1958 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
    uint _1972 = _1752 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _504) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1792].x + _580;
    float _1986 = cbLight._m0[_1792].y + _581;
    float _1987 = cbLight._m0[_1792].z + _582;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_1792].xyz));
    float _4085 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1999 = dot(vec3(_501, _502, _503), vec3(_1992, _1993, _1994));
    float _4096 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1992, _1993, _1994));
    float _4107 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = 1.0 - _1984;
    float _2031 = (0.5 / (((_1920 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2021) + _1984) * _1998))) * _1998;
    float _4118 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2043 = (((_2020 * cbLight._m0[_1972].x) * _2033) * _1775) + ((((cbLight._m0[_1891].x * _1744) * _1944) * _1958) * _1788);
    float _2044 = (((_2020 * cbLight._m0[_1972].y) * _2033) * _1775) + ((((cbLight._m0[_1891].y * _1745) * _1944) * _1958) * _1788);
    float _2045 = (((_2020 * cbLight._m0[_1972].z) * _2033) * _1775) + ((((cbLight._m0[_1891].z * _1746) * _1944) * _1958) * _1788);
    float _2107;
    float _2109;
    float _2111;
    if (_1828)
    {
        _2107 = _2043;
        _2109 = _2044;
        _2111 = _2045;
    }
    else
    {
        uint _2113 = _1752 + 2u;
        uint _2117 = _1752 + 10u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _504) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _580;
        float _2134 = cbLight._m0[_2113].y + _581;
        float _2135 = cbLight._m0[_2113].z + _582;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2113].xyz));
        float _4129 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2147 = dot(vec3(_501, _502, _503), vec3(_2140, _2141, _2142));
        float _4140 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4151 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2169 = 1.0 - _2132;
        float _2179 = (0.5 / (((_1920 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2169) + _2132) * _2146))) * _2146;
        float _4162 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2107 = (((_2168 * cbLight._m0[_2117].x) * _2181) * _2182) + _2043;
        _2109 = (((_2168 * cbLight._m0[_2117].y) * _2181) * _2182) + _2044;
        _2111 = (((_2168 * cbLight._m0[_2117].z) * _2181) * _2182) + _2045;
    }
    float _2217;
    float _2219;
    float _2221;
    if (_1846)
    {
        _2217 = _2107;
        _2219 = _2109;
        _2221 = _2111;
    }
    else
    {
        uint _2228 = _1752 + 3u;
        uint _2232 = _1752 + 11u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _504) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _580;
        float _2249 = cbLight._m0[_2228].y + _581;
        float _2250 = cbLight._m0[_2228].z + _582;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_501, _502, _503), vec3(cbLight._m0[_2228].xyz));
        float _4178 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2262 = dot(vec3(_501, _502, _503), vec3(_2255, _2256, _2257));
        float _4189 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4200 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2284 = 1.0 - _2247;
        float _2294 = (0.5 / (((_1920 * ((_2261 * _2284) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2284) + _2247) * _2261))) * _2261;
        float _4211 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2217 = (((_2283 * cbLight._m0[_2232].x) * _2296) * _2297) + _2107;
        _2219 = (((_2283 * cbLight._m0[_2232].y) * _2296) * _2297) + _2109;
        _2221 = (((_2283 * cbLight._m0[_2232].z) * _2296) * _2297) + _2111;
    }
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_1750.y == 0u)
    {
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2372;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2372;
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2372;
        uvec4 _2387 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2388 = _2387.x;
        uint _2399 = uint((float(_2387.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2388))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2388)));
        float _2409 = (log2(_2375 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2410 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        uint _2413 = uint(isnan(14.0) ? _2410 : (isnan(_2410) ? 14.0 : min(_2410, 14.0)));
        uvec4 _2418 = texelFetch(g_lightClusterGridBuffer, int(((_2413 << 2u) + (_2399 << 6u)) >> 2u));
        uint _2419 = _2418.x;
        uint _2420 = _2387.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2420 >> 4u) & 15u)) + 4294967295u) & _2419) == 0u) || ((_2420 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            uint _2679 = 0u;
            uint _2688;
            bool _2689;
            for (;;)
            {
                _2688 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                _2689 = _2688 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2689)
                {
                    frontier_phi_66_pred = _2673;
                    frontier_phi_66_pred_1 = _2678;
                    frontier_phi_66_pred_2 = _2677;
                    frontier_phi_66_pred_3 = _2676;
                    frontier_phi_66_pred_4 = _2675;
                    frontier_phi_66_pred_5 = _2674;
                }
                else
                {
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    uint _2824;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2688;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    for (;;)
                    {
                        uint _2828 = uint(findLSB(_2824)) + (_2679 << 5u);
                        uint _2825 = (_2824 + 4294967295u) & _2824;
                        uint _2830 = _2828 * 48u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2850 = (_2828 * 48u) + 4u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2869 = (_2828 * 48u) + 8u;
                        vec3 _2880 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x));
                        float _2884 = _2844.x - _2373;
                        float _2885 = _2844.y - _2374;
                        float _2886 = _2844.z - _2375;
                        float _2887 = dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886));
                        float _2890 = inversesqrt(_2887);
                        float _2891 = _2890 * _2884;
                        float _2892 = _2890 * _2885;
                        float _2893 = _2890 * _2886;
                        float _2894 = dot(vec3(_619, _622, _625), vec3(_2891, _2892, _2893));
                        float _2899 = 1.0 - (_2887 * _2844.w);
                        float _4237 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2901 = sqrt(_2887) * _2863.w;
                        float _2904 = 1.39999997615814208984375 / (_2901 + 1.39999997615814208984375);
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2894) + _2905;
                        float _2911 = _2901 * _2901;
                        float _2915 = ((isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))) * _2900) / ((_2911 * 0.699999988079071044921875) + 1.0);
                        float _2919 = (-0.0) - _2373;
                        float _2920 = (-0.0) - _2374;
                        float _2921 = (-0.0) - _2375;
                        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2936 = exp2(log2(1.0 / ((_2911 * 3.5) + 5.0)) * 0.25);
                        float _2937 = 1.0 - _679;
                        float _2944 = sqrt(1.0 - ((1.0 - (_2937 * _2937)) * (1.0 - (_2936 * _2936))));
                        float _2945 = _2944 * _2944;
                        float _2946 = _2945 * _2945;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2957 = dot(vec3(_619, _622, _625), vec3(_2926, _2927, _2928));
                        float _4253 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2961 = dot(vec3(_619, _622, _625), vec3(_2953 * _2947, _2953 * _2948, _2953 * _2949));
                        float _4264 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2968 = ((_2964 * _2964) * (_2946 + (-1.0))) + 1.0;
                        float _2969 = _2904 * _2945;
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2894) + _2970;
                        float _4275 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2975 = 1.0 - _2945;
                        float _2985 = (0.5 / (((_2974 * ((_2960 * _2975) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2945) * _2960))) * _2974;
                        float _4286 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2996 = (((_2946 * 3.1415927410125732421875) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) / ((_2968 * _2968) * ((_2911 * 2.1991131305694580078125) + 3.141590118408203125))) * _2900;
                        _2748 = (_2915 * _2863.x) + _2821;
                        _2749 = (_2915 * _2863.y) + _2822;
                        _2750 = (_2915 * _2863.z) + _2823;
                        _2745 = (_2996 * _2880.x) + _2818;
                        _2746 = (_2996 * _2880.y) + _2819;
                        _2747 = (_2996 * _2880.z) + _2820;
                        if (_2825 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2825;
                        }
                    }
                    frontier_phi_66_pred = _2745;
                    frontier_phi_66_pred_1 = _2750;
                    frontier_phi_66_pred_2 = _2749;
                    frontier_phi_66_pred_3 = _2748;
                    frontier_phi_66_pred_4 = _2747;
                    frontier_phi_66_pred_5 = _2746;
                }
                _2521 = frontier_phi_66_pred;
                _2531 = frontier_phi_66_pred_1;
                _2529 = frontier_phi_66_pred_2;
                _2527 = frontier_phi_66_pred_3;
                _2525 = frontier_phi_66_pred_4;
                _2523 = frontier_phi_66_pred_5;
                uint _2680 = _2679 + 1u;
                if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2673 = _2521;
                    _2674 = _2523;
                    _2675 = _2525;
                    _2676 = _2527;
                    _2677 = _2529;
                    _2678 = _2531;
                    _2679 = _2680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((4294967295u << _2537) & _2419) == 0u)
        {
            _2641 = _2520;
            _2643 = _2522;
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
            _2651 = _2530;
        }
        else
        {
            float _2666 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
            float _2667 = _2666 * _2373;
            float _2668 = _2666 * _2374;
            float _2669 = _2666 * _2375;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2801 = _2520;
                float _2802 = _2522;
                float _2803 = _2524;
                float _2804 = _2526;
                float _2805 = _2528;
                float _2806 = _2530;
                uint _2807 = _2537;
                uint _2816;
                bool _2817;
                for (;;)
                {
                    _2816 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                    _2817 = _2816 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2817)
                    {
                        frontier_phi_77_pred = _2806;
                        frontier_phi_77_pred_1 = _2805;
                        frontier_phi_77_pred_2 = _2804;
                        frontier_phi_77_pred_3 = _2803;
                        frontier_phi_77_pred_4 = _2802;
                        frontier_phi_77_pred_5 = _2801;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        uint _3029 = _2816;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3099;
                        vec4 _3115;
                        float _3162;
                        bool _3163;
                        for (;;)
                        {
                            uint _3040 = ((_2807 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3086 = (_3040 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3102 = (_3040 * 40u) + 20u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3118 = (_3040 * 40u) + 24u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3137 = (_3040 * 40u) + 28u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3162 = fma(_2375, _3150.z, fma(_2374, _3150.y, _3150.x * _2373)) + _3150.w;
                            _3163 = !((fma(_2375, _3131.z, fma(_2374, _3131.y, _3131.x * _2373)) + _3131.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3163)
                            {
                                float _3190 = _3055.x - _2373;
                                float _3191 = _3055.y - _2374;
                                float _3192 = _3055.z - _2375;
                                float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                                float _3196 = inversesqrt(_3193);
                                float _3197 = _3196 * _3190;
                                float _3198 = _3196 * _3191;
                                float _3199 = _3196 * _3192;
                                float _3203 = 1.0 - (_3193 / (_3056 * _3056));
                                float _4297 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3208 = sqrt(_3193) * _3071.w;
                                float _3210 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                                float _3211 = _3210 * _3210;
                                float _3214 = ((1.0 - _3211) * dot(vec3(_3197, _3198, _3199), vec3(_619, _622, _625))) + _3211;
                                float _3217 = _3208 * _3208;
                                float _3221 = (fma(_2375, _3099.z, fma(_2374, _3099.y, _3099.x * _2373)) + _3099.w) / _3162;
                                float _3222 = (fma(_2375, _3115.z, fma(_2374, _3115.y, _3115.x * _2373)) + _3115.w) / _3162;
                                float _3226 = 1.0 - dot(vec2(_3221, _3222), vec2(_3221, _3222));
                                float _4313 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3228 = _3227 * (((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3204) / ((_3217 * 0.699999988079071044921875) + 1.0));
                                float _3240 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                                float _3241 = 1.0 - _679;
                                float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                                float _3249 = _3248 * _3248;
                                float _3250 = _3249 * _3249;
                                float _3251 = _3197 - _2667;
                                float _3252 = _3198 - _2668;
                                float _3253 = _3199 - _2669;
                                float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                                float _3261 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2667, (-0.0) - _2668, (-0.0) - _2669));
                                float _4324 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3265 = dot(vec3(_619, _622, _625), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                                float _4335 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                                float _3273 = _3210 * _3249;
                                float _3274 = _3273 * _3273;
                                float _3280 = ((1.0 - _3274) * dot(vec3(_619, _622, _625), vec3(_3197, _3198, _3199))) + _3274;
                                float _4346 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3282 = 1.0 - _3249;
                                float _3292 = (0.5 / (((_3281 * ((_3264 * _3282) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3249) * _3264))) * _3281;
                                float _4357 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3302 = (_3227 * _3204) * (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3272 * _3272) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3228 * _3071.y;
                                frontier_phi_83_pred_1 = _3228 * _3071.x;
                                frontier_phi_83_pred_2 = _3302 * _3083.z;
                                frontier_phi_83_pred_3 = _3302 * _3083.y;
                                frontier_phi_83_pred_4 = _3302 * _3083.x;
                                frontier_phi_83_pred_5 = _3228 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_83_pred;
                            _3309 = frontier_phi_83_pred_1;
                            _3308 = frontier_phi_83_pred_2;
                            _3307 = frontier_phi_83_pred_3;
                            _3306 = frontier_phi_83_pred_4;
                            _3311 = frontier_phi_83_pred_5;
                            _3013 = _3309 + _3026;
                            _3014 = _3310 + _3027;
                            _3015 = _3311 + _3028;
                            _3010 = _3306 + _3023;
                            _3011 = _3307 + _3024;
                            _3012 = _3308 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3015;
                        frontier_phi_77_pred_1 = _3014;
                        frontier_phi_77_pred_2 = _3013;
                        frontier_phi_77_pred_3 = _3012;
                        frontier_phi_77_pred_4 = _3011;
                        frontier_phi_77_pred_5 = _3010;
                    }
                    _2652 = frontier_phi_77_pred;
                    _2650 = frontier_phi_77_pred_1;
                    _2648 = frontier_phi_77_pred_2;
                    _2646 = frontier_phi_77_pred_3;
                    _2644 = frontier_phi_77_pred_4;
                    _2642 = frontier_phi_77_pred_5;
                    uint _2808 = _2807 + 1u;
                    if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2801 = _2642;
                        _2802 = _2644;
                        _2803 = _2646;
                        _2804 = _2648;
                        _2805 = _2650;
                        _2806 = _2652;
                        _2807 = _2808;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2646;
                frontier_phi_58_59_ladder_1 = _2652;
                frontier_phi_58_59_ladder_2 = _2650;
                frontier_phi_58_59_ladder_3 = _2648;
                frontier_phi_58_59_ladder_4 = _2644;
                frontier_phi_58_59_ladder_5 = _2642;
            }
            else
            {
                frontier_phi_58_59_ladder = _2524;
                frontier_phi_58_59_ladder_1 = _2530;
                frontier_phi_58_59_ladder_2 = _2528;
                frontier_phi_58_59_ladder_3 = _2526;
                frontier_phi_58_59_ladder_4 = _2522;
                frontier_phi_58_59_ladder_5 = _2520;
            }
            _2641 = frontier_phi_58_59_ladder_5;
            _2643 = frontier_phi_58_59_ladder_4;
            _2645 = frontier_phi_58_59_ladder;
            _2647 = frontier_phi_58_59_ladder_3;
            _2649 = frontier_phi_58_59_ladder_2;
            _2651 = frontier_phi_58_59_ladder_1;
        }
        float _2656 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2432 = (_2656 * _2647) + _1884;
        _2434 = (_2656 * _2649) + _1886;
        _2436 = (_2656 * _2651) + _1888;
        _2438 = ((_2641 * 0.039999999105930328369140625) * _2656) + _2217;
        _2440 = ((_2643 * 0.039999999105930328369140625) * _2656) + _2219;
        _2442 = ((_2645 * 0.039999999105930328369140625) * _2656) + _2221;
    }
    else
    {
        _2432 = _1884;
        _2434 = _1886;
        _2436 = _1888;
        _2438 = _2217;
        _2440 = _2219;
        _2442 = _2221;
    }
    float _4373 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4384 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4395 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _2459 = ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2432 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _663))) + ((_2438 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2460 = ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2434 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _663))) + ((_2440 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2461 = ((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2436 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _663))) + ((_2442 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    uint _2462 = _638 + 6u;
    float _2470 = _600 / cbSceneParam._m0[86u].x;
    float _2471 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2546 = _2545 / _523;
        float _2557 = _2546 * _573;
        float _2558 = _574 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2561 = _2546 * _575;
        float _2563 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2558;
        float _2571 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2758;
        if (abs((_2559 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2758 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2702 = 1.0 / cbSceneParam._m0[80u].x;
            float _2703 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2704 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            _2758 = ((abs(_2571 / _2559) * cbSceneParam._m0[80u].y) * ((((_2713 - _2714) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))))) * _2702)) - ((exp2(_2581 * _2713) - exp2(_2581 * _2714)) * _2702))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2769 = exp2((_2758 * (-1.44269502162933349609375)) * (1.0 - _2760.w));
        float _2770 = log2(_2769);
        float _2786 = log2(_2490);
        _2583 = (exp2(_2786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].x)) * _2760.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2585 = (exp2(_2786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].y)) * _2760.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2587 = (exp2(_2786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].z)) * _2760.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2589 = _2769 * _2490;
    }
    else
    {
        _2583 = _2487;
        _2585 = _2488;
        _2587 = _2489;
        _2589 = _2490;
    }
    bool _2796;
    vec4 _2599;
    vec4 _2621;
    float _2623;
    float _2627;
    float _2628;
    float _2629;
    float _2630;
    bool _2640;
    for (;;)
    {
        _2599 = cbMatDynParam._m0[0u];
        float _2601 = roundEven(_2599.y);
        bool _2602 = _2601 == 3.0;
        float _2603 = log2(_2589);
        float _2610 = exp2(_2603 * cbSceneParam._m0[78u].x) * _2459;
        float _2611 = exp2(_2603 * cbSceneParam._m0[78u].y) * _2460;
        float _2612 = exp2(_2603 * cbSceneParam._m0[78u].z) * _2461;
        float _2619 = _589 + (-0.5);
        _2621 = cbMtdParam._m0[1u];
        _2623 = _2621.y * _2619;
        float _2626 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2627 = _2626 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
        _2628 = _2626 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
        _2629 = _2626 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
        _2630 = _2619 * 0.999000012874603271484375;
        _2640 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2640)
        {
            if ((cbInstanceData._m0[_638 + 7u].x + _2630) < 0.5)
            {
                _2796 = true;
                break;
            }
        }
        uint _2737 = _639 + uint(_2599.w);
        if ((cbInstanceData._m0[_2737].w < 1.0) && ((cbInstanceData._m0[_2737].w + _2630) < 0.5))
        {
            _2796 = true;
            break;
        }
        if ((_2623 + 1.0) < _2621.x)
        {
            _2796 = true;
            break;
        }
        _2796 = false;
        break;
    }
    float _3001;
    if (_2796)
    {
        discard_state = true;
        _3001 = 0.0;
    }
    else
    {
        _3001 = cbInstanceData._m0[_2462].w;
    }
    SV_Target.x = _2627;
    SV_Target.y = _2628;
    SV_Target.z = _2629;
    SV_Target.w = _3001;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2462].w;
    discard_exit();
}


