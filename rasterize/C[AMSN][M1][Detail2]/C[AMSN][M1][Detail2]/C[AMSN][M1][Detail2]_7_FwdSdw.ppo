#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _952;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _275 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _306 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3547 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _314 = (_307 * ((_275.x * cbMtdParam._m0[11u].x) - _249)) + _249;
    float _315 = (_307 * ((_275.y * cbMtdParam._m0[11u].y) - _250)) + _250;
    float _316 = (_307 * ((_275.z * cbMtdParam._m0[11u].z) - _251)) + _251;
    vec4 _333 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = (_333.x * 2.0) + (-1.0);
    float _343 = (_333.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3558 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _349 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    float _350 = _333.z * cbMtdParam._m0[13u].y;
    vec4 _362 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _397 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_383.z * cbMtdParam._m0[13u].z) - _350)) + _350;
    float _413 = (((((_362.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _341) + ((((_383.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _414 = (((((_362.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _343) + ((((_383.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _417 = fma(_349, _213 * NORMAL.x, fma(_414, _220 * TANGENT.x, (_206 * _198) * _413));
    float _420 = fma(_349, _213 * NORMAL.y, fma(_414, _220 * TANGENT.y, (_206 * _199) * _413));
    float _423 = fma(_349, _213 * NORMAL.z, fma(_414, _220 * TANGENT.z, (_206 * _200) * _413));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3569 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _431 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3591 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3602 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _450 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _502 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _492);
    float _503 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _492);
    float _504 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _492);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _509 = _502 * _508;
    float _510 = _503 * _508;
    float _511 = _504 * _508;
    float _517 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _518 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _536 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _539 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _542 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    uint _555 = uint(roundEven(NORMAL.w)) * 13u;
    uint _557 = (_555 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _563 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_557].x;
    float _564 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_557].y;
    float _565 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_557].z;
    float _3613 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _517, cbSceneParam._m0[86u].y * _518));
    float _580 = _577.x * TEXCOORD_5.w;
    float _581 = dot(vec3(_428, _429, _430), vec3(_509, _510, _511));
    float _584 = _581 * 2.0;
    float _588 = (_584 * _428) - _509;
    float _589 = (_584 * _429) - _510;
    float _590 = (_584 * _430) - _511;
    float _594 = abs(dot(vec3(_509, _510, _511), vec3(_428, _429, _430)));
    float _3646 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _596 = sqrt(_431);
    float _609 = exp2((_596 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_596 * 3.0));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _649 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _951;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _676 = fma(_649, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _641));
        float _680 = fma(_649, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _641));
        float _684 = fma(_649, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _641));
        float _709 = _641 + _428;
        float _710 = _645 + _429;
        float _711 = _649 + _430;
        float _721 = fma(_711, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709)) - _676;
        float _722 = fma(_711, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709)) - _680;
        float _723 = fma(_711, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709)) - _684;
        float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
        float _740 = ((_727 * _721) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_676 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _741 = ((_727 * _722) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_680 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _742 = ((_727 * _723) / cbModelParam._m0[34u].z) + ((((((_684 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_740, _741, _742), 0.0);
        float _779 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_745.x + (-0.5));
        float _781 = _779 * (_745.y + (-0.5));
        float _782 = _779 * (_745.z + (-0.5));
        float _789 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_752.x + (-0.5));
        float _791 = _789 * (_752.y + (-0.5));
        float _792 = _789 * (_752.z + (-0.5));
        float _799 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_759.x + (-0.5));
        float _801 = _799 * (_759.y + (-0.5));
        float _802 = _799 * (_759.z + (-0.5));
        float _809 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_766.x + (-0.5));
        float _811 = _809 * (_766.y + (-0.5));
        float _812 = _809 * (_766.z + (-0.5));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = _780 * 0.5;
        float _817 = _790 * 0.5;
        float _818 = _800 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _833 = (dot(vec3(_428, _429, _430), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _843 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3694 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_845 + 1.0))) + _850) * _813;
        float _860 = _781 * 0.5;
        float _861 = _791 * 0.5;
        float _862 = _801 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_428, _429, _430), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3727 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_887 + 1.0))) + _892) * _814;
        float _902 = _782 * 0.5;
        float _903 = _792 * 0.5;
        float _904 = _802 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_428, _429, _430), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3760 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_929 + 1.0))) + _934) * _815;
        _951 = _782;
        _953 = _781;
        _954 = _780;
        _955 = _792;
        _956 = _791;
        _957 = _790;
        _958 = _802;
        _959 = _801;
        _960 = _800;
        _961 = _815;
        _962 = _814;
        _963 = _813;
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _965 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
    }
    else
    {
        _951 = _952;
        _953 = _952;
        _954 = _952;
        _955 = _952;
        _956 = _952;
        _957 = _952;
        _958 = _952;
        _959 = _952;
        _960 = _952;
        _961 = _952;
        _962 = _952;
        _963 = _952;
        _964 = 0.0;
        _965 = 0.0;
        _966 = 0.0;
    }
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _992 = fma(_649, cbModelParam._m0[30u].z, fma(_645, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _641));
        float _996 = fma(_649, cbModelParam._m0[31u].z, fma(_645, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _641));
        float _1000 = fma(_649, cbModelParam._m0[32u].z, fma(_645, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _641));
        float _1023 = _641 + _428;
        float _1024 = _645 + _429;
        float _1025 = _649 + _430;
        float _1035 = fma(_1025, cbModelParam._m0[30u].z, fma(_1024, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023)) - _992;
        float _1036 = fma(_1025, cbModelParam._m0[31u].z, fma(_1024, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023)) - _996;
        float _1037 = fma(_1025, cbModelParam._m0[32u].z, fma(_1024, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023)) - _1000;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_992 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_996 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[35u].z) + ((((((_1000 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1091 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1058.x + (-0.5));
        float _1093 = _1091 * (_1058.y + (-0.5));
        float _1094 = _1091 * (_1058.z + (-0.5));
        float _1101 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1065.x + (-0.5));
        float _1103 = _1101 * (_1065.y + (-0.5));
        float _1104 = _1101 * (_1065.z + (-0.5));
        float _1111 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1072.x + (-0.5));
        float _1113 = _1111 * (_1072.y + (-0.5));
        float _1114 = _1111 * (_1072.z + (-0.5));
        float _1121 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1079.x + (-0.5));
        float _1123 = _1121 * (_1079.y + (-0.5));
        float _1124 = _1121 * (_1079.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_428, _429, _430), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3823 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1155 + 1.0))) + _1160) * _1125;
        float _1170 = _1093 * 0.5;
        float _1171 = _1103 * 0.5;
        float _1172 = _1113 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_428, _429, _430), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3856 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1197 + 1.0))) + _1202) * _1126;
        float _1212 = _1094 * 0.5;
        float _1213 = _1104 * 0.5;
        float _1214 = _1114 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_428, _429, _430), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3889 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1239 + 1.0))) + _1244) * _1127;
        _1261 = _1094;
        _1262 = _1093;
        _1263 = _1092;
        _1264 = _1104;
        _1265 = _1103;
        _1266 = _1102;
        _1267 = _1114;
        _1268 = _1113;
        _1269 = _1112;
        _1270 = _1127;
        _1271 = _1126;
        _1272 = _1125;
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _952;
        _1262 = _952;
        _1263 = _952;
        _1264 = _952;
        _1265 = _952;
        _1266 = _952;
        _1267 = _952;
        _1268 = _952;
        _1269 = _952;
        _1270 = _952;
        _1271 = _952;
        _1272 = _952;
        _1273 = 0.0;
        _1274 = 0.0;
        _1275 = 0.0;
    }
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _965)) + _965;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _966)) + _966;
    float _1308 = fma(_1287, cbSceneParam._m0[89u].z, fma(_1286, cbSceneParam._m0[89u].y, _1285 * cbSceneParam._m0[89u].x));
    float _1311 = fma(_1287, cbSceneParam._m0[90u].z, fma(_1286, cbSceneParam._m0[90u].y, _1285 * cbSceneParam._m0[90u].x));
    float _1314 = fma(_1287, cbSceneParam._m0[91u].z, fma(_1286, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1285));
    float _1329 = _588 * 0.5;
    float _1330 = _589 * 0.5;
    float _1331 = _590 * 0.5;
    float _1332 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1335 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1338 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1372;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1345 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_951, _955, _958, _961));
        float _1349 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_953, _956, _959, _962));
        float _1353 = dot(vec4(_1329, _1330, _1331, 1.0), vec4(_954, _957, _960, _963));
        float _1360 = dot(vec4(cbModelParam._m0[39u]), vec4(_1329, _1330, _1331, 1.0));
        _1372 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1360) ? 0.0 : (isnan(0.0) ? _1360 : max(0.0, _1360))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1372 = 1.0;
    }
    float _1383;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1374 = dot(vec4(cbModelParam._m0[40u]), vec4(_1329, _1330, _1331, 1.0));
        _1383 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1383 = 1.0;
    }
    float _1387 = (_1383 * cbModelParam._m0[1u].x) + (_1372 * (1.0 - cbModelParam._m0[1u].x));
    float _1397 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1397 : min(cbModelParam._m0[25u].z, _1397));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1445 = fma(_649, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641)) + cbModelParam._m0[13u].w;
        float _1449 = fma(_649, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641)) + cbModelParam._m0[14u].w;
        float _1453 = fma(_649, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641)) + cbModelParam._m0[15u].w;
        float _1456 = fma(_590, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588));
        float _1459 = fma(_590, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588));
        float _1462 = fma(_590, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588));
        float _1490;
        if (_1456 > 0.0)
        {
            _1490 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1490 = frontier_phi_14_12_ladder;
        }
        float _1663;
        if (_1459 > 0.0)
        {
            _1663 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1663 = frontier_phi_23_19_ladder;
        }
        float _1958;
        if (_1462 > 0.0)
        {
            _1958 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1958 = frontier_phi_35_30_ladder;
        }
        float _1960 = isnan(_1663) ? _1490 : (isnan(_1490) ? _1663 : min(_1490, _1663));
        float _1961 = isnan(_1958) ? _1960 : (isnan(_1960) ? _1958 : min(_1960, _1958));
        float _1965 = (_1961 * _1456) + _1445;
        float _1966 = (_1961 * _1459) + _1449;
        float _1967 = (_1961 * _1462) + _1453;
        float _1968 = _1961 * 9.9999997473787516355514526367188e-05;
        float _1970 = (-1.0) - _1968;
        float _1972 = _1968 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1967 > _1972) || ((_1967 < _1970) || ((_1966 > _1972) || ((_1966 < _1970) || ((_1965 < _1970) || (_1965 > _1972))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1967, cbModelParam._m0[9u].z, fma(_1966, cbModelParam._m0[9u].y, _1965 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1967, cbModelParam._m0[10u].z, fma(_1966, cbModelParam._m0[10u].y, _1965 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1967, cbModelParam._m0[11u].z, fma(_1966, cbModelParam._m0[11u].y, _1965 * cbModelParam._m0[11u].x))), _1398);
            frontier_phi_13_35_ladder = _2112.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2112.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2112.x * cbModelParam._m0[1u].y;
        }
        _1478 = frontier_phi_13_35_ladder_2;
        _1480 = frontier_phi_13_35_ladder_1;
        _1482 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_588, _589, _590), _1398);
        _1478 = _1466.x * cbModelParam._m0[1u].y;
        _1480 = _1466.y * cbModelParam._m0[1u].y;
        _1482 = _1466.z * cbModelParam._m0[1u].y;
    }
    float _1486 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1487 = isnan(_1486) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1486 : min(cbModelParam._m0[25u].w, _1486));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1544 = fma(_649, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641)) + cbModelParam._m0[21u].w;
        float _1548 = fma(_649, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641)) + cbModelParam._m0[22u].w;
        float _1552 = fma(_649, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641)) + cbModelParam._m0[23u].w;
        float _1555 = fma(_590, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588));
        float _1558 = fma(_590, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588));
        float _1561 = fma(_590, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588));
        float _1668;
        if (_1555 > 0.0)
        {
            _1668 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1668 = frontier_phi_25_21_ladder;
        }
        float _1985;
        if (_1558 > 0.0)
        {
            _1985 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1985 = frontier_phi_37_32_ladder;
        }
        float _2312;
        if (_1561 > 0.0)
        {
            _2312 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2312 = frontier_phi_47_44_ladder;
        }
        float _2314 = isnan(_1985) ? _1668 : (isnan(_1668) ? _1985 : min(_1668, _1985));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1555) + _1544;
        float _2320 = (_2315 * _1558) + _1548;
        float _2321 = (_2315 * _1561) + _1552;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2322;
        float _2325 = _2322 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2321 > _2325) || ((_2321 < _2323) || ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 < _2323) || (_2319 > _2325))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2321, cbModelParam._m0[17u].z, fma(_2320, cbModelParam._m0[17u].y, _2319 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2321, cbModelParam._m0[18u].z, fma(_2320, cbModelParam._m0[18u].y, _2319 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2321, cbModelParam._m0[19u].z, fma(_2320, cbModelParam._m0[19u].y, _2319 * cbModelParam._m0[19u].x))), _1487);
            frontier_phi_22_47_ladder = _2439.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2439.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2439.x * cbModelParam._m0[1u].z;
        }
        _1580 = frontier_phi_22_47_ladder_2;
        _1582 = frontier_phi_22_47_ladder_1;
        _1584 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_588, _589, _590), _1487);
        _1580 = _1564.x * cbModelParam._m0[1u].z;
        _1582 = _1564.y * cbModelParam._m0[1u].z;
        _1584 = _1564.z * cbModelParam._m0[1u].z;
    }
    float _1596 = ((((1.0 - _609) * ((_596 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_609 * _596)) * _580;
    float _1597 = _1596 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1598 = _1596 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1599 = _1596 * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1602 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, _1597 * cbSceneParam._m0[91u].x));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1655 = _1642 / _1654;
    float _1656 = _1646 / _1654;
    float _1657 = _1650 / _1654;
    float _1804;
    float _1805;
    float _1806;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1684 = ((uint(_1657 > cbSceneParam._m0[59u].y) + uint(_1657 > cbSceneParam._m0[59u].x)) + uint(_1657 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1685 = _1684 + 43u;
        uint _1693 = _1684 + 44u;
        uint _1701 = _1684 + 45u;
        uint _1709 = _1684 + 46u;
        float _1720 = fma(_1654, cbSceneParam._m0[_1685].w, fma(_1650, cbSceneParam._m0[_1685].z, fma(_1646, cbSceneParam._m0[_1685].y, _1642 * cbSceneParam._m0[_1685].x)));
        float _1724 = fma(_1654, cbSceneParam._m0[_1693].w, fma(_1650, cbSceneParam._m0[_1693].z, fma(_1646, cbSceneParam._m0[_1693].y, _1642 * cbSceneParam._m0[_1693].x)));
        float _1732 = fma(_1654, cbSceneParam._m0[_1709].w, fma(_1650, cbSceneParam._m0[_1709].z, fma(_1646, cbSceneParam._m0[_1709].y, _1642 * cbSceneParam._m0[_1709].x)));
        float _1737 = cbSceneParam._m0[33u].z * _1732;
        float _1739 = cbSceneParam._m0[33u].w * _1732;
        float _1742 = fma(_1654, cbSceneParam._m0[_1701].w, fma(_1650, cbSceneParam._m0[_1701].z, fma(_1646, cbSceneParam._m0[_1701].y, _1642 * cbSceneParam._m0[_1701].x))) / _1732;
        float _1790 = (cbSceneParam._m0[33u].x - sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657))) * cbSceneParam._m0[33u].y;
        float _4015 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1797 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1737 + _1720) / _1732, (_1739 + _1724) / _1732), _1742), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1739 + _1720) / _1732, (_1724 - _1737) / _1732), _1742), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1720 - _1737) / _1732, (_1724 - _1739) / _1732), _1742), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1720 - _1739) / _1732, (_1737 + _1724) / _1732), _1742), 0.0)).x), vec4(0.25)));
        _1804 = 1.0 - (_1797 * cbSceneParam._m0[34u].x);
        _1805 = 1.0 - (_1797 * cbSceneParam._m0[34u].y);
        _1806 = 1.0 - (_1797 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1804 = 1.0;
        _1805 = 1.0;
        _1806 = 1.0;
    }
    float _1870;
    float _1872;
    float _1874;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1858 = fma(_1654, cbSceneParam._m0[63u].w, fma(_1650, cbSceneParam._m0[63u].z, fma(_1646, cbSceneParam._m0[63u].y, _1642 * cbSceneParam._m0[63u].x)));
        float _1859 = fma(_1654, cbSceneParam._m0[60u].w, fma(_1650, cbSceneParam._m0[60u].z, fma(_1646, cbSceneParam._m0[60u].y, _1642 * cbSceneParam._m0[60u].x))) / _1858;
        float _1860 = fma(_1654, cbSceneParam._m0[61u].w, fma(_1650, cbSceneParam._m0[61u].z, fma(_1646, cbSceneParam._m0[61u].y, _1642 * cbSceneParam._m0[61u].x))) / _1858;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1859 >= cbSceneParam._m0[64u].x) && (_1860 >= cbSceneParam._m0[64u].y)) && (_1859 <= cbSceneParam._m0[64u].z)) && (_1860 <= cbSceneParam._m0[64u].w))
        {
            float _1998 = fma(_1654, cbSceneParam._m0[62u].w, fma(_1650, cbSceneParam._m0[62u].z, fma(_1646, cbSceneParam._m0[62u].y, _1642 * cbSceneParam._m0[62u].x))) / _1858;
            float _2002 = isnan(cbSceneParam._m0[41u].w) ? _1998 : (isnan(_1998) ? cbSceneParam._m0[41u].w : max(_1998, cbSceneParam._m0[41u].w));
            float _2045 = (cbSceneParam._m0[33u].x - sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657))) * cbSceneParam._m0[33u].y;
            float _4031 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
            float _2052 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1859, cbSceneParam._m0[33u].w + _1860), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1859, _1860 - cbSceneParam._m0[33u].z), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1859 - cbSceneParam._m0[33u].z, _1860 - cbSceneParam._m0[33u].w), _2002), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1859 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1860), _2002), 0.0)).x), vec4(0.25)));
            float _2056 = 1.0 - (_2052 * cbSceneParam._m0[34u].x);
            float _2057 = 1.0 - (_2052 * cbSceneParam._m0[34u].y);
            float _2058 = 1.0 - (_2052 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2058) ? _1806 : (isnan(_1806) ? _2058 : min(_1806, _2058));
            frontier_phi_34_33_ladder_1 = isnan(_2057) ? _1805 : (isnan(_1805) ? _2057 : min(_1805, _2057));
            frontier_phi_34_33_ladder_2 = isnan(_2056) ? _1804 : (isnan(_1804) ? _2056 : min(_1804, _2056));
        }
        else
        {
            frontier_phi_34_33_ladder = _1806;
            frontier_phi_34_33_ladder_1 = _1805;
            frontier_phi_34_33_ladder_2 = _1804;
        }
        _1870 = frontier_phi_34_33_ladder_2;
        _1872 = frontier_phi_34_33_ladder_1;
        _1874 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1870 = _1804;
        _1872 = _1805;
        _1874 = _1806;
    }
    uvec4 _1879 = floatBitsToUint(cbInstanceData._m0[_555 + 5u]);
    uint _1881 = _1879.x * 14u;
    uint _1882 = _1881 + 13u;
    float _1889 = _580 + (-1.0);
    float _1894 = (cbLight._m0[_1882].x * _1889) + 1.0;
    float _1895 = (cbLight._m0[_1882].y * _1889) + 1.0;
    float _1896 = (cbLight._m0[_1882].z * _1889) + 1.0;
    float _1897 = (cbLight._m0[_1882].w * _1889) + 1.0;
    uint _1898 = _1881 + 5u;
    float _1904 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1908 = _1881 + 4u;
    float _1917 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1921 = _1881 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_428, _429, _430));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_428, _429, _430));
    float _4067 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4078 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1898].x * _1904) * _1942) + (((cbLight._m0[_1908].x * _1870) * _1917) * _1940);
    float _1950 = ((_1904 * cbLight._m0[_1898].y) * _1942) + (((cbLight._m0[_1908].y * _1872) * _1917) * _1940);
    float _1951 = ((_1904 * cbLight._m0[_1898].z) * _1942) + (((cbLight._m0[_1908].z * _1874) * _1917) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1881 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_1957)
    {
        _2059 = _1949;
        _2061 = _1950;
        _2063 = _1951;
    }
    else
    {
        uint _2067 = _1881 + 6u;
        float _2083 = (dot(vec3(cbLight._m0[_1881 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4089 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2086 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2059 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _1949;
        _2061 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _1950;
        _2063 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _1951;
    }
    bool _2066 = _1955.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2066)
    {
        _2121 = _2059;
        _2123 = _2061;
        _2125 = _2063;
    }
    else
    {
        uint _2283 = _1881 + 7u;
        float _2299 = (dot(vec3(cbLight._m0[_1881 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4105 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2302 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2121 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2059;
        _2123 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2061;
        _2125 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2063;
    }
    uint _2128 = _1881 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _431) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1881].x + _509;
    float _2144 = cbLight._m0[_1881].y + _510;
    float _2145 = cbLight._m0[_1881].z + _511;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1881].xyz));
    float _4121 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _2157 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2158 = dot(vec3(_428, _429, _430), vec3(_2150, _2151, _2152));
    float _4143 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2150, _2151, _2152));
    float _4154 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2157 * ((_2156 * _2182) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2182) + _2142) * _2156))) * _2156;
    float _4165 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2209 = _1881 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _431) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_1921].x + _509;
    float _2223 = cbLight._m0[_1921].y + _510;
    float _2224 = cbLight._m0[_1921].z + _511;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1921].xyz));
    float _4176 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2236 = dot(vec3(_428, _429, _430), vec3(_2229, _2230, _2231));
    float _4187 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2229, _2230, _2231));
    float _4198 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2221;
    float _2268 = (0.5 / (((_2157 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2258) + _2221) * _2235))) * _2235;
    float _4209 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2280 = (((_2257 * cbLight._m0[_2209].x) * _2270) * _1904) + ((((cbLight._m0[_2128].x * _1870) * _2181) * _2195) * _1917);
    float _2281 = (((_2257 * cbLight._m0[_2209].y) * _2270) * _1904) + ((((cbLight._m0[_2128].y * _1872) * _2181) * _2195) * _1917);
    float _2282 = (((_2257 * cbLight._m0[_2209].z) * _2270) * _1904) + ((((cbLight._m0[_2128].z * _1874) * _2181) * _2195) * _1917);
    float _2338;
    float _2340;
    float _2342;
    if (_1957)
    {
        _2338 = _2280;
        _2340 = _2281;
        _2342 = _2282;
    }
    else
    {
        uint _2344 = _1881 + 2u;
        uint _2348 = _1881 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _431) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _509;
        float _2365 = cbLight._m0[_2344].y + _510;
        float _2366 = cbLight._m0[_2344].z + _511;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2344].xyz));
        float _4220 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2378 = dot(vec3(_428, _429, _430), vec3(_2371, _2372, _2373));
        float _4231 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4242 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2400 = 1.0 - _2363;
        float _2410 = (0.5 / (((_2157 * ((_2377 * _2400) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2400) + _2363) * _2377))) * _2377;
        float _4253 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2338 = (((_2399 * cbLight._m0[_2348].x) * _2412) * _2413) + _2280;
        _2340 = (((_2399 * cbLight._m0[_2348].y) * _2412) * _2413) + _2281;
        _2342 = (((_2399 * cbLight._m0[_2348].z) * _2412) * _2413) + _2282;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2066)
    {
        _2444 = _2338;
        _2446 = _2340;
        _2448 = _2342;
    }
    else
    {
        uint _2455 = _1881 + 3u;
        uint _2459 = _1881 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _431) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _509;
        float _2476 = cbLight._m0[_2455].y + _510;
        float _2477 = cbLight._m0[_2455].z + _511;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2455].xyz));
        float _4269 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2489 = dot(vec3(_428, _429, _430), vec3(_2482, _2483, _2484));
        float _4280 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4291 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2511 = 1.0 - _2474;
        float _2521 = (0.5 / (((_2157 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2511) + _2474) * _2488))) * _2488;
        float _4302 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2444 = (((_2510 * cbLight._m0[_2459].x) * _2523) * _2524) + _2338;
        _2446 = (((_2510 * cbLight._m0[_2459].y) * _2523) * _2524) + _2340;
        _2448 = (((_2510 * cbLight._m0[_2459].z) * _2523) * _2524) + _2342;
    }
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_1879.y == 0u)
    {
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.x;
        uint _2557 = uint((float(_2545.y) * floor(float(uint(cbSceneParam._m0[85u].y * _518) / _2546))) + floor(float(uint(cbSceneParam._m0[85u].x * _517) / _2546)));
        float _2567 = (log2(_1657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2568 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        uint _2571 = uint(isnan(14.0) ? _2568 : (isnan(_2568) ? 14.0 : min(_2568, 14.0)));
        uvec4 _2576 = texelFetch(g_lightClusterGridBuffer, int(((_2571 << 2u) + (_2557 << 6u)) >> 2u));
        uint _2577 = _2576.x;
        uint _2578 = _2545.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2578 >> 4u) & 15u)) + 4294967295u) & _2577) == 0u) || ((_2578 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2818)
                {
                    frontier_phi_66_pred = _2807;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2817;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2808 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _1655;
                        float _2993 = _2952.y - _1656;
                        float _2994 = _2952.z - _1657;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_536, _539, _542), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4328 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _1655;
                        float _3028 = (-0.0) - _1656;
                        float _3029 = (-0.0) - _1657;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3043 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _596;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3034 + _2999;
                        float _3055 = _3035 + _3000;
                        float _3056 = _3036 + _3001;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_536, _539, _542), vec3(_3034, _3035, _3036));
                        float _4344 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3068 = dot(vec3(_536, _539, _542), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4355 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3012 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3002) + _3077;
                        float _4366 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4377 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3075 * _3075) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2861 = (_3023 * _2971.x) + _2929;
                        _2862 = (_3023 * _2971.y) + _2930;
                        _2863 = (_3023 * _2971.z) + _2931;
                        _2858 = (_3103 * _2988.x) + _2926;
                        _2859 = (_3103 * _2988.y) + _2927;
                        _2860 = (_3103 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_66_pred = _2863;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                _2668 = frontier_phi_66_pred;
                _2666 = frontier_phi_66_pred_1;
                _2664 = frontier_phi_66_pred_2;
                _2662 = frontier_phi_66_pred_3;
                _2660 = frontier_phi_66_pred_4;
                _2658 = frontier_phi_66_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2658;
                    _2803 = _2660;
                    _2804 = _2662;
                    _2805 = _2664;
                    _2806 = _2666;
                    _2807 = _2668;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2674) & _2577) == 0u)
        {
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
            float _2796 = _2795 * _1655;
            float _2797 = _2795 * _1656;
            float _2798 = _2795 * _1657;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2909 = _2657;
                float _2910 = _2659;
                float _2911 = _2661;
                float _2912 = _2663;
                float _2913 = _2665;
                float _2914 = _2667;
                uint _2915 = _2674;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2925)
                    {
                        frontier_phi_72_pred = _2914;
                        frontier_phi_72_pred_1 = _2913;
                        frontier_phi_72_pred_2 = _2912;
                        frontier_phi_72_pred_3 = _2911;
                        frontier_phi_72_pred_4 = _2910;
                        frontier_phi_72_pred_5 = _2909;
                    }
                    else
                    {
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3121 = _2909;
                        float _3122 = _2910;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        uint _3127 = _2924;
                        uint _3128;
                        vec4 _3153;
                        float _3154;
                        vec4 _3169;
                        vec3 _3181;
                        vec4 _3197;
                        vec4 _3213;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3138 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3127));
                            _3128 = (_3127 + 4294967295u) & _3127;
                            uint _3140 = _3138 * 40u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            _3154 = _3153.w;
                            uint _3156 = (_3138 * 40u) + 4u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3138 * 40u) + 8u;
                            _3181 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x));
                            uint _3184 = (_3138 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3200 = (_3138 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3138 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3138 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_1657, _3248.z, fma(_1656, _3248.y, _3248.x * _1655)) + _3248.w;
                            _3261 = !((fma(_1657, _3229.z, fma(_1656, _3229.y, _3229.x * _1655)) + _3229.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3153.x - _1655;
                                float _3289 = _3153.y - _1656;
                                float _3290 = _3153.z - _1657;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3154 * _3154));
                                float _4388 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3306 = sqrt(_3291) * _3169.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_536, _539, _542))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_1657, _3197.z, fma(_1656, _3197.y, _3197.x * _1655)) + _3197.w) / _3260;
                                float _3320 = (fma(_1657, _3213.z, fma(_1656, _3213.y, _3213.x * _1655)) + _3213.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4404 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _596;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2796;
                                float _3350 = _3296 - _2797;
                                float _3351 = _3297 - _2798;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_536, _539, _542), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4415 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3363 = dot(vec3(_536, _539, _542), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4426 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_536, _539, _542), vec3(_3295, _3296, _3297))) + _3372;
                                float _4437 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4448 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3326 * _3169.y;
                                frontier_phi_78_pred_1 = _3326 * _3169.x;
                                frontier_phi_78_pred_2 = _3400 * _3181.z;
                                frontier_phi_78_pred_3 = _3400 * _3181.y;
                                frontier_phi_78_pred_4 = _3400 * _3181.x;
                                frontier_phi_78_pred_5 = _3326 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_78_pred;
                            _3407 = frontier_phi_78_pred_1;
                            _3406 = frontier_phi_78_pred_2;
                            _3405 = frontier_phi_78_pred_3;
                            _3404 = frontier_phi_78_pred_4;
                            _3409 = frontier_phi_78_pred_5;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            _3113 = _3409 + _3126;
                            _3108 = _3404 + _3121;
                            _3109 = _3405 + _3122;
                            _3110 = _3406 + _3123;
                            if (_3128 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3128;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3113;
                        frontier_phi_72_pred_1 = _3112;
                        frontier_phi_72_pred_2 = _3111;
                        frontier_phi_72_pred_3 = _3110;
                        frontier_phi_72_pred_4 = _3109;
                        frontier_phi_72_pred_5 = _3108;
                    }
                    _2781 = frontier_phi_72_pred;
                    _2779 = frontier_phi_72_pred_1;
                    _2777 = frontier_phi_72_pred_2;
                    _2775 = frontier_phi_72_pred_3;
                    _2773 = frontier_phi_72_pred_4;
                    _2771 = frontier_phi_72_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2771;
                        _2910 = _2773;
                        _2911 = _2775;
                        _2912 = _2777;
                        _2913 = _2779;
                        _2914 = _2781;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2781;
                frontier_phi_60_61_ladder_1 = _2779;
                frontier_phi_60_61_ladder_2 = _2775;
                frontier_phi_60_61_ladder_3 = _2773;
                frontier_phi_60_61_ladder_4 = _2771;
                frontier_phi_60_61_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_60_61_ladder = _2667;
                frontier_phi_60_61_ladder_1 = _2665;
                frontier_phi_60_61_ladder_2 = _2661;
                frontier_phi_60_61_ladder_3 = _2659;
                frontier_phi_60_61_ladder_4 = _2657;
                frontier_phi_60_61_ladder_5 = _2663;
            }
            _2770 = frontier_phi_60_61_ladder_4;
            _2772 = frontier_phi_60_61_ladder_3;
            _2774 = frontier_phi_60_61_ladder_2;
            _2776 = frontier_phi_60_61_ladder_5;
            _2778 = frontier_phi_60_61_ladder_1;
            _2780 = frontier_phi_60_61_ladder;
        }
        float _2785 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
        _2590 = (_2785 * _2776) + _2121;
        _2592 = (_2785 * _2778) + _2123;
        _2594 = (_2785 * _2780) + _2125;
        _2596 = ((_2770 * 0.039999999105930328369140625) * _2785) + _2444;
        _2598 = ((_2772 * 0.039999999105930328369140625) * _2785) + _2446;
        _2600 = ((_2774 * 0.039999999105930328369140625) * _2785) + _2448;
    }
    else
    {
        _2590 = _2121;
        _2592 = _2123;
        _2594 = _2125;
        _2596 = _2444;
        _2598 = _2446;
        _2600 = _2448;
    }
    float _4464 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4475 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4486 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    uint _2620 = _555 + 6u;
    float _2628 = _517 / cbSceneParam._m0[86u].x;
    float _2629 = _518 / cbSceneParam._m0[86u].y;
    vec4 _2643 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, (log2((isnan(cbSceneParam._m0[77u].w) ? _450 : (isnan(_450) ? cbSceneParam._m0[77u].w : min(_450, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2645 = _2643.x;
    float _2646 = _2643.y;
    float _2647 = _2643.z;
    float _2648 = _2643.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_450 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_450) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _450 : min(cbSceneParam._m0[80u].w, _450));
        float _2683 = _2682 / _450;
        float _2694 = _2683 * _502;
        float _2695 = _503 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2698 = _2683 * _504;
        float _2700 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2695;
        float _2708 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2696 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2833 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2871 = ((abs(_2708 / _2696) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2718 * _2842) - exp2(_2718 * _2843)) * _2831))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2648);
        _2720 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2645;
        _2722 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2646;
        _2724 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2647;
        _2726 = _2882 * _2648;
    }
    else
    {
        _2720 = _2645;
        _2722 = _2646;
        _2724 = _2647;
        _2726 = _2648;
    }
    float _2738 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2739 = _2738 == 3.0;
    float _2740 = log2(_2726);
    float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2590 + ((isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))) * _580))) + ((_2596 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2592 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _580))) + ((_2598 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2594 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _580))) + ((_2600 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1387)) * cbPerFrame._m0[3u].x));
    float _2758 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2758 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.y = _2758 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.z = _2758 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.w = cbInstanceData._m0[_2620].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2620].w;
}


