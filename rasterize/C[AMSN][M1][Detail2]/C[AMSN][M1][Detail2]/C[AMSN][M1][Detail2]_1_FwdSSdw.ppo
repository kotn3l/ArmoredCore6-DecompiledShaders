#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _916;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _237 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _237.x * cbMtdParam._m0[9u].x;
    float _244 = _237.y * cbMtdParam._m0[9u].y;
    float _245 = _237.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _299 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3254 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _300 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _307 = (_300 * ((_268.x * cbMtdParam._m0[10u].x) - _243)) + _243;
    float _308 = (_300 * ((_268.y * cbMtdParam._m0[10u].y) - _244)) + _244;
    float _309 = (_300 * ((_268.z * cbMtdParam._m0[10u].z) - _245)) + _245;
    vec4 _326 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = (_326.x * 2.0) + (-1.0);
    float _336 = (_326.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3265 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _342 = sqrt(1.0 - (isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))));
    float _343 = _326.z * cbMtdParam._m0[13u].y;
    vec4 _356 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _370 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_356.z * cbMtdParam._m0[13u].x) - _343)) + _343;
    float _376 = ((((_356.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _334;
    float _377 = ((((_356.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _336;
    float _380 = fma(_342, _207 * NORMAL.x, fma(_377, _214 * TANGENT.x, (_200 * _192) * _376));
    float _383 = fma(_342, _207 * NORMAL.y, fma(_377, _214 * TANGENT.y, (_200 * _193) * _376));
    float _386 = fma(_342, _207 * NORMAL.z, fma(_377, _214 * TANGENT.z, (_200 * _194) * _376));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    float _391 = _390 * _380;
    float _392 = _390 * _383;
    float _393 = _390 * _386;
    float _3276 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _394 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3298 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _3309 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _413 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _464 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _466 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
    float _471 = _464 * _470;
    float _472 = _465 * _470;
    float _473 = _466 * _470;
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _500 = fma(_393, cbSceneParam._m0[5u].z, fma(_392, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _391));
    float _503 = fma(_393, cbSceneParam._m0[6u].z, fma(_392, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _391));
    float _506 = fma(_393, cbSceneParam._m0[7u].z, fma(_392, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _391));
    uint _519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _521 = (_519 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_521].x;
    float _528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_521].y;
    float _529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_521].z;
    float _3320 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _531 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    vec4 _541 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _544 = _541.x * TEXCOORD_5.w;
    float _545 = dot(vec3(_391, _392, _393), vec3(_471, _472, _473));
    float _548 = _545 * 2.0;
    float _552 = (_548 * _391) - _471;
    float _553 = (_548 * _392) - _472;
    float _554 = (_548 * _393) - _473;
    float _558 = abs(dot(vec3(_471, _472, _473), vec3(_391, _392, _393)));
    float _3353 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _560 = sqrt(_394);
    float _573 = exp2((_560 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_560 * 3.0));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _915;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _640 = fma(_613, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605));
        float _644 = fma(_613, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605));
        float _648 = fma(_613, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605));
        float _673 = _605 + _391;
        float _674 = _609 + _392;
        float _675 = _613 + _393;
        float _685 = fma(_675, cbModelParam._m0[26u].z, fma(_674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673)) - _640;
        float _686 = fma(_675, cbModelParam._m0[27u].z, fma(_674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673)) - _644;
        float _687 = fma(_675, cbModelParam._m0[28u].z, fma(_674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673)) - _648;
        float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
        float _704 = ((_691 * _685) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_640 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _705 = ((_691 * _686) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_644 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _706 = ((_691 * _687) / cbModelParam._m0[34u].z) + ((((((_648 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_704, _705, _706), 0.0);
        float _743 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_709.x + (-0.5));
        float _745 = _743 * (_709.y + (-0.5));
        float _746 = _743 * (_709.z + (-0.5));
        float _753 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_716.x + (-0.5));
        float _755 = _753 * (_716.y + (-0.5));
        float _756 = _753 * (_716.z + (-0.5));
        float _763 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_723.x + (-0.5));
        float _765 = _763 * (_723.y + (-0.5));
        float _766 = _763 * (_723.z + (-0.5));
        float _773 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_730.x + (-0.5));
        float _775 = _773 * (_730.y + (-0.5));
        float _776 = _773 * (_730.z + (-0.5));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = _744 * 0.5;
        float _781 = _754 * 0.5;
        float _782 = _764 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _797 = (dot(vec3(_391, _392, _393), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _807 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3401 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_809 + 1.0))) + _814) * _777;
        float _824 = _745 * 0.5;
        float _825 = _755 * 0.5;
        float _826 = _765 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(_391, _392, _393), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _3434 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_851 + 1.0))) + _856) * _778;
        float _866 = _746 * 0.5;
        float _867 = _756 * 0.5;
        float _868 = _766 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(_391, _392, _393), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3467 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_893 + 1.0))) + _898) * _779;
        _915 = _746;
        _917 = _745;
        _918 = _744;
        _919 = _756;
        _920 = _755;
        _921 = _754;
        _922 = _766;
        _923 = _765;
        _924 = _764;
        _925 = _779;
        _926 = _778;
        _927 = _777;
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
    }
    else
    {
        _915 = _916;
        _917 = _916;
        _918 = _916;
        _919 = _916;
        _920 = _916;
        _921 = _916;
        _922 = _916;
        _923 = _916;
        _924 = _916;
        _925 = _916;
        _926 = _916;
        _927 = _916;
        _928 = 0.0;
        _929 = 0.0;
        _930 = 0.0;
    }
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _956 = fma(_613, cbModelParam._m0[30u].z, fma(_609, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _605));
        float _960 = fma(_613, cbModelParam._m0[31u].z, fma(_609, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _605));
        float _964 = fma(_613, cbModelParam._m0[32u].z, fma(_609, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _605));
        float _987 = _605 + _391;
        float _988 = _609 + _392;
        float _989 = _613 + _393;
        float _999 = fma(_989, cbModelParam._m0[30u].z, fma(_988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987)) - _956;
        float _1000 = fma(_989, cbModelParam._m0[31u].z, fma(_988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987)) - _960;
        float _1001 = fma(_989, cbModelParam._m0[32u].z, fma(_988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987)) - _964;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_956 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_960 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[35u].z) + ((((((_964 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1055 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1022.x + (-0.5));
        float _1057 = _1055 * (_1022.y + (-0.5));
        float _1058 = _1055 * (_1022.z + (-0.5));
        float _1065 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1029.x + (-0.5));
        float _1067 = _1065 * (_1029.y + (-0.5));
        float _1068 = _1065 * (_1029.z + (-0.5));
        float _1075 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1036.x + (-0.5));
        float _1077 = _1075 * (_1036.y + (-0.5));
        float _1078 = _1075 * (_1036.z + (-0.5));
        float _1085 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1043.x + (-0.5));
        float _1087 = _1085 * (_1043.y + (-0.5));
        float _1088 = _1085 * (_1043.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_391, _392, _393), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3530 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1119 + 1.0))) + _1124) * _1089;
        float _1134 = _1057 * 0.5;
        float _1135 = _1067 * 0.5;
        float _1136 = _1077 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_391, _392, _393), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3563 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1161 + 1.0))) + _1166) * _1090;
        float _1176 = _1058 * 0.5;
        float _1177 = _1068 * 0.5;
        float _1178 = _1078 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_391, _392, _393), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3596 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1203 + 1.0))) + _1208) * _1091;
        _1225 = _1058;
        _1226 = _1057;
        _1227 = _1056;
        _1228 = _1068;
        _1229 = _1067;
        _1230 = _1066;
        _1231 = _1078;
        _1232 = _1077;
        _1233 = _1076;
        _1234 = _1091;
        _1235 = _1090;
        _1236 = _1089;
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _916;
        _1226 = _916;
        _1227 = _916;
        _1228 = _916;
        _1229 = _916;
        _1230 = _916;
        _1231 = _916;
        _1232 = _916;
        _1233 = _916;
        _1234 = _916;
        _1235 = _916;
        _1236 = _916;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _928)) + _928;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _929)) + _929;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _930)) + _930;
    float _1272 = fma(_1251, cbSceneParam._m0[89u].z, fma(_1250, cbSceneParam._m0[89u].y, _1249 * cbSceneParam._m0[89u].x));
    float _1275 = fma(_1251, cbSceneParam._m0[90u].z, fma(_1250, cbSceneParam._m0[90u].y, _1249 * cbSceneParam._m0[90u].x));
    float _1278 = fma(_1251, cbSceneParam._m0[91u].z, fma(_1250, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1249));
    float _1293 = _552 * 0.5;
    float _1294 = _553 * 0.5;
    float _1295 = _554 * 0.5;
    float _1296 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1299 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1302 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1336;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1309 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_915, _919, _922, _925));
        float _1313 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_917, _920, _923, _926));
        float _1317 = dot(vec4(_1293, _1294, _1295, 1.0), vec4(_918, _921, _924, _927));
        float _1324 = dot(vec4(cbModelParam._m0[39u]), vec4(_1293, _1294, _1295, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1324) ? 0.0 : (isnan(0.0) ? _1324 : max(0.0, _1324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1347;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1338 = dot(vec4(cbModelParam._m0[40u]), vec4(_1293, _1294, _1295, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1351 = (_1347 * cbModelParam._m0[1u].x) + (_1336 * (1.0 - cbModelParam._m0[1u].x));
    float _1361 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _394);
    float _1362 = isnan(_1361) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1361 : min(cbModelParam._m0[25u].z, _1361));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_613, cbModelParam._m0[13u].z, fma(_609, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_613, cbModelParam._m0[14u].z, fma(_609, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_613, cbModelParam._m0[15u].z, fma(_609, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_554, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552));
        float _1424 = fma(_554, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552));
        float _1427 = fma(_554, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552));
        float _1455;
        if (_1421 > 0.0)
        {
            _1455 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1455 = frontier_phi_14_12_ladder;
        }
        float _1681;
        if (_1424 > 0.0)
        {
            _1681 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1681 = frontier_phi_23_19_ladder;
        }
        float _1927;
        if (_1427 > 0.0)
        {
            _1927 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1927 = frontier_phi_35_30_ladder;
        }
        float _1929 = isnan(_1681) ? _1455 : (isnan(_1455) ? _1681 : min(_1455, _1681));
        float _1930 = isnan(_1927) ? _1929 : (isnan(_1929) ? _1927 : min(_1929, _1927));
        float _1934 = (_1930 * _1421) + _1410;
        float _1935 = (_1930 * _1424) + _1414;
        float _1936 = (_1930 * _1427) + _1418;
        float _1937 = _1930 * 9.9999997473787516355514526367188e-05;
        float _1939 = (-1.0) - _1937;
        float _1941 = _1937 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1936 > _1941) || ((_1936 < _1939) || ((_1935 > _1941) || ((_1935 < _1939) || ((_1934 < _1939) || (_1934 > _1941))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1936, cbModelParam._m0[9u].z, fma(_1935, cbModelParam._m0[9u].y, _1934 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1936, cbModelParam._m0[10u].z, fma(_1935, cbModelParam._m0[10u].y, _1934 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1936, cbModelParam._m0[11u].z, fma(_1935, cbModelParam._m0[11u].y, _1934 * cbModelParam._m0[11u].x))), _1362);
            frontier_phi_13_35_ladder = _2060.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2060.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2060.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_13_35_ladder_2;
        _1445 = frontier_phi_13_35_ladder_1;
        _1447 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_552, _553, _554), _1362);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1451 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _394);
    float _1452 = isnan(_1451) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1451 : min(cbModelParam._m0[25u].w, _1451));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1509 = fma(_613, cbModelParam._m0[21u].z, fma(_609, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605)) + cbModelParam._m0[21u].w;
        float _1513 = fma(_613, cbModelParam._m0[22u].z, fma(_609, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605)) + cbModelParam._m0[22u].w;
        float _1517 = fma(_613, cbModelParam._m0[23u].z, fma(_609, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605)) + cbModelParam._m0[23u].w;
        float _1520 = fma(_554, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552));
        float _1523 = fma(_554, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552));
        float _1526 = fma(_554, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552));
        float _1686;
        if (_1520 > 0.0)
        {
            _1686 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1686 = frontier_phi_25_21_ladder;
        }
        float _1954;
        if (_1523 > 0.0)
        {
            _1954 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1954 = frontier_phi_37_32_ladder;
        }
        float _2159;
        if (_1526 > 0.0)
        {
            _2159 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2159 = frontier_phi_46_43_ladder;
        }
        float _2161 = isnan(_1954) ? _1686 : (isnan(_1686) ? _1954 : min(_1686, _1954));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1520) + _1509;
        float _2167 = (_2162 * _1523) + _1513;
        float _2168 = (_2162 * _1526) + _1517;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_22_46_ladder = _2367.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2367.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2367.x * cbModelParam._m0[1u].z;
        }
        _1545 = frontier_phi_22_46_ladder_2;
        _1547 = frontier_phi_22_46_ladder_1;
        _1549 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_552, _553, _554), _1452);
        _1545 = _1529.x * cbModelParam._m0[1u].z;
        _1547 = _1529.y * cbModelParam._m0[1u].z;
        _1549 = _1529.z * cbModelParam._m0[1u].z;
    }
    float _1561 = ((((1.0 - _573) * ((_560 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_573 * _560)) * _544;
    float _1562 = _1561 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1563 = _1561 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1564 = _1561 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1567 = fma(_1564, cbSceneParam._m0[89u].z, fma(_1563, cbSceneParam._m0[89u].y, _1562 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1564, cbSceneParam._m0[90u].z, fma(_1563, cbSceneParam._m0[90u].y, _1562 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1564, cbSceneParam._m0[91u].z, fma(_1563, cbSceneParam._m0[91u].y, _1562 * cbSceneParam._m0[91u].x));
    vec4 _1581 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_479, _480));
    float _1583 = _1581.w;
    float _1595 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1583);
    float _1596 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1583);
    float _1597 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1583);
    uvec4 _1601 = floatBitsToUint(cbInstanceData._m0[_519 + 5u]);
    uint _1603 = _1601.x * 14u;
    uint _1604 = _1603 + 13u;
    float _1611 = _544 + (-1.0);
    float _1616 = (cbLight._m0[_1604].x * _1611) + 1.0;
    float _1617 = (cbLight._m0[_1604].y * _1611) + 1.0;
    float _1618 = (cbLight._m0[_1604].z * _1611) + 1.0;
    float _1619 = (cbLight._m0[_1604].w * _1611) + 1.0;
    uint _1620 = _1603 + 5u;
    float _1626 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
    uint _1630 = _1603 + 4u;
    float _1640 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
    uint _1644 = _1603 | 1u;
    float _1655 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_391, _392, _393));
    float _1658 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_391, _392, _393));
    float _3732 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _3743 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1663 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.3183098733425140380859375;
    float _1665 = (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.3183098733425140380859375;
    float _1672 = ((cbLight._m0[_1620].x * _1626) * _1665) + (((cbLight._m0[_1630].x * _1595) * _1640) * _1663);
    float _1673 = ((_1626 * cbLight._m0[_1620].y) * _1665) + (((cbLight._m0[_1630].y * _1596) * _1640) * _1663);
    float _1674 = ((_1626 * cbLight._m0[_1620].z) * _1665) + (((cbLight._m0[_1630].z * _1597) * _1640) * _1663);
    uvec4 _1678 = floatBitsToUint(cbLight._m0[_1603 + 12u]);
    bool _1680 = _1678.x == 0u;
    float _1691;
    float _1693;
    float _1695;
    if (_1680)
    {
        _1691 = _1672;
        _1693 = _1673;
        _1695 = _1674;
    }
    else
    {
        uint _1699 = _1603 + 6u;
        float _1715 = (dot(vec3(cbLight._m0[_1603 + 2u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1716 = _1715 * _1715;
        float _3754 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1718 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1691 = (((cbLight._m0[_1699].x * 0.3183098733425140380859375) * _1717) * _1718) + _1672;
        _1693 = (((cbLight._m0[_1699].y * 0.3183098733425140380859375) * _1717) * _1718) + _1673;
        _1695 = (((cbLight._m0[_1699].z * 0.3183098733425140380859375) * _1717) * _1718) + _1674;
    }
    bool _1698 = _1678.y == 0u;
    float _1736;
    float _1738;
    float _1740;
    if (_1698)
    {
        _1736 = _1691;
        _1738 = _1693;
        _1740 = _1695;
    }
    else
    {
        uint _1898 = _1603 + 7u;
        float _1914 = (dot(vec3(cbLight._m0[_1603 + 3u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1915 = _1914 * _1914;
        float _3770 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1917 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _1736 = (((cbLight._m0[_1898].x * 0.3183098733425140380859375) * _1916) * _1917) + _1691;
        _1738 = (((cbLight._m0[_1898].y * 0.3183098733425140380859375) * _1916) * _1917) + _1693;
        _1740 = (((cbLight._m0[_1898].z * 0.3183098733425140380859375) * _1916) * _1917) + _1695;
    }
    uint _1743 = _1603 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1603].w)) * _394) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1603].x + _471;
    float _1759 = cbLight._m0[_1603].y + _472;
    float _1760 = cbLight._m0[_1603].z + _473;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1603].xyz));
    float _3786 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _1772 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1773 = dot(vec3(_391, _392, _393), vec3(_1765, _1766, _1767));
    float _3808 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1603].xyz), vec3(_1765, _1766, _1767));
    float _3819 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1796 = (exp2(log2(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1797 = 1.0 - _1757;
    float _1808 = (0.5 / (((_1772 * ((_1771 * _1797) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1797) + _1757) * _1771))) * _1771;
    float _3830 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1810 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1824 = _1603 + 9u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1644].w)) * _394) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1644].x + _471;
    float _1838 = cbLight._m0[_1644].y + _472;
    float _1839 = cbLight._m0[_1644].z + _473;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1644].xyz));
    float _3841 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1851 = dot(vec3(_391, _392, _393), vec3(_1844, _1845, _1846));
    float _3852 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1844, _1845, _1846));
    float _3863 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1836 * _1836;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1872 = (exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1873 = 1.0 - _1836;
    float _1883 = (0.5 / (((_1772 * ((_1850 * _1873) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1873) + _1836) * _1850))) * _1850;
    float _3874 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    float _1895 = (((_1872 * cbLight._m0[_1824].x) * _1885) * _1626) + ((((cbLight._m0[_1743].x * _1595) * _1796) * _1810) * _1640);
    float _1896 = (((_1872 * cbLight._m0[_1824].y) * _1885) * _1626) + ((((cbLight._m0[_1743].y * _1596) * _1796) * _1810) * _1640);
    float _1897 = (((_1872 * cbLight._m0[_1824].z) * _1885) * _1626) + ((((cbLight._m0[_1743].z * _1597) * _1796) * _1810) * _1640);
    float _1959;
    float _1961;
    float _1963;
    if (_1680)
    {
        _1959 = _1895;
        _1961 = _1896;
        _1963 = _1897;
    }
    else
    {
        uint _1965 = _1603 + 2u;
        uint _1969 = _1603 + 10u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _394) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _471;
        float _1986 = cbLight._m0[_1965].y + _472;
        float _1987 = cbLight._m0[_1965].z + _473;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1965].xyz));
        float _3885 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1999 = dot(vec3(_391, _392, _393), vec3(_1992, _1993, _1994));
        float _3896 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _3907 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1772 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2021) + _1984) * _1998))) * _1998;
        float _3918 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1959 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1895;
        _1961 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1896;
        _1963 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1897;
    }
    float _2069;
    float _2071;
    float _2073;
    if (_1698)
    {
        _2069 = _1959;
        _2071 = _1961;
        _2073 = _1963;
    }
    else
    {
        uint _2080 = _1603 + 3u;
        uint _2084 = _1603 + 11u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _394) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _471;
        float _2101 = cbLight._m0[_2080].y + _472;
        float _2102 = cbLight._m0[_2080].z + _473;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_2080].xyz));
        float _3934 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2114 = dot(vec3(_391, _392, _393), vec3(_2107, _2108, _2109));
        float _3945 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _3956 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2136 = 1.0 - _2099;
        float _2146 = (0.5 / (((_1772 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _2136) + _2099) * _2113))) * _2113;
        float _3967 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
        _2069 = (((_2135 * cbLight._m0[_2084].x) * _2148) * _2149) + _1959;
        _2071 = (((_2135 * cbLight._m0[_2084].y) * _2148) * _2149) + _1961;
        _2073 = (((_2135 * cbLight._m0[_2084].z) * _2148) * _2149) + _1963;
    }
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_1601.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2533)
                {
                    frontier_phi_61_pred = _2517;
                    frontier_phi_61_pred_1 = _2522;
                    frontier_phi_61_pred_2 = _2521;
                    frontier_phi_61_pred_3 = _2520;
                    frontier_phi_61_pred_4 = _2519;
                    frontier_phi_61_pred_5 = _2518;
                }
                else
                {
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    uint _2647;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2532;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2651 = uint(findLSB(_2647)) + (_2523 << 5u);
                        uint _2648 = (_2647 + 4294967295u) & _2647;
                        uint _2653 = _2651 * 48u;
                        vec4 _2667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2653)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2653 + 3u)).x));
                        uint _2673 = (_2651 * 48u) + 4u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2692 = (_2651 * 48u) + 8u;
                        vec3 _2703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x));
                        float _2707 = _2667.x - _2225;
                        float _2708 = _2667.y - _2226;
                        float _2709 = _2667.z - _2227;
                        float _2710 = dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709));
                        float _2713 = inversesqrt(_2710);
                        float _2714 = _2713 * _2707;
                        float _2715 = _2713 * _2708;
                        float _2716 = _2713 * _2709;
                        float _2717 = dot(vec3(_500, _503, _506), vec3(_2714, _2715, _2716));
                        float _2722 = 1.0 - (_2710 * _2667.w);
                        float _3993 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2724 = sqrt(_2710) * _2686.w;
                        float _2727 = 1.39999997615814208984375 / (_2724 + 1.39999997615814208984375);
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2717) + _2728;
                        float _2734 = _2724 * _2724;
                        float _2738 = ((isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))) * _2723) / ((_2734 * 0.699999988079071044921875) + 1.0);
                        float _2742 = (-0.0) - _2225;
                        float _2743 = (-0.0) - _2226;
                        float _2744 = (-0.0) - _2227;
                        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2759 = exp2(log2(1.0 / ((_2734 * 3.5) + 5.0)) * 0.25);
                        float _2760 = 1.0 - _560;
                        float _2767 = sqrt(1.0 - ((1.0 - (_2760 * _2760)) * (1.0 - (_2759 * _2759))));
                        float _2768 = _2767 * _2767;
                        float _2769 = _2768 * _2768;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2780 = dot(vec3(_500, _503, _506), vec3(_2749, _2750, _2751));
                        float _4009 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2784 = dot(vec3(_500, _503, _506), vec3(_2776 * _2770, _2776 * _2771, _2776 * _2772));
                        float _4020 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2787 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2791 = ((_2787 * _2787) * (_2769 + (-1.0))) + 1.0;
                        float _2792 = _2727 * _2768;
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2717) + _2793;
                        float _4031 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2798 = 1.0 - _2768;
                        float _2808 = (0.5 / (((_2797 * ((_2783 * _2798) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2797 * _2798) + _2768) * _2783))) * _2797;
                        float _4042 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2819 = (((_2769 * 3.1415927410125732421875) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) / ((_2791 * _2791) * ((_2734 * 2.1991131305694580078125) + 3.141590118408203125))) * _2723;
                        _2576 = (_2738 * _2686.x) + _2644;
                        _2577 = (_2738 * _2686.y) + _2645;
                        _2578 = (_2738 * _2686.z) + _2646;
                        _2573 = (_2819 * _2703.x) + _2641;
                        _2574 = (_2819 * _2703.y) + _2642;
                        _2575 = (_2819 * _2703.z) + _2643;
                        if (_2648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2648;
                        }
                    }
                    frontier_phi_61_pred = _2573;
                    frontier_phi_61_pred_1 = _2578;
                    frontier_phi_61_pred_2 = _2577;
                    frontier_phi_61_pred_3 = _2576;
                    frontier_phi_61_pred_4 = _2575;
                    frontier_phi_61_pred_5 = _2574;
                }
                _2373 = frontier_phi_61_pred;
                _2383 = frontier_phi_61_pred_1;
                _2381 = frontier_phi_61_pred_2;
                _2379 = frontier_phi_61_pred_3;
                _2377 = frontier_phi_61_pred_4;
                _2375 = frontier_phi_61_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2373;
                    _2518 = _2375;
                    _2519 = _2377;
                    _2520 = _2379;
                    _2521 = _2381;
                    _2522 = _2383;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2389) & _2271) == 0u)
        {
            _2485 = _2372;
            _2487 = _2374;
            _2489 = _2376;
            _2491 = _2378;
            _2493 = _2380;
            _2495 = _2382;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2511 = _2510 * _2225;
            float _2512 = _2510 * _2226;
            float _2513 = _2510 * _2227;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2624 = _2372;
                float _2625 = _2374;
                float _2626 = _2376;
                float _2627 = _2378;
                float _2628 = _2380;
                float _2629 = _2382;
                uint _2630 = _2389;
                uint _2639;
                bool _2640;
                for (;;)
                {
                    _2639 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2630 << 2u)) >> 2u)).x;
                    _2640 = _2639 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2640)
                    {
                        frontier_phi_67_pred = _2627;
                        frontier_phi_67_pred_1 = _2628;
                        frontier_phi_67_pred_2 = _2629;
                        frontier_phi_67_pred_3 = _2626;
                        frontier_phi_67_pred_4 = _2625;
                        frontier_phi_67_pred_5 = _2624;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        float _2839 = _2626;
                        float _2840 = _2627;
                        float _2841 = _2628;
                        float _2842 = _2629;
                        uint _2843 = _2639;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2976;
                        bool _2977;
                        for (;;)
                        {
                            uint _2854 = ((_2630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2932 = (_2854 * 40u) + 24u;
                            vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2951 = (_2854 * 40u) + 28u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2976 = fma(_2227, _2964.z, fma(_2226, _2964.y, _2964.x * _2225)) + _2964.w;
                            _2977 = !((fma(_2227, _2945.z, fma(_2226, _2945.y, _2945.x * _2225)) + _2945.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2977)
                            {
                                float _3004 = _2869.x - _2225;
                                float _3005 = _2869.y - _2226;
                                float _3006 = _2869.z - _2227;
                                float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                                float _3010 = inversesqrt(_3007);
                                float _3011 = _3010 * _3004;
                                float _3012 = _3010 * _3005;
                                float _3013 = _3010 * _3006;
                                float _3017 = 1.0 - (_3007 / (_2870 * _2870));
                                float _4053 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3022 = sqrt(_3007) * _2885.w;
                                float _3024 = 1.39999997615814208984375 / (_3022 + 1.39999997615814208984375);
                                float _3025 = _3024 * _3024;
                                float _3028 = ((1.0 - _3025) * dot(vec3(_3011, _3012, _3013), vec3(_500, _503, _506))) + _3025;
                                float _3031 = _3022 * _3022;
                                float _3035 = (fma(_2227, _2913.z, fma(_2226, _2913.y, _2913.x * _2225)) + _2913.w) / _2976;
                                float _3036 = (fma(_2227, _2929.z, fma(_2226, _2929.y, _2929.x * _2225)) + _2929.w) / _2976;
                                float _3040 = 1.0 - dot(vec2(_3035, _3036), vec2(_3035, _3036));
                                float _4069 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3042 = _3041 * (((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3018) / ((_3031 * 0.699999988079071044921875) + 1.0));
                                float _3054 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                                float _3055 = 1.0 - _560;
                                float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                                float _3063 = _3062 * _3062;
                                float _3064 = _3063 * _3063;
                                float _3065 = _3011 - _2511;
                                float _3066 = _3012 - _2512;
                                float _3067 = _3013 - _2513;
                                float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                                float _3075 = dot(vec3(_500, _503, _506), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4080 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3079 = dot(vec3(_500, _503, _506), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                                float _4091 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                                float _3087 = _3024 * _3063;
                                float _3088 = _3087 * _3087;
                                float _3094 = ((1.0 - _3088) * dot(vec3(_500, _503, _506), vec3(_3011, _3012, _3013))) + _3088;
                                float _4102 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3096 = 1.0 - _3063;
                                float _3106 = (0.5 / (((_3095 * ((_3078 * _3096) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3063) * _3078))) * _3095;
                                float _4113 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3116 = (_3041 * _3018) * (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) / ((_3086 * _3086) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3116 * _2897.x;
                                frontier_phi_73_pred_1 = _3116 * _2897.y;
                                frontier_phi_73_pred_2 = _3042 * _2885.z;
                                frontier_phi_73_pred_3 = _3042 * _2885.y;
                                frontier_phi_73_pred_4 = _3042 * _2885.x;
                                frontier_phi_73_pred_5 = _3116 * _2897.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_73_pred;
                            _3121 = frontier_phi_73_pred_1;
                            _3125 = frontier_phi_73_pred_2;
                            _3124 = frontier_phi_73_pred_3;
                            _3123 = frontier_phi_73_pred_4;
                            _3122 = frontier_phi_73_pred_5;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            _2829 = _3125 + _2842;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2827;
                        frontier_phi_67_pred_1 = _2828;
                        frontier_phi_67_pred_2 = _2829;
                        frontier_phi_67_pred_3 = _2826;
                        frontier_phi_67_pred_4 = _2825;
                        frontier_phi_67_pred_5 = _2824;
                    }
                    _2492 = frontier_phi_67_pred;
                    _2494 = frontier_phi_67_pred_1;
                    _2496 = frontier_phi_67_pred_2;
                    _2490 = frontier_phi_67_pred_3;
                    _2488 = frontier_phi_67_pred_4;
                    _2486 = frontier_phi_67_pred_5;
                    uint _2631 = _2630 + 1u;
                    if (_2631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2624 = _2486;
                        _2625 = _2488;
                        _2626 = _2490;
                        _2627 = _2492;
                        _2628 = _2494;
                        _2629 = _2496;
                        _2630 = _2631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2494;
                frontier_phi_55_56_ladder_1 = _2496;
                frontier_phi_55_56_ladder_2 = _2492;
                frontier_phi_55_56_ladder_3 = _2490;
                frontier_phi_55_56_ladder_4 = _2488;
                frontier_phi_55_56_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_55_56_ladder = _2380;
                frontier_phi_55_56_ladder_1 = _2382;
                frontier_phi_55_56_ladder_2 = _2378;
                frontier_phi_55_56_ladder_3 = _2376;
                frontier_phi_55_56_ladder_4 = _2374;
                frontier_phi_55_56_ladder_5 = _2372;
            }
            _2485 = frontier_phi_55_56_ladder_5;
            _2487 = frontier_phi_55_56_ladder_4;
            _2489 = frontier_phi_55_56_ladder_3;
            _2491 = frontier_phi_55_56_ladder_2;
            _2493 = frontier_phi_55_56_ladder;
            _2495 = frontier_phi_55_56_ladder_1;
        }
        float _2500 = isnan(1.0) ? _544 : (isnan(_544) ? 1.0 : min(_544, 1.0));
        _2284 = (_2500 * _2491) + _1736;
        _2286 = (_2500 * _2493) + _1738;
        _2288 = (_2500 * _2495) + _1740;
        _2290 = ((_2485 * 0.039999999105930328369140625) * _2500) + _2069;
        _2292 = ((_2487 * 0.039999999105930328369140625) * _2500) + _2071;
        _2294 = ((_2489 * 0.039999999105930328369140625) * _2500) + _2073;
    }
    else
    {
        _2284 = _1736;
        _2286 = _1738;
        _2288 = _1740;
        _2290 = _2069;
        _2292 = _2071;
        _2294 = _2073;
    }
    float _4129 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4140 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4151 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    uint _2314 = _519 + 6u;
    float _2322 = _479 / cbSceneParam._m0[86u].x;
    float _2323 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2337 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, (log2((isnan(cbSceneParam._m0[77u].w) ? _413 : (isnan(_413) ? cbSceneParam._m0[77u].w : min(_413, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2339 = _2337.x;
    float _2340 = _2337.y;
    float _2341 = _2337.z;
    float _2342 = _2337.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_413 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_413) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _413 : min(cbSceneParam._m0[80u].w, _413));
        float _2398 = _2397 / _413;
        float _2409 = _2398 * _464;
        float _2410 = _465 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2413 = _2398 * _466;
        float _2415 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2416 = _2415 + cbSceneParam._m0[79u].w;
        float _2417 = cbSceneParam._m0[79u].w - _2410;
        float _2423 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2413 * _2413));
        float _2426 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2423;
        float _2431 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2411 - _2415) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2416 > 0.0) ? exp2(_2431 * _2416) : (2.0 - exp2(_2433 * _2416))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2426;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : max(_2416, _2417));
            float _2548 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : min(_2416, _2417));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2586 = ((abs(_2423 / _2411) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2431 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2431 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2433 * _2557) - exp2(_2433 * _2558)) * _2546))) + (_2426 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2322, _2323, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2342);
        _2435 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2339;
        _2437 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2340;
        _2439 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2341;
        _2441 = _2597 * _2342;
    }
    else
    {
        _2435 = _2339;
        _2437 = _2340;
        _2439 = _2341;
        _2441 = _2342;
    }
    float _2453 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2454 = _2453 == 3.0;
    float _2455 = log2(_2441);
    float _2462 = exp2(_2455 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2284 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _544))) + ((_2290 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2463 = exp2(_2455 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2286 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _544))) + ((_2292 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2464 = exp2(_2455 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2288 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _544))) + ((_2294 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _1351)) * cbPerFrame._m0[3u].x));
    float _2473 = (_2453 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2473 * (_2454 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2435)));
    SV_Target.y = _2473 * (_2454 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2437)));
    SV_Target.z = _2473 * (_2454 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.w = cbInstanceData._m0[_2314].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2314].w;
}


