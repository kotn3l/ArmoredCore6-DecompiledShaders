#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _918;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _301 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3515 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _302 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _309 = (_302 * ((_270.x * cbMtdParam._m0[10u].x) - _245)) + _245;
    float _310 = (_302 * ((_270.y * cbMtdParam._m0[10u].y) - _246)) + _246;
    float _311 = (_302 * ((_270.z * cbMtdParam._m0[10u].z) - _247)) + _247;
    vec4 _328 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = (_328.x * 2.0) + (-1.0);
    float _338 = (_328.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3526 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _344 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    float _345 = _328.z * cbMtdParam._m0[13u].y;
    vec4 _358 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _372 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_358.z * cbMtdParam._m0[13u].x) - _345)) + _345;
    float _378 = ((((_358.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _336;
    float _379 = ((((_358.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _338;
    float _382 = fma(_344, _209 * NORMAL.x, fma(_379, _216 * TANGENT.x, (_202 * _194) * _378));
    float _385 = fma(_344, _209 * NORMAL.y, fma(_379, _216 * TANGENT.y, (_202 * _195) * _378));
    float _388 = fma(_344, _209 * NORMAL.z, fma(_379, _216 * TANGENT.z, (_202 * _196) * _378));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3537 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _396 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3559 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3570 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _415 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _466 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _456);
    float _467 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _456);
    float _468 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _456);
    float _472 = inversesqrt(dot(vec3(_466, _467, _468), vec3(_466, _467, _468)));
    float _473 = _466 * _472;
    float _474 = _467 * _472;
    float _475 = _468 * _472;
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _502 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _505 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _508 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _521 = uint(roundEven(NORMAL.w)) * 13u;
    uint _523 = (_521 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _529 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) * cbInstanceData._m0[_523].x;
    float _530 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_523].y;
    float _531 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_523].z;
    float _3581 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _3592 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _533 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _534 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _546 = _543.x * TEXCOORD_5.w;
    float _547 = dot(vec3(_393, _394, _395), vec3(_473, _474, _475));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _393) - _473;
    float _555 = (_550 * _394) - _474;
    float _556 = (_550 * _395) - _475;
    float _560 = abs(dot(vec3(_473, _474, _475), vec3(_393, _394, _395)));
    float _3614 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_396);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _917;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _642 = fma(_615, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607));
        float _646 = fma(_615, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607));
        float _650 = fma(_615, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607));
        float _675 = _607 + _393;
        float _676 = _611 + _394;
        float _677 = _615 + _395;
        float _687 = fma(_677, cbModelParam._m0[26u].z, fma(_676, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675)) - _642;
        float _688 = fma(_677, cbModelParam._m0[27u].z, fma(_676, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675)) - _646;
        float _689 = fma(_677, cbModelParam._m0[28u].z, fma(_676, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675)) - _650;
        float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
        float _706 = ((_693 * _687) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_642 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _707 = ((_693 * _688) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_646 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _708 = ((_693 * _689) / cbModelParam._m0[34u].z) + ((((((_650 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _718 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_706, _707, _708), 0.0);
        float _745 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_711.x + (-0.5));
        float _747 = _745 * (_711.y + (-0.5));
        float _748 = _745 * (_711.z + (-0.5));
        float _755 = exp2((_718.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_718.x + (-0.5));
        float _757 = _755 * (_718.y + (-0.5));
        float _758 = _755 * (_718.z + (-0.5));
        float _765 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_725.x + (-0.5));
        float _767 = _765 * (_725.y + (-0.5));
        float _768 = _765 * (_725.z + (-0.5));
        float _775 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_732.x + (-0.5));
        float _777 = _775 * (_732.y + (-0.5));
        float _778 = _775 * (_732.z + (-0.5));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = _746 * 0.5;
        float _783 = _756 * 0.5;
        float _784 = _766 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _799 = (dot(vec3(_393, _394, _395), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _809 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3662 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_811 + 1.0))) + _816) * _779;
        float _826 = _747 * 0.5;
        float _827 = _757 * 0.5;
        float _828 = _767 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _842 = (dot(vec3(_393, _394, _395), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _851 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_780 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _853 = _852 * 2.0;
        float _857 = (1.0 - _852) / (_852 + 1.0);
        float _3695 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _867 = ((((1.0 - _858) * (_853 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_853 + 1.0))) + _858) * _780;
        float _868 = _748 * 0.5;
        float _869 = _758 * 0.5;
        float _870 = _768 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _884 = (dot(vec3(_393, _394, _395), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _893 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3728 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_895 + 1.0))) + _900) * _781;
        _917 = _748;
        _919 = _747;
        _920 = _746;
        _921 = _758;
        _922 = _757;
        _923 = _756;
        _924 = _768;
        _925 = _767;
        _926 = _766;
        _927 = _781;
        _928 = _780;
        _929 = _779;
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
        _931 = cbModelParam._m0[36u].z * (isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0)));
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
    }
    else
    {
        _917 = _918;
        _919 = _918;
        _920 = _918;
        _921 = _918;
        _922 = _918;
        _923 = _918;
        _924 = _918;
        _925 = _918;
        _926 = _918;
        _927 = _918;
        _928 = _918;
        _929 = _918;
        _930 = 0.0;
        _931 = 0.0;
        _932 = 0.0;
    }
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _958 = fma(_615, cbModelParam._m0[30u].z, fma(_611, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _607));
        float _962 = fma(_615, cbModelParam._m0[31u].z, fma(_611, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _607));
        float _966 = fma(_615, cbModelParam._m0[32u].z, fma(_611, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _607));
        float _989 = _607 + _393;
        float _990 = _611 + _394;
        float _991 = _615 + _395;
        float _1001 = fma(_991, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989)) - _958;
        float _1002 = fma(_991, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989)) - _962;
        float _1003 = fma(_991, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989)) - _966;
        float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
        float _1020 = ((_1007 * _1001) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_958 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1007 * _1002) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_962 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1007 * _1003) / cbModelParam._m0[35u].z) + ((((((_966 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1020, _1021, _1022), 0.0);
        float _1057 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1024.x + (-0.5));
        float _1059 = _1057 * (_1024.y + (-0.5));
        float _1060 = _1057 * (_1024.z + (-0.5));
        float _1067 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1031.x + (-0.5));
        float _1069 = _1067 * (_1031.y + (-0.5));
        float _1070 = _1067 * (_1031.z + (-0.5));
        float _1077 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1038.x + (-0.5));
        float _1079 = _1077 * (_1038.y + (-0.5));
        float _1080 = _1077 * (_1038.z + (-0.5));
        float _1087 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1045.x + (-0.5));
        float _1089 = _1087 * (_1045.y + (-0.5));
        float _1090 = _1087 * (_1045.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_393, _394, _395), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3791 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1121 + 1.0))) + _1126) * _1091;
        float _1136 = _1059 * 0.5;
        float _1137 = _1069 * 0.5;
        float _1138 = _1079 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_393, _394, _395), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3824 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1163 + 1.0))) + _1168) * _1092;
        float _1178 = _1060 * 0.5;
        float _1179 = _1070 * 0.5;
        float _1180 = _1080 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_393, _394, _395), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3857 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1205 + 1.0))) + _1210) * _1093;
        _1227 = _1060;
        _1228 = _1059;
        _1229 = _1058;
        _1230 = _1070;
        _1231 = _1069;
        _1232 = _1068;
        _1233 = _1080;
        _1234 = _1079;
        _1235 = _1078;
        _1236 = _1093;
        _1237 = _1092;
        _1238 = _1091;
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _918;
        _1228 = _918;
        _1229 = _918;
        _1230 = _918;
        _1231 = _918;
        _1232 = _918;
        _1233 = _918;
        _1234 = _918;
        _1235 = _918;
        _1236 = _918;
        _1237 = _918;
        _1238 = _918;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _930)) + _930;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _931)) + _931;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _932)) + _932;
    float _1274 = fma(_1253, cbSceneParam._m0[89u].z, fma(_1252, cbSceneParam._m0[89u].y, _1251 * cbSceneParam._m0[89u].x));
    float _1277 = fma(_1253, cbSceneParam._m0[90u].z, fma(_1252, cbSceneParam._m0[90u].y, _1251 * cbSceneParam._m0[90u].x));
    float _1280 = fma(_1253, cbSceneParam._m0[91u].z, fma(_1252, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1251));
    float _1295 = _554 * 0.5;
    float _1296 = _555 * 0.5;
    float _1297 = _556 * 0.5;
    float _1298 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1301 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1304 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1338;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1311 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_917, _921, _924, _927));
        float _1315 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_919, _922, _925, _928));
        float _1319 = dot(vec4(_1295, _1296, _1297, 1.0), vec4(_920, _923, _926, _929));
        float _1326 = dot(vec4(cbModelParam._m0[39u]), vec4(_1295, _1296, _1297, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1349;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1340 = dot(vec4(cbModelParam._m0[40u]), vec4(_1295, _1296, _1297, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1353 = (_1349 * cbModelParam._m0[1u].x) + (_1338 * (1.0 - cbModelParam._m0[1u].x));
    float _1363 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1364 = isnan(_1363) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1363 : min(cbModelParam._m0[25u].z, _1363));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1412 = fma(_615, cbModelParam._m0[13u].z, fma(_611, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607)) + cbModelParam._m0[13u].w;
        float _1416 = fma(_615, cbModelParam._m0[14u].z, fma(_611, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607)) + cbModelParam._m0[14u].w;
        float _1420 = fma(_615, cbModelParam._m0[15u].z, fma(_611, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607)) + cbModelParam._m0[15u].w;
        float _1423 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1426 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1429 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1457;
        if (_1423 > 0.0)
        {
            _1457 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1457 = frontier_phi_14_12_ladder;
        }
        float _1630;
        if (_1426 > 0.0)
        {
            _1630 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1630 = frontier_phi_23_19_ladder;
        }
        float _1926;
        if (_1429 > 0.0)
        {
            _1926 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1926 = frontier_phi_35_30_ladder;
        }
        float _1928 = isnan(_1630) ? _1457 : (isnan(_1457) ? _1630 : min(_1457, _1630));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1423) + _1412;
        float _1934 = (_1929 * _1426) + _1416;
        float _1935 = (_1929 * _1429) + _1420;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1938 = (-1.0) - _1936;
        float _1940 = _1936 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1935 > _1940) || ((_1935 < _1938) || ((_1934 > _1940) || ((_1934 < _1938) || ((_1933 < _1938) || (_1933 > _1940))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1935, cbModelParam._m0[9u].z, fma(_1934, cbModelParam._m0[9u].y, _1933 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1935, cbModelParam._m0[10u].z, fma(_1934, cbModelParam._m0[10u].y, _1933 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1935, cbModelParam._m0[11u].z, fma(_1934, cbModelParam._m0[11u].y, _1933 * cbModelParam._m0[11u].x))), _1364);
            frontier_phi_13_35_ladder = _2080.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2080.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2080.x * cbModelParam._m0[1u].y;
        }
        _1445 = frontier_phi_13_35_ladder_2;
        _1447 = frontier_phi_13_35_ladder_1;
        _1449 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1364);
        _1445 = _1433.x * cbModelParam._m0[1u].y;
        _1447 = _1433.y * cbModelParam._m0[1u].y;
        _1449 = _1433.z * cbModelParam._m0[1u].y;
    }
    float _1453 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1454 = isnan(_1453) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1453 : min(cbModelParam._m0[25u].w, _1453));
    float _1547;
    float _1549;
    float _1551;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1511 = fma(_615, cbModelParam._m0[21u].z, fma(_611, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607)) + cbModelParam._m0[21u].w;
        float _1515 = fma(_615, cbModelParam._m0[22u].z, fma(_611, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607)) + cbModelParam._m0[22u].w;
        float _1519 = fma(_615, cbModelParam._m0[23u].z, fma(_611, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607)) + cbModelParam._m0[23u].w;
        float _1522 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1525 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1528 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1635;
        if (_1522 > 0.0)
        {
            _1635 = abs((1.0 - _1511) / _1522);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1511 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1635 = frontier_phi_25_21_ladder;
        }
        float _1953;
        if (_1525 > 0.0)
        {
            _1953 = abs((1.0 - _1515) / _1525);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1515 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1953 = frontier_phi_37_32_ladder;
        }
        float _2280;
        if (_1528 > 0.0)
        {
            _2280 = abs((1.0 - _1519) / _1528);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1519 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2280 = frontier_phi_47_44_ladder;
        }
        float _2282 = isnan(_1953) ? _1635 : (isnan(_1635) ? _1953 : min(_1635, _1953));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1522) + _1511;
        float _2288 = (_2283 * _1525) + _1515;
        float _2289 = (_2283 * _1528) + _1519;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1454);
            frontier_phi_22_47_ladder = _2407.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2407.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2407.x * cbModelParam._m0[1u].z;
        }
        _1547 = frontier_phi_22_47_ladder_2;
        _1549 = frontier_phi_22_47_ladder_1;
        _1551 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1454);
        _1547 = _1531.x * cbModelParam._m0[1u].z;
        _1549 = _1531.y * cbModelParam._m0[1u].z;
        _1551 = _1531.z * cbModelParam._m0[1u].z;
    }
    float _1563 = ((((1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_575 * _562)) * _546;
    float _1564 = _1563 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = _1563 * ((cbModelParam._m0[1u].w * (_1549 - _1447)) + _1447);
    float _1566 = _1563 * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1569 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, _1564 * cbSceneParam._m0[91u].x));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1622 = _1609 / _1621;
    float _1623 = _1613 / _1621;
    float _1624 = _1617 / _1621;
    float _1771;
    float _1772;
    float _1773;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1651 = ((uint(_1624 > cbSceneParam._m0[59u].y) + uint(_1624 > cbSceneParam._m0[59u].x)) + uint(_1624 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1652 = _1651 + 43u;
        uint _1660 = _1651 + 44u;
        uint _1668 = _1651 + 45u;
        uint _1676 = _1651 + 46u;
        float _1687 = fma(_1621, cbSceneParam._m0[_1652].w, fma(_1617, cbSceneParam._m0[_1652].z, fma(_1613, cbSceneParam._m0[_1652].y, _1609 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1621, cbSceneParam._m0[_1660].w, fma(_1617, cbSceneParam._m0[_1660].z, fma(_1613, cbSceneParam._m0[_1660].y, _1609 * cbSceneParam._m0[_1660].x)));
        float _1699 = fma(_1621, cbSceneParam._m0[_1676].w, fma(_1617, cbSceneParam._m0[_1676].z, fma(_1613, cbSceneParam._m0[_1676].y, _1609 * cbSceneParam._m0[_1676].x)));
        float _1704 = cbSceneParam._m0[33u].z * _1699;
        float _1706 = cbSceneParam._m0[33u].w * _1699;
        float _1709 = fma(_1621, cbSceneParam._m0[_1668].w, fma(_1617, cbSceneParam._m0[_1668].z, fma(_1613, cbSceneParam._m0[_1668].y, _1609 * cbSceneParam._m0[_1668].x))) / _1699;
        float _1757 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
        float _3983 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1764 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1687) / _1699, (_1706 + _1691) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 + _1687) / _1699, (_1691 - _1704) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1704) / _1699, (_1691 - _1706) / _1699), _1709), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 - _1706) / _1699, (_1704 + _1691) / _1699), _1709), 0.0)).x), vec4(0.25)));
        _1771 = 1.0 - (_1764 * cbSceneParam._m0[34u].x);
        _1772 = 1.0 - (_1764 * cbSceneParam._m0[34u].y);
        _1773 = 1.0 - (_1764 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1771 = 1.0;
        _1772 = 1.0;
        _1773 = 1.0;
    }
    float _1837;
    float _1839;
    float _1841;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1825 = fma(_1621, cbSceneParam._m0[63u].w, fma(_1617, cbSceneParam._m0[63u].z, fma(_1613, cbSceneParam._m0[63u].y, _1609 * cbSceneParam._m0[63u].x)));
        float _1826 = fma(_1621, cbSceneParam._m0[60u].w, fma(_1617, cbSceneParam._m0[60u].z, fma(_1613, cbSceneParam._m0[60u].y, _1609 * cbSceneParam._m0[60u].x))) / _1825;
        float _1827 = fma(_1621, cbSceneParam._m0[61u].w, fma(_1617, cbSceneParam._m0[61u].z, fma(_1613, cbSceneParam._m0[61u].y, _1609 * cbSceneParam._m0[61u].x))) / _1825;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1826 >= cbSceneParam._m0[64u].x) && (_1827 >= cbSceneParam._m0[64u].y)) && (_1826 <= cbSceneParam._m0[64u].z)) && (_1827 <= cbSceneParam._m0[64u].w))
        {
            float _1966 = fma(_1621, cbSceneParam._m0[62u].w, fma(_1617, cbSceneParam._m0[62u].z, fma(_1613, cbSceneParam._m0[62u].y, _1609 * cbSceneParam._m0[62u].x))) / _1825;
            float _1970 = isnan(cbSceneParam._m0[41u].w) ? _1966 : (isnan(_1966) ? cbSceneParam._m0[41u].w : max(_1966, cbSceneParam._m0[41u].w));
            float _2013 = (cbSceneParam._m0[33u].x - sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624))) * cbSceneParam._m0[33u].y;
            float _3999 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
            float _2020 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1826, cbSceneParam._m0[33u].w + _1827), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1826, _1827 - cbSceneParam._m0[33u].z), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].z, _1827 - cbSceneParam._m0[33u].w), _1970), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1826 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1827), _1970), 0.0)).x), vec4(0.25)));
            float _2024 = 1.0 - (_2020 * cbSceneParam._m0[34u].x);
            float _2025 = 1.0 - (_2020 * cbSceneParam._m0[34u].y);
            float _2026 = 1.0 - (_2020 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2026) ? _1773 : (isnan(_1773) ? _2026 : min(_1773, _2026));
            frontier_phi_34_33_ladder_1 = isnan(_2025) ? _1772 : (isnan(_1772) ? _2025 : min(_1772, _2025));
            frontier_phi_34_33_ladder_2 = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
        }
        else
        {
            frontier_phi_34_33_ladder = _1773;
            frontier_phi_34_33_ladder_1 = _1772;
            frontier_phi_34_33_ladder_2 = _1771;
        }
        _1837 = frontier_phi_34_33_ladder_2;
        _1839 = frontier_phi_34_33_ladder_1;
        _1841 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1837 = _1771;
        _1839 = _1772;
        _1841 = _1773;
    }
    uvec4 _1846 = floatBitsToUint(cbInstanceData._m0[_521 + 5u]);
    uint _1848 = _1846.x * 14u;
    uint _1849 = _1848 + 13u;
    float _1856 = _546 + (-1.0);
    float _1861 = (cbLight._m0[_1849].x * _1856) + 1.0;
    float _1862 = (cbLight._m0[_1849].y * _1856) + 1.0;
    float _1863 = (cbLight._m0[_1849].z * _1856) + 1.0;
    float _1864 = (cbLight._m0[_1849].w * _1856) + 1.0;
    uint _1865 = _1848 + 5u;
    float _1871 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1875 = _1848 + 4u;
    float _1885 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1889 = _1848 | 1u;
    float _1900 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_393, _394, _395));
    float _1903 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_393, _394, _395));
    float _4035 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _4046 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1908 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.3183098733425140380859375;
    float _1910 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1917 = ((cbLight._m0[_1865].x * _1871) * _1910) + (((cbLight._m0[_1875].x * _1837) * _1885) * _1908);
    float _1918 = ((_1871 * cbLight._m0[_1865].y) * _1910) + (((cbLight._m0[_1875].y * _1839) * _1885) * _1908);
    float _1919 = ((_1871 * cbLight._m0[_1865].z) * _1910) + (((cbLight._m0[_1875].z * _1841) * _1885) * _1908);
    uvec4 _1923 = floatBitsToUint(cbLight._m0[_1848 + 12u]);
    bool _1925 = _1923.x == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1925)
    {
        _2027 = _1917;
        _2029 = _1918;
        _2031 = _1919;
    }
    else
    {
        uint _2035 = _1848 + 6u;
        float _2051 = (dot(vec3(cbLight._m0[_1848 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4057 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2054 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2027 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _1917;
        _2029 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _1918;
        _2031 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _1919;
    }
    bool _2034 = _1923.y == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2034)
    {
        _2089 = _2027;
        _2091 = _2029;
        _2093 = _2031;
    }
    else
    {
        uint _2251 = _1848 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1848 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4073 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2270 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2089 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2027;
        _2091 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2029;
        _2093 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2031;
    }
    uint _2096 = _1848 + 8u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _396) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1848].x + _473;
    float _2112 = cbLight._m0[_1848].y + _474;
    float _2113 = cbLight._m0[_1848].z + _475;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1848].xyz));
    float _4089 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2125 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2126 = dot(vec3(_393, _394, _395), vec3(_2118, _2119, _2120));
    float _4111 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2130 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2118, _2119, _2120));
    float _4122 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2134 = _2110 * _2110;
    float _2138 = ((_2129 * _2129) * (_2134 + (-1.0))) + 1.0;
    float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2150 = 1.0 - _2110;
    float _2161 = (0.5 / (((_2125 * ((_2124 * _2150) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2150) + _2110) * _2124))) * _2124;
    float _4133 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2134 / ((_2138 * _2138) * 3.141590118408203125));
    uint _2177 = _1848 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _396) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1889].x + _473;
    float _2191 = cbLight._m0[_1889].y + _474;
    float _2192 = cbLight._m0[_1889].z + _475;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1889].xyz));
    float _4144 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2204 = dot(vec3(_393, _394, _395), vec3(_2197, _2198, _2199));
    float _4155 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2197, _2198, _2199));
    float _4166 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2226 = 1.0 - _2189;
    float _2236 = (0.5 / (((_2125 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2226) + _2189) * _2203))) * _2203;
    float _4177 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2248 = (((_2225 * cbLight._m0[_2177].x) * _2238) * _1871) + ((((cbLight._m0[_2096].x * _1837) * _2149) * _2163) * _1885);
    float _2249 = (((_2225 * cbLight._m0[_2177].y) * _2238) * _1871) + ((((cbLight._m0[_2096].y * _1839) * _2149) * _2163) * _1885);
    float _2250 = (((_2225 * cbLight._m0[_2177].z) * _2238) * _1871) + ((((cbLight._m0[_2096].z * _1841) * _2149) * _2163) * _1885);
    float _2306;
    float _2308;
    float _2310;
    if (_1925)
    {
        _2306 = _2248;
        _2308 = _2249;
        _2310 = _2250;
    }
    else
    {
        uint _2312 = _1848 + 2u;
        uint _2316 = _1848 + 10u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _396) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _473;
        float _2333 = cbLight._m0[_2312].y + _474;
        float _2334 = cbLight._m0[_2312].z + _475;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2312].xyz));
        float _4188 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2346 = dot(vec3(_393, _394, _395), vec3(_2339, _2340, _2341));
        float _4199 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4210 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2368 = 1.0 - _2331;
        float _2378 = (0.5 / (((_2125 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2368) + _2331) * _2345))) * _2345;
        float _4221 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2306 = (((_2367 * cbLight._m0[_2316].x) * _2380) * _2381) + _2248;
        _2308 = (((_2367 * cbLight._m0[_2316].y) * _2380) * _2381) + _2249;
        _2310 = (((_2367 * cbLight._m0[_2316].z) * _2380) * _2381) + _2250;
    }
    float _2412;
    float _2414;
    float _2416;
    if (_2034)
    {
        _2412 = _2306;
        _2414 = _2308;
        _2416 = _2310;
    }
    else
    {
        uint _2423 = _1848 + 3u;
        uint _2427 = _1848 + 11u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _396) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _473;
        float _2444 = cbLight._m0[_2423].y + _474;
        float _2445 = cbLight._m0[_2423].z + _475;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2423].xyz));
        float _4237 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2457 = dot(vec3(_393, _394, _395), vec3(_2450, _2451, _2452));
        float _4248 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4259 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2478 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2479 = 1.0 - _2442;
        float _2489 = (0.5 / (((_2125 * ((_2456 * _2479) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2125 * _2479) + _2442) * _2456))) * _2456;
        float _4270 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2412 = (((_2478 * cbLight._m0[_2427].x) * _2491) * _2492) + _2306;
        _2414 = (((_2478 * cbLight._m0[_2427].y) * _2491) * _2492) + _2308;
        _2416 = (((_2478 * cbLight._m0[_2427].z) * _2491) * _2492) + _2310;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1846.y == 0u)
    {
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2514)));
        float _2535 = (log2(_1624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2786)
                {
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2774;
                    frontier_phi_66_pred_2 = _2773;
                    frontier_phi_66_pred_3 = _2772;
                    frontier_phi_66_pred_4 = _2771;
                    frontier_phi_66_pred_5 = _2770;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2785;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2776 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _1622;
                        float _2961 = _2920.y - _1623;
                        float _2962 = _2920.z - _1624;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_502, _505, _508), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4296 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _1622;
                        float _2996 = (-0.0) - _1623;
                        float _2997 = (-0.0) - _1624;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3011 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3012 = 1.0 - _562;
                        float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                        float _3020 = _3019 * _3019;
                        float _3021 = _3020 * _3020;
                        float _3022 = _3002 + _2967;
                        float _3023 = _3003 + _2968;
                        float _3024 = _3004 + _2969;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3032 = dot(vec3(_502, _505, _508), vec3(_3002, _3003, _3004));
                        float _4312 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3035 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3036 = dot(vec3(_502, _505, _508), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                        float _4323 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                        float _3044 = _2980 * _3020;
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _2970) + _3045;
                        float _4334 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3050 = 1.0 - _3020;
                        float _3060 = (0.5 / (((_3049 * ((_3035 * _3050) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3049 * _3050) + _3020) * _3035))) * _3049;
                        float _4345 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3071 = (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) / ((_3043 * _3043) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2829 = (_2991 * _2939.x) + _2897;
                        _2830 = (_2991 * _2939.y) + _2898;
                        _2831 = (_2991 * _2939.z) + _2899;
                        _2826 = (_3071 * _2956.x) + _2894;
                        _2827 = (_3071 * _2956.y) + _2895;
                        _2828 = (_3071 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_66_pred = _2831;
                    frontier_phi_66_pred_1 = _2830;
                    frontier_phi_66_pred_2 = _2829;
                    frontier_phi_66_pred_3 = _2828;
                    frontier_phi_66_pred_4 = _2827;
                    frontier_phi_66_pred_5 = _2826;
                }
                _2636 = frontier_phi_66_pred;
                _2634 = frontier_phi_66_pred_1;
                _2632 = frontier_phi_66_pred_2;
                _2630 = frontier_phi_66_pred_3;
                _2628 = frontier_phi_66_pred_4;
                _2626 = frontier_phi_66_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2626;
                    _2771 = _2628;
                    _2772 = _2630;
                    _2773 = _2632;
                    _2774 = _2634;
                    _2775 = _2636;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2642) & _2545) == 0u)
        {
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
            _2744 = _2631;
            _2746 = _2633;
            _2748 = _2635;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
            float _2764 = _2763 * _1622;
            float _2765 = _2763 * _1623;
            float _2766 = _2763 * _1624;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2877 = _2625;
                float _2878 = _2627;
                float _2879 = _2629;
                float _2880 = _2631;
                float _2881 = _2633;
                float _2882 = _2635;
                uint _2883 = _2642;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2893)
                    {
                        frontier_phi_72_pred = _2882;
                        frontier_phi_72_pred_1 = _2881;
                        frontier_phi_72_pred_2 = _2880;
                        frontier_phi_72_pred_3 = _2879;
                        frontier_phi_72_pred_4 = _2878;
                        frontier_phi_72_pred_5 = _2877;
                    }
                    else
                    {
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3089 = _2877;
                        float _3090 = _2878;
                        float _3091 = _2879;
                        float _3092 = _2880;
                        float _3093 = _2881;
                        float _3094 = _2882;
                        uint _3095 = _2892;
                        uint _3096;
                        vec4 _3121;
                        float _3122;
                        vec4 _3137;
                        vec3 _3149;
                        vec4 _3165;
                        vec4 _3181;
                        float _3228;
                        bool _3229;
                        for (;;)
                        {
                            uint _3106 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3095));
                            _3096 = (_3095 + 4294967295u) & _3095;
                            uint _3108 = _3106 * 40u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            _3122 = _3121.w;
                            uint _3124 = (_3106 * 40u) + 4u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3106 * 40u) + 8u;
                            _3149 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x));
                            uint _3152 = (_3106 * 40u) + 16u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3168 = (_3106 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3184 = (_3106 * 40u) + 24u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3203 = (_3106 * 40u) + 28u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3228 = fma(_1624, _3216.z, fma(_1623, _3216.y, _3216.x * _1622)) + _3216.w;
                            _3229 = !((fma(_1624, _3197.z, fma(_1623, _3197.y, _3197.x * _1622)) + _3197.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3229)
                            {
                                float _3256 = _3121.x - _1622;
                                float _3257 = _3121.y - _1623;
                                float _3258 = _3121.z - _1624;
                                float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                                float _3262 = inversesqrt(_3259);
                                float _3263 = _3262 * _3256;
                                float _3264 = _3262 * _3257;
                                float _3265 = _3262 * _3258;
                                float _3269 = 1.0 - (_3259 / (_3122 * _3122));
                                float _4356 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3274 = sqrt(_3259) * _3137.w;
                                float _3276 = 1.39999997615814208984375 / (_3274 + 1.39999997615814208984375);
                                float _3277 = _3276 * _3276;
                                float _3280 = ((1.0 - _3277) * dot(vec3(_3263, _3264, _3265), vec3(_502, _505, _508))) + _3277;
                                float _3283 = _3274 * _3274;
                                float _3287 = (fma(_1624, _3165.z, fma(_1623, _3165.y, _3165.x * _1622)) + _3165.w) / _3228;
                                float _3288 = (fma(_1624, _3181.z, fma(_1623, _3181.y, _3181.x * _1622)) + _3181.w) / _3228;
                                float _3292 = 1.0 - dot(vec2(_3287, _3288), vec2(_3287, _3288));
                                float _4372 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3294 = _3293 * (((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3270) / ((_3283 * 0.699999988079071044921875) + 1.0));
                                float _3306 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                                float _3307 = 1.0 - _562;
                                float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                                float _3315 = _3314 * _3314;
                                float _3316 = _3315 * _3315;
                                float _3317 = _3263 - _2764;
                                float _3318 = _3264 - _2765;
                                float _3319 = _3265 - _2766;
                                float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                                float _3327 = dot(vec3(_502, _505, _508), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4383 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3331 = dot(vec3(_502, _505, _508), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                                float _4394 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                                float _3339 = _3276 * _3315;
                                float _3340 = _3339 * _3339;
                                float _3346 = ((1.0 - _3340) * dot(vec3(_502, _505, _508), vec3(_3263, _3264, _3265))) + _3340;
                                float _4405 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3348 = 1.0 - _3315;
                                float _3358 = (0.5 / (((_3347 * ((_3330 * _3348) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3347 * _3348) + _3315) * _3330))) * _3347;
                                float _4416 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3368 = (_3293 * _3270) * (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3338 * _3338) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3294 * _3137.y;
                                frontier_phi_78_pred_1 = _3294 * _3137.x;
                                frontier_phi_78_pred_2 = _3368 * _3149.z;
                                frontier_phi_78_pred_3 = _3368 * _3149.y;
                                frontier_phi_78_pred_4 = _3368 * _3149.x;
                                frontier_phi_78_pred_5 = _3294 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_78_pred;
                            _3375 = frontier_phi_78_pred_1;
                            _3374 = frontier_phi_78_pred_2;
                            _3373 = frontier_phi_78_pred_3;
                            _3372 = frontier_phi_78_pred_4;
                            _3377 = frontier_phi_78_pred_5;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            _3081 = _3377 + _3094;
                            _3076 = _3372 + _3089;
                            _3077 = _3373 + _3090;
                            _3078 = _3374 + _3091;
                            if (_3096 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3096;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3081;
                        frontier_phi_72_pred_1 = _3080;
                        frontier_phi_72_pred_2 = _3079;
                        frontier_phi_72_pred_3 = _3078;
                        frontier_phi_72_pred_4 = _3077;
                        frontier_phi_72_pred_5 = _3076;
                    }
                    _2749 = frontier_phi_72_pred;
                    _2747 = frontier_phi_72_pred_1;
                    _2745 = frontier_phi_72_pred_2;
                    _2743 = frontier_phi_72_pred_3;
                    _2741 = frontier_phi_72_pred_4;
                    _2739 = frontier_phi_72_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2739;
                        _2878 = _2741;
                        _2879 = _2743;
                        _2880 = _2745;
                        _2881 = _2747;
                        _2882 = _2749;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2749;
                frontier_phi_60_61_ladder_1 = _2747;
                frontier_phi_60_61_ladder_2 = _2743;
                frontier_phi_60_61_ladder_3 = _2741;
                frontier_phi_60_61_ladder_4 = _2739;
                frontier_phi_60_61_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_60_61_ladder = _2635;
                frontier_phi_60_61_ladder_1 = _2633;
                frontier_phi_60_61_ladder_2 = _2629;
                frontier_phi_60_61_ladder_3 = _2627;
                frontier_phi_60_61_ladder_4 = _2625;
                frontier_phi_60_61_ladder_5 = _2631;
            }
            _2738 = frontier_phi_60_61_ladder_4;
            _2740 = frontier_phi_60_61_ladder_3;
            _2742 = frontier_phi_60_61_ladder_2;
            _2744 = frontier_phi_60_61_ladder_5;
            _2746 = frontier_phi_60_61_ladder_1;
            _2748 = frontier_phi_60_61_ladder;
        }
        float _2753 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2558 = (_2753 * _2744) + _2089;
        _2560 = (_2753 * _2746) + _2091;
        _2562 = (_2753 * _2748) + _2093;
        _2564 = ((_2738 * 0.039999999105930328369140625) * _2753) + _2412;
        _2566 = ((_2740 * 0.039999999105930328369140625) * _2753) + _2414;
        _2568 = ((_2742 * 0.039999999105930328369140625) * _2753) + _2416;
    }
    else
    {
        _2558 = _2089;
        _2560 = _2091;
        _2562 = _2093;
        _2564 = _2412;
        _2566 = _2414;
        _2568 = _2416;
    }
    float _4432 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4443 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4454 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    uint _2588 = _521 + 6u;
    float _2596 = _481 / cbSceneParam._m0[86u].x;
    float _2597 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2611 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, (log2((isnan(cbSceneParam._m0[77u].w) ? _415 : (isnan(_415) ? cbSceneParam._m0[77u].w : min(_415, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2613 = _2611.x;
    float _2614 = _2611.y;
    float _2615 = _2611.z;
    float _2616 = _2611.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_415 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_415) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _415 : min(cbSceneParam._m0[80u].w, _415));
        float _2651 = _2650 / _415;
        float _2662 = _2651 * _466;
        float _2663 = _467 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2666 = _2651 * _468;
        float _2668 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2663;
        float _2676 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2664 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2801 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2839 = ((abs(_2676 / _2664) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2686 * _2810) - exp2(_2686 * _2811)) * _2799))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2596, _2597, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2616);
        _2688 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2613;
        _2690 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2614;
        _2692 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2615;
        _2694 = _2850 * _2616;
    }
    else
    {
        _2688 = _2613;
        _2690 = _2614;
        _2692 = _2615;
        _2694 = _2616;
    }
    float _2706 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2707 = _2706 == 3.0;
    float _2708 = log2(_2694);
    float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2558 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _546))) + ((_2564 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1353)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2560 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _546))) + ((_2566 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1353)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2562 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _546))) + ((_2568 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1353)) * cbPerFrame._m0[3u].x));
    float _2726 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2726 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.y = _2726 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.z = _2726 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.w = cbInstanceData._m0[_2588].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2588].w;
}


