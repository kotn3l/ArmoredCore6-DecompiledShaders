#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _948;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _271 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _302 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3260 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _303 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _310 = (_303 * ((_271.x * cbMtdParam._m0[11u].x) - _245)) + _245;
    float _311 = (_303 * ((_271.y * cbMtdParam._m0[11u].y) - _246)) + _246;
    float _312 = (_303 * ((_271.z * cbMtdParam._m0[11u].z) - _247)) + _247;
    vec4 _329 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = (_329.x * 2.0) + (-1.0);
    float _339 = (_329.y * 2.0) + (-1.0);
    float _340 = dot(vec2(_337, _339), vec2(_337, _339));
    float _3271 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))));
    float _346 = _329.z * cbMtdParam._m0[13u].y;
    vec4 _358 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _393 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_379.z * cbMtdParam._m0[13u].z) - _346)) + _346;
    float _409 = (((((_358.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _337) + ((((_379.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _410 = (((((_358.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _339) + ((((_379.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _413 = fma(_345, _209 * NORMAL.x, fma(_410, _216 * TANGENT.x, (_202 * _194) * _409));
    float _416 = fma(_345, _209 * NORMAL.y, fma(_410, _216 * TANGENT.y, (_202 * _195) * _409));
    float _419 = fma(_345, _209 * NORMAL.z, fma(_410, _216 * TANGENT.z, (_202 * _196) * _409));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _424 = _423 * _413;
    float _425 = _423 * _416;
    float _426 = _423 * _419;
    float _3282 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _427 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3304 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3315 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _446 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _498 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _488);
    float _499 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _488);
    float _500 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _488);
    float _504 = inversesqrt(dot(vec3(_498, _499, _500), vec3(_498, _499, _500)));
    float _505 = _498 * _504;
    float _506 = _499 * _504;
    float _507 = _500 * _504;
    float _513 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _514 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _532 = fma(_426, cbSceneParam._m0[5u].z, fma(_425, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _424));
    float _535 = fma(_426, cbSceneParam._m0[6u].z, fma(_425, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _424));
    float _538 = fma(_426, cbSceneParam._m0[7u].z, fma(_425, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _424));
    uint _551 = uint(roundEven(NORMAL.w)) * 13u;
    uint _553 = (_551 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _559 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_553].x;
    float _560 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_553].y;
    float _561 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0)))) * cbInstanceData._m0[_553].z;
    float _3326 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _3337 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _563 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    vec4 _573 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _513, cbSceneParam._m0[86u].y * _514));
    float _576 = _573.x * TEXCOORD_5.w;
    float _577 = dot(vec3(_424, _425, _426), vec3(_505, _506, _507));
    float _580 = _577 * 2.0;
    float _584 = (_580 * _424) - _505;
    float _585 = (_580 * _425) - _506;
    float _586 = (_580 * _426) - _507;
    float _590 = abs(dot(vec3(_505, _506, _507), vec3(_424, _425, _426)));
    float _3359 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _592 = sqrt(_427);
    float _605 = exp2((_592 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_592 * 3.0));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _947;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _672 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _676 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _680 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _705 = _637 + _424;
        float _706 = _641 + _425;
        float _707 = _645 + _426;
        float _717 = fma(_707, cbModelParam._m0[26u].z, fma(_706, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705)) - _672;
        float _718 = fma(_707, cbModelParam._m0[27u].z, fma(_706, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705)) - _676;
        float _719 = fma(_707, cbModelParam._m0[28u].z, fma(_706, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705)) - _680;
        float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
        float _736 = ((_723 * _717) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_672 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _737 = ((_723 * _718) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_676 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _738 = ((_723 * _719) / cbModelParam._m0[34u].z) + ((((((_680 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _741 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _737, _738), 0.0);
        float _775 = exp2((_741.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_741.x + (-0.5));
        float _777 = _775 * (_741.y + (-0.5));
        float _778 = _775 * (_741.z + (-0.5));
        float _785 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_748.x + (-0.5));
        float _787 = _785 * (_748.y + (-0.5));
        float _788 = _785 * (_748.z + (-0.5));
        float _795 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_755.x + (-0.5));
        float _797 = _795 * (_755.y + (-0.5));
        float _798 = _795 * (_755.z + (-0.5));
        float _805 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _806 = _805 * (_762.x + (-0.5));
        float _807 = _805 * (_762.y + (-0.5));
        float _808 = _805 * (_762.z + (-0.5));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = _776 * 0.5;
        float _813 = _786 * 0.5;
        float _814 = _796 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _829 = (dot(vec3(_424, _425, _426), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _839 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3407 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_841 + 1.0))) + _846) * _809;
        float _856 = _777 * 0.5;
        float _857 = _787 * 0.5;
        float _858 = _797 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_424, _425, _426), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3440 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_883 + 1.0))) + _888) * _810;
        float _898 = _778 * 0.5;
        float _899 = _788 * 0.5;
        float _900 = _798 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_424, _425, _426), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3473 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_925 + 1.0))) + _930) * _811;
        _947 = _778;
        _949 = _777;
        _950 = _776;
        _951 = _788;
        _952 = _787;
        _953 = _786;
        _954 = _798;
        _955 = _797;
        _956 = _796;
        _957 = _811;
        _958 = _810;
        _959 = _809;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
    }
    else
    {
        _947 = _948;
        _949 = _948;
        _950 = _948;
        _951 = _948;
        _952 = _948;
        _953 = _948;
        _954 = _948;
        _955 = _948;
        _956 = _948;
        _957 = _948;
        _958 = _948;
        _959 = _948;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _992 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _996 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1019 = _637 + _424;
        float _1020 = _641 + _425;
        float _1021 = _645 + _426;
        float _1031 = fma(_1021, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019)) - _988;
        float _1032 = fma(_1021, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019)) - _992;
        float _1033 = fma(_1021, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019)) - _996;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_988 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_992 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[35u].z) + ((((((_996 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1087 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1054.x + (-0.5));
        float _1089 = _1087 * (_1054.y + (-0.5));
        float _1090 = _1087 * (_1054.z + (-0.5));
        float _1097 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1061.x + (-0.5));
        float _1099 = _1097 * (_1061.y + (-0.5));
        float _1100 = _1097 * (_1061.z + (-0.5));
        float _1107 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1068.x + (-0.5));
        float _1109 = _1107 * (_1068.y + (-0.5));
        float _1110 = _1107 * (_1068.z + (-0.5));
        float _1117 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1075.x + (-0.5));
        float _1119 = _1117 * (_1075.y + (-0.5));
        float _1120 = _1117 * (_1075.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_424, _425, _426), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3536 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1151 + 1.0))) + _1156) * _1121;
        float _1166 = _1089 * 0.5;
        float _1167 = _1099 * 0.5;
        float _1168 = _1109 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_424, _425, _426), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3569 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1193 + 1.0))) + _1198) * _1122;
        float _1208 = _1090 * 0.5;
        float _1209 = _1100 * 0.5;
        float _1210 = _1110 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_424, _425, _426), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3602 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1235 + 1.0))) + _1240) * _1123;
        _1257 = _1090;
        _1258 = _1089;
        _1259 = _1088;
        _1260 = _1100;
        _1261 = _1099;
        _1262 = _1098;
        _1263 = _1110;
        _1264 = _1109;
        _1265 = _1108;
        _1266 = _1123;
        _1267 = _1122;
        _1268 = _1121;
        _1269 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1270 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _948;
        _1258 = _948;
        _1259 = _948;
        _1260 = _948;
        _1261 = _948;
        _1262 = _948;
        _1263 = _948;
        _1264 = _948;
        _1265 = _948;
        _1266 = _948;
        _1267 = _948;
        _1268 = _948;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1281 = (cbModelParam._m0[1u].x * (_1269 - _960)) + _960;
    float _1282 = (cbModelParam._m0[1u].x * (_1270 - _961)) + _961;
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1304 = fma(_1283, cbSceneParam._m0[89u].z, fma(_1282, cbSceneParam._m0[89u].y, _1281 * cbSceneParam._m0[89u].x));
    float _1307 = fma(_1283, cbSceneParam._m0[90u].z, fma(_1282, cbSceneParam._m0[90u].y, _1281 * cbSceneParam._m0[90u].x));
    float _1310 = fma(_1283, cbSceneParam._m0[91u].z, fma(_1282, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1281));
    float _1325 = _584 * 0.5;
    float _1326 = _585 * 0.5;
    float _1327 = _586 * 0.5;
    float _1328 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1331 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1258, _1261, _1264, _1267));
    float _1334 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_1257, _1260, _1263, _1266));
    float _1368;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1341 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_947, _951, _954, _957));
        float _1345 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_949, _952, _955, _958));
        float _1349 = dot(vec4(_1325, _1326, _1327, 1.0), vec4(_950, _953, _956, _959));
        float _1356 = dot(vec4(cbModelParam._m0[39u]), vec4(_1325, _1326, _1327, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1379;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1370 = dot(vec4(cbModelParam._m0[40u]), vec4(_1325, _1326, _1327, 1.0));
        _1379 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1370) ? 0.0 : (isnan(0.0) ? _1370 : max(0.0, _1370))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1379 = 1.0;
    }
    float _1383 = (_1379 * cbModelParam._m0[1u].x) + (_1368 * (1.0 - cbModelParam._m0[1u].x));
    float _1393 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _427);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1393 : min(cbModelParam._m0[25u].z, _1393));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1441 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1445 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1449 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1452 = fma(_586, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584));
        float _1455 = fma(_586, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584));
        float _1458 = fma(_586, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584));
        float _1486;
        if (_1452 > 0.0)
        {
            _1486 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1486 = frontier_phi_14_12_ladder;
        }
        float _1690;
        if (_1455 > 0.0)
        {
            _1690 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1690 = frontier_phi_23_19_ladder;
        }
        float _1933;
        if (_1458 > 0.0)
        {
            _1933 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1933 = frontier_phi_35_30_ladder;
        }
        float _1935 = isnan(_1690) ? _1486 : (isnan(_1486) ? _1690 : min(_1486, _1690));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1452) + _1441;
        float _1941 = (_1936 * _1455) + _1445;
        float _1942 = (_1936 * _1458) + _1449;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1394);
            frontier_phi_13_35_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1474 = frontier_phi_13_35_ladder_2;
        _1476 = frontier_phi_13_35_ladder_1;
        _1478 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_584, _585, _586), _1394);
        _1474 = _1462.x * cbModelParam._m0[1u].y;
        _1476 = _1462.y * cbModelParam._m0[1u].y;
        _1478 = _1462.z * cbModelParam._m0[1u].y;
    }
    float _1482 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _427);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1482 : min(cbModelParam._m0[25u].w, _1482));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1540 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1544 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1548 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1551 = fma(_586, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584));
        float _1554 = fma(_586, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584));
        float _1557 = fma(_586, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584));
        float _1695;
        if (_1551 > 0.0)
        {
            _1695 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1695 = frontier_phi_25_21_ladder;
        }
        float _1960;
        if (_1554 > 0.0)
        {
            _1960 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1960 = frontier_phi_37_32_ladder;
        }
        float _2165;
        if (_1557 > 0.0)
        {
            _2165 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2165 = frontier_phi_46_43_ladder;
        }
        float _2167 = isnan(_1960) ? _1695 : (isnan(_1695) ? _1960 : min(_1695, _1960));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1551) + _1540;
        float _2173 = (_2168 * _1554) + _1544;
        float _2174 = (_2168 * _1557) + _1548;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2175;
        float _2178 = _2175 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2174 > _2178) || ((_2174 < _2176) || ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 < _2176) || (_2172 > _2178))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2174, cbModelParam._m0[17u].z, fma(_2173, cbModelParam._m0[17u].y, _2172 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2174, cbModelParam._m0[18u].z, fma(_2173, cbModelParam._m0[18u].y, _2172 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2174, cbModelParam._m0[19u].z, fma(_2173, cbModelParam._m0[19u].y, _2172 * cbModelParam._m0[19u].x))), _1483);
            frontier_phi_22_46_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1576 = frontier_phi_22_46_ladder_2;
        _1578 = frontier_phi_22_46_ladder_1;
        _1580 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_584, _585, _586), _1483);
        _1576 = _1560.x * cbModelParam._m0[1u].z;
        _1578 = _1560.y * cbModelParam._m0[1u].z;
        _1580 = _1560.z * cbModelParam._m0[1u].z;
    }
    float _1592 = ((((1.0 - _605) * ((_592 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_605 * _592)) * _576;
    float _1593 = _1592 * ((cbModelParam._m0[1u].w * (_1576 - _1474)) + _1474);
    float _1594 = _1592 * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1595 = _1592 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1598 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, _1593 * cbSceneParam._m0[91u].x));
    uvec4 _1614 = floatBitsToUint(cbInstanceData._m0[_551 + 5u]);
    uint _1616 = _1614.x * 14u;
    uint _1617 = _1616 + 13u;
    float _1624 = _576 + (-1.0);
    float _1629 = (cbLight._m0[_1617].x * _1624) + 1.0;
    float _1630 = (cbLight._m0[_1617].y * _1624) + 1.0;
    float _1631 = (cbLight._m0[_1617].z * _1624) + 1.0;
    float _1632 = (cbLight._m0[_1617].w * _1624) + 1.0;
    uint _1633 = _1616 + 5u;
    float _1639 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
    uint _1643 = _1616 + 4u;
    float _1649 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1653 = _1616 | 1u;
    float _1664 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_424, _425, _426));
    float _1667 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_424, _425, _426));
    float _3738 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _3749 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1672 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1674 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * 0.3183098733425140380859375;
    float _1681 = ((cbLight._m0[_1633].x * _1639) * _1674) + ((cbLight._m0[_1643].x * _1649) * _1672);
    float _1682 = ((_1639 * cbLight._m0[_1633].y) * _1674) + ((_1649 * cbLight._m0[_1643].y) * _1672);
    float _1683 = ((_1639 * cbLight._m0[_1633].z) * _1674) + ((_1649 * cbLight._m0[_1643].z) * _1672);
    uvec4 _1687 = floatBitsToUint(cbLight._m0[_1616 + 12u]);
    bool _1689 = _1687.x == 0u;
    float _1700;
    float _1702;
    float _1704;
    if (_1689)
    {
        _1700 = _1681;
        _1702 = _1682;
        _1704 = _1683;
    }
    else
    {
        uint _1708 = _1616 + 6u;
        float _1724 = (dot(vec3(cbLight._m0[_1616 + 2u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1725 = _1724 * _1724;
        float _3760 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1727 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1700 = (((cbLight._m0[_1708].x * 0.3183098733425140380859375) * _1726) * _1727) + _1681;
        _1702 = (((cbLight._m0[_1708].y * 0.3183098733425140380859375) * _1726) * _1727) + _1682;
        _1704 = (((cbLight._m0[_1708].z * 0.3183098733425140380859375) * _1726) * _1727) + _1683;
    }
    bool _1707 = _1687.y == 0u;
    float _1745;
    float _1747;
    float _1749;
    if (_1707)
    {
        _1745 = _1700;
        _1747 = _1702;
        _1749 = _1704;
    }
    else
    {
        uint _1904 = _1616 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1616 + 3u].xyz), vec3(_424, _425, _426)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3776 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1923 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _1745 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1700;
        _1747 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1702;
        _1749 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1704;
    }
    uint _1752 = _1616 + 8u;
    float _1765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1616].w)) * _427) * 0.949999988079071044921875);
    float _1766 = _1765 * _1765;
    float _1767 = cbLight._m0[_1616].x + _505;
    float _1768 = cbLight._m0[_1616].y + _506;
    float _1769 = cbLight._m0[_1616].z + _507;
    float _1773 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
    float _1774 = _1773 * _1767;
    float _1775 = _1773 * _1768;
    float _1776 = _1773 * _1769;
    float _1777 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1616].xyz));
    float _3792 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _1781 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1782 = dot(vec3(_424, _425, _426), vec3(_1774, _1775, _1776));
    float _3814 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_1774, _1775, _1776));
    float _3825 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1766 * _1766;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1806 = 1.0 - _1766;
    float _1817 = (0.5 / (((_1781 * ((_1780 * _1806) + _1766)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1806) + _1766) * _1780))) * _1780;
    float _3836 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1819 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    uint _1830 = _1616 + 9u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1653].w)) * _427) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1653].x + _505;
    float _1844 = cbLight._m0[_1653].y + _506;
    float _1845 = cbLight._m0[_1653].z + _507;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1653].xyz));
    float _3847 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1857 = dot(vec3(_424, _425, _426), vec3(_1850, _1851, _1852));
    float _3858 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1850, _1851, _1852));
    float _3869 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1842 * _1842;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1878 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1879 = 1.0 - _1842;
    float _1889 = (0.5 / (((_1781 * ((_1856 * _1879) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _1879) + _1842) * _1856))) * _1856;
    float _3880 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1901 = (((_1878 * cbLight._m0[_1830].x) * _1891) * _1639) + (((_1805 * cbLight._m0[_1752].x) * _1819) * _1649);
    float _1902 = (((_1878 * cbLight._m0[_1830].y) * _1891) * _1639) + (((_1805 * cbLight._m0[_1752].y) * _1819) * _1649);
    float _1903 = (((_1878 * cbLight._m0[_1830].z) * _1891) * _1639) + (((_1805 * cbLight._m0[_1752].z) * _1819) * _1649);
    float _1965;
    float _1967;
    float _1969;
    if (_1689)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1616 + 2u;
        uint _1975 = _1616 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _427) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _505;
        float _1992 = cbLight._m0[_1971].y + _506;
        float _1993 = cbLight._m0[_1971].z + _507;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_1971].xyz));
        float _3891 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _2005 = dot(vec3(_424, _425, _426), vec3(_1998, _1999, _2000));
        float _3902 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _3913 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2027 = 1.0 - _1990;
        float _2037 = (0.5 / (((_1781 * ((_2004 * _2027) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2027) + _1990) * _2004))) * _2004;
        float _3924 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2039 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2040 = isnan(1.0) ? _1631 : (isnan(_1631) ? 1.0 : min(_1631, 1.0));
        _1965 = (((_2026 * cbLight._m0[_1975].x) * _2039) * _2040) + _1901;
        _1967 = (((_2026 * cbLight._m0[_1975].y) * _2039) * _2040) + _1902;
        _1969 = (((_2026 * cbLight._m0[_1975].z) * _2039) * _2040) + _1903;
    }
    float _2075;
    float _2077;
    float _2079;
    if (_1707)
    {
        _2075 = _1965;
        _2077 = _1967;
        _2079 = _1969;
    }
    else
    {
        uint _2086 = _1616 + 3u;
        uint _2090 = _1616 + 11u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _427) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _505;
        float _2107 = cbLight._m0[_2086].y + _506;
        float _2108 = cbLight._m0[_2086].z + _507;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_424, _425, _426), vec3(cbLight._m0[_2086].xyz));
        float _3940 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2120 = dot(vec3(_424, _425, _426), vec3(_2113, _2114, _2115));
        float _3951 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _3962 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2142 = 1.0 - _2105;
        float _2152 = (0.5 / (((_1781 * ((_2119 * _2142) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1781 * _2142) + _2105) * _2119))) * _2119;
        float _3973 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
        _2075 = (((_2141 * cbLight._m0[_2090].x) * _2154) * _2155) + _1965;
        _2077 = (((_2141 * cbLight._m0[_2090].y) * _2154) * _2155) + _1967;
        _2079 = (((_2141 * cbLight._m0[_2090].z) * _2154) * _2155) + _1969;
    }
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_1614.y == 0u)
    {
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2230;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2230;
        float _2233 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2230;
        uvec4 _2245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2246 = _2245.x;
        uint _2257 = uint((float(_2245.y) * floor(float(uint(cbSceneParam._m0[85u].y * _514) / _2246))) + floor(float(uint(cbSceneParam._m0[85u].x * _513) / _2246)));
        float _2267 = (log2(_2233 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2268 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        uint _2271 = uint(isnan(14.0) ? _2268 : (isnan(_2268) ? 14.0 : min(_2268, 14.0)));
        uvec4 _2276 = texelFetch(g_lightClusterGridBuffer, int(((_2271 << 2u) + (_2257 << 6u)) >> 2u));
        uint _2277 = _2276.x;
        uint _2278 = _2245.z;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((((1u << ((_2278 >> 4u) & 15u)) + 4294967295u) & _2277) == 0u) || ((_2278 & 240u) == 0u))
        {
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
        }
        else
        {
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            uint _2529 = 0u;
            uint _2538;
            bool _2539;
            for (;;)
            {
                _2538 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                _2539 = _2538 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2539)
                {
                    frontier_phi_61_pred = _2523;
                    frontier_phi_61_pred_1 = _2528;
                    frontier_phi_61_pred_2 = _2527;
                    frontier_phi_61_pred_3 = _2526;
                    frontier_phi_61_pred_4 = _2525;
                    frontier_phi_61_pred_5 = _2524;
                }
                else
                {
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    uint _2653;
                    _2647 = _2523;
                    _2648 = _2524;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2538;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    for (;;)
                    {
                        uint _2657 = uint(findLSB(_2653)) + (_2529 << 5u);
                        uint _2654 = (_2653 + 4294967295u) & _2653;
                        uint _2659 = _2657 * 48u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2679 = (_2657 * 48u) + 4u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2698 = (_2657 * 48u) + 8u;
                        vec3 _2709 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x));
                        float _2713 = _2673.x - _2231;
                        float _2714 = _2673.y - _2232;
                        float _2715 = _2673.z - _2233;
                        float _2716 = dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715));
                        float _2719 = inversesqrt(_2716);
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2723 = dot(vec3(_532, _535, _538), vec3(_2720, _2721, _2722));
                        float _2728 = 1.0 - (_2716 * _2673.w);
                        float _3999 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2729 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2730 = sqrt(_2716) * _2692.w;
                        float _2733 = 1.39999997615814208984375 / (_2730 + 1.39999997615814208984375);
                        float _2734 = _2733 * _2733;
                        float _2737 = ((1.0 - _2734) * _2723) + _2734;
                        float _2740 = _2730 * _2730;
                        float _2744 = ((isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0))) * _2729) / ((_2740 * 0.699999988079071044921875) + 1.0);
                        float _2748 = (-0.0) - _2231;
                        float _2749 = (-0.0) - _2232;
                        float _2750 = (-0.0) - _2233;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2765 = exp2(log2(1.0 / ((_2740 * 3.5) + 5.0)) * 0.25);
                        float _2766 = 1.0 - _592;
                        float _2773 = sqrt(1.0 - ((1.0 - (_2766 * _2766)) * (1.0 - (_2765 * _2765))));
                        float _2774 = _2773 * _2773;
                        float _2775 = _2774 * _2774;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2778 = _2757 + _2722;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2786 = dot(vec3(_532, _535, _538), vec3(_2755, _2756, _2757));
                        float _4015 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2790 = dot(vec3(_532, _535, _538), vec3(_2782 * _2776, _2782 * _2777, _2782 * _2778));
                        float _4026 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2793 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2797 = ((_2793 * _2793) * (_2775 + (-1.0))) + 1.0;
                        float _2798 = _2733 * _2774;
                        float _2799 = _2798 * _2798;
                        float _2802 = ((1.0 - _2799) * _2723) + _2799;
                        float _4037 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2804 = 1.0 - _2774;
                        float _2814 = (0.5 / (((_2803 * ((_2789 * _2804) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2803 * _2804) + _2774) * _2789))) * _2803;
                        float _4048 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2825 = (((_2775 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2797 * _2797) * ((_2740 * 2.1991131305694580078125) + 3.141590118408203125))) * _2729;
                        _2582 = (_2744 * _2692.x) + _2650;
                        _2583 = (_2744 * _2692.y) + _2651;
                        _2584 = (_2744 * _2692.z) + _2652;
                        _2579 = (_2825 * _2709.x) + _2647;
                        _2580 = (_2825 * _2709.y) + _2648;
                        _2581 = (_2825 * _2709.z) + _2649;
                        if (_2654 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2647 = _2579;
                            _2648 = _2580;
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2654;
                        }
                    }
                    frontier_phi_61_pred = _2579;
                    frontier_phi_61_pred_1 = _2584;
                    frontier_phi_61_pred_2 = _2583;
                    frontier_phi_61_pred_3 = _2582;
                    frontier_phi_61_pred_4 = _2581;
                    frontier_phi_61_pred_5 = _2580;
                }
                _2379 = frontier_phi_61_pred;
                _2389 = frontier_phi_61_pred_1;
                _2387 = frontier_phi_61_pred_2;
                _2385 = frontier_phi_61_pred_3;
                _2383 = frontier_phi_61_pred_4;
                _2381 = frontier_phi_61_pred_5;
                uint _2530 = _2529 + 1u;
                if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2523 = _2379;
                    _2524 = _2381;
                    _2525 = _2383;
                    _2526 = _2385;
                    _2527 = _2387;
                    _2528 = _2389;
                    _2529 = _2530;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
        }
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.z;
        uint _2395 = (_2393 >> 8u) & 15u;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        if (((4294967295u << _2395) & _2277) == 0u)
        {
            _2491 = _2378;
            _2493 = _2380;
            _2495 = _2382;
            _2497 = _2384;
            _2499 = _2386;
            _2501 = _2388;
        }
        else
        {
            float _2516 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
            float _2517 = _2516 * _2231;
            float _2518 = _2516 * _2232;
            float _2519 = _2516 * _2233;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2395 < ((_2393 >> 12u) & 15u))
            {
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2630 = _2378;
                float _2631 = _2380;
                float _2632 = _2382;
                float _2633 = _2384;
                float _2634 = _2386;
                float _2635 = _2388;
                uint _2636 = _2395;
                uint _2645;
                bool _2646;
                for (;;)
                {
                    _2645 = texelFetch(g_lightClassification, int((((_2271 << 5u) + (_2257 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                    _2646 = _2645 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2646)
                    {
                        frontier_phi_67_pred = _2633;
                        frontier_phi_67_pred_1 = _2634;
                        frontier_phi_67_pred_2 = _2635;
                        frontier_phi_67_pred_3 = _2632;
                        frontier_phi_67_pred_4 = _2631;
                        frontier_phi_67_pred_5 = _2630;
                    }
                    else
                    {
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _2843 = _2630;
                        float _2844 = _2631;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        uint _2849 = _2645;
                        uint _2850;
                        vec4 _2875;
                        float _2876;
                        vec4 _2891;
                        vec3 _2903;
                        vec4 _2919;
                        vec4 _2935;
                        float _2982;
                        bool _2983;
                        for (;;)
                        {
                            uint _2860 = ((_2636 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2849));
                            _2850 = (_2849 + 4294967295u) & _2849;
                            uint _2862 = _2860 * 40u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2876 = _2875.w;
                            uint _2878 = (_2860 * 40u) + 4u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2860 * 40u) + 8u;
                            _2903 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x));
                            uint _2906 = (_2860 * 40u) + 16u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2922 = (_2860 * 40u) + 20u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2938 = (_2860 * 40u) + 24u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2957 = (_2860 * 40u) + 28u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2982 = fma(_2233, _2970.z, fma(_2232, _2970.y, _2970.x * _2231)) + _2970.w;
                            _2983 = !((fma(_2233, _2951.z, fma(_2232, _2951.y, _2951.x * _2231)) + _2951.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2983)
                            {
                                float _3010 = _2875.x - _2231;
                                float _3011 = _2875.y - _2232;
                                float _3012 = _2875.z - _2233;
                                float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                                float _3016 = inversesqrt(_3013);
                                float _3017 = _3016 * _3010;
                                float _3018 = _3016 * _3011;
                                float _3019 = _3016 * _3012;
                                float _3023 = 1.0 - (_3013 / (_2876 * _2876));
                                float _4059 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3028 = sqrt(_3013) * _2891.w;
                                float _3030 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                                float _3031 = _3030 * _3030;
                                float _3034 = ((1.0 - _3031) * dot(vec3(_3017, _3018, _3019), vec3(_532, _535, _538))) + _3031;
                                float _3037 = _3028 * _3028;
                                float _3041 = (fma(_2233, _2919.z, fma(_2232, _2919.y, _2919.x * _2231)) + _2919.w) / _2982;
                                float _3042 = (fma(_2233, _2935.z, fma(_2232, _2935.y, _2935.x * _2231)) + _2935.w) / _2982;
                                float _3046 = 1.0 - dot(vec2(_3041, _3042), vec2(_3041, _3042));
                                float _4075 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3048 = _3047 * (((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3024) / ((_3037 * 0.699999988079071044921875) + 1.0));
                                float _3060 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                                float _3061 = 1.0 - _592;
                                float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                                float _3069 = _3068 * _3068;
                                float _3070 = _3069 * _3069;
                                float _3071 = _3017 - _2517;
                                float _3072 = _3018 - _2518;
                                float _3073 = _3019 - _2519;
                                float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                                float _3081 = dot(vec3(_532, _535, _538), vec3((-0.0) - _2517, (-0.0) - _2518, (-0.0) - _2519));
                                float _4086 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3085 = dot(vec3(_532, _535, _538), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                                float _4097 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                                float _3093 = _3030 * _3069;
                                float _3094 = _3093 * _3093;
                                float _3100 = ((1.0 - _3094) * dot(vec3(_532, _535, _538), vec3(_3017, _3018, _3019))) + _3094;
                                float _4108 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3102 = 1.0 - _3069;
                                float _3112 = (0.5 / (((_3101 * ((_3084 * _3102) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3069) * _3084))) * _3101;
                                float _4119 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3122 = (_3047 * _3024) * (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3092 * _3092) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3122 * _2903.x;
                                frontier_phi_73_pred_1 = _3122 * _2903.y;
                                frontier_phi_73_pred_2 = _3048 * _2891.z;
                                frontier_phi_73_pred_3 = _3048 * _2891.y;
                                frontier_phi_73_pred_4 = _3048 * _2891.x;
                                frontier_phi_73_pred_5 = _3122 * _2903.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_73_pred;
                            _3127 = frontier_phi_73_pred_1;
                            _3131 = frontier_phi_73_pred_2;
                            _3130 = frontier_phi_73_pred_3;
                            _3129 = frontier_phi_73_pred_4;
                            _3128 = frontier_phi_73_pred_5;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            _2835 = _3131 + _2848;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2832 = _3128 + _2845;
                            if (_2850 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2850;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2833;
                        frontier_phi_67_pred_1 = _2834;
                        frontier_phi_67_pred_2 = _2835;
                        frontier_phi_67_pred_3 = _2832;
                        frontier_phi_67_pred_4 = _2831;
                        frontier_phi_67_pred_5 = _2830;
                    }
                    _2498 = frontier_phi_67_pred;
                    _2500 = frontier_phi_67_pred_1;
                    _2502 = frontier_phi_67_pred_2;
                    _2496 = frontier_phi_67_pred_3;
                    _2494 = frontier_phi_67_pred_4;
                    _2492 = frontier_phi_67_pred_5;
                    uint _2637 = _2636 + 1u;
                    if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2630 = _2492;
                        _2631 = _2494;
                        _2632 = _2496;
                        _2633 = _2498;
                        _2634 = _2500;
                        _2635 = _2502;
                        _2636 = _2637;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2500;
                frontier_phi_55_56_ladder_1 = _2502;
                frontier_phi_55_56_ladder_2 = _2498;
                frontier_phi_55_56_ladder_3 = _2496;
                frontier_phi_55_56_ladder_4 = _2494;
                frontier_phi_55_56_ladder_5 = _2492;
            }
            else
            {
                frontier_phi_55_56_ladder = _2386;
                frontier_phi_55_56_ladder_1 = _2388;
                frontier_phi_55_56_ladder_2 = _2384;
                frontier_phi_55_56_ladder_3 = _2382;
                frontier_phi_55_56_ladder_4 = _2380;
                frontier_phi_55_56_ladder_5 = _2378;
            }
            _2491 = frontier_phi_55_56_ladder_5;
            _2493 = frontier_phi_55_56_ladder_4;
            _2495 = frontier_phi_55_56_ladder_3;
            _2497 = frontier_phi_55_56_ladder_2;
            _2499 = frontier_phi_55_56_ladder;
            _2501 = frontier_phi_55_56_ladder_1;
        }
        float _2506 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
        _2290 = (_2506 * _2497) + _1745;
        _2292 = (_2506 * _2499) + _1747;
        _2294 = (_2506 * _2501) + _1749;
        _2296 = ((_2491 * 0.039999999105930328369140625) * _2506) + _2075;
        _2298 = ((_2493 * 0.039999999105930328369140625) * _2506) + _2077;
        _2300 = ((_2495 * 0.039999999105930328369140625) * _2506) + _2079;
    }
    else
    {
        _2290 = _1745;
        _2292 = _1747;
        _2294 = _1749;
        _2296 = _2075;
        _2298 = _2077;
        _2300 = _2079;
    }
    float _4135 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4146 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4157 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    uint _2320 = _551 + 6u;
    float _2328 = _513 / cbSceneParam._m0[86u].x;
    float _2329 = _514 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _446 : (isnan(_446) ? cbSceneParam._m0[77u].w : min(_446, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    if (_446 > cbSceneParam._m0[78u].w)
    {
        float _2403 = isnan(_446) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _446 : min(cbSceneParam._m0[80u].w, _446));
        float _2404 = _2403 / _446;
        float _2415 = _2404 * _498;
        float _2416 = _499 * _2404;
        float _2417 = (-0.0) - _2416;
        float _2419 = _2404 * _500;
        float _2421 = (cbSceneParam._m0[77u].w * _2417) / _2403;
        float _2422 = _2421 + cbSceneParam._m0[79u].w;
        float _2423 = cbSceneParam._m0[79u].w - _2416;
        float _2429 = sqrt(((_2415 * _2415) + (_2416 * _2416)) + (_2419 * _2419));
        float _2432 = (1.0 - (cbSceneParam._m0[77u].w / _2403)) * _2429;
        float _2437 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2439 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2592;
        if (abs((_2417 - _2421) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2592 = ((((_2422 > 0.0) ? exp2(_2437 * _2422) : (2.0 - exp2(_2439 * _2422))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2432;
        }
        else
        {
            float _2552 = 1.0 / cbSceneParam._m0[80u].x;
            float _2553 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : max(_2422, _2423));
            float _2554 = isnan(_2423) ? _2422 : (isnan(_2422) ? _2423 : min(_2422, _2423));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            _2592 = ((abs(_2429 / _2417) * cbSceneParam._m0[80u].y) * ((((_2563 - _2564) * 2.0) - ((exp2(_2437 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)))) - exp2(_2437 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0))))) * _2552)) - ((exp2(_2439 * _2563) - exp2(_2439 * _2564)) * _2552))) + (_2432 * cbSceneParam._m0[80u].z);
        }
        vec4 _2594 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2603 = exp2((_2592 * (-1.44269502162933349609375)) * (1.0 - _2594.w));
        float _2604 = log2(_2603);
        float _2620 = log2(_2348);
        _2441 = (exp2(_2620 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].x)) * _2594.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2443 = (exp2(_2620 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].y)) * _2594.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2445 = (exp2(_2620 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2604 * cbSceneParam._m0[78u].z)) * _2594.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2447 = _2603 * _2348;
    }
    else
    {
        _2441 = _2345;
        _2443 = _2346;
        _2445 = _2347;
        _2447 = _2348;
    }
    float _2459 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2460 = _2459 == 3.0;
    float _2461 = log2(_2447);
    float _2468 = exp2(_2461 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2290 + ((isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))) * _576))) + ((_2296 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2469 = exp2(_2461 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2292 + ((isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))) * _576))) + ((_2298 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2470 = exp2(_2461 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2294 + ((isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))) * _576))) + ((_2300 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _1383)) * cbPerFrame._m0[3u].x));
    float _2479 = (_2459 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2479 * (_2460 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.y = _2479 * (_2460 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.z = _2479 * (_2460 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.w = cbInstanceData._m0[_2320].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2320].w;
}


