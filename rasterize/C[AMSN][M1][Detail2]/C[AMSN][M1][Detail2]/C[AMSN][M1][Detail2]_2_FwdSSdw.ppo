#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _842;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _231 = _225.x * cbMtdParam._m0[9u].x;
    float _232 = _225.y * cbMtdParam._m0[9u].y;
    float _233 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _247 = _245.x;
    vec4 _264 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3202 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))));
    float _282 = _264.z * cbMtdParam._m0[13u].y;
    float _285 = fma(_281, _195 * NORMAL.x, fma(_274, _202 * TANGENT.x, (_188 * _180) * _272));
    float _288 = fma(_281, _195 * NORMAL.y, fma(_274, _202 * TANGENT.y, (_188 * _181) * _272));
    float _291 = fma(_281, _195 * NORMAL.z, fma(_274, _202 * TANGENT.z, (_188 * _182) * _272));
    float _295 = inversesqrt(dot(vec3(_285, _288, _291), vec3(_285, _288, _291)));
    float _296 = _295 * _285;
    float _297 = _295 * _288;
    float _298 = _295 * _291;
    float _3213 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _299 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3235 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3246 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3257 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _303 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_298, cbSceneParam._m0[5u].z, fma(_297, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _296));
    float _411 = fma(_298, cbSceneParam._m0[6u].z, fma(_297, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _296));
    float _414 = fma(_298, cbSceneParam._m0[7u].z, fma(_297, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _296));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _429 = (_427 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _435 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_429].x;
    float _436 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_429].y;
    float _437 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_429].z;
    float _3268 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _441 = 1.0 - _303;
    float _442 = _438 * _441;
    float _443 = _439 * _441;
    float _444 = _440 * _441;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _303;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _303;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _303;
    float _452 = _449 + 0.039999999105930328369140625;
    float _454 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _467 = _464.x * TEXCOORD_5.w;
    float _468 = dot(vec3(_296, _297, _298), vec3(_379, _380, _381));
    float _471 = _468 * 2.0;
    float _475 = (_471 * _296) - _379;
    float _476 = (_471 * _297) - _380;
    float _477 = (_471 * _298) - _381;
    float _481 = abs(dot(vec3(_379, _380, _381), vec3(_296, _297, _298)));
    float _3301 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _483 = sqrt(_299);
    float _496 = exp2((_483 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_483 * 3.0));
    float _502 = (1.0 - _496) * ((_483 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _503 = _496 * _483;
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _570 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _574 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _599 = _531 + _296;
        float _600 = _535 + _297;
        float _601 = _539 + _298;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_296, _297, _298), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3349 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_296, _297, _298), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3382 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_296, _297, _298), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3415 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _882 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _886 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _890 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _913 = _531 + _296;
        float _914 = _535 + _297;
        float _915 = _539 + _298;
        float _925 = fma(_915, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913)) - _882;
        float _926 = fma(_915, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913)) - _886;
        float _927 = fma(_915, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913)) - _890;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_882 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_886 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[35u].z) + ((((((_890 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _981 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_948.x + (-0.5));
        float _983 = _981 * (_948.y + (-0.5));
        float _984 = _981 * (_948.z + (-0.5));
        float _991 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_955.x + (-0.5));
        float _993 = _991 * (_955.y + (-0.5));
        float _994 = _991 * (_955.z + (-0.5));
        float _1001 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_962.x + (-0.5));
        float _1003 = _1001 * (_962.y + (-0.5));
        float _1004 = _1001 * (_962.z + (-0.5));
        float _1011 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_969.x + (-0.5));
        float _1013 = _1011 * (_969.y + (-0.5));
        float _1014 = _1011 * (_969.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_296, _297, _298), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3478 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1045 + 1.0))) + _1050) * _1015;
        float _1060 = _983 * 0.5;
        float _1061 = _993 * 0.5;
        float _1062 = _1003 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_296, _297, _298), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3511 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1087 + 1.0))) + _1092) * _1016;
        float _1102 = _984 * 0.5;
        float _1103 = _994 * 0.5;
        float _1104 = _1004 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_296, _297, _298), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3544 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1129 + 1.0))) + _1134) * _1017;
        _1151 = _984;
        _1152 = _983;
        _1153 = _982;
        _1154 = _994;
        _1155 = _993;
        _1156 = _992;
        _1157 = _1004;
        _1158 = _1003;
        _1159 = _1002;
        _1160 = _1017;
        _1161 = _1016;
        _1162 = _1015;
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _842;
        _1152 = _842;
        _1153 = _842;
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _855)) + _855;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1198 = fma(_1177, cbSceneParam._m0[89u].z, fma(_1176, cbSceneParam._m0[89u].y, _1175 * cbSceneParam._m0[89u].x));
    float _1201 = fma(_1177, cbSceneParam._m0[90u].z, fma(_1176, cbSceneParam._m0[90u].y, _1175 * cbSceneParam._m0[90u].x));
    float _1204 = fma(_1177, cbSceneParam._m0[91u].z, fma(_1176, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1175));
    float _1219 = _475 * 0.5;
    float _1220 = _476 * 0.5;
    float _1221 = _477 * 0.5;
    float _1222 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1225 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1228 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1262;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1235 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_841, _845, _848, _851));
        float _1239 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_843, _846, _849, _852));
        float _1243 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_844, _847, _850, _853));
        float _1250 = dot(vec4(cbModelParam._m0[39u]), vec4(_1219, _1220, _1221, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1273;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1264 = dot(vec4(cbModelParam._m0[40u]), vec4(_1219, _1220, _1221, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1277 = (_1273 * cbModelParam._m0[1u].x) + (_1262 * (1.0 - cbModelParam._m0[1u].x));
    float _1287 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1288 = isnan(_1287) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1287 : min(cbModelParam._m0[25u].z, _1287));
    float _1369;
    float _1371;
    float _1373;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1336 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1340 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1344 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1347 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1350 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1353 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1381;
        if (_1347 > 0.0)
        {
            _1381 = abs((1.0 - _1336) / _1347);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1336 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1381 = frontier_phi_14_12_ladder;
        }
        float _1610;
        if (_1350 > 0.0)
        {
            _1610 = abs((1.0 - _1340) / _1350);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1340 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1610 = frontier_phi_23_19_ladder;
        }
        float _1867;
        if (_1353 > 0.0)
        {
            _1867 = abs((1.0 - _1344) / _1353);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1344 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1867 = frontier_phi_35_30_ladder;
        }
        float _1869 = isnan(_1610) ? _1381 : (isnan(_1381) ? _1610 : min(_1381, _1610));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1347) + _1336;
        float _1875 = (_1870 * _1350) + _1340;
        float _1876 = (_1870 * _1353) + _1344;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1288);
            frontier_phi_13_35_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1369 = frontier_phi_13_35_ladder_2;
        _1371 = frontier_phi_13_35_ladder_1;
        _1373 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1288);
        _1369 = _1357.x * cbModelParam._m0[1u].y;
        _1371 = _1357.y * cbModelParam._m0[1u].y;
        _1373 = _1357.z * cbModelParam._m0[1u].y;
    }
    float _1377 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1377 : min(cbModelParam._m0[25u].w, _1377));
    float _1471;
    float _1473;
    float _1475;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1435 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1439 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1443 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1446 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1449 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1452 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1615;
        if (_1446 > 0.0)
        {
            _1615 = abs((1.0 - _1435) / _1446);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1435 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1615 = frontier_phi_25_21_ladder;
        }
        float _1894;
        if (_1449 > 0.0)
        {
            _1894 = abs((1.0 - _1439) / _1449);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1439 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1894 = frontier_phi_37_32_ladder;
        }
        float _2107;
        if (_1452 > 0.0)
        {
            _2107 = abs((1.0 - _1443) / _1452);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1443 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2107 = frontier_phi_46_43_ladder;
        }
        float _2109 = isnan(_1894) ? _1615 : (isnan(_1615) ? _1894 : min(_1615, _1894));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1446) + _1435;
        float _2115 = (_2110 * _1449) + _1439;
        float _2116 = (_2110 * _1452) + _1443;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1378);
            frontier_phi_22_46_ladder = _2315.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2315.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2315.x * cbModelParam._m0[1u].z;
        }
        _1471 = frontier_phi_22_46_ladder_2;
        _1473 = frontier_phi_22_46_ladder_1;
        _1475 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1378);
        _1471 = _1455.x * cbModelParam._m0[1u].z;
        _1473 = _1455.y * cbModelParam._m0[1u].z;
        _1475 = _1455.z * cbModelParam._m0[1u].z;
    }
    float _1488 = (((_502 * _452) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1471 - _1369)) + _1369);
    float _1490 = (((_502 * _454) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1473 - _1371)) + _1371);
    float _1492 = (((_502 * _455) + _503) * _467) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1495 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, _1488 * cbSceneParam._m0[91u].x));
    vec4 _1509 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1511 = _1509.w;
    float _1523 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1511);
    float _1524 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1511);
    float _1525 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1511);
    uvec4 _1529 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1531 = _1529.x * 14u;
    uint _1532 = _1531 + 13u;
    float _1539 = _467 + (-1.0);
    float _1544 = (cbLight._m0[_1532].x * _1539) + 1.0;
    float _1545 = (cbLight._m0[_1532].y * _1539) + 1.0;
    float _1546 = (cbLight._m0[_1532].z * _1539) + 1.0;
    float _1547 = (cbLight._m0[_1532].w * _1539) + 1.0;
    uint _1548 = _1531 + 5u;
    float _1554 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1558 = _1531 + 4u;
    float _1568 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
    uint _1572 = _1531 | 1u;
    float _1583 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_296, _297, _298));
    float _1586 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_296, _297, _298));
    float _3680 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _3691 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _1591 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1593 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
    float _1600 = ((cbLight._m0[_1548].x * _1554) * _1593) + (((cbLight._m0[_1558].x * _1523) * _1568) * _1591);
    float _1601 = ((_1554 * cbLight._m0[_1548].y) * _1593) + (((cbLight._m0[_1558].y * _1524) * _1568) * _1591);
    float _1602 = ((_1554 * cbLight._m0[_1548].z) * _1593) + (((cbLight._m0[_1558].z * _1525) * _1568) * _1591);
    uvec4 _1607 = floatBitsToUint(cbLight._m0[_1531 + 12u]);
    bool _1609 = _1607.x == 0u;
    float _1620;
    float _1622;
    float _1624;
    if (_1609)
    {
        _1620 = _1600;
        _1622 = _1601;
        _1624 = _1602;
    }
    else
    {
        uint _1628 = _1531 + 6u;
        float _1644 = (dot(vec3(cbLight._m0[_1531 + 2u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1645 = _1644 * _1644;
        float _3702 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1647 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1620 = (((cbLight._m0[_1628].x * 0.3183098733425140380859375) * _1646) * _1647) + _1600;
        _1622 = (((cbLight._m0[_1628].y * 0.3183098733425140380859375) * _1646) * _1647) + _1601;
        _1624 = (((cbLight._m0[_1628].z * 0.3183098733425140380859375) * _1646) * _1647) + _1602;
    }
    bool _1627 = _1607.y == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1627)
    {
        _1665 = _1620;
        _1667 = _1622;
        _1669 = _1624;
    }
    else
    {
        uint _1838 = _1531 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1531 + 3u].xyz), vec3(_296, _297, _298)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3718 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1857 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1665 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1620;
        _1667 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1622;
        _1669 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1624;
    }
    uint _1672 = _1531 + 8u;
    float _1685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1531].w)) * _299) * 0.949999988079071044921875);
    float _1686 = _1685 * _1685;
    float _1687 = cbLight._m0[_1531].x + _379;
    float _1688 = cbLight._m0[_1531].y + _380;
    float _1689 = cbLight._m0[_1531].z + _381;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1694 = _1693 * _1687;
    float _1695 = _1693 * _1688;
    float _1696 = _1693 * _1689;
    float _1697 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1531].xyz));
    float _3734 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _1701 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _1702 = dot(vec3(_296, _297, _298), vec3(_1694, _1695, _1696));
    float _3756 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _1706 = dot(vec3(cbLight._m0[_1531].xyz), vec3(_1694, _1695, _1696));
    float _3767 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1710 = _1686 * _1686;
    float _1714 = ((_1705 * _1705) * (_1710 + (-1.0))) + 1.0;
    float _1722 = exp2(log2(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * 5.0);
    float _1723 = 0.959999978542327880859375 - _449;
    float _1725 = 0.959999978542327880859375 - _450;
    float _1726 = 0.959999978542327880859375 - _451;
    float _1733 = 1.0 - _1686;
    float _1744 = (0.5 / (((_1701 * ((_1700 * _1733) + _1686)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1733) + _1686) * _1700))) * _1700;
    float _3778 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1746 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1710 / ((_1714 * _1714) * 3.141590118408203125));
    uint _1760 = _1531 + 9u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1572].w)) * _299) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1572].x + _379;
    float _1774 = cbLight._m0[_1572].y + _380;
    float _1775 = cbLight._m0[_1572].z + _381;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1572].xyz));
    float _3789 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1787 = dot(vec3(_296, _297, _298), vec3(_1780, _1781, _1782));
    float _3800 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1572].xyz), vec3(_1780, _1781, _1782));
    float _3811 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1772 * _1772;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0);
    float _1813 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1701 * ((_1786 * _1813) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1813) + _1772) * _1786))) * _1786;
    float _3822 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    float _1835 = (((((_1806 * _1723) + _452) * cbLight._m0[_1760].x) * _1825) * _1554) + ((((cbLight._m0[_1672].x * _1523) * ((_1722 * _1723) + _452)) * _1746) * _1568);
    float _1836 = (((((_1806 * _1725) + _454) * cbLight._m0[_1760].y) * _1825) * _1554) + ((((cbLight._m0[_1672].y * _1524) * ((_1722 * _1725) + _454)) * _1746) * _1568);
    float _1837 = (((((_1806 * _1726) + _455) * cbLight._m0[_1760].z) * _1825) * _1554) + ((((cbLight._m0[_1672].z * _1525) * ((_1722 * _1726) + _455)) * _1746) * _1568);
    float _1899;
    float _1901;
    float _1903;
    if (_1609)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1531 + 2u;
        uint _1909 = _1531 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _299) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _379;
        float _1926 = cbLight._m0[_1905].y + _380;
        float _1927 = cbLight._m0[_1905].z + _381;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_1905].xyz));
        float _3833 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1939 = dot(vec3(_296, _297, _298), vec3(_1932, _1933, _1934));
        float _3844 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3855 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
        float _1965 = 1.0 - _1924;
        float _1975 = (0.5 / (((_1701 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _1965) + _1924) * _1938))) * _1938;
        float _3866 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
        _1899 = (((((_1958 * _1723) + _452) * cbLight._m0[_1909].x) * _1977) * _1978) + _1835;
        _1901 = (((((_1958 * _1725) + _454) * cbLight._m0[_1909].y) * _1977) * _1978) + _1836;
        _1903 = (((((_1958 * _1726) + _455) * cbLight._m0[_1909].z) * _1977) * _1978) + _1837;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1627)
    {
        _2013 = _1899;
        _2015 = _1901;
        _2017 = _1903;
    }
    else
    {
        uint _2024 = _1531 + 3u;
        uint _2028 = _1531 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _299) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _379;
        float _2045 = cbLight._m0[_2024].y + _380;
        float _2046 = cbLight._m0[_2024].z + _381;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_296, _297, _298), vec3(cbLight._m0[_2024].xyz));
        float _3882 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2058 = dot(vec3(_296, _297, _298), vec3(_2051, _2052, _2053));
        float _3893 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3904 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1701 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1701 * _2084) + _2043) * _2057))) * _2057;
        float _3915 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _2013 = (((((_2077 * _1723) + _452) * cbLight._m0[_2028].x) * _2096) * _2097) + _1899;
        _2015 = (((((_2077 * _1725) + _454) * cbLight._m0[_2028].y) * _2096) * _2097) + _1901;
        _2017 = (((((_2077 * _1726) + _455) * cbLight._m0[_2028].z) * _2096) * _2097) + _1903;
    }
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    if (_1529.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
        }
        else
        {
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            uint _2471 = 0u;
            uint _2480;
            bool _2481;
            for (;;)
            {
                _2480 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                _2481 = _2480 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2481)
                {
                    frontier_phi_61_pred = _2465;
                    frontier_phi_61_pred_1 = _2470;
                    frontier_phi_61_pred_2 = _2469;
                    frontier_phi_61_pred_3 = _2468;
                    frontier_phi_61_pred_4 = _2467;
                    frontier_phi_61_pred_5 = _2466;
                }
                else
                {
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    uint _2595;
                    _2589 = _2465;
                    _2590 = _2466;
                    _2591 = _2467;
                    _2592 = _2468;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2480;
                    float _2521;
                    float _2522;
                    float _2523;
                    float _2524;
                    float _2525;
                    float _2526;
                    for (;;)
                    {
                        uint _2599 = uint(findLSB(_2595)) + (_2471 << 5u);
                        uint _2596 = (_2595 + 4294967295u) & _2595;
                        uint _2601 = _2599 * 48u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 3u)).x));
                        uint _2621 = (_2599 * 48u) + 4u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 3u)).x));
                        uint _2640 = (_2599 * 48u) + 8u;
                        vec3 _2651 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x));
                        float _2655 = _2615.x - _2173;
                        float _2656 = _2615.y - _2174;
                        float _2657 = _2615.z - _2175;
                        float _2658 = dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657));
                        float _2661 = inversesqrt(_2658);
                        float _2662 = _2661 * _2655;
                        float _2663 = _2661 * _2656;
                        float _2664 = _2661 * _2657;
                        float _2665 = dot(vec3(_408, _411, _414), vec3(_2662, _2663, _2664));
                        float _2670 = 1.0 - (_2658 * _2615.w);
                        float _3941 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2671 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                        float _2672 = sqrt(_2658) * _2634.w;
                        float _2675 = 1.39999997615814208984375 / (_2672 + 1.39999997615814208984375);
                        float _2676 = _2675 * _2675;
                        float _2679 = ((1.0 - _2676) * _2665) + _2676;
                        float _2682 = _2672 * _2672;
                        float _2686 = ((isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))) * _2671) / ((_2682 * 0.699999988079071044921875) + 1.0);
                        float _2690 = (-0.0) - _2173;
                        float _2691 = (-0.0) - _2174;
                        float _2692 = (-0.0) - _2175;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2697 = _2696 * _2690;
                        float _2698 = _2696 * _2691;
                        float _2699 = _2696 * _2692;
                        float _2707 = exp2(log2(1.0 / ((_2682 * 3.5) + 5.0)) * 0.25);
                        float _2708 = 1.0 - _483;
                        float _2715 = sqrt(1.0 - ((1.0 - (_2708 * _2708)) * (1.0 - (_2707 * _2707))));
                        float _2716 = _2715 * _2715;
                        float _2717 = _2716 * _2716;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2720 = _2699 + _2664;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2728 = dot(vec3(_408, _411, _414), vec3(_2697, _2698, _2699));
                        float _3957 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2731 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                        float _2732 = dot(vec3(_408, _411, _414), vec3(_2724 * _2718, _2724 * _2719, _2724 * _2720));
                        float _3968 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                        float _2739 = ((_2735 * _2735) * (_2717 + (-1.0))) + 1.0;
                        float _2740 = _2675 * _2716;
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2665) + _2741;
                        float _3979 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2746 = 1.0 - _2716;
                        float _2756 = (0.5 / (((_2745 * ((_2731 * _2746) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2745 * _2746) + _2716) * _2731))) * _2745;
                        float _3990 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2767 = (((_2717 * 3.1415927410125732421875) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) / ((_2739 * _2739) * ((_2682 * 2.1991131305694580078125) + 3.141590118408203125))) * _2671;
                        _2524 = (_2686 * _2634.x) + _2592;
                        _2525 = (_2686 * _2634.y) + _2593;
                        _2526 = (_2686 * _2634.z) + _2594;
                        _2521 = (_2767 * _2651.x) + _2589;
                        _2522 = (_2767 * _2651.y) + _2590;
                        _2523 = (_2767 * _2651.z) + _2591;
                        if (_2596 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2589 = _2521;
                            _2590 = _2522;
                            _2591 = _2523;
                            _2592 = _2524;
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2596;
                        }
                    }
                    frontier_phi_61_pred = _2521;
                    frontier_phi_61_pred_1 = _2526;
                    frontier_phi_61_pred_2 = _2525;
                    frontier_phi_61_pred_3 = _2524;
                    frontier_phi_61_pred_4 = _2523;
                    frontier_phi_61_pred_5 = _2522;
                }
                _2321 = frontier_phi_61_pred;
                _2331 = frontier_phi_61_pred_1;
                _2329 = frontier_phi_61_pred_2;
                _2327 = frontier_phi_61_pred_3;
                _2325 = frontier_phi_61_pred_4;
                _2323 = frontier_phi_61_pred_5;
                uint _2472 = _2471 + 1u;
                if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2465 = _2321;
                    _2466 = _2323;
                    _2467 = _2325;
                    _2468 = _2327;
                    _2469 = _2329;
                    _2470 = _2331;
                    _2471 = _2472;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
        }
        uvec4 _2334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2335 = _2334.z;
        uint _2337 = (_2335 >> 8u) & 15u;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((4294967295u << _2337) & _2219) == 0u)
        {
            _2433 = _2320;
            _2435 = _2322;
            _2437 = _2324;
            _2439 = _2326;
            _2441 = _2328;
            _2443 = _2330;
        }
        else
        {
            float _2458 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2459 = _2458 * _2173;
            float _2460 = _2458 * _2174;
            float _2461 = _2458 * _2175;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2337 < ((_2335 >> 12u) & 15u))
            {
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2572 = _2320;
                float _2573 = _2322;
                float _2574 = _2324;
                float _2575 = _2326;
                float _2576 = _2328;
                float _2577 = _2330;
                uint _2578 = _2337;
                uint _2587;
                bool _2588;
                for (;;)
                {
                    _2587 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                    _2588 = _2587 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2588)
                    {
                        frontier_phi_67_pred = _2575;
                        frontier_phi_67_pred_1 = _2576;
                        frontier_phi_67_pred_2 = _2577;
                        frontier_phi_67_pred_3 = _2574;
                        frontier_phi_67_pred_4 = _2573;
                        frontier_phi_67_pred_5 = _2572;
                    }
                    else
                    {
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _2785 = _2572;
                        float _2786 = _2573;
                        float _2787 = _2574;
                        float _2788 = _2575;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        uint _2791 = _2587;
                        uint _2792;
                        vec4 _2817;
                        float _2818;
                        vec4 _2833;
                        vec3 _2845;
                        vec4 _2861;
                        vec4 _2877;
                        float _2924;
                        bool _2925;
                        for (;;)
                        {
                            uint _2802 = ((_2578 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2791));
                            _2792 = (_2791 + 4294967295u) & _2791;
                            uint _2804 = _2802 * 40u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            _2818 = _2817.w;
                            uint _2820 = (_2802 * 40u) + 4u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2835 = (_2802 * 40u) + 8u;
                            _2845 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x));
                            uint _2848 = (_2802 * 40u) + 16u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2864 = (_2802 * 40u) + 20u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2880 = (_2802 * 40u) + 24u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2899 = (_2802 * 40u) + 28u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2924 = fma(_2175, _2912.z, fma(_2174, _2912.y, _2912.x * _2173)) + _2912.w;
                            _2925 = !((fma(_2175, _2893.z, fma(_2174, _2893.y, _2893.x * _2173)) + _2893.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2925)
                            {
                                float _2952 = _2817.x - _2173;
                                float _2953 = _2817.y - _2174;
                                float _2954 = _2817.z - _2175;
                                float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                                float _2958 = inversesqrt(_2955);
                                float _2959 = _2958 * _2952;
                                float _2960 = _2958 * _2953;
                                float _2961 = _2958 * _2954;
                                float _2965 = 1.0 - (_2955 / (_2818 * _2818));
                                float _4001 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _2970 = sqrt(_2955) * _2833.w;
                                float _2972 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                                float _2973 = _2972 * _2972;
                                float _2976 = ((1.0 - _2973) * dot(vec3(_2959, _2960, _2961), vec3(_408, _411, _414))) + _2973;
                                float _2979 = _2970 * _2970;
                                float _2983 = (fma(_2175, _2861.z, fma(_2174, _2861.y, _2861.x * _2173)) + _2861.w) / _2924;
                                float _2984 = (fma(_2175, _2877.z, fma(_2174, _2877.y, _2877.x * _2173)) + _2877.w) / _2924;
                                float _2988 = 1.0 - dot(vec2(_2983, _2984), vec2(_2983, _2984));
                                float _4017 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                                float _2990 = _2989 * (((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2966) / ((_2979 * 0.699999988079071044921875) + 1.0));
                                float _3002 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                                float _3003 = 1.0 - _483;
                                float _3010 = sqrt(1.0 - ((1.0 - (_3003 * _3003)) * (1.0 - (_3002 * _3002))));
                                float _3011 = _3010 * _3010;
                                float _3012 = _3011 * _3011;
                                float _3013 = _2959 - _2459;
                                float _3014 = _2960 - _2460;
                                float _3015 = _2961 - _2461;
                                float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                                float _3023 = dot(vec3(_408, _411, _414), vec3((-0.0) - _2459, (-0.0) - _2460, (-0.0) - _2461));
                                float _4028 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3026 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                                float _3027 = dot(vec3(_408, _411, _414), vec3(_3019 * _3013, _3019 * _3014, _3019 * _3015));
                                float _4039 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3034 = ((_3030 * _3030) * (_3012 + (-1.0))) + 1.0;
                                float _3035 = _2972 * _3011;
                                float _3036 = _3035 * _3035;
                                float _3042 = ((1.0 - _3036) * dot(vec3(_408, _411, _414), vec3(_2959, _2960, _2961))) + _3036;
                                float _4050 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3044 = 1.0 - _3011;
                                float _3054 = (0.5 / (((_3043 * ((_3026 * _3044) + _3011)) + 9.9999999392252902907785028219223e-09) + (((_3043 * _3044) + _3011) * _3026))) * _3043;
                                float _4061 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3064 = (_2989 * _2966) * (((_3012 * 3.1415927410125732421875) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) / ((_3034 * _3034) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3064 * _2845.x;
                                frontier_phi_73_pred_1 = _3064 * _2845.y;
                                frontier_phi_73_pred_2 = _2990 * _2833.z;
                                frontier_phi_73_pred_3 = _2990 * _2833.y;
                                frontier_phi_73_pred_4 = _2990 * _2833.x;
                                frontier_phi_73_pred_5 = _3064 * _2845.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3068 = frontier_phi_73_pred;
                            _3069 = frontier_phi_73_pred_1;
                            _3073 = frontier_phi_73_pred_2;
                            _3072 = frontier_phi_73_pred_3;
                            _3071 = frontier_phi_73_pred_4;
                            _3070 = frontier_phi_73_pred_5;
                            _2775 = _3071 + _2788;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2772 = _3068 + _2785;
                            _2773 = _3069 + _2786;
                            _2774 = _3070 + _2787;
                            if (_2792 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2774;
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2792;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2775;
                        frontier_phi_67_pred_1 = _2776;
                        frontier_phi_67_pred_2 = _2777;
                        frontier_phi_67_pred_3 = _2774;
                        frontier_phi_67_pred_4 = _2773;
                        frontier_phi_67_pred_5 = _2772;
                    }
                    _2440 = frontier_phi_67_pred;
                    _2442 = frontier_phi_67_pred_1;
                    _2444 = frontier_phi_67_pred_2;
                    _2438 = frontier_phi_67_pred_3;
                    _2436 = frontier_phi_67_pred_4;
                    _2434 = frontier_phi_67_pred_5;
                    uint _2579 = _2578 + 1u;
                    if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2572 = _2434;
                        _2573 = _2436;
                        _2574 = _2438;
                        _2575 = _2440;
                        _2576 = _2442;
                        _2577 = _2444;
                        _2578 = _2579;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2442;
                frontier_phi_55_56_ladder_1 = _2444;
                frontier_phi_55_56_ladder_2 = _2440;
                frontier_phi_55_56_ladder_3 = _2438;
                frontier_phi_55_56_ladder_4 = _2436;
                frontier_phi_55_56_ladder_5 = _2434;
            }
            else
            {
                frontier_phi_55_56_ladder = _2328;
                frontier_phi_55_56_ladder_1 = _2330;
                frontier_phi_55_56_ladder_2 = _2326;
                frontier_phi_55_56_ladder_3 = _2324;
                frontier_phi_55_56_ladder_4 = _2322;
                frontier_phi_55_56_ladder_5 = _2320;
            }
            _2433 = frontier_phi_55_56_ladder_5;
            _2435 = frontier_phi_55_56_ladder_4;
            _2437 = frontier_phi_55_56_ladder_3;
            _2439 = frontier_phi_55_56_ladder_2;
            _2441 = frontier_phi_55_56_ladder;
            _2443 = frontier_phi_55_56_ladder_1;
        }
        float _2448 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _2232 = (_2448 * _2439) + _1665;
        _2234 = (_2448 * _2441) + _1667;
        _2236 = (_2448 * _2443) + _1669;
        _2238 = ((_2433 * _452) * _2448) + _2013;
        _2240 = ((_2435 * _454) * _2448) + _2015;
        _2242 = ((_2437 * _455) * _2448) + _2017;
    }
    else
    {
        _2232 = _1665;
        _2234 = _1667;
        _2236 = _1669;
        _2238 = _2013;
        _2240 = _2015;
        _2242 = _2017;
    }
    float _4077 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4088 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4099 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    uint _2262 = _427 + 6u;
    float _2270 = _387 / cbSceneParam._m0[86u].x;
    float _2271 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2285 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2287 = _2285.x;
    float _2288 = _2285.y;
    float _2289 = _2285.z;
    float _2290 = _2285.w;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2345 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2346 = _2345 / _319;
        float _2357 = _2346 * _372;
        float _2358 = _373 * _2346;
        float _2359 = (-0.0) - _2358;
        float _2361 = _2346 * _374;
        float _2363 = (cbSceneParam._m0[77u].w * _2359) / _2345;
        float _2364 = _2363 + cbSceneParam._m0[79u].w;
        float _2365 = cbSceneParam._m0[79u].w - _2358;
        float _2371 = sqrt(((_2357 * _2357) + (_2358 * _2358)) + (_2361 * _2361));
        float _2374 = (1.0 - (cbSceneParam._m0[77u].w / _2345)) * _2371;
        float _2379 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2381 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2534;
        if (abs((_2359 - _2363) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2534 = ((((_2364 > 0.0) ? exp2(_2379 * _2364) : (2.0 - exp2(_2381 * _2364))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2374;
        }
        else
        {
            float _2494 = 1.0 / cbSceneParam._m0[80u].x;
            float _2495 = isnan(_2365) ? _2364 : (isnan(_2364) ? _2365 : max(_2364, _2365));
            float _2496 = isnan(_2365) ? _2364 : (isnan(_2364) ? _2365 : min(_2364, _2365));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            float _2506 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : min(_2496, 0.0));
            _2534 = ((abs(_2371 / _2359) * cbSceneParam._m0[80u].y) * ((((_2505 - _2506) * 2.0) - ((exp2(_2379 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0)))) - exp2(_2379 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))))) * _2494)) - ((exp2(_2381 * _2505) - exp2(_2381 * _2506)) * _2494))) + (_2374 * cbSceneParam._m0[80u].z);
        }
        vec4 _2536 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, 1.0), 0.0);
        float _2545 = exp2((_2534 * (-1.44269502162933349609375)) * (1.0 - _2536.w));
        float _2546 = log2(_2545);
        float _2562 = log2(_2290);
        _2383 = (exp2(_2562 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2546 * cbSceneParam._m0[78u].x)) * _2536.x) / cbSceneParam._m0[78u].x)) + _2287;
        _2385 = (exp2(_2562 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2546 * cbSceneParam._m0[78u].y)) * _2536.y) / cbSceneParam._m0[78u].y)) + _2288;
        _2387 = (exp2(_2562 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2546 * cbSceneParam._m0[78u].z)) * _2536.z) / cbSceneParam._m0[78u].z)) + _2289;
        _2389 = _2545 * _2290;
    }
    else
    {
        _2383 = _2287;
        _2385 = _2288;
        _2387 = _2289;
        _2389 = _2290;
    }
    float _2401 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2402 = _2401 == 3.0;
    float _2403 = log2(_2389);
    float _2410 = exp2(_2403 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2232 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _467))) + ((_2238 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2411 = exp2(_2403 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2234 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _467))) + ((_2240 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2412 = exp2(_2403 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2236 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _467))) + ((_2242 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2421 = (_2401 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2421 * (_2402 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.y = _2421 * (_2402 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2385)));
    SV_Target.z = _2421 * (_2402 ? _2412 : (_2412 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.w = cbInstanceData._m0[_2262].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2262].w;
}


