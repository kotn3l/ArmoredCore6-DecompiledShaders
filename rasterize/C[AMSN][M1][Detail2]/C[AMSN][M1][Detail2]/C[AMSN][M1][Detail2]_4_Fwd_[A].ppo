#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1098;
float _3485;
float _3486;
float _3487;
float _3488;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _311 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3497 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[10u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[10u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[10u].z) - _257)) + _257;
    vec4 _345 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _374 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3508 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _382 = (_375 * ((_345.x * cbMtdParam._m0[11u].x) - _319)) + _319;
    float _383 = (_375 * ((_345.y * cbMtdParam._m0[11u].y) - _320)) + _320;
    float _384 = (_375 * ((_345.z * cbMtdParam._m0[11u].z) - _321)) + _321;
    vec4 _396 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _398 = _396.x;
    float _400 = _398 - (_398 * TEXCOORD_5.x);
    vec4 _417 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _425 = (_417.x * 2.0) + (-1.0);
    float _427 = (_417.y * 2.0) + (-1.0);
    float _428 = dot(vec2(_425, _427), vec2(_425, _427));
    float _3519 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _433 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _434 = _417.z * cbMtdParam._m0[13u].y;
    vec4 _447 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _461 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_447.z * cbMtdParam._m0[13u].x) - _434)) + _434;
    vec4 _475 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_475.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _502 = (((((_447.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _425) + ((((_475.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _503 = (((((_447.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _427) + ((((_475.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _506 = fma(_433, _219 * NORMAL.x, fma(_503, _226 * TANGENT.x, (_212 * _204) * _502));
    float _509 = fma(_433, _219 * NORMAL.y, fma(_503, _226 * TANGENT.y, (_212 * _205) * _502));
    float _512 = fma(_433, _219 * NORMAL.z, fma(_503, _226 * TANGENT.z, (_212 * _206) * _502));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3530 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _520 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3552 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3563 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3574 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _524 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    vec4 _604 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _606 = _604.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _778 = sqrt(((_590 * _590) + (_591 * _591)) + (_592 * _592));
        float _784 = (cbMatDynParam._m0[5u].x * _778) + cbMatDynParam._m0[5u].y;
        float _3585 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _789 = (cbMatDynParam._m0[5u].z * _778) + cbMatDynParam._m0[5u].w;
        float _3596 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) - _785)) + _785) < ((_606 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _639 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _642 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _656 = _655 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3607 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _669 = 1.0 - _524;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _524;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _524;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _524;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _695 = _692.x * TEXCOORD_5.w;
    float _696 = dot(vec3(_517, _518, _519), vec3(_597, _598, _599));
    float _699 = _696 * 2.0;
    float _703 = (_699 * _517) - _597;
    float _704 = (_699 * _518) - _598;
    float _705 = (_699 * _519) - _599;
    float _709 = abs(dot(vec3(_597, _598, _599), vec3(_517, _518, _519)));
    float _3640 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _711 = sqrt(_520);
    float _724 = exp2((_711 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_711 * 3.0));
    float _730 = (1.0 - _724) * ((_711 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _731 = _724 * _711;
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_767, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759));
        float _826 = fma(_767, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759));
        float _830 = fma(_767, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759));
        float _855 = _759 + _517;
        float _856 = _763 + _518;
        float _857 = _767 + _519;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_517, _518, _519), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3688 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_517, _518, _519), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3721 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_517, _518, _519), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3754 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1141 = fma(_767, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _759));
        float _1145 = fma(_767, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _759));
        float _1149 = fma(_767, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _759));
        float _1172 = _759 + _517;
        float _1173 = _763 + _518;
        float _1174 = _767 + _519;
        float _1184 = fma(_1174, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172)) - _1141;
        float _1185 = fma(_1174, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172)) - _1145;
        float _1186 = fma(_1174, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172)) - _1149;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1141 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1145 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[35u].z) + ((((((_1149 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1240 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1207.x + (-0.5));
        float _1242 = _1240 * (_1207.y + (-0.5));
        float _1243 = _1240 * (_1207.z + (-0.5));
        float _1250 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1214.x + (-0.5));
        float _1252 = _1250 * (_1214.y + (-0.5));
        float _1253 = _1250 * (_1214.z + (-0.5));
        float _1260 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1221.x + (-0.5));
        float _1262 = _1260 * (_1221.y + (-0.5));
        float _1263 = _1260 * (_1221.z + (-0.5));
        float _1270 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1228.x + (-0.5));
        float _1272 = _1270 * (_1228.y + (-0.5));
        float _1273 = _1270 * (_1228.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_517, _518, _519), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3817 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1304 + 1.0))) + _1309) * _1274;
        float _1319 = _1242 * 0.5;
        float _1320 = _1252 * 0.5;
        float _1321 = _1262 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_517, _518, _519), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3850 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1346 + 1.0))) + _1351) * _1275;
        float _1361 = _1243 * 0.5;
        float _1362 = _1253 * 0.5;
        float _1363 = _1263 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_517, _518, _519), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3883 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1388 + 1.0))) + _1393) * _1276;
        _1410 = _1243;
        _1411 = _1242;
        _1412 = _1241;
        _1413 = _1253;
        _1414 = _1252;
        _1415 = _1251;
        _1416 = _1263;
        _1417 = _1262;
        _1418 = _1261;
        _1419 = _1276;
        _1420 = _1275;
        _1421 = _1274;
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = _1098;
        _1420 = _1098;
        _1421 = _1098;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1457 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1434));
    float _1478 = _703 * 0.5;
    float _1479 = _704 * 0.5;
    float _1480 = _705 * 0.5;
    float _1481 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1484 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1487 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1521;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1494 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1498 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1502 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1509 = dot(vec4(cbModelParam._m0[39u]), vec4(_1478, _1479, _1480, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1532;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1523 = dot(vec4(cbModelParam._m0[40u]), vec4(_1478, _1479, _1480, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1536 = (_1532 * cbModelParam._m0[1u].x) + (_1521 * (1.0 - cbModelParam._m0[1u].x));
    float _1546 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1547 = isnan(_1546) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1546 : min(cbModelParam._m0[25u].z, _1546));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1594 = fma(_767, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759)) + cbModelParam._m0[13u].w;
        float _1598 = fma(_767, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759)) + cbModelParam._m0[14u].w;
        float _1602 = fma(_767, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759)) + cbModelParam._m0[15u].w;
        float _1605 = fma(_705, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703));
        float _1608 = fma(_705, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703));
        float _1611 = fma(_705, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703));
        float _1639;
        if (_1605 > 0.0)
        {
            _1639 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1639 = frontier_phi_17_15_ladder;
        }
        float _1845;
        if (_1608 > 0.0)
        {
            _1845 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1845 = frontier_phi_26_22_ladder;
        }
        float _2099;
        if (_1611 > 0.0)
        {
            _2099 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2099 = frontier_phi_38_33_ladder;
        }
        float _2101 = isnan(_1845) ? _1639 : (isnan(_1639) ? _1845 : min(_1639, _1845));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1605) + _1594;
        float _2107 = (_2102 * _1608) + _1598;
        float _2108 = (_2102 * _1611) + _1602;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2109;
        float _2113 = _2109 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 > _2113) || ((_2107 < _2111) || ((_2106 < _2111) || (_2106 > _2113))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2108, cbModelParam._m0[9u].z, fma(_2107, cbModelParam._m0[9u].y, _2106 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2108, cbModelParam._m0[10u].z, fma(_2107, cbModelParam._m0[10u].y, _2106 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2108, cbModelParam._m0[11u].z, fma(_2107, cbModelParam._m0[11u].y, _2106 * cbModelParam._m0[11u].x))), _1547);
            frontier_phi_16_38_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1627 = frontier_phi_16_38_ladder_2;
        _1629 = frontier_phi_16_38_ladder_1;
        _1631 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_703, _704, _705), _1547);
        _1627 = _1615.x * cbModelParam._m0[1u].y;
        _1629 = _1615.y * cbModelParam._m0[1u].y;
        _1631 = _1615.z * cbModelParam._m0[1u].y;
    }
    float _1635 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1635 : min(cbModelParam._m0[25u].w, _1635));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1693 = fma(_767, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759)) + cbModelParam._m0[21u].w;
        float _1697 = fma(_767, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759)) + cbModelParam._m0[22u].w;
        float _1701 = fma(_767, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759)) + cbModelParam._m0[23u].w;
        float _1704 = fma(_705, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703));
        float _1707 = fma(_705, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703));
        float _1710 = fma(_705, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703));
        float _1850;
        if (_1704 > 0.0)
        {
            _1850 = abs((1.0 - _1693) / _1704);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1693 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1850 = frontier_phi_28_24_ladder;
        }
        float _2126;
        if (_1707 > 0.0)
        {
            _2126 = abs((1.0 - _1697) / _1707);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1697 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2126 = frontier_phi_40_35_ladder;
        }
        float _2339;
        if (_1710 > 0.0)
        {
            _2339 = abs((1.0 - _1701) / _1710);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1701 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2339 = frontier_phi_49_46_ladder;
        }
        float _2341 = isnan(_2126) ? _1850 : (isnan(_1850) ? _2126 : min(_1850, _2126));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1704) + _1693;
        float _2347 = (_2342 * _1707) + _1697;
        float _2348 = (_2342 * _1710) + _1701;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2349;
        float _2352 = _2349 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2348 > _2352) || ((_2348 < _2350) || ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 < _2350) || (_2346 > _2352))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2348, cbModelParam._m0[17u].z, fma(_2347, cbModelParam._m0[17u].y, _2346 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2348, cbModelParam._m0[18u].z, fma(_2347, cbModelParam._m0[18u].y, _2346 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2348, cbModelParam._m0[19u].z, fma(_2347, cbModelParam._m0[19u].y, _2346 * cbModelParam._m0[19u].x))), _1636);
            frontier_phi_25_49_ladder = _2547.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2547.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2547.x * cbModelParam._m0[1u].z;
        }
        _1729 = frontier_phi_25_49_ladder_2;
        _1731 = frontier_phi_25_49_ladder_1;
        _1733 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_703, _704, _705), _1636);
        _1729 = _1713.x * cbModelParam._m0[1u].z;
        _1731 = _1713.y * cbModelParam._m0[1u].z;
        _1733 = _1713.z * cbModelParam._m0[1u].z;
    }
    float _1746 = (((_730 * _680) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1729 - _1627)) + _1627);
    float _1748 = (((_730 * _682) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1731 - _1629)) + _1629);
    float _1750 = (((_730 * _683) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1733 - _1631)) + _1631);
    float _1753 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1746 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1746 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, _1746 * cbSceneParam._m0[91u].x));
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _695 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1804 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1808 = _1771 | 1u;
    float _1819 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_517, _518, _519));
    float _1822 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_517, _518, _519));
    float _4019 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _4030 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1827 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
    float _1829 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1836 = ((cbLight._m0[_1788].x * _1794) * _1829) + ((cbLight._m0[_1798].x * _1804) * _1827);
    float _1837 = ((_1794 * cbLight._m0[_1788].y) * _1829) + ((_1804 * cbLight._m0[_1798].y) * _1827);
    float _1838 = ((_1794 * cbLight._m0[_1788].z) * _1829) + ((_1804 * cbLight._m0[_1798].z) * _1827);
    uvec4 _1842 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1844 = _1842.x == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1844)
    {
        _1855 = _1836;
        _1857 = _1837;
        _1859 = _1838;
    }
    else
    {
        uint _1863 = _1771 + 6u;
        float _1879 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _4041 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1882 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1855 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1836;
        _1857 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1837;
        _1859 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1838;
    }
    bool _1862 = _1842.y == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1862)
    {
        _1900 = _1855;
        _1902 = _1857;
        _1904 = _1859;
    }
    else
    {
        uint _2070 = _1771 + 7u;
        float _2086 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4057 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2089 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1900 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _1855;
        _1902 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _1857;
        _1904 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _1859;
    }
    uint _1907 = _1771 + 8u;
    float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _520) * 0.949999988079071044921875);
    float _1921 = _1920 * _1920;
    float _1922 = cbLight._m0[_1771].x + _597;
    float _1923 = cbLight._m0[_1771].y + _598;
    float _1924 = cbLight._m0[_1771].z + _599;
    float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
    float _1929 = _1928 * _1922;
    float _1930 = _1928 * _1923;
    float _1931 = _1928 * _1924;
    float _1932 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1771].xyz));
    float _4073 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _1936 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _1937 = dot(vec3(_517, _518, _519), vec3(_1929, _1930, _1931));
    float _4095 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1929, _1930, _1931));
    float _4106 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1921 * _1921;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0);
    float _1958 = 0.959999978542327880859375 - _677;
    float _1960 = 0.959999978542327880859375 - _678;
    float _1961 = 0.959999978542327880859375 - _679;
    float _1968 = 1.0 - _1921;
    float _1979 = (0.5 / (((_1936 * ((_1935 * _1968) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _1968) + _1921) * _1935))) * _1935;
    float _4117 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1981 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    uint _1992 = _1771 + 9u;
    float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _520) * 0.949999988079071044921875);
    float _2004 = _2003 * _2003;
    float _2005 = cbLight._m0[_1808].x + _597;
    float _2006 = cbLight._m0[_1808].y + _598;
    float _2007 = cbLight._m0[_1808].z + _599;
    float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
    float _2012 = _2011 * _2005;
    float _2013 = _2011 * _2006;
    float _2014 = _2011 * _2007;
    float _2015 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1808].xyz));
    float _4128 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2019 = dot(vec3(_517, _518, _519), vec3(_2012, _2013, _2014));
    float _4139 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2023 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_2012, _2013, _2014));
    float _4150 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2027 = _2004 * _2004;
    float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
    float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0);
    float _2045 = 1.0 - _2004;
    float _2055 = (0.5 / (((_1936 * ((_2018 * _2045) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2045) + _2004) * _2018))) * _2018;
    float _4161 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2057 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
    float _2067 = (((((_2038 * _1958) + _680) * cbLight._m0[_1992].x) * _2057) * _1794) + (((((_1957 * _1958) + _680) * cbLight._m0[_1907].x) * _1981) * _1804);
    float _2068 = (((((_2038 * _1960) + _682) * cbLight._m0[_1992].y) * _2057) * _1794) + (((((_1957 * _1960) + _682) * cbLight._m0[_1907].y) * _1981) * _1804);
    float _2069 = (((((_2038 * _1961) + _683) * cbLight._m0[_1992].z) * _2057) * _1794) + (((((_1957 * _1961) + _683) * cbLight._m0[_1907].z) * _1981) * _1804);
    float _2131;
    float _2133;
    float _2135;
    if (_1844)
    {
        _2131 = _2067;
        _2133 = _2068;
        _2135 = _2069;
    }
    else
    {
        uint _2137 = _1771 + 2u;
        uint _2141 = _1771 + 10u;
        float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _520) * 0.949999988079071044921875);
        float _2156 = _2155 * _2155;
        float _2157 = cbLight._m0[_2137].x + _597;
        float _2158 = cbLight._m0[_2137].y + _598;
        float _2159 = cbLight._m0[_2137].z + _599;
        float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
        float _2164 = _2163 * _2157;
        float _2165 = _2163 * _2158;
        float _2166 = _2163 * _2159;
        float _2167 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2137].xyz));
        float _4172 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2171 = dot(vec3(_517, _518, _519), vec3(_2164, _2165, _2166));
        float _4183 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2175 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2164, _2165, _2166));
        float _4194 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2179 = _2156 * _2156;
        float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
        float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0);
        float _2197 = 1.0 - _2156;
        float _2207 = (0.5 / (((_1936 * ((_2170 * _2197) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2197) + _2156) * _2170))) * _2170;
        float _4205 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
        float _2210 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2131 = (((((_2190 * _1958) + _680) * cbLight._m0[_2141].x) * _2209) * _2210) + _2067;
        _2133 = (((((_2190 * _1960) + _682) * cbLight._m0[_2141].y) * _2209) * _2210) + _2068;
        _2135 = (((((_2190 * _1961) + _683) * cbLight._m0[_2141].z) * _2209) * _2210) + _2069;
    }
    float _2245;
    float _2247;
    float _2249;
    if (_1862)
    {
        _2245 = _2131;
        _2247 = _2133;
        _2249 = _2135;
    }
    else
    {
        uint _2256 = _1771 + 3u;
        uint _2260 = _1771 + 11u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _520) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _597;
        float _2277 = cbLight._m0[_2256].y + _598;
        float _2278 = cbLight._m0[_2256].z + _599;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2256].xyz));
        float _4221 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2290 = dot(vec3(_517, _518, _519), vec3(_2283, _2284, _2285));
        float _4232 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4243 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0);
        float _2316 = 1.0 - _2275;
        float _2326 = (0.5 / (((_1936 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2316) + _2275) * _2289))) * _2289;
        float _4254 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2245 = (((((_2309 * _1958) + _680) * cbLight._m0[_2260].x) * _2328) * _2329) + _2131;
        _2247 = (((((_2309 * _1960) + _682) * cbLight._m0[_2260].y) * _2328) * _2329) + _2133;
        _2249 = (((((_2309 * _1961) + _683) * cbLight._m0[_2260].z) * _2328) * _2329) + _2135;
    }
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_1769.y == 0u)
    {
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2404;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2404;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2404;
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.x;
        uint _2431 = uint((float(_2419.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2420))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2420)));
        float _2441 = (log2(_2407 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2442 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        uint _2445 = uint(isnan(14.0) ? _2442 : (isnan(_2442) ? 14.0 : min(_2442, 14.0)));
        uvec4 _2450 = texelFetch(g_lightClusterGridBuffer, int(((_2445 << 2u) + (_2431 << 6u)) >> 2u));
        uint _2451 = _2450.x;
        uint _2452 = _2419.z;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        if (((((1u << ((_2452 >> 4u) & 15u)) + 4294967295u) & _2451) == 0u) || ((_2452 & 240u) == 0u))
        {
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
        }
        else
        {
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            uint _2711 = 0u;
            uint _2720;
            bool _2721;
            for (;;)
            {
                _2720 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                _2721 = _2720 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2721)
                {
                    frontier_phi_66_pred = _2705;
                    frontier_phi_66_pred_1 = _2710;
                    frontier_phi_66_pred_2 = _2709;
                    frontier_phi_66_pred_3 = _2708;
                    frontier_phi_66_pred_4 = _2707;
                    frontier_phi_66_pred_5 = _2706;
                }
                else
                {
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    uint _2856;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2720;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    for (;;)
                    {
                        uint _2860 = uint(findLSB(_2856)) + (_2711 << 5u);
                        uint _2857 = (_2856 + 4294967295u) & _2856;
                        uint _2862 = _2860 * 48u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2882 = (_2860 * 48u) + 4u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2901 = (_2860 * 48u) + 8u;
                        vec3 _2912 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x));
                        float _2916 = _2876.x - _2405;
                        float _2917 = _2876.y - _2406;
                        float _2918 = _2876.z - _2407;
                        float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                        float _2922 = inversesqrt(_2919);
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2926 = dot(vec3(_636, _639, _642), vec3(_2923, _2924, _2925));
                        float _2931 = 1.0 - (_2919 * _2876.w);
                        float _4280 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2933 = sqrt(_2919) * _2895.w;
                        float _2936 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2926) + _2937;
                        float _2943 = _2933 * _2933;
                        float _2947 = ((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2932) / ((_2943 * 0.699999988079071044921875) + 1.0);
                        float _2951 = (-0.0) - _2405;
                        float _2952 = (-0.0) - _2406;
                        float _2953 = (-0.0) - _2407;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2968 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _711;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_636, _639, _642), vec3(_2958, _2959, _2960));
                        float _4296 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2993 = dot(vec3(_636, _639, _642), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4307 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2936 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2926) + _3002;
                        float _4318 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4329 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3000 * _3000) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125))) * _2932;
                        _2780 = (_2947 * _2895.x) + _2853;
                        _2781 = (_2947 * _2895.y) + _2854;
                        _2782 = (_2947 * _2895.z) + _2855;
                        _2777 = (_3028 * _2912.x) + _2850;
                        _2778 = (_3028 * _2912.y) + _2851;
                        _2779 = (_3028 * _2912.z) + _2852;
                        if (_2857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2857;
                        }
                    }
                    frontier_phi_66_pred = _2777;
                    frontier_phi_66_pred_1 = _2782;
                    frontier_phi_66_pred_2 = _2781;
                    frontier_phi_66_pred_3 = _2780;
                    frontier_phi_66_pred_4 = _2779;
                    frontier_phi_66_pred_5 = _2778;
                }
                _2553 = frontier_phi_66_pred;
                _2563 = frontier_phi_66_pred_1;
                _2561 = frontier_phi_66_pred_2;
                _2559 = frontier_phi_66_pred_3;
                _2557 = frontier_phi_66_pred_4;
                _2555 = frontier_phi_66_pred_5;
                uint _2712 = _2711 + 1u;
                if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2705 = _2553;
                    _2706 = _2555;
                    _2707 = _2557;
                    _2708 = _2559;
                    _2709 = _2561;
                    _2710 = _2563;
                    _2711 = _2712;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
        }
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.z;
        uint _2569 = (_2567 >> 8u) & 15u;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((4294967295u << _2569) & _2451) == 0u)
        {
            _2673 = _2552;
            _2675 = _2554;
            _2677 = _2556;
            _2679 = _2558;
            _2681 = _2560;
            _2683 = _2562;
        }
        else
        {
            float _2698 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
            float _2699 = _2698 * _2405;
            float _2700 = _2698 * _2406;
            float _2701 = _2698 * _2407;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2569 < ((_2567 >> 12u) & 15u))
            {
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2833 = _2552;
                float _2834 = _2554;
                float _2835 = _2556;
                float _2836 = _2558;
                float _2837 = _2560;
                float _2838 = _2562;
                uint _2839 = _2569;
                uint _2848;
                bool _2849;
                for (;;)
                {
                    _2848 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                    _2849 = _2848 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2849)
                    {
                        frontier_phi_77_pred = _2838;
                        frontier_phi_77_pred_1 = _2837;
                        frontier_phi_77_pred_2 = _2836;
                        frontier_phi_77_pred_3 = _2835;
                        frontier_phi_77_pred_4 = _2834;
                        frontier_phi_77_pred_5 = _2833;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        uint _3061 = _2848;
                        uint _3062;
                        vec4 _3087;
                        float _3088;
                        vec4 _3103;
                        vec3 _3115;
                        vec4 _3131;
                        vec4 _3147;
                        float _3194;
                        bool _3195;
                        for (;;)
                        {
                            uint _3072 = ((_2839 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3061));
                            _3062 = (_3061 + 4294967295u) & _3061;
                            uint _3074 = _3072 * 40u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3088 = _3087.w;
                            uint _3090 = (_3072 * 40u) + 4u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3072 * 40u) + 8u;
                            _3115 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x));
                            uint _3118 = (_3072 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3134 = (_3072 * 40u) + 20u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3072 * 40u) + 24u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3169 = (_3072 * 40u) + 28u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3194 = fma(_2407, _3182.z, fma(_2406, _3182.y, _3182.x * _2405)) + _3182.w;
                            _3195 = !((fma(_2407, _3163.z, fma(_2406, _3163.y, _3163.x * _2405)) + _3163.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3195)
                            {
                                float _3222 = _3087.x - _2405;
                                float _3223 = _3087.y - _2406;
                                float _3224 = _3087.z - _2407;
                                float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                                float _3228 = inversesqrt(_3225);
                                float _3229 = _3228 * _3222;
                                float _3230 = _3228 * _3223;
                                float _3231 = _3228 * _3224;
                                float _3235 = 1.0 - (_3225 / (_3088 * _3088));
                                float _4340 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3240 = sqrt(_3225) * _3103.w;
                                float _3242 = 1.39999997615814208984375 / (_3240 + 1.39999997615814208984375);
                                float _3243 = _3242 * _3242;
                                float _3246 = ((1.0 - _3243) * dot(vec3(_3229, _3230, _3231), vec3(_636, _639, _642))) + _3243;
                                float _3249 = _3240 * _3240;
                                float _3253 = (fma(_2407, _3131.z, fma(_2406, _3131.y, _3131.x * _2405)) + _3131.w) / _3194;
                                float _3254 = (fma(_2407, _3147.z, fma(_2406, _3147.y, _3147.x * _2405)) + _3147.w) / _3194;
                                float _3258 = 1.0 - dot(vec2(_3253, _3254), vec2(_3253, _3254));
                                float _4356 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3260 = _3259 * (((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3236) / ((_3249 * 0.699999988079071044921875) + 1.0));
                                float _3272 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                                float _3273 = 1.0 - _711;
                                float _3280 = sqrt(1.0 - ((1.0 - (_3273 * _3273)) * (1.0 - (_3272 * _3272))));
                                float _3281 = _3280 * _3280;
                                float _3282 = _3281 * _3281;
                                float _3283 = _3229 - _2699;
                                float _3284 = _3230 - _2700;
                                float _3285 = _3231 - _2701;
                                float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                                float _3293 = dot(vec3(_636, _639, _642), vec3((-0.0) - _2699, (-0.0) - _2700, (-0.0) - _2701));
                                float _4367 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3297 = dot(vec3(_636, _639, _642), vec3(_3289 * _3283, _3289 * _3284, _3289 * _3285));
                                float _4378 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3304 = ((_3300 * _3300) * (_3282 + (-1.0))) + 1.0;
                                float _3305 = _3242 * _3281;
                                float _3306 = _3305 * _3305;
                                float _3312 = ((1.0 - _3306) * dot(vec3(_636, _639, _642), vec3(_3229, _3230, _3231))) + _3306;
                                float _4389 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3314 = 1.0 - _3281;
                                float _3324 = (0.5 / (((_3313 * ((_3296 * _3314) + _3281)) + 9.9999999392252902907785028219223e-09) + (((_3313 * _3314) + _3281) * _3296))) * _3313;
                                float _4400 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3334 = (_3259 * _3236) * (((_3282 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3304 * _3304) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3260 * _3103.y;
                                frontier_phi_83_pred_1 = _3260 * _3103.x;
                                frontier_phi_83_pred_2 = _3334 * _3115.z;
                                frontier_phi_83_pred_3 = _3334 * _3115.y;
                                frontier_phi_83_pred_4 = _3334 * _3115.x;
                                frontier_phi_83_pred_5 = _3260 * _3103.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_83_pred;
                            _3341 = frontier_phi_83_pred_1;
                            _3340 = frontier_phi_83_pred_2;
                            _3339 = frontier_phi_83_pred_3;
                            _3338 = frontier_phi_83_pred_4;
                            _3343 = frontier_phi_83_pred_5;
                            _3045 = _3341 + _3058;
                            _3046 = _3342 + _3059;
                            _3047 = _3343 + _3060;
                            _3042 = _3338 + _3055;
                            _3043 = _3339 + _3056;
                            _3044 = _3340 + _3057;
                            if (_3062 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3062;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3047;
                        frontier_phi_77_pred_1 = _3046;
                        frontier_phi_77_pred_2 = _3045;
                        frontier_phi_77_pred_3 = _3044;
                        frontier_phi_77_pred_4 = _3043;
                        frontier_phi_77_pred_5 = _3042;
                    }
                    _2684 = frontier_phi_77_pred;
                    _2682 = frontier_phi_77_pred_1;
                    _2680 = frontier_phi_77_pred_2;
                    _2678 = frontier_phi_77_pred_3;
                    _2676 = frontier_phi_77_pred_4;
                    _2674 = frontier_phi_77_pred_5;
                    uint _2840 = _2839 + 1u;
                    if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2833 = _2674;
                        _2834 = _2676;
                        _2835 = _2678;
                        _2836 = _2680;
                        _2837 = _2682;
                        _2838 = _2684;
                        _2839 = _2840;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2678;
                frontier_phi_58_59_ladder_1 = _2684;
                frontier_phi_58_59_ladder_2 = _2682;
                frontier_phi_58_59_ladder_3 = _2680;
                frontier_phi_58_59_ladder_4 = _2676;
                frontier_phi_58_59_ladder_5 = _2674;
            }
            else
            {
                frontier_phi_58_59_ladder = _2556;
                frontier_phi_58_59_ladder_1 = _2562;
                frontier_phi_58_59_ladder_2 = _2560;
                frontier_phi_58_59_ladder_3 = _2558;
                frontier_phi_58_59_ladder_4 = _2554;
                frontier_phi_58_59_ladder_5 = _2552;
            }
            _2673 = frontier_phi_58_59_ladder_5;
            _2675 = frontier_phi_58_59_ladder_4;
            _2677 = frontier_phi_58_59_ladder;
            _2679 = frontier_phi_58_59_ladder_3;
            _2681 = frontier_phi_58_59_ladder_2;
            _2683 = frontier_phi_58_59_ladder_1;
        }
        float _2688 = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
        _2464 = (_2688 * _2679) + _1900;
        _2466 = (_2688 * _2681) + _1902;
        _2468 = (_2688 * _2683) + _1904;
        _2470 = ((_2673 * _680) * _2688) + _2245;
        _2472 = ((_2675 * _682) * _2688) + _2247;
        _2474 = ((_2677 * _683) * _2688) + _2249;
    }
    else
    {
        _2464 = _1900;
        _2466 = _1902;
        _2468 = _1904;
        _2470 = _2245;
        _2472 = _2247;
        _2474 = _2249;
    }
    float _4416 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4427 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4438 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2491 = ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2464 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _695))) + ((_2470 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1536)) * cbPerFrame._m0[3u].x);
    float _2492 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2466 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _695))) + ((_2472 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1536)) * cbPerFrame._m0[3u].x);
    float _2493 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2468 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _695))) + ((_2474 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1536)) * cbPerFrame._m0[3u].x);
    uint _2494 = _655 + 6u;
    float _2502 = _617 / cbSceneParam._m0[86u].x;
    float _2503 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2517 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2519 = _2517.x;
    float _2520 = _2517.y;
    float _2521 = _2517.z;
    float _2522 = _2517.w;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2577 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2578 = _2577 / _540;
        float _2589 = _2578 * _590;
        float _2590 = _591 * _2578;
        float _2591 = (-0.0) - _2590;
        float _2593 = _2578 * _592;
        float _2595 = (cbSceneParam._m0[77u].w * _2591) / _2577;
        float _2596 = _2595 + cbSceneParam._m0[79u].w;
        float _2597 = cbSceneParam._m0[79u].w - _2590;
        float _2603 = sqrt(((_2589 * _2589) + (_2590 * _2590)) + (_2593 * _2593));
        float _2606 = (1.0 - (cbSceneParam._m0[77u].w / _2577)) * _2603;
        float _2611 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2613 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2790;
        if (abs((_2591 - _2595) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2790 = ((((_2596 > 0.0) ? exp2(_2611 * _2596) : (2.0 - exp2(_2613 * _2596))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2606;
        }
        else
        {
            float _2734 = 1.0 / cbSceneParam._m0[80u].x;
            float _2735 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : max(_2596, _2597));
            float _2736 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : min(_2596, _2597));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            _2790 = ((abs(_2603 / _2591) * cbSceneParam._m0[80u].y) * ((((_2745 - _2746) * 2.0) - ((exp2(_2611 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0)))) - exp2(_2611 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))))) * _2734)) - ((exp2(_2613 * _2745) - exp2(_2613 * _2746)) * _2734))) + (_2606 * cbSceneParam._m0[80u].z);
        }
        vec4 _2792 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, 1.0), 0.0);
        float _2801 = exp2((_2790 * (-1.44269502162933349609375)) * (1.0 - _2792.w));
        float _2802 = log2(_2801);
        float _2818 = log2(_2522);
        _2615 = (exp2(_2818 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].x)) * _2792.x) / cbSceneParam._m0[78u].x)) + _2519;
        _2617 = (exp2(_2818 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].y)) * _2792.y) / cbSceneParam._m0[78u].y)) + _2520;
        _2619 = (exp2(_2818 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].z)) * _2792.z) / cbSceneParam._m0[78u].z)) + _2521;
        _2621 = _2801 * _2522;
    }
    else
    {
        _2615 = _2519;
        _2617 = _2520;
        _2619 = _2521;
        _2621 = _2522;
    }
    bool _2828;
    vec4 _2631;
    vec4 _2653;
    float _2655;
    float _2659;
    float _2660;
    float _2661;
    float _2662;
    bool _2672;
    for (;;)
    {
        _2631 = cbMatDynParam._m0[0u];
        float _2633 = roundEven(_2631.y);
        bool _2634 = _2633 == 3.0;
        float _2635 = log2(_2621);
        float _2642 = exp2(_2635 * cbSceneParam._m0[78u].x) * _2491;
        float _2643 = exp2(_2635 * cbSceneParam._m0[78u].y) * _2492;
        float _2644 = exp2(_2635 * cbSceneParam._m0[78u].z) * _2493;
        float _2651 = _606 + (-0.5);
        _2653 = cbMtdParam._m0[1u];
        _2655 = _2653.y * _2651;
        float _2658 = (_2633 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2659 = _2658 * (_2634 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2615)));
        _2660 = _2658 * (_2634 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2617)));
        _2661 = _2658 * (_2634 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2619)));
        _2662 = _2651 * 0.999000012874603271484375;
        _2672 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2672)
        {
            if ((cbInstanceData._m0[_655 + 7u].x + _2662) < 0.5)
            {
                _2828 = true;
                break;
            }
        }
        uint _2769 = _656 + uint(_2631.w);
        if ((cbInstanceData._m0[_2769].w < 1.0) && ((cbInstanceData._m0[_2769].w + _2662) < 0.5))
        {
            _2828 = true;
            break;
        }
        if ((_2655 + 1.0) < _2653.x)
        {
            _2828 = true;
            break;
        }
        _2828 = false;
        break;
    }
    float _3033;
    if (_2828)
    {
        discard_state = true;
        _3033 = 0.0;
    }
    else
    {
        _3033 = cbInstanceData._m0[_2494].w;
    }
    SV_Target.x = _2659;
    SV_Target.y = _2660;
    SV_Target.z = _2661;
    SV_Target.w = _3033;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2494].w;
    discard_exit();
}


