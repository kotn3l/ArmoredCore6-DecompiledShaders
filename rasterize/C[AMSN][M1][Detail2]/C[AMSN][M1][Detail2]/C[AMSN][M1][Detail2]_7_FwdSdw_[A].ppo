#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _996;
float _3645;
float _3646;
float _3647;
float _3648;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _310 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3657 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _318 = (_311 * ((_279.x * cbMtdParam._m0[11u].x) - _253)) + _253;
    float _319 = (_311 * ((_279.y * cbMtdParam._m0[11u].y) - _254)) + _254;
    float _320 = (_311 * ((_279.z * cbMtdParam._m0[11u].z) - _255)) + _255;
    vec4 _337 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = (_337.x * 2.0) + (-1.0);
    float _347 = (_337.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_345, _347), vec2(_345, _347));
    float _3668 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _353 = sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))));
    float _354 = _337.z * cbMtdParam._m0[13u].y;
    vec4 _366 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _401 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_387.z * cbMtdParam._m0[13u].z) - _354)) + _354;
    float _417 = (((((_366.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _345) + ((((_387.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _418 = (((((_366.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _347) + ((((_387.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _421 = fma(_353, _217 * NORMAL.x, fma(_418, _224 * TANGENT.x, (_210 * _202) * _417));
    float _424 = fma(_353, _217 * NORMAL.y, fma(_418, _224 * TANGENT.y, (_210 * _203) * _417));
    float _427 = fma(_353, _217 * NORMAL.z, fma(_418, _224 * TANGENT.z, (_210 * _204) * _417));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    float _432 = _431 * _421;
    float _433 = _431 * _424;
    float _434 = _431 * _427;
    float _3679 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _435 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3701 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3712 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _454 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _506 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _496);
    float _507 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _496);
    float _508 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _496);
    float _512 = inversesqrt(dot(vec3(_506, _507, _508), vec3(_506, _507, _508)));
    float _513 = _506 * _512;
    float _514 = _507 * _512;
    float _515 = _508 * _512;
    vec4 _520 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _522 = _520.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _676 = sqrt(((_506 * _506) + (_507 * _507)) + (_508 * _508));
        float _682 = (cbMatDynParam._m0[5u].x * _676) + cbMatDynParam._m0[5u].y;
        float _3723 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _687 = (cbMatDynParam._m0[5u].z * _676) + cbMatDynParam._m0[5u].w;
        float _3734 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) - _683)) + _683) < ((_522 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _552 = fma(_434, cbSceneParam._m0[5u].z, fma(_433, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _432));
    float _555 = fma(_434, cbSceneParam._m0[6u].z, fma(_433, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _432));
    float _558 = fma(_434, cbSceneParam._m0[7u].z, fma(_433, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _432));
    uint _571 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = _571 + 9u;
    uint _573 = _572 + uint(cbMatDynParam._m0[0u].w);
    float _579 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) * cbInstanceData._m0[_573].x;
    float _580 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_573].y;
    float _581 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_573].z;
    float _3745 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _593 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _533, cbSceneParam._m0[86u].y * _534));
    float _596 = _593.x * TEXCOORD_5.w;
    float _597 = dot(vec3(_432, _433, _434), vec3(_513, _514, _515));
    float _600 = _597 * 2.0;
    float _604 = (_600 * _432) - _513;
    float _605 = (_600 * _433) - _514;
    float _606 = (_600 * _434) - _515;
    float _610 = abs(dot(vec3(_513, _514, _515), vec3(_432, _433, _434)));
    float _3778 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _612 = sqrt(_435);
    float _625 = exp2((_612 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_612 * 3.0));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _995;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_665, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _657));
        float _724 = fma(_665, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _657));
        float _728 = fma(_665, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _657));
        float _753 = _657 + _432;
        float _754 = _661 + _433;
        float _755 = _665 + _434;
        float _765 = fma(_755, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _753)) - _720;
        float _766 = fma(_755, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _753)) - _724;
        float _767 = fma(_755, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _753)) - _728;
        float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
        float _784 = ((_771 * _765) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _785 = ((_771 * _766) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_771 * _767) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_784, _785, _786), 0.0);
        float _823 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_789.x + (-0.5));
        float _825 = _823 * (_789.y + (-0.5));
        float _826 = _823 * (_789.z + (-0.5));
        float _833 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_796.x + (-0.5));
        float _835 = _833 * (_796.y + (-0.5));
        float _836 = _833 * (_796.z + (-0.5));
        float _843 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_803.x + (-0.5));
        float _845 = _843 * (_803.y + (-0.5));
        float _846 = _843 * (_803.z + (-0.5));
        float _853 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_810.x + (-0.5));
        float _855 = _853 * (_810.y + (-0.5));
        float _856 = _853 * (_810.z + (-0.5));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = _824 * 0.5;
        float _861 = _834 * 0.5;
        float _862 = _844 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _877 = (dot(vec3(_432, _433, _434), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _887 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3826 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_889 + 1.0))) + _894) * _857;
        float _904 = _825 * 0.5;
        float _905 = _835 * 0.5;
        float _906 = _845 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_432, _433, _434), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3859 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_931 + 1.0))) + _936) * _858;
        float _946 = _826 * 0.5;
        float _947 = _836 * 0.5;
        float _948 = _846 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_432, _433, _434), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3892 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_973 + 1.0))) + _978) * _859;
        _995 = _826;
        _997 = _825;
        _998 = _824;
        _999 = _836;
        _1000 = _835;
        _1001 = _834;
        _1002 = _846;
        _1003 = _845;
        _1004 = _844;
        _1005 = _859;
        _1006 = _858;
        _1007 = _857;
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
    }
    else
    {
        _995 = _996;
        _997 = _996;
        _998 = _996;
        _999 = _996;
        _1000 = _996;
        _1001 = _996;
        _1002 = _996;
        _1003 = _996;
        _1004 = _996;
        _1005 = _996;
        _1006 = _996;
        _1007 = _996;
        _1008 = 0.0;
        _1009 = 0.0;
        _1010 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_665, cbModelParam._m0[30u].z, fma(_661, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _657));
        float _1043 = fma(_665, cbModelParam._m0[31u].z, fma(_661, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _657));
        float _1047 = fma(_665, cbModelParam._m0[32u].z, fma(_661, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _657));
        float _1070 = _657 + _432;
        float _1071 = _661 + _433;
        float _1072 = _665 + _434;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_432, _433, _434), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3955 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_432, _433, _434), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3988 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_432, _433, _434), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4021 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _996;
        _1309 = _996;
        _1310 = _996;
        _1311 = _996;
        _1312 = _996;
        _1313 = _996;
        _1314 = _996;
        _1315 = _996;
        _1316 = _996;
        _1317 = _996;
        _1318 = _996;
        _1319 = _996;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1008)) + _1008;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1009)) + _1009;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1010)) + _1010;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _604 * 0.5;
    float _1377 = _605 * 0.5;
    float _1378 = _606 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_995, _999, _1002, _1005));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_997, _1000, _1003, _1006));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _435);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_665, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _657)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_665, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _657)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_665, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _657)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1506 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1509 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1537 = frontier_phi_17_15_ladder;
        }
        float _1710;
        if (_1506 > 0.0)
        {
            _1710 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1710 = frontier_phi_26_22_ladder;
        }
        float _2005;
        if (_1509 > 0.0)
        {
            _2005 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2005 = frontier_phi_38_33_ladder;
        }
        float _2007 = isnan(_1710) ? _1537 : (isnan(_1537) ? _1710 : min(_1537, _1710));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1503) + _1492;
        float _2013 = (_2008 * _1506) + _1496;
        float _2014 = (_2008 * _1509) + _1500;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2017 = (-1.0) - _2015;
        float _2019 = _2015 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2014 > _2019) || ((_2014 < _2017) || ((_2013 > _2019) || ((_2013 < _2017) || ((_2012 < _2017) || (_2012 > _2019))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2159 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2014, cbModelParam._m0[9u].z, fma(_2013, cbModelParam._m0[9u].y, _2012 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2014, cbModelParam._m0[10u].z, fma(_2013, cbModelParam._m0[10u].y, _2012 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2014, cbModelParam._m0[11u].z, fma(_2013, cbModelParam._m0[11u].y, _2012 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_16_38_ladder = _2159.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2159.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2159.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_16_38_ladder_2;
        _1527 = frontier_phi_16_38_ladder_1;
        _1529 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1445);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _435);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_665, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _657)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_665, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _657)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_665, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _657)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1605 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1608 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1715;
        if (_1602 > 0.0)
        {
            _1715 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1715 = frontier_phi_28_24_ladder;
        }
        float _2032;
        if (_1605 > 0.0)
        {
            _2032 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2032 = frontier_phi_40_35_ladder;
        }
        float _2359;
        if (_1608 > 0.0)
        {
            _2359 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2359 = frontier_phi_50_47_ladder;
        }
        float _2361 = isnan(_2032) ? _1715 : (isnan(_1715) ? _2032 : min(_1715, _2032));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1602) + _1591;
        float _2367 = (_2362 * _1605) + _1595;
        float _2368 = (_2362 * _1608) + _1599;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2370 = (-1.0) - _2369;
        float _2372 = _2369 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2368 > _2372) || ((_2368 < _2370) || ((_2367 > _2372) || ((_2367 < _2370) || ((_2366 < _2370) || (_2366 > _2372))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2368, cbModelParam._m0[17u].z, fma(_2367, cbModelParam._m0[17u].y, _2366 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2368, cbModelParam._m0[18u].z, fma(_2367, cbModelParam._m0[18u].y, _2366 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2368, cbModelParam._m0[19u].z, fma(_2367, cbModelParam._m0[19u].y, _2366 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_25_50_ladder = _2486.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2486.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2486.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_25_50_ladder_2;
        _1629 = frontier_phi_25_50_ladder_1;
        _1631 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1534);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1643 = ((((1.0 - _625) * ((_612 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_625 * _612)) * _596;
    float _1644 = _1643 * ((cbModelParam._m0[1u].w * (_1627 - _1525)) + _1525);
    float _1645 = _1643 * ((cbModelParam._m0[1u].w * (_1629 - _1527)) + _1527);
    float _1646 = _1643 * ((cbModelParam._m0[1u].w * (_1631 - _1529)) + _1529);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    float _1689 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1693 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1702 = _1689 / _1701;
    float _1703 = _1693 / _1701;
    float _1704 = _1697 / _1701;
    float _1851;
    float _1852;
    float _1853;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1731 = ((uint(_1704 > cbSceneParam._m0[59u].y) + uint(_1704 > cbSceneParam._m0[59u].x)) + uint(_1704 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1732 = _1731 + 43u;
        uint _1740 = _1731 + 44u;
        uint _1748 = _1731 + 45u;
        uint _1756 = _1731 + 46u;
        float _1767 = fma(_1701, cbSceneParam._m0[_1732].w, fma(_1697, cbSceneParam._m0[_1732].z, fma(_1693, cbSceneParam._m0[_1732].y, _1689 * cbSceneParam._m0[_1732].x)));
        float _1771 = fma(_1701, cbSceneParam._m0[_1740].w, fma(_1697, cbSceneParam._m0[_1740].z, fma(_1693, cbSceneParam._m0[_1740].y, _1689 * cbSceneParam._m0[_1740].x)));
        float _1779 = fma(_1701, cbSceneParam._m0[_1756].w, fma(_1697, cbSceneParam._m0[_1756].z, fma(_1693, cbSceneParam._m0[_1756].y, _1689 * cbSceneParam._m0[_1756].x)));
        float _1784 = cbSceneParam._m0[33u].z * _1779;
        float _1786 = cbSceneParam._m0[33u].w * _1779;
        float _1789 = fma(_1701, cbSceneParam._m0[_1748].w, fma(_1697, cbSceneParam._m0[_1748].z, fma(_1693, cbSceneParam._m0[_1748].y, _1689 * cbSceneParam._m0[_1748].x))) / _1779;
        float _1837 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
        float _4147 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1844 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 + _1767) / _1779, (_1786 + _1771) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 + _1767) / _1779, (_1771 - _1784) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1784) / _1779, (_1771 - _1786) / _1779), _1789), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 - _1786) / _1779, (_1784 + _1771) / _1779), _1789), 0.0)).x), vec4(0.25)));
        _1851 = 1.0 - (_1844 * cbSceneParam._m0[34u].x);
        _1852 = 1.0 - (_1844 * cbSceneParam._m0[34u].y);
        _1853 = 1.0 - (_1844 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1851 = 1.0;
        _1852 = 1.0;
        _1853 = 1.0;
    }
    float _1917;
    float _1919;
    float _1921;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1905 = fma(_1701, cbSceneParam._m0[63u].w, fma(_1697, cbSceneParam._m0[63u].z, fma(_1693, cbSceneParam._m0[63u].y, _1689 * cbSceneParam._m0[63u].x)));
        float _1906 = fma(_1701, cbSceneParam._m0[60u].w, fma(_1697, cbSceneParam._m0[60u].z, fma(_1693, cbSceneParam._m0[60u].y, _1689 * cbSceneParam._m0[60u].x))) / _1905;
        float _1907 = fma(_1701, cbSceneParam._m0[61u].w, fma(_1697, cbSceneParam._m0[61u].z, fma(_1693, cbSceneParam._m0[61u].y, _1689 * cbSceneParam._m0[61u].x))) / _1905;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1906 >= cbSceneParam._m0[64u].x) && (_1907 >= cbSceneParam._m0[64u].y)) && (_1906 <= cbSceneParam._m0[64u].z)) && (_1907 <= cbSceneParam._m0[64u].w))
        {
            float _2045 = fma(_1701, cbSceneParam._m0[62u].w, fma(_1697, cbSceneParam._m0[62u].z, fma(_1693, cbSceneParam._m0[62u].y, _1689 * cbSceneParam._m0[62u].x))) / _1905;
            float _2049 = isnan(cbSceneParam._m0[41u].w) ? _2045 : (isnan(_2045) ? cbSceneParam._m0[41u].w : max(_2045, cbSceneParam._m0[41u].w));
            float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704))) * cbSceneParam._m0[33u].y;
            float _4163 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
            float _2099 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1906, cbSceneParam._m0[33u].w + _1907), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1906, _1907 - cbSceneParam._m0[33u].z), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].z, _1907 - cbSceneParam._m0[33u].w), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1906 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1907), _2049), 0.0)).x), vec4(0.25)));
            float _2103 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
            float _2104 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
            float _2105 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2105) ? _1853 : (isnan(_1853) ? _2105 : min(_1853, _2105));
            frontier_phi_37_36_ladder_1 = isnan(_2104) ? _1852 : (isnan(_1852) ? _2104 : min(_1852, _2104));
            frontier_phi_37_36_ladder_2 = isnan(_2103) ? _1851 : (isnan(_1851) ? _2103 : min(_1851, _2103));
        }
        else
        {
            frontier_phi_37_36_ladder = _1853;
            frontier_phi_37_36_ladder_1 = _1852;
            frontier_phi_37_36_ladder_2 = _1851;
        }
        _1917 = frontier_phi_37_36_ladder_2;
        _1919 = frontier_phi_37_36_ladder_1;
        _1921 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1917 = _1851;
        _1919 = _1852;
        _1921 = _1853;
    }
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_571 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1936 = _596 + (-1.0);
    float _1941 = (cbLight._m0[_1929].x * _1936) + 1.0;
    float _1942 = (cbLight._m0[_1929].y * _1936) + 1.0;
    float _1943 = (cbLight._m0[_1929].z * _1936) + 1.0;
    float _1944 = (cbLight._m0[_1929].w * _1936) + 1.0;
    uint _1945 = _1928 + 5u;
    float _1951 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1955 = _1928 + 4u;
    float _1964 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1968 = _1928 | 1u;
    float _1979 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_432, _433, _434));
    float _1982 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_432, _433, _434));
    float _4199 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _4210 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1987 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _1989 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _1996 = ((cbLight._m0[_1945].x * _1951) * _1989) + (((cbLight._m0[_1955].x * _1917) * _1964) * _1987);
    float _1997 = ((_1951 * cbLight._m0[_1945].y) * _1989) + (((cbLight._m0[_1955].y * _1919) * _1964) * _1987);
    float _1998 = ((_1951 * cbLight._m0[_1945].z) * _1989) + (((cbLight._m0[_1955].z * _1921) * _1964) * _1987);
    uvec4 _2002 = floatBitsToUint(cbLight._m0[_1928 + 12u]);
    bool _2004 = _2002.x == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2004)
    {
        _2106 = _1996;
        _2108 = _1997;
        _2110 = _1998;
    }
    else
    {
        uint _2114 = _1928 + 6u;
        float _2130 = (dot(vec3(cbLight._m0[_1928 + 2u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2131 = _2130 * _2130;
        float _4221 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2132 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2133 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2106 = (((cbLight._m0[_2114].x * 0.3183098733425140380859375) * _2132) * _2133) + _1996;
        _2108 = (((cbLight._m0[_2114].y * 0.3183098733425140380859375) * _2132) * _2133) + _1997;
        _2110 = (((cbLight._m0[_2114].z * 0.3183098733425140380859375) * _2132) * _2133) + _1998;
    }
    bool _2113 = _2002.y == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2113)
    {
        _2168 = _2106;
        _2170 = _2108;
        _2172 = _2110;
    }
    else
    {
        uint _2330 = _1928 + 7u;
        float _2346 = (dot(vec3(cbLight._m0[_1928 + 3u].xyz), vec3(_432, _433, _434)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4237 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2349 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2168 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2106;
        _2170 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2108;
        _2172 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2110;
    }
    uint _2175 = _1928 + 8u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _435) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_1928].x + _513;
    float _2191 = cbLight._m0[_1928].y + _514;
    float _2192 = cbLight._m0[_1928].z + _515;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1928].xyz));
    float _4253 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _2204 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2205 = dot(vec3(_432, _433, _434), vec3(_2197, _2198, _2199));
    float _4275 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2197, _2198, _2199));
    float _4286 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2189 * _2189;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2228 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2229 = 1.0 - _2189;
    float _2240 = (0.5 / (((_2204 * ((_2203 * _2229) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2229) + _2189) * _2203))) * _2203;
    float _4297 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    uint _2256 = _1928 + 9u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _435) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_1968].x + _513;
    float _2270 = cbLight._m0[_1968].y + _514;
    float _2271 = cbLight._m0[_1968].z + _515;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_1968].xyz));
    float _4308 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2283 = dot(vec3(_432, _433, _434), vec3(_2276, _2277, _2278));
    float _4319 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2276, _2277, _2278));
    float _4330 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2268 * _2268;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2305 = 1.0 - _2268;
    float _2315 = (0.5 / (((_2204 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2305) + _2268) * _2282))) * _2282;
    float _4341 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    float _2327 = (((_2304 * cbLight._m0[_2256].x) * _2317) * _1951) + ((((cbLight._m0[_2175].x * _1917) * _2228) * _2242) * _1964);
    float _2328 = (((_2304 * cbLight._m0[_2256].y) * _2317) * _1951) + ((((cbLight._m0[_2175].y * _1919) * _2228) * _2242) * _1964);
    float _2329 = (((_2304 * cbLight._m0[_2256].z) * _2317) * _1951) + ((((cbLight._m0[_2175].z * _1921) * _2228) * _2242) * _1964);
    float _2385;
    float _2387;
    float _2389;
    if (_2004)
    {
        _2385 = _2327;
        _2387 = _2328;
        _2389 = _2329;
    }
    else
    {
        uint _2391 = _1928 + 2u;
        uint _2395 = _1928 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _435) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _513;
        float _2412 = cbLight._m0[_2391].y + _514;
        float _2413 = cbLight._m0[_2391].z + _515;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2391].xyz));
        float _4352 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2425 = dot(vec3(_432, _433, _434), vec3(_2418, _2419, _2420));
        float _4363 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4374 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2204 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2447) + _2410) * _2424))) * _2424;
        float _4385 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
        _2385 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2327;
        _2387 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2328;
        _2389 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2329;
    }
    float _2491;
    float _2493;
    float _2495;
    if (_2113)
    {
        _2491 = _2385;
        _2493 = _2387;
        _2495 = _2389;
    }
    else
    {
        uint _2502 = _1928 + 3u;
        uint _2506 = _1928 + 11u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _435) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _513;
        float _2523 = cbLight._m0[_2502].y + _514;
        float _2524 = cbLight._m0[_2502].z + _515;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_432, _433, _434), vec3(cbLight._m0[_2502].xyz));
        float _4401 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2536 = dot(vec3(_432, _433, _434), vec3(_2529, _2530, _2531));
        float _4412 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4423 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2558 = 1.0 - _2521;
        float _2568 = (0.5 / (((_2204 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2204 * _2558) + _2521) * _2535))) * _2535;
        float _4434 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2491 = (((_2557 * cbLight._m0[_2506].x) * _2570) * _2571) + _2385;
        _2493 = (((_2557 * cbLight._m0[_2506].y) * _2570) * _2571) + _2387;
        _2495 = (((_2557 * cbLight._m0[_2506].z) * _2570) * _2571) + _2389;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1926.y == 0u)
    {
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _2593)));
        float _2614 = (log2(_1704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2873)
                {
                    frontier_phi_71_pred = _2862;
                    frontier_phi_71_pred_1 = _2861;
                    frontier_phi_71_pred_2 = _2860;
                    frontier_phi_71_pred_3 = _2859;
                    frontier_phi_71_pred_4 = _2858;
                    frontier_phi_71_pred_5 = _2857;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2872;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2863 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _1702;
                        float _3069 = _3028.y - _1703;
                        float _3070 = _3028.z - _1704;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_552, _555, _558), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4460 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _1702;
                        float _3104 = (-0.0) - _1703;
                        float _3105 = (-0.0) - _1704;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3119 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _612;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3132 = _3112 + _3077;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_552, _555, _558), vec3(_3110, _3111, _3112));
                        float _4476 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3144 = dot(vec3(_552, _555, _558), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4487 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3088 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3078) + _3153;
                        float _4498 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4509 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3151 * _3151) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2932 = (_3099 * _3047.x) + _3005;
                        _2933 = (_3099 * _3047.y) + _3006;
                        _2934 = (_3099 * _3047.z) + _3007;
                        _2929 = (_3179 * _3064.x) + _3002;
                        _2930 = (_3179 * _3064.y) + _3003;
                        _2931 = (_3179 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_71_pred = _2934;
                    frontier_phi_71_pred_1 = _2933;
                    frontier_phi_71_pred_2 = _2932;
                    frontier_phi_71_pred_3 = _2931;
                    frontier_phi_71_pred_4 = _2930;
                    frontier_phi_71_pred_5 = _2929;
                }
                _2715 = frontier_phi_71_pred;
                _2713 = frontier_phi_71_pred_1;
                _2711 = frontier_phi_71_pred_2;
                _2709 = frontier_phi_71_pred_3;
                _2707 = frontier_phi_71_pred_4;
                _2705 = frontier_phi_71_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2705;
                    _2858 = _2707;
                    _2859 = _2709;
                    _2860 = _2711;
                    _2861 = _2713;
                    _2862 = _2715;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2721) & _2624) == 0u)
        {
            _2825 = _2704;
            _2827 = _2706;
            _2829 = _2708;
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704)));
            float _2851 = _2850 * _1702;
            float _2852 = _2850 * _1703;
            float _2853 = _2850 * _1704;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2985 = _2704;
                float _2986 = _2706;
                float _2987 = _2708;
                float _2988 = _2710;
                float _2989 = _2712;
                float _2990 = _2714;
                uint _2991 = _2721;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3001)
                    {
                        frontier_phi_82_pred = _2990;
                        frontier_phi_82_pred_1 = _2989;
                        frontier_phi_82_pred_2 = _2988;
                        frontier_phi_82_pred_3 = _2987;
                        frontier_phi_82_pred_4 = _2986;
                        frontier_phi_82_pred_5 = _2985;
                    }
                    else
                    {
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        uint _3212 = _3000;
                        uint _3213;
                        vec4 _3238;
                        float _3239;
                        vec4 _3254;
                        vec3 _3266;
                        vec4 _3282;
                        vec4 _3298;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3223 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3212));
                            _3213 = (_3212 + 4294967295u) & _3212;
                            uint _3225 = _3223 * 40u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3239 = _3238.w;
                            uint _3241 = (_3223 * 40u) + 4u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3256 = (_3223 * 40u) + 8u;
                            _3266 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x));
                            uint _3269 = (_3223 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3223 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3223 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3223 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_1704, _3333.z, fma(_1703, _3333.y, _3333.x * _1702)) + _3333.w;
                            _3346 = !((fma(_1704, _3314.z, fma(_1703, _3314.y, _3314.x * _1702)) + _3314.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3238.x - _1702;
                                float _3374 = _3238.y - _1703;
                                float _3375 = _3238.z - _1704;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3239 * _3239));
                                float _4520 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3391 = sqrt(_3376) * _3254.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_552, _555, _558))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_1704, _3282.z, fma(_1703, _3282.y, _3282.x * _1702)) + _3282.w) / _3345;
                                float _3405 = (fma(_1704, _3298.z, fma(_1703, _3298.y, _3298.x * _1702)) + _3298.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4536 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _612;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2851;
                                float _3435 = _3381 - _2852;
                                float _3436 = _3382 - _2853;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_552, _555, _558), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4547 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3448 = dot(vec3(_552, _555, _558), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4558 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_552, _555, _558), vec3(_3380, _3381, _3382))) + _3457;
                                float _4569 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4580 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3411 * _3254.z;
                                frontier_phi_88_pred_1 = _3411 * _3254.y;
                                frontier_phi_88_pred_2 = _3411 * _3254.x;
                                frontier_phi_88_pred_3 = _3485 * _3266.z;
                                frontier_phi_88_pred_4 = _3485 * _3266.y;
                                frontier_phi_88_pred_5 = _3485 * _3266.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3494 = frontier_phi_88_pred;
                            _3493 = frontier_phi_88_pred_1;
                            _3492 = frontier_phi_88_pred_2;
                            _3491 = frontier_phi_88_pred_3;
                            _3490 = frontier_phi_88_pred_4;
                            _3489 = frontier_phi_88_pred_5;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            _3195 = _3491 + _3208;
                            if (_3213 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3213;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3198;
                        frontier_phi_82_pred_1 = _3197;
                        frontier_phi_82_pred_2 = _3196;
                        frontier_phi_82_pred_3 = _3195;
                        frontier_phi_82_pred_4 = _3194;
                        frontier_phi_82_pred_5 = _3193;
                    }
                    _2836 = frontier_phi_82_pred;
                    _2834 = frontier_phi_82_pred_1;
                    _2832 = frontier_phi_82_pred_2;
                    _2830 = frontier_phi_82_pred_3;
                    _2828 = frontier_phi_82_pred_4;
                    _2826 = frontier_phi_82_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2826;
                        _2986 = _2828;
                        _2987 = _2830;
                        _2988 = _2832;
                        _2989 = _2834;
                        _2990 = _2836;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2832;
                frontier_phi_63_64_ladder_1 = _2836;
                frontier_phi_63_64_ladder_2 = _2834;
                frontier_phi_63_64_ladder_3 = _2830;
                frontier_phi_63_64_ladder_4 = _2828;
                frontier_phi_63_64_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_63_64_ladder = _2710;
                frontier_phi_63_64_ladder_1 = _2714;
                frontier_phi_63_64_ladder_2 = _2712;
                frontier_phi_63_64_ladder_3 = _2708;
                frontier_phi_63_64_ladder_4 = _2706;
                frontier_phi_63_64_ladder_5 = _2704;
            }
            _2825 = frontier_phi_63_64_ladder_5;
            _2827 = frontier_phi_63_64_ladder_4;
            _2829 = frontier_phi_63_64_ladder_3;
            _2831 = frontier_phi_63_64_ladder;
            _2833 = frontier_phi_63_64_ladder_2;
            _2835 = frontier_phi_63_64_ladder_1;
        }
        float _2840 = isnan(1.0) ? _596 : (isnan(_596) ? 1.0 : min(_596, 1.0));
        _2637 = (_2840 * _2831) + _2168;
        _2639 = (_2840 * _2833) + _2170;
        _2641 = (_2840 * _2835) + _2172;
        _2643 = ((_2825 * 0.039999999105930328369140625) * _2840) + _2491;
        _2645 = ((_2827 * 0.039999999105930328369140625) * _2840) + _2493;
        _2647 = ((_2829 * 0.039999999105930328369140625) * _2840) + _2495;
    }
    else
    {
        _2637 = _2168;
        _2639 = _2170;
        _2641 = _2172;
        _2643 = _2491;
        _2645 = _2493;
        _2647 = _2495;
    }
    float _4596 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4607 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4618 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2664 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2637 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _596))) + ((_2643 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2639 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _596))) + ((_2645 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2666 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2641 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _596))) + ((_2647 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    uint _2667 = _571 + 6u;
    float _2675 = _533 / cbSceneParam._m0[86u].x;
    float _2676 = _534 / cbSceneParam._m0[86u].y;
    vec4 _2690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, (log2((isnan(cbSceneParam._m0[77u].w) ? _454 : (isnan(_454) ? cbSceneParam._m0[77u].w : min(_454, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2692 = _2690.x;
    float _2693 = _2690.y;
    float _2694 = _2690.z;
    float _2695 = _2690.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_454 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_454) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _454 : min(cbSceneParam._m0[80u].w, _454));
        float _2730 = _2729 / _454;
        float _2741 = _2730 * _506;
        float _2742 = _507 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2745 = _2730 * _508;
        float _2747 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2742;
        float _2755 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2743 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2888 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2942 = ((abs(_2755 / _2743) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2765 * _2897) - exp2(_2765 * _2898)) * _2886))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2695);
        _2767 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2692;
        _2769 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2693;
        _2771 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2694;
        _2773 = _2953 * _2695;
    }
    else
    {
        _2767 = _2692;
        _2769 = _2693;
        _2771 = _2694;
        _2773 = _2695;
    }
    bool _2980;
    vec4 _2783;
    vec4 _2805;
    float _2807;
    float _2811;
    float _2812;
    float _2813;
    float _2814;
    bool _2824;
    for (;;)
    {
        _2783 = cbMatDynParam._m0[0u];
        float _2785 = roundEven(_2783.y);
        bool _2786 = _2785 == 3.0;
        float _2787 = log2(_2773);
        float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * _2664;
        float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * _2665;
        float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * _2666;
        float _2803 = _522 + (-0.5);
        _2805 = cbMtdParam._m0[1u];
        _2807 = _2805.y * _2803;
        float _2810 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2811 = _2810 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
        _2812 = _2810 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
        _2813 = _2810 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
        _2814 = _2803 * 0.999000012874603271484375;
        _2824 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2824)
        {
            if ((cbInstanceData._m0[_571 + 7u].x + _2814) < 0.5)
            {
                _2980 = true;
                break;
            }
        }
        uint _2921 = _572 + uint(_2783.w);
        if ((cbInstanceData._m0[_2921].w < 1.0) && ((cbInstanceData._m0[_2921].w + _2814) < 0.5))
        {
            _2980 = true;
            break;
        }
        if ((_2807 + 1.0) < _2805.x)
        {
            _2980 = true;
            break;
        }
        _2980 = false;
        break;
    }
    float _3184;
    if (_2980)
    {
        discard_state = true;
        _3184 = 0.0;
    }
    else
    {
        _3184 = cbInstanceData._m0[_2667].w;
    }
    SV_Target.x = _2811;
    SV_Target.y = _2812;
    SV_Target.z = _2813;
    SV_Target.w = _3184;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2667].w;
    discard_exit();
}


