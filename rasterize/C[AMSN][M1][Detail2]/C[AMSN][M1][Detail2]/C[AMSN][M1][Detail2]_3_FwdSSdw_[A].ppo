#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _852;
float _3245;
float _3246;
float _3247;
float _3248;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3257 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))));
    float _270 = _252.z * cbMtdParam._m0[13u].y;
    float _273 = fma(_269, _197 * NORMAL.x, fma(_262, _204 * TANGENT.x, (_190 * _182) * _260));
    float _276 = fma(_269, _197 * NORMAL.y, fma(_262, _204 * TANGENT.y, (_190 * _183) * _260));
    float _279 = fma(_269, _197 * NORMAL.z, fma(_262, _204 * TANGENT.z, (_190 * _184) * _260));
    float _283 = inversesqrt(dot(vec3(_273, _276, _279), vec3(_273, _276, _279)));
    float _284 = _283 * _273;
    float _285 = _283 * _276;
    float _286 = _283 * _279;
    float _3268 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _287 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3290 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3301 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _349 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _359 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _349);
    float _360 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _349);
    float _361 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _349);
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _359 * _365;
    float _367 = _360 * _365;
    float _368 = _361 * _365;
    vec4 _373 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _375 = _373.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _531 = sqrt(((_359 * _359) + (_360 * _360)) + (_361 * _361));
        float _537 = (cbMatDynParam._m0[5u].x * _531) + cbMatDynParam._m0[5u].y;
        float _3312 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
        float _538 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _542 = (cbMatDynParam._m0[5u].z * _531) + cbMatDynParam._m0[5u].w;
        float _3323 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) - _538)) + _538) < ((_375 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _410 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _413 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _426 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3334 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _451 = _448.x * TEXCOORD_5.w;
    float _452 = dot(vec3(_284, _285, _286), vec3(_366, _367, _368));
    float _455 = _452 * 2.0;
    float _459 = (_455 * _284) - _366;
    float _460 = (_455 * _285) - _367;
    float _461 = (_455 * _286) - _368;
    float _465 = abs(dot(vec3(_366, _367, _368), vec3(_284, _285, _286)));
    float _3367 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _467 = sqrt(_287);
    float _480 = exp2((_467 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_467 * 3.0));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _851;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _576 = fma(_520, cbModelParam._m0[26u].z, fma(_516, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512));
        float _580 = fma(_520, cbModelParam._m0[27u].z, fma(_516, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512));
        float _584 = fma(_520, cbModelParam._m0[28u].z, fma(_516, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512));
        float _609 = _512 + _284;
        float _610 = _516 + _285;
        float _611 = _520 + _286;
        float _621 = fma(_611, cbModelParam._m0[26u].z, fma(_610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) - _576;
        float _622 = fma(_611, cbModelParam._m0[27u].z, fma(_610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) - _580;
        float _623 = fma(_611, cbModelParam._m0[28u].z, fma(_610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) - _584;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_576 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_580 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[34u].z) + ((((((_584 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _679 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_645.x + (-0.5));
        float _681 = _679 * (_645.y + (-0.5));
        float _682 = _679 * (_645.z + (-0.5));
        float _689 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_652.x + (-0.5));
        float _691 = _689 * (_652.y + (-0.5));
        float _692 = _689 * (_652.z + (-0.5));
        float _699 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_659.x + (-0.5));
        float _701 = _699 * (_659.y + (-0.5));
        float _702 = _699 * (_659.z + (-0.5));
        float _709 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_666.x + (-0.5));
        float _711 = _709 * (_666.y + (-0.5));
        float _712 = _709 * (_666.z + (-0.5));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = _680 * 0.5;
        float _717 = _690 * 0.5;
        float _718 = _700 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _733 = (dot(vec3(_284, _285, _286), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _743 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3415 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_745 + 1.0))) + _750) * _713;
        float _760 = _681 * 0.5;
        float _761 = _691 * 0.5;
        float _762 = _701 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_284, _285, _286), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3448 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_787 + 1.0))) + _792) * _714;
        float _802 = _682 * 0.5;
        float _803 = _692 * 0.5;
        float _804 = _702 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _818 = (dot(vec3(_284, _285, _286), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _827 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3481 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_829 + 1.0))) + _834) * _715;
        _851 = _682;
        _853 = _681;
        _854 = _680;
        _855 = _692;
        _856 = _691;
        _857 = _690;
        _858 = _702;
        _859 = _701;
        _860 = _700;
        _861 = _715;
        _862 = _714;
        _863 = _713;
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
    }
    else
    {
        _851 = _852;
        _853 = _852;
        _854 = _852;
        _855 = _852;
        _856 = _852;
        _857 = _852;
        _858 = _852;
        _859 = _852;
        _860 = _852;
        _861 = _852;
        _862 = _852;
        _863 = _852;
        _864 = 0.0;
        _865 = 0.0;
        _866 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_520, cbModelParam._m0[30u].z, fma(_516, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _512));
        float _899 = fma(_520, cbModelParam._m0[31u].z, fma(_516, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _512));
        float _903 = fma(_520, cbModelParam._m0[32u].z, fma(_516, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _512));
        float _926 = _512 + _284;
        float _927 = _516 + _285;
        float _928 = _520 + _286;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_284, _285, _286), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3544 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_284, _285, _286), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3577 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_284, _285, _286), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3610 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _852;
        _1165 = _852;
        _1166 = _852;
        _1167 = _852;
        _1168 = _852;
        _1169 = _852;
        _1170 = _852;
        _1171 = _852;
        _1172 = _852;
        _1173 = _852;
        _1174 = _852;
        _1175 = _852;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _865)) + _865;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _459 * 0.5;
    float _1233 = _460 * 0.5;
    float _1234 = _461 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_851, _855, _858, _861));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_853, _856, _859, _862));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _857, _860, _863));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _287);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1382;
    float _1384;
    float _1386;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1349 = fma(_520, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512)) + cbModelParam._m0[13u].w;
        float _1353 = fma(_520, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512)) + cbModelParam._m0[14u].w;
        float _1357 = fma(_520, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512)) + cbModelParam._m0[15u].w;
        float _1360 = fma(_461, cbModelParam._m0[13u].z, fma(_460, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _459));
        float _1363 = fma(_461, cbModelParam._m0[14u].z, fma(_460, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _459));
        float _1366 = fma(_461, cbModelParam._m0[15u].z, fma(_460, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _459));
        float _1394;
        if (_1360 > 0.0)
        {
            _1394 = abs((1.0 - _1349) / _1360);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1349 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1394 = frontier_phi_17_15_ladder;
        }
        float _1621;
        if (_1363 > 0.0)
        {
            _1621 = abs((1.0 - _1353) / _1363);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1353 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1621 = frontier_phi_26_22_ladder;
        }
        float _1867;
        if (_1366 > 0.0)
        {
            _1867 = abs((1.0 - _1357) / _1366);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1357 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1867 = frontier_phi_38_33_ladder;
        }
        float _1869 = isnan(_1621) ? _1394 : (isnan(_1394) ? _1621 : min(_1394, _1621));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1360) + _1349;
        float _1875 = (_1870 * _1363) + _1353;
        float _1876 = (_1870 * _1366) + _1357;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_16_38_ladder = _2000.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2000.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2000.x * cbModelParam._m0[1u].y;
        }
        _1382 = frontier_phi_16_38_ladder_2;
        _1384 = frontier_phi_16_38_ladder_1;
        _1386 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_459, _460, _461), _1301);
        _1382 = _1370.x * cbModelParam._m0[1u].y;
        _1384 = _1370.y * cbModelParam._m0[1u].y;
        _1386 = _1370.z * cbModelParam._m0[1u].y;
    }
    float _1390 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _287);
    float _1391 = isnan(_1390) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1390 : min(cbModelParam._m0[25u].w, _1390));
    float _1484;
    float _1486;
    float _1488;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1448 = fma(_520, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512)) + cbModelParam._m0[21u].w;
        float _1452 = fma(_520, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512)) + cbModelParam._m0[22u].w;
        float _1456 = fma(_520, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512)) + cbModelParam._m0[23u].w;
        float _1459 = fma(_461, cbModelParam._m0[21u].z, fma(_460, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _459));
        float _1462 = fma(_461, cbModelParam._m0[22u].z, fma(_460, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _459));
        float _1465 = fma(_461, cbModelParam._m0[23u].z, fma(_460, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _459));
        float _1626;
        if (_1459 > 0.0)
        {
            _1626 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1626 = frontier_phi_28_24_ladder;
        }
        float _1894;
        if (_1462 > 0.0)
        {
            _1894 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1894 = frontier_phi_40_35_ladder;
        }
        float _2099;
        if (_1465 > 0.0)
        {
            _2099 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2099 = frontier_phi_49_46_ladder;
        }
        float _2101 = isnan(_1894) ? _1626 : (isnan(_1626) ? _1894 : min(_1626, _1894));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1459) + _1448;
        float _2107 = (_2102 * _1462) + _1452;
        float _2108 = (_2102 * _1465) + _1456;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2109;
        float _2112 = _2109 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2108 > _2112) || ((_2108 < _2110) || ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 < _2110) || (_2106 > _2112))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2108, cbModelParam._m0[17u].z, fma(_2107, cbModelParam._m0[17u].y, _2106 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2108, cbModelParam._m0[18u].z, fma(_2107, cbModelParam._m0[18u].y, _2106 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2108, cbModelParam._m0[19u].z, fma(_2107, cbModelParam._m0[19u].y, _2106 * cbModelParam._m0[19u].x))), _1391);
            frontier_phi_25_49_ladder = _2307.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2307.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2307.x * cbModelParam._m0[1u].z;
        }
        _1484 = frontier_phi_25_49_ladder_2;
        _1486 = frontier_phi_25_49_ladder_1;
        _1488 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_459, _460, _461), _1391);
        _1484 = _1468.x * cbModelParam._m0[1u].z;
        _1486 = _1468.y * cbModelParam._m0[1u].z;
        _1488 = _1468.z * cbModelParam._m0[1u].z;
    }
    float _1500 = ((((1.0 - _480) * ((_467 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_480 * _467)) * _451;
    float _1501 = _1500 * ((cbModelParam._m0[1u].w * (_1484 - _1382)) + _1382);
    float _1502 = _1500 * ((cbModelParam._m0[1u].w * (_1486 - _1384)) + _1384);
    float _1503 = _1500 * ((cbModelParam._m0[1u].w * (_1488 - _1386)) + _1386);
    float _1506 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1509 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1512 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, _1501 * cbSceneParam._m0[91u].x));
    vec4 _1520 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_387, _388));
    float _1522 = _1520.w;
    float _1534 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1522);
    float _1535 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1522);
    float _1536 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1522);
    uvec4 _1540 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1542 = _1540.x * 14u;
    uint _1543 = _1542 + 13u;
    float _1550 = _451 + (-1.0);
    float _1555 = (cbLight._m0[_1543].x * _1550) + 1.0;
    float _1556 = (cbLight._m0[_1543].y * _1550) + 1.0;
    float _1557 = (cbLight._m0[_1543].z * _1550) + 1.0;
    float _1558 = (cbLight._m0[_1543].w * _1550) + 1.0;
    uint _1559 = _1542 + 5u;
    float _1565 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
    uint _1569 = _1542 + 4u;
    float _1579 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1583 = _1542 | 1u;
    float _1594 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_284, _285, _286));
    float _1597 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_284, _285, _286));
    float _3746 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _3757 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1602 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1604 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1611 = ((cbLight._m0[_1559].x * _1565) * _1604) + (((cbLight._m0[_1569].x * _1534) * _1579) * _1602);
    float _1612 = ((_1565 * cbLight._m0[_1559].y) * _1604) + (((cbLight._m0[_1569].y * _1535) * _1579) * _1602);
    float _1613 = ((_1565 * cbLight._m0[_1559].z) * _1604) + (((cbLight._m0[_1569].z * _1536) * _1579) * _1602);
    uvec4 _1618 = floatBitsToUint(cbLight._m0[_1542 + 12u]);
    bool _1620 = _1618.x == 0u;
    float _1631;
    float _1633;
    float _1635;
    if (_1620)
    {
        _1631 = _1611;
        _1633 = _1612;
        _1635 = _1613;
    }
    else
    {
        uint _1639 = _1542 + 6u;
        float _1655 = (dot(vec3(cbLight._m0[_1542 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1656 = _1655 * _1655;
        float _3768 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1658 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1631 = (((cbLight._m0[_1639].x * 0.3183098733425140380859375) * _1657) * _1658) + _1611;
        _1633 = (((cbLight._m0[_1639].y * 0.3183098733425140380859375) * _1657) * _1658) + _1612;
        _1635 = (((cbLight._m0[_1639].z * 0.3183098733425140380859375) * _1657) * _1658) + _1613;
    }
    bool _1638 = _1618.y == 0u;
    float _1676;
    float _1678;
    float _1680;
    if (_1638)
    {
        _1676 = _1631;
        _1678 = _1633;
        _1680 = _1635;
    }
    else
    {
        uint _1838 = _1542 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1542 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3784 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1857 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _1676 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1631;
        _1678 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1633;
        _1680 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1635;
    }
    uint _1683 = _1542 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _287) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1542].x + _366;
    float _1699 = cbLight._m0[_1542].y + _367;
    float _1700 = cbLight._m0[_1542].z + _368;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1542].xyz));
    float _3800 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _1712 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1713 = dot(vec3(_284, _285, _286), vec3(_1705, _1706, _1707));
    float _3822 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1705, _1706, _1707));
    float _3833 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1737 = 1.0 - _1697;
    float _1748 = (0.5 / (((_1712 * ((_1711 * _1737) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1737) + _1697) * _1711))) * _1711;
    float _3844 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1764 = _1542 + 9u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _287) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1583].x + _366;
    float _1778 = cbLight._m0[_1583].y + _367;
    float _1779 = cbLight._m0[_1583].z + _368;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1583].xyz));
    float _3855 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1791 = dot(vec3(_284, _285, _286), vec3(_1784, _1785, _1786));
    float _3866 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1784, _1785, _1786));
    float _3877 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1776 * _1776;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1812 = (exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1813 = 1.0 - _1776;
    float _1823 = (0.5 / (((_1712 * ((_1790 * _1813) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1813) + _1776) * _1790))) * _1790;
    float _3888 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    float _1835 = (((_1812 * cbLight._m0[_1764].x) * _1825) * _1565) + ((((cbLight._m0[_1683].x * _1534) * _1736) * _1750) * _1579);
    float _1836 = (((_1812 * cbLight._m0[_1764].y) * _1825) * _1565) + ((((cbLight._m0[_1683].y * _1535) * _1736) * _1750) * _1579);
    float _1837 = (((_1812 * cbLight._m0[_1764].z) * _1825) * _1565) + ((((cbLight._m0[_1683].z * _1536) * _1736) * _1750) * _1579);
    float _1899;
    float _1901;
    float _1903;
    if (_1620)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1542 + 2u;
        uint _1909 = _1542 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _287) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _366;
        float _1926 = cbLight._m0[_1905].y + _367;
        float _1927 = cbLight._m0[_1905].z + _368;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1905].xyz));
        float _3899 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1939 = dot(vec3(_284, _285, _286), vec3(_1932, _1933, _1934));
        float _3910 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3921 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1961 = 1.0 - _1924;
        float _1971 = (0.5 / (((_1712 * ((_1938 * _1961) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1961) + _1924) * _1938))) * _1938;
        float _3932 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1973 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1974 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1899 = (((_1960 * cbLight._m0[_1909].x) * _1973) * _1974) + _1835;
        _1901 = (((_1960 * cbLight._m0[_1909].y) * _1973) * _1974) + _1836;
        _1903 = (((_1960 * cbLight._m0[_1909].z) * _1973) * _1974) + _1837;
    }
    float _2009;
    float _2011;
    float _2013;
    if (_1638)
    {
        _2009 = _1899;
        _2011 = _1901;
        _2013 = _1903;
    }
    else
    {
        uint _2020 = _1542 + 3u;
        uint _2024 = _1542 + 11u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _287) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _366;
        float _2041 = cbLight._m0[_2020].y + _367;
        float _2042 = cbLight._m0[_2020].z + _368;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2020].xyz));
        float _3948 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2054 = dot(vec3(_284, _285, _286), vec3(_2047, _2048, _2049));
        float _3959 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _3970 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2076 = 1.0 - _2039;
        float _2086 = (0.5 / (((_1712 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _2076) + _2039) * _2053))) * _2053;
        float _3981 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
        _2009 = (((_2075 * cbLight._m0[_2024].x) * _2088) * _2089) + _1899;
        _2011 = (((_2075 * cbLight._m0[_2024].y) * _2088) * _2089) + _1901;
        _2013 = (((_2075 * cbLight._m0[_2024].z) * _2088) * _2089) + _1903;
    }
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    if (_1540.y == 0u)
    {
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2164;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2164;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2164;
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.x;
        uint _2191 = uint((float(_2179.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2180))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2180)));
        float _2201 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2202 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        uint _2205 = uint(isnan(14.0) ? _2202 : (isnan(_2202) ? 14.0 : min(_2202, 14.0)));
        uvec4 _2210 = texelFetch(g_lightClusterGridBuffer, int(((_2205 << 2u) + (_2191 << 6u)) >> 2u));
        uint _2211 = _2210.x;
        uint _2212 = _2179.z;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        if (((((1u << ((_2212 >> 4u) & 15u)) + 4294967295u) & _2211) == 0u) || ((_2212 & 240u) == 0u))
        {
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
        }
        else
        {
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            uint _2471 = 0u;
            uint _2480;
            bool _2481;
            for (;;)
            {
                _2480 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                _2481 = _2480 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2481)
                {
                    frontier_phi_66_pred = _2465;
                    frontier_phi_66_pred_1 = _2470;
                    frontier_phi_66_pred_2 = _2469;
                    frontier_phi_66_pred_3 = _2468;
                    frontier_phi_66_pred_4 = _2467;
                    frontier_phi_66_pred_5 = _2466;
                }
                else
                {
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    uint _2616;
                    _2610 = _2465;
                    _2611 = _2466;
                    _2612 = _2467;
                    _2613 = _2468;
                    _2614 = _2469;
                    _2615 = _2470;
                    _2616 = _2480;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    for (;;)
                    {
                        uint _2620 = uint(findLSB(_2616)) + (_2471 << 5u);
                        uint _2617 = (_2616 + 4294967295u) & _2616;
                        uint _2622 = _2620 * 48u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2642 = (_2620 * 48u) + 4u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2661 = (_2620 * 48u) + 8u;
                        vec3 _2672 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x));
                        float _2676 = _2636.x - _2165;
                        float _2677 = _2636.y - _2166;
                        float _2678 = _2636.z - _2167;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_407, _410, _413), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2636.w);
                        float _4007 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2693 = sqrt(_2679) * _2655.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2686) + _2697;
                        float _2703 = _2693 * _2693;
                        float _2707 = ((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2692) / ((_2703 * 0.699999988079071044921875) + 1.0);
                        float _2711 = (-0.0) - _2165;
                        float _2712 = (-0.0) - _2166;
                        float _2713 = (-0.0) - _2167;
                        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2728 = exp2(log2(1.0 / ((_2703 * 3.5) + 5.0)) * 0.25);
                        float _2729 = 1.0 - _467;
                        float _2736 = sqrt(1.0 - ((1.0 - (_2729 * _2729)) * (1.0 - (_2728 * _2728))));
                        float _2737 = _2736 * _2736;
                        float _2738 = _2737 * _2737;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2749 = dot(vec3(_407, _410, _413), vec3(_2718, _2719, _2720));
                        float _4023 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2753 = dot(vec3(_407, _410, _413), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741));
                        float _4034 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2760 = ((_2756 * _2756) * (_2738 + (-1.0))) + 1.0;
                        float _2761 = _2696 * _2737;
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2686) + _2762;
                        float _4045 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2767 = 1.0 - _2737;
                        float _2777 = (0.5 / (((_2766 * ((_2752 * _2767) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2766 * _2767) + _2737) * _2752))) * _2766;
                        float _4056 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2788 = (((_2738 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_2760 * _2760) * ((_2703 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2540 = (_2707 * _2655.x) + _2613;
                        _2541 = (_2707 * _2655.y) + _2614;
                        _2542 = (_2707 * _2655.z) + _2615;
                        _2537 = (_2788 * _2672.x) + _2610;
                        _2538 = (_2788 * _2672.y) + _2611;
                        _2539 = (_2788 * _2672.z) + _2612;
                        if (_2617 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2610 = _2537;
                            _2611 = _2538;
                            _2612 = _2539;
                            _2613 = _2540;
                            _2614 = _2541;
                            _2615 = _2542;
                            _2616 = _2617;
                        }
                    }
                    frontier_phi_66_pred = _2537;
                    frontier_phi_66_pred_1 = _2542;
                    frontier_phi_66_pred_2 = _2541;
                    frontier_phi_66_pred_3 = _2540;
                    frontier_phi_66_pred_4 = _2539;
                    frontier_phi_66_pred_5 = _2538;
                }
                _2313 = frontier_phi_66_pred;
                _2323 = frontier_phi_66_pred_1;
                _2321 = frontier_phi_66_pred_2;
                _2319 = frontier_phi_66_pred_3;
                _2317 = frontier_phi_66_pred_4;
                _2315 = frontier_phi_66_pred_5;
                uint _2472 = _2471 + 1u;
                if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2465 = _2313;
                    _2466 = _2315;
                    _2467 = _2317;
                    _2468 = _2319;
                    _2469 = _2321;
                    _2470 = _2323;
                    _2471 = _2472;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
        }
        uvec4 _2326 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2327 = _2326.z;
        uint _2329 = (_2327 >> 8u) & 15u;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((4294967295u << _2329) & _2211) == 0u)
        {
            _2433 = _2312;
            _2435 = _2314;
            _2437 = _2316;
            _2439 = _2318;
            _2441 = _2320;
            _2443 = _2322;
        }
        else
        {
            float _2458 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
            float _2459 = _2458 * _2165;
            float _2460 = _2458 * _2166;
            float _2461 = _2458 * _2167;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2329 < ((_2327 >> 12u) & 15u))
            {
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2593 = _2312;
                float _2594 = _2314;
                float _2595 = _2316;
                float _2596 = _2318;
                float _2597 = _2320;
                float _2598 = _2322;
                uint _2599 = _2329;
                uint _2608;
                bool _2609;
                for (;;)
                {
                    _2608 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                    _2609 = _2608 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2609)
                    {
                        frontier_phi_77_pred = _2598;
                        frontier_phi_77_pred_1 = _2597;
                        frontier_phi_77_pred_2 = _2596;
                        frontier_phi_77_pred_3 = _2595;
                        frontier_phi_77_pred_4 = _2594;
                        frontier_phi_77_pred_5 = _2593;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _2815 = _2593;
                        float _2816 = _2594;
                        float _2817 = _2595;
                        float _2818 = _2596;
                        float _2819 = _2597;
                        float _2820 = _2598;
                        uint _2821 = _2608;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2599 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_2167, _2942.z, fma(_2166, _2942.y, _2942.x * _2165)) + _2942.w;
                            _2955 = !((fma(_2167, _2923.z, fma(_2166, _2923.y, _2923.x * _2165)) + _2923.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _2165;
                                float _2983 = _2847.y - _2166;
                                float _2984 = _2847.z - _2167;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _4067 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3006 = ((1.0 - _3003) * dot(vec3(_2989, _2990, _2991), vec3(_407, _410, _413))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_2167, _2891.z, fma(_2166, _2891.y, _2891.x * _2165)) + _2891.w) / _2954;
                                float _3014 = (fma(_2167, _2907.z, fma(_2166, _2907.y, _2907.x * _2165)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4083 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3032 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                                float _3033 = 1.0 - _467;
                                float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                                float _3041 = _3040 * _3040;
                                float _3042 = _3041 * _3041;
                                float _3043 = _2989 - _2459;
                                float _3044 = _2990 - _2460;
                                float _3045 = _2991 - _2461;
                                float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                                float _3053 = dot(vec3(_407, _410, _413), vec3((-0.0) - _2459, (-0.0) - _2460, (-0.0) - _2461));
                                float _4094 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3057 = dot(vec3(_407, _410, _413), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                                float _4105 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3060 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                                float _3065 = _3002 * _3041;
                                float _3066 = _3065 * _3065;
                                float _3072 = ((1.0 - _3066) * dot(vec3(_407, _410, _413), vec3(_2989, _2990, _2991))) + _3066;
                                float _4116 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3074 = 1.0 - _3041;
                                float _3084 = (0.5 / (((_3073 * ((_3056 * _3074) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3041) * _3056))) * _3073;
                                float _4127 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3094 = (_3019 * _2996) * (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_3064 * _3064) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3020 * _2863.y;
                                frontier_phi_83_pred_1 = _3020 * _2863.x;
                                frontier_phi_83_pred_2 = _3094 * _2875.z;
                                frontier_phi_83_pred_3 = _3094 * _2875.y;
                                frontier_phi_83_pred_4 = _3094 * _2875.x;
                                frontier_phi_83_pred_5 = _3020 * _2863.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3102 = frontier_phi_83_pred;
                            _3101 = frontier_phi_83_pred_1;
                            _3100 = frontier_phi_83_pred_2;
                            _3099 = frontier_phi_83_pred_3;
                            _3098 = frontier_phi_83_pred_4;
                            _3103 = frontier_phi_83_pred_5;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2807;
                        frontier_phi_77_pred_1 = _2806;
                        frontier_phi_77_pred_2 = _2805;
                        frontier_phi_77_pred_3 = _2804;
                        frontier_phi_77_pred_4 = _2803;
                        frontier_phi_77_pred_5 = _2802;
                    }
                    _2444 = frontier_phi_77_pred;
                    _2442 = frontier_phi_77_pred_1;
                    _2440 = frontier_phi_77_pred_2;
                    _2438 = frontier_phi_77_pred_3;
                    _2436 = frontier_phi_77_pred_4;
                    _2434 = frontier_phi_77_pred_5;
                    uint _2600 = _2599 + 1u;
                    if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2593 = _2434;
                        _2594 = _2436;
                        _2595 = _2438;
                        _2596 = _2440;
                        _2597 = _2442;
                        _2598 = _2444;
                        _2599 = _2600;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2438;
                frontier_phi_58_59_ladder_1 = _2444;
                frontier_phi_58_59_ladder_2 = _2442;
                frontier_phi_58_59_ladder_3 = _2440;
                frontier_phi_58_59_ladder_4 = _2436;
                frontier_phi_58_59_ladder_5 = _2434;
            }
            else
            {
                frontier_phi_58_59_ladder = _2316;
                frontier_phi_58_59_ladder_1 = _2322;
                frontier_phi_58_59_ladder_2 = _2320;
                frontier_phi_58_59_ladder_3 = _2318;
                frontier_phi_58_59_ladder_4 = _2314;
                frontier_phi_58_59_ladder_5 = _2312;
            }
            _2433 = frontier_phi_58_59_ladder_5;
            _2435 = frontier_phi_58_59_ladder_4;
            _2437 = frontier_phi_58_59_ladder;
            _2439 = frontier_phi_58_59_ladder_3;
            _2441 = frontier_phi_58_59_ladder_2;
            _2443 = frontier_phi_58_59_ladder_1;
        }
        float _2448 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2224 = (_2448 * _2439) + _1676;
        _2226 = (_2448 * _2441) + _1678;
        _2228 = (_2448 * _2443) + _1680;
        _2230 = ((_2433 * 0.039999999105930328369140625) * _2448) + _2009;
        _2232 = ((_2435 * 0.039999999105930328369140625) * _2448) + _2011;
        _2234 = ((_2437 * 0.039999999105930328369140625) * _2448) + _2013;
    }
    else
    {
        _2224 = _1676;
        _2226 = _1678;
        _2228 = _1680;
        _2230 = _2009;
        _2232 = _2011;
        _2234 = _2013;
    }
    float _4143 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4154 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4165 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2251 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2224 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _451))) + ((_2230 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _2252 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2226 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _451))) + ((_2232 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    float _2253 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2228 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _451))) + ((_2234 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x);
    uint _2254 = _426 + 6u;
    float _2262 = _387 / cbSceneParam._m0[86u].x;
    float _2263 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2277 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2262, _2263, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2279 = _2277.x;
    float _2280 = _2277.y;
    float _2281 = _2277.z;
    float _2282 = _2277.w;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2337 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2338 = _2337 / _306;
        float _2349 = _2338 * _359;
        float _2350 = _360 * _2338;
        float _2351 = (-0.0) - _2350;
        float _2353 = _2338 * _361;
        float _2355 = (cbSceneParam._m0[77u].w * _2351) / _2337;
        float _2356 = _2355 + cbSceneParam._m0[79u].w;
        float _2357 = cbSceneParam._m0[79u].w - _2350;
        float _2363 = sqrt(((_2349 * _2349) + (_2350 * _2350)) + (_2353 * _2353));
        float _2366 = (1.0 - (cbSceneParam._m0[77u].w / _2337)) * _2363;
        float _2371 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2373 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2550;
        if (abs((_2351 - _2355) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2550 = ((((_2356 > 0.0) ? exp2(_2371 * _2356) : (2.0 - exp2(_2373 * _2356))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2366;
        }
        else
        {
            float _2494 = 1.0 / cbSceneParam._m0[80u].x;
            float _2495 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : max(_2356, _2357));
            float _2496 = isnan(_2357) ? _2356 : (isnan(_2356) ? _2357 : min(_2356, _2357));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            float _2506 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : min(_2496, 0.0));
            _2550 = ((abs(_2363 / _2351) * cbSceneParam._m0[80u].y) * ((((_2505 - _2506) * 2.0) - ((exp2(_2371 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0)))) - exp2(_2371 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))))) * _2494)) - ((exp2(_2373 * _2505) - exp2(_2373 * _2506)) * _2494))) + (_2366 * cbSceneParam._m0[80u].z);
        }
        vec4 _2552 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2262, _2263, 1.0), 0.0);
        float _2561 = exp2((_2550 * (-1.44269502162933349609375)) * (1.0 - _2552.w));
        float _2562 = log2(_2561);
        float _2578 = log2(_2282);
        _2375 = (exp2(_2578 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].x)) * _2552.x) / cbSceneParam._m0[78u].x)) + _2279;
        _2377 = (exp2(_2578 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].y)) * _2552.y) / cbSceneParam._m0[78u].y)) + _2280;
        _2379 = (exp2(_2578 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2562 * cbSceneParam._m0[78u].z)) * _2552.z) / cbSceneParam._m0[78u].z)) + _2281;
        _2381 = _2561 * _2282;
    }
    else
    {
        _2375 = _2279;
        _2377 = _2280;
        _2379 = _2281;
        _2381 = _2282;
    }
    bool _2588;
    vec4 _2391;
    vec4 _2413;
    float _2415;
    float _2419;
    float _2420;
    float _2421;
    float _2422;
    bool _2432;
    for (;;)
    {
        _2391 = cbMatDynParam._m0[0u];
        float _2393 = roundEven(_2391.y);
        bool _2394 = _2393 == 3.0;
        float _2395 = log2(_2381);
        float _2402 = exp2(_2395 * cbSceneParam._m0[78u].x) * _2251;
        float _2403 = exp2(_2395 * cbSceneParam._m0[78u].y) * _2252;
        float _2404 = exp2(_2395 * cbSceneParam._m0[78u].z) * _2253;
        float _2411 = _375 + (-0.5);
        _2413 = cbMtdParam._m0[1u];
        _2415 = _2413.y * _2411;
        float _2418 = (_2393 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2419 = _2418 * (_2394 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2375)));
        _2420 = _2418 * (_2394 ? _2403 : (_2403 + (cbSceneParam._m0[72u].w * _2377)));
        _2421 = _2418 * (_2394 ? _2404 : (_2404 + (cbSceneParam._m0[72u].w * _2379)));
        _2422 = _2411 * 0.999000012874603271484375;
        _2432 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2432)
        {
            if ((cbInstanceData._m0[_426 + 7u].x + _2422) < 0.5)
            {
                _2588 = true;
                break;
            }
        }
        uint _2529 = _427 + uint(_2391.w);
        if ((cbInstanceData._m0[_2529].w < 1.0) && ((cbInstanceData._m0[_2529].w + _2422) < 0.5))
        {
            _2588 = true;
            break;
        }
        if ((_2415 + 1.0) < _2413.x)
        {
            _2588 = true;
            break;
        }
        _2588 = false;
        break;
    }
    float _2793;
    if (_2588)
    {
        discard_state = true;
        _2793 = 0.0;
    }
    else
    {
        _2793 = cbInstanceData._m0[_2254].w;
    }
    SV_Target.x = _2419;
    SV_Target.y = _2420;
    SV_Target.z = _2421;
    SV_Target.w = _2793;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2254].w;
    discard_exit();
}


