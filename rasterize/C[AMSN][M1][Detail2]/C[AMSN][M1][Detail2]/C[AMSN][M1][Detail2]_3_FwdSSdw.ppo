#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _807;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _223 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _229 = _223.x * cbMtdParam._m0[9u].x;
    float _230 = _223.y * cbMtdParam._m0[9u].y;
    float _231 = _223.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3146 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))));
    float _266 = _248.z * cbMtdParam._m0[13u].y;
    float _269 = fma(_265, _193 * NORMAL.x, fma(_258, _200 * TANGENT.x, (_186 * _178) * _256));
    float _272 = fma(_265, _193 * NORMAL.y, fma(_258, _200 * TANGENT.y, (_186 * _179) * _256));
    float _275 = fma(_265, _193 * NORMAL.z, fma(_258, _200 * TANGENT.z, (_186 * _180) * _256));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3157 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _283 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _3168 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3179 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3190 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _355 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _345);
    float _356 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _345);
    float _357 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _345);
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _355 * _361;
    float _363 = _356 * _361;
    float _364 = _357 * _361;
    float _370 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _371 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _394 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _397 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _412 = (_410 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _418 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_412].x;
    float _419 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * cbInstanceData._m0[_412].y;
    float _420 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0)))) * cbInstanceData._m0[_412].z;
    float _3201 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    vec4 _432 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _370, cbSceneParam._m0[86u].y * _371));
    float _435 = _432.x * TEXCOORD_5.w;
    float _436 = dot(vec3(_280, _281, _282), vec3(_362, _363, _364));
    float _439 = _436 * 2.0;
    float _443 = (_439 * _280) - _362;
    float _444 = (_439 * _281) - _363;
    float _445 = (_439 * _282) - _364;
    float _449 = abs(dot(vec3(_362, _363, _364), vec3(_280, _281, _282)));
    float _3234 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _451 = sqrt(_283);
    float _464 = exp2((_451 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_451 * 3.0));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _806;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _531 = fma(_504, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496));
        float _535 = fma(_504, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496));
        float _539 = fma(_504, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496));
        float _564 = _496 + _280;
        float _565 = _500 + _281;
        float _566 = _504 + _282;
        float _576 = fma(_566, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _564)) - _531;
        float _577 = fma(_566, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _564)) - _535;
        float _578 = fma(_566, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _564)) - _539;
        float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
        float _595 = ((_582 * _576) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_531 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _596 = ((_582 * _577) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_535 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_582 * _578) / cbModelParam._m0[34u].z) + ((((((_539 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        vec4 _621 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_595, _596, _597), 0.0);
        float _634 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_600.x + (-0.5));
        float _636 = _634 * (_600.y + (-0.5));
        float _637 = _634 * (_600.z + (-0.5));
        float _644 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_607.x + (-0.5));
        float _646 = _644 * (_607.y + (-0.5));
        float _647 = _644 * (_607.z + (-0.5));
        float _654 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _654 * (_614.x + (-0.5));
        float _656 = _654 * (_614.y + (-0.5));
        float _657 = _654 * (_614.z + (-0.5));
        float _664 = exp2((_621.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_621.x + (-0.5));
        float _666 = _664 * (_621.y + (-0.5));
        float _667 = _664 * (_621.z + (-0.5));
        float _668 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = _635 * 0.5;
        float _672 = _645 * 0.5;
        float _673 = _655 * 0.5;
        float _674 = dot(vec3(_671, _672, _673), vec3(_671, _672, _673));
        float _679 = (_674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_674);
        float _688 = (dot(vec3(_280, _281, _282), vec3(_679 * _671, _679 * _672, _679 * _673)) + 1.0) * 0.5;
        float _3260 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _698 = sqrt(((_672 * _672) + (_671 * _671)) + (_673 * _673)) / (_668 + 9.9999997473787516355514526367188e-06);
        float _3271 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3282 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_700 + 1.0))) + _705) * _668;
        float _715 = _636 * 0.5;
        float _716 = _646 * 0.5;
        float _717 = _656 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_280, _281, _282), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3315 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_742 + 1.0))) + _747) * _669;
        float _757 = _637 * 0.5;
        float _758 = _647 * 0.5;
        float _759 = _657 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _773 = (dot(vec3(_280, _281, _282), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _782 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3348 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_784 + 1.0))) + _789) * _670;
        _806 = _637;
        _808 = _636;
        _809 = _635;
        _810 = _647;
        _811 = _646;
        _812 = _645;
        _813 = _657;
        _814 = _656;
        _815 = _655;
        _816 = _670;
        _817 = _669;
        _818 = _668;
        _819 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
    }
    else
    {
        _806 = _807;
        _808 = _807;
        _809 = _807;
        _810 = _807;
        _811 = _807;
        _812 = _807;
        _813 = _807;
        _814 = _807;
        _815 = _807;
        _816 = _807;
        _817 = _807;
        _818 = _807;
        _819 = 0.0;
        _820 = 0.0;
        _821 = 0.0;
    }
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_504, cbModelParam._m0[30u].z, fma(_500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _496));
        float _851 = fma(_504, cbModelParam._m0[31u].z, fma(_500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _496));
        float _855 = fma(_504, cbModelParam._m0[32u].z, fma(_500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _496));
        float _878 = _496 + _280;
        float _879 = _500 + _281;
        float _880 = _504 + _282;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_913.x + (-0.5));
        float _948 = _946 * (_913.y + (-0.5));
        float _949 = _946 * (_913.z + (-0.5));
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_920.x + (-0.5));
        float _958 = _956 * (_920.y + (-0.5));
        float _959 = _956 * (_920.z + (-0.5));
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_927.x + (-0.5));
        float _968 = _966 * (_927.y + (-0.5));
        float _969 = _966 * (_927.z + (-0.5));
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_280, _281, _282), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3411 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_1010 + 1.0))) + _1015) * _980;
        float _1025 = _948 * 0.5;
        float _1026 = _958 * 0.5;
        float _1027 = _968 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_280, _281, _282), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3444 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1052 + 1.0))) + _1057) * _981;
        float _1067 = _949 * 0.5;
        float _1068 = _959 * 0.5;
        float _1069 = _969 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_280, _281, _282), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3477 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1094 + 1.0))) + _1099) * _982;
        _1116 = _949;
        _1117 = _948;
        _1118 = _947;
        _1119 = _959;
        _1120 = _958;
        _1121 = _957;
        _1122 = _969;
        _1123 = _968;
        _1124 = _967;
        _1125 = _982;
        _1126 = _981;
        _1127 = _980;
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _807;
        _1117 = _807;
        _1118 = _807;
        _1119 = _807;
        _1120 = _807;
        _1121 = _807;
        _1122 = _807;
        _1123 = _807;
        _1124 = _807;
        _1125 = _807;
        _1126 = _807;
        _1127 = _807;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _819)) + _819;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1140));
    float _1184 = _443 * 0.5;
    float _1185 = _444 * 0.5;
    float _1186 = _445 * 0.5;
    float _1187 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1190 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1193 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1227;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1200 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_806, _810, _813, _816));
        float _1204 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_808, _811, _814, _817));
        float _1208 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_809, _812, _815, _818));
        float _1215 = dot(vec4(cbModelParam._m0[39u]), vec4(_1184, _1185, _1186, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1215) ? 0.0 : (isnan(0.0) ? _1215 : max(0.0, _1215))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1238;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1229 = dot(vec4(cbModelParam._m0[40u]), vec4(_1184, _1185, _1186, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1242 = (_1238 * cbModelParam._m0[1u].x) + (_1227 * (1.0 - cbModelParam._m0[1u].x));
    float _1252 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _283);
    float _1253 = isnan(_1252) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1252 : min(cbModelParam._m0[25u].z, _1252));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1301 = fma(_504, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496)) + cbModelParam._m0[13u].w;
        float _1305 = fma(_504, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496)) + cbModelParam._m0[14u].w;
        float _1309 = fma(_504, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496)) + cbModelParam._m0[15u].w;
        float _1312 = fma(_445, cbModelParam._m0[13u].z, fma(_444, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443));
        float _1315 = fma(_445, cbModelParam._m0[14u].z, fma(_444, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443));
        float _1318 = fma(_445, cbModelParam._m0[15u].z, fma(_444, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443));
        float _1346;
        if (_1312 > 0.0)
        {
            _1346 = abs((1.0 - _1301) / _1312);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1301 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1346 = frontier_phi_14_12_ladder;
        }
        float _1573;
        if (_1315 > 0.0)
        {
            _1573 = abs((1.0 - _1305) / _1315);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1305 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1573 = frontier_phi_23_19_ladder;
        }
        float _1819;
        if (_1318 > 0.0)
        {
            _1819 = abs((1.0 - _1309) / _1318);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1309 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1819 = frontier_phi_35_30_ladder;
        }
        float _1821 = isnan(_1573) ? _1346 : (isnan(_1346) ? _1573 : min(_1346, _1573));
        float _1822 = isnan(_1819) ? _1821 : (isnan(_1821) ? _1819 : min(_1821, _1819));
        float _1826 = (_1822 * _1312) + _1301;
        float _1827 = (_1822 * _1315) + _1305;
        float _1828 = (_1822 * _1318) + _1309;
        float _1829 = _1822 * 9.9999997473787516355514526367188e-05;
        float _1831 = (-1.0) - _1829;
        float _1833 = _1829 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1828 > _1833) || ((_1828 < _1831) || ((_1827 > _1833) || ((_1827 < _1831) || ((_1826 < _1831) || (_1826 > _1833))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1952 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1828, cbModelParam._m0[9u].z, fma(_1827, cbModelParam._m0[9u].y, _1826 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1828, cbModelParam._m0[10u].z, fma(_1827, cbModelParam._m0[10u].y, _1826 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1828, cbModelParam._m0[11u].z, fma(_1827, cbModelParam._m0[11u].y, _1826 * cbModelParam._m0[11u].x))), _1253);
            frontier_phi_13_35_ladder = _1952.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1952.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1952.x * cbModelParam._m0[1u].y;
        }
        _1334 = frontier_phi_13_35_ladder_2;
        _1336 = frontier_phi_13_35_ladder_1;
        _1338 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_443, _444, _445), _1253);
        _1334 = _1322.x * cbModelParam._m0[1u].y;
        _1336 = _1322.y * cbModelParam._m0[1u].y;
        _1338 = _1322.z * cbModelParam._m0[1u].y;
    }
    float _1342 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _283);
    float _1343 = isnan(_1342) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1342 : min(cbModelParam._m0[25u].w, _1342));
    float _1436;
    float _1438;
    float _1440;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1400 = fma(_504, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496)) + cbModelParam._m0[21u].w;
        float _1404 = fma(_504, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496)) + cbModelParam._m0[22u].w;
        float _1408 = fma(_504, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496)) + cbModelParam._m0[23u].w;
        float _1411 = fma(_445, cbModelParam._m0[21u].z, fma(_444, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443));
        float _1414 = fma(_445, cbModelParam._m0[22u].z, fma(_444, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443));
        float _1417 = fma(_445, cbModelParam._m0[23u].z, fma(_444, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443));
        float _1578;
        if (_1411 > 0.0)
        {
            _1578 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_21_ladder;
        }
        float _1846;
        if (_1414 > 0.0)
        {
            _1846 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1846 = frontier_phi_37_32_ladder;
        }
        float _2051;
        if (_1417 > 0.0)
        {
            _2051 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2051 = frontier_phi_46_43_ladder;
        }
        float _2053 = isnan(_1846) ? _1578 : (isnan(_1578) ? _1846 : min(_1578, _1846));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1411) + _1400;
        float _2059 = (_2054 * _1414) + _1404;
        float _2060 = (_2054 * _1417) + _1408;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2259 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2060, cbModelParam._m0[17u].z, fma(_2059, cbModelParam._m0[17u].y, _2058 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2060, cbModelParam._m0[18u].z, fma(_2059, cbModelParam._m0[18u].y, _2058 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2060, cbModelParam._m0[19u].z, fma(_2059, cbModelParam._m0[19u].y, _2058 * cbModelParam._m0[19u].x))), _1343);
            frontier_phi_22_46_ladder = _2259.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2259.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2259.x * cbModelParam._m0[1u].z;
        }
        _1436 = frontier_phi_22_46_ladder_2;
        _1438 = frontier_phi_22_46_ladder_1;
        _1440 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_443, _444, _445), _1343);
        _1436 = _1420.x * cbModelParam._m0[1u].z;
        _1438 = _1420.y * cbModelParam._m0[1u].z;
        _1440 = _1420.z * cbModelParam._m0[1u].z;
    }
    float _1452 = ((((1.0 - _464) * ((_451 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_464 * _451)) * _435;
    float _1453 = _1452 * ((cbModelParam._m0[1u].w * (_1436 - _1334)) + _1334);
    float _1454 = _1452 * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1455 = _1452 * ((cbModelParam._m0[1u].w * (_1440 - _1338)) + _1338);
    float _1458 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, _1453 * cbSceneParam._m0[91u].x));
    vec4 _1472 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_370, _371));
    float _1474 = _1472.w;
    float _1486 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1474);
    float _1487 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1474);
    float _1488 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1474);
    uvec4 _1492 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1494 = _1492.x * 14u;
    uint _1495 = _1494 + 13u;
    float _1502 = _435 + (-1.0);
    float _1507 = (cbLight._m0[_1495].x * _1502) + 1.0;
    float _1508 = (cbLight._m0[_1495].y * _1502) + 1.0;
    float _1509 = (cbLight._m0[_1495].z * _1502) + 1.0;
    float _1510 = (cbLight._m0[_1495].w * _1502) + 1.0;
    uint _1511 = _1494 + 5u;
    float _1517 = isnan(1.0) ? _1508 : (isnan(_1508) ? 1.0 : min(_1508, 1.0));
    uint _1521 = _1494 + 4u;
    float _1531 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
    uint _1535 = _1494 | 1u;
    float _1546 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_280, _281, _282));
    float _1549 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_280, _281, _282));
    float _3613 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _3624 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1554 = (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.3183098733425140380859375;
    float _1556 = (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.3183098733425140380859375;
    float _1563 = ((cbLight._m0[_1511].x * _1517) * _1556) + (((cbLight._m0[_1521].x * _1486) * _1531) * _1554);
    float _1564 = ((_1517 * cbLight._m0[_1511].y) * _1556) + (((cbLight._m0[_1521].y * _1487) * _1531) * _1554);
    float _1565 = ((_1517 * cbLight._m0[_1511].z) * _1556) + (((cbLight._m0[_1521].z * _1488) * _1531) * _1554);
    uvec4 _1570 = floatBitsToUint(cbLight._m0[_1494 + 12u]);
    bool _1572 = _1570.x == 0u;
    float _1583;
    float _1585;
    float _1587;
    if (_1572)
    {
        _1583 = _1563;
        _1585 = _1564;
        _1587 = _1565;
    }
    else
    {
        uint _1591 = _1494 + 6u;
        float _1607 = (dot(vec3(cbLight._m0[_1494 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1608 = _1607 * _1607;
        float _3635 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1610 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1583 = (((cbLight._m0[_1591].x * 0.3183098733425140380859375) * _1609) * _1610) + _1563;
        _1585 = (((cbLight._m0[_1591].y * 0.3183098733425140380859375) * _1609) * _1610) + _1564;
        _1587 = (((cbLight._m0[_1591].z * 0.3183098733425140380859375) * _1609) * _1610) + _1565;
    }
    bool _1590 = _1570.y == 0u;
    float _1628;
    float _1630;
    float _1632;
    if (_1590)
    {
        _1628 = _1583;
        _1630 = _1585;
        _1632 = _1587;
    }
    else
    {
        uint _1790 = _1494 + 7u;
        float _1806 = (dot(vec3(cbLight._m0[_1494 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1807 = _1806 * _1806;
        float _3651 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1809 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1628 = (((cbLight._m0[_1790].x * 0.3183098733425140380859375) * _1808) * _1809) + _1583;
        _1630 = (((cbLight._m0[_1790].y * 0.3183098733425140380859375) * _1808) * _1809) + _1585;
        _1632 = (((cbLight._m0[_1790].z * 0.3183098733425140380859375) * _1808) * _1809) + _1587;
    }
    uint _1635 = _1494 + 8u;
    float _1648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1494].w)) * _283) * 0.949999988079071044921875);
    float _1649 = _1648 * _1648;
    float _1650 = cbLight._m0[_1494].x + _362;
    float _1651 = cbLight._m0[_1494].y + _363;
    float _1652 = cbLight._m0[_1494].z + _364;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1657 = _1656 * _1650;
    float _1658 = _1656 * _1651;
    float _1659 = _1656 * _1652;
    float _1660 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1494].xyz));
    float _3667 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _1664 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _1665 = dot(vec3(_280, _281, _282), vec3(_1657, _1658, _1659));
    float _3689 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1668 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _1669 = dot(vec3(cbLight._m0[_1494].xyz), vec3(_1657, _1658, _1659));
    float _3700 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1673 = _1649 * _1649;
    float _1677 = ((_1668 * _1668) * (_1673 + (-1.0))) + 1.0;
    float _1688 = (exp2(log2(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1689 = 1.0 - _1649;
    float _1700 = (0.5 / (((_1664 * ((_1663 * _1689) + _1649)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _1689) + _1649) * _1663))) * _1663;
    float _3711 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1702 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1673 / ((_1677 * _1677) * 3.141590118408203125));
    uint _1716 = _1494 + 9u;
    float _1727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _283) * 0.949999988079071044921875);
    float _1728 = _1727 * _1727;
    float _1729 = cbLight._m0[_1535].x + _362;
    float _1730 = cbLight._m0[_1535].y + _363;
    float _1731 = cbLight._m0[_1535].z + _364;
    float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
    float _1736 = _1735 * _1729;
    float _1737 = _1735 * _1730;
    float _1738 = _1735 * _1731;
    float _1739 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1535].xyz));
    float _3722 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _1743 = dot(vec3(_280, _281, _282), vec3(_1736, _1737, _1738));
    float _3733 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _1747 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1736, _1737, _1738));
    float _3744 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1751 = _1728 * _1728;
    float _1755 = ((_1746 * _1746) * (_1751 + (-1.0))) + 1.0;
    float _1764 = (exp2(log2(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1765 = 1.0 - _1728;
    float _1775 = (0.5 / (((_1664 * ((_1742 * _1765) + _1728)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _1765) + _1728) * _1742))) * _1742;
    float _3755 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1777 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1751 / ((_1755 * _1755) * 3.141590118408203125));
    float _1787 = (((_1764 * cbLight._m0[_1716].x) * _1777) * _1517) + ((((cbLight._m0[_1635].x * _1486) * _1688) * _1702) * _1531);
    float _1788 = (((_1764 * cbLight._m0[_1716].y) * _1777) * _1517) + ((((cbLight._m0[_1635].y * _1487) * _1688) * _1702) * _1531);
    float _1789 = (((_1764 * cbLight._m0[_1716].z) * _1777) * _1517) + ((((cbLight._m0[_1635].z * _1488) * _1688) * _1702) * _1531);
    float _1851;
    float _1853;
    float _1855;
    if (_1572)
    {
        _1851 = _1787;
        _1853 = _1788;
        _1855 = _1789;
    }
    else
    {
        uint _1857 = _1494 + 2u;
        uint _1861 = _1494 + 10u;
        float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _283) * 0.949999988079071044921875);
        float _1876 = _1875 * _1875;
        float _1877 = cbLight._m0[_1857].x + _362;
        float _1878 = cbLight._m0[_1857].y + _363;
        float _1879 = cbLight._m0[_1857].z + _364;
        float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
        float _1884 = _1883 * _1877;
        float _1885 = _1883 * _1878;
        float _1886 = _1883 * _1879;
        float _1887 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1857].xyz));
        float _3766 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1890 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1891 = dot(vec3(_280, _281, _282), vec3(_1884, _1885, _1886));
        float _3777 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1894 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1895 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_1884, _1885, _1886));
        float _3788 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1899 = _1876 * _1876;
        float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
        float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1913 = 1.0 - _1876;
        float _1923 = (0.5 / (((_1664 * ((_1890 * _1913) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _1913) + _1876) * _1890))) * _1890;
        float _3799 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1925 = (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
        float _1926 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
        _1851 = (((_1912 * cbLight._m0[_1861].x) * _1925) * _1926) + _1787;
        _1853 = (((_1912 * cbLight._m0[_1861].y) * _1925) * _1926) + _1788;
        _1855 = (((_1912 * cbLight._m0[_1861].z) * _1925) * _1926) + _1789;
    }
    float _1961;
    float _1963;
    float _1965;
    if (_1590)
    {
        _1961 = _1851;
        _1963 = _1853;
        _1965 = _1855;
    }
    else
    {
        uint _1972 = _1494 + 3u;
        uint _1976 = _1494 + 11u;
        float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _283) * 0.949999988079071044921875);
        float _1991 = _1990 * _1990;
        float _1992 = cbLight._m0[_1972].x + _362;
        float _1993 = cbLight._m0[_1972].y + _363;
        float _1994 = cbLight._m0[_1972].z + _364;
        float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
        float _1999 = _1998 * _1992;
        float _2000 = _1998 * _1993;
        float _2001 = _1998 * _1994;
        float _2002 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1972].xyz));
        float _3815 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _2006 = dot(vec3(_280, _281, _282), vec3(_1999, _2000, _2001));
        float _3826 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _2010 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_1999, _2000, _2001));
        float _3837 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2014 = _1991 * _1991;
        float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
        float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2028 = 1.0 - _1991;
        float _2038 = (0.5 / (((_1664 * ((_2005 * _2028) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1664 * _2028) + _1991) * _2005))) * _2005;
        float _3848 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
        _1961 = (((_2027 * cbLight._m0[_1976].x) * _2040) * _2041) + _1851;
        _1963 = (((_2027 * cbLight._m0[_1976].y) * _2040) * _2041) + _1853;
        _1965 = (((_2027 * cbLight._m0[_1976].z) * _2040) * _2041) + _1855;
    }
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_1492.y == 0u)
    {
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2116;
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2116;
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2116;
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.x;
        uint _2143 = uint((float(_2131.y) * floor(float(uint(cbSceneParam._m0[85u].y * _371) / _2132))) + floor(float(uint(cbSceneParam._m0[85u].x * _370) / _2132)));
        float _2153 = (log2(_2119 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2154 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        uint _2157 = uint(isnan(14.0) ? _2154 : (isnan(_2154) ? 14.0 : min(_2154, 14.0)));
        uvec4 _2162 = texelFetch(g_lightClusterGridBuffer, int(((_2157 << 2u) + (_2143 << 6u)) >> 2u));
        uint _2163 = _2162.x;
        uint _2164 = _2131.z;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        if (((((1u << ((_2164 >> 4u) & 15u)) + 4294967295u) & _2163) == 0u) || ((_2164 & 240u) == 0u))
        {
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
            _2274 = 0.0;
        }
        else
        {
            float _2265;
            float _2267;
            float _2269;
            float _2271;
            float _2273;
            float _2275;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            uint _2415 = 0u;
            uint _2424;
            bool _2425;
            for (;;)
            {
                _2424 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2415 << 2u)) >> 2u)).x;
                _2425 = _2424 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2425)
                {
                    frontier_phi_61_pred = _2409;
                    frontier_phi_61_pred_1 = _2414;
                    frontier_phi_61_pred_2 = _2413;
                    frontier_phi_61_pred_3 = _2412;
                    frontier_phi_61_pred_4 = _2411;
                    frontier_phi_61_pred_5 = _2410;
                }
                else
                {
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    uint _2539;
                    _2533 = _2409;
                    _2534 = _2410;
                    _2535 = _2411;
                    _2536 = _2412;
                    _2537 = _2413;
                    _2538 = _2414;
                    _2539 = _2424;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    for (;;)
                    {
                        uint _2543 = uint(findLSB(_2539)) + (_2415 << 5u);
                        uint _2540 = (_2539 + 4294967295u) & _2539;
                        uint _2545 = _2543 * 48u;
                        vec4 _2559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 3u)).x));
                        uint _2565 = (_2543 * 48u) + 4u;
                        vec4 _2578 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2565)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 3u)).x));
                        uint _2584 = (_2543 * 48u) + 8u;
                        vec3 _2595 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x));
                        float _2599 = _2559.x - _2117;
                        float _2600 = _2559.y - _2118;
                        float _2601 = _2559.z - _2119;
                        float _2602 = dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601));
                        float _2605 = inversesqrt(_2602);
                        float _2606 = _2605 * _2599;
                        float _2607 = _2605 * _2600;
                        float _2608 = _2605 * _2601;
                        float _2609 = dot(vec3(_391, _394, _397), vec3(_2606, _2607, _2608));
                        float _2614 = 1.0 - (_2602 * _2559.w);
                        float _3874 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
                        float _2615 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                        float _2616 = sqrt(_2602) * _2578.w;
                        float _2619 = 1.39999997615814208984375 / (_2616 + 1.39999997615814208984375);
                        float _2620 = _2619 * _2619;
                        float _2623 = ((1.0 - _2620) * _2609) + _2620;
                        float _2626 = _2616 * _2616;
                        float _2630 = ((isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))) * _2615) / ((_2626 * 0.699999988079071044921875) + 1.0);
                        float _2634 = (-0.0) - _2117;
                        float _2635 = (-0.0) - _2118;
                        float _2636 = (-0.0) - _2119;
                        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
                        float _2641 = _2640 * _2634;
                        float _2642 = _2640 * _2635;
                        float _2643 = _2640 * _2636;
                        float _2651 = exp2(log2(1.0 / ((_2626 * 3.5) + 5.0)) * 0.25);
                        float _2652 = 1.0 - _451;
                        float _2659 = sqrt(1.0 - ((1.0 - (_2652 * _2652)) * (1.0 - (_2651 * _2651))));
                        float _2660 = _2659 * _2659;
                        float _2661 = _2660 * _2660;
                        float _2662 = _2641 + _2606;
                        float _2663 = _2642 + _2607;
                        float _2664 = _2643 + _2608;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2672 = dot(vec3(_391, _394, _397), vec3(_2641, _2642, _2643));
                        float _3890 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2675 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                        float _2676 = dot(vec3(_391, _394, _397), vec3(_2668 * _2662, _2668 * _2663, _2668 * _2664));
                        float _3901 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2679 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2683 = ((_2679 * _2679) * (_2661 + (-1.0))) + 1.0;
                        float _2684 = _2619 * _2660;
                        float _2685 = _2684 * _2684;
                        float _2688 = ((1.0 - _2685) * _2609) + _2685;
                        float _3912 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2689 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2690 = 1.0 - _2660;
                        float _2700 = (0.5 / (((_2689 * ((_2675 * _2690) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2690) + _2660) * _2675))) * _2689;
                        float _3923 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2711 = (((_2661 * 3.1415927410125732421875) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) / ((_2683 * _2683) * ((_2626 * 2.1991131305694580078125) + 3.141590118408203125))) * _2615;
                        _2468 = (_2630 * _2578.x) + _2536;
                        _2469 = (_2630 * _2578.y) + _2537;
                        _2470 = (_2630 * _2578.z) + _2538;
                        _2465 = (_2711 * _2595.x) + _2533;
                        _2466 = (_2711 * _2595.y) + _2534;
                        _2467 = (_2711 * _2595.z) + _2535;
                        if (_2540 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2533 = _2465;
                            _2534 = _2466;
                            _2535 = _2467;
                            _2536 = _2468;
                            _2537 = _2469;
                            _2538 = _2470;
                            _2539 = _2540;
                        }
                    }
                    frontier_phi_61_pred = _2465;
                    frontier_phi_61_pred_1 = _2470;
                    frontier_phi_61_pred_2 = _2469;
                    frontier_phi_61_pred_3 = _2468;
                    frontier_phi_61_pred_4 = _2467;
                    frontier_phi_61_pred_5 = _2466;
                }
                _2265 = frontier_phi_61_pred;
                _2275 = frontier_phi_61_pred_1;
                _2273 = frontier_phi_61_pred_2;
                _2271 = frontier_phi_61_pred_3;
                _2269 = frontier_phi_61_pred_4;
                _2267 = frontier_phi_61_pred_5;
                uint _2416 = _2415 + 1u;
                if (_2416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2409 = _2265;
                    _2410 = _2267;
                    _2411 = _2269;
                    _2412 = _2271;
                    _2413 = _2273;
                    _2414 = _2275;
                    _2415 = _2416;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
            _2274 = _2275;
        }
        uvec4 _2278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2279 = _2278.z;
        uint _2281 = (_2279 >> 8u) & 15u;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((4294967295u << _2281) & _2163) == 0u)
        {
            _2377 = _2264;
            _2379 = _2266;
            _2381 = _2268;
            _2383 = _2270;
            _2385 = _2272;
            _2387 = _2274;
        }
        else
        {
            float _2402 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
            float _2403 = _2402 * _2117;
            float _2404 = _2402 * _2118;
            float _2405 = _2402 * _2119;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2281 < ((_2279 >> 12u) & 15u))
            {
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2516 = _2264;
                float _2517 = _2266;
                float _2518 = _2268;
                float _2519 = _2270;
                float _2520 = _2272;
                float _2521 = _2274;
                uint _2522 = _2281;
                uint _2531;
                bool _2532;
                for (;;)
                {
                    _2531 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2522 << 2u)) >> 2u)).x;
                    _2532 = _2531 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2532)
                    {
                        frontier_phi_67_pred = _2519;
                        frontier_phi_67_pred_1 = _2520;
                        frontier_phi_67_pred_2 = _2521;
                        frontier_phi_67_pred_3 = _2518;
                        frontier_phi_67_pred_4 = _2517;
                        frontier_phi_67_pred_5 = _2516;
                    }
                    else
                    {
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _2729 = _2516;
                        float _2730 = _2517;
                        float _2731 = _2518;
                        float _2732 = _2519;
                        float _2733 = _2520;
                        float _2734 = _2521;
                        uint _2735 = _2531;
                        uint _2736;
                        vec4 _2761;
                        float _2762;
                        vec4 _2777;
                        vec3 _2789;
                        vec4 _2805;
                        vec4 _2821;
                        float _2868;
                        bool _2869;
                        for (;;)
                        {
                            uint _2746 = ((_2522 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2735));
                            _2736 = (_2735 + 4294967295u) & _2735;
                            uint _2748 = _2746 * 40u;
                            _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            _2762 = _2761.w;
                            uint _2764 = (_2746 * 40u) + 4u;
                            _2777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 3u)).x));
                            uint _2779 = (_2746 * 40u) + 8u;
                            _2789 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x));
                            uint _2792 = (_2746 * 40u) + 16u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2808 = (_2746 * 40u) + 20u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            uint _2824 = (_2746 * 40u) + 24u;
                            vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2843 = (_2746 * 40u) + 28u;
                            vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            _2868 = fma(_2119, _2856.z, fma(_2118, _2856.y, _2856.x * _2117)) + _2856.w;
                            _2869 = !((fma(_2119, _2837.z, fma(_2118, _2837.y, _2837.x * _2117)) + _2837.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2869)
                            {
                                float _2896 = _2761.x - _2117;
                                float _2897 = _2761.y - _2118;
                                float _2898 = _2761.z - _2119;
                                float _2899 = dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898));
                                float _2902 = inversesqrt(_2899);
                                float _2903 = _2902 * _2896;
                                float _2904 = _2902 * _2897;
                                float _2905 = _2902 * _2898;
                                float _2909 = 1.0 - (_2899 / (_2762 * _2762));
                                float _3934 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                                float _2914 = sqrt(_2899) * _2777.w;
                                float _2916 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                                float _2917 = _2916 * _2916;
                                float _2920 = ((1.0 - _2917) * dot(vec3(_2903, _2904, _2905), vec3(_391, _394, _397))) + _2917;
                                float _2923 = _2914 * _2914;
                                float _2927 = (fma(_2119, _2805.z, fma(_2118, _2805.y, _2805.x * _2117)) + _2805.w) / _2868;
                                float _2928 = (fma(_2119, _2821.z, fma(_2118, _2821.y, _2821.x * _2117)) + _2821.w) / _2868;
                                float _2932 = 1.0 - dot(vec2(_2927, _2928), vec2(_2927, _2928));
                                float _3950 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                                float _2933 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                                float _2934 = _2933 * (((isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))) * _2910) / ((_2923 * 0.699999988079071044921875) + 1.0));
                                float _2946 = exp2(log2(1.0 / ((_2923 * 3.5) + 5.0)) * 0.25);
                                float _2947 = 1.0 - _451;
                                float _2954 = sqrt(1.0 - ((1.0 - (_2947 * _2947)) * (1.0 - (_2946 * _2946))));
                                float _2955 = _2954 * _2954;
                                float _2956 = _2955 * _2955;
                                float _2957 = _2903 - _2403;
                                float _2958 = _2904 - _2404;
                                float _2959 = _2905 - _2405;
                                float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                                float _2967 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2403, (-0.0) - _2404, (-0.0) - _2405));
                                float _3961 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2970 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _2971 = dot(vec3(_391, _394, _397), vec3(_2963 * _2957, _2963 * _2958, _2963 * _2959));
                                float _3972 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2974 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _2978 = ((_2974 * _2974) * (_2956 + (-1.0))) + 1.0;
                                float _2979 = _2916 * _2955;
                                float _2980 = _2979 * _2979;
                                float _2986 = ((1.0 - _2980) * dot(vec3(_391, _394, _397), vec3(_2903, _2904, _2905))) + _2980;
                                float _3983 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2988 = 1.0 - _2955;
                                float _2998 = (0.5 / (((_2987 * ((_2970 * _2988) + _2955)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2955) * _2970))) * _2987;
                                float _3994 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                                float _3008 = (_2933 * _2910) * (((_2956 * 3.1415927410125732421875) * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) / ((_2978 * _2978) * ((_2923 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3008 * _2789.x;
                                frontier_phi_73_pred_1 = _3008 * _2789.y;
                                frontier_phi_73_pred_2 = _2934 * _2777.z;
                                frontier_phi_73_pred_3 = _2934 * _2777.y;
                                frontier_phi_73_pred_4 = _2934 * _2777.x;
                                frontier_phi_73_pred_5 = _3008 * _2789.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3012 = frontier_phi_73_pred;
                            _3013 = frontier_phi_73_pred_1;
                            _3017 = frontier_phi_73_pred_2;
                            _3016 = frontier_phi_73_pred_3;
                            _3015 = frontier_phi_73_pred_4;
                            _3014 = frontier_phi_73_pred_5;
                            _2719 = _3015 + _2732;
                            _2720 = _3016 + _2733;
                            _2721 = _3017 + _2734;
                            _2716 = _3012 + _2729;
                            _2717 = _3013 + _2730;
                            _2718 = _3014 + _2731;
                            if (_2736 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2736;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2719;
                        frontier_phi_67_pred_1 = _2720;
                        frontier_phi_67_pred_2 = _2721;
                        frontier_phi_67_pred_3 = _2718;
                        frontier_phi_67_pred_4 = _2717;
                        frontier_phi_67_pred_5 = _2716;
                    }
                    _2384 = frontier_phi_67_pred;
                    _2386 = frontier_phi_67_pred_1;
                    _2388 = frontier_phi_67_pred_2;
                    _2382 = frontier_phi_67_pred_3;
                    _2380 = frontier_phi_67_pred_4;
                    _2378 = frontier_phi_67_pred_5;
                    uint _2523 = _2522 + 1u;
                    if (_2523 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2516 = _2378;
                        _2517 = _2380;
                        _2518 = _2382;
                        _2519 = _2384;
                        _2520 = _2386;
                        _2521 = _2388;
                        _2522 = _2523;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2386;
                frontier_phi_55_56_ladder_1 = _2388;
                frontier_phi_55_56_ladder_2 = _2384;
                frontier_phi_55_56_ladder_3 = _2382;
                frontier_phi_55_56_ladder_4 = _2380;
                frontier_phi_55_56_ladder_5 = _2378;
            }
            else
            {
                frontier_phi_55_56_ladder = _2272;
                frontier_phi_55_56_ladder_1 = _2274;
                frontier_phi_55_56_ladder_2 = _2270;
                frontier_phi_55_56_ladder_3 = _2268;
                frontier_phi_55_56_ladder_4 = _2266;
                frontier_phi_55_56_ladder_5 = _2264;
            }
            _2377 = frontier_phi_55_56_ladder_5;
            _2379 = frontier_phi_55_56_ladder_4;
            _2381 = frontier_phi_55_56_ladder_3;
            _2383 = frontier_phi_55_56_ladder_2;
            _2385 = frontier_phi_55_56_ladder;
            _2387 = frontier_phi_55_56_ladder_1;
        }
        float _2392 = isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0));
        _2176 = (_2392 * _2383) + _1628;
        _2178 = (_2392 * _2385) + _1630;
        _2180 = (_2392 * _2387) + _1632;
        _2182 = ((_2377 * 0.039999999105930328369140625) * _2392) + _1961;
        _2184 = ((_2379 * 0.039999999105930328369140625) * _2392) + _1963;
        _2186 = ((_2381 * 0.039999999105930328369140625) * _2392) + _1965;
    }
    else
    {
        _2176 = _1628;
        _2178 = _1630;
        _2180 = _1632;
        _2182 = _1961;
        _2184 = _1963;
        _2186 = _1965;
    }
    float _4010 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _4021 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _4032 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    uint _2206 = _410 + 6u;
    float _2214 = _370 / cbSceneParam._m0[86u].x;
    float _2215 = _371 / cbSceneParam._m0[86u].y;
    vec4 _2229 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2214, _2215, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2231 = _2229.x;
    float _2232 = _2229.y;
    float _2233 = _2229.z;
    float _2234 = _2229.w;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2289 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2290 = _2289 / _302;
        float _2301 = _2290 * _355;
        float _2302 = _356 * _2290;
        float _2303 = (-0.0) - _2302;
        float _2305 = _2290 * _357;
        float _2307 = (cbSceneParam._m0[77u].w * _2303) / _2289;
        float _2308 = _2307 + cbSceneParam._m0[79u].w;
        float _2309 = cbSceneParam._m0[79u].w - _2302;
        float _2315 = sqrt(((_2301 * _2301) + (_2302 * _2302)) + (_2305 * _2305));
        float _2318 = (1.0 - (cbSceneParam._m0[77u].w / _2289)) * _2315;
        float _2323 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2325 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2478;
        if (abs((_2303 - _2307) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2478 = ((((_2308 > 0.0) ? exp2(_2323 * _2308) : (2.0 - exp2(_2325 * _2308))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2318;
        }
        else
        {
            float _2438 = 1.0 / cbSceneParam._m0[80u].x;
            float _2439 = isnan(_2309) ? _2308 : (isnan(_2308) ? _2309 : max(_2308, _2309));
            float _2440 = isnan(_2309) ? _2308 : (isnan(_2308) ? _2309 : min(_2308, _2309));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            _2478 = ((abs(_2315 / _2303) * cbSceneParam._m0[80u].y) * ((((_2449 - _2450) * 2.0) - ((exp2(_2323 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)))) - exp2(_2323 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0))))) * _2438)) - ((exp2(_2325 * _2449) - exp2(_2325 * _2450)) * _2438))) + (_2318 * cbSceneParam._m0[80u].z);
        }
        vec4 _2480 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2214, _2215, 1.0), 0.0);
        float _2489 = exp2((_2478 * (-1.44269502162933349609375)) * (1.0 - _2480.w));
        float _2490 = log2(_2489);
        float _2506 = log2(_2234);
        _2327 = (exp2(_2506 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].x)) * _2480.x) / cbSceneParam._m0[78u].x)) + _2231;
        _2329 = (exp2(_2506 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].y)) * _2480.y) / cbSceneParam._m0[78u].y)) + _2232;
        _2331 = (exp2(_2506 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2490 * cbSceneParam._m0[78u].z)) * _2480.z) / cbSceneParam._m0[78u].z)) + _2233;
        _2333 = _2489 * _2234;
    }
    else
    {
        _2327 = _2231;
        _2329 = _2232;
        _2331 = _2233;
        _2333 = _2234;
    }
    float _2345 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2346 = _2345 == 3.0;
    float _2347 = log2(_2333);
    float _2354 = exp2(_2347 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2176 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _435))) + ((_2182 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2355 = exp2(_2347 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2178 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _435))) + ((_2184 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2356 = exp2(_2347 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2180 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _435))) + ((_2186 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _1242)) * cbPerFrame._m0[3u].x));
    float _2365 = (_2345 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2365 * (_2346 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2327)));
    SV_Target.y = _2365 * (_2346 ? _2355 : (_2355 + (cbSceneParam._m0[72u].w * _2329)));
    SV_Target.z = _2365 * (_2346 ? _2356 : (_2356 + (cbSceneParam._m0[72u].w * _2331)));
    SV_Target.w = cbInstanceData._m0[_2206].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2206].w;
}


