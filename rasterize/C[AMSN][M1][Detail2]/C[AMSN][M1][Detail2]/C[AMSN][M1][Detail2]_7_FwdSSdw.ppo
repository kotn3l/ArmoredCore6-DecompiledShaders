#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _950;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _273 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _304 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3286 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _305 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _312 = (_305 * ((_273.x * cbMtdParam._m0[11u].x) - _247)) + _247;
    float _313 = (_305 * ((_273.y * cbMtdParam._m0[11u].y) - _248)) + _248;
    float _314 = (_305 * ((_273.z * cbMtdParam._m0[11u].z) - _249)) + _249;
    vec4 _331 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = (_331.x * 2.0) + (-1.0);
    float _341 = (_331.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_339, _341), vec2(_339, _341));
    float _3297 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))));
    float _348 = _331.z * cbMtdParam._m0[13u].y;
    vec4 _360 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _395 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_381.z * cbMtdParam._m0[13u].z) - _348)) + _348;
    float _411 = (((((_360.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _339) + ((((_381.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _412 = (((((_360.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _341) + ((((_381.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _415 = fma(_347, _211 * NORMAL.x, fma(_412, _218 * TANGENT.x, (_204 * _196) * _411));
    float _418 = fma(_347, _211 * NORMAL.y, fma(_412, _218 * TANGENT.y, (_204 * _197) * _411));
    float _421 = fma(_347, _211 * NORMAL.z, fma(_412, _218 * TANGENT.z, (_204 * _198) * _411));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    float _426 = _425 * _415;
    float _427 = _425 * _418;
    float _428 = _425 * _421;
    float _3308 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _429 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3330 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3341 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _448 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _500 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _490);
    float _501 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _490);
    float _502 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _490);
    float _506 = inversesqrt(dot(vec3(_500, _501, _502), vec3(_500, _501, _502)));
    float _507 = _500 * _506;
    float _508 = _501 * _506;
    float _509 = _502 * _506;
    float _515 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _516 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _534 = fma(_428, cbSceneParam._m0[5u].z, fma(_427, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _426));
    float _537 = fma(_428, cbSceneParam._m0[6u].z, fma(_427, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _426));
    float _540 = fma(_428, cbSceneParam._m0[7u].z, fma(_427, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _426));
    uint _553 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = (_553 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3352 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _515, cbSceneParam._m0[86u].y * _516));
    float _578 = _575.x * TEXCOORD_5.w;
    float _579 = dot(vec3(_426, _427, _428), vec3(_507, _508, _509));
    float _582 = _579 * 2.0;
    float _586 = (_582 * _426) - _507;
    float _587 = (_582 * _427) - _508;
    float _588 = (_582 * _428) - _509;
    float _592 = abs(dot(vec3(_507, _508, _509), vec3(_426, _427, _428)));
    float _3385 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _594 = sqrt(_429);
    float _607 = exp2((_594 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_594 * 3.0));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639));
        float _678 = fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639));
        float _682 = fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639));
        float _707 = _639 + _426;
        float _708 = _643 + _427;
        float _709 = _647 + _428;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_426, _427, _428), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3433 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_426, _427, _428), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3466 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_426, _427, _428), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3499 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _990 = fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639));
        float _994 = fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639));
        float _998 = fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639));
        float _1021 = _639 + _426;
        float _1022 = _643 + _427;
        float _1023 = _647 + _428;
        float _1033 = fma(_1023, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021)) - _990;
        float _1034 = fma(_1023, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021)) - _994;
        float _1035 = fma(_1023, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021)) - _998;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_990 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_994 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[35u].z) + ((((((_998 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1089 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1056.x + (-0.5));
        float _1091 = _1089 * (_1056.y + (-0.5));
        float _1092 = _1089 * (_1056.z + (-0.5));
        float _1099 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1063.x + (-0.5));
        float _1101 = _1099 * (_1063.y + (-0.5));
        float _1102 = _1099 * (_1063.z + (-0.5));
        float _1109 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1070.x + (-0.5));
        float _1111 = _1109 * (_1070.y + (-0.5));
        float _1112 = _1109 * (_1070.z + (-0.5));
        float _1119 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1077.x + (-0.5));
        float _1121 = _1119 * (_1077.y + (-0.5));
        float _1122 = _1119 * (_1077.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_426, _427, _428), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3562 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1153 + 1.0))) + _1158) * _1123;
        float _1168 = _1091 * 0.5;
        float _1169 = _1101 * 0.5;
        float _1170 = _1111 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_426, _427, _428), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3595 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1195 + 1.0))) + _1200) * _1124;
        float _1210 = _1092 * 0.5;
        float _1211 = _1102 * 0.5;
        float _1212 = _1112 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_426, _427, _428), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3628 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1237 + 1.0))) + _1242) * _1125;
        _1259 = _1092;
        _1260 = _1091;
        _1261 = _1090;
        _1262 = _1102;
        _1263 = _1101;
        _1264 = _1100;
        _1265 = _1112;
        _1266 = _1111;
        _1267 = _1110;
        _1268 = _1125;
        _1269 = _1124;
        _1270 = _1123;
        _1271 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1272 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1273 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _950;
        _1260 = _950;
        _1261 = _950;
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1283 = (cbModelParam._m0[1u].x * (_1271 - _962)) + _962;
    float _1284 = (cbModelParam._m0[1u].x * (_1272 - _963)) + _963;
    float _1285 = (cbModelParam._m0[1u].x * (_1273 - _964)) + _964;
    float _1306 = fma(_1285, cbSceneParam._m0[89u].z, fma(_1284, cbSceneParam._m0[89u].y, _1283 * cbSceneParam._m0[89u].x));
    float _1309 = fma(_1285, cbSceneParam._m0[90u].z, fma(_1284, cbSceneParam._m0[90u].y, _1283 * cbSceneParam._m0[90u].x));
    float _1312 = fma(_1285, cbSceneParam._m0[91u].z, fma(_1284, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1283));
    float _1327 = _586 * 0.5;
    float _1328 = _587 * 0.5;
    float _1329 = _588 * 0.5;
    float _1330 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1261, _1264, _1267, _1270));
    float _1333 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1260, _1263, _1266, _1269));
    float _1336 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_1259, _1262, _1265, _1268));
    float _1370;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1343 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_949, _953, _956, _959));
        float _1347 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_951, _954, _957, _960));
        float _1351 = dot(vec4(_1327, _1328, _1329, 1.0), vec4(_952, _955, _958, _961));
        float _1358 = dot(vec4(cbModelParam._m0[39u]), vec4(_1327, _1328, _1329, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1381;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1372 = dot(vec4(cbModelParam._m0[40u]), vec4(_1327, _1328, _1329, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1385 = (_1381 * cbModelParam._m0[1u].x) + (_1370 * (1.0 - cbModelParam._m0[1u].x));
    float _1395 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _429);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1395 : min(cbModelParam._m0[25u].z, _1395));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1443 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1447 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1451 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1454 = fma(_588, cbModelParam._m0[13u].z, fma(_587, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586));
        float _1457 = fma(_588, cbModelParam._m0[14u].z, fma(_587, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586));
        float _1460 = fma(_588, cbModelParam._m0[15u].z, fma(_587, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586));
        float _1488;
        if (_1454 > 0.0)
        {
            _1488 = abs((1.0 - _1443) / _1454);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1443 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1488 = frontier_phi_14_12_ladder;
        }
        float _1713;
        if (_1457 > 0.0)
        {
            _1713 = abs((1.0 - _1447) / _1457);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1447 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1713 = frontier_phi_23_19_ladder;
        }
        float _1959;
        if (_1460 > 0.0)
        {
            _1959 = abs((1.0 - _1451) / _1460);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1451 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1959 = frontier_phi_35_30_ladder;
        }
        float _1961 = isnan(_1713) ? _1488 : (isnan(_1488) ? _1713 : min(_1488, _1713));
        float _1962 = isnan(_1959) ? _1961 : (isnan(_1961) ? _1959 : min(_1961, _1959));
        float _1966 = (_1962 * _1454) + _1443;
        float _1967 = (_1962 * _1457) + _1447;
        float _1968 = (_1962 * _1460) + _1451;
        float _1969 = _1962 * 9.9999997473787516355514526367188e-05;
        float _1971 = (-1.0) - _1969;
        float _1973 = _1969 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1968 > _1973) || ((_1968 < _1971) || ((_1967 > _1973) || ((_1967 < _1971) || ((_1966 < _1971) || (_1966 > _1973))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1968, cbModelParam._m0[9u].z, fma(_1967, cbModelParam._m0[9u].y, _1966 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1968, cbModelParam._m0[10u].z, fma(_1967, cbModelParam._m0[10u].y, _1966 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1968, cbModelParam._m0[11u].z, fma(_1967, cbModelParam._m0[11u].y, _1966 * cbModelParam._m0[11u].x))), _1396);
            frontier_phi_13_35_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1476 = frontier_phi_13_35_ladder_2;
        _1478 = frontier_phi_13_35_ladder_1;
        _1480 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_586, _587, _588), _1396);
        _1476 = _1464.x * cbModelParam._m0[1u].y;
        _1478 = _1464.y * cbModelParam._m0[1u].y;
        _1480 = _1464.z * cbModelParam._m0[1u].y;
    }
    float _1484 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _429);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1484 : min(cbModelParam._m0[25u].w, _1484));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1542 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1546 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1550 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1553 = fma(_588, cbModelParam._m0[21u].z, fma(_587, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586));
        float _1556 = fma(_588, cbModelParam._m0[22u].z, fma(_587, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586));
        float _1559 = fma(_588, cbModelParam._m0[23u].z, fma(_587, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586));
        float _1718;
        if (_1553 > 0.0)
        {
            _1718 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1718 = frontier_phi_25_21_ladder;
        }
        float _1986;
        if (_1556 > 0.0)
        {
            _1986 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1986 = frontier_phi_37_32_ladder;
        }
        float _2191;
        if (_1559 > 0.0)
        {
            _2191 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2191 = frontier_phi_46_43_ladder;
        }
        float _2193 = isnan(_1986) ? _1718 : (isnan(_1718) ? _1986 : min(_1718, _1986));
        float _2194 = isnan(_2191) ? _2193 : (isnan(_2193) ? _2191 : min(_2193, _2191));
        float _2198 = (_2194 * _1553) + _1542;
        float _2199 = (_2194 * _1556) + _1546;
        float _2200 = (_2194 * _1559) + _1550;
        float _2201 = _2194 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2201;
        float _2204 = _2201 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2200 > _2204) || ((_2200 < _2202) || ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 < _2202) || (_2198 > _2204))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2399 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2200, cbModelParam._m0[17u].z, fma(_2199, cbModelParam._m0[17u].y, _2198 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2200, cbModelParam._m0[18u].z, fma(_2199, cbModelParam._m0[18u].y, _2198 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2200, cbModelParam._m0[19u].z, fma(_2199, cbModelParam._m0[19u].y, _2198 * cbModelParam._m0[19u].x))), _1485);
            frontier_phi_22_46_ladder = _2399.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2399.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2399.x * cbModelParam._m0[1u].z;
        }
        _1578 = frontier_phi_22_46_ladder_2;
        _1580 = frontier_phi_22_46_ladder_1;
        _1582 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_586, _587, _588), _1485);
        _1578 = _1562.x * cbModelParam._m0[1u].z;
        _1580 = _1562.y * cbModelParam._m0[1u].z;
        _1582 = _1562.z * cbModelParam._m0[1u].z;
    }
    float _1594 = ((((1.0 - _607) * ((_594 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_607 * _594)) * _578;
    float _1595 = _1594 * ((cbModelParam._m0[1u].w * (_1578 - _1476)) + _1476);
    float _1596 = _1594 * ((cbModelParam._m0[1u].w * (_1580 - _1478)) + _1478);
    float _1597 = _1594 * ((cbModelParam._m0[1u].w * (_1582 - _1480)) + _1480);
    float _1600 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, _1595 * cbSceneParam._m0[91u].x));
    vec4 _1614 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_515, _516));
    float _1616 = _1614.w;
    float _1628 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1616);
    float _1629 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1616);
    float _1630 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1616);
    uvec4 _1634 = floatBitsToUint(cbInstanceData._m0[_553 + 5u]);
    uint _1636 = _1634.x * 14u;
    uint _1637 = _1636 + 13u;
    float _1644 = _578 + (-1.0);
    float _1649 = (cbLight._m0[_1637].x * _1644) + 1.0;
    float _1650 = (cbLight._m0[_1637].y * _1644) + 1.0;
    float _1651 = (cbLight._m0[_1637].z * _1644) + 1.0;
    float _1652 = (cbLight._m0[_1637].w * _1644) + 1.0;
    uint _1653 = _1636 + 5u;
    float _1659 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1663 = _1636 + 4u;
    float _1672 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1676 = _1636 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_426, _427, _428));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_426, _427, _428));
    float _3764 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3775 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1653].x * _1659) * _1697) + (((cbLight._m0[_1663].x * _1628) * _1672) * _1695);
    float _1705 = ((_1659 * cbLight._m0[_1653].y) * _1697) + (((cbLight._m0[_1663].y * _1629) * _1672) * _1695);
    float _1706 = ((_1659 * cbLight._m0[_1653].z) * _1697) + (((cbLight._m0[_1663].z * _1630) * _1672) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1636 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1712)
    {
        _1723 = _1704;
        _1725 = _1705;
        _1727 = _1706;
    }
    else
    {
        uint _1731 = _1636 + 6u;
        float _1747 = (dot(vec3(cbLight._m0[_1636 + 2u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1748 = _1747 * _1747;
        float _3786 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1750 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1723 = (((cbLight._m0[_1731].x * 0.3183098733425140380859375) * _1749) * _1750) + _1704;
        _1725 = (((cbLight._m0[_1731].y * 0.3183098733425140380859375) * _1749) * _1750) + _1705;
        _1727 = (((cbLight._m0[_1731].z * 0.3183098733425140380859375) * _1749) * _1750) + _1706;
    }
    bool _1730 = _1710.y == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1730)
    {
        _1768 = _1723;
        _1770 = _1725;
        _1772 = _1727;
    }
    else
    {
        uint _1930 = _1636 + 7u;
        float _1946 = (dot(vec3(cbLight._m0[_1636 + 3u].xyz), vec3(_426, _427, _428)) * 0.5) + 0.5;
        float _1947 = _1946 * _1946;
        float _3802 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1949 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1768 = (((cbLight._m0[_1930].x * 0.3183098733425140380859375) * _1948) * _1949) + _1723;
        _1770 = (((cbLight._m0[_1930].y * 0.3183098733425140380859375) * _1948) * _1949) + _1725;
        _1772 = (((cbLight._m0[_1930].z * 0.3183098733425140380859375) * _1948) * _1949) + _1727;
    }
    uint _1775 = _1636 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _429) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1636].x + _507;
    float _1791 = cbLight._m0[_1636].y + _508;
    float _1792 = cbLight._m0[_1636].z + _509;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1636].xyz));
    float _3818 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _1804 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1805 = dot(vec3(_426, _427, _428), vec3(_1797, _1798, _1799));
    float _3840 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1797, _1798, _1799));
    float _3851 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1804 * ((_1803 * _1829) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1829) + _1789) * _1803))) * _1803;
    float _3862 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1856 = _1636 + 9u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _429) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1676].x + _507;
    float _1870 = cbLight._m0[_1676].y + _508;
    float _1871 = cbLight._m0[_1676].z + _509;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1676].xyz));
    float _3873 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1883 = dot(vec3(_426, _427, _428), vec3(_1876, _1877, _1878));
    float _3884 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1876, _1877, _1878));
    float _3895 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1891 = _1868 * _1868;
    float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
    float _1904 = (exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1905 = 1.0 - _1868;
    float _1915 = (0.5 / (((_1804 * ((_1882 * _1905) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1905) + _1868) * _1882))) * _1882;
    float _3906 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
    float _1927 = (((_1904 * cbLight._m0[_1856].x) * _1917) * _1659) + ((((cbLight._m0[_1775].x * _1628) * _1828) * _1842) * _1672);
    float _1928 = (((_1904 * cbLight._m0[_1856].y) * _1917) * _1659) + ((((cbLight._m0[_1775].y * _1629) * _1828) * _1842) * _1672);
    float _1929 = (((_1904 * cbLight._m0[_1856].z) * _1917) * _1659) + ((((cbLight._m0[_1775].z * _1630) * _1828) * _1842) * _1672);
    float _1991;
    float _1993;
    float _1995;
    if (_1712)
    {
        _1991 = _1927;
        _1993 = _1928;
        _1995 = _1929;
    }
    else
    {
        uint _1997 = _1636 + 2u;
        uint _2001 = _1636 + 10u;
        float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _429) * 0.949999988079071044921875);
        float _2016 = _2015 * _2015;
        float _2017 = cbLight._m0[_1997].x + _507;
        float _2018 = cbLight._m0[_1997].y + _508;
        float _2019 = cbLight._m0[_1997].z + _509;
        float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
        float _2024 = _2023 * _2017;
        float _2025 = _2023 * _2018;
        float _2026 = _2023 * _2019;
        float _2027 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_1997].xyz));
        float _3917 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _2031 = dot(vec3(_426, _427, _428), vec3(_2024, _2025, _2026));
        float _3928 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _2035 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2024, _2025, _2026));
        float _3939 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2039 = _2016 * _2016;
        float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
        float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2053 = 1.0 - _2016;
        float _2063 = (0.5 / (((_1804 * ((_2030 * _2053) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2053) + _2016) * _2030))) * _2030;
        float _3950 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1991 = (((_2052 * cbLight._m0[_2001].x) * _2065) * _2066) + _1927;
        _1993 = (((_2052 * cbLight._m0[_2001].y) * _2065) * _2066) + _1928;
        _1995 = (((_2052 * cbLight._m0[_2001].z) * _2065) * _2066) + _1929;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1730)
    {
        _2101 = _1991;
        _2103 = _1993;
        _2105 = _1995;
    }
    else
    {
        uint _2112 = _1636 + 3u;
        uint _2116 = _1636 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _429) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _507;
        float _2133 = cbLight._m0[_2112].y + _508;
        float _2134 = cbLight._m0[_2112].z + _509;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_426, _427, _428), vec3(cbLight._m0[_2112].xyz));
        float _3966 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2146 = dot(vec3(_426, _427, _428), vec3(_2139, _2140, _2141));
        float _3977 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _3988 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1804 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2168) + _2131) * _2145))) * _2145;
        float _3999 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _2101 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _1991;
        _2103 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _1993;
        _2105 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _1995;
    }
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1634.y == 0u)
    {
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2257 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2256;
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2256;
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2256;
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.x;
        uint _2283 = uint((float(_2271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _516) / _2272))) + floor(float(uint(cbSceneParam._m0[85u].x * _515) / _2272)));
        float _2293 = (log2(_2259 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2294 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        uint _2297 = uint(isnan(14.0) ? _2294 : (isnan(_2294) ? 14.0 : min(_2294, 14.0)));
        uvec4 _2302 = texelFetch(g_lightClusterGridBuffer, int(((_2297 << 2u) + (_2283 << 6u)) >> 2u));
        uint _2303 = _2302.x;
        uint _2304 = _2271.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2304 >> 4u) & 15u)) + 4294967295u) & _2303) == 0u) || ((_2304 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2565)
                {
                    frontier_phi_61_pred = _2549;
                    frontier_phi_61_pred_1 = _2554;
                    frontier_phi_61_pred_2 = _2553;
                    frontier_phi_61_pred_3 = _2552;
                    frontier_phi_61_pred_4 = _2551;
                    frontier_phi_61_pred_5 = _2550;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2549;
                    _2674 = _2550;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2564;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2555 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2257;
                        float _2740 = _2699.y - _2258;
                        float _2741 = _2699.z - _2259;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_534, _537, _540), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4025 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2257;
                        float _2775 = (-0.0) - _2258;
                        float _2776 = (-0.0) - _2259;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _594;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_534, _537, _540), vec3(_2781, _2782, _2783));
                        float _4041 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2816 = dot(vec3(_534, _537, _540), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4052 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4063 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4074 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2608 = (_2770 * _2718.x) + _2676;
                        _2609 = (_2770 * _2718.y) + _2677;
                        _2610 = (_2770 * _2718.z) + _2678;
                        _2605 = (_2851 * _2735.x) + _2673;
                        _2606 = (_2851 * _2735.y) + _2674;
                        _2607 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2605;
                            _2674 = _2606;
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_61_pred = _2605;
                    frontier_phi_61_pred_1 = _2610;
                    frontier_phi_61_pred_2 = _2609;
                    frontier_phi_61_pred_3 = _2608;
                    frontier_phi_61_pred_4 = _2607;
                    frontier_phi_61_pred_5 = _2606;
                }
                _2405 = frontier_phi_61_pred;
                _2415 = frontier_phi_61_pred_1;
                _2413 = frontier_phi_61_pred_2;
                _2411 = frontier_phi_61_pred_3;
                _2409 = frontier_phi_61_pred_4;
                _2407 = frontier_phi_61_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2405;
                    _2550 = _2407;
                    _2551 = _2409;
                    _2552 = _2411;
                    _2553 = _2413;
                    _2554 = _2415;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        if (((4294967295u << _2421) & _2303) == 0u)
        {
            _2517 = _2404;
            _2519 = _2406;
            _2521 = _2408;
            _2523 = _2410;
            _2525 = _2412;
            _2527 = _2414;
        }
        else
        {
            float _2542 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
            float _2543 = _2542 * _2257;
            float _2544 = _2542 * _2258;
            float _2545 = _2542 * _2259;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2656 = _2404;
                float _2657 = _2406;
                float _2658 = _2408;
                float _2659 = _2410;
                float _2660 = _2412;
                float _2661 = _2414;
                uint _2662 = _2421;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2672)
                    {
                        frontier_phi_67_pred = _2659;
                        frontier_phi_67_pred_1 = _2660;
                        frontier_phi_67_pred_2 = _2661;
                        frontier_phi_67_pred_3 = _2658;
                        frontier_phi_67_pred_4 = _2657;
                        frontier_phi_67_pred_5 = _2656;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _2869 = _2656;
                        float _2870 = _2657;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        uint _2875 = _2671;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2945;
                        vec4 _2961;
                        float _3008;
                        bool _3009;
                        for (;;)
                        {
                            uint _2886 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2932 = (_2886 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2948 = (_2886 * 40u) + 20u;
                            _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            uint _2964 = (_2886 * 40u) + 24u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2983 = (_2886 * 40u) + 28u;
                            vec4 _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _3008 = fma(_2259, _2996.z, fma(_2258, _2996.y, _2996.x * _2257)) + _2996.w;
                            _3009 = !((fma(_2259, _2977.z, fma(_2258, _2977.y, _2977.x * _2257)) + _2977.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3009)
                            {
                                float _3036 = _2901.x - _2257;
                                float _3037 = _2901.y - _2258;
                                float _3038 = _2901.z - _2259;
                                float _3039 = dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038));
                                float _3042 = inversesqrt(_3039);
                                float _3043 = _3042 * _3036;
                                float _3044 = _3042 * _3037;
                                float _3045 = _3042 * _3038;
                                float _3049 = 1.0 - (_3039 / (_2902 * _2902));
                                float _4085 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3054 = sqrt(_3039) * _2917.w;
                                float _3056 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                                float _3057 = _3056 * _3056;
                                float _3060 = ((1.0 - _3057) * dot(vec3(_3043, _3044, _3045), vec3(_534, _537, _540))) + _3057;
                                float _3063 = _3054 * _3054;
                                float _3067 = (fma(_2259, _2945.z, fma(_2258, _2945.y, _2945.x * _2257)) + _2945.w) / _3008;
                                float _3068 = (fma(_2259, _2961.z, fma(_2258, _2961.y, _2961.x * _2257)) + _2961.w) / _3008;
                                float _3072 = 1.0 - dot(vec2(_3067, _3068), vec2(_3067, _3068));
                                float _4101 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3074 = _3073 * (((isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))) * _3050) / ((_3063 * 0.699999988079071044921875) + 1.0));
                                float _3086 = exp2(log2(1.0 / ((_3063 * 3.5) + 5.0)) * 0.25);
                                float _3087 = 1.0 - _594;
                                float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                                float _3095 = _3094 * _3094;
                                float _3096 = _3095 * _3095;
                                float _3097 = _3043 - _2543;
                                float _3098 = _3044 - _2544;
                                float _3099 = _3045 - _2545;
                                float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                                float _3107 = dot(vec3(_534, _537, _540), vec3((-0.0) - _2543, (-0.0) - _2544, (-0.0) - _2545));
                                float _4112 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3110 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3111 = dot(vec3(_534, _537, _540), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                                float _4123 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3114 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                                float _3119 = _3056 * _3095;
                                float _3120 = _3119 * _3119;
                                float _3126 = ((1.0 - _3120) * dot(vec3(_534, _537, _540), vec3(_3043, _3044, _3045))) + _3120;
                                float _4134 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3128 = 1.0 - _3095;
                                float _3138 = (0.5 / (((_3127 * ((_3110 * _3128) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3095) * _3110))) * _3127;
                                float _4145 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3148 = (_3073 * _3050) * (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_3118 * _3118) * ((_3063 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3148 * _2929.x;
                                frontier_phi_73_pred_1 = _3148 * _2929.y;
                                frontier_phi_73_pred_2 = _3074 * _2917.z;
                                frontier_phi_73_pred_3 = _3074 * _2917.y;
                                frontier_phi_73_pred_4 = _3074 * _2917.x;
                                frontier_phi_73_pred_5 = _3148 * _2929.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3152 = frontier_phi_73_pred;
                            _3153 = frontier_phi_73_pred_1;
                            _3157 = frontier_phi_73_pred_2;
                            _3156 = frontier_phi_73_pred_3;
                            _3155 = frontier_phi_73_pred_4;
                            _3154 = frontier_phi_73_pred_5;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2856 = _3152 + _2869;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2859;
                        frontier_phi_67_pred_1 = _2860;
                        frontier_phi_67_pred_2 = _2861;
                        frontier_phi_67_pred_3 = _2858;
                        frontier_phi_67_pred_4 = _2857;
                        frontier_phi_67_pred_5 = _2856;
                    }
                    _2524 = frontier_phi_67_pred;
                    _2526 = frontier_phi_67_pred_1;
                    _2528 = frontier_phi_67_pred_2;
                    _2522 = frontier_phi_67_pred_3;
                    _2520 = frontier_phi_67_pred_4;
                    _2518 = frontier_phi_67_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2518;
                        _2657 = _2520;
                        _2658 = _2522;
                        _2659 = _2524;
                        _2660 = _2526;
                        _2661 = _2528;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2526;
                frontier_phi_55_56_ladder_1 = _2528;
                frontier_phi_55_56_ladder_2 = _2524;
                frontier_phi_55_56_ladder_3 = _2522;
                frontier_phi_55_56_ladder_4 = _2520;
                frontier_phi_55_56_ladder_5 = _2518;
            }
            else
            {
                frontier_phi_55_56_ladder = _2412;
                frontier_phi_55_56_ladder_1 = _2414;
                frontier_phi_55_56_ladder_2 = _2410;
                frontier_phi_55_56_ladder_3 = _2408;
                frontier_phi_55_56_ladder_4 = _2406;
                frontier_phi_55_56_ladder_5 = _2404;
            }
            _2517 = frontier_phi_55_56_ladder_5;
            _2519 = frontier_phi_55_56_ladder_4;
            _2521 = frontier_phi_55_56_ladder_3;
            _2523 = frontier_phi_55_56_ladder_2;
            _2525 = frontier_phi_55_56_ladder;
            _2527 = frontier_phi_55_56_ladder_1;
        }
        float _2532 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _2316 = (_2532 * _2523) + _1768;
        _2318 = (_2532 * _2525) + _1770;
        _2320 = (_2532 * _2527) + _1772;
        _2322 = ((_2517 * 0.039999999105930328369140625) * _2532) + _2101;
        _2324 = ((_2519 * 0.039999999105930328369140625) * _2532) + _2103;
        _2326 = ((_2521 * 0.039999999105930328369140625) * _2532) + _2105;
    }
    else
    {
        _2316 = _1768;
        _2318 = _1770;
        _2320 = _1772;
        _2322 = _2101;
        _2324 = _2103;
        _2326 = _2105;
    }
    float _4161 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4172 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4183 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    uint _2346 = _553 + 6u;
    float _2354 = _515 / cbSceneParam._m0[86u].x;
    float _2355 = _516 / cbSceneParam._m0[86u].y;
    vec4 _2369 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, (log2((isnan(cbSceneParam._m0[77u].w) ? _448 : (isnan(_448) ? cbSceneParam._m0[77u].w : min(_448, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2371 = _2369.x;
    float _2372 = _2369.y;
    float _2373 = _2369.z;
    float _2374 = _2369.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_448 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_448) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _448 : min(cbSceneParam._m0[80u].w, _448));
        float _2430 = _2429 / _448;
        float _2441 = _2430 * _500;
        float _2442 = _501 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2445 = _2430 * _502;
        float _2447 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2448 = _2447 + cbSceneParam._m0[79u].w;
        float _2449 = cbSceneParam._m0[79u].w - _2442;
        float _2455 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2445 * _2445));
        float _2458 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2455;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2618;
        if (abs((_2443 - _2447) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2618 = ((((_2448 > 0.0) ? exp2(_2463 * _2448) : (2.0 - exp2(_2465 * _2448))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2458;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : max(_2448, _2449));
            float _2580 = isnan(_2449) ? _2448 : (isnan(_2448) ? _2449 : min(_2448, _2449));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2618 = ((abs(_2455 / _2443) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2465 * _2589) - exp2(_2465 * _2590)) * _2578))) + (_2458 * cbSceneParam._m0[80u].z);
        }
        vec4 _2620 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2354, _2355, 1.0), 0.0);
        float _2629 = exp2((_2618 * (-1.44269502162933349609375)) * (1.0 - _2620.w));
        float _2630 = log2(_2629);
        float _2646 = log2(_2374);
        _2467 = (exp2(_2646 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].x)) * _2620.x) / cbSceneParam._m0[78u].x)) + _2371;
        _2469 = (exp2(_2646 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].y)) * _2620.y) / cbSceneParam._m0[78u].y)) + _2372;
        _2471 = (exp2(_2646 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2630 * cbSceneParam._m0[78u].z)) * _2620.z) / cbSceneParam._m0[78u].z)) + _2373;
        _2473 = _2629 * _2374;
    }
    else
    {
        _2467 = _2371;
        _2469 = _2372;
        _2471 = _2373;
        _2473 = _2374;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2316 + ((isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))) * _578))) + ((_2322 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2318 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _578))) + ((_2324 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2320 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _578))) + ((_2326 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _1385)) * cbPerFrame._m0[3u].x));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2346].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2346].w;
}


