#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1019;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _307 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3355 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[10u].x) - _251)) + _251;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[10u].y) - _252)) + _252;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[10u].z) - _253)) + _253;
    vec4 _341 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _370 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3366 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _378 = (_371 * ((_341.x * cbMtdParam._m0[11u].x) - _315)) + _315;
    float _379 = (_371 * ((_341.y * cbMtdParam._m0[11u].y) - _316)) + _316;
    float _380 = (_371 * ((_341.z * cbMtdParam._m0[11u].z) - _317)) + _317;
    vec4 _397 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _405 = (_397.x * 2.0) + (-1.0);
    float _407 = (_397.y * 2.0) + (-1.0);
    float _408 = dot(vec2(_405, _407), vec2(_405, _407));
    float _3377 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _413 = sqrt(1.0 - (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))));
    float _414 = _397.z * cbMtdParam._m0[13u].y;
    vec4 _427 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _441 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_427.z * cbMtdParam._m0[13u].x) - _414)) + _414;
    vec4 _455 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _469 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_455.z * cbMtdParam._m0[13u].z) - _441)) + _441;
    float _482 = (((((_427.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _405) + ((((_455.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _483 = (((((_427.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _407) + ((((_455.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _486 = fma(_413, _215 * NORMAL.x, fma(_483, _222 * TANGENT.x, (_208 * _200) * _482));
    float _489 = fma(_413, _215 * NORMAL.y, fma(_483, _222 * TANGENT.y, (_208 * _201) * _482));
    float _492 = fma(_413, _215 * NORMAL.z, fma(_483, _222 * TANGENT.z, (_208 * _202) * _482));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    float _497 = _496 * _486;
    float _498 = _496 * _489;
    float _499 = _496 * _492;
    float _3388 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _500 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3410 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3421 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _569 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _559);
    float _570 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _559);
    float _571 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _559);
    float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
    float _576 = _569 * _575;
    float _577 = _570 * _575;
    float _578 = _571 * _575;
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_499, cbSceneParam._m0[5u].z, fma(_498, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _497));
    float _606 = fma(_499, cbSceneParam._m0[6u].z, fma(_498, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _497));
    float _609 = fma(_499, cbSceneParam._m0[7u].z, fma(_498, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _497));
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _624 = (_622 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3432 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _647 = _644.x * TEXCOORD_5.w;
    float _648 = dot(vec3(_497, _498, _499), vec3(_576, _577, _578));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _497) - _576;
    float _656 = (_651 * _498) - _577;
    float _657 = (_651 * _499) - _578;
    float _661 = abs(dot(vec3(_576, _577, _578), vec3(_497, _498, _499)));
    float _3465 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_500);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1018;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _743 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _747 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _751 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _776 = _708 + _497;
        float _777 = _712 + _498;
        float _778 = _716 + _499;
        float _788 = fma(_778, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776)) - _743;
        float _789 = fma(_778, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776)) - _747;
        float _790 = fma(_778, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776)) - _751;
        float _794 = inversesqrt(dot(vec3(_788, _789, _790), vec3(_788, _789, _790)));
        float _807 = ((_794 * _788) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_743 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_794 * _789) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_747 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_794 * _790) / cbModelParam._m0[34u].z) + ((((((_751 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_807, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_812.x + (-0.5));
        float _848 = _846 * (_812.y + (-0.5));
        float _849 = _846 * (_812.z + (-0.5));
        float _856 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_819.x + (-0.5));
        float _858 = _856 * (_819.y + (-0.5));
        float _859 = _856 * (_819.z + (-0.5));
        float _866 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_826.x + (-0.5));
        float _868 = _866 * (_826.y + (-0.5));
        float _869 = _866 * (_826.z + (-0.5));
        float _876 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_833.x + (-0.5));
        float _878 = _876 * (_833.y + (-0.5));
        float _879 = _876 * (_833.z + (-0.5));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = _847 * 0.5;
        float _884 = _857 * 0.5;
        float _885 = _867 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _900 = (dot(vec3(_497, _498, _499), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _910 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3513 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_912 + 1.0))) + _917) * _880;
        float _927 = _848 * 0.5;
        float _928 = _858 * 0.5;
        float _929 = _868 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_497, _498, _499), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3546 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_954 + 1.0))) + _959) * _881;
        float _969 = _849 * 0.5;
        float _970 = _859 * 0.5;
        float _971 = _869 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_497, _498, _499), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3579 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_996 + 1.0))) + _1001) * _882;
        _1018 = _849;
        _1020 = _848;
        _1021 = _847;
        _1022 = _859;
        _1023 = _858;
        _1024 = _857;
        _1025 = _869;
        _1026 = _868;
        _1027 = _867;
        _1028 = _882;
        _1029 = _881;
        _1030 = _880;
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
    }
    else
    {
        _1018 = _1019;
        _1020 = _1019;
        _1021 = _1019;
        _1022 = _1019;
        _1023 = _1019;
        _1024 = _1019;
        _1025 = _1019;
        _1026 = _1019;
        _1027 = _1019;
        _1028 = _1019;
        _1029 = _1019;
        _1030 = _1019;
        _1031 = 0.0;
        _1032 = 0.0;
        _1033 = 0.0;
    }
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1059 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1063 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1067 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1090 = _708 + _497;
        float _1091 = _712 + _498;
        float _1092 = _716 + _499;
        float _1102 = fma(_1092, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1059 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1063 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[35u].z) + ((((((_1067 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1158 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1125.x + (-0.5));
        float _1160 = _1158 * (_1125.y + (-0.5));
        float _1161 = _1158 * (_1125.z + (-0.5));
        float _1168 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1132.x + (-0.5));
        float _1170 = _1168 * (_1132.y + (-0.5));
        float _1171 = _1168 * (_1132.z + (-0.5));
        float _1178 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1139.x + (-0.5));
        float _1180 = _1178 * (_1139.y + (-0.5));
        float _1181 = _1178 * (_1139.z + (-0.5));
        float _1188 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1146.x + (-0.5));
        float _1190 = _1188 * (_1146.y + (-0.5));
        float _1191 = _1188 * (_1146.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_497, _498, _499), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3642 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1222 + 1.0))) + _1227) * _1192;
        float _1237 = _1160 * 0.5;
        float _1238 = _1170 * 0.5;
        float _1239 = _1180 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_497, _498, _499), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3675 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1264 + 1.0))) + _1269) * _1193;
        float _1279 = _1161 * 0.5;
        float _1280 = _1171 * 0.5;
        float _1281 = _1181 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_497, _498, _499), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3708 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1306 + 1.0))) + _1311) * _1194;
        _1328 = _1161;
        _1329 = _1160;
        _1330 = _1159;
        _1331 = _1171;
        _1332 = _1170;
        _1333 = _1169;
        _1334 = _1181;
        _1335 = _1180;
        _1336 = _1179;
        _1337 = _1194;
        _1338 = _1193;
        _1339 = _1192;
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1341 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1019;
        _1329 = _1019;
        _1330 = _1019;
        _1331 = _1019;
        _1332 = _1019;
        _1333 = _1019;
        _1334 = _1019;
        _1335 = _1019;
        _1336 = _1019;
        _1337 = _1019;
        _1338 = _1019;
        _1339 = _1019;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1031)) + _1031;
    float _1353 = (cbModelParam._m0[1u].x * (_1341 - _1032)) + _1032;
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1375 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1378 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1381 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1352));
    float _1396 = _655 * 0.5;
    float _1397 = _656 * 0.5;
    float _1398 = _657 * 0.5;
    float _1399 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1402 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1329, _1332, _1335, _1338));
    float _1405 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1439;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1412 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1018, _1022, _1025, _1028));
        float _1416 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1420 = dot(vec4(_1396, _1397, _1398, 1.0), vec4(_1021, _1024, _1027, _1030));
        float _1427 = dot(vec4(cbModelParam._m0[39u]), vec4(_1396, _1397, _1398, 1.0));
        _1439 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1439 = 1.0;
    }
    float _1450;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1441 = dot(vec4(cbModelParam._m0[40u]), vec4(_1396, _1397, _1398, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1441) ? 0.0 : (isnan(0.0) ? _1441 : max(0.0, _1441))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1454 = (_1450 * cbModelParam._m0[1u].x) + (_1439 * (1.0 - cbModelParam._m0[1u].x));
    float _1464 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _500);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1464 : min(cbModelParam._m0[25u].z, _1464));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1526 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1529 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1557;
        if (_1523 > 0.0)
        {
            _1557 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1557 = frontier_phi_14_12_ladder;
        }
        float _1782;
        if (_1526 > 0.0)
        {
            _1782 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1782 = frontier_phi_23_19_ladder;
        }
        float _2028;
        if (_1529 > 0.0)
        {
            _2028 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2028 = frontier_phi_35_30_ladder;
        }
        float _2030 = isnan(_1782) ? _1557 : (isnan(_1557) ? _1782 : min(_1557, _1782));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1523) + _1512;
        float _2036 = (_2031 * _1526) + _1516;
        float _2037 = (_2031 * _1529) + _1520;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2038;
        float _2042 = _2038 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 > _2042) || ((_2036 < _2040) || ((_2035 < _2040) || (_2035 > _2042))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_13_35_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_13_35_ladder_2;
        _1547 = frontier_phi_13_35_ladder_1;
        _1549 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1465);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1553 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _500);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1553 : min(cbModelParam._m0[25u].w, _1553));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1625 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1628 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1787;
        if (_1622 > 0.0)
        {
            _1787 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1787 = frontier_phi_25_21_ladder;
        }
        float _2055;
        if (_1625 > 0.0)
        {
            _2055 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2055 = frontier_phi_37_32_ladder;
        }
        float _2260;
        if (_1628 > 0.0)
        {
            _2260 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2260 = frontier_phi_46_43_ladder;
        }
        float _2262 = isnan(_2055) ? _1787 : (isnan(_1787) ? _2055 : min(_1787, _2055));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1622) + _1611;
        float _2268 = (_2263 * _1625) + _1615;
        float _2269 = (_2263 * _1628) + _1619;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2270;
        float _2273 = _2270 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2269 > _2273) || ((_2269 < _2271) || ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 < _2271) || (_2267 > _2273))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2269, cbModelParam._m0[17u].z, fma(_2268, cbModelParam._m0[17u].y, _2267 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2269, cbModelParam._m0[18u].z, fma(_2268, cbModelParam._m0[18u].y, _2267 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2269, cbModelParam._m0[19u].z, fma(_2268, cbModelParam._m0[19u].y, _2267 * cbModelParam._m0[19u].x))), _1554);
            frontier_phi_22_46_ladder = _2468.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2468.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2468.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_22_46_ladder_2;
        _1649 = frontier_phi_22_46_ladder_1;
        _1651 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1554);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_676 * _663)) * _647;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1545)) + _1545);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1547)) + _1547);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    vec4 _1683 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_584, _585));
    float _1685 = _1683.w;
    float _1697 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1685);
    float _1698 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1685);
    float _1699 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1685);
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1713 = _647 + (-1.0);
    float _1718 = (cbLight._m0[_1706].x * _1713) + 1.0;
    float _1719 = (cbLight._m0[_1706].y * _1713) + 1.0;
    float _1720 = (cbLight._m0[_1706].z * _1713) + 1.0;
    float _1721 = (cbLight._m0[_1706].w * _1713) + 1.0;
    uint _1722 = _1705 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1705 + 4u;
    float _1741 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1745 = _1705 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_497, _498, _499));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_497, _498, _499));
    float _3844 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3855 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1722].x * _1728) * _1766) + (((cbLight._m0[_1732].x * _1697) * _1741) * _1764);
    float _1774 = ((_1728 * cbLight._m0[_1722].y) * _1766) + (((cbLight._m0[_1732].y * _1698) * _1741) * _1764);
    float _1775 = ((_1728 * cbLight._m0[_1722].z) * _1766) + (((cbLight._m0[_1732].z * _1699) * _1741) * _1764);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1705 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1773;
        _1794 = _1774;
        _1796 = _1775;
    }
    else
    {
        uint _1800 = _1705 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1705 + 2u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3866 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1819 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1775;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _1999 = _1705 + 7u;
        float _2015 = (dot(vec3(cbLight._m0[_1705 + 3u].xyz), vec3(_497, _498, _499)) * 0.5) + 0.5;
        float _2016 = _2015 * _2015;
        float _3882 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _2018 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1837 = (((cbLight._m0[_1999].x * 0.3183098733425140380859375) * _2017) * _2018) + _1792;
        _1839 = (((cbLight._m0[_1999].y * 0.3183098733425140380859375) * _2017) * _2018) + _1794;
        _1841 = (((cbLight._m0[_1999].z * 0.3183098733425140380859375) * _2017) * _2018) + _1796;
    }
    uint _1844 = _1705 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _500) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1705].x + _576;
    float _1860 = cbLight._m0[_1705].y + _577;
    float _1861 = cbLight._m0[_1705].z + _578;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_1705].xyz));
    float _3898 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _1873 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1874 = dot(vec3(_497, _498, _499), vec3(_1866, _1867, _1868));
    float _3920 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1866, _1867, _1868));
    float _3931 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1897 = (exp2(log2(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = 1.0 - _1858;
    float _1909 = (0.5 / (((_1873 * ((_1872 * _1898) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1898) + _1858) * _1872))) * _1872;
    float _3942 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1911 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1925 = _1705 + 9u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _500) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1745].x + _576;
    float _1939 = cbLight._m0[_1745].y + _577;
    float _1940 = cbLight._m0[_1745].z + _578;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_1745].xyz));
    float _3953 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1952 = dot(vec3(_497, _498, _499), vec3(_1945, _1946, _1947));
    float _3964 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1945, _1946, _1947));
    float _3975 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1937 * _1937;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = 1.0 - _1937;
    float _1984 = (0.5 / (((_1873 * ((_1951 * _1974) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1974) + _1937) * _1951))) * _1951;
    float _3986 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    float _1996 = (((_1973 * cbLight._m0[_1925].x) * _1986) * _1728) + ((((cbLight._m0[_1844].x * _1697) * _1897) * _1911) * _1741);
    float _1997 = (((_1973 * cbLight._m0[_1925].y) * _1986) * _1728) + ((((cbLight._m0[_1844].y * _1698) * _1897) * _1911) * _1741);
    float _1998 = (((_1973 * cbLight._m0[_1925].z) * _1986) * _1728) + ((((cbLight._m0[_1844].z * _1699) * _1897) * _1911) * _1741);
    float _2060;
    float _2062;
    float _2064;
    if (_1781)
    {
        _2060 = _1996;
        _2062 = _1997;
        _2064 = _1998;
    }
    else
    {
        uint _2066 = _1705 + 2u;
        uint _2070 = _1705 + 10u;
        float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _500) * 0.949999988079071044921875);
        float _2085 = _2084 * _2084;
        float _2086 = cbLight._m0[_2066].x + _576;
        float _2087 = cbLight._m0[_2066].y + _577;
        float _2088 = cbLight._m0[_2066].z + _578;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2093 = _2092 * _2086;
        float _2094 = _2092 * _2087;
        float _2095 = _2092 * _2088;
        float _2096 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2066].xyz));
        float _3997 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2100 = dot(vec3(_497, _498, _499), vec3(_2093, _2094, _2095));
        float _4008 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2103 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2104 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2093, _2094, _2095));
        float _4019 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2108 = _2085 * _2085;
        float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
        float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2122 = 1.0 - _2085;
        float _2132 = (0.5 / (((_1873 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2122) + _2085) * _2099))) * _2099;
        float _4030 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2060 = (((_2121 * cbLight._m0[_2070].x) * _2134) * _2135) + _1996;
        _2062 = (((_2121 * cbLight._m0[_2070].y) * _2134) * _2135) + _1997;
        _2064 = (((_2121 * cbLight._m0[_2070].z) * _2134) * _2135) + _1998;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1799)
    {
        _2170 = _2060;
        _2172 = _2062;
        _2174 = _2064;
    }
    else
    {
        uint _2181 = _1705 + 3u;
        uint _2185 = _1705 + 11u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _500) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _576;
        float _2202 = cbLight._m0[_2181].y + _577;
        float _2203 = cbLight._m0[_2181].z + _578;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_497, _498, _499), vec3(cbLight._m0[_2181].xyz));
        float _4046 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2215 = dot(vec3(_497, _498, _499), vec3(_2208, _2209, _2210));
        float _4057 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4068 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2237 = 1.0 - _2200;
        float _2247 = (0.5 / (((_1873 * ((_2214 * _2237) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2237) + _2200) * _2214))) * _2214;
        float _4079 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2170 = (((_2236 * cbLight._m0[_2185].x) * _2249) * _2250) + _2060;
        _2172 = (((_2236 * cbLight._m0[_2185].y) * _2249) * _2250) + _2062;
        _2174 = (((_2236 * cbLight._m0[_2185].z) * _2249) * _2250) + _2064;
    }
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_1703.y == 0u)
    {
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2325;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2325;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2325;
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.x;
        uint _2352 = uint((float(_2340.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2341))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2341)));
        float _2362 = (log2(_2328 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2363 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        uint _2366 = uint(isnan(14.0) ? _2363 : (isnan(_2363) ? 14.0 : min(_2363, 14.0)));
        uvec4 _2371 = texelFetch(g_lightClusterGridBuffer, int(((_2366 << 2u) + (_2352 << 6u)) >> 2u));
        uint _2372 = _2371.x;
        uint _2373 = _2340.z;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((((1u << ((_2373 >> 4u) & 15u)) + 4294967295u) & _2372) == 0u) || ((_2373 & 240u) == 0u))
        {
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
        }
        else
        {
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            uint _2624 = 0u;
            uint _2633;
            bool _2634;
            for (;;)
            {
                _2633 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                _2634 = _2633 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2634)
                {
                    frontier_phi_61_pred = _2618;
                    frontier_phi_61_pred_1 = _2623;
                    frontier_phi_61_pred_2 = _2622;
                    frontier_phi_61_pred_3 = _2621;
                    frontier_phi_61_pred_4 = _2620;
                    frontier_phi_61_pred_5 = _2619;
                }
                else
                {
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    uint _2748;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2633;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    for (;;)
                    {
                        uint _2752 = uint(findLSB(_2748)) + (_2624 << 5u);
                        uint _2749 = (_2748 + 4294967295u) & _2748;
                        uint _2754 = _2752 * 48u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2774 = (_2752 * 48u) + 4u;
                        vec4 _2787 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2793 = (_2752 * 48u) + 8u;
                        vec3 _2804 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2793)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2793 + 2u)).x));
                        float _2808 = _2768.x - _2326;
                        float _2809 = _2768.y - _2327;
                        float _2810 = _2768.z - _2328;
                        float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                        float _2814 = inversesqrt(_2811);
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2818 = dot(vec3(_603, _606, _609), vec3(_2815, _2816, _2817));
                        float _2823 = 1.0 - (_2811 * _2768.w);
                        float _4105 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                        float _2825 = sqrt(_2811) * _2787.w;
                        float _2828 = 1.39999997615814208984375 / (_2825 + 1.39999997615814208984375);
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2818) + _2829;
                        float _2835 = _2825 * _2825;
                        float _2839 = ((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2824) / ((_2835 * 0.699999988079071044921875) + 1.0);
                        float _2843 = (-0.0) - _2326;
                        float _2844 = (-0.0) - _2327;
                        float _2845 = (-0.0) - _2328;
                        float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2860 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                        float _2861 = 1.0 - _663;
                        float _2868 = sqrt(1.0 - ((1.0 - (_2861 * _2861)) * (1.0 - (_2860 * _2860))));
                        float _2869 = _2868 * _2868;
                        float _2870 = _2869 * _2869;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2873 = _2852 + _2817;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2881 = dot(vec3(_603, _606, _609), vec3(_2850, _2851, _2852));
                        float _4121 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2884 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2885 = dot(vec3(_603, _606, _609), vec3(_2877 * _2871, _2877 * _2872, _2877 * _2873));
                        float _4132 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2892 = ((_2888 * _2888) * (_2870 + (-1.0))) + 1.0;
                        float _2893 = _2828 * _2869;
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2818) + _2894;
                        float _4143 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2898 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2899 = 1.0 - _2869;
                        float _2909 = (0.5 / (((_2898 * ((_2884 * _2899) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2898 * _2899) + _2869) * _2884))) * _2898;
                        float _4154 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2920 = (((_2870 * 3.1415927410125732421875) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) / ((_2892 * _2892) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125))) * _2824;
                        _2677 = (_2839 * _2787.x) + _2745;
                        _2678 = (_2839 * _2787.y) + _2746;
                        _2679 = (_2839 * _2787.z) + _2747;
                        _2674 = (_2920 * _2804.x) + _2742;
                        _2675 = (_2920 * _2804.y) + _2743;
                        _2676 = (_2920 * _2804.z) + _2744;
                        if (_2749 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2749;
                        }
                    }
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                _2474 = frontier_phi_61_pred;
                _2484 = frontier_phi_61_pred_1;
                _2482 = frontier_phi_61_pred_2;
                _2480 = frontier_phi_61_pred_3;
                _2478 = frontier_phi_61_pred_4;
                _2476 = frontier_phi_61_pred_5;
                uint _2625 = _2624 + 1u;
                if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2618 = _2474;
                    _2619 = _2476;
                    _2620 = _2478;
                    _2621 = _2480;
                    _2622 = _2482;
                    _2623 = _2484;
                    _2624 = _2625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
        }
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.z;
        uint _2490 = (_2488 >> 8u) & 15u;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        if (((4294967295u << _2490) & _2372) == 0u)
        {
            _2586 = _2473;
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
            _2594 = _2481;
            _2596 = _2483;
        }
        else
        {
            float _2611 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
            float _2612 = _2611 * _2326;
            float _2613 = _2611 * _2327;
            float _2614 = _2611 * _2328;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2490 < ((_2488 >> 12u) & 15u))
            {
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2725 = _2473;
                float _2726 = _2475;
                float _2727 = _2477;
                float _2728 = _2479;
                float _2729 = _2481;
                float _2730 = _2483;
                uint _2731 = _2490;
                uint _2740;
                bool _2741;
                for (;;)
                {
                    _2740 = texelFetch(g_lightClassification, int((((_2366 << 5u) + (_2352 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                    _2741 = _2740 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2741)
                    {
                        frontier_phi_67_pred = _2728;
                        frontier_phi_67_pred_1 = _2729;
                        frontier_phi_67_pred_2 = _2730;
                        frontier_phi_67_pred_3 = _2727;
                        frontier_phi_67_pred_4 = _2726;
                        frontier_phi_67_pred_5 = _2725;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        uint _2944 = _2740;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3014;
                        vec4 _3030;
                        float _3077;
                        bool _3078;
                        for (;;)
                        {
                            uint _2955 = ((_2731 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3001 = (_2955 * 40u) + 16u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2955 * 40u) + 20u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2955 * 40u) + 24u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3052 = (_2955 * 40u) + 28u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3077 = fma(_2328, _3065.z, fma(_2327, _3065.y, _3065.x * _2326)) + _3065.w;
                            _3078 = !((fma(_2328, _3046.z, fma(_2327, _3046.y, _3046.x * _2326)) + _3046.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3078)
                            {
                                float _3105 = _2970.x - _2326;
                                float _3106 = _2970.y - _2327;
                                float _3107 = _2970.z - _2328;
                                float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                                float _3111 = inversesqrt(_3108);
                                float _3112 = _3111 * _3105;
                                float _3113 = _3111 * _3106;
                                float _3114 = _3111 * _3107;
                                float _3118 = 1.0 - (_3108 / (_2971 * _2971));
                                float _4165 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3123 = sqrt(_3108) * _2986.w;
                                float _3125 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                                float _3126 = _3125 * _3125;
                                float _3129 = ((1.0 - _3126) * dot(vec3(_3112, _3113, _3114), vec3(_603, _606, _609))) + _3126;
                                float _3132 = _3123 * _3123;
                                float _3136 = (fma(_2328, _3014.z, fma(_2327, _3014.y, _3014.x * _2326)) + _3014.w) / _3077;
                                float _3137 = (fma(_2328, _3030.z, fma(_2327, _3030.y, _3030.x * _2326)) + _3030.w) / _3077;
                                float _3141 = 1.0 - dot(vec2(_3136, _3137), vec2(_3136, _3137));
                                float _4181 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3143 = _3142 * (((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3119) / ((_3132 * 0.699999988079071044921875) + 1.0));
                                float _3155 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                                float _3156 = 1.0 - _663;
                                float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                                float _3164 = _3163 * _3163;
                                float _3165 = _3164 * _3164;
                                float _3166 = _3112 - _2612;
                                float _3167 = _3113 - _2613;
                                float _3168 = _3114 - _2614;
                                float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                                float _3176 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2612, (-0.0) - _2613, (-0.0) - _2614));
                                float _4192 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3180 = dot(vec3(_603, _606, _609), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                                float _4203 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                                float _3188 = _3125 * _3164;
                                float _3189 = _3188 * _3188;
                                float _3195 = ((1.0 - _3189) * dot(vec3(_603, _606, _609), vec3(_3112, _3113, _3114))) + _3189;
                                float _4214 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3197 = 1.0 - _3164;
                                float _3207 = (0.5 / (((_3196 * ((_3179 * _3197) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3164) * _3179))) * _3196;
                                float _4225 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3217 = (_3142 * _3119) * (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_3187 * _3187) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3217 * _2998.x;
                                frontier_phi_73_pred_1 = _3217 * _2998.y;
                                frontier_phi_73_pred_2 = _3143 * _2986.z;
                                frontier_phi_73_pred_3 = _3143 * _2986.y;
                                frontier_phi_73_pred_4 = _3143 * _2986.x;
                                frontier_phi_73_pred_5 = _3217 * _2998.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_73_pred;
                            _3222 = frontier_phi_73_pred_1;
                            _3226 = frontier_phi_73_pred_2;
                            _3225 = frontier_phi_73_pred_3;
                            _3224 = frontier_phi_73_pred_4;
                            _3223 = frontier_phi_73_pred_5;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            _2930 = _3226 + _2943;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2928;
                        frontier_phi_67_pred_1 = _2929;
                        frontier_phi_67_pred_2 = _2930;
                        frontier_phi_67_pred_3 = _2927;
                        frontier_phi_67_pred_4 = _2926;
                        frontier_phi_67_pred_5 = _2925;
                    }
                    _2593 = frontier_phi_67_pred;
                    _2595 = frontier_phi_67_pred_1;
                    _2597 = frontier_phi_67_pred_2;
                    _2591 = frontier_phi_67_pred_3;
                    _2589 = frontier_phi_67_pred_4;
                    _2587 = frontier_phi_67_pred_5;
                    uint _2732 = _2731 + 1u;
                    if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2725 = _2587;
                        _2726 = _2589;
                        _2727 = _2591;
                        _2728 = _2593;
                        _2729 = _2595;
                        _2730 = _2597;
                        _2731 = _2732;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2595;
                frontier_phi_55_56_ladder_1 = _2597;
                frontier_phi_55_56_ladder_2 = _2593;
                frontier_phi_55_56_ladder_3 = _2591;
                frontier_phi_55_56_ladder_4 = _2589;
                frontier_phi_55_56_ladder_5 = _2587;
            }
            else
            {
                frontier_phi_55_56_ladder = _2481;
                frontier_phi_55_56_ladder_1 = _2483;
                frontier_phi_55_56_ladder_2 = _2479;
                frontier_phi_55_56_ladder_3 = _2477;
                frontier_phi_55_56_ladder_4 = _2475;
                frontier_phi_55_56_ladder_5 = _2473;
            }
            _2586 = frontier_phi_55_56_ladder_5;
            _2588 = frontier_phi_55_56_ladder_4;
            _2590 = frontier_phi_55_56_ladder_3;
            _2592 = frontier_phi_55_56_ladder_2;
            _2594 = frontier_phi_55_56_ladder;
            _2596 = frontier_phi_55_56_ladder_1;
        }
        float _2601 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2385 = (_2601 * _2592) + _1837;
        _2387 = (_2601 * _2594) + _1839;
        _2389 = (_2601 * _2596) + _1841;
        _2391 = ((_2586 * 0.039999999105930328369140625) * _2601) + _2170;
        _2393 = ((_2588 * 0.039999999105930328369140625) * _2601) + _2172;
        _2395 = ((_2590 * 0.039999999105930328369140625) * _2601) + _2174;
    }
    else
    {
        _2385 = _1837;
        _2387 = _1839;
        _2389 = _1841;
        _2391 = _2170;
        _2393 = _2172;
        _2395 = _2174;
    }
    float _4241 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4252 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4263 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    uint _2415 = _622 + 6u;
    float _2423 = _584 / cbSceneParam._m0[86u].x;
    float _2424 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2438 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2440 = _2438.x;
    float _2441 = _2438.y;
    float _2442 = _2438.z;
    float _2443 = _2438.w;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2498 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2499 = _2498 / _519;
        float _2510 = _2499 * _569;
        float _2511 = _570 * _2499;
        float _2512 = (-0.0) - _2511;
        float _2514 = _2499 * _571;
        float _2516 = (cbSceneParam._m0[77u].w * _2512) / _2498;
        float _2517 = _2516 + cbSceneParam._m0[79u].w;
        float _2518 = cbSceneParam._m0[79u].w - _2511;
        float _2524 = sqrt(((_2510 * _2510) + (_2511 * _2511)) + (_2514 * _2514));
        float _2527 = (1.0 - (cbSceneParam._m0[77u].w / _2498)) * _2524;
        float _2532 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2534 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2687;
        if (abs((_2512 - _2516) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2687 = ((((_2517 > 0.0) ? exp2(_2532 * _2517) : (2.0 - exp2(_2534 * _2517))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2527;
        }
        else
        {
            float _2647 = 1.0 / cbSceneParam._m0[80u].x;
            float _2648 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : max(_2517, _2518));
            float _2649 = isnan(_2518) ? _2517 : (isnan(_2517) ? _2518 : min(_2517, _2518));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            float _2659 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : min(_2649, 0.0));
            _2687 = ((abs(_2524 / _2512) * cbSceneParam._m0[80u].y) * ((((_2658 - _2659) * 2.0) - ((exp2(_2532 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)))) - exp2(_2532 * (isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0))))) * _2647)) - ((exp2(_2534 * _2658) - exp2(_2534 * _2659)) * _2647))) + (_2527 * cbSceneParam._m0[80u].z);
        }
        vec4 _2689 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, 1.0), 0.0);
        float _2698 = exp2((_2687 * (-1.44269502162933349609375)) * (1.0 - _2689.w));
        float _2699 = log2(_2698);
        float _2715 = log2(_2443);
        _2536 = (exp2(_2715 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].x)) * _2689.x) / cbSceneParam._m0[78u].x)) + _2440;
        _2538 = (exp2(_2715 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].y)) * _2689.y) / cbSceneParam._m0[78u].y)) + _2441;
        _2540 = (exp2(_2715 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2699 * cbSceneParam._m0[78u].z)) * _2689.z) / cbSceneParam._m0[78u].z)) + _2442;
        _2542 = _2698 * _2443;
    }
    else
    {
        _2536 = _2440;
        _2538 = _2441;
        _2540 = _2442;
        _2542 = _2443;
    }
    float _2554 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2555 = _2554 == 3.0;
    float _2556 = log2(_2542);
    float _2563 = exp2(_2556 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2385 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _647))) + ((_2391 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2564 = exp2(_2556 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2387 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _647))) + ((_2393 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2565 = exp2(_2556 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2389 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _647))) + ((_2395 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1454)) * cbPerFrame._m0[3u].x));
    float _2574 = (_2554 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2574 * (_2555 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.y = _2574 * (_2555 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.z = _2574 * (_2555 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2540)));
    SV_Target.w = cbInstanceData._m0[_2415].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2415].w;
}


