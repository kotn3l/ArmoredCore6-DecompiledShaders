#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _914;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _297 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3228 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _298 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _305 = (_298 * ((_266.x * cbMtdParam._m0[10u].x) - _241)) + _241;
    float _306 = (_298 * ((_266.y * cbMtdParam._m0[10u].y) - _242)) + _242;
    float _307 = (_298 * ((_266.z * cbMtdParam._m0[10u].z) - _243)) + _243;
    vec4 _324 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3239 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))));
    float _341 = _324.z * cbMtdParam._m0[13u].y;
    vec4 _354 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _368 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_354.z * cbMtdParam._m0[13u].x) - _341)) + _341;
    float _374 = ((((_354.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _332;
    float _375 = ((((_354.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _334;
    float _378 = fma(_340, _205 * NORMAL.x, fma(_375, _212 * TANGENT.x, (_198 * _190) * _374));
    float _381 = fma(_340, _205 * NORMAL.y, fma(_375, _212 * TANGENT.y, (_198 * _191) * _374));
    float _384 = fma(_340, _205 * NORMAL.z, fma(_375, _212 * TANGENT.z, (_198 * _192) * _374));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3250 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _392 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3272 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3283 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _411 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    float _477 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _478 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _498 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _501 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _504 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = (_517 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3294 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _3316 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    vec4 _539 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _477, cbSceneParam._m0[86u].y * _478));
    float _542 = _539.x * TEXCOORD_5.w;
    float _543 = dot(vec3(_389, _390, _391), vec3(_469, _470, _471));
    float _546 = _543 * 2.0;
    float _550 = (_546 * _389) - _469;
    float _551 = (_546 * _390) - _470;
    float _552 = (_546 * _391) - _471;
    float _556 = abs(dot(vec3(_469, _470, _471), vec3(_389, _390, _391)));
    float _3327 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _558 = sqrt(_392);
    float _571 = exp2((_558 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_558 * 3.0));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _913;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _638 = fma(_611, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603));
        float _642 = fma(_611, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603));
        float _646 = fma(_611, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603));
        float _671 = _603 + _389;
        float _672 = _607 + _390;
        float _673 = _611 + _391;
        float _683 = fma(_673, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671)) - _638;
        float _684 = fma(_673, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671)) - _642;
        float _685 = fma(_673, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671)) - _646;
        float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
        float _702 = ((_689 * _683) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_638 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_689 * _684) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_642 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_689 * _685) / cbModelParam._m0[34u].z) + ((((((_646 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        float _741 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _742 = _741 * (_707.x + (-0.5));
        float _743 = _741 * (_707.y + (-0.5));
        float _744 = _741 * (_707.z + (-0.5));
        float _751 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_714.x + (-0.5));
        float _753 = _751 * (_714.y + (-0.5));
        float _754 = _751 * (_714.z + (-0.5));
        float _761 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_721.x + (-0.5));
        float _763 = _761 * (_721.y + (-0.5));
        float _764 = _761 * (_721.z + (-0.5));
        float _771 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_728.x + (-0.5));
        float _773 = _771 * (_728.y + (-0.5));
        float _774 = _771 * (_728.z + (-0.5));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = _742 * 0.5;
        float _779 = _752 * 0.5;
        float _780 = _762 * 0.5;
        float _781 = dot(vec3(_778, _779, _780), vec3(_778, _779, _780));
        float _786 = (_781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_781);
        float _795 = (dot(vec3(_389, _390, _391), vec3(_786 * _778, _786 * _779, _786 * _780)) + 1.0) * 0.5;
        float _3353 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _805 = sqrt(((_779 * _779) + (_778 * _778)) + (_780 * _780)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3364 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _807 = _806 * 2.0;
        float _811 = (1.0 - _806) / (_806 + 1.0);
        float _3375 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _821 = ((((1.0 - _812) * (_807 + 2.0)) * exp2(log2(isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * (_807 + 1.0))) + _812) * _775;
        float _822 = _743 * 0.5;
        float _823 = _753 * 0.5;
        float _824 = _763 * 0.5;
        float _825 = dot(vec3(_822, _823, _824), vec3(_822, _823, _824));
        float _830 = (_825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_825);
        float _838 = (dot(vec3(_389, _390, _391), vec3(_830 * _822, _830 * _823, _830 * _824)) + 1.0) * 0.5;
        float _3386 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _847 = sqrt(((_823 * _823) + (_822 * _822)) + (_824 * _824)) / (_776 + 9.9999997473787516355514526367188e-06);
        float _3397 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _849 = _848 * 2.0;
        float _853 = (1.0 - _848) / (_848 + 1.0);
        float _3408 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _863 = ((((1.0 - _854) * (_849 + 2.0)) * exp2(log2(isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (_849 + 1.0))) + _854) * _776;
        float _864 = _744 * 0.5;
        float _865 = _754 * 0.5;
        float _866 = _764 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _880 = (dot(vec3(_389, _390, _391), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _889 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3441 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_891 + 1.0))) + _896) * _777;
        _913 = _744;
        _915 = _743;
        _916 = _742;
        _917 = _754;
        _918 = _753;
        _919 = _752;
        _920 = _764;
        _921 = _763;
        _922 = _762;
        _923 = _777;
        _924 = _776;
        _925 = _775;
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)));
        _927 = cbModelParam._m0[36u].z * (isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0)));
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
    }
    else
    {
        _913 = _914;
        _915 = _914;
        _916 = _914;
        _917 = _914;
        _918 = _914;
        _919 = _914;
        _920 = _914;
        _921 = _914;
        _922 = _914;
        _923 = _914;
        _924 = _914;
        _925 = _914;
        _926 = 0.0;
        _927 = 0.0;
        _928 = 0.0;
    }
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _954 = fma(_611, cbModelParam._m0[30u].z, fma(_607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _603));
        float _958 = fma(_611, cbModelParam._m0[31u].z, fma(_607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _603));
        float _962 = fma(_611, cbModelParam._m0[32u].z, fma(_607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _603));
        float _985 = _603 + _389;
        float _986 = _607 + _390;
        float _987 = _611 + _391;
        float _997 = fma(_987, cbModelParam._m0[30u].z, fma(_986, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _985)) - _954;
        float _998 = fma(_987, cbModelParam._m0[31u].z, fma(_986, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _985)) - _958;
        float _999 = fma(_987, cbModelParam._m0[32u].z, fma(_986, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _985)) - _962;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_954 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_958 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[35u].z) + ((((((_962 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1053 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1020.x + (-0.5));
        float _1055 = _1053 * (_1020.y + (-0.5));
        float _1056 = _1053 * (_1020.z + (-0.5));
        float _1063 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1027.x + (-0.5));
        float _1065 = _1063 * (_1027.y + (-0.5));
        float _1066 = _1063 * (_1027.z + (-0.5));
        float _1073 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1034.x + (-0.5));
        float _1075 = _1073 * (_1034.y + (-0.5));
        float _1076 = _1073 * (_1034.z + (-0.5));
        float _1083 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1041.x + (-0.5));
        float _1085 = _1083 * (_1041.y + (-0.5));
        float _1086 = _1083 * (_1041.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_389, _390, _391), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3504 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1117 + 1.0))) + _1122) * _1087;
        float _1132 = _1055 * 0.5;
        float _1133 = _1065 * 0.5;
        float _1134 = _1075 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_389, _390, _391), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3537 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1159 + 1.0))) + _1164) * _1088;
        float _1174 = _1056 * 0.5;
        float _1175 = _1066 * 0.5;
        float _1176 = _1076 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_389, _390, _391), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3570 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_1201 + 1.0))) + _1206) * _1089;
        _1223 = _1056;
        _1224 = _1055;
        _1225 = _1054;
        _1226 = _1066;
        _1227 = _1065;
        _1228 = _1064;
        _1229 = _1076;
        _1230 = _1075;
        _1231 = _1074;
        _1232 = _1089;
        _1233 = _1088;
        _1234 = _1087;
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _914;
        _1224 = _914;
        _1225 = _914;
        _1226 = _914;
        _1227 = _914;
        _1228 = _914;
        _1229 = _914;
        _1230 = _914;
        _1231 = _914;
        _1232 = _914;
        _1233 = _914;
        _1234 = _914;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _927)) + _927;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _928)) + _928;
    float _1270 = fma(_1249, cbSceneParam._m0[89u].z, fma(_1248, cbSceneParam._m0[89u].y, _1247 * cbSceneParam._m0[89u].x));
    float _1273 = fma(_1249, cbSceneParam._m0[90u].z, fma(_1248, cbSceneParam._m0[90u].y, _1247 * cbSceneParam._m0[90u].x));
    float _1276 = fma(_1249, cbSceneParam._m0[91u].z, fma(_1248, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1247));
    float _1291 = _550 * 0.5;
    float _1292 = _551 * 0.5;
    float _1293 = _552 * 0.5;
    float _1294 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1297 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1300 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1334;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1307 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_913, _917, _920, _923));
        float _1311 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_915, _918, _921, _924));
        float _1315 = dot(vec4(_1291, _1292, _1293, 1.0), vec4(_916, _919, _922, _925));
        float _1322 = dot(vec4(cbModelParam._m0[39u]), vec4(_1291, _1292, _1293, 1.0));
        _1334 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1322) ? 0.0 : (isnan(0.0) ? _1322 : max(0.0, _1322))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1334 = 1.0;
    }
    float _1345;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1336 = dot(vec4(cbModelParam._m0[40u]), vec4(_1291, _1292, _1293, 1.0));
        _1345 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1336) ? 0.0 : (isnan(0.0) ? _1336 : max(0.0, _1336))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1345 = 1.0;
    }
    float _1349 = (_1345 * cbModelParam._m0[1u].x) + (_1334 * (1.0 - cbModelParam._m0[1u].x));
    float _1359 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1360 = isnan(_1359) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1359 : min(cbModelParam._m0[25u].z, _1359));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_611, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_611, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_611, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_552, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550));
        float _1422 = fma(_552, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550));
        float _1425 = fma(_552, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1453 = frontier_phi_14_12_ladder;
        }
        float _1658;
        if (_1422 > 0.0)
        {
            _1658 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1658 = frontier_phi_23_19_ladder;
        }
        float _1901;
        if (_1425 > 0.0)
        {
            _1901 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1901 = frontier_phi_35_30_ladder;
        }
        float _1903 = isnan(_1658) ? _1453 : (isnan(_1453) ? _1658 : min(_1453, _1658));
        float _1904 = isnan(_1901) ? _1903 : (isnan(_1903) ? _1901 : min(_1903, _1901));
        float _1908 = (_1904 * _1419) + _1408;
        float _1909 = (_1904 * _1422) + _1412;
        float _1910 = (_1904 * _1425) + _1416;
        float _1911 = _1904 * 9.9999997473787516355514526367188e-05;
        float _1913 = (-1.0) - _1911;
        float _1915 = _1911 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1910 > _1915) || ((_1910 < _1913) || ((_1909 > _1915) || ((_1909 < _1913) || ((_1908 < _1913) || (_1908 > _1915))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2034 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1910, cbModelParam._m0[9u].z, fma(_1909, cbModelParam._m0[9u].y, _1908 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1910, cbModelParam._m0[10u].z, fma(_1909, cbModelParam._m0[10u].y, _1908 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1910, cbModelParam._m0[11u].z, fma(_1909, cbModelParam._m0[11u].y, _1908 * cbModelParam._m0[11u].x))), _1360);
            frontier_phi_13_35_ladder = _2034.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2034.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2034.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_13_35_ladder_2;
        _1443 = frontier_phi_13_35_ladder_1;
        _1445 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_550, _551, _552), _1360);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1507 = fma(_611, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603)) + cbModelParam._m0[21u].w;
        float _1511 = fma(_611, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603)) + cbModelParam._m0[22u].w;
        float _1515 = fma(_611, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603)) + cbModelParam._m0[23u].w;
        float _1518 = fma(_552, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550));
        float _1521 = fma(_552, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550));
        float _1524 = fma(_552, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550));
        float _1663;
        if (_1518 > 0.0)
        {
            _1663 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1663 = frontier_phi_25_21_ladder;
        }
        float _1928;
        if (_1521 > 0.0)
        {
            _1928 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1928 = frontier_phi_37_32_ladder;
        }
        float _2133;
        if (_1524 > 0.0)
        {
            _2133 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2133 = frontier_phi_46_43_ladder;
        }
        float _2135 = isnan(_1928) ? _1663 : (isnan(_1663) ? _1928 : min(_1663, _1928));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1518) + _1507;
        float _2141 = (_2136 * _1521) + _1511;
        float _2142 = (_2136 * _1524) + _1515;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2143;
        float _2146 = _2143 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2142 > _2146) || ((_2142 < _2144) || ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 < _2144) || (_2140 > _2146))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2142, cbModelParam._m0[17u].z, fma(_2141, cbModelParam._m0[17u].y, _2140 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2142, cbModelParam._m0[18u].z, fma(_2141, cbModelParam._m0[18u].y, _2140 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2142, cbModelParam._m0[19u].z, fma(_2141, cbModelParam._m0[19u].y, _2140 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_22_46_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1543 = frontier_phi_22_46_ladder_2;
        _1545 = frontier_phi_22_46_ladder_1;
        _1547 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_550, _551, _552), _1450);
        _1543 = _1527.x * cbModelParam._m0[1u].z;
        _1545 = _1527.y * cbModelParam._m0[1u].z;
        _1547 = _1527.z * cbModelParam._m0[1u].z;
    }
    float _1559 = ((((1.0 - _571) * ((_558 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_571 * _558)) * _542;
    float _1560 = _1559 * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1561 = _1559 * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1562 = _1559 * ((cbModelParam._m0[1u].w * (_1547 - _1445)) + _1445);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1560 * cbSceneParam._m0[91u].x));
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_517 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1591 = _542 + (-1.0);
    float _1596 = (cbLight._m0[_1584].x * _1591) + 1.0;
    float _1597 = (cbLight._m0[_1584].y * _1591) + 1.0;
    float _1598 = (cbLight._m0[_1584].z * _1591) + 1.0;
    float _1599 = (cbLight._m0[_1584].w * _1591) + 1.0;
    uint _1600 = _1583 + 5u;
    float _1606 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1610 = _1583 + 4u;
    float _1617 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1621 = _1583 | 1u;
    float _1632 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_389, _390, _391));
    float _1635 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_389, _390, _391));
    float _3706 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _3717 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1640 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.3183098733425140380859375;
    float _1642 = (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.3183098733425140380859375;
    float _1649 = ((cbLight._m0[_1600].x * _1606) * _1642) + ((cbLight._m0[_1610].x * _1617) * _1640);
    float _1650 = ((_1606 * cbLight._m0[_1600].y) * _1642) + ((_1617 * cbLight._m0[_1610].y) * _1640);
    float _1651 = ((_1606 * cbLight._m0[_1600].z) * _1642) + ((_1617 * cbLight._m0[_1610].z) * _1640);
    uvec4 _1655 = floatBitsToUint(cbLight._m0[_1583 + 12u]);
    bool _1657 = _1655.x == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1657)
    {
        _1668 = _1649;
        _1670 = _1650;
        _1672 = _1651;
    }
    else
    {
        uint _1676 = _1583 + 6u;
        float _1692 = (dot(vec3(cbLight._m0[_1583 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1693 = _1692 * _1692;
        float _3728 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1695 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1668 = (((cbLight._m0[_1676].x * 0.3183098733425140380859375) * _1694) * _1695) + _1649;
        _1670 = (((cbLight._m0[_1676].y * 0.3183098733425140380859375) * _1694) * _1695) + _1650;
        _1672 = (((cbLight._m0[_1676].z * 0.3183098733425140380859375) * _1694) * _1695) + _1651;
    }
    bool _1675 = _1655.y == 0u;
    float _1713;
    float _1715;
    float _1717;
    if (_1675)
    {
        _1713 = _1668;
        _1715 = _1670;
        _1717 = _1672;
    }
    else
    {
        uint _1872 = _1583 + 7u;
        float _1888 = (dot(vec3(cbLight._m0[_1583 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _3744 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1891 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1713 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1668;
        _1715 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1670;
        _1717 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1672;
    }
    uint _1720 = _1583 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _392) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1583].x + _469;
    float _1736 = cbLight._m0[_1583].y + _470;
    float _1737 = cbLight._m0[_1583].z + _471;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1583].xyz));
    float _3760 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _1749 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1750 = dot(vec3(_389, _390, _391), vec3(_1742, _1743, _1744));
    float _3782 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1742, _1743, _1744));
    float _3793 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1773 = (exp2(log2(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1774 = 1.0 - _1734;
    float _1785 = (0.5 / (((_1749 * ((_1748 * _1774) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1774) + _1734) * _1748))) * _1748;
    float _3804 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1787 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1798 = _1583 + 9u;
    float _1809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _392) * 0.949999988079071044921875);
    float _1810 = _1809 * _1809;
    float _1811 = cbLight._m0[_1621].x + _469;
    float _1812 = cbLight._m0[_1621].y + _470;
    float _1813 = cbLight._m0[_1621].z + _471;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1818 = _1817 * _1811;
    float _1819 = _1817 * _1812;
    float _1820 = _1817 * _1813;
    float _1821 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1621].xyz));
    float _3815 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _1825 = dot(vec3(_389, _390, _391), vec3(_1818, _1819, _1820));
    float _3826 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1828 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1829 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1818, _1819, _1820));
    float _3837 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1833 = _1810 * _1810;
    float _1837 = ((_1828 * _1828) * (_1833 + (-1.0))) + 1.0;
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1847 = 1.0 - _1810;
    float _1857 = (0.5 / (((_1749 * ((_1824 * _1847) + _1810)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1847) + _1810) * _1824))) * _1824;
    float _3848 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_1833 / ((_1837 * _1837) * 3.141590118408203125));
    float _1869 = (((_1846 * cbLight._m0[_1798].x) * _1859) * _1606) + (((_1773 * cbLight._m0[_1720].x) * _1787) * _1617);
    float _1870 = (((_1846 * cbLight._m0[_1798].y) * _1859) * _1606) + (((_1773 * cbLight._m0[_1720].y) * _1787) * _1617);
    float _1871 = (((_1846 * cbLight._m0[_1798].z) * _1859) * _1606) + (((_1773 * cbLight._m0[_1720].z) * _1787) * _1617);
    float _1933;
    float _1935;
    float _1937;
    if (_1657)
    {
        _1933 = _1869;
        _1935 = _1870;
        _1937 = _1871;
    }
    else
    {
        uint _1939 = _1583 + 2u;
        uint _1943 = _1583 + 10u;
        float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _392) * 0.949999988079071044921875);
        float _1958 = _1957 * _1957;
        float _1959 = cbLight._m0[_1939].x + _469;
        float _1960 = cbLight._m0[_1939].y + _470;
        float _1961 = cbLight._m0[_1939].z + _471;
        float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
        float _1966 = _1965 * _1959;
        float _1967 = _1965 * _1960;
        float _1968 = _1965 * _1961;
        float _1969 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1939].xyz));
        float _3859 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1973 = dot(vec3(_389, _390, _391), vec3(_1966, _1967, _1968));
        float _3870 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1977 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1966, _1967, _1968));
        float _3881 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1981 = _1958 * _1958;
        float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
        float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1995 = 1.0 - _1958;
        float _2005 = (0.5 / (((_1749 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1995) + _1958) * _1972))) * _1972;
        float _3892 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2007 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
        float _2008 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1933 = (((_1994 * cbLight._m0[_1943].x) * _2007) * _2008) + _1869;
        _1935 = (((_1994 * cbLight._m0[_1943].y) * _2007) * _2008) + _1870;
        _1937 = (((_1994 * cbLight._m0[_1943].z) * _2007) * _2008) + _1871;
    }
    float _2043;
    float _2045;
    float _2047;
    if (_1675)
    {
        _2043 = _1933;
        _2045 = _1935;
        _2047 = _1937;
    }
    else
    {
        uint _2054 = _1583 + 3u;
        uint _2058 = _1583 + 11u;
        float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _392) * 0.949999988079071044921875);
        float _2073 = _2072 * _2072;
        float _2074 = cbLight._m0[_2054].x + _469;
        float _2075 = cbLight._m0[_2054].y + _470;
        float _2076 = cbLight._m0[_2054].z + _471;
        float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
        float _2081 = _2080 * _2074;
        float _2082 = _2080 * _2075;
        float _2083 = _2080 * _2076;
        float _2084 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2054].xyz));
        float _3908 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _2088 = dot(vec3(_389, _390, _391), vec3(_2081, _2082, _2083));
        float _3919 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2081, _2082, _2083));
        float _3930 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2096 = _2073 * _2073;
        float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
        float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2110 = 1.0 - _2073;
        float _2120 = (0.5 / (((_1749 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _2110) + _2073) * _2087))) * _2087;
        float _3941 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _2043 = (((_2109 * cbLight._m0[_2058].x) * _2122) * _2123) + _1933;
        _2045 = (((_2109 * cbLight._m0[_2058].y) * _2122) * _2123) + _1935;
        _2047 = (((_2109 * cbLight._m0[_2058].z) * _2122) * _2123) + _1937;
    }
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    if (_1581.y == 0u)
    {
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2198;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2198;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2198;
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _478) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _477) / _2214)));
        float _2235 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            float _2495 = 0.0;
            float _2496 = 0.0;
            uint _2497 = 0u;
            uint _2506;
            bool _2507;
            for (;;)
            {
                _2506 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                _2507 = _2506 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2507)
                {
                    frontier_phi_61_pred = _2491;
                    frontier_phi_61_pred_1 = _2496;
                    frontier_phi_61_pred_2 = _2495;
                    frontier_phi_61_pred_3 = _2494;
                    frontier_phi_61_pred_4 = _2493;
                    frontier_phi_61_pred_5 = _2492;
                }
                else
                {
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    uint _2621;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2493;
                    _2618 = _2494;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2506;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    float _2551;
                    float _2552;
                    for (;;)
                    {
                        uint _2625 = uint(findLSB(_2621)) + (_2497 << 5u);
                        uint _2622 = (_2621 + 4294967295u) & _2621;
                        uint _2627 = _2625 * 48u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2647 = (_2625 * 48u) + 4u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2666 = (_2625 * 48u) + 8u;
                        vec3 _2677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x));
                        float _2681 = _2641.x - _2199;
                        float _2682 = _2641.y - _2200;
                        float _2683 = _2641.z - _2201;
                        float _2684 = dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683));
                        float _2687 = inversesqrt(_2684);
                        float _2688 = _2687 * _2681;
                        float _2689 = _2687 * _2682;
                        float _2690 = _2687 * _2683;
                        float _2691 = dot(vec3(_498, _501, _504), vec3(_2688, _2689, _2690));
                        float _2696 = 1.0 - (_2684 * _2641.w);
                        float _3967 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2698 = sqrt(_2684) * _2660.w;
                        float _2701 = 1.39999997615814208984375 / (_2698 + 1.39999997615814208984375);
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * _2691) + _2702;
                        float _2708 = _2698 * _2698;
                        float _2712 = ((isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))) * _2697) / ((_2708 * 0.699999988079071044921875) + 1.0);
                        float _2716 = (-0.0) - _2199;
                        float _2717 = (-0.0) - _2200;
                        float _2718 = (-0.0) - _2201;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2723 = _2722 * _2716;
                        float _2724 = _2722 * _2717;
                        float _2725 = _2722 * _2718;
                        float _2733 = exp2(log2(1.0 / ((_2708 * 3.5) + 5.0)) * 0.25);
                        float _2734 = 1.0 - _558;
                        float _2741 = sqrt(1.0 - ((1.0 - (_2734 * _2734)) * (1.0 - (_2733 * _2733))));
                        float _2742 = _2741 * _2741;
                        float _2743 = _2742 * _2742;
                        float _2744 = _2723 + _2688;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2754 = dot(vec3(_498, _501, _504), vec3(_2723, _2724, _2725));
                        float _3983 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2757 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2758 = dot(vec3(_498, _501, _504), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746));
                        float _3994 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2765 = ((_2761 * _2761) * (_2743 + (-1.0))) + 1.0;
                        float _2766 = _2701 * _2742;
                        float _2767 = _2766 * _2766;
                        float _2770 = ((1.0 - _2767) * _2691) + _2767;
                        float _4005 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2772 = 1.0 - _2742;
                        float _2782 = (0.5 / (((_2771 * ((_2757 * _2772) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _2772) + _2742) * _2757))) * _2771;
                        float _4016 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2793 = (((_2743 * 3.1415927410125732421875) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) / ((_2765 * _2765) * ((_2708 * 2.1991131305694580078125) + 3.141590118408203125))) * _2697;
                        _2550 = (_2712 * _2660.x) + _2618;
                        _2551 = (_2712 * _2660.y) + _2619;
                        _2552 = (_2712 * _2660.z) + _2620;
                        _2547 = (_2793 * _2677.x) + _2615;
                        _2548 = (_2793 * _2677.y) + _2616;
                        _2549 = (_2793 * _2677.z) + _2617;
                        if (_2622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2549;
                            _2618 = _2550;
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2622;
                        }
                    }
                    frontier_phi_61_pred = _2547;
                    frontier_phi_61_pred_1 = _2552;
                    frontier_phi_61_pred_2 = _2551;
                    frontier_phi_61_pred_3 = _2550;
                    frontier_phi_61_pred_4 = _2549;
                    frontier_phi_61_pred_5 = _2548;
                }
                _2347 = frontier_phi_61_pred;
                _2357 = frontier_phi_61_pred_1;
                _2355 = frontier_phi_61_pred_2;
                _2353 = frontier_phi_61_pred_3;
                _2351 = frontier_phi_61_pred_4;
                _2349 = frontier_phi_61_pred_5;
                uint _2498 = _2497 + 1u;
                if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2491 = _2347;
                    _2492 = _2349;
                    _2493 = _2351;
                    _2494 = _2353;
                    _2495 = _2355;
                    _2496 = _2357;
                    _2497 = _2498;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        if (((4294967295u << _2363) & _2245) == 0u)
        {
            _2459 = _2346;
            _2461 = _2348;
            _2463 = _2350;
            _2465 = _2352;
            _2467 = _2354;
            _2469 = _2356;
        }
        else
        {
            float _2484 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _2485 = _2484 * _2199;
            float _2486 = _2484 * _2200;
            float _2487 = _2484 * _2201;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2598 = _2346;
                float _2599 = _2348;
                float _2600 = _2350;
                float _2601 = _2352;
                float _2602 = _2354;
                float _2603 = _2356;
                uint _2604 = _2363;
                uint _2613;
                bool _2614;
                for (;;)
                {
                    _2613 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2604 << 2u)) >> 2u)).x;
                    _2614 = _2613 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2614)
                    {
                        frontier_phi_67_pred = _2601;
                        frontier_phi_67_pred_1 = _2602;
                        frontier_phi_67_pred_2 = _2603;
                        frontier_phi_67_pred_3 = _2600;
                        frontier_phi_67_pred_4 = _2599;
                        frontier_phi_67_pred_5 = _2598;
                    }
                    else
                    {
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        float _2813 = _2600;
                        float _2814 = _2601;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        uint _2817 = _2613;
                        uint _2818;
                        vec4 _2843;
                        float _2844;
                        vec4 _2859;
                        vec3 _2871;
                        vec4 _2887;
                        vec4 _2903;
                        float _2950;
                        bool _2951;
                        for (;;)
                        {
                            uint _2828 = ((_2604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2817));
                            _2818 = (_2817 + 4294967295u) & _2817;
                            uint _2830 = _2828 * 40u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            _2844 = _2843.w;
                            uint _2846 = (_2828 * 40u) + 4u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            uint _2861 = (_2828 * 40u) + 8u;
                            _2871 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x));
                            uint _2874 = (_2828 * 40u) + 16u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2890 = (_2828 * 40u) + 20u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            uint _2906 = (_2828 * 40u) + 24u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2925 = (_2828 * 40u) + 28u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2950 = fma(_2201, _2938.z, fma(_2200, _2938.y, _2938.x * _2199)) + _2938.w;
                            _2951 = !((fma(_2201, _2919.z, fma(_2200, _2919.y, _2919.x * _2199)) + _2919.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2951)
                            {
                                float _2978 = _2843.x - _2199;
                                float _2979 = _2843.y - _2200;
                                float _2980 = _2843.z - _2201;
                                float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                                float _2984 = inversesqrt(_2981);
                                float _2985 = _2984 * _2978;
                                float _2986 = _2984 * _2979;
                                float _2987 = _2984 * _2980;
                                float _2991 = 1.0 - (_2981 / (_2844 * _2844));
                                float _4027 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _2996 = sqrt(_2981) * _2859.w;
                                float _2998 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                                float _2999 = _2998 * _2998;
                                float _3002 = ((1.0 - _2999) * dot(vec3(_2985, _2986, _2987), vec3(_498, _501, _504))) + _2999;
                                float _3005 = _2996 * _2996;
                                float _3009 = (fma(_2201, _2887.z, fma(_2200, _2887.y, _2887.x * _2199)) + _2887.w) / _2950;
                                float _3010 = (fma(_2201, _2903.z, fma(_2200, _2903.y, _2903.x * _2199)) + _2903.w) / _2950;
                                float _3014 = 1.0 - dot(vec2(_3009, _3010), vec2(_3009, _3010));
                                float _4043 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3016 = _3015 * (((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2992) / ((_3005 * 0.699999988079071044921875) + 1.0));
                                float _3028 = exp2(log2(1.0 / ((_3005 * 3.5) + 5.0)) * 0.25);
                                float _3029 = 1.0 - _558;
                                float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                                float _3037 = _3036 * _3036;
                                float _3038 = _3037 * _3037;
                                float _3039 = _2985 - _2485;
                                float _3040 = _2986 - _2486;
                                float _3041 = _2987 - _2487;
                                float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                                float _3049 = dot(vec3(_498, _501, _504), vec3((-0.0) - _2485, (-0.0) - _2486, (-0.0) - _2487));
                                float _4054 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3052 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3053 = dot(vec3(_498, _501, _504), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                                float _4065 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                                float _3061 = _2998 * _3037;
                                float _3062 = _3061 * _3061;
                                float _3068 = ((1.0 - _3062) * dot(vec3(_498, _501, _504), vec3(_2985, _2986, _2987))) + _3062;
                                float _4076 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3069 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3070 = 1.0 - _3037;
                                float _3080 = (0.5 / (((_3069 * ((_3052 * _3070) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3037) * _3052))) * _3069;
                                float _4087 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3090 = (_3015 * _2992) * (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) / ((_3060 * _3060) * ((_3005 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3090 * _2871.x;
                                frontier_phi_73_pred_1 = _3090 * _2871.y;
                                frontier_phi_73_pred_2 = _3016 * _2859.z;
                                frontier_phi_73_pred_3 = _3016 * _2859.y;
                                frontier_phi_73_pred_4 = _3016 * _2859.x;
                                frontier_phi_73_pred_5 = _3090 * _2871.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_73_pred;
                            _3095 = frontier_phi_73_pred_1;
                            _3099 = frontier_phi_73_pred_2;
                            _3098 = frontier_phi_73_pred_3;
                            _3097 = frontier_phi_73_pred_4;
                            _3096 = frontier_phi_73_pred_5;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2800 = _3096 + _2813;
                            if (_2818 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2818;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2801;
                        frontier_phi_67_pred_1 = _2802;
                        frontier_phi_67_pred_2 = _2803;
                        frontier_phi_67_pred_3 = _2800;
                        frontier_phi_67_pred_4 = _2799;
                        frontier_phi_67_pred_5 = _2798;
                    }
                    _2466 = frontier_phi_67_pred;
                    _2468 = frontier_phi_67_pred_1;
                    _2470 = frontier_phi_67_pred_2;
                    _2464 = frontier_phi_67_pred_3;
                    _2462 = frontier_phi_67_pred_4;
                    _2460 = frontier_phi_67_pred_5;
                    uint _2605 = _2604 + 1u;
                    if (_2605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2598 = _2460;
                        _2599 = _2462;
                        _2600 = _2464;
                        _2601 = _2466;
                        _2602 = _2468;
                        _2603 = _2470;
                        _2604 = _2605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2468;
                frontier_phi_55_56_ladder_1 = _2470;
                frontier_phi_55_56_ladder_2 = _2466;
                frontier_phi_55_56_ladder_3 = _2464;
                frontier_phi_55_56_ladder_4 = _2462;
                frontier_phi_55_56_ladder_5 = _2460;
            }
            else
            {
                frontier_phi_55_56_ladder = _2354;
                frontier_phi_55_56_ladder_1 = _2356;
                frontier_phi_55_56_ladder_2 = _2352;
                frontier_phi_55_56_ladder_3 = _2350;
                frontier_phi_55_56_ladder_4 = _2348;
                frontier_phi_55_56_ladder_5 = _2346;
            }
            _2459 = frontier_phi_55_56_ladder_5;
            _2461 = frontier_phi_55_56_ladder_4;
            _2463 = frontier_phi_55_56_ladder_3;
            _2465 = frontier_phi_55_56_ladder_2;
            _2467 = frontier_phi_55_56_ladder;
            _2469 = frontier_phi_55_56_ladder_1;
        }
        float _2474 = isnan(1.0) ? _542 : (isnan(_542) ? 1.0 : min(_542, 1.0));
        _2258 = (_2474 * _2465) + _1713;
        _2260 = (_2474 * _2467) + _1715;
        _2262 = (_2474 * _2469) + _1717;
        _2264 = ((_2459 * 0.039999999105930328369140625) * _2474) + _2043;
        _2266 = ((_2461 * 0.039999999105930328369140625) * _2474) + _2045;
        _2268 = ((_2463 * 0.039999999105930328369140625) * _2474) + _2047;
    }
    else
    {
        _2258 = _1713;
        _2260 = _1715;
        _2262 = _1717;
        _2264 = _2043;
        _2266 = _2045;
        _2268 = _2047;
    }
    float _4103 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4114 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4125 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    uint _2288 = _517 + 6u;
    float _2296 = _477 / cbSceneParam._m0[86u].x;
    float _2297 = _478 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _411 : (isnan(_411) ? cbSceneParam._m0[77u].w : min(_411, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_411 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_411) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _411 : min(cbSceneParam._m0[80u].w, _411));
        float _2372 = _2371 / _411;
        float _2383 = _2372 * _462;
        float _2384 = _463 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2387 = _2372 * _464;
        float _2389 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2384;
        float _2397 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2560;
        if (abs((_2385 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2560 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2407 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2520 = 1.0 / cbSceneParam._m0[80u].x;
            float _2521 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2522 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2531 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : min(_2521, 0.0));
            float _2532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : min(_2522, 0.0));
            _2560 = ((abs(_2397 / _2385) * cbSceneParam._m0[80u].y) * ((((_2531 - _2532) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0))))) * _2520)) - ((exp2(_2407 * _2531) - exp2(_2407 * _2532)) * _2520))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2571 = exp2((_2560 * (-1.44269502162933349609375)) * (1.0 - _2562.w));
        float _2572 = log2(_2571);
        float _2588 = log2(_2316);
        _2409 = (exp2(_2588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].x)) * _2562.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2411 = (exp2(_2588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].y)) * _2562.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2413 = (exp2(_2588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2572 * cbSceneParam._m0[78u].z)) * _2562.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2415 = _2571 * _2316;
    }
    else
    {
        _2409 = _2313;
        _2411 = _2314;
        _2413 = _2315;
        _2415 = _2316;
    }
    float _2427 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2428 = _2427 == 3.0;
    float _2429 = log2(_2415);
    float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2258 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _542))) + ((_2264 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2260 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _542))) + ((_2266 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2262 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _542))) + ((_2268 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1349)) * cbPerFrame._m0[3u].x));
    float _2447 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2447 * (_2428 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
    SV_Target.y = _2447 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.z = _2447 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.w = cbInstanceData._m0[_2288].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2288].w;
}


