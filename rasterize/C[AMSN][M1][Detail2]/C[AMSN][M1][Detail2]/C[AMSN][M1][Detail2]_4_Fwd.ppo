#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1054;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _307 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3387 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[10u].x) - _251)) + _251;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[10u].y) - _252)) + _252;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[10u].z) - _253)) + _253;
    vec4 _341 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _370 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3398 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _378 = (_371 * ((_341.x * cbMtdParam._m0[11u].x) - _315)) + _315;
    float _379 = (_371 * ((_341.y * cbMtdParam._m0[11u].y) - _316)) + _316;
    float _380 = (_371 * ((_341.z * cbMtdParam._m0[11u].z) - _317)) + _317;
    vec4 _392 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _394 = _392.x;
    float _396 = _394 - (_394 * TEXCOORD_5.x);
    vec4 _413 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _421 = (_413.x * 2.0) + (-1.0);
    float _423 = (_413.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3409 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    float _430 = _413.z * cbMtdParam._m0[13u].y;
    vec4 _443 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _457 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_443.z * cbMtdParam._m0[13u].x) - _430)) + _430;
    vec4 _471 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_471.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _498 = (((((_443.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _421) + ((((_471.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _499 = (((((_443.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _423) + ((((_471.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _502 = fma(_429, _215 * NORMAL.x, fma(_499, _222 * TANGENT.x, (_208 * _200) * _498));
    float _505 = fma(_429, _215 * NORMAL.y, fma(_499, _222 * TANGENT.y, (_208 * _201) * _498));
    float _508 = fma(_429, _215 * NORMAL.z, fma(_499, _222 * TANGENT.z, (_208 * _202) * _498));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3420 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _516 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3442 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3453 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3464 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _520 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _536 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _586 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _588 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _593 = _586 * _592;
    float _594 = _587 * _592;
    float _595 = _588 * _592;
    float _601 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _602 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _623 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _626 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    uint _639 = uint(roundEven(NORMAL.w)) * 13u;
    uint _641 = (_639 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3475 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _653 = 1.0 - _520;
    float _654 = _650 * _653;
    float _655 = _651 * _653;
    float _656 = _652 * _653;
    float _661 = (_650 + (-0.039999999105930328369140625)) * _520;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _520;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _520;
    float _664 = _661 + 0.039999999105930328369140625;
    float _666 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    vec4 _676 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _601, cbSceneParam._m0[86u].y * _602));
    float _679 = _676.x * TEXCOORD_5.w;
    float _680 = dot(vec3(_513, _514, _515), vec3(_593, _594, _595));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _513) - _593;
    float _688 = (_683 * _514) - _594;
    float _689 = (_683 * _515) - _595;
    float _693 = abs(dot(vec3(_593, _594, _595), vec3(_513, _514, _515)));
    float _3508 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_516);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _714 = (1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _715 = _708 * _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _782 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _786 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _811 = _743 + _513;
        float _812 = _747 + _514;
        float _813 = _751 + _515;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_513, _514, _515), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3556 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_513, _514, _515), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3589 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_513, _514, _515), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3622 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1098 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1102 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1125 = _743 + _513;
        float _1126 = _747 + _514;
        float _1127 = _751 + _515;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_513, _514, _515), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3685 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_513, _514, _515), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3718 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_513, _514, _515), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3751 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1054;
        _1364 = _1054;
        _1365 = _1054;
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = _1054;
        _1374 = _1054;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _687 * 0.5;
    float _1432 = _688 * 0.5;
    float _1433 = _689 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _516);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1561 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1564 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1592 = frontier_phi_14_12_ladder;
        }
        float _1798;
        if (_1561 > 0.0)
        {
            _1798 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1798 = frontier_phi_23_19_ladder;
        }
        float _2052;
        if (_1564 > 0.0)
        {
            _2052 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2052 = frontier_phi_35_30_ladder;
        }
        float _2054 = isnan(_1798) ? _1592 : (isnan(_1592) ? _1798 : min(_1592, _1798));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1558) + _1547;
        float _2060 = (_2055 * _1561) + _1551;
        float _2061 = (_2055 * _1564) + _1555;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_13_35_ladder = _2189.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2189.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2189.x * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_13_35_ladder_2;
        _1582 = frontier_phi_13_35_ladder_1;
        _1584 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1500);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _516);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1660 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1663 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1803;
        if (_1657 > 0.0)
        {
            _1803 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1803 = frontier_phi_25_21_ladder;
        }
        float _2079;
        if (_1660 > 0.0)
        {
            _2079 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2079 = frontier_phi_37_32_ladder;
        }
        float _2292;
        if (_1663 > 0.0)
        {
            _2292 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2292 = frontier_phi_46_43_ladder;
        }
        float _2294 = isnan(_2079) ? _1803 : (isnan(_1803) ? _2079 : min(_1803, _2079));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1657) + _1646;
        float _2300 = (_2295 * _1660) + _1650;
        float _2301 = (_2295 * _1663) + _1654;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2302;
        float _2305 = _2302 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2301 > _2305) || ((_2301 < _2303) || ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 < _2303) || (_2299 > _2305))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2301, cbModelParam._m0[17u].z, fma(_2300, cbModelParam._m0[17u].y, _2299 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2301, cbModelParam._m0[18u].z, fma(_2300, cbModelParam._m0[18u].y, _2299 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2301, cbModelParam._m0[19u].z, fma(_2300, cbModelParam._m0[19u].y, _2299 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_22_46_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_22_46_ladder_2;
        _1684 = frontier_phi_22_46_ladder_1;
        _1686 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1589);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1699 = (((_714 * _664) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1682 - _1580)) + _1580);
    float _1701 = (((_714 * _666) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1703 = (((_714 * _667) + _715) * _679) * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_639 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _679 + (-1.0);
    float _1737 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1738 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1741 = _1724 + 5u;
    float _1747 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1751 = _1724 + 4u;
    float _1757 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1761 = _1724 | 1u;
    float _1772 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_513, _514, _515));
    float _1775 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_513, _514, _515));
    float _3887 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _3898 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1782 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1789 = ((cbLight._m0[_1741].x * _1747) * _1782) + ((cbLight._m0[_1751].x * _1757) * _1780);
    float _1790 = ((_1747 * cbLight._m0[_1741].y) * _1782) + ((_1757 * cbLight._m0[_1751].y) * _1780);
    float _1791 = ((_1747 * cbLight._m0[_1741].z) * _1782) + ((_1757 * cbLight._m0[_1751].z) * _1780);
    uvec4 _1795 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1797 = _1795.x == 0u;
    float _1808;
    float _1810;
    float _1812;
    if (_1797)
    {
        _1808 = _1789;
        _1810 = _1790;
        _1812 = _1791;
    }
    else
    {
        uint _1816 = _1724 + 6u;
        float _1832 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3909 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1835 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1808 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1789;
        _1810 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1790;
        _1812 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1791;
    }
    bool _1815 = _1795.y == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1815)
    {
        _1853 = _1808;
        _1855 = _1810;
        _1857 = _1812;
    }
    else
    {
        uint _2023 = _1724 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _3925 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2042 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1853 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1808;
        _1855 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1810;
        _1857 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1812;
    }
    uint _1860 = _1724 + 8u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _516) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1724].x + _593;
    float _1876 = cbLight._m0[_1724].y + _594;
    float _1877 = cbLight._m0[_1724].z + _595;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1724].xyz));
    float _3941 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1889 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _1890 = dot(vec3(_513, _514, _515), vec3(_1882, _1883, _1884));
    float _3963 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1882, _1883, _1884));
    float _3974 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1874 * _1874;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1910 = exp2(log2(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * 5.0);
    float _1911 = 0.959999978542327880859375 - _661;
    float _1913 = 0.959999978542327880859375 - _662;
    float _1914 = 0.959999978542327880859375 - _663;
    float _1921 = 1.0 - _1874;
    float _1932 = (0.5 / (((_1889 * ((_1888 * _1921) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1921) + _1874) * _1888))) * _1888;
    float _3985 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1934 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    uint _1945 = _1724 + 9u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _516) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1761].x + _593;
    float _1959 = cbLight._m0[_1761].y + _594;
    float _1960 = cbLight._m0[_1761].z + _595;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1761].xyz));
    float _3996 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1972 = dot(vec3(_513, _514, _515), vec3(_1965, _1966, _1967));
    float _4007 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1965, _1966, _1967));
    float _4018 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1957 * _1957;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1991 = exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0);
    float _1998 = 1.0 - _1957;
    float _2008 = (0.5 / (((_1889 * ((_1971 * _1998) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1998) + _1957) * _1971))) * _1971;
    float _4029 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    float _2020 = (((((_1991 * _1911) + _664) * cbLight._m0[_1945].x) * _2010) * _1747) + (((((_1910 * _1911) + _664) * cbLight._m0[_1860].x) * _1934) * _1757);
    float _2021 = (((((_1991 * _1913) + _666) * cbLight._m0[_1945].y) * _2010) * _1747) + (((((_1910 * _1913) + _666) * cbLight._m0[_1860].y) * _1934) * _1757);
    float _2022 = (((((_1991 * _1914) + _667) * cbLight._m0[_1945].z) * _2010) * _1747) + (((((_1910 * _1914) + _667) * cbLight._m0[_1860].z) * _1934) * _1757);
    float _2084;
    float _2086;
    float _2088;
    if (_1797)
    {
        _2084 = _2020;
        _2086 = _2021;
        _2088 = _2022;
    }
    else
    {
        uint _2090 = _1724 + 2u;
        uint _2094 = _1724 + 10u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _516) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _593;
        float _2111 = cbLight._m0[_2090].y + _594;
        float _2112 = cbLight._m0[_2090].z + _595;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2090].xyz));
        float _4040 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2124 = dot(vec3(_513, _514, _515), vec3(_2117, _2118, _2119));
        float _4051 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4062 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0);
        float _2150 = 1.0 - _2109;
        float _2160 = (0.5 / (((_1889 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2150) + _2109) * _2123))) * _2123;
        float _4073 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2084 = (((((_2143 * _1911) + _664) * cbLight._m0[_2094].x) * _2162) * _2163) + _2020;
        _2086 = (((((_2143 * _1913) + _666) * cbLight._m0[_2094].y) * _2162) * _2163) + _2021;
        _2088 = (((((_2143 * _1914) + _667) * cbLight._m0[_2094].z) * _2162) * _2163) + _2022;
    }
    float _2198;
    float _2200;
    float _2202;
    if (_1815)
    {
        _2198 = _2084;
        _2200 = _2086;
        _2202 = _2088;
    }
    else
    {
        uint _2209 = _1724 + 3u;
        uint _2213 = _1724 + 11u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _516) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _593;
        float _2230 = cbLight._m0[_2209].y + _594;
        float _2231 = cbLight._m0[_2209].z + _595;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2209].xyz));
        float _4089 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2243 = dot(vec3(_513, _514, _515), vec3(_2236, _2237, _2238));
        float _4100 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4111 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0);
        float _2269 = 1.0 - _2228;
        float _2279 = (0.5 / (((_1889 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2269) + _2228) * _2242))) * _2242;
        float _4122 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2198 = (((((_2262 * _1911) + _664) * cbLight._m0[_2213].x) * _2281) * _2282) + _2084;
        _2200 = (((((_2262 * _1913) + _666) * cbLight._m0[_2213].y) * _2281) * _2282) + _2086;
        _2202 = (((((_2262 * _1914) + _667) * cbLight._m0[_2213].z) * _2281) * _2282) + _2088;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1722.y == 0u)
    {
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2357;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2357;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2357;
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.x;
        uint _2384 = uint((float(_2372.y) * floor(float(uint(cbSceneParam._m0[85u].y * _602) / _2373))) + floor(float(uint(cbSceneParam._m0[85u].x * _601) / _2373)));
        float _2394 = (log2(_2360 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2395 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        uint _2398 = uint(isnan(14.0) ? _2395 : (isnan(_2395) ? 14.0 : min(_2395, 14.0)));
        uvec4 _2403 = texelFetch(g_lightClusterGridBuffer, int(((_2398 << 2u) + (_2384 << 6u)) >> 2u));
        uint _2404 = _2403.x;
        uint _2405 = _2372.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2405 >> 4u) & 15u)) + 4294967295u) & _2404) == 0u) || ((_2405 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            uint _2656 = 0u;
            uint _2665;
            bool _2666;
            for (;;)
            {
                _2665 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                _2666 = _2665 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2666)
                {
                    frontier_phi_61_pred = _2650;
                    frontier_phi_61_pred_1 = _2655;
                    frontier_phi_61_pred_2 = _2654;
                    frontier_phi_61_pred_3 = _2653;
                    frontier_phi_61_pred_4 = _2652;
                    frontier_phi_61_pred_5 = _2651;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2665;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2656 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2358;
                        float _2841 = _2800.y - _2359;
                        float _2842 = _2800.z - _2360;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_620, _623, _626), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4148 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2871 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2875 = (-0.0) - _2358;
                        float _2876 = (-0.0) - _2359;
                        float _2877 = (-0.0) - _2360;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2892 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2893 = 1.0 - _695;
                        float _2900 = sqrt(1.0 - ((1.0 - (_2893 * _2893)) * (1.0 - (_2892 * _2892))));
                        float _2901 = _2900 * _2900;
                        float _2902 = _2901 * _2901;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2913 = dot(vec3(_620, _623, _626), vec3(_2882, _2883, _2884));
                        float _4164 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2917 = dot(vec3(_620, _623, _626), vec3(_2909 * _2903, _2909 * _2904, _2909 * _2905));
                        float _4175 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2924 = ((_2920 * _2920) * (_2902 + (-1.0))) + 1.0;
                        float _2925 = _2860 * _2901;
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2850) + _2926;
                        float _4186 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2931 = 1.0 - _2901;
                        float _2941 = (0.5 / (((_2930 * ((_2916 * _2931) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2901) * _2916))) * _2930;
                        float _4197 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2952 = (((_2902 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2924 * _2924) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2709 = (_2871 * _2819.x) + _2777;
                        _2710 = (_2871 * _2819.y) + _2778;
                        _2711 = (_2871 * _2819.z) + _2779;
                        _2706 = (_2952 * _2836.x) + _2774;
                        _2707 = (_2952 * _2836.y) + _2775;
                        _2708 = (_2952 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_61_pred = _2706;
                    frontier_phi_61_pred_1 = _2711;
                    frontier_phi_61_pred_2 = _2710;
                    frontier_phi_61_pred_3 = _2709;
                    frontier_phi_61_pred_4 = _2708;
                    frontier_phi_61_pred_5 = _2707;
                }
                _2506 = frontier_phi_61_pred;
                _2516 = frontier_phi_61_pred_1;
                _2514 = frontier_phi_61_pred_2;
                _2512 = frontier_phi_61_pred_3;
                _2510 = frontier_phi_61_pred_4;
                _2508 = frontier_phi_61_pred_5;
                uint _2657 = _2656 + 1u;
                if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2650 = _2506;
                    _2651 = _2508;
                    _2652 = _2510;
                    _2653 = _2512;
                    _2654 = _2514;
                    _2655 = _2516;
                    _2656 = _2657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((4294967295u << _2522) & _2404) == 0u)
        {
            _2618 = _2505;
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
        }
        else
        {
            float _2643 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
            float _2644 = _2643 * _2358;
            float _2645 = _2643 * _2359;
            float _2646 = _2643 * _2360;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2757 = _2505;
                float _2758 = _2507;
                float _2759 = _2509;
                float _2760 = _2511;
                float _2761 = _2513;
                float _2762 = _2515;
                uint _2763 = _2522;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2773)
                    {
                        frontier_phi_67_pred = _2760;
                        frontier_phi_67_pred_1 = _2761;
                        frontier_phi_67_pred_2 = _2762;
                        frontier_phi_67_pred_3 = _2759;
                        frontier_phi_67_pred_4 = _2758;
                        frontier_phi_67_pred_5 = _2757;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        uint _2976 = _2772;
                        uint _2977;
                        vec4 _3002;
                        float _3003;
                        vec4 _3018;
                        vec3 _3030;
                        vec4 _3046;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2987 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2976));
                            _2977 = (_2976 + 4294967295u) & _2976;
                            uint _2989 = _2987 * 40u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3003 = _3002.w;
                            uint _3005 = (_2987 * 40u) + 4u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2987 * 40u) + 8u;
                            _3030 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x));
                            uint _3033 = (_2987 * 40u) + 16u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2987 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2987 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2987 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2360, _3097.z, fma(_2359, _3097.y, _3097.x * _2358)) + _3097.w;
                            _3110 = !((fma(_2360, _3078.z, fma(_2359, _3078.y, _3078.x * _2358)) + _3078.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3002.x - _2358;
                                float _3138 = _3002.y - _2359;
                                float _3139 = _3002.z - _2360;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3003 * _3003));
                                float _4208 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3155 = sqrt(_3140) * _3018.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_620, _623, _626))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2360, _3046.z, fma(_2359, _3046.y, _3046.x * _2358)) + _3046.w) / _3109;
                                float _3169 = (fma(_2360, _3062.z, fma(_2359, _3062.y, _3062.x * _2358)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4224 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _695;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2644;
                                float _3199 = _3145 - _2645;
                                float _3200 = _3146 - _2646;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2644, (-0.0) - _2645, (-0.0) - _2646));
                                float _4235 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3212 = dot(vec3(_620, _623, _626), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4246 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_620, _623, _626), vec3(_3144, _3145, _3146))) + _3221;
                                float _4257 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4268 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3249 * _3030.x;
                                frontier_phi_73_pred_1 = _3249 * _3030.y;
                                frontier_phi_73_pred_2 = _3175 * _3018.z;
                                frontier_phi_73_pred_3 = _3175 * _3018.y;
                                frontier_phi_73_pred_4 = _3175 * _3018.x;
                                frontier_phi_73_pred_5 = _3249 * _3030.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3253 = frontier_phi_73_pred;
                            _3254 = frontier_phi_73_pred_1;
                            _3258 = frontier_phi_73_pred_2;
                            _3257 = frontier_phi_73_pred_3;
                            _3256 = frontier_phi_73_pred_4;
                            _3255 = frontier_phi_73_pred_5;
                            _2960 = _3256 + _2973;
                            _2961 = _3257 + _2974;
                            _2962 = _3258 + _2975;
                            _2957 = _3253 + _2970;
                            _2958 = _3254 + _2971;
                            _2959 = _3255 + _2972;
                            if (_2977 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2977;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2960;
                        frontier_phi_67_pred_1 = _2961;
                        frontier_phi_67_pred_2 = _2962;
                        frontier_phi_67_pred_3 = _2959;
                        frontier_phi_67_pred_4 = _2958;
                        frontier_phi_67_pred_5 = _2957;
                    }
                    _2625 = frontier_phi_67_pred;
                    _2627 = frontier_phi_67_pred_1;
                    _2629 = frontier_phi_67_pred_2;
                    _2623 = frontier_phi_67_pred_3;
                    _2621 = frontier_phi_67_pred_4;
                    _2619 = frontier_phi_67_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2619;
                        _2758 = _2621;
                        _2759 = _2623;
                        _2760 = _2625;
                        _2761 = _2627;
                        _2762 = _2629;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            else
            {
                frontier_phi_55_56_ladder = _2513;
                frontier_phi_55_56_ladder_1 = _2515;
                frontier_phi_55_56_ladder_2 = _2511;
                frontier_phi_55_56_ladder_3 = _2509;
                frontier_phi_55_56_ladder_4 = _2507;
                frontier_phi_55_56_ladder_5 = _2505;
            }
            _2618 = frontier_phi_55_56_ladder_5;
            _2620 = frontier_phi_55_56_ladder_4;
            _2622 = frontier_phi_55_56_ladder_3;
            _2624 = frontier_phi_55_56_ladder_2;
            _2626 = frontier_phi_55_56_ladder;
            _2628 = frontier_phi_55_56_ladder_1;
        }
        float _2633 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2417 = (_2633 * _2624) + _1853;
        _2419 = (_2633 * _2626) + _1855;
        _2421 = (_2633 * _2628) + _1857;
        _2423 = ((_2618 * _664) * _2633) + _2198;
        _2425 = ((_2620 * _666) * _2633) + _2200;
        _2427 = ((_2622 * _667) * _2633) + _2202;
    }
    else
    {
        _2417 = _1853;
        _2419 = _1855;
        _2421 = _1857;
        _2423 = _2198;
        _2425 = _2200;
        _2427 = _2202;
    }
    float _4284 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4295 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4306 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    uint _2447 = _639 + 6u;
    float _2455 = _601 / cbSceneParam._m0[86u].x;
    float _2456 = _602 / cbSceneParam._m0[86u].y;
    vec4 _2470 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, (log2((isnan(cbSceneParam._m0[77u].w) ? _536 : (isnan(_536) ? cbSceneParam._m0[77u].w : min(_536, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2472 = _2470.x;
    float _2473 = _2470.y;
    float _2474 = _2470.z;
    float _2475 = _2470.w;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_536 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_536) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _536 : min(cbSceneParam._m0[80u].w, _536));
        float _2531 = _2530 / _536;
        float _2542 = _2531 * _586;
        float _2543 = _587 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2546 = _2531 * _588;
        float _2548 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2549 = _2548 + cbSceneParam._m0[79u].w;
        float _2550 = cbSceneParam._m0[79u].w - _2543;
        float _2556 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2546 * _2546));
        float _2559 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2556;
        float _2564 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2566 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2719;
        if (abs((_2544 - _2548) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2719 = ((((_2549 > 0.0) ? exp2(_2564 * _2549) : (2.0 - exp2(_2566 * _2549))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2559;
        }
        else
        {
            float _2679 = 1.0 / cbSceneParam._m0[80u].x;
            float _2680 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : max(_2549, _2550));
            float _2681 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : min(_2549, _2550));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            _2719 = ((abs(_2556 / _2544) * cbSceneParam._m0[80u].y) * ((((_2690 - _2691) * 2.0) - ((exp2(_2564 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)))) - exp2(_2564 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))))) * _2679)) - ((exp2(_2566 * _2690) - exp2(_2566 * _2691)) * _2679))) + (_2559 * cbSceneParam._m0[80u].z);
        }
        vec4 _2721 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, 1.0), 0.0);
        float _2730 = exp2((_2719 * (-1.44269502162933349609375)) * (1.0 - _2721.w));
        float _2731 = log2(_2730);
        float _2747 = log2(_2475);
        _2568 = (exp2(_2747 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].x)) * _2721.x) / cbSceneParam._m0[78u].x)) + _2472;
        _2570 = (exp2(_2747 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].y)) * _2721.y) / cbSceneParam._m0[78u].y)) + _2473;
        _2572 = (exp2(_2747 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].z)) * _2721.z) / cbSceneParam._m0[78u].z)) + _2474;
        _2574 = _2730 * _2475;
    }
    else
    {
        _2568 = _2472;
        _2570 = _2473;
        _2572 = _2474;
        _2574 = _2475;
    }
    float _2586 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2587 = _2586 == 3.0;
    float _2588 = log2(_2574);
    float _2595 = exp2(_2588 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2417 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _679))) + ((_2423 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2596 = exp2(_2588 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2419 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _679))) + ((_2425 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2597 = exp2(_2588 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2421 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _679))) + ((_2427 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2606 = (_2586 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2606 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.y = _2606 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.z = _2606 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.w = cbInstanceData._m0[_2447].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2447].w;
}


