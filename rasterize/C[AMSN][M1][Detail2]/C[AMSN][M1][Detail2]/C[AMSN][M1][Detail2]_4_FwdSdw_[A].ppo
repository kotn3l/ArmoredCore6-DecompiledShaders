#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3772;
float _3773;
float _3774;
float _3775;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _315 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3784 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _323 = (_316 * ((_284.x * cbMtdParam._m0[10u].x) - _259)) + _259;
    float _324 = (_316 * ((_284.y * cbMtdParam._m0[10u].y) - _260)) + _260;
    float _325 = (_316 * ((_284.z * cbMtdParam._m0[10u].z) - _261)) + _261;
    vec4 _349 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _378 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3795 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _386 = (_379 * ((_349.x * cbMtdParam._m0[11u].x) - _323)) + _323;
    float _387 = (_379 * ((_349.y * cbMtdParam._m0[11u].y) - _324)) + _324;
    float _388 = (_379 * ((_349.z * cbMtdParam._m0[11u].z) - _325)) + _325;
    vec4 _400 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _402 = _400.x;
    float _404 = _402 - (_402 * TEXCOORD_5.x);
    vec4 _421 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _429 = (_421.x * 2.0) + (-1.0);
    float _431 = (_421.y * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3806 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))));
    float _438 = _421.z * cbMtdParam._m0[13u].y;
    vec4 _451 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _465 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_451.z * cbMtdParam._m0[13u].x) - _438)) + _438;
    vec4 _479 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _493 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_479.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    float _506 = (((((_451.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _429) + ((((_479.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _507 = (((((_451.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _431) + ((((_479.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _510 = fma(_437, _223 * NORMAL.x, fma(_507, _230 * TANGENT.x, (_216 * _208) * _506));
    float _513 = fma(_437, _223 * NORMAL.y, fma(_507, _230 * TANGENT.y, (_216 * _209) * _506));
    float _516 = fma(_437, _223 * NORMAL.z, fma(_507, _230 * TANGENT.z, (_216 * _210) * _506));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3817 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _524 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3839 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3850 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3861 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _528 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _594 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _584);
    float _595 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _584);
    float _596 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _584);
    float _600 = inversesqrt(dot(vec3(_594, _595, _596), vec3(_594, _595, _596)));
    float _601 = _594 * _600;
    float _602 = _595 * _600;
    float _603 = _596 * _600;
    vec4 _608 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _610 = _608.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_594 * _594) + (_595 * _595)) + (_596 * _596));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3872 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3883 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) - _789)) + _789) < ((_610 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _643 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _646 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _659 = uint(roundEven(NORMAL.w)) * 13u;
    uint _660 = _659 + 9u;
    uint _661 = _660 + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_661].z;
    float _3894 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _673 = 1.0 - _528;
    float _674 = _670 * _673;
    float _675 = _671 * _673;
    float _676 = _672 * _673;
    float _681 = (_670 + (-0.039999999105930328369140625)) * _528;
    float _682 = (_671 + (-0.039999999105930328369140625)) * _528;
    float _683 = (_672 + (-0.039999999105930328369140625)) * _528;
    float _684 = _681 + 0.039999999105930328369140625;
    float _686 = _682 + 0.039999999105930328369140625;
    float _687 = _683 + 0.039999999105930328369140625;
    vec4 _696 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _699 = _696.x * TEXCOORD_5.w;
    float _700 = dot(vec3(_521, _522, _523), vec3(_601, _602, _603));
    float _703 = _700 * 2.0;
    float _707 = (_703 * _521) - _601;
    float _708 = (_703 * _522) - _602;
    float _709 = (_703 * _523) - _603;
    float _713 = abs(dot(vec3(_601, _602, _603), vec3(_521, _522, _523)));
    float _3927 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _715 = sqrt(_524);
    float _728 = exp2((_715 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_715 * 3.0));
    float _734 = (1.0 - _728) * ((_715 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _735 = _728 * _715;
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _830 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _834 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _859 = _763 + _521;
        float _860 = _767 + _522;
        float _861 = _771 + _523;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_521, _522, _523), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3975 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_521, _522, _523), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _4008 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_521, _522, _523), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _4041 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1145 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1149 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1153 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1176 = _763 + _521;
        float _1177 = _767 + _522;
        float _1178 = _771 + _523;
        float _1188 = fma(_1178, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176)) - _1145;
        float _1189 = fma(_1178, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176)) - _1149;
        float _1190 = fma(_1178, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176)) - _1153;
        float _1194 = inversesqrt(dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190)));
        float _1207 = ((_1194 * _1188) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1145 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1194 * _1189) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1149 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1194 * _1190) / cbModelParam._m0[35u].z) + ((((((_1153 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1207, _1208, _1209), 0.0);
        float _1244 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1211.x + (-0.5));
        float _1246 = _1244 * (_1211.y + (-0.5));
        float _1247 = _1244 * (_1211.z + (-0.5));
        float _1254 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1218.x + (-0.5));
        float _1256 = _1254 * (_1218.y + (-0.5));
        float _1257 = _1254 * (_1218.z + (-0.5));
        float _1264 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1225.x + (-0.5));
        float _1266 = _1264 * (_1225.y + (-0.5));
        float _1267 = _1264 * (_1225.z + (-0.5));
        float _1274 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1232.x + (-0.5));
        float _1276 = _1274 * (_1232.y + (-0.5));
        float _1277 = _1274 * (_1232.z + (-0.5));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = _1245 * 0.5;
        float _1282 = _1255 * 0.5;
        float _1283 = _1265 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_521, _522, _523), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4104 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1308 + 1.0))) + _1313) * _1278;
        float _1323 = _1246 * 0.5;
        float _1324 = _1256 * 0.5;
        float _1325 = _1266 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_521, _522, _523), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4137 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1350 + 1.0))) + _1355) * _1279;
        float _1365 = _1247 * 0.5;
        float _1366 = _1257 * 0.5;
        float _1367 = _1267 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_521, _522, _523), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4170 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1392 + 1.0))) + _1397) * _1280;
        _1414 = _1247;
        _1415 = _1246;
        _1416 = _1245;
        _1417 = _1257;
        _1418 = _1256;
        _1419 = _1255;
        _1420 = _1267;
        _1421 = _1266;
        _1422 = _1265;
        _1423 = _1280;
        _1424 = _1279;
        _1425 = _1278;
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = _1102;
        _1426 = 0.0;
        _1427 = 0.0;
        _1428 = 0.0;
    }
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1114)) + _1114;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1115)) + _1115;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1461 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1464 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1467 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1438));
    float _1482 = _707 * 0.5;
    float _1483 = _708 * 0.5;
    float _1484 = _709 * 0.5;
    float _1485 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1488 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1491 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1525;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1498 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1502 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1506 = dot(vec4(_1482, _1483, _1484, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1513 = dot(vec4(cbModelParam._m0[39u]), vec4(_1482, _1483, _1484, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1536;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1527 = dot(vec4(cbModelParam._m0[40u]), vec4(_1482, _1483, _1484, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1540 = (_1536 * cbModelParam._m0[1u].x) + (_1525 * (1.0 - cbModelParam._m0[1u].x));
    float _1550 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1550 : min(cbModelParam._m0[25u].z, _1550));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1598 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1602 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1606 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1609 = fma(_709, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707));
        float _1612 = fma(_709, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707));
        float _1615 = fma(_709, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707));
        float _1643;
        if (_1609 > 0.0)
        {
            _1643 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1643 = frontier_phi_17_15_ladder;
        }
        float _1818;
        if (_1612 > 0.0)
        {
            _1818 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1818 = frontier_phi_26_22_ladder;
        }
        float _2113;
        if (_1615 > 0.0)
        {
            _2113 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2113 = frontier_phi_38_33_ladder;
        }
        float _2115 = isnan(_1818) ? _1643 : (isnan(_1643) ? _1818 : min(_1643, _1818));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1609) + _1598;
        float _2121 = (_2116 * _1612) + _1602;
        float _2122 = (_2116 * _1615) + _1606;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1551);
            frontier_phi_16_38_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1631 = frontier_phi_16_38_ladder_2;
        _1633 = frontier_phi_16_38_ladder_1;
        _1635 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_707, _708, _709), _1551);
        _1631 = _1619.x * cbModelParam._m0[1u].y;
        _1633 = _1619.y * cbModelParam._m0[1u].y;
        _1635 = _1619.z * cbModelParam._m0[1u].y;
    }
    float _1639 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1639 : min(cbModelParam._m0[25u].w, _1639));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_709, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707));
        float _1711 = fma(_709, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707));
        float _1714 = fma(_709, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707));
        float _1823;
        if (_1708 > 0.0)
        {
            _1823 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1823 = frontier_phi_28_24_ladder;
        }
        float _2140;
        if (_1711 > 0.0)
        {
            _2140 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2140 = frontier_phi_40_35_ladder;
        }
        float _2478;
        if (_1714 > 0.0)
        {
            _2478 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2478 = frontier_phi_50_47_ladder;
        }
        float _2480 = isnan(_2140) ? _1823 : (isnan(_1823) ? _2140 : min(_1823, _2140));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1708) + _1697;
        float _2486 = (_2481 * _1711) + _1701;
        float _2487 = (_2481 * _1714) + _1705;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2488;
        float _2491 = _2488 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2487 > _2491) || ((_2487 < _2489) || ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 < _2489) || (_2485 > _2491))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2487, cbModelParam._m0[17u].z, fma(_2486, cbModelParam._m0[17u].y, _2485 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2487, cbModelParam._m0[18u].z, fma(_2486, cbModelParam._m0[18u].y, _2485 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2487, cbModelParam._m0[19u].z, fma(_2486, cbModelParam._m0[19u].y, _2485 * cbModelParam._m0[19u].x))), _1640);
            frontier_phi_25_50_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_25_50_ladder_2;
        _1735 = frontier_phi_25_50_ladder_1;
        _1737 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_707, _708, _709), _1640);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1750 = (((_734 * _684) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1733 - _1631)) + _1631);
    float _1752 = (((_734 * _686) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1735 - _1633)) + _1633);
    float _1754 = (((_734 * _687) + _735) * _699) * ((cbModelParam._m0[1u].w * (_1737 - _1635)) + _1635);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1810 = _1797 / _1809;
    float _1811 = _1801 / _1809;
    float _1812 = _1805 / _1809;
    float _1959;
    float _1960;
    float _1961;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1839 = ((uint(_1812 > cbSceneParam._m0[59u].y) + uint(_1812 > cbSceneParam._m0[59u].x)) + uint(_1812 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1840 = _1839 + 43u;
        uint _1848 = _1839 + 44u;
        uint _1856 = _1839 + 45u;
        uint _1864 = _1839 + 46u;
        float _1875 = fma(_1809, cbSceneParam._m0[_1840].w, fma(_1805, cbSceneParam._m0[_1840].z, fma(_1801, cbSceneParam._m0[_1840].y, _1797 * cbSceneParam._m0[_1840].x)));
        float _1879 = fma(_1809, cbSceneParam._m0[_1848].w, fma(_1805, cbSceneParam._m0[_1848].z, fma(_1801, cbSceneParam._m0[_1848].y, _1797 * cbSceneParam._m0[_1848].x)));
        float _1887 = fma(_1809, cbSceneParam._m0[_1864].w, fma(_1805, cbSceneParam._m0[_1864].z, fma(_1801, cbSceneParam._m0[_1864].y, _1797 * cbSceneParam._m0[_1864].x)));
        float _1892 = cbSceneParam._m0[33u].z * _1887;
        float _1894 = cbSceneParam._m0[33u].w * _1887;
        float _1897 = fma(_1809, cbSceneParam._m0[_1856].w, fma(_1805, cbSceneParam._m0[_1856].z, fma(_1801, cbSceneParam._m0[_1856].y, _1797 * cbSceneParam._m0[_1856].x))) / _1887;
        float _1945 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
        float _4296 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1952 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 + _1875) / _1887, (_1894 + _1879) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 + _1875) / _1887, (_1879 - _1892) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1892) / _1887, (_1879 - _1894) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1894) / _1887, (_1892 + _1879) / _1887), _1897), 0.0)).x), vec4(0.25)));
        _1959 = 1.0 - (_1952 * cbSceneParam._m0[34u].x);
        _1960 = 1.0 - (_1952 * cbSceneParam._m0[34u].y);
        _1961 = 1.0 - (_1952 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1959 = 1.0;
        _1960 = 1.0;
        _1961 = 1.0;
    }
    float _2025;
    float _2027;
    float _2029;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2013 = fma(_1809, cbSceneParam._m0[63u].w, fma(_1805, cbSceneParam._m0[63u].z, fma(_1801, cbSceneParam._m0[63u].y, _1797 * cbSceneParam._m0[63u].x)));
        float _2014 = fma(_1809, cbSceneParam._m0[60u].w, fma(_1805, cbSceneParam._m0[60u].z, fma(_1801, cbSceneParam._m0[60u].y, _1797 * cbSceneParam._m0[60u].x))) / _2013;
        float _2015 = fma(_1809, cbSceneParam._m0[61u].w, fma(_1805, cbSceneParam._m0[61u].z, fma(_1801, cbSceneParam._m0[61u].y, _1797 * cbSceneParam._m0[61u].x))) / _2013;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2014 >= cbSceneParam._m0[64u].x) && (_2015 >= cbSceneParam._m0[64u].y)) && (_2014 <= cbSceneParam._m0[64u].z)) && (_2015 <= cbSceneParam._m0[64u].w))
        {
            float _2153 = fma(_1809, cbSceneParam._m0[62u].w, fma(_1805, cbSceneParam._m0[62u].z, fma(_1801, cbSceneParam._m0[62u].y, _1797 * cbSceneParam._m0[62u].x))) / _2013;
            float _2157 = isnan(cbSceneParam._m0[41u].w) ? _2153 : (isnan(_2153) ? cbSceneParam._m0[41u].w : max(_2153, cbSceneParam._m0[41u].w));
            float _2200 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
            float _4312 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
            float _2207 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2014, cbSceneParam._m0[33u].w + _2015), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2014, _2015 - cbSceneParam._m0[33u].z), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].z, _2015 - cbSceneParam._m0[33u].w), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2015), _2157), 0.0)).x), vec4(0.25)));
            float _2211 = 1.0 - (_2207 * cbSceneParam._m0[34u].x);
            float _2212 = 1.0 - (_2207 * cbSceneParam._m0[34u].y);
            float _2213 = 1.0 - (_2207 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2213) ? _1961 : (isnan(_1961) ? _2213 : min(_1961, _2213));
            frontier_phi_37_36_ladder_1 = isnan(_2212) ? _1960 : (isnan(_1960) ? _2212 : min(_1960, _2212));
            frontier_phi_37_36_ladder_2 = isnan(_2211) ? _1959 : (isnan(_1959) ? _2211 : min(_1959, _2211));
        }
        else
        {
            frontier_phi_37_36_ladder = _1961;
            frontier_phi_37_36_ladder_1 = _1960;
            frontier_phi_37_36_ladder_2 = _1959;
        }
        _2025 = frontier_phi_37_36_ladder_2;
        _2027 = frontier_phi_37_36_ladder_1;
        _2029 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2025 = _1959;
        _2027 = _1960;
        _2029 = _1961;
    }
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_659 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _699 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2072 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2076 = _2036 | 1u;
    float _2087 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_521, _522, _523));
    float _2090 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_521, _522, _523));
    float _4348 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _4359 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2095 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2097 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2104 = ((cbLight._m0[_2053].x * _2059) * _2097) + (((cbLight._m0[_2063].x * _2025) * _2072) * _2095);
    float _2105 = ((_2059 * cbLight._m0[_2053].y) * _2097) + (((cbLight._m0[_2063].y * _2027) * _2072) * _2095);
    float _2106 = ((_2059 * cbLight._m0[_2053].z) * _2097) + (((cbLight._m0[_2063].z * _2029) * _2072) * _2095);
    uvec4 _2110 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2112 = _2110.x == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2112)
    {
        _2214 = _2104;
        _2216 = _2105;
        _2218 = _2106;
    }
    else
    {
        uint _2222 = _2036 + 6u;
        float _2238 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4370 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2241 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2214 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2104;
        _2216 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2105;
        _2218 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2106;
    }
    bool _2221 = _2110.y == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2221)
    {
        _2276 = _2214;
        _2278 = _2216;
        _2280 = _2218;
    }
    else
    {
        uint _2449 = _2036 + 7u;
        float _2465 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4386 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2468 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2276 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2214;
        _2278 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2216;
        _2280 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2218;
    }
    uint _2283 = _2036 + 8u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _524) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2036].x + _601;
    float _2299 = cbLight._m0[_2036].y + _602;
    float _2300 = cbLight._m0[_2036].z + _603;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2036].xyz));
    float _4402 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _2312 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2313 = dot(vec3(_521, _522, _523), vec3(_2305, _2306, _2307));
    float _4424 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2317 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2305, _2306, _2307));
    float _4435 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2321 = _2297 * _2297;
    float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
    float _2333 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2334 = 0.959999978542327880859375 - _681;
    float _2336 = 0.959999978542327880859375 - _682;
    float _2337 = 0.959999978542327880859375 - _683;
    float _2344 = 1.0 - _2297;
    float _2355 = (0.5 / (((_2312 * ((_2311 * _2344) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2344) + _2297) * _2311))) * _2311;
    float _4446 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
    uint _2371 = _2036 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _524) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2076].x + _601;
    float _2385 = cbLight._m0[_2076].y + _602;
    float _2386 = cbLight._m0[_2076].z + _603;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2076].xyz));
    float _4457 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2398 = dot(vec3(_521, _522, _523), vec3(_2391, _2392, _2393));
    float _4468 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2391, _2392, _2393));
    float _4479 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2424 = 1.0 - _2383;
    float _2434 = (0.5 / (((_2312 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2424) + _2383) * _2397))) * _2397;
    float _4490 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2446 = (((((_2417 * _2334) + _684) * cbLight._m0[_2371].x) * _2436) * _2059) + ((((cbLight._m0[_2283].x * _2025) * ((_2333 * _2334) + _684)) * _2357) * _2072);
    float _2447 = (((((_2417 * _2336) + _686) * cbLight._m0[_2371].y) * _2436) * _2059) + ((((cbLight._m0[_2283].y * _2027) * ((_2333 * _2336) + _686)) * _2357) * _2072);
    float _2448 = (((((_2417 * _2337) + _687) * cbLight._m0[_2371].z) * _2436) * _2059) + ((((cbLight._m0[_2283].z * _2029) * ((_2333 * _2337) + _687)) * _2357) * _2072);
    float _2504;
    float _2506;
    float _2508;
    if (_2112)
    {
        _2504 = _2446;
        _2506 = _2447;
        _2508 = _2448;
    }
    else
    {
        uint _2510 = _2036 + 2u;
        uint _2514 = _2036 + 10u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _524) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _601;
        float _2531 = cbLight._m0[_2510].y + _602;
        float _2532 = cbLight._m0[_2510].z + _603;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2510].xyz));
        float _4501 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2544 = dot(vec3(_521, _522, _523), vec3(_2537, _2538, _2539));
        float _4512 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4523 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2312 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2570) + _2529) * _2543))) * _2543;
        float _4534 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2504 = (((((_2563 * _2334) + _684) * cbLight._m0[_2514].x) * _2582) * _2583) + _2446;
        _2506 = (((((_2563 * _2336) + _686) * cbLight._m0[_2514].y) * _2582) * _2583) + _2447;
        _2508 = (((((_2563 * _2337) + _687) * cbLight._m0[_2514].z) * _2582) * _2583) + _2448;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2221)
    {
        _2614 = _2504;
        _2616 = _2506;
        _2618 = _2508;
    }
    else
    {
        uint _2625 = _2036 + 3u;
        uint _2629 = _2036 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _524) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _601;
        float _2646 = cbLight._m0[_2625].y + _602;
        float _2647 = cbLight._m0[_2625].z + _603;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2625].xyz));
        float _4550 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2659 = dot(vec3(_521, _522, _523), vec3(_2652, _2653, _2654));
        float _4561 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4572 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2312 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2312 * _2685) + _2644) * _2658))) * _2658;
        float _4583 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2614 = (((((_2678 * _2334) + _684) * cbLight._m0[_2629].x) * _2697) * _2698) + _2504;
        _2616 = (((((_2678 * _2336) + _686) * cbLight._m0[_2629].y) * _2697) * _2698) + _2506;
        _2618 = (((((_2678 * _2337) + _687) * cbLight._m0[_2629].z) * _2697) * _2698) + _2508;
    }
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_2034.y == 0u)
    {
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.x;
        uint _2731 = uint((float(_2719.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2720))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2720)));
        float _2741 = (log2(_1812 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2742 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        uint _2745 = uint(isnan(14.0) ? _2742 : (isnan(_2742) ? 14.0 : min(_2742, 14.0)));
        uvec4 _2750 = texelFetch(g_lightClusterGridBuffer, int(((_2745 << 2u) + (_2731 << 6u)) >> 2u));
        uint _2751 = _2750.x;
        uint _2752 = _2719.z;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((((1u << ((_2752 >> 4u) & 15u)) + 4294967295u) & _2751) == 0u) || ((_2752 & 240u) == 0u))
        {
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
        }
        else
        {
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3000)
                {
                    frontier_phi_71_pred = _2989;
                    frontier_phi_71_pred_1 = _2988;
                    frontier_phi_71_pred_2 = _2987;
                    frontier_phi_71_pred_3 = _2986;
                    frontier_phi_71_pred_4 = _2985;
                    frontier_phi_71_pred_5 = _2984;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _1810;
                        float _3196 = _3155.y - _1811;
                        float _3197 = _3155.z - _1812;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_640, _643, _646), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4609 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _1810;
                        float _3231 = (-0.0) - _1811;
                        float _3232 = (-0.0) - _1812;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _715;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_640, _643, _646), vec3(_3237, _3238, _3239));
                        float _4625 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3271 = dot(vec3(_640, _643, _646), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4636 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4647 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4658 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3306 * _3191.x) + _3129;
                        _3057 = (_3306 * _3191.y) + _3130;
                        _3058 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_71_pred = _3061;
                    frontier_phi_71_pred_1 = _3060;
                    frontier_phi_71_pred_2 = _3059;
                    frontier_phi_71_pred_3 = _3058;
                    frontier_phi_71_pred_4 = _3057;
                    frontier_phi_71_pred_5 = _3056;
                }
                _2842 = frontier_phi_71_pred;
                _2840 = frontier_phi_71_pred_1;
                _2838 = frontier_phi_71_pred_2;
                _2836 = frontier_phi_71_pred_3;
                _2834 = frontier_phi_71_pred_4;
                _2832 = frontier_phi_71_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2832;
                    _2985 = _2834;
                    _2986 = _2836;
                    _2987 = _2838;
                    _2988 = _2840;
                    _2989 = _2842;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
        }
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.z;
        uint _2848 = (_2846 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2848) & _2751) == 0u)
        {
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
            _2960 = _2839;
            _2962 = _2841;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
            float _2978 = _2977 * _1810;
            float _2979 = _2977 * _1811;
            float _2980 = _2977 * _1812;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2848 < ((_2846 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2831;
                float _3113 = _2833;
                float _3114 = _2835;
                float _3115 = _2837;
                float _3116 = _2839;
                float _3117 = _2841;
                uint _3118 = _2848;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3128)
                    {
                        frontier_phi_82_pred = _3117;
                        frontier_phi_82_pred_1 = _3116;
                        frontier_phi_82_pred_2 = _3115;
                        frontier_phi_82_pred_3 = _3114;
                        frontier_phi_82_pred_4 = _3113;
                        frontier_phi_82_pred_5 = _3112;
                    }
                    else
                    {
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3333 = _3112;
                        float _3334 = _3113;
                        float _3335 = _3114;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        uint _3339 = _3127;
                        uint _3340;
                        vec4 _3365;
                        float _3366;
                        vec4 _3381;
                        vec3 _3393;
                        vec4 _3409;
                        vec4 _3425;
                        float _3472;
                        bool _3473;
                        for (;;)
                        {
                            uint _3350 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3339));
                            _3340 = (_3339 + 4294967295u) & _3339;
                            uint _3352 = _3350 * 40u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3366 = _3365.w;
                            uint _3368 = (_3350 * 40u) + 4u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3350 * 40u) + 8u;
                            _3393 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x));
                            uint _3396 = (_3350 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3350 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3350 * 40u) + 24u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3447 = (_3350 * 40u) + 28u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3472 = fma(_1812, _3460.z, fma(_1811, _3460.y, _3460.x * _1810)) + _3460.w;
                            _3473 = !((fma(_1812, _3441.z, fma(_1811, _3441.y, _3441.x * _1810)) + _3441.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3473)
                            {
                                float _3500 = _3365.x - _1810;
                                float _3501 = _3365.y - _1811;
                                float _3502 = _3365.z - _1812;
                                float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                                float _3506 = inversesqrt(_3503);
                                float _3507 = _3506 * _3500;
                                float _3508 = _3506 * _3501;
                                float _3509 = _3506 * _3502;
                                float _3513 = 1.0 - (_3503 / (_3366 * _3366));
                                float _4669 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3518 = sqrt(_3503) * _3381.w;
                                float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                                float _3521 = _3520 * _3520;
                                float _3524 = ((1.0 - _3521) * dot(vec3(_3507, _3508, _3509), vec3(_640, _643, _646))) + _3521;
                                float _3527 = _3518 * _3518;
                                float _3531 = (fma(_1812, _3409.z, fma(_1811, _3409.y, _3409.x * _1810)) + _3409.w) / _3472;
                                float _3532 = (fma(_1812, _3425.z, fma(_1811, _3425.y, _3425.x * _1810)) + _3425.w) / _3472;
                                float _3536 = 1.0 - dot(vec2(_3531, _3532), vec2(_3531, _3532));
                                float _4685 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3538 = _3537 * (((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3514) / ((_3527 * 0.699999988079071044921875) + 1.0));
                                float _3550 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                                float _3551 = 1.0 - _715;
                                float _3558 = sqrt(1.0 - ((1.0 - (_3551 * _3551)) * (1.0 - (_3550 * _3550))));
                                float _3559 = _3558 * _3558;
                                float _3560 = _3559 * _3559;
                                float _3561 = _3507 - _2978;
                                float _3562 = _3508 - _2979;
                                float _3563 = _3509 - _2980;
                                float _3567 = inversesqrt(dot(vec3(_3561, _3562, _3563), vec3(_3561, _3562, _3563)));
                                float _3571 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4696 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3575 = dot(vec3(_640, _643, _646), vec3(_3567 * _3561, _3567 * _3562, _3567 * _3563));
                                float _4707 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3582 = ((_3578 * _3578) * (_3560 + (-1.0))) + 1.0;
                                float _3583 = _3520 * _3559;
                                float _3584 = _3583 * _3583;
                                float _3590 = ((1.0 - _3584) * dot(vec3(_640, _643, _646), vec3(_3507, _3508, _3509))) + _3584;
                                float _4718 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3592 = 1.0 - _3559;
                                float _3602 = (0.5 / (((_3591 * ((_3574 * _3592) + _3559)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3559) * _3574))) * _3591;
                                float _4729 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3612 = (_3537 * _3514) * (((_3560 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3582 * _3582) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3538 * _3381.z;
                                frontier_phi_88_pred_1 = _3538 * _3381.y;
                                frontier_phi_88_pred_2 = _3538 * _3381.x;
                                frontier_phi_88_pred_3 = _3612 * _3393.z;
                                frontier_phi_88_pred_4 = _3612 * _3393.y;
                                frontier_phi_88_pred_5 = _3612 * _3393.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3621 = frontier_phi_88_pred;
                            _3620 = frontier_phi_88_pred_1;
                            _3619 = frontier_phi_88_pred_2;
                            _3618 = frontier_phi_88_pred_3;
                            _3617 = frontier_phi_88_pred_4;
                            _3616 = frontier_phi_88_pred_5;
                            _3323 = _3619 + _3336;
                            _3324 = _3620 + _3337;
                            _3325 = _3621 + _3338;
                            _3320 = _3616 + _3333;
                            _3321 = _3617 + _3334;
                            _3322 = _3618 + _3335;
                            if (_3340 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3340;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3325;
                        frontier_phi_82_pred_1 = _3324;
                        frontier_phi_82_pred_2 = _3323;
                        frontier_phi_82_pred_3 = _3322;
                        frontier_phi_82_pred_4 = _3321;
                        frontier_phi_82_pred_5 = _3320;
                    }
                    _2963 = frontier_phi_82_pred;
                    _2961 = frontier_phi_82_pred_1;
                    _2959 = frontier_phi_82_pred_2;
                    _2957 = frontier_phi_82_pred_3;
                    _2955 = frontier_phi_82_pred_4;
                    _2953 = frontier_phi_82_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2959;
                frontier_phi_63_64_ladder_1 = _2963;
                frontier_phi_63_64_ladder_2 = _2961;
                frontier_phi_63_64_ladder_3 = _2957;
                frontier_phi_63_64_ladder_4 = _2955;
                frontier_phi_63_64_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_63_64_ladder = _2837;
                frontier_phi_63_64_ladder_1 = _2841;
                frontier_phi_63_64_ladder_2 = _2839;
                frontier_phi_63_64_ladder_3 = _2835;
                frontier_phi_63_64_ladder_4 = _2833;
                frontier_phi_63_64_ladder_5 = _2831;
            }
            _2952 = frontier_phi_63_64_ladder_5;
            _2954 = frontier_phi_63_64_ladder_4;
            _2956 = frontier_phi_63_64_ladder_3;
            _2958 = frontier_phi_63_64_ladder;
            _2960 = frontier_phi_63_64_ladder_2;
            _2962 = frontier_phi_63_64_ladder_1;
        }
        float _2967 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
        _2764 = (_2967 * _2958) + _2276;
        _2766 = (_2967 * _2960) + _2278;
        _2768 = (_2967 * _2962) + _2280;
        _2770 = ((_2952 * _684) * _2967) + _2614;
        _2772 = ((_2954 * _686) * _2967) + _2616;
        _2774 = ((_2956 * _687) * _2967) + _2618;
    }
    else
    {
        _2764 = _2276;
        _2766 = _2278;
        _2768 = _2280;
        _2770 = _2614;
        _2772 = _2616;
        _2774 = _2618;
    }
    float _4745 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4756 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4767 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _2791 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2764 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _699))) + ((_2770 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2766 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _699))) + ((_2772 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2768 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _699))) + ((_2774 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1540)) * cbPerFrame._m0[3u].x);
    uint _2794 = _659 + 6u;
    float _2802 = _621 / cbSceneParam._m0[86u].x;
    float _2803 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2817 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2819 = _2817.x;
    float _2820 = _2817.y;
    float _2821 = _2817.z;
    float _2822 = _2817.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2856 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2857 = _2856 / _544;
        float _2868 = _2857 * _594;
        float _2869 = _595 * _2857;
        float _2870 = (-0.0) - _2869;
        float _2872 = _2857 * _596;
        float _2874 = (cbSceneParam._m0[77u].w * _2870) / _2856;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2869;
        float _2882 = sqrt(((_2868 * _2868) + (_2869 * _2869)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2856)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2870 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3015 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2882 / _2870) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2892 * _3024) - exp2(_2892 * _3025)) * _3013))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2822);
        _2894 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2819;
        _2896 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2820;
        _2898 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2821;
        _2900 = _3080 * _2822;
    }
    else
    {
        _2894 = _2819;
        _2896 = _2820;
        _2898 = _2821;
        _2900 = _2822;
    }
    bool _3107;
    vec4 _2910;
    vec4 _2932;
    float _2934;
    float _2938;
    float _2939;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2910 = cbMatDynParam._m0[0u];
        float _2912 = roundEven(_2910.y);
        bool _2913 = _2912 == 3.0;
        float _2914 = log2(_2900);
        float _2921 = exp2(_2914 * cbSceneParam._m0[78u].x) * _2791;
        float _2922 = exp2(_2914 * cbSceneParam._m0[78u].y) * _2792;
        float _2923 = exp2(_2914 * cbSceneParam._m0[78u].z) * _2793;
        float _2930 = _610 + (-0.5);
        _2932 = cbMtdParam._m0[1u];
        _2934 = _2932.y * _2930;
        float _2937 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2938 = _2937 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = _2937 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
        _2940 = _2937 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
        _2941 = _2930 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_659 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _660 + uint(_2910.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2934 + 1.0) < _2932.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3311;
    if (_3107)
    {
        discard_state = true;
        _3311 = 0.0;
    }
    else
    {
        _3311 = cbInstanceData._m0[_2794].w;
    }
    SV_Target.x = _2938;
    SV_Target.y = _2939;
    SV_Target.z = _2940;
    SV_Target.w = _3311;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2794].w;
    discard_exit();
}


