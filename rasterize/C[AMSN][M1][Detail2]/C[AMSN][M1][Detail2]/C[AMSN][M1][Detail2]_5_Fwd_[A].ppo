#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_22;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_24;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1061;
float _3427;
float _3428;
float _3429;
float _3430;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _309 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3439 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[10u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[10u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[10u].z) - _255)) + _255;
    vec4 _343 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _372 = (TEXCOORD_8 - ((cbMtdParam._m0[14u].y * (1.0 - TEXCOORD_8)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_24, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[14u].z + 1.0);
    float _3450 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _380 = (_373 * ((_343.x * cbMtdParam._m0[11u].x) - _317)) + _317;
    float _381 = (_373 * ((_343.y * cbMtdParam._m0[11u].y) - _318)) + _318;
    float _382 = (_373 * ((_343.z * cbMtdParam._m0[11u].z) - _319)) + _319;
    vec4 _399 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _407 = (_399.x * 2.0) + (-1.0);
    float _409 = (_399.y * 2.0) + (-1.0);
    float _410 = dot(vec2(_407, _409), vec2(_407, _409));
    float _3461 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _415 = sqrt(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))));
    float _416 = _399.z * cbMtdParam._m0[13u].y;
    vec4 _429 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _443 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_429.z * cbMtdParam._m0[13u].x) - _416)) + _416;
    vec4 _457 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _471 = ((cbMtdParam._m0[14u].x * TEXCOORD_8) * ((_457.z * cbMtdParam._m0[13u].z) - _443)) + _443;
    float _484 = (((((_429.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _407) + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[13u].w);
    float _485 = (((((_429.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _409) + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[13u].w);
    float _488 = fma(_415, _217 * NORMAL.x, fma(_485, _224 * TANGENT.x, (_210 * _202) * _484));
    float _491 = fma(_415, _217 * NORMAL.y, fma(_485, _224 * TANGENT.y, (_210 * _203) * _484));
    float _494 = fma(_415, _217 * NORMAL.z, fma(_485, _224 * TANGENT.z, (_210 * _204) * _484));
    float _498 = inversesqrt(dot(vec3(_488, _491, _494), vec3(_488, _491, _494)));
    float _499 = _498 * _488;
    float _500 = _498 * _491;
    float _501 = _498 * _494;
    float _3472 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _502 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3494 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3505 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _571 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _561);
    float _572 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _561);
    float _573 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _561);
    float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
    float _578 = _571 * _577;
    float _579 = _572 * _577;
    float _580 = _573 * _577;
    vec4 _585 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _587 = _585.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _741 = sqrt(((_571 * _571) + (_572 * _572)) + (_573 * _573));
        float _747 = (cbMatDynParam._m0[5u].x * _741) + cbMatDynParam._m0[5u].y;
        float _3516 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _752 = (cbMatDynParam._m0[5u].z * _741) + cbMatDynParam._m0[5u].w;
        float _3527 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) - _748)) + _748) < ((_587 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_501, cbSceneParam._m0[5u].z, fma(_500, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _499));
    float _620 = fma(_501, cbSceneParam._m0[6u].z, fma(_500, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _499));
    float _623 = fma(_501, cbSceneParam._m0[7u].z, fma(_500, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _499));
    uint _636 = uint(roundEven(NORMAL.w)) * 13u;
    uint _637 = _636 + 9u;
    uint _638 = _637 + uint(cbMatDynParam._m0[0u].w);
    float _644 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_638].x;
    float _645 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_638].y;
    float _646 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_638].z;
    float _3538 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    vec4 _658 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _661 = _658.x * TEXCOORD_5.w;
    float _662 = dot(vec3(_499, _500, _501), vec3(_578, _579, _580));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _499) - _578;
    float _670 = (_665 * _500) - _579;
    float _671 = (_665 * _501) - _580;
    float _675 = abs(dot(vec3(_578, _579, _580), vec3(_499, _500, _501)));
    float _3571 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_502);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _789 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _793 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _818 = _722 + _499;
        float _819 = _726 + _500;
        float _820 = _730 + _501;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_499, _500, _501), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3619 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_499, _500, _501), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3652 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_499, _500, _501), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3685 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1108 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1112 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1135 = _722 + _499;
        float _1136 = _726 + _500;
        float _1137 = _730 + _501;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_499, _500, _501), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3748 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_499, _500, _501), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3781 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_499, _500, _501), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3814 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = _1061;
        _1383 = _1061;
        _1384 = _1061;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1073)) + _1073;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1074)) + _1074;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1075)) + _1075;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _669 * 0.5;
    float _1442 = _670 * 0.5;
    float _1443 = _671 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _502);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1571 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1574 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1602 = frontier_phi_17_15_ladder;
        }
        float _1806;
        if (_1571 > 0.0)
        {
            _1806 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1806 = frontier_phi_26_22_ladder;
        }
        float _2049;
        if (_1574 > 0.0)
        {
            _2049 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2049 = frontier_phi_38_33_ladder;
        }
        float _2051 = isnan(_1806) ? _1602 : (isnan(_1602) ? _1806 : min(_1602, _1806));
        float _2052 = isnan(_2049) ? _2051 : (isnan(_2051) ? _2049 : min(_2051, _2049));
        float _2056 = (_2052 * _1568) + _1557;
        float _2057 = (_2052 * _1571) + _1561;
        float _2058 = (_2052 * _1574) + _1565;
        float _2059 = _2052 * 9.9999997473787516355514526367188e-05;
        float _2061 = (-1.0) - _2059;
        float _2063 = _2059 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2058 > _2063) || ((_2058 < _2061) || ((_2057 > _2063) || ((_2057 < _2061) || ((_2056 < _2061) || (_2056 > _2063))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2058, cbModelParam._m0[9u].z, fma(_2057, cbModelParam._m0[9u].y, _2056 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2058, cbModelParam._m0[10u].z, fma(_2057, cbModelParam._m0[10u].y, _2056 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2058, cbModelParam._m0[11u].z, fma(_2057, cbModelParam._m0[11u].y, _2056 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_16_38_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_16_38_ladder_2;
        _1592 = frontier_phi_16_38_ladder_1;
        _1594 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1510);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _502);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1670 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1673 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1811;
        if (_1667 > 0.0)
        {
            _1811 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1811 = frontier_phi_28_24_ladder;
        }
        float _2076;
        if (_1670 > 0.0)
        {
            _2076 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2076 = frontier_phi_40_35_ladder;
        }
        float _2281;
        if (_1673 > 0.0)
        {
            _2281 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2281 = frontier_phi_49_46_ladder;
        }
        float _2283 = isnan(_2076) ? _1811 : (isnan(_1811) ? _2076 : min(_1811, _2076));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1667) + _1656;
        float _2289 = (_2284 * _1670) + _1660;
        float _2290 = (_2284 * _1673) + _1664;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2290, cbModelParam._m0[17u].z, fma(_2289, cbModelParam._m0[17u].y, _2288 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2290, cbModelParam._m0[18u].z, fma(_2289, cbModelParam._m0[18u].y, _2288 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2290, cbModelParam._m0[19u].z, fma(_2289, cbModelParam._m0[19u].y, _2288 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_25_49_ladder = _2489.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2489.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2489.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_25_49_ladder_2;
        _1694 = frontier_phi_25_49_ladder_1;
        _1696 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1599);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1708 = ((((1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_690 * _677)) * _661;
    float _1709 = _1708 * ((cbModelParam._m0[1u].w * (_1692 - _1590)) + _1590);
    float _1710 = _1708 * ((cbModelParam._m0[1u].w * (_1694 - _1592)) + _1592);
    float _1711 = _1708 * ((cbModelParam._m0[1u].w * (_1696 - _1594)) + _1594);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_636 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _661 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1765 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1769 = _1732 | 1u;
    float _1780 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_499, _500, _501));
    float _1783 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_499, _500, _501));
    float _3950 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _3961 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1788 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1790 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1797 = ((cbLight._m0[_1749].x * _1755) * _1790) + ((cbLight._m0[_1759].x * _1765) * _1788);
    float _1798 = ((_1755 * cbLight._m0[_1749].y) * _1790) + ((_1765 * cbLight._m0[_1759].y) * _1788);
    float _1799 = ((_1755 * cbLight._m0[_1749].z) * _1790) + ((_1765 * cbLight._m0[_1759].z) * _1788);
    uvec4 _1803 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1805 = _1803.x == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1805)
    {
        _1816 = _1797;
        _1818 = _1798;
        _1820 = _1799;
    }
    else
    {
        uint _1824 = _1732 + 6u;
        float _1840 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _1841 = _1840 * _1840;
        float _3972 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1843 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1816 = (((cbLight._m0[_1824].x * 0.3183098733425140380859375) * _1842) * _1843) + _1797;
        _1818 = (((cbLight._m0[_1824].y * 0.3183098733425140380859375) * _1842) * _1843) + _1798;
        _1820 = (((cbLight._m0[_1824].z * 0.3183098733425140380859375) * _1842) * _1843) + _1799;
    }
    bool _1823 = _1803.y == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1823)
    {
        _1861 = _1816;
        _1863 = _1818;
        _1865 = _1820;
    }
    else
    {
        uint _2020 = _1732 + 7u;
        float _2036 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_499, _500, _501)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _3988 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2039 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1861 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1816;
        _1863 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1818;
        _1865 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1820;
    }
    uint _1868 = _1732 + 8u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _502) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1732].x + _578;
    float _1884 = cbLight._m0[_1732].y + _579;
    float _1885 = cbLight._m0[_1732].z + _580;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1732].xyz));
    float _4004 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1897 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1898 = dot(vec3(_499, _500, _501), vec3(_1890, _1891, _1892));
    float _4026 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1890, _1891, _1892));
    float _4037 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1882 * _1882;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1921 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1922 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1897 * ((_1896 * _1922) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1922) + _1882) * _1896))) * _1896;
    float _4048 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    uint _1946 = _1732 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1769].w)) * _502) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1769].x + _578;
    float _1960 = cbLight._m0[_1769].y + _579;
    float _1961 = cbLight._m0[_1769].z + _580;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_1769].xyz));
    float _4059 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1973 = dot(vec3(_499, _500, _501), vec3(_1966, _1967, _1968));
    float _4070 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1769].xyz), vec3(_1966, _1967, _1968));
    float _4081 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1995 = 1.0 - _1958;
    float _2005 = (0.5 / (((_1897 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1995) + _1958) * _1972))) * _1972;
    float _4092 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2017 = (((_1994 * cbLight._m0[_1946].x) * _2007) * _1755) + (((_1921 * cbLight._m0[_1868].x) * _1935) * _1765);
    float _2018 = (((_1994 * cbLight._m0[_1946].y) * _2007) * _1755) + (((_1921 * cbLight._m0[_1868].y) * _1935) * _1765);
    float _2019 = (((_1994 * cbLight._m0[_1946].z) * _2007) * _1755) + (((_1921 * cbLight._m0[_1868].z) * _1935) * _1765);
    float _2081;
    float _2083;
    float _2085;
    if (_1805)
    {
        _2081 = _2017;
        _2083 = _2018;
        _2085 = _2019;
    }
    else
    {
        uint _2087 = _1732 + 2u;
        uint _2091 = _1732 + 10u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _502) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _578;
        float _2108 = cbLight._m0[_2087].y + _579;
        float _2109 = cbLight._m0[_2087].z + _580;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2087].xyz));
        float _4103 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2121 = dot(vec3(_499, _500, _501), vec3(_2114, _2115, _2116));
        float _4114 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4125 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1897 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2143) + _2106) * _2120))) * _2120;
        float _4136 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2081 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _2017;
        _2083 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _2018;
        _2085 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _2019;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1823)
    {
        _2191 = _2081;
        _2193 = _2083;
        _2195 = _2085;
    }
    else
    {
        uint _2202 = _1732 + 3u;
        uint _2206 = _1732 + 11u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _502) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _578;
        float _2223 = cbLight._m0[_2202].y + _579;
        float _2224 = cbLight._m0[_2202].z + _580;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_499, _500, _501), vec3(cbLight._m0[_2202].xyz));
        float _4152 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2236 = dot(vec3(_499, _500, _501), vec3(_2229, _2230, _2231));
        float _4163 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4174 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2258 = 1.0 - _2221;
        float _2268 = (0.5 / (((_1897 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2258) + _2221) * _2235))) * _2235;
        float _4185 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2191 = (((_2257 * cbLight._m0[_2206].x) * _2270) * _2271) + _2081;
        _2193 = (((_2257 * cbLight._m0[_2206].y) * _2270) * _2271) + _2083;
        _2195 = (((_2257 * cbLight._m0[_2206].z) * _2270) * _2271) + _2085;
    }
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    if (_1730.y == 0u)
    {
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2346;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2346;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2346;
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.x;
        uint _2373 = uint((float(_2361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2362))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2362)));
        float _2383 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2384 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        uint _2387 = uint(isnan(14.0) ? _2384 : (isnan(_2384) ? 14.0 : min(_2384, 14.0)));
        uvec4 _2392 = texelFetch(g_lightClusterGridBuffer, int(((_2387 << 2u) + (_2373 << 6u)) >> 2u));
        uint _2393 = _2392.x;
        uint _2394 = _2361.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2394 >> 4u) & 15u)) + 4294967295u) & _2393) == 0u) || ((_2394 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            uint _2653 = 0u;
            uint _2662;
            bool _2663;
            for (;;)
            {
                _2662 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                _2663 = _2662 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2663)
                {
                    frontier_phi_66_pred = _2647;
                    frontier_phi_66_pred_1 = _2652;
                    frontier_phi_66_pred_2 = _2651;
                    frontier_phi_66_pred_3 = _2650;
                    frontier_phi_66_pred_4 = _2649;
                    frontier_phi_66_pred_5 = _2648;
                }
                else
                {
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    uint _2798;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2662;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    for (;;)
                    {
                        uint _2802 = uint(findLSB(_2798)) + (_2653 << 5u);
                        uint _2799 = (_2798 + 4294967295u) & _2798;
                        uint _2804 = _2802 * 48u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2824 = (_2802 * 48u) + 4u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2843 = (_2802 * 48u) + 8u;
                        vec3 _2854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x));
                        float _2858 = _2818.x - _2347;
                        float _2859 = _2818.y - _2348;
                        float _2860 = _2818.z - _2349;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_617, _620, _623), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2818.w);
                        float _4211 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2875 = sqrt(_2861) * _2837.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2868) + _2879;
                        float _2885 = _2875 * _2875;
                        float _2889 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2874) / ((_2885 * 0.699999988079071044921875) + 1.0);
                        float _2893 = (-0.0) - _2347;
                        float _2894 = (-0.0) - _2348;
                        float _2895 = (-0.0) - _2349;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2910 = exp2(log2(1.0 / ((_2885 * 3.5) + 5.0)) * 0.25);
                        float _2911 = 1.0 - _677;
                        float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                        float _2919 = _2918 * _2918;
                        float _2920 = _2919 * _2919;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2931 = dot(vec3(_617, _620, _623), vec3(_2900, _2901, _2902));
                        float _4227 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2935 = dot(vec3(_617, _620, _623), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                        float _4238 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                        float _2943 = _2878 * _2919;
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2868) + _2944;
                        float _4249 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2949 = 1.0 - _2919;
                        float _2959 = (0.5 / (((_2948 * ((_2934 * _2949) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2949) + _2919) * _2934))) * _2948;
                        float _4260 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2970 = (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) / ((_2942 * _2942) * ((_2885 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2722 = (_2889 * _2837.x) + _2795;
                        _2723 = (_2889 * _2837.y) + _2796;
                        _2724 = (_2889 * _2837.z) + _2797;
                        _2719 = (_2970 * _2854.x) + _2792;
                        _2720 = (_2970 * _2854.y) + _2793;
                        _2721 = (_2970 * _2854.z) + _2794;
                        if (_2799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2799;
                        }
                    }
                    frontier_phi_66_pred = _2719;
                    frontier_phi_66_pred_1 = _2724;
                    frontier_phi_66_pred_2 = _2723;
                    frontier_phi_66_pred_3 = _2722;
                    frontier_phi_66_pred_4 = _2721;
                    frontier_phi_66_pred_5 = _2720;
                }
                _2495 = frontier_phi_66_pred;
                _2505 = frontier_phi_66_pred_1;
                _2503 = frontier_phi_66_pred_2;
                _2501 = frontier_phi_66_pred_3;
                _2499 = frontier_phi_66_pred_4;
                _2497 = frontier_phi_66_pred_5;
                uint _2654 = _2653 + 1u;
                if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2647 = _2495;
                    _2648 = _2497;
                    _2649 = _2499;
                    _2650 = _2501;
                    _2651 = _2503;
                    _2652 = _2505;
                    _2653 = _2654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((4294967295u << _2511) & _2393) == 0u)
        {
            _2615 = _2494;
            _2617 = _2496;
            _2619 = _2498;
            _2621 = _2500;
            _2623 = _2502;
            _2625 = _2504;
        }
        else
        {
            float _2640 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _2641 = _2640 * _2347;
            float _2642 = _2640 * _2348;
            float _2643 = _2640 * _2349;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2775 = _2494;
                float _2776 = _2496;
                float _2777 = _2498;
                float _2778 = _2500;
                float _2779 = _2502;
                float _2780 = _2504;
                uint _2781 = _2511;
                uint _2790;
                bool _2791;
                for (;;)
                {
                    _2790 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                    _2791 = _2790 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2791)
                    {
                        frontier_phi_77_pred = _2780;
                        frontier_phi_77_pred_1 = _2779;
                        frontier_phi_77_pred_2 = _2778;
                        frontier_phi_77_pred_3 = _2777;
                        frontier_phi_77_pred_4 = _2776;
                        frontier_phi_77_pred_5 = _2775;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        uint _3003 = _2790;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3073;
                        vec4 _3089;
                        float _3136;
                        bool _3137;
                        for (;;)
                        {
                            uint _3014 = ((_2781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3060 = (_3014 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3076 = (_3014 * 40u) + 20u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3092 = (_3014 * 40u) + 24u;
                            vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3111 = (_3014 * 40u) + 28u;
                            vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            _3136 = fma(_2349, _3124.z, fma(_2348, _3124.y, _3124.x * _2347)) + _3124.w;
                            _3137 = !((fma(_2349, _3105.z, fma(_2348, _3105.y, _3105.x * _2347)) + _3105.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3137)
                            {
                                float _3164 = _3029.x - _2347;
                                float _3165 = _3029.y - _2348;
                                float _3166 = _3029.z - _2349;
                                float _3167 = dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166));
                                float _3170 = inversesqrt(_3167);
                                float _3171 = _3170 * _3164;
                                float _3172 = _3170 * _3165;
                                float _3173 = _3170 * _3166;
                                float _3177 = 1.0 - (_3167 / (_3030 * _3030));
                                float _4271 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3178 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3182 = sqrt(_3167) * _3045.w;
                                float _3184 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                                float _3185 = _3184 * _3184;
                                float _3188 = ((1.0 - _3185) * dot(vec3(_3171, _3172, _3173), vec3(_617, _620, _623))) + _3185;
                                float _3191 = _3182 * _3182;
                                float _3195 = (fma(_2349, _3073.z, fma(_2348, _3073.y, _3073.x * _2347)) + _3073.w) / _3136;
                                float _3196 = (fma(_2349, _3089.z, fma(_2348, _3089.y, _3089.x * _2347)) + _3089.w) / _3136;
                                float _3200 = 1.0 - dot(vec2(_3195, _3196), vec2(_3195, _3196));
                                float _4287 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3202 = _3201 * (((isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))) * _3178) / ((_3191 * 0.699999988079071044921875) + 1.0));
                                float _3214 = exp2(log2(1.0 / ((_3191 * 3.5) + 5.0)) * 0.25);
                                float _3215 = 1.0 - _677;
                                float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                                float _3223 = _3222 * _3222;
                                float _3224 = _3223 * _3223;
                                float _3225 = _3171 - _2641;
                                float _3226 = _3172 - _2642;
                                float _3227 = _3173 - _2643;
                                float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                                float _3235 = dot(vec3(_617, _620, _623), vec3((-0.0) - _2641, (-0.0) - _2642, (-0.0) - _2643));
                                float _4298 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3239 = dot(vec3(_617, _620, _623), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                                float _4309 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                                float _3247 = _3184 * _3223;
                                float _3248 = _3247 * _3247;
                                float _3254 = ((1.0 - _3248) * dot(vec3(_617, _620, _623), vec3(_3171, _3172, _3173))) + _3248;
                                float _4320 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3256 = 1.0 - _3223;
                                float _3266 = (0.5 / (((_3255 * ((_3238 * _3256) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3223) * _3238))) * _3255;
                                float _4331 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3276 = (_3201 * _3178) * (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) / ((_3246 * _3246) * ((_3191 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3202 * _3045.y;
                                frontier_phi_83_pred_1 = _3202 * _3045.x;
                                frontier_phi_83_pred_2 = _3276 * _3057.z;
                                frontier_phi_83_pred_3 = _3276 * _3057.y;
                                frontier_phi_83_pred_4 = _3276 * _3057.x;
                                frontier_phi_83_pred_5 = _3202 * _3045.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_83_pred;
                            _3283 = frontier_phi_83_pred_1;
                            _3282 = frontier_phi_83_pred_2;
                            _3281 = frontier_phi_83_pred_3;
                            _3280 = frontier_phi_83_pred_4;
                            _3285 = frontier_phi_83_pred_5;
                            _2987 = _3283 + _3000;
                            _2988 = _3284 + _3001;
                            _2989 = _3285 + _3002;
                            _2984 = _3280 + _2997;
                            _2985 = _3281 + _2998;
                            _2986 = _3282 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2989;
                        frontier_phi_77_pred_1 = _2988;
                        frontier_phi_77_pred_2 = _2987;
                        frontier_phi_77_pred_3 = _2986;
                        frontier_phi_77_pred_4 = _2985;
                        frontier_phi_77_pred_5 = _2984;
                    }
                    _2626 = frontier_phi_77_pred;
                    _2624 = frontier_phi_77_pred_1;
                    _2622 = frontier_phi_77_pred_2;
                    _2620 = frontier_phi_77_pred_3;
                    _2618 = frontier_phi_77_pred_4;
                    _2616 = frontier_phi_77_pred_5;
                    uint _2782 = _2781 + 1u;
                    if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2775 = _2616;
                        _2776 = _2618;
                        _2777 = _2620;
                        _2778 = _2622;
                        _2779 = _2624;
                        _2780 = _2626;
                        _2781 = _2782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2620;
                frontier_phi_58_59_ladder_1 = _2626;
                frontier_phi_58_59_ladder_2 = _2624;
                frontier_phi_58_59_ladder_3 = _2622;
                frontier_phi_58_59_ladder_4 = _2618;
                frontier_phi_58_59_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_58_59_ladder = _2498;
                frontier_phi_58_59_ladder_1 = _2504;
                frontier_phi_58_59_ladder_2 = _2502;
                frontier_phi_58_59_ladder_3 = _2500;
                frontier_phi_58_59_ladder_4 = _2496;
                frontier_phi_58_59_ladder_5 = _2494;
            }
            _2615 = frontier_phi_58_59_ladder_5;
            _2617 = frontier_phi_58_59_ladder_4;
            _2619 = frontier_phi_58_59_ladder;
            _2621 = frontier_phi_58_59_ladder_3;
            _2623 = frontier_phi_58_59_ladder_2;
            _2625 = frontier_phi_58_59_ladder_1;
        }
        float _2630 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2406 = (_2630 * _2621) + _1861;
        _2408 = (_2630 * _2623) + _1863;
        _2410 = (_2630 * _2625) + _1865;
        _2412 = ((_2615 * 0.039999999105930328369140625) * _2630) + _2191;
        _2414 = ((_2617 * 0.039999999105930328369140625) * _2630) + _2193;
        _2416 = ((_2619 * 0.039999999105930328369140625) * _2630) + _2195;
    }
    else
    {
        _2406 = _1861;
        _2408 = _1863;
        _2410 = _1865;
        _2412 = _2191;
        _2414 = _2193;
        _2416 = _2195;
    }
    float _4347 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4358 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4369 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2433 = ((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2406 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _661))) + ((_2412 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2434 = ((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2408 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _661))) + ((_2414 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2435 = ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2410 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _661))) + ((_2416 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    uint _2436 = _636 + 6u;
    float _2444 = _598 / cbSceneParam._m0[86u].x;
    float _2445 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2461 = _2459.x;
    float _2462 = _2459.y;
    float _2463 = _2459.z;
    float _2464 = _2459.w;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2520 = _2519 / _521;
        float _2531 = _2520 * _571;
        float _2532 = _572 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2535 = _2520 * _573;
        float _2537 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2538 = _2537 + cbSceneParam._m0[79u].w;
        float _2539 = cbSceneParam._m0[79u].w - _2532;
        float _2545 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2535 * _2535));
        float _2548 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2545;
        float _2553 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2555 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2732;
        if (abs((_2533 - _2537) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2732 = ((((_2538 > 0.0) ? exp2(_2553 * _2538) : (2.0 - exp2(_2555 * _2538))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2548;
        }
        else
        {
            float _2676 = 1.0 / cbSceneParam._m0[80u].x;
            float _2677 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : max(_2538, _2539));
            float _2678 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : min(_2538, _2539));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            _2732 = ((abs(_2545 / _2533) * cbSceneParam._m0[80u].y) * ((((_2687 - _2688) * 2.0) - ((exp2(_2553 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)))) - exp2(_2553 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))))) * _2676)) - ((exp2(_2555 * _2687) - exp2(_2555 * _2688)) * _2676))) + (_2548 * cbSceneParam._m0[80u].z);
        }
        vec4 _2734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, 1.0), 0.0);
        float _2743 = exp2((_2732 * (-1.44269502162933349609375)) * (1.0 - _2734.w));
        float _2744 = log2(_2743);
        float _2760 = log2(_2464);
        _2557 = (exp2(_2760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].x)) * _2734.x) / cbSceneParam._m0[78u].x)) + _2461;
        _2559 = (exp2(_2760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].y)) * _2734.y) / cbSceneParam._m0[78u].y)) + _2462;
        _2561 = (exp2(_2760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].z)) * _2734.z) / cbSceneParam._m0[78u].z)) + _2463;
        _2563 = _2743 * _2464;
    }
    else
    {
        _2557 = _2461;
        _2559 = _2462;
        _2561 = _2463;
        _2563 = _2464;
    }
    bool _2770;
    vec4 _2573;
    vec4 _2595;
    float _2597;
    float _2601;
    float _2602;
    float _2603;
    float _2604;
    bool _2614;
    for (;;)
    {
        _2573 = cbMatDynParam._m0[0u];
        float _2575 = roundEven(_2573.y);
        bool _2576 = _2575 == 3.0;
        float _2577 = log2(_2563);
        float _2584 = exp2(_2577 * cbSceneParam._m0[78u].x) * _2433;
        float _2585 = exp2(_2577 * cbSceneParam._m0[78u].y) * _2434;
        float _2586 = exp2(_2577 * cbSceneParam._m0[78u].z) * _2435;
        float _2593 = _587 + (-0.5);
        _2595 = cbMtdParam._m0[1u];
        _2597 = _2595.y * _2593;
        float _2600 = (_2575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2601 = _2600 * (_2576 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2557)));
        _2602 = _2600 * (_2576 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2559)));
        _2603 = _2600 * (_2576 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2561)));
        _2604 = _2593 * 0.999000012874603271484375;
        _2614 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2614)
        {
            if ((cbInstanceData._m0[_636 + 7u].x + _2604) < 0.5)
            {
                _2770 = true;
                break;
            }
        }
        uint _2711 = _637 + uint(_2573.w);
        if ((cbInstanceData._m0[_2711].w < 1.0) && ((cbInstanceData._m0[_2711].w + _2604) < 0.5))
        {
            _2770 = true;
            break;
        }
        if ((_2597 + 1.0) < _2595.x)
        {
            _2770 = true;
            break;
        }
        _2770 = false;
        break;
    }
    float _2975;
    if (_2770)
    {
        discard_state = true;
        _2975 = 0.0;
    }
    else
    {
        _2975 = cbInstanceData._m0[_2436].w;
    }
    SV_Target.x = _2601;
    SV_Target.y = _2602;
    SV_Target.z = _2603;
    SV_Target.w = _2975;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2436].w;
    discard_exit();
}


