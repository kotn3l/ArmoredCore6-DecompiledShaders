#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[15];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_12;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_13;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_20;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_21;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D C_AMSN_M1_Detail2_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _955;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _303 = (TEXCOORD_5.x - ((cbMtdParam._m0[12u].z * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[12u].y + 1.0);
    float _3573 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _311 = (_304 * ((_272.x * cbMtdParam._m0[10u].x) - _247)) + _247;
    float _312 = (_304 * ((_272.y * cbMtdParam._m0[10u].y) - _248)) + _248;
    float _313 = (_304 * ((_272.z * cbMtdParam._m0[10u].z) - _249)) + _249;
    vec4 _325 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _327 = _325.x;
    float _329 = _327 - (_327 * TEXCOORD_5.x);
    vec4 _346 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = (_346.x * 2.0) + (-1.0);
    float _356 = (_346.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_354, _356), vec2(_354, _356));
    float _3584 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _363 = _346.z * cbMtdParam._m0[13u].y;
    vec4 _376 = texture(sampler2D(C_AMSN_M1_Detail2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _390 = ((cbMtdParam._m0[12u].w * TEXCOORD_5.x) * ((_376.z * cbMtdParam._m0[13u].x) - _363)) + _363;
    float _396 = ((((_376.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[12u].x) + _354;
    float _397 = ((((_376.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[12u].x) + _356;
    float _400 = fma(_362, _211 * NORMAL.x, fma(_397, _218 * TANGENT.x, (_204 * _196) * _396));
    float _403 = fma(_362, _211 * NORMAL.y, fma(_397, _218 * TANGENT.y, (_204 * _197) * _396));
    float _406 = fma(_362, _211 * NORMAL.z, fma(_397, _218 * TANGENT.z, (_204 * _198) * _396));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3595 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _414 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3617 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3628 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3639 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _418 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _524 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _527 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _540 = uint(roundEven(NORMAL.w)) * 13u;
    uint _542 = (_540 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _548 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_542].x;
    float _549 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_542].y;
    float _550 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_542].z;
    float _3650 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _554 = 1.0 - _418;
    float _555 = _551 * _554;
    float _556 = _552 * _554;
    float _557 = _553 * _554;
    float _562 = (_551 + (-0.039999999105930328369140625)) * _418;
    float _563 = (_552 + (-0.039999999105930328369140625)) * _418;
    float _564 = (_553 + (-0.039999999105930328369140625)) * _418;
    float _565 = _562 + 0.039999999105930328369140625;
    float _567 = _563 + 0.039999999105930328369140625;
    float _568 = _564 + 0.039999999105930328369140625;
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _580 = _577.x * TEXCOORD_5.w;
    float _581 = dot(vec3(_411, _412, _413), vec3(_492, _493, _494));
    float _584 = _581 * 2.0;
    float _588 = (_584 * _411) - _492;
    float _589 = (_584 * _412) - _493;
    float _590 = (_584 * _413) - _494;
    float _594 = abs(dot(vec3(_492, _493, _494), vec3(_411, _412, _413)));
    float _3683 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _596 = sqrt(_414);
    float _609 = exp2((_596 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_596 * 3.0));
    float _615 = (1.0 - _609) * ((_596 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _616 = _609 * _596;
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _954;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _679 = fma(_652, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644));
        float _683 = fma(_652, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644));
        float _687 = fma(_652, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644));
        float _712 = _644 + _411;
        float _713 = _648 + _412;
        float _714 = _652 + _413;
        float _724 = fma(_714, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712)) - _679;
        float _725 = fma(_714, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712)) - _683;
        float _726 = fma(_714, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712)) - _687;
        float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
        float _743 = ((_730 * _724) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_679 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_730 * _725) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_683 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_730 * _726) / cbModelParam._m0[34u].z) + ((((((_687 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_743, _744, _745), 0.0);
        float _782 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_748.x + (-0.5));
        float _784 = _782 * (_748.y + (-0.5));
        float _785 = _782 * (_748.z + (-0.5));
        float _792 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_755.x + (-0.5));
        float _794 = _792 * (_755.y + (-0.5));
        float _795 = _792 * (_755.z + (-0.5));
        float _802 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_762.x + (-0.5));
        float _804 = _802 * (_762.y + (-0.5));
        float _805 = _802 * (_762.z + (-0.5));
        float _812 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_769.x + (-0.5));
        float _814 = _812 * (_769.y + (-0.5));
        float _815 = _812 * (_769.z + (-0.5));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _819 = _783 * 0.5;
        float _820 = _793 * 0.5;
        float _821 = _803 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _836 = (dot(vec3(_411, _412, _413), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _846 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3731 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_848 + 1.0))) + _853) * _816;
        float _863 = _784 * 0.5;
        float _864 = _794 * 0.5;
        float _865 = _804 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _879 = (dot(vec3(_411, _412, _413), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _888 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3764 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_890 + 1.0))) + _895) * _817;
        float _905 = _785 * 0.5;
        float _906 = _795 * 0.5;
        float _907 = _805 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_411, _412, _413), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_818 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3797 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_932 + 1.0))) + _937) * _818;
        _954 = _785;
        _956 = _784;
        _957 = _783;
        _958 = _795;
        _959 = _794;
        _960 = _793;
        _961 = _805;
        _962 = _804;
        _963 = _803;
        _964 = _818;
        _965 = _817;
        _966 = _816;
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _969 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
    }
    else
    {
        _954 = _955;
        _956 = _955;
        _957 = _955;
        _958 = _955;
        _959 = _955;
        _960 = _955;
        _961 = _955;
        _962 = _955;
        _963 = _955;
        _964 = _955;
        _965 = _955;
        _966 = _955;
        _967 = 0.0;
        _968 = 0.0;
        _969 = 0.0;
    }
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _995 = fma(_652, cbModelParam._m0[30u].z, fma(_648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _644));
        float _999 = fma(_652, cbModelParam._m0[31u].z, fma(_648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _644));
        float _1003 = fma(_652, cbModelParam._m0[32u].z, fma(_648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _644));
        float _1026 = _644 + _411;
        float _1027 = _648 + _412;
        float _1028 = _652 + _413;
        float _1038 = fma(_1028, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026)) - _995;
        float _1039 = fma(_1028, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026)) - _999;
        float _1040 = fma(_1028, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026)) - _1003;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_995 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_999 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[35u].z) + ((((((_1003 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1094 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1061.x + (-0.5));
        float _1096 = _1094 * (_1061.y + (-0.5));
        float _1097 = _1094 * (_1061.z + (-0.5));
        float _1104 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1068.x + (-0.5));
        float _1106 = _1104 * (_1068.y + (-0.5));
        float _1107 = _1104 * (_1068.z + (-0.5));
        float _1114 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1075.x + (-0.5));
        float _1116 = _1114 * (_1075.y + (-0.5));
        float _1117 = _1114 * (_1075.z + (-0.5));
        float _1124 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1082.x + (-0.5));
        float _1126 = _1124 * (_1082.y + (-0.5));
        float _1127 = _1124 * (_1082.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_411, _412, _413), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3860 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1158 + 1.0))) + _1163) * _1128;
        float _1173 = _1096 * 0.5;
        float _1174 = _1106 * 0.5;
        float _1175 = _1116 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_411, _412, _413), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3893 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1200 + 1.0))) + _1205) * _1129;
        float _1215 = _1097 * 0.5;
        float _1216 = _1107 * 0.5;
        float _1217 = _1117 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_411, _412, _413), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3926 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1242 + 1.0))) + _1247) * _1130;
        _1264 = _1097;
        _1265 = _1096;
        _1266 = _1095;
        _1267 = _1107;
        _1268 = _1106;
        _1269 = _1105;
        _1270 = _1117;
        _1271 = _1116;
        _1272 = _1115;
        _1273 = _1130;
        _1274 = _1129;
        _1275 = _1128;
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1277 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _955;
        _1265 = _955;
        _1266 = _955;
        _1267 = _955;
        _1268 = _955;
        _1269 = _955;
        _1270 = _955;
        _1271 = _955;
        _1272 = _955;
        _1273 = _955;
        _1274 = _955;
        _1275 = _955;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _967)) + _967;
    float _1289 = (cbModelParam._m0[1u].x * (_1277 - _968)) + _968;
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _969)) + _969;
    float _1311 = fma(_1290, cbSceneParam._m0[89u].z, fma(_1289, cbSceneParam._m0[89u].y, _1288 * cbSceneParam._m0[89u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[90u].z, fma(_1289, cbSceneParam._m0[90u].y, _1288 * cbSceneParam._m0[90u].x));
    float _1317 = fma(_1290, cbSceneParam._m0[91u].z, fma(_1289, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1288));
    float _1332 = _588 * 0.5;
    float _1333 = _589 * 0.5;
    float _1334 = _590 * 0.5;
    float _1335 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1338 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1265, _1268, _1271, _1274));
    float _1341 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1375;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1348 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_954, _958, _961, _964));
        float _1352 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_956, _959, _962, _965));
        float _1356 = dot(vec4(_1332, _1333, _1334, 1.0), vec4(_957, _960, _963, _966));
        float _1363 = dot(vec4(cbModelParam._m0[39u]), vec4(_1332, _1333, _1334, 1.0));
        _1375 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1363) ? 0.0 : (isnan(0.0) ? _1363 : max(0.0, _1363))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1375 = 1.0;
    }
    float _1386;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1377 = dot(vec4(cbModelParam._m0[40u]), vec4(_1332, _1333, _1334, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1390 = (_1386 * cbModelParam._m0[1u].x) + (_1375 * (1.0 - cbModelParam._m0[1u].x));
    float _1400 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1400 : min(cbModelParam._m0[25u].z, _1400));
    float _1482;
    float _1484;
    float _1486;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1449 = fma(_652, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644)) + cbModelParam._m0[13u].w;
        float _1453 = fma(_652, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644)) + cbModelParam._m0[14u].w;
        float _1457 = fma(_652, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644)) + cbModelParam._m0[15u].w;
        float _1460 = fma(_590, cbModelParam._m0[13u].z, fma(_589, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588));
        float _1463 = fma(_590, cbModelParam._m0[14u].z, fma(_589, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588));
        float _1466 = fma(_590, cbModelParam._m0[15u].z, fma(_589, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588));
        float _1494;
        if (_1460 > 0.0)
        {
            _1494 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1494 = frontier_phi_14_12_ladder;
        }
        float _1669;
        if (_1463 > 0.0)
        {
            _1669 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1669 = frontier_phi_23_19_ladder;
        }
        float _1965;
        if (_1466 > 0.0)
        {
            _1965 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1965 = frontier_phi_35_30_ladder;
        }
        float _1967 = isnan(_1669) ? _1494 : (isnan(_1494) ? _1669 : min(_1494, _1669));
        float _1968 = isnan(_1965) ? _1967 : (isnan(_1967) ? _1965 : min(_1967, _1965));
        float _1972 = (_1968 * _1460) + _1449;
        float _1973 = (_1968 * _1463) + _1453;
        float _1974 = (_1968 * _1466) + _1457;
        float _1975 = _1968 * 9.9999997473787516355514526367188e-05;
        float _1977 = (-1.0) - _1975;
        float _1979 = _1975 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1974 > _1979) || ((_1974 < _1977) || ((_1973 > _1979) || ((_1973 < _1977) || ((_1972 < _1977) || (_1972 > _1979))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1974, cbModelParam._m0[9u].z, fma(_1973, cbModelParam._m0[9u].y, _1972 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1974, cbModelParam._m0[10u].z, fma(_1973, cbModelParam._m0[10u].y, _1972 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1974, cbModelParam._m0[11u].z, fma(_1973, cbModelParam._m0[11u].y, _1972 * cbModelParam._m0[11u].x))), _1401);
            frontier_phi_13_35_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1482 = frontier_phi_13_35_ladder_2;
        _1484 = frontier_phi_13_35_ladder_1;
        _1486 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_588, _589, _590), _1401);
        _1482 = _1470.x * cbModelParam._m0[1u].y;
        _1484 = _1470.y * cbModelParam._m0[1u].y;
        _1486 = _1470.z * cbModelParam._m0[1u].y;
    }
    float _1490 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1490 : min(cbModelParam._m0[25u].w, _1490));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1548 = fma(_652, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644)) + cbModelParam._m0[21u].w;
        float _1552 = fma(_652, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644)) + cbModelParam._m0[22u].w;
        float _1556 = fma(_652, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644)) + cbModelParam._m0[23u].w;
        float _1559 = fma(_590, cbModelParam._m0[21u].z, fma(_589, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588));
        float _1562 = fma(_590, cbModelParam._m0[22u].z, fma(_589, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588));
        float _1565 = fma(_590, cbModelParam._m0[23u].z, fma(_589, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588));
        float _1674;
        if (_1559 > 0.0)
        {
            _1674 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1674 = frontier_phi_25_21_ladder;
        }
        float _1992;
        if (_1562 > 0.0)
        {
            _1992 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1992 = frontier_phi_37_32_ladder;
        }
        float _2330;
        if (_1565 > 0.0)
        {
            _2330 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2330 = frontier_phi_47_44_ladder;
        }
        float _2332 = isnan(_1992) ? _1674 : (isnan(_1674) ? _1992 : min(_1674, _1992));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1559) + _1548;
        float _2338 = (_2333 * _1562) + _1552;
        float _2339 = (_2333 * _1565) + _1556;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2341 = (-1.0) - _2340;
        float _2343 = _2340 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2339 > _2343) || ((_2339 < _2341) || ((_2338 > _2343) || ((_2338 < _2341) || ((_2337 < _2341) || (_2337 > _2343))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2339, cbModelParam._m0[17u].z, fma(_2338, cbModelParam._m0[17u].y, _2337 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2339, cbModelParam._m0[18u].z, fma(_2338, cbModelParam._m0[18u].y, _2337 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2339, cbModelParam._m0[19u].z, fma(_2338, cbModelParam._m0[19u].y, _2337 * cbModelParam._m0[19u].x))), _1491);
            frontier_phi_22_47_ladder = _2461.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2461.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2461.x * cbModelParam._m0[1u].z;
        }
        _1584 = frontier_phi_22_47_ladder_2;
        _1586 = frontier_phi_22_47_ladder_1;
        _1588 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_588, _589, _590), _1491);
        _1584 = _1568.x * cbModelParam._m0[1u].z;
        _1586 = _1568.y * cbModelParam._m0[1u].z;
        _1588 = _1568.z * cbModelParam._m0[1u].z;
    }
    float _1601 = (((_615 * _565) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1584 - _1482)) + _1482);
    float _1603 = (((_615 * _567) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1586 - _1484)) + _1484);
    float _1605 = (((_615 * _568) + _616) * _580) * ((cbModelParam._m0[1u].w * (_1588 - _1486)) + _1486);
    float _1608 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, _1601 * cbSceneParam._m0[91u].x));
    float _1648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1652 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1656 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1660 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1661 = _1648 / _1660;
    float _1662 = _1652 / _1660;
    float _1663 = _1656 / _1660;
    float _1810;
    float _1811;
    float _1812;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1690 = ((uint(_1663 > cbSceneParam._m0[59u].y) + uint(_1663 > cbSceneParam._m0[59u].x)) + uint(_1663 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1691 = _1690 + 43u;
        uint _1699 = _1690 + 44u;
        uint _1707 = _1690 + 45u;
        uint _1715 = _1690 + 46u;
        float _1726 = fma(_1660, cbSceneParam._m0[_1691].w, fma(_1656, cbSceneParam._m0[_1691].z, fma(_1652, cbSceneParam._m0[_1691].y, _1648 * cbSceneParam._m0[_1691].x)));
        float _1730 = fma(_1660, cbSceneParam._m0[_1699].w, fma(_1656, cbSceneParam._m0[_1699].z, fma(_1652, cbSceneParam._m0[_1699].y, _1648 * cbSceneParam._m0[_1699].x)));
        float _1738 = fma(_1660, cbSceneParam._m0[_1715].w, fma(_1656, cbSceneParam._m0[_1715].z, fma(_1652, cbSceneParam._m0[_1715].y, _1648 * cbSceneParam._m0[_1715].x)));
        float _1743 = cbSceneParam._m0[33u].z * _1738;
        float _1745 = cbSceneParam._m0[33u].w * _1738;
        float _1748 = fma(_1660, cbSceneParam._m0[_1707].w, fma(_1656, cbSceneParam._m0[_1707].z, fma(_1652, cbSceneParam._m0[_1707].y, _1648 * cbSceneParam._m0[_1707].x))) / _1738;
        float _1796 = (cbSceneParam._m0[33u].x - sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663))) * cbSceneParam._m0[33u].y;
        float _4052 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1803 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1743 + _1726) / _1738, (_1745 + _1730) / _1738), _1748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 + _1726) / _1738, (_1730 - _1743) / _1738), _1748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 - _1743) / _1738, (_1730 - _1745) / _1738), _1748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 - _1745) / _1738, (_1743 + _1730) / _1738), _1748), 0.0)).x), vec4(0.25)));
        _1810 = 1.0 - (_1803 * cbSceneParam._m0[34u].x);
        _1811 = 1.0 - (_1803 * cbSceneParam._m0[34u].y);
        _1812 = 1.0 - (_1803 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1810 = 1.0;
        _1811 = 1.0;
        _1812 = 1.0;
    }
    float _1876;
    float _1878;
    float _1880;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1864 = fma(_1660, cbSceneParam._m0[63u].w, fma(_1656, cbSceneParam._m0[63u].z, fma(_1652, cbSceneParam._m0[63u].y, _1648 * cbSceneParam._m0[63u].x)));
        float _1865 = fma(_1660, cbSceneParam._m0[60u].w, fma(_1656, cbSceneParam._m0[60u].z, fma(_1652, cbSceneParam._m0[60u].y, _1648 * cbSceneParam._m0[60u].x))) / _1864;
        float _1866 = fma(_1660, cbSceneParam._m0[61u].w, fma(_1656, cbSceneParam._m0[61u].z, fma(_1652, cbSceneParam._m0[61u].y, _1648 * cbSceneParam._m0[61u].x))) / _1864;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1865 >= cbSceneParam._m0[64u].x) && (_1866 >= cbSceneParam._m0[64u].y)) && (_1865 <= cbSceneParam._m0[64u].z)) && (_1866 <= cbSceneParam._m0[64u].w))
        {
            float _2005 = fma(_1660, cbSceneParam._m0[62u].w, fma(_1656, cbSceneParam._m0[62u].z, fma(_1652, cbSceneParam._m0[62u].y, _1648 * cbSceneParam._m0[62u].x))) / _1864;
            float _2009 = isnan(cbSceneParam._m0[41u].w) ? _2005 : (isnan(_2005) ? cbSceneParam._m0[41u].w : max(_2005, cbSceneParam._m0[41u].w));
            float _2052 = (cbSceneParam._m0[33u].x - sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663))) * cbSceneParam._m0[33u].y;
            float _4068 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
            float _2059 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1865, cbSceneParam._m0[33u].w + _1866), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1865, _1866 - cbSceneParam._m0[33u].z), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1865 - cbSceneParam._m0[33u].z, _1866 - cbSceneParam._m0[33u].w), _2009), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1865 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1866), _2009), 0.0)).x), vec4(0.25)));
            float _2063 = 1.0 - (_2059 * cbSceneParam._m0[34u].x);
            float _2064 = 1.0 - (_2059 * cbSceneParam._m0[34u].y);
            float _2065 = 1.0 - (_2059 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2065) ? _1812 : (isnan(_1812) ? _2065 : min(_1812, _2065));
            frontier_phi_34_33_ladder_1 = isnan(_2064) ? _1811 : (isnan(_1811) ? _2064 : min(_1811, _2064));
            frontier_phi_34_33_ladder_2 = isnan(_2063) ? _1810 : (isnan(_1810) ? _2063 : min(_1810, _2063));
        }
        else
        {
            frontier_phi_34_33_ladder = _1812;
            frontier_phi_34_33_ladder_1 = _1811;
            frontier_phi_34_33_ladder_2 = _1810;
        }
        _1876 = frontier_phi_34_33_ladder_2;
        _1878 = frontier_phi_34_33_ladder_1;
        _1880 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1876 = _1810;
        _1878 = _1811;
        _1880 = _1812;
    }
    uvec4 _1885 = floatBitsToUint(cbInstanceData._m0[_540 + 5u]);
    uint _1887 = _1885.x * 14u;
    uint _1888 = _1887 + 13u;
    float _1895 = _580 + (-1.0);
    float _1900 = (cbLight._m0[_1888].x * _1895) + 1.0;
    float _1901 = (cbLight._m0[_1888].y * _1895) + 1.0;
    float _1902 = (cbLight._m0[_1888].z * _1895) + 1.0;
    float _1903 = (cbLight._m0[_1888].w * _1895) + 1.0;
    uint _1904 = _1887 + 5u;
    float _1910 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1914 = _1887 + 4u;
    float _1924 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1928 = _1887 | 1u;
    float _1939 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_411, _412, _413));
    float _1942 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_411, _412, _413));
    float _4104 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _4115 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1947 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1949 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _1956 = ((cbLight._m0[_1904].x * _1910) * _1949) + (((cbLight._m0[_1914].x * _1876) * _1924) * _1947);
    float _1957 = ((_1910 * cbLight._m0[_1904].y) * _1949) + (((cbLight._m0[_1914].y * _1878) * _1924) * _1947);
    float _1958 = ((_1910 * cbLight._m0[_1904].z) * _1949) + (((cbLight._m0[_1914].z * _1880) * _1924) * _1947);
    uvec4 _1962 = floatBitsToUint(cbLight._m0[_1887 + 12u]);
    bool _1964 = _1962.x == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_1964)
    {
        _2066 = _1956;
        _2068 = _1957;
        _2070 = _1958;
    }
    else
    {
        uint _2074 = _1887 + 6u;
        float _2090 = (dot(vec3(cbLight._m0[_1887 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4126 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2093 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2066 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1956;
        _2068 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1957;
        _2070 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1958;
    }
    bool _2073 = _1962.y == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2073)
    {
        _2128 = _2066;
        _2130 = _2068;
        _2132 = _2070;
    }
    else
    {
        uint _2301 = _1887 + 7u;
        float _2317 = (dot(vec3(cbLight._m0[_1887 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4142 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2320 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2128 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2066;
        _2130 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2068;
        _2132 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2070;
    }
    uint _2135 = _1887 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _414) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1887].x + _492;
    float _2151 = cbLight._m0[_1887].y + _493;
    float _2152 = cbLight._m0[_1887].z + _494;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1887].xyz));
    float _4158 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _2164 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2165 = dot(vec3(_411, _412, _413), vec3(_2157, _2158, _2159));
    float _4180 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2157, _2158, _2159));
    float _4191 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2149 * _2149;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2185 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
    float _2186 = 0.959999978542327880859375 - _562;
    float _2188 = 0.959999978542327880859375 - _563;
    float _2189 = 0.959999978542327880859375 - _564;
    float _2196 = 1.0 - _2149;
    float _2207 = (0.5 / (((_2164 * ((_2163 * _2196) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2196) + _2149) * _2163))) * _2163;
    float _4202 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    uint _2223 = _1887 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _414) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_1928].x + _492;
    float _2237 = cbLight._m0[_1928].y + _493;
    float _2238 = cbLight._m0[_1928].z + _494;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1928].xyz));
    float _4213 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2250 = dot(vec3(_411, _412, _413), vec3(_2243, _2244, _2245));
    float _4224 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2243, _2244, _2245));
    float _4235 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2276 = 1.0 - _2235;
    float _2286 = (0.5 / (((_2164 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2276) + _2235) * _2249))) * _2249;
    float _4246 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2288 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2298 = (((((_2269 * _2186) + _565) * cbLight._m0[_2223].x) * _2288) * _1910) + ((((cbLight._m0[_2135].x * _1876) * ((_2185 * _2186) + _565)) * _2209) * _1924);
    float _2299 = (((((_2269 * _2188) + _567) * cbLight._m0[_2223].y) * _2288) * _1910) + ((((cbLight._m0[_2135].y * _1878) * ((_2185 * _2188) + _567)) * _2209) * _1924);
    float _2300 = (((((_2269 * _2189) + _568) * cbLight._m0[_2223].z) * _2288) * _1910) + ((((cbLight._m0[_2135].z * _1880) * ((_2185 * _2189) + _568)) * _2209) * _1924);
    float _2356;
    float _2358;
    float _2360;
    if (_1964)
    {
        _2356 = _2298;
        _2358 = _2299;
        _2360 = _2300;
    }
    else
    {
        uint _2362 = _1887 + 2u;
        uint _2366 = _1887 + 10u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _414) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _492;
        float _2383 = cbLight._m0[_2362].y + _493;
        float _2384 = cbLight._m0[_2362].z + _494;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2362].xyz));
        float _4257 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2396 = dot(vec3(_411, _412, _413), vec3(_2389, _2390, _2391));
        float _4268 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4279 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2422 = 1.0 - _2381;
        float _2432 = (0.5 / (((_2164 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2422) + _2381) * _2395))) * _2395;
        float _4290 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2356 = (((((_2415 * _2186) + _565) * cbLight._m0[_2366].x) * _2434) * _2435) + _2298;
        _2358 = (((((_2415 * _2188) + _567) * cbLight._m0[_2366].y) * _2434) * _2435) + _2299;
        _2360 = (((((_2415 * _2189) + _568) * cbLight._m0[_2366].z) * _2434) * _2435) + _2300;
    }
    float _2466;
    float _2468;
    float _2470;
    if (_2073)
    {
        _2466 = _2356;
        _2468 = _2358;
        _2470 = _2360;
    }
    else
    {
        uint _2477 = _1887 + 3u;
        uint _2481 = _1887 + 11u;
        float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _414) * 0.949999988079071044921875);
        float _2496 = _2495 * _2495;
        float _2497 = cbLight._m0[_2477].x + _492;
        float _2498 = cbLight._m0[_2477].y + _493;
        float _2499 = cbLight._m0[_2477].z + _494;
        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
        float _2504 = _2503 * _2497;
        float _2505 = _2503 * _2498;
        float _2506 = _2503 * _2499;
        float _2507 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2477].xyz));
        float _4306 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2511 = dot(vec3(_411, _412, _413), vec3(_2504, _2505, _2506));
        float _4317 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2515 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2504, _2505, _2506));
        float _4328 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2519 = _2496 * _2496;
        float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
        float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2537 = 1.0 - _2496;
        float _2547 = (0.5 / (((_2164 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2537) + _2496) * _2510))) * _2510;
        float _4339 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2466 = (((((_2530 * _2186) + _565) * cbLight._m0[_2481].x) * _2549) * _2550) + _2356;
        _2468 = (((((_2530 * _2188) + _567) * cbLight._m0[_2481].y) * _2549) * _2550) + _2358;
        _2470 = (((((_2530 * _2189) + _568) * cbLight._m0[_2481].z) * _2549) * _2550) + _2360;
    }
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_1885.y == 0u)
    {
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.x;
        uint _2583 = uint((float(_2571.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2572))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2572)));
        float _2593 = (log2(_1663 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2594 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        uint _2597 = uint(isnan(14.0) ? _2594 : (isnan(_2594) ? 14.0 : min(_2594, 14.0)));
        uvec4 _2602 = texelFetch(g_lightClusterGridBuffer, int(((_2597 << 2u) + (_2583 << 6u)) >> 2u));
        uint _2603 = _2602.x;
        uint _2604 = _2571.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2604 >> 4u) & 15u)) + 4294967295u) & _2603) == 0u) || ((_2604 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            uint _2834 = 0u;
            uint _2843;
            bool _2844;
            for (;;)
            {
                _2843 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                _2844 = _2843 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2844)
                {
                    frontier_phi_66_pred = _2833;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2843;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2834 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _1661;
                        float _3019 = _2978.y - _1662;
                        float _3020 = _2978.z - _1663;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_521, _524, _527), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4365 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _1661;
                        float _3054 = (-0.0) - _1662;
                        float _3055 = (-0.0) - _1663;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3069 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3070 = 1.0 - _596;
                        float _3077 = sqrt(1.0 - ((1.0 - (_3070 * _3070)) * (1.0 - (_3069 * _3069))));
                        float _3078 = _3077 * _3077;
                        float _3079 = _3078 * _3078;
                        float _3080 = _3060 + _3025;
                        float _3081 = _3061 + _3026;
                        float _3082 = _3062 + _3027;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3090 = dot(vec3(_521, _524, _527), vec3(_3060, _3061, _3062));
                        float _4381 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3093 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3094 = dot(vec3(_521, _524, _527), vec3(_3086 * _3080, _3086 * _3081, _3086 * _3082));
                        float _4392 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3101 = ((_3097 * _3097) * (_3079 + (-1.0))) + 1.0;
                        float _3102 = _3038 * _3078;
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3028) + _3103;
                        float _4403 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3108 = 1.0 - _3078;
                        float _3118 = (0.5 / (((_3107 * ((_3093 * _3108) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3078) * _3093))) * _3107;
                        float _4414 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3129 = (((_3079 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3101 * _3101) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2887 = (_3049 * _2997.x) + _2955;
                        _2888 = (_3049 * _2997.y) + _2956;
                        _2889 = (_3049 * _2997.z) + _2957;
                        _2884 = (_3129 * _3014.x) + _2952;
                        _2885 = (_3129 * _3014.y) + _2953;
                        _2886 = (_3129 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_66_pred = _2889;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2886;
                    frontier_phi_66_pred_4 = _2885;
                    frontier_phi_66_pred_5 = _2884;
                }
                _2694 = frontier_phi_66_pred;
                _2692 = frontier_phi_66_pred_1;
                _2690 = frontier_phi_66_pred_2;
                _2688 = frontier_phi_66_pred_3;
                _2686 = frontier_phi_66_pred_4;
                _2684 = frontier_phi_66_pred_5;
                uint _2835 = _2834 + 1u;
                if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2828 = _2684;
                    _2829 = _2686;
                    _2830 = _2688;
                    _2831 = _2690;
                    _2832 = _2692;
                    _2833 = _2694;
                    _2834 = _2835;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((4294967295u << _2700) & _2603) == 0u)
        {
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
        }
        else
        {
            float _2821 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
            float _2822 = _2821 * _1661;
            float _2823 = _2821 * _1662;
            float _2824 = _2821 * _1663;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2935 = _2683;
                float _2936 = _2685;
                float _2937 = _2687;
                float _2938 = _2689;
                float _2939 = _2691;
                float _2940 = _2693;
                uint _2941 = _2700;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2951)
                    {
                        frontier_phi_72_pred = _2940;
                        frontier_phi_72_pred_1 = _2939;
                        frontier_phi_72_pred_2 = _2938;
                        frontier_phi_72_pred_3 = _2937;
                        frontier_phi_72_pred_4 = _2936;
                        frontier_phi_72_pred_5 = _2935;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3147 = _2935;
                        float _3148 = _2936;
                        float _3149 = _2937;
                        float _3150 = _2938;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        uint _3153 = _2950;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3223;
                        vec4 _3239;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3164 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3210 = (_3164 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3164 * 40u) + 20u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3242 = (_3164 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3164 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_1663, _3274.z, fma(_1662, _3274.y, _3274.x * _1661)) + _3274.w;
                            _3287 = !((fma(_1663, _3255.z, fma(_1662, _3255.y, _3255.x * _1661)) + _3255.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3179.x - _1661;
                                float _3315 = _3179.y - _1662;
                                float _3316 = _3179.z - _1663;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3180 * _3180));
                                float _4425 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3332 = sqrt(_3317) * _3195.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_521, _524, _527))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_1663, _3223.z, fma(_1662, _3223.y, _3223.x * _1661)) + _3223.w) / _3286;
                                float _3346 = (fma(_1663, _3239.z, fma(_1662, _3239.y, _3239.x * _1661)) + _3239.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4441 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _596;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2822;
                                float _3376 = _3322 - _2823;
                                float _3377 = _3323 - _2824;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2822, (-0.0) - _2823, (-0.0) - _2824));
                                float _4452 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3389 = dot(vec3(_521, _524, _527), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4463 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_521, _524, _527), vec3(_3321, _3322, _3323))) + _3398;
                                float _4474 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4485 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3352 * _3195.y;
                                frontier_phi_78_pred_1 = _3352 * _3195.x;
                                frontier_phi_78_pred_2 = _3426 * _3207.z;
                                frontier_phi_78_pred_3 = _3426 * _3207.y;
                                frontier_phi_78_pred_4 = _3426 * _3207.x;
                                frontier_phi_78_pred_5 = _3352 * _3195.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_78_pred;
                            _3433 = frontier_phi_78_pred_1;
                            _3432 = frontier_phi_78_pred_2;
                            _3431 = frontier_phi_78_pred_3;
                            _3430 = frontier_phi_78_pred_4;
                            _3435 = frontier_phi_78_pred_5;
                            _3137 = _3433 + _3150;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3134 = _3430 + _3147;
                            _3135 = _3431 + _3148;
                            _3136 = _3432 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3139;
                        frontier_phi_72_pred_1 = _3138;
                        frontier_phi_72_pred_2 = _3137;
                        frontier_phi_72_pred_3 = _3136;
                        frontier_phi_72_pred_4 = _3135;
                        frontier_phi_72_pred_5 = _3134;
                    }
                    _2807 = frontier_phi_72_pred;
                    _2805 = frontier_phi_72_pred_1;
                    _2803 = frontier_phi_72_pred_2;
                    _2801 = frontier_phi_72_pred_3;
                    _2799 = frontier_phi_72_pred_4;
                    _2797 = frontier_phi_72_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2797;
                        _2936 = _2799;
                        _2937 = _2801;
                        _2938 = _2803;
                        _2939 = _2805;
                        _2940 = _2807;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2807;
                frontier_phi_60_61_ladder_1 = _2805;
                frontier_phi_60_61_ladder_2 = _2801;
                frontier_phi_60_61_ladder_3 = _2799;
                frontier_phi_60_61_ladder_4 = _2797;
                frontier_phi_60_61_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_60_61_ladder = _2693;
                frontier_phi_60_61_ladder_1 = _2691;
                frontier_phi_60_61_ladder_2 = _2687;
                frontier_phi_60_61_ladder_3 = _2685;
                frontier_phi_60_61_ladder_4 = _2683;
                frontier_phi_60_61_ladder_5 = _2689;
            }
            _2796 = frontier_phi_60_61_ladder_4;
            _2798 = frontier_phi_60_61_ladder_3;
            _2800 = frontier_phi_60_61_ladder_2;
            _2802 = frontier_phi_60_61_ladder_5;
            _2804 = frontier_phi_60_61_ladder_1;
            _2806 = frontier_phi_60_61_ladder;
        }
        float _2811 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
        _2616 = (_2811 * _2802) + _2128;
        _2618 = (_2811 * _2804) + _2130;
        _2620 = (_2811 * _2806) + _2132;
        _2622 = ((_2796 * _565) * _2811) + _2466;
        _2624 = ((_2798 * _567) * _2811) + _2468;
        _2626 = ((_2800 * _568) * _2811) + _2470;
    }
    else
    {
        _2616 = _2128;
        _2618 = _2130;
        _2620 = _2132;
        _2622 = _2466;
        _2624 = _2468;
        _2626 = _2470;
    }
    float _4501 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _4512 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4523 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    uint _2646 = _540 + 6u;
    float _2654 = _500 / cbSceneParam._m0[86u].x;
    float _2655 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2671 = _2669.x;
    float _2672 = _2669.y;
    float _2673 = _2669.z;
    float _2674 = _2669.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2709 = _2708 / _434;
        float _2720 = _2709 * _485;
        float _2721 = _486 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2724 = _2709 * _487;
        float _2726 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2721;
        float _2734 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2722 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2857 = 1.0 / cbSceneParam._m0[80u].x;
            float _2858 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2859 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            _2897 = ((abs(_2734 / _2722) * cbSceneParam._m0[80u].y) * ((((_2868 - _2869) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))))) * _2857)) - ((exp2(_2744 * _2868) - exp2(_2744 * _2869)) * _2857))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2674);
        _2746 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2671;
        _2748 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2672;
        _2750 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2673;
        _2752 = _2908 * _2674;
    }
    else
    {
        _2746 = _2671;
        _2748 = _2672;
        _2750 = _2673;
        _2752 = _2674;
    }
    float _2764 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2765 = _2764 == 3.0;
    float _2766 = log2(_2752);
    float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2616 + ((isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0))) * _580))) + ((_2622 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _1390)) * cbPerFrame._m0[3u].x));
    float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2618 + ((isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))) * _580))) + ((_2624 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1390)) * cbPerFrame._m0[3u].x));
    float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2620 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _580))) + ((_2626 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1390)) * cbPerFrame._m0[3u].x));
    float _2784 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2784 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.y = _2784 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.z = _2784 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.w = cbInstanceData._m0[_2646].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2646].w;
}


