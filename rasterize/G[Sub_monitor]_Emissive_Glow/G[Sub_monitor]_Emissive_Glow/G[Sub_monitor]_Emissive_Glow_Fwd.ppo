#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _702;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _157 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _158 = _157 * NORMAL.x;
    float _159 = _157 * NORMAL.y;
    float _160 = _157 * NORMAL.z;
    vec4 _180 = texture(sampler2D(G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _183 = _180.x;
    float _184 = _180.y;
    float _185 = _180.z;
    float _186 = _183 * cbMtdParam._m0[9u].x;
    float _187 = _184 * cbMtdParam._m0[9u].y;
    float _188 = _185 * cbMtdParam._m0[9u].z;
    float _202 = inversesqrt(dot(vec3(_158, _159, _160), vec3(_158, _159, _160)));
    float _203 = _202 * _158;
    float _204 = _202 * _159;
    float _205 = _202 * _160;
    float _2836 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _2847 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _2858 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _225 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _276 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _266);
    float _277 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _266);
    float _278 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _266);
    float _282 = inversesqrt(dot(vec3(_276, _277, _278), vec3(_276, _277, _278)));
    float _283 = _276 * _282;
    float _284 = _277 * _282;
    float _285 = _278 * _282;
    float _291 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _292 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _313 = fma(_205, cbSceneParam._m0[5u].z, fma(_204, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _203));
    float _316 = fma(_205, cbSceneParam._m0[6u].z, fma(_204, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _203));
    float _319 = fma(_205, cbSceneParam._m0[7u].z, fma(_204, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _203));
    uint _332 = uint(roundEven(NORMAL.w)) * 13u;
    uint _334 = _332 + 9u;
    uint _335 = _334 + uint(cbMatDynParam._m0[0u].w);
    float _341 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2836 : (isnan(_2836) ? 1.0 : min(_2836, 1.0)))) * cbInstanceData._m0[_335].x;
    float _342 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0)))) * cbInstanceData._m0[_335].y;
    float _343 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0)))) * cbInstanceData._m0[_335].z;
    float _2869 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _344 = isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0));
    float _2880 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _345 = isnan(1.0) ? _2880 : (isnan(_2880) ? 1.0 : min(_2880, 1.0));
    float _2891 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0));
    vec4 _355 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _291, cbSceneParam._m0[86u].y * _292));
    float _358 = _355.x * TEXCOORD.z;
    float _359 = dot(vec3(_203, _204, _205), vec3(_283, _284, _285));
    float _362 = _359 * 2.0;
    float _367 = (_362 * _203) - _283;
    float _368 = (_362 * _204) - _284;
    float _369 = (_362 * _205) - _285;
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _701;
    float _703;
    float _704;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _426 = fma(_399, cbModelParam._m0[26u].z, fma(_395, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _391));
        float _430 = fma(_399, cbModelParam._m0[27u].z, fma(_395, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _391));
        float _434 = fma(_399, cbModelParam._m0[28u].z, fma(_395, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _391));
        float _459 = _391 + _203;
        float _460 = _395 + _204;
        float _461 = _399 + _205;
        float _471 = fma(_461, cbModelParam._m0[26u].z, fma(_460, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _459)) - _426;
        float _472 = fma(_461, cbModelParam._m0[27u].z, fma(_460, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _459)) - _430;
        float _473 = fma(_461, cbModelParam._m0[28u].z, fma(_460, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _459)) - _434;
        float _477 = inversesqrt(dot(vec3(_471, _472, _473), vec3(_471, _472, _473)));
        float _490 = ((_477 * _471) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_426 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _491 = ((_477 * _472) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_430 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _492 = ((_477 * _473) / cbModelParam._m0[34u].z) + ((((((_434 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _495 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _502 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _509 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        vec4 _516 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_490, _491, _492), 0.0);
        float _529 = exp2((_495.w + (-0.5)) * 20.0) * 2.0;
        float _530 = _529 * (_495.x + (-0.5));
        float _531 = _529 * (_495.y + (-0.5));
        float _532 = _529 * (_495.z + (-0.5));
        float _539 = exp2((_502.w + (-0.5)) * 20.0) * 2.0;
        float _540 = _539 * (_502.x + (-0.5));
        float _541 = _539 * (_502.y + (-0.5));
        float _542 = _539 * (_502.z + (-0.5));
        float _549 = exp2((_509.w + (-0.5)) * 20.0) * 2.0;
        float _550 = _549 * (_509.x + (-0.5));
        float _551 = _549 * (_509.y + (-0.5));
        float _552 = _549 * (_509.z + (-0.5));
        float _559 = exp2((_516.w + (-0.5)) * 20.0) * 2.0;
        float _560 = _559 * (_516.x + (-0.5));
        float _561 = _559 * (_516.y + (-0.5));
        float _562 = _559 * (_516.z + (-0.5));
        float _563 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _564 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
        float _565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _566 = _530 * 0.5;
        float _567 = _540 * 0.5;
        float _568 = _550 * 0.5;
        float _569 = dot(vec3(_566, _567, _568), vec3(_566, _567, _568));
        float _574 = (_569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_569);
        float _583 = (dot(vec3(_203, _204, _205), vec3(_574 * _566, _574 * _567, _574 * _568)) + 1.0) * 0.5;
        float _2917 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _593 = sqrt(((_567 * _567) + (_566 * _566)) + (_568 * _568)) / (_563 + 9.9999997473787516355514526367188e-06);
        float _2928 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
        float _595 = _594 * 2.0;
        float _599 = (1.0 - _594) / (_594 + 1.0);
        float _2939 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _609 = ((((1.0 - _600) * (_595 + 2.0)) * exp2(log2(isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0))) * (_595 + 1.0))) + _600) * _563;
        float _610 = _531 * 0.5;
        float _611 = _541 * 0.5;
        float _612 = _551 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _626 = (dot(vec3(_203, _204, _205), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _2950 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _635 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_564 + 9.9999997473787516355514526367188e-06);
        float _2961 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0));
        float _637 = _636 * 2.0;
        float _641 = (1.0 - _636) / (_636 + 1.0);
        float _2972 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _651 = ((((1.0 - _642) * (_637 + 2.0)) * exp2(log2(isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0))) * (_637 + 1.0))) + _642) * _564;
        float _652 = _532 * 0.5;
        float _653 = _542 * 0.5;
        float _654 = _552 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_203, _204, _205), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _2983 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_565 + 9.9999997473787516355514526367188e-06);
        float _2994 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _3005 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0))) * (_679 + 1.0))) + _684) * _565;
        _701 = _532;
        _703 = _531;
        _704 = _530;
        _705 = _542;
        _706 = _541;
        _707 = _540;
        _708 = _552;
        _709 = _551;
        _710 = _550;
        _711 = _565;
        _712 = _564;
        _713 = _563;
        _714 = cbModelParam._m0[36u].z * (isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0)));
        _715 = cbModelParam._m0[36u].z * (isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0)));
        _716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
    }
    else
    {
        _701 = _702;
        _703 = _702;
        _704 = _702;
        _705 = _702;
        _706 = _702;
        _707 = _702;
        _708 = _702;
        _709 = _702;
        _710 = _702;
        _711 = _702;
        _712 = _702;
        _713 = _702;
        _714 = 0.0;
        _715 = 0.0;
        _716 = 0.0;
    }
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _742 = fma(_399, cbModelParam._m0[30u].z, fma(_395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _391));
        float _746 = fma(_399, cbModelParam._m0[31u].z, fma(_395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _391));
        float _750 = fma(_399, cbModelParam._m0[32u].z, fma(_395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _391));
        float _773 = _391 + _203;
        float _774 = _395 + _204;
        float _775 = _399 + _205;
        float _785 = fma(_775, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773)) - _742;
        float _786 = fma(_775, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773)) - _746;
        float _787 = fma(_775, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773)) - _750;
        float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
        float _804 = ((_791 * _785) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_742 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_791 * _786) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_746 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _806 = ((_791 * _787) / cbModelParam._m0[35u].z) + ((((((_750 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_804, _805, _806), 0.0);
        float _841 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_808.x + (-0.5));
        float _843 = _841 * (_808.y + (-0.5));
        float _844 = _841 * (_808.z + (-0.5));
        float _851 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_815.x + (-0.5));
        float _853 = _851 * (_815.y + (-0.5));
        float _854 = _851 * (_815.z + (-0.5));
        float _861 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_822.x + (-0.5));
        float _863 = _861 * (_822.y + (-0.5));
        float _864 = _861 * (_822.z + (-0.5));
        float _871 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_829.x + (-0.5));
        float _873 = _871 * (_829.y + (-0.5));
        float _874 = _871 * (_829.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_203, _204, _205), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3046 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3057 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3068 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0))) * (_905 + 1.0))) + _910) * _875;
        float _920 = _843 * 0.5;
        float _921 = _853 * 0.5;
        float _922 = _863 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_203, _204, _205), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3079 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3090 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3101 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0))) * (_947 + 1.0))) + _952) * _876;
        float _962 = _844 * 0.5;
        float _963 = _854 * 0.5;
        float _964 = _864 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_203, _204, _205), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3112 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3123 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3134 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))) * (_989 + 1.0))) + _994) * _877;
        _1011 = _844;
        _1012 = _843;
        _1013 = _842;
        _1014 = _854;
        _1015 = _853;
        _1016 = _852;
        _1017 = _864;
        _1018 = _863;
        _1019 = _862;
        _1020 = _877;
        _1021 = _876;
        _1022 = _875;
        _1023 = cbModelParam._m0[36u].w * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _1024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
    }
    else
    {
        _1011 = _702;
        _1012 = _702;
        _1013 = _702;
        _1014 = _702;
        _1015 = _702;
        _1016 = _702;
        _1017 = _702;
        _1018 = _702;
        _1019 = _702;
        _1020 = _702;
        _1021 = _702;
        _1022 = _702;
        _1023 = 0.0;
        _1024 = 0.0;
        _1025 = 0.0;
    }
    float _1035 = (cbModelParam._m0[1u].x * (_1023 - _714)) + _714;
    float _1036 = (cbModelParam._m0[1u].x * (_1024 - _715)) + _715;
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _716)) + _716;
    float _1058 = fma(_1037, cbSceneParam._m0[89u].z, fma(_1036, cbSceneParam._m0[89u].y, _1035 * cbSceneParam._m0[89u].x));
    float _1061 = fma(_1037, cbSceneParam._m0[90u].z, fma(_1036, cbSceneParam._m0[90u].y, _1035 * cbSceneParam._m0[90u].x));
    float _1064 = fma(_1037, cbSceneParam._m0[91u].z, fma(_1036, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1035));
    float _1079 = _367 * 0.5;
    float _1080 = _368 * 0.5;
    float _1081 = _369 * 0.5;
    float _1082 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1085 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1012, _1015, _1018, _1021));
    float _1088 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_1011, _1014, _1017, _1020));
    float _1122;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1095 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_701, _705, _708, _711));
        float _1099 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_703, _706, _709, _712));
        float _1103 = dot(vec4(_1079, _1080, _1081, 1.0), vec4(_704, _707, _710, _713));
        float _1110 = dot(vec4(cbModelParam._m0[39u]), vec4(_1079, _1080, _1081, 1.0));
        _1122 = dot(vec3(isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1110) ? 0.0 : (isnan(0.0) ? _1110 : max(0.0, _1110))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1122 = 1.0;
    }
    float _1133;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1124 = dot(vec4(cbModelParam._m0[40u]), vec4(_1079, _1080, _1081, 1.0));
        _1133 = dot(vec3(isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)), isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)), isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1124) ? 0.0 : (isnan(0.0) ? _1124 : max(0.0, _1124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1133 = 1.0;
    }
    float _1137 = (_1133 * cbModelParam._m0[1u].x) + (_1122 * (1.0 - cbModelParam._m0[1u].x));
    float _1146 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1228;
    float _1230;
    float _1232;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1195 = fma(_399, cbModelParam._m0[13u].z, fma(_395, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391)) + cbModelParam._m0[13u].w;
        float _1199 = fma(_399, cbModelParam._m0[14u].z, fma(_395, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391)) + cbModelParam._m0[14u].w;
        float _1203 = fma(_399, cbModelParam._m0[15u].z, fma(_395, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391)) + cbModelParam._m0[15u].w;
        float _1206 = fma(_369, cbModelParam._m0[13u].z, fma(_368, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _367));
        float _1209 = fma(_369, cbModelParam._m0[14u].z, fma(_368, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _367));
        float _1212 = fma(_369, cbModelParam._m0[15u].z, fma(_368, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _367));
        float _1238;
        if (_1206 > 0.0)
        {
            _1238 = abs((1.0 - _1195) / _1206);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1206 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1195 + 1.0) / _1206);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1238 = frontier_phi_14_12_ladder;
        }
        float _1445;
        if (_1209 > 0.0)
        {
            _1445 = abs((1.0 - _1199) / _1209);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1209 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1199 + 1.0) / _1209);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1445 = frontier_phi_23_19_ladder;
        }
        float _1634;
        if (_1212 > 0.0)
        {
            _1634 = abs((1.0 - _1203) / _1212);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1212 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1203 + 1.0) / _1212);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1634 = frontier_phi_35_30_ladder;
        }
        float _1636 = isnan(_1445) ? _1238 : (isnan(_1238) ? _1445 : min(_1238, _1445));
        float _1637 = isnan(_1634) ? _1636 : (isnan(_1636) ? _1634 : min(_1636, _1634));
        float _1641 = (_1637 * _1206) + _1195;
        float _1642 = (_1637 * _1209) + _1199;
        float _1643 = (_1637 * _1212) + _1203;
        float _1644 = _1637 * 9.9999997473787516355514526367188e-05;
        float _1646 = (-1.0) - _1644;
        float _1648 = _1644 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1643 > _1648) || ((_1643 < _1646) || ((_1642 > _1648) || ((_1642 < _1646) || ((_1641 < _1646) || (_1641 > _1648))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1643, cbModelParam._m0[9u].z, fma(_1642, cbModelParam._m0[9u].y, _1641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1643, cbModelParam._m0[10u].z, fma(_1642, cbModelParam._m0[10u].y, _1641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1643, cbModelParam._m0[11u].z, fma(_1642, cbModelParam._m0[11u].y, _1641 * cbModelParam._m0[11u].x))), _1146);
            frontier_phi_13_35_ladder = _1740.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1740.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1740.x * cbModelParam._m0[1u].y;
        }
        _1228 = frontier_phi_13_35_ladder_2;
        _1230 = frontier_phi_13_35_ladder_1;
        _1232 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_367, _368, _369), _1146);
        _1228 = _1216.x * cbModelParam._m0[1u].y;
        _1230 = _1216.y * cbModelParam._m0[1u].y;
        _1232 = _1216.z * cbModelParam._m0[1u].y;
    }
    float _1235 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1292 = fma(_399, cbModelParam._m0[21u].z, fma(_395, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391)) + cbModelParam._m0[21u].w;
        float _1296 = fma(_399, cbModelParam._m0[22u].z, fma(_395, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391)) + cbModelParam._m0[22u].w;
        float _1300 = fma(_399, cbModelParam._m0[23u].z, fma(_395, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391)) + cbModelParam._m0[23u].w;
        float _1303 = fma(_369, cbModelParam._m0[21u].z, fma(_368, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _367));
        float _1306 = fma(_369, cbModelParam._m0[22u].z, fma(_368, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _367));
        float _1309 = fma(_369, cbModelParam._m0[23u].z, fma(_368, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _367));
        float _1450;
        if (_1303 > 0.0)
        {
            _1450 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1450 = frontier_phi_25_21_ladder;
        }
        float _1661;
        if (_1306 > 0.0)
        {
            _1661 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1661 = frontier_phi_37_32_ladder;
        }
        float _1812;
        if (_1309 > 0.0)
        {
            _1812 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1812 = frontier_phi_46_43_ladder;
        }
        float _1814 = isnan(_1661) ? _1450 : (isnan(_1450) ? _1661 : min(_1450, _1661));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1303) + _1292;
        float _1820 = (_1815 * _1306) + _1296;
        float _1821 = (_1815 * _1309) + _1300;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1822;
        float _1825 = _1822 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1821 > _1825) || ((_1821 < _1823) || ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 < _1823) || (_1819 > _1825))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1821, cbModelParam._m0[17u].z, fma(_1820, cbModelParam._m0[17u].y, _1819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1821, cbModelParam._m0[18u].z, fma(_1820, cbModelParam._m0[18u].y, _1819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1821, cbModelParam._m0[19u].z, fma(_1820, cbModelParam._m0[19u].y, _1819 * cbModelParam._m0[19u].x))), _1235);
            frontier_phi_22_46_ladder = _2045.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2045.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2045.x * cbModelParam._m0[1u].z;
        }
        _1328 = frontier_phi_22_46_ladder_2;
        _1330 = frontier_phi_22_46_ladder_1;
        _1332 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1312 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_367, _368, _369), _1235);
        _1328 = _1312.x * cbModelParam._m0[1u].z;
        _1330 = _1312.y * cbModelParam._m0[1u].z;
        _1332 = _1312.z * cbModelParam._m0[1u].z;
    }
    float _1344 = _358 * 0.01200000010430812835693359375;
    float _1346 = _1344 * ((cbModelParam._m0[1u].w * (_1328 - _1228)) + _1228);
    float _1347 = _1344 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1348 = _1344 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1351 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1354 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1357 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, _1346 * cbSceneParam._m0[91u].x));
    uvec4 _1367 = floatBitsToUint(cbInstanceData._m0[_332 + 5u]);
    uint _1369 = _1367.x * 14u;
    uint _1370 = _1369 + 13u;
    float _1377 = _358 + (-1.0);
    float _1383 = (cbLight._m0[_1370].x * _1377) + 1.0;
    float _1384 = (cbLight._m0[_1370].y * _1377) + 1.0;
    float _1385 = (cbLight._m0[_1370].z * _1377) + 1.0;
    float _1386 = (cbLight._m0[_1370].w * _1377) + 1.0;
    uint _1387 = _1369 + 5u;
    float _1393 = isnan(1.0) ? _1384 : (isnan(_1384) ? 1.0 : min(_1384, 1.0));
    uint _1397 = _1369 + 4u;
    float _1404 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
    uint _1408 = _1369 | 1u;
    float _1419 = dot(vec3(cbLight._m0[_1369].xyz), vec3(_203, _204, _205));
    float _1422 = dot(vec3(cbLight._m0[_1408].xyz), vec3(_203, _204, _205));
    float _3270 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
    float _3281 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
    float _1427 = (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * 0.3183098733425140380859375;
    float _1429 = (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * 0.3183098733425140380859375;
    float _1436 = ((cbLight._m0[_1387].x * _1393) * _1429) + ((cbLight._m0[_1397].x * _1404) * _1427);
    float _1437 = ((_1393 * cbLight._m0[_1387].y) * _1429) + ((_1404 * cbLight._m0[_1397].y) * _1427);
    float _1438 = ((_1393 * cbLight._m0[_1387].z) * _1429) + ((_1404 * cbLight._m0[_1397].z) * _1427);
    uvec4 _1442 = floatBitsToUint(cbLight._m0[_1369 + 12u]);
    bool _1444 = _1442.x == 0u;
    float _1455;
    float _1457;
    float _1459;
    if (_1444)
    {
        _1455 = _1436;
        _1457 = _1437;
        _1459 = _1438;
    }
    else
    {
        uint _1463 = _1369 + 6u;
        float _1479 = (dot(vec3(cbLight._m0[_1369 + 2u].xyz), vec3(_203, _204, _205)) * 0.5) + 0.5;
        float _1480 = _1479 * _1479;
        float _3292 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _1482 = isnan(1.0) ? _1385 : (isnan(_1385) ? 1.0 : min(_1385, 1.0));
        _1455 = (((cbLight._m0[_1463].x * 0.3183098733425140380859375) * _1481) * _1482) + _1436;
        _1457 = (((cbLight._m0[_1463].y * 0.3183098733425140380859375) * _1481) * _1482) + _1437;
        _1459 = (((cbLight._m0[_1463].z * 0.3183098733425140380859375) * _1481) * _1482) + _1438;
    }
    bool _1462 = _1442.y == 0u;
    float _1500;
    float _1502;
    float _1504;
    if (_1462)
    {
        _1500 = _1455;
        _1502 = _1457;
        _1504 = _1459;
    }
    else
    {
        uint _1605 = _1369 + 7u;
        float _1621 = (dot(vec3(cbLight._m0[_1369 + 3u].xyz), vec3(_203, _204, _205)) * 0.5) + 0.5;
        float _1622 = _1621 * _1621;
        float _3308 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _1624 = isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0));
        _1500 = (((cbLight._m0[_1605].x * 0.3183098733425140380859375) * _1623) * _1624) + _1455;
        _1502 = (((cbLight._m0[_1605].y * 0.3183098733425140380859375) * _1623) * _1624) + _1457;
        _1504 = (((cbLight._m0[_1605].z * 0.3183098733425140380859375) * _1623) * _1624) + _1459;
    }
    uint _1506 = _1369 + 8u;
    float _1512 = cbLight._m0[_1369].x + _283;
    float _1513 = cbLight._m0[_1369].y + _284;
    float _1514 = cbLight._m0[_1369].z + _285;
    float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
    float _1522 = dot(vec3(_203, _204, _205), vec3(cbLight._m0[_1369].xyz));
    float _3324 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
    float _1525 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _1526 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _1527 = dot(vec3(cbLight._m0[_1369].xyz), vec3(_1512 * _1518, _1513 * _1518, _1514 * _1518));
    float _3346 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1538 = (exp2(log2(1.0 - (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1544 = (0.5 / ((_1525 + 9.9999999392252902907785028219223e-09) + _1526)) * _1525;
    float _3357 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1546 = (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * 0.31831014156341552734375;
    uint _1557 = _1369 + 9u;
    float _1563 = cbLight._m0[_1408].x + _283;
    float _1564 = cbLight._m0[_1408].y + _284;
    float _1565 = cbLight._m0[_1408].z + _285;
    float _1569 = inversesqrt(dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565)));
    float _1573 = dot(vec3(_203, _204, _205), vec3(cbLight._m0[_1408].xyz));
    float _3368 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1576 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _1577 = dot(vec3(cbLight._m0[_1408].xyz), vec3(_1563 * _1569, _1564 * _1569, _1565 * _1569));
    float _3379 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1586 = (exp2(log2(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1590 = (0.5 / ((_1576 + 9.9999999392252902907785028219223e-09) + _1526)) * _1576;
    float _3390 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1592 = (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * 0.31831014156341552734375;
    float _1602 = (((_1586 * cbLight._m0[_1557].x) * _1592) * _1393) + (((_1538 * cbLight._m0[_1506].x) * _1546) * _1404);
    float _1603 = (((_1586 * cbLight._m0[_1557].y) * _1592) * _1393) + (((_1538 * cbLight._m0[_1506].y) * _1546) * _1404);
    float _1604 = (((_1586 * cbLight._m0[_1557].z) * _1592) * _1393) + (((_1538 * cbLight._m0[_1506].z) * _1546) * _1404);
    float _1666;
    float _1668;
    float _1670;
    if (_1444)
    {
        _1666 = _1602;
        _1668 = _1603;
        _1670 = _1604;
    }
    else
    {
        uint _1672 = _1369 + 10u;
        uint _1678 = _1369 + 2u;
        float _1684 = cbLight._m0[_1678].x + _283;
        float _1685 = cbLight._m0[_1678].y + _284;
        float _1686 = cbLight._m0[_1678].z + _285;
        float _1690 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
        float _1694 = dot(vec3(_203, _204, _205), vec3(cbLight._m0[_1678].xyz));
        float _3401 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1697 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1698 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1684 * _1690, _1685 * _1690, _1686 * _1690));
        float _3412 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1707 = (exp2(log2(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1711 = (0.5 / ((_1697 + 9.9999999392252902907785028219223e-09) + _1526)) * _1697;
        float _3423 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1713 = (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.31831014156341552734375;
        float _1714 = isnan(1.0) ? _1385 : (isnan(_1385) ? 1.0 : min(_1385, 1.0));
        _1666 = (((_1707 * cbLight._m0[_1672].x) * _1713) * _1714) + _1602;
        _1668 = (((_1707 * cbLight._m0[_1672].y) * _1713) * _1714) + _1603;
        _1670 = (((_1707 * cbLight._m0[_1672].z) * _1713) * _1714) + _1604;
    }
    float _1749;
    float _1751;
    float _1753;
    if (_1462)
    {
        _1749 = _1666;
        _1751 = _1668;
        _1753 = _1670;
    }
    else
    {
        uint _1760 = _1369 + 11u;
        uint _1766 = _1369 + 3u;
        float _1772 = cbLight._m0[_1766].x + _283;
        float _1773 = cbLight._m0[_1766].y + _284;
        float _1774 = cbLight._m0[_1766].z + _285;
        float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
        float _1782 = dot(vec3(_203, _204, _205), vec3(cbLight._m0[_1766].xyz));
        float _3439 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1785 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1786 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1772 * _1778, _1773 * _1778, _1774 * _1778));
        float _3450 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = (exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1799 = (0.5 / ((_1785 + 9.9999999392252902907785028219223e-09) + _1526)) * _1785;
        float _3461 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1801 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.31831014156341552734375;
        float _1802 = isnan(1.0) ? _1386 : (isnan(_1386) ? 1.0 : min(_1386, 1.0));
        _1749 = (((_1795 * cbLight._m0[_1760].x) * _1801) * _1802) + _1666;
        _1751 = (((_1795 * cbLight._m0[_1760].y) * _1801) * _1802) + _1668;
        _1753 = (((_1795 * cbLight._m0[_1760].z) * _1801) * _1802) + _1670;
    }
    float _1937;
    float _1939;
    float _1941;
    float _1943;
    float _1945;
    float _1947;
    if (_1367.y == 0u)
    {
        float _1877 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1878 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1877;
        float _1879 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1877;
        float _1880 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1877;
        uvec4 _1892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1893 = _1892.x;
        uint _1904 = uint((float(_1892.y) * floor(float(uint(cbSceneParam._m0[85u].y * _292) / _1893))) + floor(float(uint(cbSceneParam._m0[85u].x * _291) / _1893)));
        float _1914 = (log2(_1880 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1915 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        uint _1918 = uint(isnan(14.0) ? _1915 : (isnan(_1915) ? 14.0 : min(_1915, 14.0)));
        uvec4 _1923 = texelFetch(g_lightClusterGridBuffer, int(((_1918 << 2u) + (_1904 << 6u)) >> 2u));
        uint _1924 = _1923.x;
        uint _1925 = _1892.z;
        float _2050;
        float _2052;
        float _2054;
        float _2056;
        float _2058;
        float _2060;
        if (((((1u << ((_1925 >> 4u) & 15u)) + 4294967295u) & _1924) == 0u) || ((_1925 & 240u) == 0u))
        {
            _2050 = 0.0;
            _2052 = 0.0;
            _2054 = 0.0;
            _2056 = 0.0;
            _2058 = 0.0;
            _2060 = 0.0;
        }
        else
        {
            float _2051;
            float _2053;
            float _2055;
            float _2057;
            float _2059;
            float _2061;
            float _2193 = 0.0;
            float _2194 = 0.0;
            float _2195 = 0.0;
            float _2196 = 0.0;
            float _2197 = 0.0;
            float _2198 = 0.0;
            uint _2199 = 0u;
            uint _2208;
            bool _2209;
            for (;;)
            {
                _2208 = texelFetch(g_lightClassification, int((((_1918 << 5u) + (_1904 << 9u)) + (_2199 << 2u)) >> 2u)).x;
                _2209 = _2208 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2209)
                {
                    frontier_phi_61_pred = _2193;
                    frontier_phi_61_pred_1 = _2198;
                    frontier_phi_61_pred_2 = _2197;
                    frontier_phi_61_pred_3 = _2196;
                    frontier_phi_61_pred_4 = _2195;
                    frontier_phi_61_pred_5 = _2194;
                }
                else
                {
                    float _2317;
                    float _2318;
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    uint _2323;
                    _2317 = _2193;
                    _2318 = _2194;
                    _2319 = _2195;
                    _2320 = _2196;
                    _2321 = _2197;
                    _2322 = _2198;
                    _2323 = _2208;
                    float _2249;
                    float _2250;
                    float _2251;
                    float _2252;
                    float _2253;
                    float _2254;
                    for (;;)
                    {
                        uint _2327 = uint(findLSB(_2323)) + (_2199 << 5u);
                        uint _2324 = (_2323 + 4294967295u) & _2323;
                        uint _2329 = _2327 * 48u;
                        vec4 _2343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2329)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2329 + 3u)).x));
                        uint _2349 = (_2327 * 48u) + 4u;
                        vec4 _2362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2349)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2349 + 3u)).x));
                        uint _2368 = (_2327 * 48u) + 8u;
                        vec3 _2379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2368)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2368 + 2u)).x));
                        float _2383 = _2343.x - _1878;
                        float _2384 = _2343.y - _1879;
                        float _2385 = _2343.z - _1880;
                        float _2386 = dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385));
                        float _2389 = inversesqrt(_2386);
                        float _2398 = 1.0 - (_2386 * _2343.w);
                        float _3487 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
                        float _2399 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
                        float _2400 = sqrt(_2386) * _2362.w;
                        float _2403 = 1.39999997615814208984375 / (_2400 + 1.39999997615814208984375);
                        float _2404 = _2403 * _2403;
                        float _2407 = ((1.0 - _2404) * dot(vec3(_313, _316, _319), vec3(_2389 * _2383, _2389 * _2384, _2389 * _2385))) + _2404;
                        float _2410 = _2400 * _2400;
                        float _2414 = ((isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))) * _2399) / ((_2410 * 0.699999988079071044921875) + 1.0);
                        float _2418 = (-0.0) - _1878;
                        float _2419 = (-0.0) - _1879;
                        float _2420 = (-0.0) - _1880;
                        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
                        float _2428 = dot(vec3(_313, _316, _319), vec3(_2424 * _2418, _2424 * _2419, _2424 * _2420));
                        float _3503 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _3514 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
                        float _2432 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
                        float _2436 = (0.5 / (((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) + 9.9999999392252902907785028219223e-09) + _2432)) * _2432;
                        float _3525 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
                        float _2445 = (((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 3.1415927410125732421875) / ((_2410 * 2.1991131305694580078125) + 3.141590118408203125)) * _2399;
                        _2252 = (_2414 * _2362.x) + _2320;
                        _2253 = (_2414 * _2362.y) + _2321;
                        _2254 = (_2414 * _2362.z) + _2322;
                        _2249 = (_2445 * _2379.x) + _2317;
                        _2250 = (_2445 * _2379.y) + _2318;
                        _2251 = (_2445 * _2379.z) + _2319;
                        if (_2324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2317 = _2249;
                            _2318 = _2250;
                            _2319 = _2251;
                            _2320 = _2252;
                            _2321 = _2253;
                            _2322 = _2254;
                            _2323 = _2324;
                        }
                    }
                    frontier_phi_61_pred = _2249;
                    frontier_phi_61_pred_1 = _2254;
                    frontier_phi_61_pred_2 = _2253;
                    frontier_phi_61_pred_3 = _2252;
                    frontier_phi_61_pred_4 = _2251;
                    frontier_phi_61_pred_5 = _2250;
                }
                _2051 = frontier_phi_61_pred;
                _2061 = frontier_phi_61_pred_1;
                _2059 = frontier_phi_61_pred_2;
                _2057 = frontier_phi_61_pred_3;
                _2055 = frontier_phi_61_pred_4;
                _2053 = frontier_phi_61_pred_5;
                uint _2200 = _2199 + 1u;
                if (_2200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2193 = _2051;
                    _2194 = _2053;
                    _2195 = _2055;
                    _2196 = _2057;
                    _2197 = _2059;
                    _2198 = _2061;
                    _2199 = _2200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2050 = _2051;
            _2052 = _2053;
            _2054 = _2055;
            _2056 = _2057;
            _2058 = _2059;
            _2060 = _2061;
        }
        uvec4 _2064 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2065 = _2064.z;
        uint _2067 = (_2065 >> 8u) & 15u;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        if (((4294967295u << _2067) & _1924) == 0u)
        {
            _2164 = _2050;
            _2166 = _2052;
            _2168 = _2054;
            _2170 = _2056;
            _2172 = _2058;
            _2174 = _2060;
        }
        else
        {
            float _2189 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2067 < ((_2065 >> 12u) & 15u))
            {
                float _2165;
                float _2167;
                float _2169;
                float _2171;
                float _2173;
                float _2175;
                float _2300 = _2050;
                float _2301 = _2052;
                float _2302 = _2054;
                float _2303 = _2056;
                float _2304 = _2058;
                float _2305 = _2060;
                uint _2306 = _2067;
                uint _2315;
                bool _2316;
                for (;;)
                {
                    _2315 = texelFetch(g_lightClassification, int((((_1918 << 5u) + (_1904 << 9u)) + (_2306 << 2u)) >> 2u)).x;
                    _2316 = _2315 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2316)
                    {
                        frontier_phi_67_pred = _2303;
                        frontier_phi_67_pred_1 = _2304;
                        frontier_phi_67_pred_2 = _2305;
                        frontier_phi_67_pred_3 = _2302;
                        frontier_phi_67_pred_4 = _2301;
                        frontier_phi_67_pred_5 = _2300;
                    }
                    else
                    {
                        float _2450;
                        float _2451;
                        float _2452;
                        float _2453;
                        float _2454;
                        float _2455;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2463 = _2300;
                        float _2464 = _2301;
                        float _2465 = _2302;
                        float _2466 = _2303;
                        float _2467 = _2304;
                        float _2468 = _2305;
                        uint _2469 = _2315;
                        uint _2470;
                        vec4 _2495;
                        float _2496;
                        vec4 _2511;
                        vec3 _2523;
                        vec4 _2539;
                        vec4 _2555;
                        float _2602;
                        bool _2603;
                        for (;;)
                        {
                            uint _2480 = ((_2306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2469));
                            _2470 = (_2469 + 4294967295u) & _2469;
                            uint _2482 = _2480 * 40u;
                            _2495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2482 + 3u)).x));
                            _2496 = _2495.w;
                            uint _2498 = (_2480 * 40u) + 4u;
                            _2511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2498 + 3u)).x));
                            uint _2513 = (_2480 * 40u) + 8u;
                            _2523 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x));
                            uint _2526 = (_2480 * 40u) + 16u;
                            _2539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2526 + 3u)).x));
                            uint _2542 = (_2480 * 40u) + 20u;
                            _2555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 3u)).x));
                            uint _2558 = (_2480 * 40u) + 24u;
                            vec4 _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2577 = (_2480 * 40u) + 28u;
                            vec4 _2590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 3u)).x));
                            _2602 = fma(_1880, _2590.z, fma(_1879, _2590.y, _2590.x * _1878)) + _2590.w;
                            _2603 = !((fma(_1880, _2571.z, fma(_1879, _2571.y, _2571.x * _1878)) + _2571.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2603)
                            {
                                float _2630 = _2495.x - _1878;
                                float _2631 = _2495.y - _1879;
                                float _2632 = _2495.z - _1880;
                                float _2633 = dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632));
                                float _2636 = inversesqrt(_2633);
                                float _2637 = _2636 * _2630;
                                float _2638 = _2636 * _2631;
                                float _2639 = _2636 * _2632;
                                float _2643 = 1.0 - (_2633 / (_2496 * _2496));
                                float _3536 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                                float _2644 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
                                float _2648 = sqrt(_2633) * _2511.w;
                                float _2650 = 1.39999997615814208984375 / (_2648 + 1.39999997615814208984375);
                                float _2651 = _2650 * _2650;
                                float _2652 = 1.0 - _2651;
                                float _2654 = (_2652 * dot(vec3(_2637, _2638, _2639), vec3(_313, _316, _319))) + _2651;
                                float _2657 = _2648 * _2648;
                                float _2661 = (fma(_1880, _2539.z, fma(_1879, _2539.y, _2539.x * _1878)) + _2539.w) / _2602;
                                float _2662 = (fma(_1880, _2555.z, fma(_1879, _2555.y, _2555.x * _1878)) + _2555.w) / _2602;
                                float _2666 = 1.0 - dot(vec2(_2661, _2662), vec2(_2661, _2662));
                                float _3552 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                                float _2667 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
                                float _2668 = _2667 * (((isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0))) * _2644) / ((_2657 * 0.699999988079071044921875) + 1.0));
                                float _2678 = dot(vec3(_313, _316, _319), vec3((-0.0) - (_1878 * _2189), (-0.0) - (_1879 * _2189), (-0.0) - (_1880 * _2189)));
                                float _3563 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                                float _2686 = (_2652 * dot(vec3(_313, _316, _319), vec3(_2637, _2638, _2639))) + _2651;
                                float _3574 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                                float _2687 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
                                float _2691 = (0.5 / (((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) + 9.9999999392252902907785028219223e-09) + _2687)) * _2687;
                                float _3585 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                                float _2698 = (_2667 * _2644) * (((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 3.1415927410125732421875) / ((_2657 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2698 * _2523.x;
                                frontier_phi_73_pred_1 = _2698 * _2523.y;
                                frontier_phi_73_pred_2 = _2668 * _2511.z;
                                frontier_phi_73_pred_3 = _2668 * _2511.y;
                                frontier_phi_73_pred_4 = _2668 * _2511.x;
                                frontier_phi_73_pred_5 = _2698 * _2523.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2702 = frontier_phi_73_pred;
                            _2703 = frontier_phi_73_pred_1;
                            _2707 = frontier_phi_73_pred_2;
                            _2706 = frontier_phi_73_pred_3;
                            _2705 = frontier_phi_73_pred_4;
                            _2704 = frontier_phi_73_pred_5;
                            _2453 = _2705 + _2466;
                            _2454 = _2706 + _2467;
                            _2455 = _2707 + _2468;
                            _2450 = _2702 + _2463;
                            _2451 = _2703 + _2464;
                            _2452 = _2704 + _2465;
                            if (_2470 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2463 = _2450;
                                _2464 = _2451;
                                _2465 = _2452;
                                _2466 = _2453;
                                _2467 = _2454;
                                _2468 = _2455;
                                _2469 = _2470;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2453;
                        frontier_phi_67_pred_1 = _2454;
                        frontier_phi_67_pred_2 = _2455;
                        frontier_phi_67_pred_3 = _2452;
                        frontier_phi_67_pred_4 = _2451;
                        frontier_phi_67_pred_5 = _2450;
                    }
                    _2171 = frontier_phi_67_pred;
                    _2173 = frontier_phi_67_pred_1;
                    _2175 = frontier_phi_67_pred_2;
                    _2169 = frontier_phi_67_pred_3;
                    _2167 = frontier_phi_67_pred_4;
                    _2165 = frontier_phi_67_pred_5;
                    uint _2307 = _2306 + 1u;
                    if (_2307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2300 = _2165;
                        _2301 = _2167;
                        _2302 = _2169;
                        _2303 = _2171;
                        _2304 = _2173;
                        _2305 = _2175;
                        _2306 = _2307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2173;
                frontier_phi_55_56_ladder_1 = _2175;
                frontier_phi_55_56_ladder_2 = _2171;
                frontier_phi_55_56_ladder_3 = _2169;
                frontier_phi_55_56_ladder_4 = _2167;
                frontier_phi_55_56_ladder_5 = _2165;
            }
            else
            {
                frontier_phi_55_56_ladder = _2058;
                frontier_phi_55_56_ladder_1 = _2060;
                frontier_phi_55_56_ladder_2 = _2056;
                frontier_phi_55_56_ladder_3 = _2054;
                frontier_phi_55_56_ladder_4 = _2052;
                frontier_phi_55_56_ladder_5 = _2050;
            }
            _2164 = frontier_phi_55_56_ladder_5;
            _2166 = frontier_phi_55_56_ladder_4;
            _2168 = frontier_phi_55_56_ladder_3;
            _2170 = frontier_phi_55_56_ladder_2;
            _2172 = frontier_phi_55_56_ladder;
            _2174 = frontier_phi_55_56_ladder_1;
        }
        float _2179 = isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0));
        _1937 = (_2179 * _2170) + _1500;
        _1939 = (_2179 * _2172) + _1502;
        _1941 = (_2179 * _2174) + _1504;
        _1943 = ((_2164 * 0.039999999105930328369140625) * _2179) + _1749;
        _1945 = ((_2166 * 0.039999999105930328369140625) * _2179) + _1751;
        _1947 = ((_2168 * 0.039999999105930328369140625) * _2179) + _1753;
    }
    else
    {
        _1937 = _1500;
        _1939 = _1502;
        _1941 = _1504;
        _1943 = _1749;
        _1945 = _1751;
        _1947 = _1753;
    }
    uint _1953 = _334 + uint(cbMatDynParam._m0[0u].w);
    float _3601 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _3612 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _3623 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _1984 = (((isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1937 + ((isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))) * _358))) + ((_1943 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _1137)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[11u].x * _183) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_1953].x);
    float _1986 = ((((cbMtdParam._m0[11u].x * _184) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_1953].y) + ((_1945 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _1137)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1939 + ((isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0))) * _358)));
    float _1988 = ((((cbMtdParam._m0[11u].x * _185) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_1953].z) + ((_1947 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _1137)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1941 + ((isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))) * _358)));
    uint _1992 = _332 + 6u;
    float _2000 = _291 / cbSceneParam._m0[86u].x;
    float _2001 = _292 / cbSceneParam._m0[86u].y;
    vec4 _2015 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2000, _2001, (log2((isnan(cbSceneParam._m0[77u].w) ? _225 : (isnan(_225) ? cbSceneParam._m0[77u].w : min(_225, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2017 = _2015.x;
    float _2018 = _2015.y;
    float _2019 = _2015.z;
    float _2020 = _2015.w;
    float _2113;
    float _2115;
    float _2117;
    float _2119;
    if (_225 > cbSceneParam._m0[78u].w)
    {
        float _2075 = isnan(_225) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _225 : min(cbSceneParam._m0[80u].w, _225));
        float _2076 = _2075 / _225;
        float _2087 = _2076 * _276;
        float _2088 = _277 * _2076;
        float _2089 = (-0.0) - _2088;
        float _2091 = _2076 * _278;
        float _2093 = (cbSceneParam._m0[77u].w * _2089) / _2075;
        float _2094 = _2093 + cbSceneParam._m0[79u].w;
        float _2095 = cbSceneParam._m0[79u].w - _2088;
        float _2101 = sqrt(((_2087 * _2087) + (_2088 * _2088)) + (_2091 * _2091));
        float _2104 = (1.0 - (cbSceneParam._m0[77u].w / _2075)) * _2101;
        float _2109 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2111 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2262;
        if (abs((_2089 - _2093) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2262 = ((((_2094 > 0.0) ? exp2(_2109 * _2094) : (2.0 - exp2(_2111 * _2094))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2104;
        }
        else
        {
            float _2222 = 1.0 / cbSceneParam._m0[80u].x;
            float _2223 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : max(_2094, _2095));
            float _2224 = isnan(_2095) ? _2094 : (isnan(_2094) ? _2095 : min(_2094, _2095));
            float _2233 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : min(_2223, 0.0));
            float _2234 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : min(_2224, 0.0));
            _2262 = ((abs(_2101 / _2089) * cbSceneParam._m0[80u].y) * ((((_2233 - _2234) * 2.0) - ((exp2(_2109 * (isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0)))) - exp2(_2109 * (isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))))) * _2222)) - ((exp2(_2111 * _2233) - exp2(_2111 * _2234)) * _2222))) + (_2104 * cbSceneParam._m0[80u].z);
        }
        vec4 _2264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2000, _2001, 1.0), 0.0);
        float _2273 = exp2((_2262 * (-1.44269502162933349609375)) * (1.0 - _2264.w));
        float _2274 = log2(_2273);
        float _2290 = log2(_2020);
        _2113 = (exp2(_2290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].x)) * _2264.x) / cbSceneParam._m0[78u].x)) + _2017;
        _2115 = (exp2(_2290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].y)) * _2264.y) / cbSceneParam._m0[78u].y)) + _2018;
        _2117 = (exp2(_2290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2274 * cbSceneParam._m0[78u].z)) * _2264.z) / cbSceneParam._m0[78u].z)) + _2019;
        _2119 = _2273 * _2020;
    }
    else
    {
        _2113 = _2017;
        _2115 = _2018;
        _2117 = _2019;
        _2119 = _2020;
    }
    float _2131 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2132 = _2131 == 3.0;
    float _2134 = log2(_2119);
    float _2141 = exp2(_2134 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)));
    float _2142 = exp2(_2134 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)));
    float _2143 = exp2(_2134 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)));
    float _2152 = (_2131 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2152 * (_2132 ? _2141 : (_2141 + (cbSceneParam._m0[72u].w * _2113)));
    SV_Target.y = _2152 * (_2132 ? _2142 : (_2142 + (cbSceneParam._m0[72u].w * _2115)));
    SV_Target.z = _2152 * (_2132 ? _2143 : (_2143 + (cbSceneParam._m0[72u].w * _2117)));
    SV_Target.w = cbInstanceData._m0[_1992].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1992].w;
}


