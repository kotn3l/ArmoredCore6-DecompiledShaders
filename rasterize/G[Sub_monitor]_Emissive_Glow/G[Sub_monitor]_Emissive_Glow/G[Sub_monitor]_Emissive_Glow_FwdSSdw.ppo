#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _704;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _159 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _160 = _159 * NORMAL.x;
    float _161 = _159 * NORMAL.y;
    float _162 = _159 * NORMAL.z;
    vec4 _182 = texture(sampler2D(G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _185 = _182.x;
    float _186 = _182.y;
    float _187 = _182.z;
    float _188 = _185 * cbMtdParam._m0[9u].x;
    float _189 = _186 * cbMtdParam._m0[9u].y;
    float _190 = _187 * cbMtdParam._m0[9u].z;
    float _204 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _205 = _204 * _160;
    float _206 = _204 * _161;
    float _207 = _204 * _162;
    float _2862 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _2873 = isnan(0.0) ? _189 : (isnan(_189) ? 0.0 : max(_189, 0.0));
    float _2884 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _227 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _278 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _268);
    float _279 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _268);
    float _280 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _268);
    float _284 = inversesqrt(dot(vec3(_278, _279, _280), vec3(_278, _279, _280)));
    float _285 = _278 * _284;
    float _286 = _279 * _284;
    float _287 = _280 * _284;
    float _293 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _294 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _315 = fma(_207, cbSceneParam._m0[5u].z, fma(_206, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _205));
    float _318 = fma(_207, cbSceneParam._m0[6u].z, fma(_206, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _205));
    float _321 = fma(_207, cbSceneParam._m0[7u].z, fma(_206, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _205));
    uint _334 = uint(roundEven(NORMAL.w)) * 13u;
    uint _336 = _334 + 9u;
    uint _337 = _336 + uint(cbMatDynParam._m0[0u].w);
    float _343 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0)))) * cbInstanceData._m0[_337].x;
    float _344 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0)))) * cbInstanceData._m0[_337].y;
    float _345 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0)))) * cbInstanceData._m0[_337].z;
    float _2895 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _346 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
    float _2906 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _347 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
    float _2917 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0));
    vec4 _357 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _293, cbSceneParam._m0[86u].y * _294));
    float _360 = _357.x * TEXCOORD.z;
    float _361 = dot(vec3(_205, _206, _207), vec3(_285, _286, _287));
    float _364 = _361 * 2.0;
    float _369 = (_364 * _205) - _285;
    float _370 = (_364 * _206) - _286;
    float _371 = (_364 * _207) - _287;
    float _393 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _703;
    float _705;
    float _706;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _428 = fma(_401, cbModelParam._m0[26u].z, fma(_397, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _393));
        float _432 = fma(_401, cbModelParam._m0[27u].z, fma(_397, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _393));
        float _436 = fma(_401, cbModelParam._m0[28u].z, fma(_397, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _393));
        float _461 = _393 + _205;
        float _462 = _397 + _206;
        float _463 = _401 + _207;
        float _473 = fma(_463, cbModelParam._m0[26u].z, fma(_462, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _461)) - _428;
        float _474 = fma(_463, cbModelParam._m0[27u].z, fma(_462, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _461)) - _432;
        float _475 = fma(_463, cbModelParam._m0[28u].z, fma(_462, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _461)) - _436;
        float _479 = inversesqrt(dot(vec3(_473, _474, _475), vec3(_473, _474, _475)));
        float _492 = ((_479 * _473) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_428 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _493 = ((_479 * _474) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_432 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _494 = ((_479 * _475) / cbModelParam._m0[34u].z) + ((((((_436 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _497 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _504 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _511 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        vec4 _518 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_492, _493, _494), 0.0);
        float _531 = exp2((_497.w + (-0.5)) * 20.0) * 2.0;
        float _532 = _531 * (_497.x + (-0.5));
        float _533 = _531 * (_497.y + (-0.5));
        float _534 = _531 * (_497.z + (-0.5));
        float _541 = exp2((_504.w + (-0.5)) * 20.0) * 2.0;
        float _542 = _541 * (_504.x + (-0.5));
        float _543 = _541 * (_504.y + (-0.5));
        float _544 = _541 * (_504.z + (-0.5));
        float _551 = exp2((_511.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_511.x + (-0.5));
        float _553 = _551 * (_511.y + (-0.5));
        float _554 = _551 * (_511.z + (-0.5));
        float _561 = exp2((_518.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_518.x + (-0.5));
        float _563 = _561 * (_518.y + (-0.5));
        float _564 = _561 * (_518.z + (-0.5));
        float _565 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
        float _566 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _567 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _568 = _532 * 0.5;
        float _569 = _542 * 0.5;
        float _570 = _552 * 0.5;
        float _571 = dot(vec3(_568, _569, _570), vec3(_568, _569, _570));
        float _576 = (_571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_571);
        float _585 = (dot(vec3(_205, _206, _207), vec3(_576 * _568, _576 * _569, _576 * _570)) + 1.0) * 0.5;
        float _2943 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _595 = sqrt(((_569 * _569) + (_568 * _568)) + (_570 * _570)) / (_565 + 9.9999997473787516355514526367188e-06);
        float _2954 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
        float _597 = _596 * 2.0;
        float _601 = (1.0 - _596) / (_596 + 1.0);
        float _2965 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
        float _602 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _611 = ((((1.0 - _602) * (_597 + 2.0)) * exp2(log2(isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0))) * (_597 + 1.0))) + _602) * _565;
        float _612 = _533 * 0.5;
        float _613 = _543 * 0.5;
        float _614 = _553 * 0.5;
        float _615 = dot(vec3(_612, _613, _614), vec3(_612, _613, _614));
        float _620 = (_615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_615);
        float _628 = (dot(vec3(_205, _206, _207), vec3(_620 * _612, _620 * _613, _620 * _614)) + 1.0) * 0.5;
        float _2976 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _637 = sqrt(((_613 * _613) + (_612 * _612)) + (_614 * _614)) / (_566 + 9.9999997473787516355514526367188e-06);
        float _2987 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _2998 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0))) * (_639 + 1.0))) + _644) * _566;
        float _654 = _534 * 0.5;
        float _655 = _544 * 0.5;
        float _656 = _554 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_205, _206, _207), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3009 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_567 + 9.9999997473787516355514526367188e-06);
        float _3020 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3031 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0))) * (_681 + 1.0))) + _686) * _567;
        _703 = _534;
        _705 = _533;
        _706 = _532;
        _707 = _544;
        _708 = _543;
        _709 = _542;
        _710 = _554;
        _711 = _553;
        _712 = _552;
        _713 = _567;
        _714 = _566;
        _715 = _565;
        _716 = cbModelParam._m0[36u].z * (isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0)));
        _717 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
    }
    else
    {
        _703 = _704;
        _705 = _704;
        _706 = _704;
        _707 = _704;
        _708 = _704;
        _709 = _704;
        _710 = _704;
        _711 = _704;
        _712 = _704;
        _713 = _704;
        _714 = _704;
        _715 = _704;
        _716 = 0.0;
        _717 = 0.0;
        _718 = 0.0;
    }
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _744 = fma(_401, cbModelParam._m0[30u].z, fma(_397, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _393));
        float _748 = fma(_401, cbModelParam._m0[31u].z, fma(_397, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _393));
        float _752 = fma(_401, cbModelParam._m0[32u].z, fma(_397, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _393));
        float _775 = _393 + _205;
        float _776 = _397 + _206;
        float _777 = _401 + _207;
        float _787 = fma(_777, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _775)) - _744;
        float _788 = fma(_777, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _775)) - _748;
        float _789 = fma(_777, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _775)) - _752;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_744 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_748 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[35u].z) + ((((((_752 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _843 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_810.x + (-0.5));
        float _845 = _843 * (_810.y + (-0.5));
        float _846 = _843 * (_810.z + (-0.5));
        float _853 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_817.x + (-0.5));
        float _855 = _853 * (_817.y + (-0.5));
        float _856 = _853 * (_817.z + (-0.5));
        float _863 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_824.x + (-0.5));
        float _865 = _863 * (_824.y + (-0.5));
        float _866 = _863 * (_824.z + (-0.5));
        float _873 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_831.x + (-0.5));
        float _875 = _873 * (_831.y + (-0.5));
        float _876 = _873 * (_831.z + (-0.5));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = _844 * 0.5;
        float _881 = _854 * 0.5;
        float _882 = _864 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_205, _206, _207), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3094 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_907 + 1.0))) + _912) * _877;
        float _922 = _845 * 0.5;
        float _923 = _855 * 0.5;
        float _924 = _865 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_205, _206, _207), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3127 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_949 + 1.0))) + _954) * _878;
        float _964 = _846 * 0.5;
        float _965 = _856 * 0.5;
        float _966 = _866 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_205, _206, _207), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3160 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_991 + 1.0))) + _996) * _879;
        _1013 = _846;
        _1014 = _845;
        _1015 = _844;
        _1016 = _856;
        _1017 = _855;
        _1018 = _854;
        _1019 = _866;
        _1020 = _865;
        _1021 = _864;
        _1022 = _879;
        _1023 = _878;
        _1024 = _877;
        _1025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _704;
        _1014 = _704;
        _1015 = _704;
        _1016 = _704;
        _1017 = _704;
        _1018 = _704;
        _1019 = _704;
        _1020 = _704;
        _1021 = _704;
        _1022 = _704;
        _1023 = _704;
        _1024 = _704;
        _1025 = 0.0;
        _1026 = 0.0;
        _1027 = 0.0;
    }
    float _1037 = (cbModelParam._m0[1u].x * (_1025 - _716)) + _716;
    float _1038 = (cbModelParam._m0[1u].x * (_1026 - _717)) + _717;
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _718)) + _718;
    float _1060 = fma(_1039, cbSceneParam._m0[89u].z, fma(_1038, cbSceneParam._m0[89u].y, _1037 * cbSceneParam._m0[89u].x));
    float _1063 = fma(_1039, cbSceneParam._m0[90u].z, fma(_1038, cbSceneParam._m0[90u].y, _1037 * cbSceneParam._m0[90u].x));
    float _1066 = fma(_1039, cbSceneParam._m0[91u].z, fma(_1038, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1037));
    float _1081 = _369 * 0.5;
    float _1082 = _370 * 0.5;
    float _1083 = _371 * 0.5;
    float _1084 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1087 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1014, _1017, _1020, _1023));
    float _1090 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1124;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1097 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_703, _707, _710, _713));
        float _1101 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_705, _708, _711, _714));
        float _1105 = dot(vec4(_1081, _1082, _1083, 1.0), vec4(_706, _709, _712, _715));
        float _1112 = dot(vec4(cbModelParam._m0[39u]), vec4(_1081, _1082, _1083, 1.0));
        _1124 = dot(vec3(isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)), isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1112) ? 0.0 : (isnan(0.0) ? _1112 : max(0.0, _1112))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1124 = 1.0;
    }
    float _1135;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1126 = dot(vec4(cbModelParam._m0[40u]), vec4(_1081, _1082, _1083, 1.0));
        _1135 = dot(vec3(isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)), isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)), isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1126) ? 0.0 : (isnan(0.0) ? _1126 : max(0.0, _1126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1135 = 1.0;
    }
    float _1139 = (_1135 * cbModelParam._m0[1u].x) + (_1124 * (1.0 - cbModelParam._m0[1u].x));
    float _1148 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1230;
    float _1232;
    float _1234;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1197 = fma(_401, cbModelParam._m0[13u].z, fma(_397, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393)) + cbModelParam._m0[13u].w;
        float _1201 = fma(_401, cbModelParam._m0[14u].z, fma(_397, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393)) + cbModelParam._m0[14u].w;
        float _1205 = fma(_401, cbModelParam._m0[15u].z, fma(_397, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393)) + cbModelParam._m0[15u].w;
        float _1208 = fma(_371, cbModelParam._m0[13u].z, fma(_370, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _369));
        float _1211 = fma(_371, cbModelParam._m0[14u].z, fma(_370, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _369));
        float _1214 = fma(_371, cbModelParam._m0[15u].z, fma(_370, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _369));
        float _1240;
        if (_1208 > 0.0)
        {
            _1240 = abs((1.0 - _1197) / _1208);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1208 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1197 + 1.0) / _1208);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1240 = frontier_phi_14_12_ladder;
        }
        float _1468;
        if (_1211 > 0.0)
        {
            _1468 = abs((1.0 - _1201) / _1211);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1211 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1201 + 1.0) / _1211);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1468 = frontier_phi_23_19_ladder;
        }
        float _1660;
        if (_1214 > 0.0)
        {
            _1660 = abs((1.0 - _1205) / _1214);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1214 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1205 + 1.0) / _1214);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1660 = frontier_phi_35_30_ladder;
        }
        float _1662 = isnan(_1468) ? _1240 : (isnan(_1240) ? _1468 : min(_1240, _1468));
        float _1663 = isnan(_1660) ? _1662 : (isnan(_1662) ? _1660 : min(_1662, _1660));
        float _1667 = (_1663 * _1208) + _1197;
        float _1668 = (_1663 * _1211) + _1201;
        float _1669 = (_1663 * _1214) + _1205;
        float _1670 = _1663 * 9.9999997473787516355514526367188e-05;
        float _1672 = (-1.0) - _1670;
        float _1674 = _1670 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1669 > _1674) || ((_1669 < _1672) || ((_1668 > _1674) || ((_1668 < _1672) || ((_1667 < _1672) || (_1667 > _1674))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1669, cbModelParam._m0[9u].z, fma(_1668, cbModelParam._m0[9u].y, _1667 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1669, cbModelParam._m0[10u].z, fma(_1668, cbModelParam._m0[10u].y, _1667 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1669, cbModelParam._m0[11u].z, fma(_1668, cbModelParam._m0[11u].y, _1667 * cbModelParam._m0[11u].x))), _1148);
            frontier_phi_13_35_ladder = _1766.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1766.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1766.x * cbModelParam._m0[1u].y;
        }
        _1230 = frontier_phi_13_35_ladder_2;
        _1232 = frontier_phi_13_35_ladder_1;
        _1234 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_369, _370, _371), _1148);
        _1230 = _1218.x * cbModelParam._m0[1u].y;
        _1232 = _1218.y * cbModelParam._m0[1u].y;
        _1234 = _1218.z * cbModelParam._m0[1u].y;
    }
    float _1237 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1294 = fma(_401, cbModelParam._m0[21u].z, fma(_397, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393)) + cbModelParam._m0[21u].w;
        float _1298 = fma(_401, cbModelParam._m0[22u].z, fma(_397, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393)) + cbModelParam._m0[22u].w;
        float _1302 = fma(_401, cbModelParam._m0[23u].z, fma(_397, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393)) + cbModelParam._m0[23u].w;
        float _1305 = fma(_371, cbModelParam._m0[21u].z, fma(_370, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _369));
        float _1308 = fma(_371, cbModelParam._m0[22u].z, fma(_370, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _369));
        float _1311 = fma(_371, cbModelParam._m0[23u].z, fma(_370, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _369));
        float _1473;
        if (_1305 > 0.0)
        {
            _1473 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1473 = frontier_phi_25_21_ladder;
        }
        float _1687;
        if (_1308 > 0.0)
        {
            _1687 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1687 = frontier_phi_37_32_ladder;
        }
        float _1838;
        if (_1311 > 0.0)
        {
            _1838 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1838 = frontier_phi_46_43_ladder;
        }
        float _1840 = isnan(_1687) ? _1473 : (isnan(_1473) ? _1687 : min(_1473, _1687));
        float _1841 = isnan(_1838) ? _1840 : (isnan(_1840) ? _1838 : min(_1840, _1838));
        float _1845 = (_1841 * _1305) + _1294;
        float _1846 = (_1841 * _1308) + _1298;
        float _1847 = (_1841 * _1311) + _1302;
        float _1848 = _1841 * 9.9999997473787516355514526367188e-05;
        float _1849 = (-1.0) - _1848;
        float _1851 = _1848 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1847 > _1851) || ((_1847 < _1849) || ((_1846 > _1851) || ((_1846 < _1849) || ((_1845 < _1849) || (_1845 > _1851))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1847, cbModelParam._m0[17u].z, fma(_1846, cbModelParam._m0[17u].y, _1845 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1847, cbModelParam._m0[18u].z, fma(_1846, cbModelParam._m0[18u].y, _1845 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1847, cbModelParam._m0[19u].z, fma(_1846, cbModelParam._m0[19u].y, _1845 * cbModelParam._m0[19u].x))), _1237);
            frontier_phi_22_46_ladder = _2071.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2071.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2071.x * cbModelParam._m0[1u].z;
        }
        _1330 = frontier_phi_22_46_ladder_2;
        _1332 = frontier_phi_22_46_ladder_1;
        _1334 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1314 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_369, _370, _371), _1237);
        _1330 = _1314.x * cbModelParam._m0[1u].z;
        _1332 = _1314.y * cbModelParam._m0[1u].z;
        _1334 = _1314.z * cbModelParam._m0[1u].z;
    }
    float _1346 = _360 * 0.01200000010430812835693359375;
    float _1348 = _1346 * ((cbModelParam._m0[1u].w * (_1330 - _1230)) + _1230);
    float _1349 = _1346 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1350 = _1346 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1353 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, _1348 * cbSceneParam._m0[91u].x));
    vec4 _1367 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_293, _294));
    float _1369 = _1367.w;
    float _1381 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1369);
    float _1382 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1369);
    float _1383 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1369);
    uvec4 _1387 = floatBitsToUint(cbInstanceData._m0[_334 + 5u]);
    uint _1389 = _1387.x * 14u;
    uint _1390 = _1389 + 13u;
    float _1397 = _360 + (-1.0);
    float _1403 = (cbLight._m0[_1390].x * _1397) + 1.0;
    float _1404 = (cbLight._m0[_1390].y * _1397) + 1.0;
    float _1405 = (cbLight._m0[_1390].z * _1397) + 1.0;
    float _1406 = (cbLight._m0[_1390].w * _1397) + 1.0;
    uint _1407 = _1389 + 5u;
    float _1413 = isnan(1.0) ? _1404 : (isnan(_1404) ? 1.0 : min(_1404, 1.0));
    uint _1417 = _1389 + 4u;
    float _1427 = isnan(1.0) ? _1403 : (isnan(_1403) ? 1.0 : min(_1403, 1.0));
    uint _1431 = _1389 | 1u;
    float _1442 = dot(vec3(cbLight._m0[_1389].xyz), vec3(_205, _206, _207));
    float _1445 = dot(vec3(cbLight._m0[_1431].xyz), vec3(_205, _206, _207));
    float _3296 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _3307 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1450 = (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * 0.3183098733425140380859375;
    float _1452 = (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.3183098733425140380859375;
    float _1459 = ((cbLight._m0[_1407].x * _1413) * _1452) + (((cbLight._m0[_1417].x * _1381) * _1427) * _1450);
    float _1460 = ((_1413 * cbLight._m0[_1407].y) * _1452) + (((cbLight._m0[_1417].y * _1382) * _1427) * _1450);
    float _1461 = ((_1413 * cbLight._m0[_1407].z) * _1452) + (((cbLight._m0[_1417].z * _1383) * _1427) * _1450);
    uvec4 _1465 = floatBitsToUint(cbLight._m0[_1389 + 12u]);
    bool _1467 = _1465.x == 0u;
    float _1478;
    float _1480;
    float _1482;
    if (_1467)
    {
        _1478 = _1459;
        _1480 = _1460;
        _1482 = _1461;
    }
    else
    {
        uint _1486 = _1389 + 6u;
        float _1502 = (dot(vec3(cbLight._m0[_1389 + 2u].xyz), vec3(_205, _206, _207)) * 0.5) + 0.5;
        float _1503 = _1502 * _1502;
        float _3318 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _1505 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        _1478 = (((cbLight._m0[_1486].x * 0.3183098733425140380859375) * _1504) * _1505) + _1459;
        _1480 = (((cbLight._m0[_1486].y * 0.3183098733425140380859375) * _1504) * _1505) + _1460;
        _1482 = (((cbLight._m0[_1486].z * 0.3183098733425140380859375) * _1504) * _1505) + _1461;
    }
    bool _1485 = _1465.y == 0u;
    float _1523;
    float _1525;
    float _1527;
    if (_1485)
    {
        _1523 = _1478;
        _1525 = _1480;
        _1527 = _1482;
    }
    else
    {
        uint _1631 = _1389 + 7u;
        float _1647 = (dot(vec3(cbLight._m0[_1389 + 3u].xyz), vec3(_205, _206, _207)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3334 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _1650 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1523 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1478;
        _1525 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1480;
        _1527 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1482;
    }
    uint _1529 = _1389 + 8u;
    float _1535 = cbLight._m0[_1389].x + _285;
    float _1536 = cbLight._m0[_1389].y + _286;
    float _1537 = cbLight._m0[_1389].z + _287;
    float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
    float _1545 = dot(vec3(_205, _206, _207), vec3(cbLight._m0[_1389].xyz));
    float _3350 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1548 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _1549 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _1550 = dot(vec3(cbLight._m0[_1389].xyz), vec3(_1535 * _1541, _1536 * _1541, _1537 * _1541));
    float _3372 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1561 = (exp2(log2(1.0 - (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1567 = (0.5 / ((_1548 + 9.9999999392252902907785028219223e-09) + _1549)) * _1548;
    float _3383 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1569 = (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))) * 0.31831014156341552734375;
    uint _1583 = _1389 + 9u;
    float _1589 = cbLight._m0[_1431].x + _285;
    float _1590 = cbLight._m0[_1431].y + _286;
    float _1591 = cbLight._m0[_1431].z + _287;
    float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
    float _1599 = dot(vec3(_205, _206, _207), vec3(cbLight._m0[_1431].xyz));
    float _3394 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _1602 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _1603 = dot(vec3(cbLight._m0[_1431].xyz), vec3(_1589 * _1595, _1590 * _1595, _1591 * _1595));
    float _3405 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
    float _1612 = (exp2(log2(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1616 = (0.5 / ((_1602 + 9.9999999392252902907785028219223e-09) + _1549)) * _1602;
    float _3416 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1618 = (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.31831014156341552734375;
    float _1628 = (((_1612 * cbLight._m0[_1583].x) * _1618) * _1413) + ((((cbLight._m0[_1529].x * _1381) * _1561) * _1569) * _1427);
    float _1629 = (((_1612 * cbLight._m0[_1583].y) * _1618) * _1413) + ((((cbLight._m0[_1529].y * _1382) * _1561) * _1569) * _1427);
    float _1630 = (((_1612 * cbLight._m0[_1583].z) * _1618) * _1413) + ((((cbLight._m0[_1529].z * _1383) * _1561) * _1569) * _1427);
    float _1692;
    float _1694;
    float _1696;
    if (_1467)
    {
        _1692 = _1628;
        _1694 = _1629;
        _1696 = _1630;
    }
    else
    {
        uint _1698 = _1389 + 10u;
        uint _1704 = _1389 + 2u;
        float _1710 = cbLight._m0[_1704].x + _285;
        float _1711 = cbLight._m0[_1704].y + _286;
        float _1712 = cbLight._m0[_1704].z + _287;
        float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
        float _1720 = dot(vec3(_205, _206, _207), vec3(cbLight._m0[_1704].xyz));
        float _3427 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1723 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1724 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1710 * _1716, _1711 * _1716, _1712 * _1716));
        float _3438 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = (exp2(log2(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1737 = (0.5 / ((_1723 + 9.9999999392252902907785028219223e-09) + _1549)) * _1723;
        float _3449 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1739 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.31831014156341552734375;
        float _1740 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
        _1692 = (((_1733 * cbLight._m0[_1698].x) * _1739) * _1740) + _1628;
        _1694 = (((_1733 * cbLight._m0[_1698].y) * _1739) * _1740) + _1629;
        _1696 = (((_1733 * cbLight._m0[_1698].z) * _1739) * _1740) + _1630;
    }
    float _1775;
    float _1777;
    float _1779;
    if (_1485)
    {
        _1775 = _1692;
        _1777 = _1694;
        _1779 = _1696;
    }
    else
    {
        uint _1786 = _1389 + 11u;
        uint _1792 = _1389 + 3u;
        float _1798 = cbLight._m0[_1792].x + _285;
        float _1799 = cbLight._m0[_1792].y + _286;
        float _1800 = cbLight._m0[_1792].z + _287;
        float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
        float _1808 = dot(vec3(_205, _206, _207), vec3(cbLight._m0[_1792].xyz));
        float _3465 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1811 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1812 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1798 * _1804, _1799 * _1804, _1800 * _1804));
        float _3476 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = (exp2(log2(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1825 = (0.5 / ((_1811 + 9.9999999392252902907785028219223e-09) + _1549)) * _1811;
        float _3487 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1827 = (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.31831014156341552734375;
        float _1828 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
        _1775 = (((_1821 * cbLight._m0[_1786].x) * _1827) * _1828) + _1692;
        _1777 = (((_1821 * cbLight._m0[_1786].y) * _1827) * _1828) + _1694;
        _1779 = (((_1821 * cbLight._m0[_1786].z) * _1827) * _1828) + _1696;
    }
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    float _1973;
    if (_1387.y == 0u)
    {
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1903;
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1903;
        float _1906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1903;
        uvec4 _1918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1919 = _1918.x;
        uint _1930 = uint((float(_1918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _294) / _1919))) + floor(float(uint(cbSceneParam._m0[85u].x * _293) / _1919)));
        float _1940 = (log2(_1906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1941 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        uint _1944 = uint(isnan(14.0) ? _1941 : (isnan(_1941) ? 14.0 : min(_1941, 14.0)));
        uvec4 _1949 = texelFetch(g_lightClusterGridBuffer, int(((_1944 << 2u) + (_1930 << 6u)) >> 2u));
        uint _1950 = _1949.x;
        uint _1951 = _1918.z;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        if (((((1u << ((_1951 >> 4u) & 15u)) + 4294967295u) & _1950) == 0u) || ((_1951 & 240u) == 0u))
        {
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
        }
        else
        {
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            float _2222 = 0.0;
            float _2223 = 0.0;
            float _2224 = 0.0;
            uint _2225 = 0u;
            uint _2234;
            bool _2235;
            for (;;)
            {
                _2234 = texelFetch(g_lightClassification, int((((_1944 << 5u) + (_1930 << 9u)) + (_2225 << 2u)) >> 2u)).x;
                _2235 = _2234 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2235)
                {
                    frontier_phi_61_pred = _2219;
                    frontier_phi_61_pred_1 = _2224;
                    frontier_phi_61_pred_2 = _2223;
                    frontier_phi_61_pred_3 = _2222;
                    frontier_phi_61_pred_4 = _2221;
                    frontier_phi_61_pred_5 = _2220;
                }
                else
                {
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    float _2347;
                    float _2348;
                    uint _2349;
                    _2343 = _2219;
                    _2344 = _2220;
                    _2345 = _2221;
                    _2346 = _2222;
                    _2347 = _2223;
                    _2348 = _2224;
                    _2349 = _2234;
                    float _2275;
                    float _2276;
                    float _2277;
                    float _2278;
                    float _2279;
                    float _2280;
                    for (;;)
                    {
                        uint _2353 = uint(findLSB(_2349)) + (_2225 << 5u);
                        uint _2350 = (_2349 + 4294967295u) & _2349;
                        uint _2355 = _2353 * 48u;
                        vec4 _2369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2355)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2355 + 3u)).x));
                        uint _2375 = (_2353 * 48u) + 4u;
                        vec4 _2388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2375)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 3u)).x));
                        uint _2394 = (_2353 * 48u) + 8u;
                        vec3 _2405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2394)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2394 + 2u)).x));
                        float _2409 = _2369.x - _1904;
                        float _2410 = _2369.y - _1905;
                        float _2411 = _2369.z - _1906;
                        float _2412 = dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411));
                        float _2415 = inversesqrt(_2412);
                        float _2424 = 1.0 - (_2412 * _2369.w);
                        float _3513 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
                        float _2425 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
                        float _2426 = sqrt(_2412) * _2388.w;
                        float _2429 = 1.39999997615814208984375 / (_2426 + 1.39999997615814208984375);
                        float _2430 = _2429 * _2429;
                        float _2433 = ((1.0 - _2430) * dot(vec3(_315, _318, _321), vec3(_2415 * _2409, _2415 * _2410, _2415 * _2411))) + _2430;
                        float _2436 = _2426 * _2426;
                        float _2440 = ((isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0))) * _2425) / ((_2436 * 0.699999988079071044921875) + 1.0);
                        float _2444 = (-0.0) - _1904;
                        float _2445 = (-0.0) - _1905;
                        float _2446 = (-0.0) - _1906;
                        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
                        float _2454 = dot(vec3(_315, _318, _321), vec3(_2450 * _2444, _2450 * _2445, _2450 * _2446));
                        float _3529 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
                        float _3540 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
                        float _2458 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                        float _2462 = (0.5 / (((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) + 9.9999999392252902907785028219223e-09) + _2458)) * _2458;
                        float _3551 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
                        float _2471 = (((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 3.1415927410125732421875) / ((_2436 * 2.1991131305694580078125) + 3.141590118408203125)) * _2425;
                        _2278 = (_2440 * _2388.x) + _2346;
                        _2279 = (_2440 * _2388.y) + _2347;
                        _2280 = (_2440 * _2388.z) + _2348;
                        _2275 = (_2471 * _2405.x) + _2343;
                        _2276 = (_2471 * _2405.y) + _2344;
                        _2277 = (_2471 * _2405.z) + _2345;
                        if (_2350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2343 = _2275;
                            _2344 = _2276;
                            _2345 = _2277;
                            _2346 = _2278;
                            _2347 = _2279;
                            _2348 = _2280;
                            _2349 = _2350;
                        }
                    }
                    frontier_phi_61_pred = _2275;
                    frontier_phi_61_pred_1 = _2280;
                    frontier_phi_61_pred_2 = _2279;
                    frontier_phi_61_pred_3 = _2278;
                    frontier_phi_61_pred_4 = _2277;
                    frontier_phi_61_pred_5 = _2276;
                }
                _2077 = frontier_phi_61_pred;
                _2087 = frontier_phi_61_pred_1;
                _2085 = frontier_phi_61_pred_2;
                _2083 = frontier_phi_61_pred_3;
                _2081 = frontier_phi_61_pred_4;
                _2079 = frontier_phi_61_pred_5;
                uint _2226 = _2225 + 1u;
                if (_2226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2219 = _2077;
                    _2220 = _2079;
                    _2221 = _2081;
                    _2222 = _2083;
                    _2223 = _2085;
                    _2224 = _2087;
                    _2225 = _2226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
        }
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.z;
        uint _2093 = (_2091 >> 8u) & 15u;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        float _2200;
        if (((4294967295u << _2093) & _1950) == 0u)
        {
            _2190 = _2076;
            _2192 = _2078;
            _2194 = _2080;
            _2196 = _2082;
            _2198 = _2084;
            _2200 = _2086;
        }
        else
        {
            float _2215 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2093 < ((_2091 >> 12u) & 15u))
            {
                float _2191;
                float _2193;
                float _2195;
                float _2197;
                float _2199;
                float _2201;
                float _2326 = _2076;
                float _2327 = _2078;
                float _2328 = _2080;
                float _2329 = _2082;
                float _2330 = _2084;
                float _2331 = _2086;
                uint _2332 = _2093;
                uint _2341;
                bool _2342;
                for (;;)
                {
                    _2341 = texelFetch(g_lightClassification, int((((_1944 << 5u) + (_1930 << 9u)) + (_2332 << 2u)) >> 2u)).x;
                    _2342 = _2341 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2342)
                    {
                        frontier_phi_67_pred = _2329;
                        frontier_phi_67_pred_1 = _2330;
                        frontier_phi_67_pred_2 = _2331;
                        frontier_phi_67_pred_3 = _2328;
                        frontier_phi_67_pred_4 = _2327;
                        frontier_phi_67_pred_5 = _2326;
                    }
                    else
                    {
                        float _2476;
                        float _2477;
                        float _2478;
                        float _2479;
                        float _2480;
                        float _2481;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2732;
                        float _2733;
                        float _2489 = _2326;
                        float _2490 = _2327;
                        float _2491 = _2328;
                        float _2492 = _2329;
                        float _2493 = _2330;
                        float _2494 = _2331;
                        uint _2495 = _2341;
                        uint _2496;
                        vec4 _2521;
                        float _2522;
                        vec4 _2537;
                        vec3 _2549;
                        vec4 _2565;
                        vec4 _2581;
                        float _2628;
                        bool _2629;
                        for (;;)
                        {
                            uint _2506 = ((_2332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2495));
                            _2496 = (_2495 + 4294967295u) & _2495;
                            uint _2508 = _2506 * 40u;
                            _2521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2508 + 3u)).x));
                            _2522 = _2521.w;
                            uint _2524 = (_2506 * 40u) + 4u;
                            _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2539 = (_2506 * 40u) + 8u;
                            _2549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 2u)).x));
                            uint _2552 = (_2506 * 40u) + 16u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2568 = (_2506 * 40u) + 20u;
                            _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            uint _2584 = (_2506 * 40u) + 24u;
                            vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            uint _2603 = (_2506 * 40u) + 28u;
                            vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            _2628 = fma(_1906, _2616.z, fma(_1905, _2616.y, _2616.x * _1904)) + _2616.w;
                            _2629 = !((fma(_1906, _2597.z, fma(_1905, _2597.y, _2597.x * _1904)) + _2597.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2629)
                            {
                                float _2656 = _2521.x - _1904;
                                float _2657 = _2521.y - _1905;
                                float _2658 = _2521.z - _1906;
                                float _2659 = dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658));
                                float _2662 = inversesqrt(_2659);
                                float _2663 = _2662 * _2656;
                                float _2664 = _2662 * _2657;
                                float _2665 = _2662 * _2658;
                                float _2669 = 1.0 - (_2659 / (_2522 * _2522));
                                float _3562 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                                float _2670 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                                float _2674 = sqrt(_2659) * _2537.w;
                                float _2676 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                                float _2677 = _2676 * _2676;
                                float _2678 = 1.0 - _2677;
                                float _2680 = (_2678 * dot(vec3(_2663, _2664, _2665), vec3(_315, _318, _321))) + _2677;
                                float _2683 = _2674 * _2674;
                                float _2687 = (fma(_1906, _2565.z, fma(_1905, _2565.y, _2565.x * _1904)) + _2565.w) / _2628;
                                float _2688 = (fma(_1906, _2581.z, fma(_1905, _2581.y, _2581.x * _1904)) + _2581.w) / _2628;
                                float _2692 = 1.0 - dot(vec2(_2687, _2688), vec2(_2687, _2688));
                                float _3578 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                                float _2693 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
                                float _2694 = _2693 * (((isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))) * _2670) / ((_2683 * 0.699999988079071044921875) + 1.0));
                                float _2704 = dot(vec3(_315, _318, _321), vec3((-0.0) - (_1904 * _2215), (-0.0) - (_1905 * _2215), (-0.0) - (_1906 * _2215)));
                                float _3589 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                                float _2712 = (_2678 * dot(vec3(_315, _318, _321), vec3(_2663, _2664, _2665))) + _2677;
                                float _3600 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2713 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2717 = (0.5 / (((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) + 9.9999999392252902907785028219223e-09) + _2713)) * _2713;
                                float _3611 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                                float _2724 = (_2693 * _2670) * (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 3.1415927410125732421875) / ((_2683 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2724 * _2549.x;
                                frontier_phi_73_pred_1 = _2724 * _2549.y;
                                frontier_phi_73_pred_2 = _2694 * _2537.z;
                                frontier_phi_73_pred_3 = _2694 * _2537.y;
                                frontier_phi_73_pred_4 = _2694 * _2537.x;
                                frontier_phi_73_pred_5 = _2724 * _2549.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2728 = frontier_phi_73_pred;
                            _2729 = frontier_phi_73_pred_1;
                            _2733 = frontier_phi_73_pred_2;
                            _2732 = frontier_phi_73_pred_3;
                            _2731 = frontier_phi_73_pred_4;
                            _2730 = frontier_phi_73_pred_5;
                            _2479 = _2731 + _2492;
                            _2480 = _2732 + _2493;
                            _2481 = _2733 + _2494;
                            _2476 = _2728 + _2489;
                            _2477 = _2729 + _2490;
                            _2478 = _2730 + _2491;
                            if (_2496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2489 = _2476;
                                _2490 = _2477;
                                _2491 = _2478;
                                _2492 = _2479;
                                _2493 = _2480;
                                _2494 = _2481;
                                _2495 = _2496;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2479;
                        frontier_phi_67_pred_1 = _2480;
                        frontier_phi_67_pred_2 = _2481;
                        frontier_phi_67_pred_3 = _2478;
                        frontier_phi_67_pred_4 = _2477;
                        frontier_phi_67_pred_5 = _2476;
                    }
                    _2197 = frontier_phi_67_pred;
                    _2199 = frontier_phi_67_pred_1;
                    _2201 = frontier_phi_67_pred_2;
                    _2195 = frontier_phi_67_pred_3;
                    _2193 = frontier_phi_67_pred_4;
                    _2191 = frontier_phi_67_pred_5;
                    uint _2333 = _2332 + 1u;
                    if (_2333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2326 = _2191;
                        _2327 = _2193;
                        _2328 = _2195;
                        _2329 = _2197;
                        _2330 = _2199;
                        _2331 = _2201;
                        _2332 = _2333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2199;
                frontier_phi_55_56_ladder_1 = _2201;
                frontier_phi_55_56_ladder_2 = _2197;
                frontier_phi_55_56_ladder_3 = _2195;
                frontier_phi_55_56_ladder_4 = _2193;
                frontier_phi_55_56_ladder_5 = _2191;
            }
            else
            {
                frontier_phi_55_56_ladder = _2084;
                frontier_phi_55_56_ladder_1 = _2086;
                frontier_phi_55_56_ladder_2 = _2082;
                frontier_phi_55_56_ladder_3 = _2080;
                frontier_phi_55_56_ladder_4 = _2078;
                frontier_phi_55_56_ladder_5 = _2076;
            }
            _2190 = frontier_phi_55_56_ladder_5;
            _2192 = frontier_phi_55_56_ladder_4;
            _2194 = frontier_phi_55_56_ladder_3;
            _2196 = frontier_phi_55_56_ladder_2;
            _2198 = frontier_phi_55_56_ladder;
            _2200 = frontier_phi_55_56_ladder_1;
        }
        float _2205 = isnan(1.0) ? _360 : (isnan(_360) ? 1.0 : min(_360, 1.0));
        _1963 = (_2205 * _2196) + _1523;
        _1965 = (_2205 * _2198) + _1525;
        _1967 = (_2205 * _2200) + _1527;
        _1969 = ((_2190 * 0.039999999105930328369140625) * _2205) + _1775;
        _1971 = ((_2192 * 0.039999999105930328369140625) * _2205) + _1777;
        _1973 = ((_2194 * 0.039999999105930328369140625) * _2205) + _1779;
    }
    else
    {
        _1963 = _1523;
        _1965 = _1525;
        _1967 = _1527;
        _1969 = _1775;
        _1971 = _1777;
        _1973 = _1779;
    }
    uint _1979 = _336 + uint(cbMatDynParam._m0[0u].w);
    float _3627 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3638 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3649 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _2010 = (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1963 + ((isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0))) * _360))) + ((_1969 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _1139)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[11u].x * _185) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_1979].x);
    float _2012 = ((((cbMtdParam._m0[11u].x * _186) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_1979].y) + ((_1971 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _1139)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1965 + ((isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0))) * _360)));
    float _2014 = ((((cbMtdParam._m0[11u].x * _187) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_1979].z) + ((_1973 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _1139)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1967 + ((isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0))) * _360)));
    uint _2018 = _334 + 6u;
    float _2026 = _293 / cbSceneParam._m0[86u].x;
    float _2027 = _294 / cbSceneParam._m0[86u].y;
    vec4 _2041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2026, _2027, (log2((isnan(cbSceneParam._m0[77u].w) ? _227 : (isnan(_227) ? cbSceneParam._m0[77u].w : min(_227, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2043 = _2041.x;
    float _2044 = _2041.y;
    float _2045 = _2041.z;
    float _2046 = _2041.w;
    float _2139;
    float _2141;
    float _2143;
    float _2145;
    if (_227 > cbSceneParam._m0[78u].w)
    {
        float _2101 = isnan(_227) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _227 : min(cbSceneParam._m0[80u].w, _227));
        float _2102 = _2101 / _227;
        float _2113 = _2102 * _278;
        float _2114 = _279 * _2102;
        float _2115 = (-0.0) - _2114;
        float _2117 = _2102 * _280;
        float _2119 = (cbSceneParam._m0[77u].w * _2115) / _2101;
        float _2120 = _2119 + cbSceneParam._m0[79u].w;
        float _2121 = cbSceneParam._m0[79u].w - _2114;
        float _2127 = sqrt(((_2113 * _2113) + (_2114 * _2114)) + (_2117 * _2117));
        float _2130 = (1.0 - (cbSceneParam._m0[77u].w / _2101)) * _2127;
        float _2135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2288;
        if (abs((_2115 - _2119) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2288 = ((((_2120 > 0.0) ? exp2(_2135 * _2120) : (2.0 - exp2(_2137 * _2120))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2130;
        }
        else
        {
            float _2248 = 1.0 / cbSceneParam._m0[80u].x;
            float _2249 = isnan(_2121) ? _2120 : (isnan(_2120) ? _2121 : max(_2120, _2121));
            float _2250 = isnan(_2121) ? _2120 : (isnan(_2120) ? _2121 : min(_2120, _2121));
            float _2259 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : min(_2249, 0.0));
            float _2260 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : min(_2250, 0.0));
            _2288 = ((abs(_2127 / _2115) * cbSceneParam._m0[80u].y) * ((((_2259 - _2260) * 2.0) - ((exp2(_2135 * (isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0)))) - exp2(_2135 * (isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))))) * _2248)) - ((exp2(_2137 * _2259) - exp2(_2137 * _2260)) * _2248))) + (_2130 * cbSceneParam._m0[80u].z);
        }
        vec4 _2290 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2026, _2027, 1.0), 0.0);
        float _2299 = exp2((_2288 * (-1.44269502162933349609375)) * (1.0 - _2290.w));
        float _2300 = log2(_2299);
        float _2316 = log2(_2046);
        _2139 = (exp2(_2316 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2300 * cbSceneParam._m0[78u].x)) * _2290.x) / cbSceneParam._m0[78u].x)) + _2043;
        _2141 = (exp2(_2316 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2300 * cbSceneParam._m0[78u].y)) * _2290.y) / cbSceneParam._m0[78u].y)) + _2044;
        _2143 = (exp2(_2316 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2300 * cbSceneParam._m0[78u].z)) * _2290.z) / cbSceneParam._m0[78u].z)) + _2045;
        _2145 = _2299 * _2046;
    }
    else
    {
        _2139 = _2043;
        _2141 = _2044;
        _2143 = _2045;
        _2145 = _2046;
    }
    float _2157 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2158 = _2157 == 3.0;
    float _2160 = log2(_2145);
    float _2167 = exp2(_2160 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)));
    float _2168 = exp2(_2160 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)));
    float _2169 = exp2(_2160 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)));
    float _2178 = (_2157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2178 * (_2158 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.y = _2178 * (_2158 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.z = _2178 * (_2158 ? _2169 : (_2169 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.w = cbInstanceData._m0[_2018].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2018].w;
}


