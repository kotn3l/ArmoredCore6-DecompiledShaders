#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _751;
float _3224;
float _3225;
float _3226;
float _3227;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    vec4 _188 = texture(sampler2D(G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _191 = _188.x;
    float _192 = _188.y;
    float _193 = _188.z;
    float _194 = _191 * cbMtdParam._m0[9u].x;
    float _195 = _192 * cbMtdParam._m0[9u].y;
    float _196 = _193 * cbMtdParam._m0[9u].z;
    float _210 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _211 = _210 * _166;
    float _212 = _210 * _167;
    float _213 = _210 * _168;
    float _3236 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _3247 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3258 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _233 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _274);
    float _285 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _274);
    float _286 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _274);
    float _290 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _291 = _284 * _290;
    float _292 = _285 * _290;
    float _293 = _286 * _290;
    vec4 _298 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _300 = _298.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _430 = sqrt(((_284 * _284) + (_285 * _285)) + (_286 * _286));
        float _436 = (cbMatDynParam._m0[5u].x * _430) + cbMatDynParam._m0[5u].y;
        float _3269 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
        float _437 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _441 = (cbMatDynParam._m0[5u].z * _430) + cbMatDynParam._m0[5u].w;
        float _3280 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0))) - _437)) + _437) < ((_300 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _312 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _313 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _333 = fma(_213, cbSceneParam._m0[5u].z, fma(_212, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _211));
    float _336 = fma(_213, cbSceneParam._m0[6u].z, fma(_212, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _211));
    float _339 = fma(_213, cbSceneParam._m0[7u].z, fma(_212, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _211));
    uint _352 = uint(roundEven(NORMAL.w)) * 13u;
    uint _354 = _352 + 9u;
    uint _355 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _361 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_355].x;
    float _362 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_355].y;
    float _363 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_355].z;
    float _3291 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _364 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _365 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    vec4 _375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _312, cbSceneParam._m0[86u].y * _313));
    float _378 = _375.x * TEXCOORD.z;
    float _379 = dot(vec3(_211, _212, _213), vec3(_291, _292, _293));
    float _382 = _379 * 2.0;
    float _387 = (_382 * _211) - _291;
    float _388 = (_382 * _212) - _292;
    float _389 = (_382 * _213) - _293;
    float _411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _750;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _475 = fma(_419, cbModelParam._m0[26u].z, fma(_415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _411));
        float _479 = fma(_419, cbModelParam._m0[27u].z, fma(_415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _411));
        float _483 = fma(_419, cbModelParam._m0[28u].z, fma(_415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _411));
        float _508 = _411 + _211;
        float _509 = _415 + _212;
        float _510 = _419 + _213;
        float _520 = fma(_510, cbModelParam._m0[26u].z, fma(_509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _508)) - _475;
        float _521 = fma(_510, cbModelParam._m0[27u].z, fma(_509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _508)) - _479;
        float _522 = fma(_510, cbModelParam._m0[28u].z, fma(_509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _508)) - _483;
        float _526 = inversesqrt(dot(vec3(_520, _521, _522), vec3(_520, _521, _522)));
        float _539 = ((_526 * _520) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_475 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _540 = ((_526 * _521) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_479 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _541 = ((_526 * _522) / cbModelParam._m0[34u].z) + ((((((_483 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_539, _540, _541), 0.0);
        float _578 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_544.x + (-0.5));
        float _580 = _578 * (_544.y + (-0.5));
        float _581 = _578 * (_544.z + (-0.5));
        float _588 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_551.x + (-0.5));
        float _590 = _588 * (_551.y + (-0.5));
        float _591 = _588 * (_551.z + (-0.5));
        float _598 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_558.x + (-0.5));
        float _600 = _598 * (_558.y + (-0.5));
        float _601 = _598 * (_558.z + (-0.5));
        float _608 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_565.x + (-0.5));
        float _610 = _608 * (_565.y + (-0.5));
        float _611 = _608 * (_565.z + (-0.5));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = _579 * 0.5;
        float _616 = _589 * 0.5;
        float _617 = _599 * 0.5;
        float _618 = dot(vec3(_615, _616, _617), vec3(_615, _616, _617));
        float _623 = (_618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_618);
        float _632 = (dot(vec3(_211, _212, _213), vec3(_623 * _615, _623 * _616, _623 * _617)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _642 = sqrt(((_616 * _616) + (_615 * _615)) + (_617 * _617)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _644 = _643 * 2.0;
        float _648 = (1.0 - _643) / (_643 + 1.0);
        float _3361 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _658 = ((((1.0 - _649) * (_644 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_644 + 1.0))) + _649) * _612;
        float _659 = _580 * 0.5;
        float _660 = _590 * 0.5;
        float _661 = _600 * 0.5;
        float _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
        float _667 = (_662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_662);
        float _675 = (dot(vec3(_211, _212, _213), vec3(_667 * _659, _667 * _660, _667 * _661)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _684 = sqrt(((_660 * _660) + (_659 * _659)) + (_661 * _661)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _686 = _685 * 2.0;
        float _690 = (1.0 - _685) / (_685 + 1.0);
        float _3394 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _700 = ((((1.0 - _691) * (_686 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_686 + 1.0))) + _691) * _613;
        float _701 = _581 * 0.5;
        float _702 = _591 * 0.5;
        float _703 = _601 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(_211, _212, _213), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3427 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_728 + 1.0))) + _733) * _614;
        _750 = _581;
        _752 = _580;
        _753 = _579;
        _754 = _591;
        _755 = _590;
        _756 = _589;
        _757 = _601;
        _758 = _600;
        _759 = _599;
        _760 = _614;
        _761 = _613;
        _762 = _612;
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
    }
    else
    {
        _750 = _751;
        _752 = _751;
        _753 = _751;
        _754 = _751;
        _755 = _751;
        _756 = _751;
        _757 = _751;
        _758 = _751;
        _759 = _751;
        _760 = _751;
        _761 = _751;
        _762 = _751;
        _763 = 0.0;
        _764 = 0.0;
        _765 = 0.0;
    }
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _794 = fma(_419, cbModelParam._m0[30u].z, fma(_415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _411));
        float _798 = fma(_419, cbModelParam._m0[31u].z, fma(_415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _411));
        float _802 = fma(_419, cbModelParam._m0[32u].z, fma(_415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _411));
        float _825 = _411 + _211;
        float _826 = _415 + _212;
        float _827 = _419 + _213;
        float _837 = fma(_827, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825)) - _794;
        float _838 = fma(_827, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825)) - _798;
        float _839 = fma(_827, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825)) - _802;
        float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
        float _856 = ((_843 * _837) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_794 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_843 * _838) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_798 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_843 * _839) / cbModelParam._m0[35u].z) + ((((((_802 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_860.x + (-0.5));
        float _895 = _893 * (_860.y + (-0.5));
        float _896 = _893 * (_860.z + (-0.5));
        float _903 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_867.x + (-0.5));
        float _905 = _903 * (_867.y + (-0.5));
        float _906 = _903 * (_867.z + (-0.5));
        float _913 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_874.x + (-0.5));
        float _915 = _913 * (_874.y + (-0.5));
        float _916 = _913 * (_874.z + (-0.5));
        float _923 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_881.x + (-0.5));
        float _925 = _923 * (_881.y + (-0.5));
        float _926 = _923 * (_881.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_211, _212, _213), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3490 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_957 + 1.0))) + _962) * _927;
        float _972 = _895 * 0.5;
        float _973 = _905 * 0.5;
        float _974 = _915 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_211, _212, _213), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3523 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_999 + 1.0))) + _1004) * _928;
        float _1014 = _896 * 0.5;
        float _1015 = _906 * 0.5;
        float _1016 = _916 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_211, _212, _213), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3556 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1041 + 1.0))) + _1046) * _929;
        _1063 = _896;
        _1064 = _895;
        _1065 = _894;
        _1066 = _906;
        _1067 = _905;
        _1068 = _904;
        _1069 = _916;
        _1070 = _915;
        _1071 = _914;
        _1072 = _929;
        _1073 = _928;
        _1074 = _927;
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _751;
        _1064 = _751;
        _1065 = _751;
        _1066 = _751;
        _1067 = _751;
        _1068 = _751;
        _1069 = _751;
        _1070 = _751;
        _1071 = _751;
        _1072 = _751;
        _1073 = _751;
        _1074 = _751;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _763)) + _763;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _764)) + _764;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _765)) + _765;
    float _1110 = fma(_1089, cbSceneParam._m0[89u].z, fma(_1088, cbSceneParam._m0[89u].y, _1087 * cbSceneParam._m0[89u].x));
    float _1113 = fma(_1089, cbSceneParam._m0[90u].z, fma(_1088, cbSceneParam._m0[90u].y, _1087 * cbSceneParam._m0[90u].x));
    float _1116 = fma(_1089, cbSceneParam._m0[91u].z, fma(_1088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1087));
    float _1131 = _387 * 0.5;
    float _1132 = _388 * 0.5;
    float _1133 = _389 * 0.5;
    float _1134 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1137 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1140 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1174;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1147 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_750, _754, _757, _760));
        float _1151 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_752, _755, _758, _761));
        float _1155 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_753, _756, _759, _762));
        float _1162 = dot(vec4(cbModelParam._m0[39u]), vec4(_1131, _1132, _1133, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1185;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1176 = dot(vec4(cbModelParam._m0[40u]), vec4(_1131, _1132, _1133, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1189 = (_1185 * cbModelParam._m0[1u].x) + (_1174 * (1.0 - cbModelParam._m0[1u].x));
    float _1198 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1280;
    float _1282;
    float _1284;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1247 = fma(_419, cbModelParam._m0[13u].z, fma(_415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411)) + cbModelParam._m0[13u].w;
        float _1251 = fma(_419, cbModelParam._m0[14u].z, fma(_415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411)) + cbModelParam._m0[14u].w;
        float _1255 = fma(_419, cbModelParam._m0[15u].z, fma(_415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411)) + cbModelParam._m0[15u].w;
        float _1258 = fma(_389, cbModelParam._m0[13u].z, fma(_388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _387));
        float _1261 = fma(_389, cbModelParam._m0[14u].z, fma(_388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _387));
        float _1264 = fma(_389, cbModelParam._m0[15u].z, fma(_388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _387));
        float _1290;
        if (_1258 > 0.0)
        {
            _1290 = abs((1.0 - _1247) / _1258);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1247 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1290 = frontier_phi_17_15_ladder;
        }
        float _1464;
        if (_1261 > 0.0)
        {
            _1464 = abs((1.0 - _1251) / _1261);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1251 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1464 = frontier_phi_26_22_ladder;
        }
        float _1761;
        if (_1264 > 0.0)
        {
            _1761 = abs((1.0 - _1255) / _1264);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1255 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1761 = frontier_phi_38_33_ladder;
        }
        float _1763 = isnan(_1464) ? _1290 : (isnan(_1290) ? _1464 : min(_1290, _1464));
        float _1764 = isnan(_1761) ? _1763 : (isnan(_1763) ? _1761 : min(_1763, _1761));
        float _1768 = (_1764 * _1258) + _1247;
        float _1769 = (_1764 * _1261) + _1251;
        float _1770 = (_1764 * _1264) + _1255;
        float _1771 = _1764 * 9.9999997473787516355514526367188e-05;
        float _1773 = (-1.0) - _1771;
        float _1775 = _1771 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1770 > _1775) || ((_1770 < _1773) || ((_1769 > _1775) || ((_1769 < _1773) || ((_1768 < _1773) || (_1768 > _1775))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1915 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1770, cbModelParam._m0[9u].z, fma(_1769, cbModelParam._m0[9u].y, _1768 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1770, cbModelParam._m0[10u].z, fma(_1769, cbModelParam._m0[10u].y, _1768 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1770, cbModelParam._m0[11u].z, fma(_1769, cbModelParam._m0[11u].y, _1768 * cbModelParam._m0[11u].x))), _1198);
            frontier_phi_16_38_ladder = _1915.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1915.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1915.x * cbModelParam._m0[1u].y;
        }
        _1280 = frontier_phi_16_38_ladder_2;
        _1282 = frontier_phi_16_38_ladder_1;
        _1284 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_387, _388, _389), _1198);
        _1280 = _1268.x * cbModelParam._m0[1u].y;
        _1282 = _1268.y * cbModelParam._m0[1u].y;
        _1284 = _1268.z * cbModelParam._m0[1u].y;
    }
    float _1287 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1344 = fma(_419, cbModelParam._m0[21u].z, fma(_415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411)) + cbModelParam._m0[21u].w;
        float _1348 = fma(_419, cbModelParam._m0[22u].z, fma(_415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411)) + cbModelParam._m0[22u].w;
        float _1352 = fma(_419, cbModelParam._m0[23u].z, fma(_415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411)) + cbModelParam._m0[23u].w;
        float _1355 = fma(_389, cbModelParam._m0[21u].z, fma(_388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _387));
        float _1358 = fma(_389, cbModelParam._m0[22u].z, fma(_388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _387));
        float _1361 = fma(_389, cbModelParam._m0[23u].z, fma(_388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _387));
        float _1469;
        if (_1355 > 0.0)
        {
            _1469 = abs((1.0 - _1344) / _1355);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1344 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1469 = frontier_phi_28_24_ladder;
        }
        float _1788;
        if (_1358 > 0.0)
        {
            _1788 = abs((1.0 - _1348) / _1358);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1348 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1788 = frontier_phi_40_35_ladder;
        }
        float _2061;
        if (_1361 > 0.0)
        {
            _2061 = abs((1.0 - _1352) / _1361);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1352 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2061 = frontier_phi_50_47_ladder;
        }
        float _2063 = isnan(_1788) ? _1469 : (isnan(_1469) ? _1788 : min(_1469, _1788));
        float _2064 = isnan(_2061) ? _2063 : (isnan(_2063) ? _2061 : min(_2063, _2061));
        float _2068 = (_2064 * _1355) + _1344;
        float _2069 = (_2064 * _1358) + _1348;
        float _2070 = (_2064 * _1361) + _1352;
        float _2071 = _2064 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2071;
        float _2074 = _2071 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2070 > _2074) || ((_2070 < _2072) || ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 < _2072) || (_2068 > _2074))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2070, cbModelParam._m0[17u].z, fma(_2069, cbModelParam._m0[17u].y, _2068 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2070, cbModelParam._m0[18u].z, fma(_2069, cbModelParam._m0[18u].y, _2068 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2070, cbModelParam._m0[19u].z, fma(_2069, cbModelParam._m0[19u].y, _2068 * cbModelParam._m0[19u].x))), _1287);
            frontier_phi_25_50_ladder = _2161.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2161.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2161.x * cbModelParam._m0[1u].z;
        }
        _1380 = frontier_phi_25_50_ladder_2;
        _1382 = frontier_phi_25_50_ladder_1;
        _1384 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_387, _388, _389), _1287);
        _1380 = _1364.x * cbModelParam._m0[1u].z;
        _1382 = _1364.y * cbModelParam._m0[1u].z;
        _1384 = _1364.z * cbModelParam._m0[1u].z;
    }
    float _1396 = _378 * 0.01200000010430812835693359375;
    float _1398 = _1396 * ((cbModelParam._m0[1u].w * (_1380 - _1280)) + _1280);
    float _1399 = _1396 * ((cbModelParam._m0[1u].w * (_1382 - _1282)) + _1282);
    float _1400 = _1396 * ((cbModelParam._m0[1u].w * (_1384 - _1284)) + _1284);
    float _1403 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, _1398 * cbSceneParam._m0[91u].x));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1456 = _1443 / _1455;
    float _1457 = _1447 / _1455;
    float _1458 = _1451 / _1455;
    float _1605;
    float _1606;
    float _1607;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1485 = ((uint(_1458 > cbSceneParam._m0[59u].y) + uint(_1458 > cbSceneParam._m0[59u].x)) + uint(_1458 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1486 = _1485 + 43u;
        uint _1494 = _1485 + 44u;
        uint _1502 = _1485 + 45u;
        uint _1510 = _1485 + 46u;
        float _1521 = fma(_1455, cbSceneParam._m0[_1486].w, fma(_1451, cbSceneParam._m0[_1486].z, fma(_1447, cbSceneParam._m0[_1486].y, _1443 * cbSceneParam._m0[_1486].x)));
        float _1525 = fma(_1455, cbSceneParam._m0[_1494].w, fma(_1451, cbSceneParam._m0[_1494].z, fma(_1447, cbSceneParam._m0[_1494].y, _1443 * cbSceneParam._m0[_1494].x)));
        float _1533 = fma(_1455, cbSceneParam._m0[_1510].w, fma(_1451, cbSceneParam._m0[_1510].z, fma(_1447, cbSceneParam._m0[_1510].y, _1443 * cbSceneParam._m0[_1510].x)));
        float _1538 = cbSceneParam._m0[33u].z * _1533;
        float _1540 = cbSceneParam._m0[33u].w * _1533;
        float _1543 = fma(_1455, cbSceneParam._m0[_1502].w, fma(_1451, cbSceneParam._m0[_1502].z, fma(_1447, cbSceneParam._m0[_1502].y, _1443 * cbSceneParam._m0[_1502].x))) / _1533;
        float _1591 = (cbSceneParam._m0[33u].x - sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458))) * cbSceneParam._m0[33u].y;
        float _3682 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1598 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1538 + _1521) / _1533, (_1540 + _1525) / _1533), _1543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1540 + _1521) / _1533, (_1525 - _1538) / _1533), _1543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1521 - _1538) / _1533, (_1525 - _1540) / _1533), _1543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1521 - _1540) / _1533, (_1538 + _1525) / _1533), _1543), 0.0)).x), vec4(0.25)));
        _1605 = 1.0 - (_1598 * cbSceneParam._m0[34u].x);
        _1606 = 1.0 - (_1598 * cbSceneParam._m0[34u].y);
        _1607 = 1.0 - (_1598 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1605 = 1.0;
        _1606 = 1.0;
        _1607 = 1.0;
    }
    float _1671;
    float _1673;
    float _1675;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1659 = fma(_1455, cbSceneParam._m0[63u].w, fma(_1451, cbSceneParam._m0[63u].z, fma(_1447, cbSceneParam._m0[63u].y, _1443 * cbSceneParam._m0[63u].x)));
        float _1660 = fma(_1455, cbSceneParam._m0[60u].w, fma(_1451, cbSceneParam._m0[60u].z, fma(_1447, cbSceneParam._m0[60u].y, _1443 * cbSceneParam._m0[60u].x))) / _1659;
        float _1661 = fma(_1455, cbSceneParam._m0[61u].w, fma(_1451, cbSceneParam._m0[61u].z, fma(_1447, cbSceneParam._m0[61u].y, _1443 * cbSceneParam._m0[61u].x))) / _1659;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1660 >= cbSceneParam._m0[64u].x) && (_1661 >= cbSceneParam._m0[64u].y)) && (_1660 <= cbSceneParam._m0[64u].z)) && (_1661 <= cbSceneParam._m0[64u].w))
        {
            float _1801 = fma(_1455, cbSceneParam._m0[62u].w, fma(_1451, cbSceneParam._m0[62u].z, fma(_1447, cbSceneParam._m0[62u].y, _1443 * cbSceneParam._m0[62u].x))) / _1659;
            float _1805 = isnan(cbSceneParam._m0[41u].w) ? _1801 : (isnan(_1801) ? cbSceneParam._m0[41u].w : max(_1801, cbSceneParam._m0[41u].w));
            float _1848 = (cbSceneParam._m0[33u].x - sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458))) * cbSceneParam._m0[33u].y;
            float _3698 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
            float _1855 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1660, cbSceneParam._m0[33u].w + _1661), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1660, _1661 - cbSceneParam._m0[33u].z), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1660 - cbSceneParam._m0[33u].z, _1661 - cbSceneParam._m0[33u].w), _1805), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1660 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1661), _1805), 0.0)).x), vec4(0.25)));
            float _1859 = 1.0 - (_1855 * cbSceneParam._m0[34u].x);
            float _1860 = 1.0 - (_1855 * cbSceneParam._m0[34u].y);
            float _1861 = 1.0 - (_1855 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1861) ? _1607 : (isnan(_1607) ? _1861 : min(_1607, _1861));
            frontier_phi_37_36_ladder_1 = isnan(_1860) ? _1606 : (isnan(_1606) ? _1860 : min(_1606, _1860));
            frontier_phi_37_36_ladder_2 = isnan(_1859) ? _1605 : (isnan(_1605) ? _1859 : min(_1605, _1859));
        }
        else
        {
            frontier_phi_37_36_ladder = _1607;
            frontier_phi_37_36_ladder_1 = _1606;
            frontier_phi_37_36_ladder_2 = _1605;
        }
        _1671 = frontier_phi_37_36_ladder_2;
        _1673 = frontier_phi_37_36_ladder_1;
        _1675 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1671 = _1605;
        _1673 = _1606;
        _1675 = _1607;
    }
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_352 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1690 = _378 + (-1.0);
    float _1696 = (cbLight._m0[_1683].x * _1690) + 1.0;
    float _1697 = (cbLight._m0[_1683].y * _1690) + 1.0;
    float _1698 = (cbLight._m0[_1683].z * _1690) + 1.0;
    float _1699 = (cbLight._m0[_1683].w * _1690) + 1.0;
    uint _1700 = _1682 + 5u;
    float _1706 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
    uint _1710 = _1682 + 4u;
    float _1720 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1724 = _1682 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_211, _212, _213));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_211, _212, _213));
    float _3734 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3745 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1700].x * _1706) * _1745) + (((cbLight._m0[_1710].x * _1671) * _1720) * _1743);
    float _1753 = ((_1706 * cbLight._m0[_1700].y) * _1745) + (((cbLight._m0[_1710].y * _1673) * _1720) * _1743);
    float _1754 = ((_1706 * cbLight._m0[_1700].z) * _1745) + (((cbLight._m0[_1710].z * _1675) * _1720) * _1743);
    uvec4 _1758 = floatBitsToUint(cbLight._m0[_1682 + 12u]);
    bool _1760 = _1758.x == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1760)
    {
        _1862 = _1752;
        _1864 = _1753;
        _1866 = _1754;
    }
    else
    {
        uint _1870 = _1682 + 6u;
        float _1886 = (dot(vec3(cbLight._m0[_1682 + 2u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _1887 = _1886 * _1886;
        float _3756 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1889 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1862 = (((cbLight._m0[_1870].x * 0.3183098733425140380859375) * _1888) * _1889) + _1752;
        _1864 = (((cbLight._m0[_1870].y * 0.3183098733425140380859375) * _1888) * _1889) + _1753;
        _1866 = (((cbLight._m0[_1870].z * 0.3183098733425140380859375) * _1888) * _1889) + _1754;
    }
    bool _1869 = _1758.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1869)
    {
        _1924 = _1862;
        _1926 = _1864;
        _1928 = _1866;
    }
    else
    {
        uint _2032 = _1682 + 7u;
        float _2048 = (dot(vec3(cbLight._m0[_1682 + 3u].xyz), vec3(_211, _212, _213)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _3772 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _2051 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _1924 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _1862;
        _1926 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _1864;
        _1928 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _1866;
    }
    uint _1930 = _1682 + 8u;
    float _1936 = cbLight._m0[_1682].x + _291;
    float _1937 = cbLight._m0[_1682].y + _292;
    float _1938 = cbLight._m0[_1682].z + _293;
    float _1942 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
    float _1946 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1682].xyz));
    float _3788 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _1950 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1936 * _1942, _1937 * _1942, _1938 * _1942));
    float _3810 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1968 = (0.5 / ((_1949 + 9.9999999392252902907785028219223e-09) + _1950)) * _1949;
    float _3821 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 0.31831014156341552734375;
    uint _1984 = _1682 + 9u;
    float _1990 = cbLight._m0[_1724].x + _291;
    float _1991 = cbLight._m0[_1724].y + _292;
    float _1992 = cbLight._m0[_1724].z + _293;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _2000 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_1724].xyz));
    float _3832 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1990 * _1996, _1991 * _1996, _1992 * _1996));
    float _3843 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = (0.5 / ((_2003 + 9.9999999392252902907785028219223e-09) + _1950)) * _2003;
    float _3854 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.31831014156341552734375;
    float _2029 = (((_2013 * cbLight._m0[_1984].x) * _2019) * _1706) + ((((cbLight._m0[_1930].x * _1671) * _1962) * _1970) * _1720);
    float _2030 = (((_2013 * cbLight._m0[_1984].y) * _2019) * _1706) + ((((cbLight._m0[_1930].y * _1673) * _1962) * _1970) * _1720);
    float _2031 = (((_2013 * cbLight._m0[_1984].z) * _2019) * _1706) + ((((cbLight._m0[_1930].z * _1675) * _1962) * _1970) * _1720);
    float _2087;
    float _2089;
    float _2091;
    if (_1760)
    {
        _2087 = _2029;
        _2089 = _2030;
        _2091 = _2031;
    }
    else
    {
        uint _2093 = _1682 + 10u;
        uint _2099 = _1682 + 2u;
        float _2105 = cbLight._m0[_2099].x + _291;
        float _2106 = cbLight._m0[_2099].y + _292;
        float _2107 = cbLight._m0[_2099].z + _293;
        float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
        float _2115 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_2099].xyz));
        float _3865 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2118 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _2119 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2105 * _2111, _2106 * _2111, _2107 * _2111));
        float _3876 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2132 = (0.5 / ((_2118 + 9.9999999392252902907785028219223e-09) + _1950)) * _2118;
        float _3887 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.31831014156341552734375;
        float _2135 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2087 = (((_2128 * cbLight._m0[_2093].x) * _2134) * _2135) + _2029;
        _2089 = (((_2128 * cbLight._m0[_2093].y) * _2134) * _2135) + _2030;
        _2091 = (((_2128 * cbLight._m0[_2093].z) * _2134) * _2135) + _2031;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1869)
    {
        _2166 = _2087;
        _2168 = _2089;
        _2170 = _2091;
    }
    else
    {
        uint _2177 = _1682 + 11u;
        uint _2183 = _1682 + 3u;
        float _2189 = cbLight._m0[_2183].x + _291;
        float _2190 = cbLight._m0[_2183].y + _292;
        float _2191 = cbLight._m0[_2183].z + _293;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2199 = dot(vec3(_211, _212, _213), vec3(cbLight._m0[_2183].xyz));
        float _3903 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _2203 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2189 * _2195, _2190 * _2195, _2191 * _2195));
        float _3914 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2216 = (0.5 / ((_2202 + 9.9999999392252902907785028219223e-09) + _1950)) * _2202;
        float _3925 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.31831014156341552734375;
        float _2219 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
        _2166 = (((_2212 * cbLight._m0[_2177].x) * _2218) * _2219) + _2087;
        _2168 = (((_2212 * cbLight._m0[_2177].y) * _2218) * _2219) + _2089;
        _2170 = (((_2212 * cbLight._m0[_2177].z) * _2218) * _2219) + _2091;
    }
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    if (_1680.y == 0u)
    {
        uvec4 _2240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2241 = _2240.x;
        uint _2252 = uint((float(_2240.y) * floor(float(uint(cbSceneParam._m0[85u].y * _313) / _2241))) + floor(float(uint(cbSceneParam._m0[85u].x * _312) / _2241)));
        float _2262 = (log2(_1458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2263 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        uint _2266 = uint(isnan(14.0) ? _2263 : (isnan(_2263) ? 14.0 : min(_2263, 14.0)));
        uvec4 _2271 = texelFetch(g_lightClusterGridBuffer, int(((_2266 << 2u) + (_2252 << 6u)) >> 2u));
        uint _2272 = _2271.x;
        uint _2273 = _2240.z;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((((1u << ((_2273 >> 4u) & 15u)) + 4294967295u) & _2272) == 0u) || ((_2273 & 240u) == 0u))
        {
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
        }
        else
        {
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2545)
                {
                    frontier_phi_71_pred = _2534;
                    frontier_phi_71_pred_1 = _2533;
                    frontier_phi_71_pred_2 = _2532;
                    frontier_phi_71_pred_3 = _2531;
                    frontier_phi_71_pred_4 = _2530;
                    frontier_phi_71_pred_5 = _2529;
                }
                else
                {
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    uint _2680;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2544;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    for (;;)
                    {
                        uint _2684 = uint(findLSB(_2680)) + (_2535 << 5u);
                        uint _2681 = (_2680 + 4294967295u) & _2680;
                        uint _2686 = _2684 * 48u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2706 = (_2684 * 48u) + 4u;
                        vec4 _2719 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2725 = (_2684 * 48u) + 8u;
                        vec3 _2736 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x));
                        float _2740 = _2700.x - _1456;
                        float _2741 = _2700.y - _1457;
                        float _2742 = _2700.z - _1458;
                        float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                        float _2746 = inversesqrt(_2743);
                        float _2755 = 1.0 - (_2743 * _2700.w);
                        float _3951 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2756 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2757 = sqrt(_2743) * _2719.w;
                        float _2760 = 1.39999997615814208984375 / (_2757 + 1.39999997615814208984375);
                        float _2761 = _2760 * _2760;
                        float _2764 = ((1.0 - _2761) * dot(vec3(_333, _336, _339), vec3(_2746 * _2740, _2746 * _2741, _2746 * _2742))) + _2761;
                        float _2767 = _2757 * _2757;
                        float _2771 = ((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2756) / ((_2767 * 0.699999988079071044921875) + 1.0);
                        float _2775 = (-0.0) - _1456;
                        float _2776 = (-0.0) - _1457;
                        float _2777 = (-0.0) - _1458;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_333, _336, _339), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _3967 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _3978 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2789 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2793 = (0.5 / (((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) + 9.9999999392252902907785028219223e-09) + _2789)) * _2789;
                        float _3989 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2802 = (((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 3.1415927410125732421875) / ((_2767 * 2.1991131305694580078125) + 3.141590118408203125)) * _2756;
                        _2604 = (_2771 * _2719.x) + _2677;
                        _2605 = (_2771 * _2719.y) + _2678;
                        _2606 = (_2771 * _2719.z) + _2679;
                        _2601 = (_2802 * _2736.x) + _2674;
                        _2602 = (_2802 * _2736.y) + _2675;
                        _2603 = (_2802 * _2736.z) + _2676;
                        if (_2681 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2681;
                        }
                    }
                    frontier_phi_71_pred = _2606;
                    frontier_phi_71_pred_1 = _2605;
                    frontier_phi_71_pred_2 = _2604;
                    frontier_phi_71_pred_3 = _2603;
                    frontier_phi_71_pred_4 = _2602;
                    frontier_phi_71_pred_5 = _2601;
                }
                _2388 = frontier_phi_71_pred;
                _2386 = frontier_phi_71_pred_1;
                _2384 = frontier_phi_71_pred_2;
                _2382 = frontier_phi_71_pred_3;
                _2380 = frontier_phi_71_pred_4;
                _2378 = frontier_phi_71_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2378;
                    _2530 = _2380;
                    _2531 = _2382;
                    _2532 = _2384;
                    _2533 = _2386;
                    _2534 = _2388;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
        }
        uvec4 _2391 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2392 = _2391.z;
        uint _2394 = (_2392 >> 8u) & 15u;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        if (((4294967295u << _2394) & _2272) == 0u)
        {
            _2500 = _2377;
            _2502 = _2379;
            _2504 = _2381;
            _2506 = _2383;
            _2508 = _2385;
            _2510 = _2387;
        }
        else
        {
            float _2525 = inversesqrt(dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2394 < ((_2392 >> 12u) & 15u))
            {
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2657 = _2377;
                float _2658 = _2379;
                float _2659 = _2381;
                float _2660 = _2383;
                float _2661 = _2385;
                float _2662 = _2387;
                uint _2663 = _2394;
                uint _2672;
                bool _2673;
                for (;;)
                {
                    _2672 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2663 << 2u)) >> 2u)).x;
                    _2673 = _2672 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2673)
                    {
                        frontier_phi_82_pred = _2662;
                        frontier_phi_82_pred_1 = _2661;
                        frontier_phi_82_pred_2 = _2660;
                        frontier_phi_82_pred_3 = _2659;
                        frontier_phi_82_pred_4 = _2658;
                        frontier_phi_82_pred_5 = _2657;
                    }
                    else
                    {
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _2829 = _2657;
                        float _2830 = _2658;
                        float _2831 = _2659;
                        float _2832 = _2660;
                        float _2833 = _2661;
                        float _2834 = _2662;
                        uint _2835 = _2672;
                        uint _2836;
                        vec4 _2861;
                        float _2862;
                        vec4 _2877;
                        vec3 _2889;
                        vec4 _2905;
                        vec4 _2921;
                        float _2968;
                        bool _2969;
                        for (;;)
                        {
                            uint _2846 = ((_2663 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2835));
                            _2836 = (_2835 + 4294967295u) & _2835;
                            uint _2848 = _2846 * 40u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            _2862 = _2861.w;
                            uint _2864 = (_2846 * 40u) + 4u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2879 = (_2846 * 40u) + 8u;
                            _2889 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x));
                            uint _2892 = (_2846 * 40u) + 16u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2846 * 40u) + 20u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2846 * 40u) + 24u;
                            vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2943 = (_2846 * 40u) + 28u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            _2968 = fma(_1458, _2956.z, fma(_1457, _2956.y, _2956.x * _1456)) + _2956.w;
                            _2969 = !((fma(_1458, _2937.z, fma(_1457, _2937.y, _2937.x * _1456)) + _2937.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2969)
                            {
                                float _2996 = _2861.x - _1456;
                                float _2997 = _2861.y - _1457;
                                float _2998 = _2861.z - _1458;
                                float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                                float _3002 = inversesqrt(_2999);
                                float _3003 = _3002 * _2996;
                                float _3004 = _3002 * _2997;
                                float _3005 = _3002 * _2998;
                                float _3009 = 1.0 - (_2999 / (_2862 * _2862));
                                float _4000 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3014 = sqrt(_2999) * _2877.w;
                                float _3016 = 1.39999997615814208984375 / (_3014 + 1.39999997615814208984375);
                                float _3017 = _3016 * _3016;
                                float _3018 = 1.0 - _3017;
                                float _3020 = (_3018 * dot(vec3(_3003, _3004, _3005), vec3(_333, _336, _339))) + _3017;
                                float _3023 = _3014 * _3014;
                                float _3027 = (fma(_1458, _2905.z, fma(_1457, _2905.y, _2905.x * _1456)) + _2905.w) / _2968;
                                float _3028 = (fma(_1458, _2921.z, fma(_1457, _2921.y, _2921.x * _1456)) + _2921.w) / _2968;
                                float _3032 = 1.0 - dot(vec2(_3027, _3028), vec2(_3027, _3028));
                                float _4016 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3034 = _3033 * (((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3010) / ((_3023 * 0.699999988079071044921875) + 1.0));
                                float _3044 = dot(vec3(_333, _336, _339), vec3((-0.0) - (_1456 * _2525), (-0.0) - (_1457 * _2525), (-0.0) - (_1458 * _2525)));
                                float _4027 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3052 = (_3018 * dot(vec3(_333, _336, _339), vec3(_3003, _3004, _3005))) + _3017;
                                float _4038 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3057 = (0.5 / (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) + 9.9999999392252902907785028219223e-09) + _3053)) * _3053;
                                float _4049 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3064 = (_3033 * _3010) * (((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 3.1415927410125732421875) / ((_3023 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3034 * _2877.z;
                                frontier_phi_88_pred_1 = _3034 * _2877.y;
                                frontier_phi_88_pred_2 = _3034 * _2877.x;
                                frontier_phi_88_pred_3 = _3064 * _2889.z;
                                frontier_phi_88_pred_4 = _3064 * _2889.y;
                                frontier_phi_88_pred_5 = _3064 * _2889.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3073 = frontier_phi_88_pred;
                            _3072 = frontier_phi_88_pred_1;
                            _3071 = frontier_phi_88_pred_2;
                            _3070 = frontier_phi_88_pred_3;
                            _3069 = frontier_phi_88_pred_4;
                            _3068 = frontier_phi_88_pred_5;
                            _2819 = _3071 + _2832;
                            _2820 = _3072 + _2833;
                            _2821 = _3073 + _2834;
                            _2816 = _3068 + _2829;
                            _2817 = _3069 + _2830;
                            _2818 = _3070 + _2831;
                            if (_2836 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2836;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2821;
                        frontier_phi_82_pred_1 = _2820;
                        frontier_phi_82_pred_2 = _2819;
                        frontier_phi_82_pred_3 = _2818;
                        frontier_phi_82_pred_4 = _2817;
                        frontier_phi_82_pred_5 = _2816;
                    }
                    _2511 = frontier_phi_82_pred;
                    _2509 = frontier_phi_82_pred_1;
                    _2507 = frontier_phi_82_pred_2;
                    _2505 = frontier_phi_82_pred_3;
                    _2503 = frontier_phi_82_pred_4;
                    _2501 = frontier_phi_82_pred_5;
                    uint _2664 = _2663 + 1u;
                    if (_2664 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2657 = _2501;
                        _2658 = _2503;
                        _2659 = _2505;
                        _2660 = _2507;
                        _2661 = _2509;
                        _2662 = _2511;
                        _2663 = _2664;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2507;
                frontier_phi_63_64_ladder_1 = _2511;
                frontier_phi_63_64_ladder_2 = _2509;
                frontier_phi_63_64_ladder_3 = _2505;
                frontier_phi_63_64_ladder_4 = _2503;
                frontier_phi_63_64_ladder_5 = _2501;
            }
            else
            {
                frontier_phi_63_64_ladder = _2383;
                frontier_phi_63_64_ladder_1 = _2387;
                frontier_phi_63_64_ladder_2 = _2385;
                frontier_phi_63_64_ladder_3 = _2381;
                frontier_phi_63_64_ladder_4 = _2379;
                frontier_phi_63_64_ladder_5 = _2377;
            }
            _2500 = frontier_phi_63_64_ladder_5;
            _2502 = frontier_phi_63_64_ladder_4;
            _2504 = frontier_phi_63_64_ladder_3;
            _2506 = frontier_phi_63_64_ladder;
            _2508 = frontier_phi_63_64_ladder_2;
            _2510 = frontier_phi_63_64_ladder_1;
        }
        float _2515 = isnan(1.0) ? _378 : (isnan(_378) ? 1.0 : min(_378, 1.0));
        _2285 = (_2515 * _2506) + _1924;
        _2287 = (_2515 * _2508) + _1926;
        _2289 = (_2515 * _2510) + _1928;
        _2291 = ((_2500 * 0.039999999105930328369140625) * _2515) + _2166;
        _2293 = ((_2502 * 0.039999999105930328369140625) * _2515) + _2168;
        _2295 = ((_2504 * 0.039999999105930328369140625) * _2515) + _2170;
    }
    else
    {
        _2285 = _1924;
        _2287 = _1926;
        _2289 = _1928;
        _2291 = _2166;
        _2293 = _2168;
        _2295 = _2170;
    }
    uint _2301 = _354 + uint(cbMatDynParam._m0[0u].w);
    float _4065 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _4076 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _4087 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _2332 = (((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2285 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _378))) + ((_2291 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _1189)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[11u].x * _191) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2301].x);
    float _2334 = ((((cbMtdParam._m0[11u].x * _192) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2301].y) + ((_2293 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1189)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2287 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _378)));
    float _2336 = ((((cbMtdParam._m0[11u].x * _193) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2301].z) + ((_2295 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1189)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2289 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _378)));
    float _2337 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2338 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    uint _2340 = _352 + 6u;
    float _2348 = _312 / cbSceneParam._m0[86u].x;
    float _2349 = _313 / cbSceneParam._m0[86u].y;
    vec4 _2363 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, (log2((isnan(cbSceneParam._m0[77u].w) ? _233 : (isnan(_233) ? cbSceneParam._m0[77u].w : min(_233, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2365 = _2363.x;
    float _2366 = _2363.y;
    float _2367 = _2363.z;
    float _2368 = _2363.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_233 > cbSceneParam._m0[78u].w)
    {
        float _2402 = isnan(_233) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _233 : min(cbSceneParam._m0[80u].w, _233));
        float _2403 = _2402 / _233;
        float _2414 = _2403 * _284;
        float _2415 = _285 * _2403;
        float _2416 = (-0.0) - _2415;
        float _2418 = _2403 * _286;
        float _2420 = (cbSceneParam._m0[77u].w * _2416) / _2402;
        float _2421 = _2420 + cbSceneParam._m0[79u].w;
        float _2422 = cbSceneParam._m0[79u].w - _2415;
        float _2428 = sqrt(((_2414 * _2414) + (_2415 * _2415)) + (_2418 * _2418));
        float _2431 = (1.0 - (cbSceneParam._m0[77u].w / _2402)) * _2428;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2614;
        if (abs((_2416 - _2420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2614 = ((((_2421 > 0.0) ? exp2(_2436 * _2421) : (2.0 - exp2(_2438 * _2421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2431;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : max(_2421, _2422));
            float _2560 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : min(_2421, _2422));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2614 = ((abs(_2428 / _2416) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2438 * _2569) - exp2(_2438 * _2570)) * _2558))) + (_2431 * cbSceneParam._m0[80u].z);
        }
        vec4 _2616 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, 1.0), 0.0);
        float _2625 = exp2((_2614 * (-1.44269502162933349609375)) * (1.0 - _2616.w));
        float _2626 = log2(_2625);
        float _2642 = log2(_2368);
        _2440 = (exp2(_2642 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].x)) * _2616.x) / cbSceneParam._m0[78u].x)) + _2365;
        _2442 = (exp2(_2642 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].y)) * _2616.y) / cbSceneParam._m0[78u].y)) + _2366;
        _2444 = (exp2(_2642 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2626 * cbSceneParam._m0[78u].z)) * _2616.z) / cbSceneParam._m0[78u].z)) + _2367;
        _2446 = _2625 * _2368;
    }
    else
    {
        _2440 = _2365;
        _2442 = _2366;
        _2444 = _2367;
        _2446 = _2368;
    }
    bool _2652;
    vec4 _2456;
    vec4 _2479;
    float _2481;
    float _2485;
    float _2486;
    float _2487;
    float _2488;
    bool _2499;
    for (;;)
    {
        _2456 = cbMatDynParam._m0[0u];
        float _2458 = roundEven(_2456.y);
        bool _2459 = _2458 == 3.0;
        float _2461 = log2(_2446);
        float _2468 = exp2(_2461 * cbSceneParam._m0[78u].x) * _2337;
        float _2469 = exp2(_2461 * cbSceneParam._m0[78u].y) * _2338;
        float _2470 = exp2(_2461 * cbSceneParam._m0[78u].z) * _2339;
        float _2477 = _300 + (-0.5);
        _2479 = cbMtdParam._m0[1u];
        _2481 = _2479.y * _2477;
        float _2484 = (_2458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2485 = _2484 * (_2459 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2440)));
        _2486 = _2484 * (_2459 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2442)));
        _2487 = _2484 * (_2459 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2444)));
        _2488 = _2477 * 0.999000012874603271484375;
        _2499 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2499)
        {
            if ((cbInstanceData._m0[_352 + 7u].x + _2488) < 0.5)
            {
                _2652 = true;
                break;
            }
        }
        uint _2593 = _354 + uint(_2456.w);
        if ((cbInstanceData._m0[_2593].w < 1.0) && ((cbInstanceData._m0[_2593].w + _2488) < 0.5))
        {
            _2652 = true;
            break;
        }
        if ((_2481 + 1.0) < _2479.x)
        {
            _2652 = true;
            break;
        }
        _2652 = false;
        break;
    }
    float _2807;
    if (_2652)
    {
        discard_state = true;
        _2807 = 0.0;
    }
    else
    {
        _2807 = cbInstanceData._m0[_2340].w;
    }
    SV_Target.x = _2485;
    SV_Target.y = _2486;
    SV_Target.z = _2487;
    SV_Target.w = _2807;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2340].w;
    discard_exit();
}


