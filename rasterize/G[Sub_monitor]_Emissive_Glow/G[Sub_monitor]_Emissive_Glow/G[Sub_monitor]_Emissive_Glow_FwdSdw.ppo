#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _706;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    vec4 _184 = texture(sampler2D(G_Sub_monitor_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _187 = _184.x;
    float _188 = _184.y;
    float _189 = _184.z;
    float _190 = _187 * cbMtdParam._m0[9u].x;
    float _191 = _188 * cbMtdParam._m0[9u].y;
    float _192 = _189 * cbMtdParam._m0[9u].z;
    float _206 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _207 = _206 * _162;
    float _208 = _206 * _163;
    float _209 = _206 * _164;
    float _3124 = isnan(0.0) ? _190 : (isnan(_190) ? 0.0 : max(_190, 0.0));
    float _3135 = isnan(0.0) ? _191 : (isnan(_191) ? 0.0 : max(_191, 0.0));
    float _3146 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _229 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _280 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _270);
    float _281 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _270);
    float _282 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _270);
    float _286 = inversesqrt(dot(vec3(_280, _281, _282), vec3(_280, _281, _282)));
    float _287 = _280 * _286;
    float _288 = _281 * _286;
    float _289 = _282 * _286;
    float _295 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _296 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _317 = fma(_209, cbSceneParam._m0[5u].z, fma(_208, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _207));
    float _320 = fma(_209, cbSceneParam._m0[6u].z, fma(_208, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _207));
    float _323 = fma(_209, cbSceneParam._m0[7u].z, fma(_208, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _207));
    uint _336 = uint(roundEven(NORMAL.w)) * 13u;
    uint _338 = _336 + 9u;
    uint _339 = _338 + uint(cbMatDynParam._m0[0u].w);
    float _345 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0)))) * cbInstanceData._m0[_339].x;
    float _346 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0)))) * cbInstanceData._m0[_339].y;
    float _347 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * cbInstanceData._m0[_339].z;
    float _3157 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _348 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _3168 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _349 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _3179 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    vec4 _359 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _295, cbSceneParam._m0[86u].y * _296));
    float _362 = _359.x * TEXCOORD.z;
    float _363 = dot(vec3(_207, _208, _209), vec3(_287, _288, _289));
    float _366 = _363 * 2.0;
    float _371 = (_366 * _207) - _287;
    float _372 = (_366 * _208) - _288;
    float _373 = (_366 * _209) - _289;
    float _395 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _399 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _705;
    float _707;
    float _708;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _430 = fma(_403, cbModelParam._m0[26u].z, fma(_399, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _395));
        float _434 = fma(_403, cbModelParam._m0[27u].z, fma(_399, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _395));
        float _438 = fma(_403, cbModelParam._m0[28u].z, fma(_399, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _395));
        float _463 = _395 + _207;
        float _464 = _399 + _208;
        float _465 = _403 + _209;
        float _475 = fma(_465, cbModelParam._m0[26u].z, fma(_464, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _463)) - _430;
        float _476 = fma(_465, cbModelParam._m0[27u].z, fma(_464, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _463)) - _434;
        float _477 = fma(_465, cbModelParam._m0[28u].z, fma(_464, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _463)) - _438;
        float _481 = inversesqrt(dot(vec3(_475, _476, _477), vec3(_475, _476, _477)));
        float _494 = ((_481 * _475) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_430 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _495 = ((_481 * _476) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_434 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _496 = ((_481 * _477) / cbModelParam._m0[34u].z) + ((((((_438 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _499 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _506 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_494, _495, _496), 0.0);
        float _533 = exp2((_499.w + (-0.5)) * 20.0) * 2.0;
        float _534 = _533 * (_499.x + (-0.5));
        float _535 = _533 * (_499.y + (-0.5));
        float _536 = _533 * (_499.z + (-0.5));
        float _543 = exp2((_506.w + (-0.5)) * 20.0) * 2.0;
        float _544 = _543 * (_506.x + (-0.5));
        float _545 = _543 * (_506.y + (-0.5));
        float _546 = _543 * (_506.z + (-0.5));
        float _553 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_513.x + (-0.5));
        float _555 = _553 * (_513.y + (-0.5));
        float _556 = _553 * (_513.z + (-0.5));
        float _563 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_520.x + (-0.5));
        float _565 = _563 * (_520.y + (-0.5));
        float _566 = _563 * (_520.z + (-0.5));
        float _567 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
        float _568 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        float _569 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _570 = _534 * 0.5;
        float _571 = _544 * 0.5;
        float _572 = _554 * 0.5;
        float _573 = dot(vec3(_570, _571, _572), vec3(_570, _571, _572));
        float _578 = (_573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_573);
        float _587 = (dot(vec3(_207, _208, _209), vec3(_578 * _570, _578 * _571, _578 * _572)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _597 = sqrt(((_571 * _571) + (_570 * _570)) + (_572 * _572)) / (_567 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _598 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _599 = _598 * 2.0;
        float _603 = (1.0 - _598) / (_598 + 1.0);
        float _3227 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _604 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _613 = ((((1.0 - _604) * (_599 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_599 + 1.0))) + _604) * _567;
        float _614 = _535 * 0.5;
        float _615 = _545 * 0.5;
        float _616 = _555 * 0.5;
        float _617 = dot(vec3(_614, _615, _616), vec3(_614, _615, _616));
        float _622 = (_617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_617);
        float _630 = (dot(vec3(_207, _208, _209), vec3(_622 * _614, _622 * _615, _622 * _616)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _639 = sqrt(((_615 * _615) + (_614 * _614)) + (_616 * _616)) / (_568 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _641 = _640 * 2.0;
        float _645 = (1.0 - _640) / (_640 + 1.0);
        float _3260 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _655 = ((((1.0 - _646) * (_641 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_641 + 1.0))) + _646) * _568;
        float _656 = _536 * 0.5;
        float _657 = _546 * 0.5;
        float _658 = _556 * 0.5;
        float _659 = dot(vec3(_656, _657, _658), vec3(_656, _657, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _672 = (dot(vec3(_207, _208, _209), vec3(_664 * _656, _664 * _657, _664 * _658)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _681 = sqrt(((_657 * _657) + (_656 * _656)) + (_658 * _658)) / (_569 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _683 = _682 * 2.0;
        float _687 = (1.0 - _682) / (_682 + 1.0);
        float _3293 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _697 = ((((1.0 - _688) * (_683 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_683 + 1.0))) + _688) * _569;
        _705 = _536;
        _707 = _535;
        _708 = _534;
        _709 = _546;
        _710 = _545;
        _711 = _544;
        _712 = _556;
        _713 = _555;
        _714 = _554;
        _715 = _569;
        _716 = _568;
        _717 = _567;
        _718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0)));
        _719 = cbModelParam._m0[36u].z * (isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0)));
        _720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0)));
    }
    else
    {
        _705 = _706;
        _707 = _706;
        _708 = _706;
        _709 = _706;
        _710 = _706;
        _711 = _706;
        _712 = _706;
        _713 = _706;
        _714 = _706;
        _715 = _706;
        _716 = _706;
        _717 = _706;
        _718 = 0.0;
        _719 = 0.0;
        _720 = 0.0;
    }
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _746 = fma(_403, cbModelParam._m0[30u].z, fma(_399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _395));
        float _750 = fma(_403, cbModelParam._m0[31u].z, fma(_399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _395));
        float _754 = fma(_403, cbModelParam._m0[32u].z, fma(_399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _395));
        float _777 = _395 + _207;
        float _778 = _399 + _208;
        float _779 = _403 + _209;
        float _789 = fma(_779, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777)) - _746;
        float _790 = fma(_779, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777)) - _750;
        float _791 = fma(_779, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777)) - _754;
        float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
        float _808 = ((_795 * _789) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_746 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _809 = ((_795 * _790) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_750 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_795 * _791) / cbModelParam._m0[35u].z) + ((((((_754 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_808, _809, _810), 0.0);
        float _845 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_812.x + (-0.5));
        float _847 = _845 * (_812.y + (-0.5));
        float _848 = _845 * (_812.z + (-0.5));
        float _855 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_819.x + (-0.5));
        float _857 = _855 * (_819.y + (-0.5));
        float _858 = _855 * (_819.z + (-0.5));
        float _865 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_826.x + (-0.5));
        float _867 = _865 * (_826.y + (-0.5));
        float _868 = _865 * (_826.z + (-0.5));
        float _875 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_833.x + (-0.5));
        float _877 = _875 * (_833.y + (-0.5));
        float _878 = _875 * (_833.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_207, _208, _209), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3356 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_909 + 1.0))) + _914) * _879;
        float _924 = _847 * 0.5;
        float _925 = _857 * 0.5;
        float _926 = _867 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_207, _208, _209), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3389 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_951 + 1.0))) + _956) * _880;
        float _966 = _848 * 0.5;
        float _967 = _858 * 0.5;
        float _968 = _868 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_207, _208, _209), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3422 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_993 + 1.0))) + _998) * _881;
        _1015 = _848;
        _1016 = _847;
        _1017 = _846;
        _1018 = _858;
        _1019 = _857;
        _1020 = _856;
        _1021 = _868;
        _1022 = _867;
        _1023 = _866;
        _1024 = _881;
        _1025 = _880;
        _1026 = _879;
        _1027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
        _1028 = cbModelParam._m0[36u].w * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
    }
    else
    {
        _1015 = _706;
        _1016 = _706;
        _1017 = _706;
        _1018 = _706;
        _1019 = _706;
        _1020 = _706;
        _1021 = _706;
        _1022 = _706;
        _1023 = _706;
        _1024 = _706;
        _1025 = _706;
        _1026 = _706;
        _1027 = 0.0;
        _1028 = 0.0;
        _1029 = 0.0;
    }
    float _1039 = (cbModelParam._m0[1u].x * (_1027 - _718)) + _718;
    float _1040 = (cbModelParam._m0[1u].x * (_1028 - _719)) + _719;
    float _1041 = (cbModelParam._m0[1u].x * (_1029 - _720)) + _720;
    float _1062 = fma(_1041, cbSceneParam._m0[89u].z, fma(_1040, cbSceneParam._m0[89u].y, _1039 * cbSceneParam._m0[89u].x));
    float _1065 = fma(_1041, cbSceneParam._m0[90u].z, fma(_1040, cbSceneParam._m0[90u].y, _1039 * cbSceneParam._m0[90u].x));
    float _1068 = fma(_1041, cbSceneParam._m0[91u].z, fma(_1040, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1039));
    float _1083 = _371 * 0.5;
    float _1084 = _372 * 0.5;
    float _1085 = _373 * 0.5;
    float _1086 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1017, _1020, _1023, _1026));
    float _1089 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1016, _1019, _1022, _1025));
    float _1092 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1126;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1099 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_705, _709, _712, _715));
        float _1103 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_707, _710, _713, _716));
        float _1107 = dot(vec4(_1083, _1084, _1085, 1.0), vec4(_708, _711, _714, _717));
        float _1114 = dot(vec4(cbModelParam._m0[39u]), vec4(_1083, _1084, _1085, 1.0));
        _1126 = dot(vec3(isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1114) ? 0.0 : (isnan(0.0) ? _1114 : max(0.0, _1114))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1126 = 1.0;
    }
    float _1137;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1128 = dot(vec4(cbModelParam._m0[40u]), vec4(_1083, _1084, _1085, 1.0));
        _1137 = dot(vec3(isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)), isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)), isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1128) ? 0.0 : (isnan(0.0) ? _1128 : max(0.0, _1128))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1137 = 1.0;
    }
    float _1141 = (_1137 * cbModelParam._m0[1u].x) + (_1126 * (1.0 - cbModelParam._m0[1u].x));
    float _1150 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1232;
    float _1234;
    float _1236;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1199 = fma(_403, cbModelParam._m0[13u].z, fma(_399, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _395)) + cbModelParam._m0[13u].w;
        float _1203 = fma(_403, cbModelParam._m0[14u].z, fma(_399, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _395)) + cbModelParam._m0[14u].w;
        float _1207 = fma(_403, cbModelParam._m0[15u].z, fma(_399, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _395)) + cbModelParam._m0[15u].w;
        float _1210 = fma(_373, cbModelParam._m0[13u].z, fma(_372, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _371));
        float _1213 = fma(_373, cbModelParam._m0[14u].z, fma(_372, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _371));
        float _1216 = fma(_373, cbModelParam._m0[15u].z, fma(_372, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _371));
        float _1242;
        if (_1210 > 0.0)
        {
            _1242 = abs((1.0 - _1199) / _1210);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1210 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1199 + 1.0) / _1210);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1242 = frontier_phi_14_12_ladder;
        }
        float _1416;
        if (_1213 > 0.0)
        {
            _1416 = abs((1.0 - _1203) / _1213);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1213 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1203 + 1.0) / _1213);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1416 = frontier_phi_23_19_ladder;
        }
        float _1713;
        if (_1216 > 0.0)
        {
            _1713 = abs((1.0 - _1207) / _1216);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1216 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1207 + 1.0) / _1216);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1713 = frontier_phi_35_30_ladder;
        }
        float _1715 = isnan(_1416) ? _1242 : (isnan(_1242) ? _1416 : min(_1242, _1416));
        float _1716 = isnan(_1713) ? _1715 : (isnan(_1715) ? _1713 : min(_1715, _1713));
        float _1720 = (_1716 * _1210) + _1199;
        float _1721 = (_1716 * _1213) + _1203;
        float _1722 = (_1716 * _1216) + _1207;
        float _1723 = _1716 * 9.9999997473787516355514526367188e-05;
        float _1725 = (-1.0) - _1723;
        float _1727 = _1723 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1722 > _1727) || ((_1722 < _1725) || ((_1721 > _1727) || ((_1721 < _1725) || ((_1720 < _1725) || (_1720 > _1727))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1722, cbModelParam._m0[9u].z, fma(_1721, cbModelParam._m0[9u].y, _1720 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1722, cbModelParam._m0[10u].z, fma(_1721, cbModelParam._m0[10u].y, _1720 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1722, cbModelParam._m0[11u].z, fma(_1721, cbModelParam._m0[11u].y, _1720 * cbModelParam._m0[11u].x))), _1150);
            frontier_phi_13_35_ladder = _1867.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1867.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1867.x * cbModelParam._m0[1u].y;
        }
        _1232 = frontier_phi_13_35_ladder_2;
        _1234 = frontier_phi_13_35_ladder_1;
        _1236 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1220 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_371, _372, _373), _1150);
        _1232 = _1220.x * cbModelParam._m0[1u].y;
        _1234 = _1220.y * cbModelParam._m0[1u].y;
        _1236 = _1220.z * cbModelParam._m0[1u].y;
    }
    float _1239 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1296 = fma(_403, cbModelParam._m0[21u].z, fma(_399, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _395)) + cbModelParam._m0[21u].w;
        float _1300 = fma(_403, cbModelParam._m0[22u].z, fma(_399, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _395)) + cbModelParam._m0[22u].w;
        float _1304 = fma(_403, cbModelParam._m0[23u].z, fma(_399, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _395)) + cbModelParam._m0[23u].w;
        float _1307 = fma(_373, cbModelParam._m0[21u].z, fma(_372, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _371));
        float _1310 = fma(_373, cbModelParam._m0[22u].z, fma(_372, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _371));
        float _1313 = fma(_373, cbModelParam._m0[23u].z, fma(_372, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _371));
        float _1421;
        if (_1307 > 0.0)
        {
            _1421 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1421 = frontier_phi_25_21_ladder;
        }
        float _1740;
        if (_1310 > 0.0)
        {
            _1740 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1740 = frontier_phi_37_32_ladder;
        }
        float _2013;
        if (_1313 > 0.0)
        {
            _2013 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2013 = frontier_phi_47_44_ladder;
        }
        float _2015 = isnan(_1740) ? _1421 : (isnan(_1421) ? _1740 : min(_1421, _1740));
        float _2016 = isnan(_2013) ? _2015 : (isnan(_2015) ? _2013 : min(_2015, _2013));
        float _2020 = (_2016 * _1307) + _1296;
        float _2021 = (_2016 * _1310) + _1300;
        float _2022 = (_2016 * _1313) + _1304;
        float _2023 = _2016 * 9.9999997473787516355514526367188e-05;
        float _2024 = (-1.0) - _2023;
        float _2026 = _2023 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2022 > _2026) || ((_2022 < _2024) || ((_2021 > _2026) || ((_2021 < _2024) || ((_2020 < _2024) || (_2020 > _2026))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2022, cbModelParam._m0[17u].z, fma(_2021, cbModelParam._m0[17u].y, _2020 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2022, cbModelParam._m0[18u].z, fma(_2021, cbModelParam._m0[18u].y, _2020 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2022, cbModelParam._m0[19u].z, fma(_2021, cbModelParam._m0[19u].y, _2020 * cbModelParam._m0[19u].x))), _1239);
            frontier_phi_22_47_ladder = _2113.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2113.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2113.x * cbModelParam._m0[1u].z;
        }
        _1332 = frontier_phi_22_47_ladder_2;
        _1334 = frontier_phi_22_47_ladder_1;
        _1336 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_371, _372, _373), _1239);
        _1332 = _1316.x * cbModelParam._m0[1u].z;
        _1334 = _1316.y * cbModelParam._m0[1u].z;
        _1336 = _1316.z * cbModelParam._m0[1u].z;
    }
    float _1348 = _362 * 0.01200000010430812835693359375;
    float _1350 = _1348 * ((cbModelParam._m0[1u].w * (_1332 - _1232)) + _1232);
    float _1351 = _1348 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1352 = _1348 * ((cbModelParam._m0[1u].w * (_1336 - _1236)) + _1236);
    float _1355 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, _1350 * cbSceneParam._m0[91u].x));
    float _1395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1399 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1408 = _1395 / _1407;
    float _1409 = _1399 / _1407;
    float _1410 = _1403 / _1407;
    float _1557;
    float _1558;
    float _1559;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1437 = ((uint(_1410 > cbSceneParam._m0[59u].y) + uint(_1410 > cbSceneParam._m0[59u].x)) + uint(_1410 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1438 = _1437 + 43u;
        uint _1446 = _1437 + 44u;
        uint _1454 = _1437 + 45u;
        uint _1462 = _1437 + 46u;
        float _1473 = fma(_1407, cbSceneParam._m0[_1438].w, fma(_1403, cbSceneParam._m0[_1438].z, fma(_1399, cbSceneParam._m0[_1438].y, _1395 * cbSceneParam._m0[_1438].x)));
        float _1477 = fma(_1407, cbSceneParam._m0[_1446].w, fma(_1403, cbSceneParam._m0[_1446].z, fma(_1399, cbSceneParam._m0[_1446].y, _1395 * cbSceneParam._m0[_1446].x)));
        float _1485 = fma(_1407, cbSceneParam._m0[_1462].w, fma(_1403, cbSceneParam._m0[_1462].z, fma(_1399, cbSceneParam._m0[_1462].y, _1395 * cbSceneParam._m0[_1462].x)));
        float _1490 = cbSceneParam._m0[33u].z * _1485;
        float _1492 = cbSceneParam._m0[33u].w * _1485;
        float _1495 = fma(_1407, cbSceneParam._m0[_1454].w, fma(_1403, cbSceneParam._m0[_1454].z, fma(_1399, cbSceneParam._m0[_1454].y, _1395 * cbSceneParam._m0[_1454].x))) / _1485;
        float _1543 = (cbSceneParam._m0[33u].x - sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410))) * cbSceneParam._m0[33u].y;
        float _3548 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1550 = (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1490 + _1473) / _1485, (_1492 + _1477) / _1485), _1495), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1492 + _1473) / _1485, (_1477 - _1490) / _1485), _1495), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1473 - _1490) / _1485, (_1477 - _1492) / _1485), _1495), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1473 - _1492) / _1485, (_1490 + _1477) / _1485), _1495), 0.0)).x), vec4(0.25)));
        _1557 = 1.0 - (_1550 * cbSceneParam._m0[34u].x);
        _1558 = 1.0 - (_1550 * cbSceneParam._m0[34u].y);
        _1559 = 1.0 - (_1550 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1557 = 1.0;
        _1558 = 1.0;
        _1559 = 1.0;
    }
    float _1623;
    float _1625;
    float _1627;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1611 = fma(_1407, cbSceneParam._m0[63u].w, fma(_1403, cbSceneParam._m0[63u].z, fma(_1399, cbSceneParam._m0[63u].y, _1395 * cbSceneParam._m0[63u].x)));
        float _1612 = fma(_1407, cbSceneParam._m0[60u].w, fma(_1403, cbSceneParam._m0[60u].z, fma(_1399, cbSceneParam._m0[60u].y, _1395 * cbSceneParam._m0[60u].x))) / _1611;
        float _1613 = fma(_1407, cbSceneParam._m0[61u].w, fma(_1403, cbSceneParam._m0[61u].z, fma(_1399, cbSceneParam._m0[61u].y, _1395 * cbSceneParam._m0[61u].x))) / _1611;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1612 >= cbSceneParam._m0[64u].x) && (_1613 >= cbSceneParam._m0[64u].y)) && (_1612 <= cbSceneParam._m0[64u].z)) && (_1613 <= cbSceneParam._m0[64u].w))
        {
            float _1753 = fma(_1407, cbSceneParam._m0[62u].w, fma(_1403, cbSceneParam._m0[62u].z, fma(_1399, cbSceneParam._m0[62u].y, _1395 * cbSceneParam._m0[62u].x))) / _1611;
            float _1757 = isnan(cbSceneParam._m0[41u].w) ? _1753 : (isnan(_1753) ? cbSceneParam._m0[41u].w : max(_1753, cbSceneParam._m0[41u].w));
            float _1800 = (cbSceneParam._m0[33u].x - sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410))) * cbSceneParam._m0[33u].y;
            float _3564 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
            float _1807 = (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1612, cbSceneParam._m0[33u].w + _1613), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1612, _1613 - cbSceneParam._m0[33u].z), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1612 - cbSceneParam._m0[33u].z, _1613 - cbSceneParam._m0[33u].w), _1757), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1612 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1613), _1757), 0.0)).x), vec4(0.25)));
            float _1811 = 1.0 - (_1807 * cbSceneParam._m0[34u].x);
            float _1812 = 1.0 - (_1807 * cbSceneParam._m0[34u].y);
            float _1813 = 1.0 - (_1807 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1813) ? _1559 : (isnan(_1559) ? _1813 : min(_1559, _1813));
            frontier_phi_34_33_ladder_1 = isnan(_1812) ? _1558 : (isnan(_1558) ? _1812 : min(_1558, _1812));
            frontier_phi_34_33_ladder_2 = isnan(_1811) ? _1557 : (isnan(_1557) ? _1811 : min(_1557, _1811));
        }
        else
        {
            frontier_phi_34_33_ladder = _1559;
            frontier_phi_34_33_ladder_1 = _1558;
            frontier_phi_34_33_ladder_2 = _1557;
        }
        _1623 = frontier_phi_34_33_ladder_2;
        _1625 = frontier_phi_34_33_ladder_1;
        _1627 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1623 = _1557;
        _1625 = _1558;
        _1627 = _1559;
    }
    uvec4 _1632 = floatBitsToUint(cbInstanceData._m0[_336 + 5u]);
    uint _1634 = _1632.x * 14u;
    uint _1635 = _1634 + 13u;
    float _1642 = _362 + (-1.0);
    float _1648 = (cbLight._m0[_1635].x * _1642) + 1.0;
    float _1649 = (cbLight._m0[_1635].y * _1642) + 1.0;
    float _1650 = (cbLight._m0[_1635].z * _1642) + 1.0;
    float _1651 = (cbLight._m0[_1635].w * _1642) + 1.0;
    uint _1652 = _1634 + 5u;
    float _1658 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1662 = _1634 + 4u;
    float _1672 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
    uint _1676 = _1634 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_207, _208, _209));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_207, _208, _209));
    float _3600 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3611 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1652].x * _1658) * _1697) + (((cbLight._m0[_1662].x * _1623) * _1672) * _1695);
    float _1705 = ((_1658 * cbLight._m0[_1652].y) * _1697) + (((cbLight._m0[_1662].y * _1625) * _1672) * _1695);
    float _1706 = ((_1658 * cbLight._m0[_1652].z) * _1697) + (((cbLight._m0[_1662].z * _1627) * _1672) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1634 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1712)
    {
        _1814 = _1704;
        _1816 = _1705;
        _1818 = _1706;
    }
    else
    {
        uint _1822 = _1634 + 6u;
        float _1838 = (dot(vec3(cbLight._m0[_1634 + 2u].xyz), vec3(_207, _208, _209)) * 0.5) + 0.5;
        float _1839 = _1838 * _1838;
        float _3622 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1841 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _1814 = (((cbLight._m0[_1822].x * 0.3183098733425140380859375) * _1840) * _1841) + _1704;
        _1816 = (((cbLight._m0[_1822].y * 0.3183098733425140380859375) * _1840) * _1841) + _1705;
        _1818 = (((cbLight._m0[_1822].z * 0.3183098733425140380859375) * _1840) * _1841) + _1706;
    }
    bool _1821 = _1710.y == 0u;
    float _1876;
    float _1878;
    float _1880;
    if (_1821)
    {
        _1876 = _1814;
        _1878 = _1816;
        _1880 = _1818;
    }
    else
    {
        uint _1984 = _1634 + 7u;
        float _2000 = (dot(vec3(cbLight._m0[_1634 + 3u].xyz), vec3(_207, _208, _209)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _3638 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _2003 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1876 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1814;
        _1878 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1816;
        _1880 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1818;
    }
    uint _1882 = _1634 + 8u;
    float _1888 = cbLight._m0[_1634].x + _287;
    float _1889 = cbLight._m0[_1634].y + _288;
    float _1890 = cbLight._m0[_1634].z + _289;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1898 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1634].xyz));
    float _3654 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _1902 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_1888 * _1894, _1889 * _1894, _1890 * _1894));
    float _3676 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1920 = (0.5 / ((_1901 + 9.9999999392252902907785028219223e-09) + _1902)) * _1901;
    float _3687 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.31831014156341552734375;
    uint _1936 = _1634 + 9u;
    float _1942 = cbLight._m0[_1676].x + _287;
    float _1943 = cbLight._m0[_1676].y + _288;
    float _1944 = cbLight._m0[_1676].z + _289;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1952 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_1676].xyz));
    float _3698 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1942 * _1948, _1943 * _1948, _1944 * _1948));
    float _3709 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1969 = (0.5 / ((_1955 + 9.9999999392252902907785028219223e-09) + _1902)) * _1955;
    float _3720 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.31831014156341552734375;
    float _1981 = (((_1965 * cbLight._m0[_1936].x) * _1971) * _1658) + ((((cbLight._m0[_1882].x * _1623) * _1914) * _1922) * _1672);
    float _1982 = (((_1965 * cbLight._m0[_1936].y) * _1971) * _1658) + ((((cbLight._m0[_1882].y * _1625) * _1914) * _1922) * _1672);
    float _1983 = (((_1965 * cbLight._m0[_1936].z) * _1971) * _1658) + ((((cbLight._m0[_1882].z * _1627) * _1914) * _1922) * _1672);
    float _2039;
    float _2041;
    float _2043;
    if (_1712)
    {
        _2039 = _1981;
        _2041 = _1982;
        _2043 = _1983;
    }
    else
    {
        uint _2045 = _1634 + 10u;
        uint _2051 = _1634 + 2u;
        float _2057 = cbLight._m0[_2051].x + _287;
        float _2058 = cbLight._m0[_2051].y + _288;
        float _2059 = cbLight._m0[_2051].z + _289;
        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
        float _2067 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_2051].xyz));
        float _3731 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _2071 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2057 * _2063, _2058 * _2063, _2059 * _2063));
        float _3742 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2084 = (0.5 / ((_2070 + 9.9999999392252902907785028219223e-09) + _1902)) * _2070;
        float _3753 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2086 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.31831014156341552734375;
        float _2087 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
        _2039 = (((_2080 * cbLight._m0[_2045].x) * _2086) * _2087) + _1981;
        _2041 = (((_2080 * cbLight._m0[_2045].y) * _2086) * _2087) + _1982;
        _2043 = (((_2080 * cbLight._m0[_2045].z) * _2086) * _2087) + _1983;
    }
    float _2118;
    float _2120;
    float _2122;
    if (_1821)
    {
        _2118 = _2039;
        _2120 = _2041;
        _2122 = _2043;
    }
    else
    {
        uint _2129 = _1634 + 11u;
        uint _2135 = _1634 + 3u;
        float _2141 = cbLight._m0[_2135].x + _287;
        float _2142 = cbLight._m0[_2135].y + _288;
        float _2143 = cbLight._m0[_2135].z + _289;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2151 = dot(vec3(_207, _208, _209), vec3(cbLight._m0[_2135].xyz));
        float _3769 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _2155 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2141 * _2147, _2142 * _2147, _2143 * _2147));
        float _3780 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = (0.5 / ((_2154 + 9.9999999392252902907785028219223e-09) + _1902)) * _2154;
        float _3791 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.31831014156341552734375;
        float _2171 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _2118 = (((_2164 * cbLight._m0[_2129].x) * _2170) * _2171) + _2039;
        _2120 = (((_2164 * cbLight._m0[_2129].y) * _2170) * _2171) + _2041;
        _2122 = (((_2164 * cbLight._m0[_2129].z) * _2170) * _2171) + _2043;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1632.y == 0u)
    {
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _296) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _295) / _2193)));
        float _2214 = (log2(_1410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
        }
        else
        {
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2488)
                {
                    frontier_phi_66_pred = _2477;
                    frontier_phi_66_pred_1 = _2476;
                    frontier_phi_66_pred_2 = _2475;
                    frontier_phi_66_pred_3 = _2474;
                    frontier_phi_66_pred_4 = _2473;
                    frontier_phi_66_pred_5 = _2472;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _1408;
                        float _2663 = _2622.y - _1409;
                        float _2664 = _2622.z - _1410;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3817 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * dot(vec3(_317, _320, _323), vec3(_2668 * _2662, _2668 * _2663, _2668 * _2664))) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _1408;
                        float _2698 = (-0.0) - _1409;
                        float _2699 = (-0.0) - _1410;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2707 = dot(vec3(_317, _320, _323), vec3(_2703 * _2697, _2703 * _2698, _2703 * _2699));
                        float _3833 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _3844 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2711 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2715 = (0.5 / (((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) + 9.9999999392252902907785028219223e-09) + _2711)) * _2711;
                        float _3855 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2724 = (((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 3.1415927410125732421875) / ((_2689 * 2.1991131305694580078125) + 3.141590118408203125)) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2724 * _2658.x) + _2596;
                        _2529 = (_2724 * _2658.y) + _2597;
                        _2530 = (_2724 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_66_pred = _2533;
                    frontier_phi_66_pred_1 = _2532;
                    frontier_phi_66_pred_2 = _2531;
                    frontier_phi_66_pred_3 = _2530;
                    frontier_phi_66_pred_4 = _2529;
                    frontier_phi_66_pred_5 = _2528;
                }
                _2340 = frontier_phi_66_pred;
                _2338 = frontier_phi_66_pred_1;
                _2336 = frontier_phi_66_pred_2;
                _2334 = frontier_phi_66_pred_3;
                _2332 = frontier_phi_66_pred_4;
                _2330 = frontier_phi_66_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2330;
                    _2473 = _2332;
                    _2474 = _2334;
                    _2475 = _2336;
                    _2476 = _2338;
                    _2477 = _2340;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
        }
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.z;
        uint _2346 = (_2344 >> 8u) & 15u;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        if (((4294967295u << _2346) & _2224) == 0u)
        {
            _2443 = _2329;
            _2445 = _2331;
            _2447 = _2333;
            _2449 = _2335;
            _2451 = _2337;
            _2453 = _2339;
        }
        else
        {
            float _2468 = inversesqrt(dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2346 < ((_2344 >> 12u) & 15u))
            {
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2579 = _2329;
                float _2580 = _2331;
                float _2581 = _2333;
                float _2582 = _2335;
                float _2583 = _2337;
                float _2584 = _2339;
                uint _2585 = _2346;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2595)
                    {
                        frontier_phi_72_pred = _2584;
                        frontier_phi_72_pred_1 = _2583;
                        frontier_phi_72_pred_2 = _2582;
                        frontier_phi_72_pred_3 = _2581;
                        frontier_phi_72_pred_4 = _2580;
                        frontier_phi_72_pred_5 = _2579;
                    }
                    else
                    {
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2732;
                        float _2733;
                        float _2734;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2742 = _2579;
                        float _2743 = _2580;
                        float _2744 = _2581;
                        float _2745 = _2582;
                        float _2746 = _2583;
                        float _2747 = _2584;
                        uint _2748 = _2594;
                        uint _2749;
                        vec4 _2774;
                        float _2775;
                        vec4 _2790;
                        vec3 _2802;
                        vec4 _2818;
                        vec4 _2834;
                        float _2881;
                        bool _2882;
                        for (;;)
                        {
                            uint _2759 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2748));
                            _2749 = (_2748 + 4294967295u) & _2748;
                            uint _2761 = _2759 * 40u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            _2775 = _2774.w;
                            uint _2777 = (_2759 * 40u) + 4u;
                            _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            uint _2792 = (_2759 * 40u) + 8u;
                            _2802 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x));
                            uint _2805 = (_2759 * 40u) + 16u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2821 = (_2759 * 40u) + 20u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            uint _2837 = (_2759 * 40u) + 24u;
                            vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2856 = (_2759 * 40u) + 28u;
                            vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2881 = fma(_1410, _2869.z, fma(_1409, _2869.y, _2869.x * _1408)) + _2869.w;
                            _2882 = !((fma(_1410, _2850.z, fma(_1409, _2850.y, _2850.x * _1408)) + _2850.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2882)
                            {
                                float _2909 = _2774.x - _1408;
                                float _2910 = _2774.y - _1409;
                                float _2911 = _2774.z - _1410;
                                float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                                float _2915 = inversesqrt(_2912);
                                float _2916 = _2915 * _2909;
                                float _2917 = _2915 * _2910;
                                float _2918 = _2915 * _2911;
                                float _2922 = 1.0 - (_2912 / (_2775 * _2775));
                                float _3866 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                                float _2923 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                                float _2927 = sqrt(_2912) * _2790.w;
                                float _2929 = 1.39999997615814208984375 / (_2927 + 1.39999997615814208984375);
                                float _2930 = _2929 * _2929;
                                float _2931 = 1.0 - _2930;
                                float _2933 = (_2931 * dot(vec3(_2916, _2917, _2918), vec3(_317, _320, _323))) + _2930;
                                float _2936 = _2927 * _2927;
                                float _2940 = (fma(_1410, _2818.z, fma(_1409, _2818.y, _2818.x * _1408)) + _2818.w) / _2881;
                                float _2941 = (fma(_1410, _2834.z, fma(_1409, _2834.y, _2834.x * _1408)) + _2834.w) / _2881;
                                float _2945 = 1.0 - dot(vec2(_2940, _2941), vec2(_2940, _2941));
                                float _3882 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2946 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                                float _2947 = _2946 * (((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2923) / ((_2936 * 0.699999988079071044921875) + 1.0));
                                float _2957 = dot(vec3(_317, _320, _323), vec3((-0.0) - (_1408 * _2468), (-0.0) - (_1409 * _2468), (-0.0) - (_1410 * _2468)));
                                float _3893 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2965 = (_2931 * dot(vec3(_317, _320, _323), vec3(_2916, _2917, _2918))) + _2930;
                                float _3904 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2970 = (0.5 / (((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) + 9.9999999392252902907785028219223e-09) + _2966)) * _2966;
                                float _3915 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2977 = (_2946 * _2923) * (((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 3.1415927410125732421875) / ((_2936 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2947 * _2790.y;
                                frontier_phi_78_pred_1 = _2947 * _2790.x;
                                frontier_phi_78_pred_2 = _2977 * _2802.z;
                                frontier_phi_78_pred_3 = _2977 * _2802.y;
                                frontier_phi_78_pred_4 = _2977 * _2802.x;
                                frontier_phi_78_pred_5 = _2947 * _2790.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2985 = frontier_phi_78_pred;
                            _2984 = frontier_phi_78_pred_1;
                            _2983 = frontier_phi_78_pred_2;
                            _2982 = frontier_phi_78_pred_3;
                            _2981 = frontier_phi_78_pred_4;
                            _2986 = frontier_phi_78_pred_5;
                            _2732 = _2984 + _2745;
                            _2733 = _2985 + _2746;
                            _2734 = _2986 + _2747;
                            _2729 = _2981 + _2742;
                            _2730 = _2982 + _2743;
                            _2731 = _2983 + _2744;
                            if (_2749 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2742 = _2729;
                                _2743 = _2730;
                                _2744 = _2731;
                                _2745 = _2732;
                                _2746 = _2733;
                                _2747 = _2734;
                                _2748 = _2749;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2734;
                        frontier_phi_72_pred_1 = _2733;
                        frontier_phi_72_pred_2 = _2732;
                        frontier_phi_72_pred_3 = _2731;
                        frontier_phi_72_pred_4 = _2730;
                        frontier_phi_72_pred_5 = _2729;
                    }
                    _2454 = frontier_phi_72_pred;
                    _2452 = frontier_phi_72_pred_1;
                    _2450 = frontier_phi_72_pred_2;
                    _2448 = frontier_phi_72_pred_3;
                    _2446 = frontier_phi_72_pred_4;
                    _2444 = frontier_phi_72_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2444;
                        _2580 = _2446;
                        _2581 = _2448;
                        _2582 = _2450;
                        _2583 = _2452;
                        _2584 = _2454;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2454;
                frontier_phi_60_61_ladder_1 = _2452;
                frontier_phi_60_61_ladder_2 = _2448;
                frontier_phi_60_61_ladder_3 = _2446;
                frontier_phi_60_61_ladder_4 = _2444;
                frontier_phi_60_61_ladder_5 = _2450;
            }
            else
            {
                frontier_phi_60_61_ladder = _2339;
                frontier_phi_60_61_ladder_1 = _2337;
                frontier_phi_60_61_ladder_2 = _2333;
                frontier_phi_60_61_ladder_3 = _2331;
                frontier_phi_60_61_ladder_4 = _2329;
                frontier_phi_60_61_ladder_5 = _2335;
            }
            _2443 = frontier_phi_60_61_ladder_4;
            _2445 = frontier_phi_60_61_ladder_3;
            _2447 = frontier_phi_60_61_ladder_2;
            _2449 = frontier_phi_60_61_ladder_5;
            _2451 = frontier_phi_60_61_ladder_1;
            _2453 = frontier_phi_60_61_ladder;
        }
        float _2458 = isnan(1.0) ? _362 : (isnan(_362) ? 1.0 : min(_362, 1.0));
        _2237 = (_2458 * _2449) + _1876;
        _2239 = (_2458 * _2451) + _1878;
        _2241 = (_2458 * _2453) + _1880;
        _2243 = ((_2443 * 0.039999999105930328369140625) * _2458) + _2118;
        _2245 = ((_2445 * 0.039999999105930328369140625) * _2458) + _2120;
        _2247 = ((_2447 * 0.039999999105930328369140625) * _2458) + _2122;
    }
    else
    {
        _2237 = _1876;
        _2239 = _1878;
        _2241 = _1880;
        _2243 = _2118;
        _2245 = _2120;
        _2247 = _2122;
    }
    uint _2253 = _338 + uint(cbMatDynParam._m0[0u].w);
    float _3931 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3942 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3953 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _2284 = (((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_2237 + ((isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))) * _362))) + ((_2243 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _1141)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[11u].x * _187) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2253].x);
    float _2286 = ((((cbMtdParam._m0[11u].x * _188) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2253].y) + ((_2245 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _1141)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2239 + ((isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0))) * _362)));
    float _2288 = ((((cbMtdParam._m0[11u].x * _189) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2253].z) + ((_2247 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _1141)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_2241 + ((isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0))) * _362)));
    uint _2292 = _336 + 6u;
    float _2300 = _295 / cbSceneParam._m0[86u].x;
    float _2301 = _296 / cbSceneParam._m0[86u].y;
    vec4 _2315 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, (log2((isnan(cbSceneParam._m0[77u].w) ? _229 : (isnan(_229) ? cbSceneParam._m0[77u].w : min(_229, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2317 = _2315.x;
    float _2318 = _2315.y;
    float _2319 = _2315.z;
    float _2320 = _2315.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_229 > cbSceneParam._m0[78u].w)
    {
        float _2354 = isnan(_229) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _229 : min(cbSceneParam._m0[80u].w, _229));
        float _2355 = _2354 / _229;
        float _2366 = _2355 * _280;
        float _2367 = _281 * _2355;
        float _2368 = (-0.0) - _2367;
        float _2370 = _2355 * _282;
        float _2372 = (cbSceneParam._m0[77u].w * _2368) / _2354;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2367;
        float _2380 = sqrt(((_2366 * _2366) + (_2367 * _2367)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2354)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2368 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2503 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2380 / _2368) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2390 * _2512) - exp2(_2390 * _2513)) * _2501))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2320);
        _2392 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2317;
        _2394 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2318;
        _2396 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2319;
        _2398 = _2552 * _2320;
    }
    else
    {
        _2392 = _2317;
        _2394 = _2318;
        _2396 = _2319;
        _2398 = _2320;
    }
    float _2410 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2411 = _2410 == 3.0;
    float _2413 = log2(_2398);
    float _2420 = exp2(_2413 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0)));
    float _2421 = exp2(_2413 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)));
    float _2422 = exp2(_2413 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2431 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2431 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.y = _2431 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.z = _2431 * (_2411 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.w = cbInstanceData._m0[_2292].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2292].w;
}


