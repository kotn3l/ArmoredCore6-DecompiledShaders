#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _738;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _239 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _240 = _239 * _165;
    float _241 = _239 * _166;
    float _242 = _239 * _167;
    float _2889 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2900 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2911 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _262 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _303 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _313 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _303);
    float _314 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _303);
    float _315 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _303);
    float _319 = inversesqrt(dot(vec3(_313, _314, _315), vec3(_313, _314, _315)));
    float _320 = _313 * _319;
    float _321 = _314 * _319;
    float _322 = _315 * _319;
    float _328 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _329 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _350 = fma(_242, cbSceneParam._m0[5u].z, fma(_241, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _240));
    float _353 = fma(_242, cbSceneParam._m0[6u].z, fma(_241, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _240));
    float _356 = fma(_242, cbSceneParam._m0[7u].z, fma(_241, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _240));
    uint _369 = uint(roundEven(NORMAL.w)) * 13u;
    uint _370 = _369 + 9u;
    uint _371 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _377 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0)))) * cbInstanceData._m0[_371].x;
    float _378 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0)))) * cbInstanceData._m0[_371].y;
    float _379 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0)))) * cbInstanceData._m0[_371].z;
    float _2922 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
    float _2933 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
    float _2944 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _328, cbSceneParam._m0[86u].y * _329));
    float _394 = _391.x * TEXCOORD.z;
    float _395 = dot(vec3(_240, _241, _242), vec3(_320, _321, _322));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _240) - _320;
    float _404 = (_398 * _241) - _321;
    float _405 = (_398 * _242) - _322;
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _737;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _462 = fma(_435, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _427));
        float _466 = fma(_435, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _427));
        float _470 = fma(_435, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _427));
        float _495 = _427 + _240;
        float _496 = _431 + _241;
        float _497 = _435 + _242;
        float _507 = fma(_497, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) - _462;
        float _508 = fma(_497, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) - _466;
        float _509 = fma(_497, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) - _470;
        float _513 = inversesqrt(dot(vec3(_507, _508, _509), vec3(_507, _508, _509)));
        float _526 = ((_513 * _507) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_462 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_513 * _508) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_466 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_513 * _509) / cbModelParam._m0[34u].z) + ((((((_470 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        float _565 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_531.x + (-0.5));
        float _567 = _565 * (_531.y + (-0.5));
        float _568 = _565 * (_531.z + (-0.5));
        float _575 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_538.x + (-0.5));
        float _577 = _575 * (_538.y + (-0.5));
        float _578 = _575 * (_538.z + (-0.5));
        float _585 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_545.x + (-0.5));
        float _587 = _585 * (_545.y + (-0.5));
        float _588 = _585 * (_545.z + (-0.5));
        float _595 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_552.x + (-0.5));
        float _597 = _595 * (_552.y + (-0.5));
        float _598 = _595 * (_552.z + (-0.5));
        float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        float _600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = _566 * 0.5;
        float _603 = _576 * 0.5;
        float _604 = _586 * 0.5;
        float _605 = dot(vec3(_602, _603, _604), vec3(_602, _603, _604));
        float _610 = (_605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_605);
        float _619 = (dot(vec3(_240, _241, _242), vec3(_610 * _602, _610 * _603, _610 * _604)) + 1.0) * 0.5;
        float _2970 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _629 = sqrt(((_603 * _603) + (_602 * _602)) + (_604 * _604)) / (_599 + 9.9999997473787516355514526367188e-06);
        float _2981 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _630 = isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0));
        float _631 = _630 * 2.0;
        float _635 = (1.0 - _630) / (_630 + 1.0);
        float _2992 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _645 = ((((1.0 - _636) * (_631 + 2.0)) * exp2(log2(isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) * (_631 + 1.0))) + _636) * _599;
        float _646 = _567 * 0.5;
        float _647 = _577 * 0.5;
        float _648 = _587 * 0.5;
        float _649 = dot(vec3(_646, _647, _648), vec3(_646, _647, _648));
        float _654 = (_649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_649);
        float _662 = (dot(vec3(_240, _241, _242), vec3(_654 * _646, _654 * _647, _654 * _648)) + 1.0) * 0.5;
        float _3003 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _671 = sqrt(((_647 * _647) + (_646 * _646)) + (_648 * _648)) / (_600 + 9.9999997473787516355514526367188e-06);
        float _3014 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _672 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
        float _673 = _672 * 2.0;
        float _677 = (1.0 - _672) / (_672 + 1.0);
        float _3025 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
        float _687 = ((((1.0 - _678) * (_673 + 2.0)) * exp2(log2(isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0))) * (_673 + 1.0))) + _678) * _600;
        float _688 = _568 * 0.5;
        float _689 = _578 * 0.5;
        float _690 = _588 * 0.5;
        float _691 = dot(vec3(_688, _689, _690), vec3(_688, _689, _690));
        float _696 = (_691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_691);
        float _704 = (dot(vec3(_240, _241, _242), vec3(_696 * _688, _696 * _689, _696 * _690)) + 1.0) * 0.5;
        float _3036 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _713 = sqrt(((_689 * _689) + (_688 * _688)) + (_690 * _690)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3047 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3058 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0))) * (_715 + 1.0))) + _720) * _601;
        _737 = _568;
        _739 = _567;
        _740 = _566;
        _741 = _578;
        _742 = _577;
        _743 = _576;
        _744 = _588;
        _745 = _587;
        _746 = _586;
        _747 = _601;
        _748 = _600;
        _749 = _599;
        _750 = cbModelParam._m0[36u].z * (isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0)));
        _751 = cbModelParam._m0[36u].z * (isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0)));
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
    }
    else
    {
        _737 = _738;
        _739 = _738;
        _740 = _738;
        _741 = _738;
        _742 = _738;
        _743 = _738;
        _744 = _738;
        _745 = _738;
        _746 = _738;
        _747 = _738;
        _748 = _738;
        _749 = _738;
        _750 = 0.0;
        _751 = 0.0;
        _752 = 0.0;
    }
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _778 = fma(_435, cbModelParam._m0[30u].z, fma(_431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _427));
        float _782 = fma(_435, cbModelParam._m0[31u].z, fma(_431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _427));
        float _786 = fma(_435, cbModelParam._m0[32u].z, fma(_431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _427));
        float _809 = _427 + _240;
        float _810 = _431 + _241;
        float _811 = _435 + _242;
        float _821 = fma(_811, cbModelParam._m0[30u].z, fma(_810, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809)) - _778;
        float _822 = fma(_811, cbModelParam._m0[31u].z, fma(_810, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809)) - _782;
        float _823 = fma(_811, cbModelParam._m0[32u].z, fma(_810, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809)) - _786;
        float _827 = inversesqrt(dot(vec3(_821, _822, _823), vec3(_821, _822, _823)));
        float _840 = ((_827 * _821) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_778 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_827 * _822) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_782 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_827 * _823) / cbModelParam._m0[35u].z) + ((((((_786 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_840, _841, _842), 0.0);
        float _877 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_844.x + (-0.5));
        float _879 = _877 * (_844.y + (-0.5));
        float _880 = _877 * (_844.z + (-0.5));
        float _887 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_851.x + (-0.5));
        float _889 = _887 * (_851.y + (-0.5));
        float _890 = _887 * (_851.z + (-0.5));
        float _897 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_858.x + (-0.5));
        float _899 = _897 * (_858.y + (-0.5));
        float _900 = _897 * (_858.z + (-0.5));
        float _907 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_865.x + (-0.5));
        float _909 = _907 * (_865.y + (-0.5));
        float _910 = _907 * (_865.z + (-0.5));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = _878 * 0.5;
        float _915 = _888 * 0.5;
        float _916 = _898 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_240, _241, _242), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3099 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3110 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3121 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0))) * (_941 + 1.0))) + _946) * _911;
        float _956 = _879 * 0.5;
        float _957 = _889 * 0.5;
        float _958 = _899 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_240, _241, _242), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3132 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3143 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3154 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0))) * (_983 + 1.0))) + _988) * _912;
        float _998 = _880 * 0.5;
        float _999 = _890 * 0.5;
        float _1000 = _900 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_240, _241, _242), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3165 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3176 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3187 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))) * (_1025 + 1.0))) + _1030) * _913;
        _1047 = _880;
        _1048 = _879;
        _1049 = _878;
        _1050 = _890;
        _1051 = _889;
        _1052 = _888;
        _1053 = _900;
        _1054 = _899;
        _1055 = _898;
        _1056 = _913;
        _1057 = _912;
        _1058 = _911;
        _1059 = cbModelParam._m0[36u].w * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1060 = cbModelParam._m0[36u].w * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _738;
        _1048 = _738;
        _1049 = _738;
        _1050 = _738;
        _1051 = _738;
        _1052 = _738;
        _1053 = _738;
        _1054 = _738;
        _1055 = _738;
        _1056 = _738;
        _1057 = _738;
        _1058 = _738;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1071 = (cbModelParam._m0[1u].x * (_1059 - _750)) + _750;
    float _1072 = (cbModelParam._m0[1u].x * (_1060 - _751)) + _751;
    float _1073 = (cbModelParam._m0[1u].x * (_1061 - _752)) + _752;
    float _1094 = fma(_1073, cbSceneParam._m0[89u].z, fma(_1072, cbSceneParam._m0[89u].y, _1071 * cbSceneParam._m0[89u].x));
    float _1097 = fma(_1073, cbSceneParam._m0[90u].z, fma(_1072, cbSceneParam._m0[90u].y, _1071 * cbSceneParam._m0[90u].x));
    float _1100 = fma(_1073, cbSceneParam._m0[91u].z, fma(_1072, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1071));
    float _1115 = _403 * 0.5;
    float _1116 = _404 * 0.5;
    float _1117 = _405 * 0.5;
    float _1118 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1049, _1052, _1055, _1058));
    float _1121 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1048, _1051, _1054, _1057));
    float _1124 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_1047, _1050, _1053, _1056));
    float _1158;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1131 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_737, _741, _744, _747));
        float _1135 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_739, _742, _745, _748));
        float _1139 = dot(vec4(_1115, _1116, _1117, 1.0), vec4(_740, _743, _746, _749));
        float _1146 = dot(vec4(cbModelParam._m0[39u]), vec4(_1115, _1116, _1117, 1.0));
        _1158 = dot(vec3(isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1146) ? 0.0 : (isnan(0.0) ? _1146 : max(0.0, _1146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1158 = 1.0;
    }
    float _1169;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1160 = dot(vec4(cbModelParam._m0[40u]), vec4(_1115, _1116, _1117, 1.0));
        _1169 = dot(vec3(isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1160) ? 0.0 : (isnan(0.0) ? _1160 : max(0.0, _1160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1169 = 1.0;
    }
    float _1173 = (_1169 * cbModelParam._m0[1u].x) + (_1158 * (1.0 - cbModelParam._m0[1u].x));
    float _1182 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1263;
    float _1265;
    float _1267;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1230 = fma(_435, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427)) + cbModelParam._m0[13u].w;
        float _1234 = fma(_435, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427)) + cbModelParam._m0[14u].w;
        float _1238 = fma(_435, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427)) + cbModelParam._m0[15u].w;
        float _1241 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _1244 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _1247 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _1273;
        if (_1241 > 0.0)
        {
            _1273 = abs((1.0 - _1230) / _1241);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1230 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1273 = frontier_phi_14_12_ladder;
        }
        float _1479;
        if (_1244 > 0.0)
        {
            _1479 = abs((1.0 - _1234) / _1244);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1234 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1479 = frontier_phi_23_19_ladder;
        }
        float _1668;
        if (_1247 > 0.0)
        {
            _1668 = abs((1.0 - _1238) / _1247);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1238 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1668 = frontier_phi_35_30_ladder;
        }
        float _1670 = isnan(_1479) ? _1273 : (isnan(_1273) ? _1479 : min(_1273, _1479));
        float _1671 = isnan(_1668) ? _1670 : (isnan(_1670) ? _1668 : min(_1670, _1668));
        float _1675 = (_1671 * _1241) + _1230;
        float _1676 = (_1671 * _1244) + _1234;
        float _1677 = (_1671 * _1247) + _1238;
        float _1678 = _1671 * 9.9999997473787516355514526367188e-05;
        float _1680 = (-1.0) - _1678;
        float _1682 = _1678 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1677 > _1682) || ((_1677 < _1680) || ((_1676 > _1682) || ((_1676 < _1680) || ((_1675 < _1680) || (_1675 > _1682))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1677, cbModelParam._m0[9u].z, fma(_1676, cbModelParam._m0[9u].y, _1675 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1677, cbModelParam._m0[10u].z, fma(_1676, cbModelParam._m0[10u].y, _1675 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1677, cbModelParam._m0[11u].z, fma(_1676, cbModelParam._m0[11u].y, _1675 * cbModelParam._m0[11u].x))), _1182);
            frontier_phi_13_35_ladder = _1774.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1774.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1774.x * cbModelParam._m0[1u].y;
        }
        _1263 = frontier_phi_13_35_ladder_2;
        _1265 = frontier_phi_13_35_ladder_1;
        _1267 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _1182);
        _1263 = _1251.x * cbModelParam._m0[1u].y;
        _1265 = _1251.y * cbModelParam._m0[1u].y;
        _1267 = _1251.z * cbModelParam._m0[1u].y;
    }
    float _1270 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1326 = fma(_435, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427)) + cbModelParam._m0[21u].w;
        float _1330 = fma(_435, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427)) + cbModelParam._m0[22u].w;
        float _1334 = fma(_435, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427)) + cbModelParam._m0[23u].w;
        float _1337 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1340 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1343 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1484;
        if (_1337 > 0.0)
        {
            _1484 = abs((1.0 - _1326) / _1337);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1337 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1326 + 1.0) / _1337);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1484 = frontier_phi_25_21_ladder;
        }
        float _1695;
        if (_1340 > 0.0)
        {
            _1695 = abs((1.0 - _1330) / _1340);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1330 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1695 = frontier_phi_37_32_ladder;
        }
        float _1846;
        if (_1343 > 0.0)
        {
            _1846 = abs((1.0 - _1334) / _1343);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1334 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1846 = frontier_phi_46_43_ladder;
        }
        float _1848 = isnan(_1695) ? _1484 : (isnan(_1484) ? _1695 : min(_1484, _1695));
        float _1849 = isnan(_1846) ? _1848 : (isnan(_1848) ? _1846 : min(_1848, _1846));
        float _1853 = (_1849 * _1337) + _1326;
        float _1854 = (_1849 * _1340) + _1330;
        float _1855 = (_1849 * _1343) + _1334;
        float _1856 = _1849 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1856;
        float _1859 = _1856 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1855 > _1859) || ((_1855 < _1857) || ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 < _1857) || (_1853 > _1859))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1855, cbModelParam._m0[17u].z, fma(_1854, cbModelParam._m0[17u].y, _1853 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1855, cbModelParam._m0[18u].z, fma(_1854, cbModelParam._m0[18u].y, _1853 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1855, cbModelParam._m0[19u].z, fma(_1854, cbModelParam._m0[19u].y, _1853 * cbModelParam._m0[19u].x))), _1270);
            frontier_phi_22_46_ladder = _2089.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2089.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2089.x * cbModelParam._m0[1u].z;
        }
        _1362 = frontier_phi_22_46_ladder_2;
        _1364 = frontier_phi_22_46_ladder_1;
        _1366 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _1270);
        _1362 = _1346.x * cbModelParam._m0[1u].z;
        _1364 = _1346.y * cbModelParam._m0[1u].z;
        _1366 = _1346.z * cbModelParam._m0[1u].z;
    }
    float _1378 = _394 * 0.01200000010430812835693359375;
    float _1380 = _1378 * ((cbModelParam._m0[1u].w * (_1362 - _1263)) + _1263);
    float _1381 = _1378 * ((cbModelParam._m0[1u].w * (_1364 - _1265)) + _1265);
    float _1382 = _1378 * ((cbModelParam._m0[1u].w * (_1366 - _1267)) + _1267);
    float _1385 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, _1380 * cbSceneParam._m0[91u].x));
    uvec4 _1401 = floatBitsToUint(cbInstanceData._m0[_369 + 5u]);
    uint _1403 = _1401.x * 14u;
    uint _1404 = _1403 + 13u;
    float _1411 = _394 + (-1.0);
    float _1417 = (cbLight._m0[_1404].x * _1411) + 1.0;
    float _1418 = (cbLight._m0[_1404].y * _1411) + 1.0;
    float _1419 = (cbLight._m0[_1404].z * _1411) + 1.0;
    float _1420 = (cbLight._m0[_1404].w * _1411) + 1.0;
    uint _1421 = _1403 + 5u;
    float _1427 = isnan(1.0) ? _1418 : (isnan(_1418) ? 1.0 : min(_1418, 1.0));
    uint _1431 = _1403 + 4u;
    float _1438 = isnan(1.0) ? _1417 : (isnan(_1417) ? 1.0 : min(_1417, 1.0));
    uint _1442 = _1403 | 1u;
    float _1453 = dot(vec3(cbLight._m0[_1403].xyz), vec3(_240, _241, _242));
    float _1456 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_240, _241, _242));
    float _3323 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
    float _3334 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
    float _1461 = (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * 0.3183098733425140380859375;
    float _1463 = (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * 0.3183098733425140380859375;
    float _1470 = ((cbLight._m0[_1421].x * _1427) * _1463) + ((cbLight._m0[_1431].x * _1438) * _1461);
    float _1471 = ((_1427 * cbLight._m0[_1421].y) * _1463) + ((_1438 * cbLight._m0[_1431].y) * _1461);
    float _1472 = ((_1427 * cbLight._m0[_1421].z) * _1463) + ((_1438 * cbLight._m0[_1431].z) * _1461);
    uvec4 _1476 = floatBitsToUint(cbLight._m0[_1403 + 12u]);
    bool _1478 = _1476.x == 0u;
    float _1489;
    float _1491;
    float _1493;
    if (_1478)
    {
        _1489 = _1470;
        _1491 = _1471;
        _1493 = _1472;
    }
    else
    {
        uint _1497 = _1403 + 6u;
        float _1513 = (dot(vec3(cbLight._m0[_1403 + 2u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1514 = _1513 * _1513;
        float _3345 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1516 = isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0));
        _1489 = (((cbLight._m0[_1497].x * 0.3183098733425140380859375) * _1515) * _1516) + _1470;
        _1491 = (((cbLight._m0[_1497].y * 0.3183098733425140380859375) * _1515) * _1516) + _1471;
        _1493 = (((cbLight._m0[_1497].z * 0.3183098733425140380859375) * _1515) * _1516) + _1472;
    }
    bool _1496 = _1476.y == 0u;
    float _1534;
    float _1536;
    float _1538;
    if (_1496)
    {
        _1534 = _1489;
        _1536 = _1491;
        _1538 = _1493;
    }
    else
    {
        uint _1639 = _1403 + 7u;
        float _1655 = (dot(vec3(cbLight._m0[_1403 + 3u].xyz), vec3(_240, _241, _242)) * 0.5) + 0.5;
        float _1656 = _1655 * _1655;
        float _3361 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1658 = isnan(1.0) ? _1420 : (isnan(_1420) ? 1.0 : min(_1420, 1.0));
        _1534 = (((cbLight._m0[_1639].x * 0.3183098733425140380859375) * _1657) * _1658) + _1489;
        _1536 = (((cbLight._m0[_1639].y * 0.3183098733425140380859375) * _1657) * _1658) + _1491;
        _1538 = (((cbLight._m0[_1639].z * 0.3183098733425140380859375) * _1657) * _1658) + _1493;
    }
    uint _1540 = _1403 + 8u;
    float _1546 = cbLight._m0[_1403].x + _320;
    float _1547 = cbLight._m0[_1403].y + _321;
    float _1548 = cbLight._m0[_1403].z + _322;
    float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
    float _1556 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1403].xyz));
    float _3377 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1559 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _1560 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _1561 = dot(vec3(cbLight._m0[_1403].xyz), vec3(_1546 * _1552, _1547 * _1552, _1548 * _1552));
    float _3399 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1572 = (exp2(log2(1.0 - (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1578 = (0.5 / ((_1559 + 9.9999999392252902907785028219223e-09) + _1560)) * _1559;
    float _3410 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1580 = (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.31831014156341552734375;
    uint _1591 = _1403 + 9u;
    float _1597 = cbLight._m0[_1442].x + _320;
    float _1598 = cbLight._m0[_1442].y + _321;
    float _1599 = cbLight._m0[_1442].z + _322;
    float _1603 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
    float _1607 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1442].xyz));
    float _3421 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1610 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _1611 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_1597 * _1603, _1598 * _1603, _1599 * _1603));
    float _3432 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1620 = (exp2(log2(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1624 = (0.5 / ((_1610 + 9.9999999392252902907785028219223e-09) + _1560)) * _1610;
    float _3443 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1626 = (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * 0.31831014156341552734375;
    float _1636 = (((_1620 * cbLight._m0[_1591].x) * _1626) * _1427) + (((_1572 * cbLight._m0[_1540].x) * _1580) * _1438);
    float _1637 = (((_1620 * cbLight._m0[_1591].y) * _1626) * _1427) + (((_1572 * cbLight._m0[_1540].y) * _1580) * _1438);
    float _1638 = (((_1620 * cbLight._m0[_1591].z) * _1626) * _1427) + (((_1572 * cbLight._m0[_1540].z) * _1580) * _1438);
    float _1700;
    float _1702;
    float _1704;
    if (_1478)
    {
        _1700 = _1636;
        _1702 = _1637;
        _1704 = _1638;
    }
    else
    {
        uint _1706 = _1403 + 10u;
        uint _1712 = _1403 + 2u;
        float _1718 = cbLight._m0[_1712].x + _320;
        float _1719 = cbLight._m0[_1712].y + _321;
        float _1720 = cbLight._m0[_1712].z + _322;
        float _1724 = inversesqrt(dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720)));
        float _1728 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1712].xyz));
        float _3454 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1731 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1732 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1718 * _1724, _1719 * _1724, _1720 * _1724));
        float _3465 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = (exp2(log2(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1745 = (0.5 / ((_1731 + 9.9999999392252902907785028219223e-09) + _1560)) * _1731;
        float _3476 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1747 = (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * 0.31831014156341552734375;
        float _1748 = isnan(1.0) ? _1419 : (isnan(_1419) ? 1.0 : min(_1419, 1.0));
        _1700 = (((_1741 * cbLight._m0[_1706].x) * _1747) * _1748) + _1636;
        _1702 = (((_1741 * cbLight._m0[_1706].y) * _1747) * _1748) + _1637;
        _1704 = (((_1741 * cbLight._m0[_1706].z) * _1747) * _1748) + _1638;
    }
    float _1783;
    float _1785;
    float _1787;
    if (_1496)
    {
        _1783 = _1700;
        _1785 = _1702;
        _1787 = _1704;
    }
    else
    {
        uint _1794 = _1403 + 11u;
        uint _1800 = _1403 + 3u;
        float _1806 = cbLight._m0[_1800].x + _320;
        float _1807 = cbLight._m0[_1800].y + _321;
        float _1808 = cbLight._m0[_1800].z + _322;
        float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
        float _1816 = dot(vec3(_240, _241, _242), vec3(cbLight._m0[_1800].xyz));
        float _3492 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1819 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1820 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1806 * _1812, _1807 * _1812, _1808 * _1812));
        float _3503 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = (exp2(log2(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1833 = (0.5 / ((_1819 + 9.9999999392252902907785028219223e-09) + _1560)) * _1819;
        float _3514 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1835 = (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * 0.31831014156341552734375;
        float _1836 = isnan(1.0) ? _1420 : (isnan(_1420) ? 1.0 : min(_1420, 1.0));
        _1783 = (((_1829 * cbLight._m0[_1794].x) * _1835) * _1836) + _1700;
        _1785 = (((_1829 * cbLight._m0[_1794].y) * _1835) * _1836) + _1702;
        _1787 = (((_1829 * cbLight._m0[_1794].z) * _1835) * _1836) + _1704;
    }
    float _1971;
    float _1973;
    float _1975;
    float _1977;
    float _1979;
    float _1981;
    if (_1401.y == 0u)
    {
        float _1911 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1912 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1911;
        float _1913 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1911;
        float _1914 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1911;
        uvec4 _1926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1927 = _1926.x;
        uint _1938 = uint((float(_1926.y) * floor(float(uint(cbSceneParam._m0[85u].y * _329) / _1927))) + floor(float(uint(cbSceneParam._m0[85u].x * _328) / _1927)));
        float _1948 = (log2(_1914 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1949 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        uint _1952 = uint(isnan(14.0) ? _1949 : (isnan(_1949) ? 14.0 : min(_1949, 14.0)));
        uvec4 _1957 = texelFetch(g_lightClusterGridBuffer, int(((_1952 << 2u) + (_1938 << 6u)) >> 2u));
        uint _1958 = _1957.x;
        uint _1959 = _1926.z;
        float _2094;
        float _2096;
        float _2098;
        float _2100;
        float _2102;
        float _2104;
        if (((((1u << ((_1959 >> 4u) & 15u)) + 4294967295u) & _1958) == 0u) || ((_1959 & 240u) == 0u))
        {
            _2094 = 0.0;
            _2096 = 0.0;
            _2098 = 0.0;
            _2100 = 0.0;
            _2102 = 0.0;
            _2104 = 0.0;
        }
        else
        {
            float _2095;
            float _2097;
            float _2099;
            float _2101;
            float _2103;
            float _2105;
            float _2246 = 0.0;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            uint _2252 = 0u;
            uint _2261;
            bool _2262;
            for (;;)
            {
                _2261 = texelFetch(g_lightClassification, int((((_1952 << 5u) + (_1938 << 9u)) + (_2252 << 2u)) >> 2u)).x;
                _2262 = _2261 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2262)
                {
                    frontier_phi_61_pred = _2246;
                    frontier_phi_61_pred_1 = _2251;
                    frontier_phi_61_pred_2 = _2250;
                    frontier_phi_61_pred_3 = _2249;
                    frontier_phi_61_pred_4 = _2248;
                    frontier_phi_61_pred_5 = _2247;
                }
                else
                {
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    float _2375;
                    uint _2376;
                    _2370 = _2246;
                    _2371 = _2247;
                    _2372 = _2248;
                    _2373 = _2249;
                    _2374 = _2250;
                    _2375 = _2251;
                    _2376 = _2261;
                    float _2302;
                    float _2303;
                    float _2304;
                    float _2305;
                    float _2306;
                    float _2307;
                    for (;;)
                    {
                        uint _2380 = uint(findLSB(_2376)) + (_2252 << 5u);
                        uint _2377 = (_2376 + 4294967295u) & _2376;
                        uint _2382 = _2380 * 48u;
                        vec4 _2396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2382)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2382 + 3u)).x));
                        uint _2402 = (_2380 * 48u) + 4u;
                        vec4 _2415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2402)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2402 + 3u)).x));
                        uint _2421 = (_2380 * 48u) + 8u;
                        vec3 _2432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2421)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2421 + 2u)).x));
                        float _2436 = _2396.x - _1912;
                        float _2437 = _2396.y - _1913;
                        float _2438 = _2396.z - _1914;
                        float _2439 = dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438));
                        float _2442 = inversesqrt(_2439);
                        float _2451 = 1.0 - (_2439 * _2396.w);
                        float _3540 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
                        float _2452 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
                        float _2453 = sqrt(_2439) * _2415.w;
                        float _2456 = 1.39999997615814208984375 / (_2453 + 1.39999997615814208984375);
                        float _2457 = _2456 * _2456;
                        float _2460 = ((1.0 - _2457) * dot(vec3(_350, _353, _356), vec3(_2442 * _2436, _2442 * _2437, _2442 * _2438))) + _2457;
                        float _2463 = _2453 * _2453;
                        float _2467 = ((isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0))) * _2452) / ((_2463 * 0.699999988079071044921875) + 1.0);
                        float _2471 = (-0.0) - _1912;
                        float _2472 = (-0.0) - _1913;
                        float _2473 = (-0.0) - _1914;
                        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
                        float _2481 = dot(vec3(_350, _353, _356), vec3(_2477 * _2471, _2477 * _2472, _2477 * _2473));
                        float _3556 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
                        float _3567 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2485 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
                        float _2489 = (0.5 / (((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) + 9.9999999392252902907785028219223e-09) + _2485)) * _2485;
                        float _3578 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
                        float _2498 = (((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 3.1415927410125732421875) / ((_2463 * 2.1991131305694580078125) + 3.141590118408203125)) * _2452;
                        _2305 = (_2467 * _2415.x) + _2373;
                        _2306 = (_2467 * _2415.y) + _2374;
                        _2307 = (_2467 * _2415.z) + _2375;
                        _2302 = (_2498 * _2432.x) + _2370;
                        _2303 = (_2498 * _2432.y) + _2371;
                        _2304 = (_2498 * _2432.z) + _2372;
                        if (_2377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2370 = _2302;
                            _2371 = _2303;
                            _2372 = _2304;
                            _2373 = _2305;
                            _2374 = _2306;
                            _2375 = _2307;
                            _2376 = _2377;
                        }
                    }
                    frontier_phi_61_pred = _2302;
                    frontier_phi_61_pred_1 = _2307;
                    frontier_phi_61_pred_2 = _2306;
                    frontier_phi_61_pred_3 = _2305;
                    frontier_phi_61_pred_4 = _2304;
                    frontier_phi_61_pred_5 = _2303;
                }
                _2095 = frontier_phi_61_pred;
                _2105 = frontier_phi_61_pred_1;
                _2103 = frontier_phi_61_pred_2;
                _2101 = frontier_phi_61_pred_3;
                _2099 = frontier_phi_61_pred_4;
                _2097 = frontier_phi_61_pred_5;
                uint _2253 = _2252 + 1u;
                if (_2253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2246 = _2095;
                    _2247 = _2097;
                    _2248 = _2099;
                    _2249 = _2101;
                    _2250 = _2103;
                    _2251 = _2105;
                    _2252 = _2253;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2094 = _2095;
            _2096 = _2097;
            _2098 = _2099;
            _2100 = _2101;
            _2102 = _2103;
            _2104 = _2105;
        }
        uvec4 _2108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2109 = _2108.z;
        uint _2111 = (_2109 >> 8u) & 15u;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        if (((4294967295u << _2111) & _1958) == 0u)
        {
            _2217 = _2094;
            _2219 = _2096;
            _2221 = _2098;
            _2223 = _2100;
            _2225 = _2102;
            _2227 = _2104;
        }
        else
        {
            float _2242 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2111 < ((_2109 >> 12u) & 15u))
            {
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2353 = _2094;
                float _2354 = _2096;
                float _2355 = _2098;
                float _2356 = _2100;
                float _2357 = _2102;
                float _2358 = _2104;
                uint _2359 = _2111;
                uint _2368;
                bool _2369;
                for (;;)
                {
                    _2368 = texelFetch(g_lightClassification, int((((_1952 << 5u) + (_1938 << 9u)) + (_2359 << 2u)) >> 2u)).x;
                    _2369 = _2368 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2369)
                    {
                        frontier_phi_67_pred = _2356;
                        frontier_phi_67_pred_1 = _2357;
                        frontier_phi_67_pred_2 = _2358;
                        frontier_phi_67_pred_3 = _2355;
                        frontier_phi_67_pred_4 = _2354;
                        frontier_phi_67_pred_5 = _2353;
                    }
                    else
                    {
                        float _2503;
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2516 = _2353;
                        float _2517 = _2354;
                        float _2518 = _2355;
                        float _2519 = _2356;
                        float _2520 = _2357;
                        float _2521 = _2358;
                        uint _2522 = _2368;
                        uint _2523;
                        vec4 _2548;
                        float _2549;
                        vec4 _2564;
                        vec3 _2576;
                        vec4 _2592;
                        vec4 _2608;
                        float _2655;
                        bool _2656;
                        for (;;)
                        {
                            uint _2533 = ((_2359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2522));
                            _2523 = (_2522 + 4294967295u) & _2522;
                            uint _2535 = _2533 * 40u;
                            _2548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2535 + 3u)).x));
                            _2549 = _2548.w;
                            uint _2551 = (_2533 * 40u) + 4u;
                            _2564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2551 + 3u)).x));
                            uint _2566 = (_2533 * 40u) + 8u;
                            _2576 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x));
                            uint _2579 = (_2533 * 40u) + 16u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            uint _2595 = (_2533 * 40u) + 20u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2611 = (_2533 * 40u) + 24u;
                            vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2630 = (_2533 * 40u) + 28u;
                            vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            _2655 = fma(_1914, _2643.z, fma(_1913, _2643.y, _2643.x * _1912)) + _2643.w;
                            _2656 = !((fma(_1914, _2624.z, fma(_1913, _2624.y, _2624.x * _1912)) + _2624.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2656)
                            {
                                float _2683 = _2548.x - _1912;
                                float _2684 = _2548.y - _1913;
                                float _2685 = _2548.z - _1914;
                                float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                                float _2689 = inversesqrt(_2686);
                                float _2690 = _2689 * _2683;
                                float _2691 = _2689 * _2684;
                                float _2692 = _2689 * _2685;
                                float _2696 = 1.0 - (_2686 / (_2549 * _2549));
                                float _3589 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                                float _2701 = sqrt(_2686) * _2564.w;
                                float _2703 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                                float _2704 = _2703 * _2703;
                                float _2705 = 1.0 - _2704;
                                float _2707 = (_2705 * dot(vec3(_2690, _2691, _2692), vec3(_350, _353, _356))) + _2704;
                                float _2710 = _2701 * _2701;
                                float _2714 = (fma(_1914, _2592.z, fma(_1913, _2592.y, _2592.x * _1912)) + _2592.w) / _2655;
                                float _2715 = (fma(_1914, _2608.z, fma(_1913, _2608.y, _2608.x * _1912)) + _2608.w) / _2655;
                                float _2719 = 1.0 - dot(vec2(_2714, _2715), vec2(_2714, _2715));
                                float _3605 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                                float _2720 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
                                float _2721 = _2720 * (((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2697) / ((_2710 * 0.699999988079071044921875) + 1.0));
                                float _2731 = dot(vec3(_350, _353, _356), vec3((-0.0) - (_1912 * _2242), (-0.0) - (_1913 * _2242), (-0.0) - (_1914 * _2242)));
                                float _3616 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2739 = (_2705 * dot(vec3(_350, _353, _356), vec3(_2690, _2691, _2692))) + _2704;
                                float _3627 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                                float _2744 = (0.5 / (((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) + 9.9999999392252902907785028219223e-09) + _2740)) * _2740;
                                float _3638 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2751 = (_2720 * _2697) * (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 3.1415927410125732421875) / ((_2710 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2751 * _2576.x;
                                frontier_phi_73_pred_1 = _2751 * _2576.y;
                                frontier_phi_73_pred_2 = _2721 * _2564.z;
                                frontier_phi_73_pred_3 = _2721 * _2564.y;
                                frontier_phi_73_pred_4 = _2721 * _2564.x;
                                frontier_phi_73_pred_5 = _2751 * _2576.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2755 = frontier_phi_73_pred;
                            _2756 = frontier_phi_73_pred_1;
                            _2760 = frontier_phi_73_pred_2;
                            _2759 = frontier_phi_73_pred_3;
                            _2758 = frontier_phi_73_pred_4;
                            _2757 = frontier_phi_73_pred_5;
                            _2506 = _2758 + _2519;
                            _2507 = _2759 + _2520;
                            _2508 = _2760 + _2521;
                            _2503 = _2755 + _2516;
                            _2504 = _2756 + _2517;
                            _2505 = _2757 + _2518;
                            if (_2523 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2516 = _2503;
                                _2517 = _2504;
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2523;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2506;
                        frontier_phi_67_pred_1 = _2507;
                        frontier_phi_67_pred_2 = _2508;
                        frontier_phi_67_pred_3 = _2505;
                        frontier_phi_67_pred_4 = _2504;
                        frontier_phi_67_pred_5 = _2503;
                    }
                    _2224 = frontier_phi_67_pred;
                    _2226 = frontier_phi_67_pred_1;
                    _2228 = frontier_phi_67_pred_2;
                    _2222 = frontier_phi_67_pred_3;
                    _2220 = frontier_phi_67_pred_4;
                    _2218 = frontier_phi_67_pred_5;
                    uint _2360 = _2359 + 1u;
                    if (_2360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2353 = _2218;
                        _2354 = _2220;
                        _2355 = _2222;
                        _2356 = _2224;
                        _2357 = _2226;
                        _2358 = _2228;
                        _2359 = _2360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2226;
                frontier_phi_55_56_ladder_1 = _2228;
                frontier_phi_55_56_ladder_2 = _2224;
                frontier_phi_55_56_ladder_3 = _2222;
                frontier_phi_55_56_ladder_4 = _2220;
                frontier_phi_55_56_ladder_5 = _2218;
            }
            else
            {
                frontier_phi_55_56_ladder = _2102;
                frontier_phi_55_56_ladder_1 = _2104;
                frontier_phi_55_56_ladder_2 = _2100;
                frontier_phi_55_56_ladder_3 = _2098;
                frontier_phi_55_56_ladder_4 = _2096;
                frontier_phi_55_56_ladder_5 = _2094;
            }
            _2217 = frontier_phi_55_56_ladder_5;
            _2219 = frontier_phi_55_56_ladder_4;
            _2221 = frontier_phi_55_56_ladder_3;
            _2223 = frontier_phi_55_56_ladder_2;
            _2225 = frontier_phi_55_56_ladder;
            _2227 = frontier_phi_55_56_ladder_1;
        }
        float _2232 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _1971 = (_2232 * _2223) + _1534;
        _1973 = (_2232 * _2225) + _1536;
        _1975 = (_2232 * _2227) + _1538;
        _1977 = ((_2217 * 0.039999999105930328369140625) * _2232) + _1783;
        _1979 = ((_2219 * 0.039999999105930328369140625) * _2232) + _1785;
        _1981 = ((_2221 * 0.039999999105930328369140625) * _2232) + _1787;
    }
    else
    {
        _1971 = _1534;
        _1973 = _1536;
        _1975 = _1538;
        _1977 = _1783;
        _1979 = _1785;
        _1981 = _1787;
    }
    uint _1987 = _370 + uint(cbMatDynParam._m0[0u].w);
    float _1995 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * cbInstanceData._m0[_1987].x;
    float _1998 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * cbInstanceData._m0[_1987].y;
    float _2001 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * cbInstanceData._m0[_1987].z;
    float _3654 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3665 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3676 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _2018 = (((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1971 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _394))) + ((_1977 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + _1995;
    float _2020 = (_1998 + ((_1979 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1973 + ((isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0))) * _394)));
    float _2022 = (_2001 + ((_1981 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1173)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1975 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _394)));
    float _3702 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2035 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    uint _2036 = _369 + 6u;
    float _2044 = _328 / cbSceneParam._m0[86u].x;
    float _2045 = _329 / cbSceneParam._m0[86u].y;
    vec4 _2059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2044, _2045, (log2((isnan(cbSceneParam._m0[77u].w) ? _262 : (isnan(_262) ? cbSceneParam._m0[77u].w : min(_262, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2061 = _2059.x;
    float _2062 = _2059.y;
    float _2063 = _2059.z;
    float _2064 = _2059.w;
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    if (_262 > cbSceneParam._m0[78u].w)
    {
        float _2119 = isnan(_262) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _262 : min(cbSceneParam._m0[80u].w, _262));
        float _2120 = _2119 / _262;
        float _2131 = _2120 * _313;
        float _2132 = _314 * _2120;
        float _2133 = (-0.0) - _2132;
        float _2135 = _2120 * _315;
        float _2137 = (cbSceneParam._m0[77u].w * _2133) / _2119;
        float _2138 = _2137 + cbSceneParam._m0[79u].w;
        float _2139 = cbSceneParam._m0[79u].w - _2132;
        float _2145 = sqrt(((_2131 * _2131) + (_2132 * _2132)) + (_2135 * _2135));
        float _2148 = (1.0 - (cbSceneParam._m0[77u].w / _2119)) * _2145;
        float _2153 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2155 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2315;
        if (abs((_2133 - _2137) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2315 = ((((_2138 > 0.0) ? exp2(_2153 * _2138) : (2.0 - exp2(_2155 * _2138))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2148;
        }
        else
        {
            float _2275 = 1.0 / cbSceneParam._m0[80u].x;
            float _2276 = isnan(_2139) ? _2138 : (isnan(_2138) ? _2139 : max(_2138, _2139));
            float _2277 = isnan(_2139) ? _2138 : (isnan(_2138) ? _2139 : min(_2138, _2139));
            float _2286 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : min(_2276, 0.0));
            float _2287 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : min(_2277, 0.0));
            _2315 = ((abs(_2145 / _2133) * cbSceneParam._m0[80u].y) * ((((_2286 - _2287) * 2.0) - ((exp2(_2153 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)))) - exp2(_2153 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))))) * _2275)) - ((exp2(_2155 * _2286) - exp2(_2155 * _2287)) * _2275))) + (_2148 * cbSceneParam._m0[80u].z);
        }
        vec4 _2317 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2044, _2045, 1.0), 0.0);
        float _2326 = exp2((_2315 * (-1.44269502162933349609375)) * (1.0 - _2317.w));
        float _2327 = log2(_2326);
        float _2343 = log2(_2064);
        _2157 = (exp2(_2343 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].x)) * _2317.x) / cbSceneParam._m0[78u].x)) + _2061;
        _2159 = (exp2(_2343 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].y)) * _2317.y) / cbSceneParam._m0[78u].y)) + _2062;
        _2161 = (exp2(_2343 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2327 * cbSceneParam._m0[78u].z)) * _2317.z) / cbSceneParam._m0[78u].z)) + _2063;
        _2163 = _2326 * _2064;
    }
    else
    {
        _2157 = _2061;
        _2159 = _2062;
        _2161 = _2063;
        _2163 = _2064;
    }
    float _2175 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2176 = _2175 == 3.0;
    float _2178 = log2(_2163);
    float _2182 = exp2(_2178 * cbSceneParam._m0[78u].x);
    float _2183 = exp2(_2178 * cbSceneParam._m0[78u].y);
    float _2184 = exp2(_2178 * cbSceneParam._m0[78u].z);
    float _2185 = _2182 * (isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)));
    float _2186 = _2183 * (isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)));
    float _2187 = _2184 * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
    float _2196 = (_2175 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2196 * (_2176 ? _2185 : (_2185 + (cbSceneParam._m0[72u].w * _2157)));
    SV_Target.y = _2196 * (_2176 ? _2186 : (_2186 + (cbSceneParam._m0[72u].w * _2159)));
    SV_Target.z = _2196 * (_2176 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2161)));
    SV_Target.w = cbInstanceData._m0[_2036].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1995) * _2035) * _2182) * _2196;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1998) * _2035) * _2183) * _2196;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2001) * _2035) * _2184) * _2196;
    SV_Target_1.w = cbInstanceData._m0[_2036].w;
}


