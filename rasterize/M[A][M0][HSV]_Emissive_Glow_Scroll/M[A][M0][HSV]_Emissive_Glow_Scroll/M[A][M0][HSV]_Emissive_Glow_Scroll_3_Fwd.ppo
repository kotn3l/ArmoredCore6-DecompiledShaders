#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _755;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _231 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _244 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2907 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _246 = isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0));
    float _254 = (((_246 * _246) * (3.0 - (_246 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _258 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _259 = _258 * _165;
    float _260 = _258 * _166;
    float _261 = _258 * _167;
    float _2918 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2929 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2940 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _280 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _321 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _331 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _321);
    float _332 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _321);
    float _333 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _321);
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _338 = _331 * _337;
    float _339 = _332 * _337;
    float _340 = _333 * _337;
    float _346 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _347 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _368 = fma(_261, cbSceneParam._m0[5u].z, fma(_260, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _259));
    float _371 = fma(_261, cbSceneParam._m0[6u].z, fma(_260, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _259));
    float _374 = fma(_261, cbSceneParam._m0[7u].z, fma(_260, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _259));
    uint _387 = uint(roundEven(NORMAL.w)) * 13u;
    uint _388 = _387 + 9u;
    uint _389 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _395 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0)))) * cbInstanceData._m0[_389].x;
    float _396 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0)))) * cbInstanceData._m0[_389].y;
    float _397 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0)))) * cbInstanceData._m0[_389].z;
    float _2951 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0));
    float _2962 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _399 = isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0));
    float _2973 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
    vec4 _409 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _346, cbSceneParam._m0[86u].y * _347));
    float _412 = _409.x * TEXCOORD.z;
    float _413 = dot(vec3(_259, _260, _261), vec3(_338, _339, _340));
    float _416 = _413 * 2.0;
    float _420 = (_416 * _259) - _338;
    float _421 = (_416 * _260) - _339;
    float _422 = (_416 * _261) - _340;
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _479 = fma(_452, cbModelParam._m0[26u].z, fma(_448, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _444));
        float _483 = fma(_452, cbModelParam._m0[27u].z, fma(_448, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _444));
        float _487 = fma(_452, cbModelParam._m0[28u].z, fma(_448, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _444));
        float _512 = _444 + _259;
        float _513 = _448 + _260;
        float _514 = _452 + _261;
        float _524 = fma(_514, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _512)) - _479;
        float _525 = fma(_514, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _512)) - _483;
        float _526 = fma(_514, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _512)) - _487;
        float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
        float _543 = ((_530 * _524) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_479 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _544 = ((_530 * _525) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_483 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _545 = ((_530 * _526) / cbModelParam._m0[34u].z) + ((((((_487 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_543, _544, _545), 0.0);
        float _582 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_548.x + (-0.5));
        float _584 = _582 * (_548.y + (-0.5));
        float _585 = _582 * (_548.z + (-0.5));
        float _592 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_555.x + (-0.5));
        float _594 = _592 * (_555.y + (-0.5));
        float _595 = _592 * (_555.z + (-0.5));
        float _602 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_562.x + (-0.5));
        float _604 = _602 * (_562.y + (-0.5));
        float _605 = _602 * (_562.z + (-0.5));
        float _612 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_569.x + (-0.5));
        float _614 = _612 * (_569.y + (-0.5));
        float _615 = _612 * (_569.z + (-0.5));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        float _618 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _619 = _583 * 0.5;
        float _620 = _593 * 0.5;
        float _621 = _603 * 0.5;
        float _622 = dot(vec3(_619, _620, _621), vec3(_619, _620, _621));
        float _627 = (_622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_622);
        float _636 = (dot(vec3(_259, _260, _261), vec3(_627 * _619, _627 * _620, _627 * _621)) + 1.0) * 0.5;
        float _2999 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _646 = sqrt(((_620 * _620) + (_619 * _619)) + (_621 * _621)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _3010 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _647 = isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0));
        float _648 = _647 * 2.0;
        float _652 = (1.0 - _647) / (_647 + 1.0);
        float _3021 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _653 = isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0));
        float _662 = ((((1.0 - _653) * (_648 + 2.0)) * exp2(log2(isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0))) * (_648 + 1.0))) + _653) * _616;
        float _663 = _584 * 0.5;
        float _664 = _594 * 0.5;
        float _665 = _604 * 0.5;
        float _666 = dot(vec3(_663, _664, _665), vec3(_663, _664, _665));
        float _671 = (_666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_666);
        float _679 = (dot(vec3(_259, _260, _261), vec3(_671 * _663, _671 * _664, _671 * _665)) + 1.0) * 0.5;
        float _3032 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _688 = sqrt(((_664 * _664) + (_663 * _663)) + (_665 * _665)) / (_617 + 9.9999997473787516355514526367188e-06);
        float _3043 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0));
        float _690 = _689 * 2.0;
        float _694 = (1.0 - _689) / (_689 + 1.0);
        float _3054 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0));
        float _704 = ((((1.0 - _695) * (_690 + 2.0)) * exp2(log2(isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0))) * (_690 + 1.0))) + _695) * _617;
        float _705 = _585 * 0.5;
        float _706 = _595 * 0.5;
        float _707 = _605 * 0.5;
        float _708 = dot(vec3(_705, _706, _707), vec3(_705, _706, _707));
        float _713 = (_708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_708);
        float _721 = (dot(vec3(_259, _260, _261), vec3(_713 * _705, _713 * _706, _713 * _707)) + 1.0) * 0.5;
        float _3065 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _730 = sqrt(((_706 * _706) + (_705 * _705)) + (_707 * _707)) / (_618 + 9.9999997473787516355514526367188e-06);
        float _3076 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _732 = _731 * 2.0;
        float _736 = (1.0 - _731) / (_731 + 1.0);
        float _3087 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _746 = ((((1.0 - _737) * (_732 + 2.0)) * exp2(log2(isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0))) * (_732 + 1.0))) + _737) * _618;
        _754 = _585;
        _756 = _584;
        _757 = _583;
        _758 = _595;
        _759 = _594;
        _760 = _593;
        _761 = _605;
        _762 = _604;
        _763 = _603;
        _764 = _618;
        _765 = _617;
        _766 = _616;
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0)));
        _768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0)));
        _769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)));
    }
    else
    {
        _754 = _755;
        _756 = _755;
        _757 = _755;
        _758 = _755;
        _759 = _755;
        _760 = _755;
        _761 = _755;
        _762 = _755;
        _763 = _755;
        _764 = _755;
        _765 = _755;
        _766 = _755;
        _767 = 0.0;
        _768 = 0.0;
        _769 = 0.0;
    }
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _795 = fma(_452, cbModelParam._m0[30u].z, fma(_448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _444));
        float _799 = fma(_452, cbModelParam._m0[31u].z, fma(_448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _444));
        float _803 = fma(_452, cbModelParam._m0[32u].z, fma(_448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _444));
        float _826 = _444 + _259;
        float _827 = _448 + _260;
        float _828 = _452 + _261;
        float _838 = fma(_828, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826)) - _795;
        float _839 = fma(_828, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826)) - _799;
        float _840 = fma(_828, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826)) - _803;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_795 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_799 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[35u].z) + ((((((_803 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _894 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_861.x + (-0.5));
        float _896 = _894 * (_861.y + (-0.5));
        float _897 = _894 * (_861.z + (-0.5));
        float _904 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_868.x + (-0.5));
        float _906 = _904 * (_868.y + (-0.5));
        float _907 = _904 * (_868.z + (-0.5));
        float _914 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_875.x + (-0.5));
        float _916 = _914 * (_875.y + (-0.5));
        float _917 = _914 * (_875.z + (-0.5));
        float _924 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_882.x + (-0.5));
        float _926 = _924 * (_882.y + (-0.5));
        float _927 = _924 * (_882.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_259, _260, _261), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3128 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3139 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3150 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) * (_958 + 1.0))) + _963) * _928;
        float _973 = _896 * 0.5;
        float _974 = _906 * 0.5;
        float _975 = _916 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_259, _260, _261), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3161 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3172 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3183 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0))) * (_1000 + 1.0))) + _1005) * _929;
        float _1015 = _897 * 0.5;
        float _1016 = _907 * 0.5;
        float _1017 = _917 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_259, _260, _261), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3194 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3205 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3216 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0))) * (_1042 + 1.0))) + _1047) * _930;
        _1064 = _897;
        _1065 = _896;
        _1066 = _895;
        _1067 = _907;
        _1068 = _906;
        _1069 = _905;
        _1070 = _917;
        _1071 = _916;
        _1072 = _915;
        _1073 = _930;
        _1074 = _929;
        _1075 = _928;
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _755;
        _1065 = _755;
        _1066 = _755;
        _1067 = _755;
        _1068 = _755;
        _1069 = _755;
        _1070 = _755;
        _1071 = _755;
        _1072 = _755;
        _1073 = _755;
        _1074 = _755;
        _1075 = _755;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _767)) + _767;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _768)) + _768;
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _769)) + _769;
    float _1111 = fma(_1090, cbSceneParam._m0[89u].z, fma(_1089, cbSceneParam._m0[89u].y, _1088 * cbSceneParam._m0[89u].x));
    float _1114 = fma(_1090, cbSceneParam._m0[90u].z, fma(_1089, cbSceneParam._m0[90u].y, _1088 * cbSceneParam._m0[90u].x));
    float _1117 = fma(_1090, cbSceneParam._m0[91u].z, fma(_1089, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1088));
    float _1132 = _420 * 0.5;
    float _1133 = _421 * 0.5;
    float _1134 = _422 * 0.5;
    float _1135 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1138 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1141 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1175;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1148 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_754, _758, _761, _764));
        float _1152 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_756, _759, _762, _765));
        float _1156 = dot(vec4(_1132, _1133, _1134, 1.0), vec4(_757, _760, _763, _766));
        float _1163 = dot(vec4(cbModelParam._m0[39u]), vec4(_1132, _1133, _1134, 1.0));
        _1175 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1163) ? 0.0 : (isnan(0.0) ? _1163 : max(0.0, _1163))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1175 = 1.0;
    }
    float _1186;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1177 = dot(vec4(cbModelParam._m0[40u]), vec4(_1132, _1133, _1134, 1.0));
        _1186 = dot(vec3(isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1177) ? 0.0 : (isnan(0.0) ? _1177 : max(0.0, _1177))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1186 = 1.0;
    }
    float _1190 = (_1186 * cbModelParam._m0[1u].x) + (_1175 * (1.0 - cbModelParam._m0[1u].x));
    float _1199 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1280;
    float _1282;
    float _1284;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1247 = fma(_452, cbModelParam._m0[13u].z, fma(_448, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _444)) + cbModelParam._m0[13u].w;
        float _1251 = fma(_452, cbModelParam._m0[14u].z, fma(_448, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _444)) + cbModelParam._m0[14u].w;
        float _1255 = fma(_452, cbModelParam._m0[15u].z, fma(_448, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _444)) + cbModelParam._m0[15u].w;
        float _1258 = fma(_422, cbModelParam._m0[13u].z, fma(_421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _420));
        float _1261 = fma(_422, cbModelParam._m0[14u].z, fma(_421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _420));
        float _1264 = fma(_422, cbModelParam._m0[15u].z, fma(_421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _420));
        float _1290;
        if (_1258 > 0.0)
        {
            _1290 = abs((1.0 - _1247) / _1258);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1258 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1247 + 1.0) / _1258);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1290 = frontier_phi_14_12_ladder;
        }
        float _1495;
        if (_1261 > 0.0)
        {
            _1495 = abs((1.0 - _1251) / _1261);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1261 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1251 + 1.0) / _1261);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1495 = frontier_phi_23_19_ladder;
        }
        float _1684;
        if (_1264 > 0.0)
        {
            _1684 = abs((1.0 - _1255) / _1264);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1264 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1255 + 1.0) / _1264);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1684 = frontier_phi_35_30_ladder;
        }
        float _1686 = isnan(_1495) ? _1290 : (isnan(_1290) ? _1495 : min(_1290, _1495));
        float _1687 = isnan(_1684) ? _1686 : (isnan(_1686) ? _1684 : min(_1686, _1684));
        float _1691 = (_1687 * _1258) + _1247;
        float _1692 = (_1687 * _1261) + _1251;
        float _1693 = (_1687 * _1264) + _1255;
        float _1694 = _1687 * 9.9999997473787516355514526367188e-05;
        float _1696 = (-1.0) - _1694;
        float _1698 = _1694 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1693 > _1698) || ((_1693 < _1696) || ((_1692 > _1698) || ((_1692 < _1696) || ((_1691 < _1696) || (_1691 > _1698))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1693, cbModelParam._m0[9u].z, fma(_1692, cbModelParam._m0[9u].y, _1691 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1693, cbModelParam._m0[10u].z, fma(_1692, cbModelParam._m0[10u].y, _1691 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1693, cbModelParam._m0[11u].z, fma(_1692, cbModelParam._m0[11u].y, _1691 * cbModelParam._m0[11u].x))), _1199);
            frontier_phi_13_35_ladder = _1790.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1790.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1790.x * cbModelParam._m0[1u].y;
        }
        _1280 = frontier_phi_13_35_ladder_2;
        _1282 = frontier_phi_13_35_ladder_1;
        _1284 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_420, _421, _422), _1199);
        _1280 = _1268.x * cbModelParam._m0[1u].y;
        _1282 = _1268.y * cbModelParam._m0[1u].y;
        _1284 = _1268.z * cbModelParam._m0[1u].y;
    }
    float _1287 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1343 = fma(_452, cbModelParam._m0[21u].z, fma(_448, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _444)) + cbModelParam._m0[21u].w;
        float _1347 = fma(_452, cbModelParam._m0[22u].z, fma(_448, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _444)) + cbModelParam._m0[22u].w;
        float _1351 = fma(_452, cbModelParam._m0[23u].z, fma(_448, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _444)) + cbModelParam._m0[23u].w;
        float _1354 = fma(_422, cbModelParam._m0[21u].z, fma(_421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _420));
        float _1357 = fma(_422, cbModelParam._m0[22u].z, fma(_421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _420));
        float _1360 = fma(_422, cbModelParam._m0[23u].z, fma(_421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _420));
        float _1500;
        if (_1354 > 0.0)
        {
            _1500 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1500 = frontier_phi_25_21_ladder;
        }
        float _1711;
        if (_1357 > 0.0)
        {
            _1711 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1711 = frontier_phi_37_32_ladder;
        }
        float _1862;
        if (_1360 > 0.0)
        {
            _1862 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1862 = frontier_phi_46_43_ladder;
        }
        float _1864 = isnan(_1711) ? _1500 : (isnan(_1500) ? _1711 : min(_1500, _1711));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1354) + _1343;
        float _1870 = (_1865 * _1357) + _1347;
        float _1871 = (_1865 * _1360) + _1351;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1873 = (-1.0) - _1872;
        float _1875 = _1872 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1871 > _1875) || ((_1871 < _1873) || ((_1870 > _1875) || ((_1870 < _1873) || ((_1869 < _1873) || (_1869 > _1875))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1871, cbModelParam._m0[17u].z, fma(_1870, cbModelParam._m0[17u].y, _1869 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1871, cbModelParam._m0[18u].z, fma(_1870, cbModelParam._m0[18u].y, _1869 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1871, cbModelParam._m0[19u].z, fma(_1870, cbModelParam._m0[19u].y, _1869 * cbModelParam._m0[19u].x))), _1287);
            frontier_phi_22_46_ladder = _2108.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2108.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2108.x * cbModelParam._m0[1u].z;
        }
        _1379 = frontier_phi_22_46_ladder_2;
        _1381 = frontier_phi_22_46_ladder_1;
        _1383 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_420, _421, _422), _1287);
        _1379 = _1363.x * cbModelParam._m0[1u].z;
        _1381 = _1363.y * cbModelParam._m0[1u].z;
        _1383 = _1363.z * cbModelParam._m0[1u].z;
    }
    float _1395 = _412 * 0.01200000010430812835693359375;
    float _1397 = _1395 * ((cbModelParam._m0[1u].w * (_1379 - _1280)) + _1280);
    float _1398 = _1395 * ((cbModelParam._m0[1u].w * (_1381 - _1282)) + _1282);
    float _1399 = _1395 * ((cbModelParam._m0[1u].w * (_1383 - _1284)) + _1284);
    float _1402 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, _1397 * cbSceneParam._m0[91u].x));
    uvec4 _1418 = floatBitsToUint(cbInstanceData._m0[_387 + 5u]);
    uint _1420 = _1418.x * 14u;
    uint _1421 = _1420 + 13u;
    float _1428 = _412 + (-1.0);
    float _1433 = (cbLight._m0[_1421].x * _1428) + 1.0;
    float _1434 = (cbLight._m0[_1421].y * _1428) + 1.0;
    float _1435 = (cbLight._m0[_1421].z * _1428) + 1.0;
    float _1436 = (cbLight._m0[_1421].w * _1428) + 1.0;
    uint _1437 = _1420 + 5u;
    float _1443 = isnan(1.0) ? _1434 : (isnan(_1434) ? 1.0 : min(_1434, 1.0));
    uint _1447 = _1420 + 4u;
    float _1454 = isnan(1.0) ? _1433 : (isnan(_1433) ? 1.0 : min(_1433, 1.0));
    uint _1458 = _1420 | 1u;
    float _1469 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_259, _260, _261));
    float _1472 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_259, _260, _261));
    float _3352 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _3363 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
    float _1477 = (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.3183098733425140380859375;
    float _1479 = (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * 0.3183098733425140380859375;
    float _1486 = ((cbLight._m0[_1437].x * _1443) * _1479) + ((cbLight._m0[_1447].x * _1454) * _1477);
    float _1487 = ((_1443 * cbLight._m0[_1437].y) * _1479) + ((_1454 * cbLight._m0[_1447].y) * _1477);
    float _1488 = ((_1443 * cbLight._m0[_1437].z) * _1479) + ((_1454 * cbLight._m0[_1447].z) * _1477);
    uvec4 _1492 = floatBitsToUint(cbLight._m0[_1420 + 12u]);
    bool _1494 = _1492.x == 0u;
    float _1505;
    float _1507;
    float _1509;
    if (_1494)
    {
        _1505 = _1486;
        _1507 = _1487;
        _1509 = _1488;
    }
    else
    {
        uint _1513 = _1420 + 6u;
        float _1529 = (dot(vec3(cbLight._m0[_1420 + 2u].xyz), vec3(_259, _260, _261)) * 0.5) + 0.5;
        float _1530 = _1529 * _1529;
        float _3374 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1532 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1505 = (((cbLight._m0[_1513].x * 0.3183098733425140380859375) * _1531) * _1532) + _1486;
        _1507 = (((cbLight._m0[_1513].y * 0.3183098733425140380859375) * _1531) * _1532) + _1487;
        _1509 = (((cbLight._m0[_1513].z * 0.3183098733425140380859375) * _1531) * _1532) + _1488;
    }
    bool _1512 = _1492.y == 0u;
    float _1550;
    float _1552;
    float _1554;
    if (_1512)
    {
        _1550 = _1505;
        _1552 = _1507;
        _1554 = _1509;
    }
    else
    {
        uint _1655 = _1420 + 7u;
        float _1671 = (dot(vec3(cbLight._m0[_1420 + 3u].xyz), vec3(_259, _260, _261)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3390 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1674 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1550 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1505;
        _1552 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1507;
        _1554 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1509;
    }
    uint _1556 = _1420 + 8u;
    float _1562 = cbLight._m0[_1420].x + _338;
    float _1563 = cbLight._m0[_1420].y + _339;
    float _1564 = cbLight._m0[_1420].z + _340;
    float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
    float _1572 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1420].xyz));
    float _3406 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1575 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _3417 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _1576 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _1577 = dot(vec3(cbLight._m0[_1420].xyz), vec3(_1562 * _1568, _1563 * _1568, _1564 * _1568));
    float _3428 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1588 = (exp2(log2(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1594 = (0.5 / ((_1575 + 9.9999999392252902907785028219223e-09) + _1576)) * _1575;
    float _3439 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _1596 = (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * 0.31831014156341552734375;
    uint _1607 = _1420 + 9u;
    float _1613 = cbLight._m0[_1458].x + _338;
    float _1614 = cbLight._m0[_1458].y + _339;
    float _1615 = cbLight._m0[_1458].z + _340;
    float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
    float _1623 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1458].xyz));
    float _3450 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1626 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _1627 = dot(vec3(cbLight._m0[_1458].xyz), vec3(_1613 * _1619, _1614 * _1619, _1615 * _1619));
    float _3461 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1636 = (exp2(log2(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1626 + 9.9999999392252902907785028219223e-09) + _1576)) * _1626;
    float _3472 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * 0.31831014156341552734375;
    float _1652 = (((_1636 * cbLight._m0[_1607].x) * _1642) * _1443) + (((_1588 * cbLight._m0[_1556].x) * _1596) * _1454);
    float _1653 = (((_1636 * cbLight._m0[_1607].y) * _1642) * _1443) + (((_1588 * cbLight._m0[_1556].y) * _1596) * _1454);
    float _1654 = (((_1636 * cbLight._m0[_1607].z) * _1642) * _1443) + (((_1588 * cbLight._m0[_1556].z) * _1596) * _1454);
    float _1716;
    float _1718;
    float _1720;
    if (_1494)
    {
        _1716 = _1652;
        _1718 = _1653;
        _1720 = _1654;
    }
    else
    {
        uint _1722 = _1420 + 10u;
        uint _1728 = _1420 + 2u;
        float _1734 = cbLight._m0[_1728].x + _338;
        float _1735 = cbLight._m0[_1728].y + _339;
        float _1736 = cbLight._m0[_1728].z + _340;
        float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
        float _1744 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1728].xyz));
        float _3483 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1747 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1748 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1734 * _1740, _1735 * _1740, _1736 * _1740));
        float _3494 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = (exp2(log2(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1761 = (0.5 / ((_1747 + 9.9999999392252902907785028219223e-09) + _1576)) * _1747;
        float _3505 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1763 = (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * 0.31831014156341552734375;
        float _1764 = isnan(1.0) ? _1435 : (isnan(_1435) ? 1.0 : min(_1435, 1.0));
        _1716 = (((_1757 * cbLight._m0[_1722].x) * _1763) * _1764) + _1652;
        _1718 = (((_1757 * cbLight._m0[_1722].y) * _1763) * _1764) + _1653;
        _1720 = (((_1757 * cbLight._m0[_1722].z) * _1763) * _1764) + _1654;
    }
    float _1799;
    float _1801;
    float _1803;
    if (_1512)
    {
        _1799 = _1716;
        _1801 = _1718;
        _1803 = _1720;
    }
    else
    {
        uint _1810 = _1420 + 11u;
        uint _1816 = _1420 + 3u;
        float _1822 = cbLight._m0[_1816].x + _338;
        float _1823 = cbLight._m0[_1816].y + _339;
        float _1824 = cbLight._m0[_1816].z + _340;
        float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
        float _1832 = dot(vec3(_259, _260, _261), vec3(cbLight._m0[_1816].xyz));
        float _3521 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1835 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1836 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1822 * _1828, _1823 * _1828, _1824 * _1828));
        float _3532 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = (exp2(log2(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1849 = (0.5 / ((_1835 + 9.9999999392252902907785028219223e-09) + _1576)) * _1835;
        float _3543 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1851 = (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.31831014156341552734375;
        float _1852 = isnan(1.0) ? _1436 : (isnan(_1436) ? 1.0 : min(_1436, 1.0));
        _1799 = (((_1845 * cbLight._m0[_1810].x) * _1851) * _1852) + _1716;
        _1801 = (((_1845 * cbLight._m0[_1810].y) * _1851) * _1852) + _1718;
        _1803 = (((_1845 * cbLight._m0[_1810].z) * _1851) * _1852) + _1720;
    }
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    if (_1418.y == 0u)
    {
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1927;
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1927;
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1927;
        uvec4 _1942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1943 = _1942.x;
        uint _1954 = uint((float(_1942.y) * floor(float(uint(cbSceneParam._m0[85u].y * _347) / _1943))) + floor(float(uint(cbSceneParam._m0[85u].x * _346) / _1943)));
        float _1964 = (log2(_1930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1965 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        uint _1968 = uint(isnan(14.0) ? _1965 : (isnan(_1965) ? 14.0 : min(_1965, 14.0)));
        uvec4 _1973 = texelFetch(g_lightClusterGridBuffer, int(((_1968 << 2u) + (_1954 << 6u)) >> 2u));
        uint _1974 = _1973.x;
        uint _1975 = _1942.z;
        float _2113;
        float _2115;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        if (((((1u << ((_1975 >> 4u) & 15u)) + 4294967295u) & _1974) == 0u) || ((_1975 & 240u) == 0u))
        {
            _2113 = 0.0;
            _2115 = 0.0;
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
        }
        else
        {
            float _2114;
            float _2116;
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            float _2268 = 0.0;
            float _2269 = 0.0;
            uint _2270 = 0u;
            uint _2279;
            bool _2280;
            for (;;)
            {
                _2279 = texelFetch(g_lightClassification, int((((_1968 << 5u) + (_1954 << 9u)) + (_2270 << 2u)) >> 2u)).x;
                _2280 = _2279 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2280)
                {
                    frontier_phi_61_pred = _2264;
                    frontier_phi_61_pred_1 = _2269;
                    frontier_phi_61_pred_2 = _2268;
                    frontier_phi_61_pred_3 = _2267;
                    frontier_phi_61_pred_4 = _2266;
                    frontier_phi_61_pred_5 = _2265;
                }
                else
                {
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    float _2392;
                    float _2393;
                    uint _2394;
                    _2388 = _2264;
                    _2389 = _2265;
                    _2390 = _2266;
                    _2391 = _2267;
                    _2392 = _2268;
                    _2393 = _2269;
                    _2394 = _2279;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    float _2325;
                    for (;;)
                    {
                        uint _2398 = uint(findLSB(_2394)) + (_2270 << 5u);
                        uint _2395 = (_2394 + 4294967295u) & _2394;
                        uint _2400 = _2398 * 48u;
                        vec4 _2414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2400)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2400 + 3u)).x));
                        uint _2420 = (_2398 * 48u) + 4u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2420)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2420 + 3u)).x));
                        uint _2439 = (_2398 * 48u) + 8u;
                        vec3 _2450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x));
                        float _2454 = _2414.x - _1928;
                        float _2455 = _2414.y - _1929;
                        float _2456 = _2414.z - _1930;
                        float _2457 = dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456));
                        float _2460 = inversesqrt(_2457);
                        float _2469 = 1.0 - (_2457 * _2414.w);
                        float _3569 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                        float _2470 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
                        float _2471 = sqrt(_2457) * _2433.w;
                        float _2474 = 1.39999997615814208984375 / (_2471 + 1.39999997615814208984375);
                        float _2475 = _2474 * _2474;
                        float _2478 = ((1.0 - _2475) * dot(vec3(_368, _371, _374), vec3(_2460 * _2454, _2460 * _2455, _2460 * _2456))) + _2475;
                        float _2481 = _2471 * _2471;
                        float _2485 = ((isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))) * _2470) / ((_2481 * 0.699999988079071044921875) + 1.0);
                        float _2489 = (-0.0) - _1928;
                        float _2490 = (-0.0) - _1929;
                        float _2491 = (-0.0) - _1930;
                        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
                        float _2499 = dot(vec3(_368, _371, _374), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491));
                        float _3585 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _3596 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
                        float _2503 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
                        float _2507 = (0.5 / (((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) + 9.9999999392252902907785028219223e-09) + _2503)) * _2503;
                        float _3607 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2516 = (((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 3.1415927410125732421875) / ((_2481 * 2.1991131305694580078125) + 3.141590118408203125)) * _2470;
                        _2323 = (_2485 * _2433.x) + _2391;
                        _2324 = (_2485 * _2433.y) + _2392;
                        _2325 = (_2485 * _2433.z) + _2393;
                        _2320 = (_2516 * _2450.x) + _2388;
                        _2321 = (_2516 * _2450.y) + _2389;
                        _2322 = (_2516 * _2450.z) + _2390;
                        if (_2395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2388 = _2320;
                            _2389 = _2321;
                            _2390 = _2322;
                            _2391 = _2323;
                            _2392 = _2324;
                            _2393 = _2325;
                            _2394 = _2395;
                        }
                    }
                    frontier_phi_61_pred = _2320;
                    frontier_phi_61_pred_1 = _2325;
                    frontier_phi_61_pred_2 = _2324;
                    frontier_phi_61_pred_3 = _2323;
                    frontier_phi_61_pred_4 = _2322;
                    frontier_phi_61_pred_5 = _2321;
                }
                _2114 = frontier_phi_61_pred;
                _2124 = frontier_phi_61_pred_1;
                _2122 = frontier_phi_61_pred_2;
                _2120 = frontier_phi_61_pred_3;
                _2118 = frontier_phi_61_pred_4;
                _2116 = frontier_phi_61_pred_5;
                uint _2271 = _2270 + 1u;
                if (_2271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2264 = _2114;
                    _2265 = _2116;
                    _2266 = _2118;
                    _2267 = _2120;
                    _2268 = _2122;
                    _2269 = _2124;
                    _2270 = _2271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2113 = _2114;
            _2115 = _2116;
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
        }
        uvec4 _2127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2128 = _2127.z;
        uint _2130 = (_2128 >> 8u) & 15u;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        if (((4294967295u << _2130) & _1974) == 0u)
        {
            _2235 = _2113;
            _2237 = _2115;
            _2239 = _2117;
            _2241 = _2119;
            _2243 = _2121;
            _2245 = _2123;
        }
        else
        {
            float _2260 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2130 < ((_2128 >> 12u) & 15u))
            {
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2246;
                float _2371 = _2113;
                float _2372 = _2115;
                float _2373 = _2117;
                float _2374 = _2119;
                float _2375 = _2121;
                float _2376 = _2123;
                uint _2377 = _2130;
                uint _2386;
                bool _2387;
                for (;;)
                {
                    _2386 = texelFetch(g_lightClassification, int((((_1968 << 5u) + (_1954 << 9u)) + (_2377 << 2u)) >> 2u)).x;
                    _2387 = _2386 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2387)
                    {
                        frontier_phi_67_pred = _2374;
                        frontier_phi_67_pred_1 = _2375;
                        frontier_phi_67_pred_2 = _2376;
                        frontier_phi_67_pred_3 = _2373;
                        frontier_phi_67_pred_4 = _2372;
                        frontier_phi_67_pred_5 = _2371;
                    }
                    else
                    {
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2526;
                        float _2773;
                        float _2774;
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2534 = _2371;
                        float _2535 = _2372;
                        float _2536 = _2373;
                        float _2537 = _2374;
                        float _2538 = _2375;
                        float _2539 = _2376;
                        uint _2540 = _2386;
                        uint _2541;
                        vec4 _2566;
                        float _2567;
                        vec4 _2582;
                        vec3 _2594;
                        vec4 _2610;
                        vec4 _2626;
                        float _2673;
                        bool _2674;
                        for (;;)
                        {
                            uint _2551 = ((_2377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2540));
                            _2541 = (_2540 + 4294967295u) & _2540;
                            uint _2553 = _2551 * 40u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            _2567 = _2566.w;
                            uint _2569 = (_2551 * 40u) + 4u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2584 = (_2551 * 40u) + 8u;
                            _2594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x));
                            uint _2597 = (_2551 * 40u) + 16u;
                            _2610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 3u)).x));
                            uint _2613 = (_2551 * 40u) + 20u;
                            _2626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2613 + 3u)).x));
                            uint _2629 = (_2551 * 40u) + 24u;
                            vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            uint _2648 = (_2551 * 40u) + 28u;
                            vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2673 = fma(_1930, _2661.z, fma(_1929, _2661.y, _2661.x * _1928)) + _2661.w;
                            _2674 = !((fma(_1930, _2642.z, fma(_1929, _2642.y, _2642.x * _1928)) + _2642.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2674)
                            {
                                float _2701 = _2566.x - _1928;
                                float _2702 = _2566.y - _1929;
                                float _2703 = _2566.z - _1930;
                                float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                                float _2707 = inversesqrt(_2704);
                                float _2708 = _2707 * _2701;
                                float _2709 = _2707 * _2702;
                                float _2710 = _2707 * _2703;
                                float _2714 = 1.0 - (_2704 / (_2567 * _2567));
                                float _3618 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2715 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
                                float _2719 = sqrt(_2704) * _2582.w;
                                float _2721 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                                float _2722 = _2721 * _2721;
                                float _2723 = 1.0 - _2722;
                                float _2725 = (_2723 * dot(vec3(_2708, _2709, _2710), vec3(_368, _371, _374))) + _2722;
                                float _2728 = _2719 * _2719;
                                float _2732 = (fma(_1930, _2610.z, fma(_1929, _2610.y, _2610.x * _1928)) + _2610.w) / _2673;
                                float _2733 = (fma(_1930, _2626.z, fma(_1929, _2626.y, _2626.x * _1928)) + _2626.w) / _2673;
                                float _2737 = 1.0 - dot(vec2(_2732, _2733), vec2(_2732, _2733));
                                float _3634 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                                float _2738 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                                float _2739 = _2738 * (((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2715) / ((_2728 * 0.699999988079071044921875) + 1.0));
                                float _2749 = dot(vec3(_368, _371, _374), vec3((-0.0) - (_1928 * _2260), (-0.0) - (_1929 * _2260), (-0.0) - (_1930 * _2260)));
                                float _3645 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                                float _2757 = (_2723 * dot(vec3(_368, _371, _374), vec3(_2708, _2709, _2710))) + _2722;
                                float _3656 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2758 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
                                float _2762 = (0.5 / (((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) + 9.9999999392252902907785028219223e-09) + _2758)) * _2758;
                                float _3667 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2769 = (_2738 * _2715) * (((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 3.1415927410125732421875) / ((_2728 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2769 * _2594.x;
                                frontier_phi_73_pred_1 = _2769 * _2594.y;
                                frontier_phi_73_pred_2 = _2739 * _2582.z;
                                frontier_phi_73_pred_3 = _2739 * _2582.y;
                                frontier_phi_73_pred_4 = _2739 * _2582.x;
                                frontier_phi_73_pred_5 = _2769 * _2594.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2773 = frontier_phi_73_pred;
                            _2774 = frontier_phi_73_pred_1;
                            _2778 = frontier_phi_73_pred_2;
                            _2777 = frontier_phi_73_pred_3;
                            _2776 = frontier_phi_73_pred_4;
                            _2775 = frontier_phi_73_pred_5;
                            _2524 = _2776 + _2537;
                            _2525 = _2777 + _2538;
                            _2526 = _2778 + _2539;
                            _2521 = _2773 + _2534;
                            _2522 = _2774 + _2535;
                            _2523 = _2775 + _2536;
                            if (_2541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2526;
                                _2540 = _2541;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2524;
                        frontier_phi_67_pred_1 = _2525;
                        frontier_phi_67_pred_2 = _2526;
                        frontier_phi_67_pred_3 = _2523;
                        frontier_phi_67_pred_4 = _2522;
                        frontier_phi_67_pred_5 = _2521;
                    }
                    _2242 = frontier_phi_67_pred;
                    _2244 = frontier_phi_67_pred_1;
                    _2246 = frontier_phi_67_pred_2;
                    _2240 = frontier_phi_67_pred_3;
                    _2238 = frontier_phi_67_pred_4;
                    _2236 = frontier_phi_67_pred_5;
                    uint _2378 = _2377 + 1u;
                    if (_2378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2371 = _2236;
                        _2372 = _2238;
                        _2373 = _2240;
                        _2374 = _2242;
                        _2375 = _2244;
                        _2376 = _2246;
                        _2377 = _2378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2244;
                frontier_phi_55_56_ladder_1 = _2246;
                frontier_phi_55_56_ladder_2 = _2242;
                frontier_phi_55_56_ladder_3 = _2240;
                frontier_phi_55_56_ladder_4 = _2238;
                frontier_phi_55_56_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_55_56_ladder = _2121;
                frontier_phi_55_56_ladder_1 = _2123;
                frontier_phi_55_56_ladder_2 = _2119;
                frontier_phi_55_56_ladder_3 = _2117;
                frontier_phi_55_56_ladder_4 = _2115;
                frontier_phi_55_56_ladder_5 = _2113;
            }
            _2235 = frontier_phi_55_56_ladder_5;
            _2237 = frontier_phi_55_56_ladder_4;
            _2239 = frontier_phi_55_56_ladder_3;
            _2241 = frontier_phi_55_56_ladder_2;
            _2243 = frontier_phi_55_56_ladder;
            _2245 = frontier_phi_55_56_ladder_1;
        }
        float _2250 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
        _1987 = (_2250 * _2241) + _1550;
        _1989 = (_2250 * _2243) + _1552;
        _1991 = (_2250 * _2245) + _1554;
        _1993 = ((_2235 * 0.039999999105930328369140625) * _2250) + _1799;
        _1995 = ((_2237 * 0.039999999105930328369140625) * _2250) + _1801;
        _1997 = ((_2239 * 0.039999999105930328369140625) * _2250) + _1803;
    }
    else
    {
        _1987 = _1550;
        _1989 = _1552;
        _1991 = _1554;
        _1993 = _1799;
        _1995 = _1801;
        _1997 = _1803;
    }
    uint _2003 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _2012 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _231.x) * _254) * cbInstanceData._m0[_2003].x;
    float _2016 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _231.y) * _254) * cbInstanceData._m0[_2003].y;
    float _2020 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _231.z) * _254) * cbInstanceData._m0[_2003].z;
    float _3683 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3694 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3705 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _2037 = (((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1987 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _412))) + ((_1993 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _1190)) * cbPerFrame._m0[3u].x)) + _2012;
    float _2039 = (_2016 + ((_1995 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _1190)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1989 + ((isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))) * _412)));
    float _2041 = (_2020 + ((_1997 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _1190)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1991 + ((isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))) * _412)));
    float _3731 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2054 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    uint _2055 = _387 + 6u;
    float _2063 = _346 / cbSceneParam._m0[86u].x;
    float _2064 = _347 / cbSceneParam._m0[86u].y;
    vec4 _2078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, (log2((isnan(cbSceneParam._m0[77u].w) ? _280 : (isnan(_280) ? cbSceneParam._m0[77u].w : min(_280, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2080 = _2078.x;
    float _2081 = _2078.y;
    float _2082 = _2078.z;
    float _2083 = _2078.w;
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    if (_280 > cbSceneParam._m0[78u].w)
    {
        float _2138 = isnan(_280) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _280 : min(cbSceneParam._m0[80u].w, _280));
        float _2139 = _2138 / _280;
        float _2150 = _2139 * _331;
        float _2151 = _332 * _2139;
        float _2152 = (-0.0) - _2151;
        float _2154 = _2139 * _333;
        float _2156 = (cbSceneParam._m0[77u].w * _2152) / _2138;
        float _2157 = _2156 + cbSceneParam._m0[79u].w;
        float _2158 = cbSceneParam._m0[79u].w - _2151;
        float _2164 = sqrt(((_2150 * _2150) + (_2151 * _2151)) + (_2154 * _2154));
        float _2167 = (1.0 - (cbSceneParam._m0[77u].w / _2138)) * _2164;
        float _2172 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2174 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2333;
        if (abs((_2152 - _2156) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2333 = ((((_2157 > 0.0) ? exp2(_2172 * _2157) : (2.0 - exp2(_2174 * _2157))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2167;
        }
        else
        {
            float _2293 = 1.0 / cbSceneParam._m0[80u].x;
            float _2294 = isnan(_2158) ? _2157 : (isnan(_2157) ? _2158 : max(_2157, _2158));
            float _2295 = isnan(_2158) ? _2157 : (isnan(_2157) ? _2158 : min(_2157, _2158));
            float _2304 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : min(_2294, 0.0));
            float _2305 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : min(_2295, 0.0));
            _2333 = ((abs(_2164 / _2152) * cbSceneParam._m0[80u].y) * ((((_2304 - _2305) * 2.0) - ((exp2(_2172 * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)))) - exp2(_2172 * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))))) * _2293)) - ((exp2(_2174 * _2304) - exp2(_2174 * _2305)) * _2293))) + (_2167 * cbSceneParam._m0[80u].z);
        }
        vec4 _2335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2063, _2064, 1.0), 0.0);
        float _2344 = exp2((_2333 * (-1.44269502162933349609375)) * (1.0 - _2335.w));
        float _2345 = log2(_2344);
        float _2361 = log2(_2083);
        _2176 = (exp2(_2361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].x)) * _2335.x) / cbSceneParam._m0[78u].x)) + _2080;
        _2178 = (exp2(_2361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].y)) * _2335.y) / cbSceneParam._m0[78u].y)) + _2081;
        _2180 = (exp2(_2361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2345 * cbSceneParam._m0[78u].z)) * _2335.z) / cbSceneParam._m0[78u].z)) + _2082;
        _2182 = _2344 * _2083;
    }
    else
    {
        _2176 = _2080;
        _2178 = _2081;
        _2180 = _2082;
        _2182 = _2083;
    }
    float _2194 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2195 = _2194 == 3.0;
    float _2196 = log2(_2182);
    float _2200 = exp2(_2196 * cbSceneParam._m0[78u].x);
    float _2201 = exp2(_2196 * cbSceneParam._m0[78u].y);
    float _2202 = exp2(_2196 * cbSceneParam._m0[78u].z);
    float _2203 = _2200 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)));
    float _2204 = _2201 * (isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)));
    float _2205 = _2202 * (isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)));
    float _2214 = (_2194 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2214 * (_2195 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.y = _2214 * (_2195 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2178)));
    SV_Target.z = _2214 * (_2195 ? _2205 : (_2205 + (cbSceneParam._m0[72u].w * _2180)));
    SV_Target.w = cbInstanceData._m0[_2055].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2012) * _2054) * _2200) * _2214;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2016) * _2054) * _2201) * _2214;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2020) * _2054) * _2202) * _2214;
    SV_Target_1.w = cbInstanceData._m0[_2055].w;
}


