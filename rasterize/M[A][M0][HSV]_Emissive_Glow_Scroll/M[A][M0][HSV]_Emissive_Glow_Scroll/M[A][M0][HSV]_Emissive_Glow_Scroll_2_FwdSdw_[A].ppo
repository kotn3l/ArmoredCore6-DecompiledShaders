#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _787;
float _3277;
float _3278;
float _3279;
float _3280;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _247 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _248 = _247 * _173;
    float _249 = _247 * _174;
    float _250 = _247 * _175;
    float _3289 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3300 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3311 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _270 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _311 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _321 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _311);
    float _322 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _311);
    float _323 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _311);
    float _327 = inversesqrt(dot(vec3(_321, _322, _323), vec3(_321, _322, _323)));
    float _328 = _321 * _327;
    float _329 = _322 * _327;
    float _330 = _323 * _327;
    vec4 _335 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _337 = _335.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _466 = sqrt(((_321 * _321) + (_322 * _322)) + (_323 * _323));
        float _472 = (cbMatDynParam._m0[5u].x * _466) + cbMatDynParam._m0[5u].y;
        float _3322 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
        float _473 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _477 = (cbMatDynParam._m0[5u].z * _466) + cbMatDynParam._m0[5u].w;
        float _3333 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) - _473)) + _473) < ((_337 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _349 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _350 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _370 = fma(_250, cbSceneParam._m0[5u].z, fma(_249, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _248));
    float _373 = fma(_250, cbSceneParam._m0[6u].z, fma(_249, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _248));
    float _376 = fma(_250, cbSceneParam._m0[7u].z, fma(_249, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _248));
    uint _389 = uint(roundEven(NORMAL.w)) * 13u;
    uint _390 = _389 + 9u;
    uint _391 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _397 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_391].x;
    float _398 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_391].y;
    float _399 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_391].z;
    float _3344 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _401 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    vec4 _411 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _349, cbSceneParam._m0[86u].y * _350));
    float _414 = _411.x * TEXCOORD.z;
    float _415 = dot(vec3(_248, _249, _250), vec3(_328, _329, _330));
    float _418 = _415 * 2.0;
    float _423 = (_418 * _248) - _328;
    float _424 = (_418 * _249) - _329;
    float _425 = (_418 * _250) - _330;
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _786;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _511 = fma(_455, cbModelParam._m0[26u].z, fma(_451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _447));
        float _515 = fma(_455, cbModelParam._m0[27u].z, fma(_451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _447));
        float _519 = fma(_455, cbModelParam._m0[28u].z, fma(_451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _447));
        float _544 = _447 + _248;
        float _545 = _451 + _249;
        float _546 = _455 + _250;
        float _556 = fma(_546, cbModelParam._m0[26u].z, fma(_545, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544)) - _511;
        float _557 = fma(_546, cbModelParam._m0[27u].z, fma(_545, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544)) - _515;
        float _558 = fma(_546, cbModelParam._m0[28u].z, fma(_545, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544)) - _519;
        float _562 = inversesqrt(dot(vec3(_556, _557, _558), vec3(_556, _557, _558)));
        float _575 = ((_562 * _556) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_511 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _576 = ((_562 * _557) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_515 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _577 = ((_562 * _558) / cbModelParam._m0[34u].z) + ((((((_519 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _576, _577), 0.0);
        float _614 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_580.x + (-0.5));
        float _616 = _614 * (_580.y + (-0.5));
        float _617 = _614 * (_580.z + (-0.5));
        float _624 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_587.x + (-0.5));
        float _626 = _624 * (_587.y + (-0.5));
        float _627 = _624 * (_587.z + (-0.5));
        float _634 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_594.x + (-0.5));
        float _636 = _634 * (_594.y + (-0.5));
        float _637 = _634 * (_594.z + (-0.5));
        float _644 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _645 = _644 * (_601.x + (-0.5));
        float _646 = _644 * (_601.y + (-0.5));
        float _647 = _644 * (_601.z + (-0.5));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = _615 * 0.5;
        float _652 = _625 * 0.5;
        float _653 = _635 * 0.5;
        float _654 = dot(vec3(_651, _652, _653), vec3(_651, _652, _653));
        float _659 = (_654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_654);
        float _668 = (dot(vec3(_248, _249, _250), vec3(_659 * _651, _659 * _652, _659 * _653)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _678 = sqrt(((_652 * _652) + (_651 * _651)) + (_653 * _653)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _679 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _680 = _679 * 2.0;
        float _684 = (1.0 - _679) / (_679 + 1.0);
        float _3414 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _694 = ((((1.0 - _685) * (_680 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_680 + 1.0))) + _685) * _648;
        float _695 = _616 * 0.5;
        float _696 = _626 * 0.5;
        float _697 = _636 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _711 = (dot(vec3(_248, _249, _250), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _720 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _3447 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_722 + 1.0))) + _727) * _649;
        float _737 = _617 * 0.5;
        float _738 = _627 * 0.5;
        float _739 = _637 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(_248, _249, _250), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3480 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_764 + 1.0))) + _769) * _650;
        _786 = _617;
        _788 = _616;
        _789 = _615;
        _790 = _627;
        _791 = _626;
        _792 = _625;
        _793 = _637;
        _794 = _636;
        _795 = _635;
        _796 = _650;
        _797 = _649;
        _798 = _648;
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0)));
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
    }
    else
    {
        _786 = _787;
        _788 = _787;
        _789 = _787;
        _790 = _787;
        _791 = _787;
        _792 = _787;
        _793 = _787;
        _794 = _787;
        _795 = _787;
        _796 = _787;
        _797 = _787;
        _798 = _787;
        _799 = 0.0;
        _800 = 0.0;
        _801 = 0.0;
    }
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _830 = fma(_455, cbModelParam._m0[30u].z, fma(_451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _447));
        float _834 = fma(_455, cbModelParam._m0[31u].z, fma(_451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _447));
        float _838 = fma(_455, cbModelParam._m0[32u].z, fma(_451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _447));
        float _861 = _447 + _248;
        float _862 = _451 + _249;
        float _863 = _455 + _250;
        float _873 = fma(_863, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861)) - _830;
        float _874 = fma(_863, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861)) - _834;
        float _875 = fma(_863, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861)) - _838;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_830 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_834 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[35u].z) + ((((((_838 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _929 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_896.x + (-0.5));
        float _931 = _929 * (_896.y + (-0.5));
        float _932 = _929 * (_896.z + (-0.5));
        float _939 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_903.x + (-0.5));
        float _941 = _939 * (_903.y + (-0.5));
        float _942 = _939 * (_903.z + (-0.5));
        float _949 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_910.x + (-0.5));
        float _951 = _949 * (_910.y + (-0.5));
        float _952 = _949 * (_910.z + (-0.5));
        float _959 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_917.x + (-0.5));
        float _961 = _959 * (_917.y + (-0.5));
        float _962 = _959 * (_917.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_248, _249, _250), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3543 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_993 + 1.0))) + _998) * _963;
        float _1008 = _931 * 0.5;
        float _1009 = _941 * 0.5;
        float _1010 = _951 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_248, _249, _250), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3576 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1035 + 1.0))) + _1040) * _964;
        float _1050 = _932 * 0.5;
        float _1051 = _942 * 0.5;
        float _1052 = _952 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_248, _249, _250), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3609 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1077 + 1.0))) + _1082) * _965;
        _1099 = _932;
        _1100 = _931;
        _1101 = _930;
        _1102 = _942;
        _1103 = _941;
        _1104 = _940;
        _1105 = _952;
        _1106 = _951;
        _1107 = _950;
        _1108 = _965;
        _1109 = _964;
        _1110 = _963;
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1112 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _787;
        _1100 = _787;
        _1101 = _787;
        _1102 = _787;
        _1103 = _787;
        _1104 = _787;
        _1105 = _787;
        _1106 = _787;
        _1107 = _787;
        _1108 = _787;
        _1109 = _787;
        _1110 = _787;
        _1111 = 0.0;
        _1112 = 0.0;
        _1113 = 0.0;
    }
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _799)) + _799;
    float _1124 = (cbModelParam._m0[1u].x * (_1112 - _800)) + _800;
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _801)) + _801;
    float _1146 = fma(_1125, cbSceneParam._m0[89u].z, fma(_1124, cbSceneParam._m0[89u].y, _1123 * cbSceneParam._m0[89u].x));
    float _1149 = fma(_1125, cbSceneParam._m0[90u].z, fma(_1124, cbSceneParam._m0[90u].y, _1123 * cbSceneParam._m0[90u].x));
    float _1152 = fma(_1125, cbSceneParam._m0[91u].z, fma(_1124, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1123));
    float _1167 = _423 * 0.5;
    float _1168 = _424 * 0.5;
    float _1169 = _425 * 0.5;
    float _1170 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1173 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1100, _1103, _1106, _1109));
    float _1176 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_1099, _1102, _1105, _1108));
    float _1210;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1183 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_786, _790, _793, _796));
        float _1187 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_788, _791, _794, _797));
        float _1191 = dot(vec4(_1167, _1168, _1169, 1.0), vec4(_789, _792, _795, _798));
        float _1198 = dot(vec4(cbModelParam._m0[39u]), vec4(_1167, _1168, _1169, 1.0));
        _1210 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1210 = 1.0;
    }
    float _1221;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1212 = dot(vec4(cbModelParam._m0[40u]), vec4(_1167, _1168, _1169, 1.0));
        _1221 = dot(vec3(isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1212) ? 0.0 : (isnan(0.0) ? _1212 : max(0.0, _1212))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1221 = 1.0;
    }
    float _1225 = (_1221 * cbModelParam._m0[1u].x) + (_1210 * (1.0 - cbModelParam._m0[1u].x));
    float _1234 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1315;
    float _1317;
    float _1319;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1282 = fma(_455, cbModelParam._m0[13u].z, fma(_451, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _447)) + cbModelParam._m0[13u].w;
        float _1286 = fma(_455, cbModelParam._m0[14u].z, fma(_451, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _447)) + cbModelParam._m0[14u].w;
        float _1290 = fma(_455, cbModelParam._m0[15u].z, fma(_451, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _447)) + cbModelParam._m0[15u].w;
        float _1293 = fma(_425, cbModelParam._m0[13u].z, fma(_424, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423));
        float _1296 = fma(_425, cbModelParam._m0[14u].z, fma(_424, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423));
        float _1299 = fma(_425, cbModelParam._m0[15u].z, fma(_424, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423));
        float _1325;
        if (_1293 > 0.0)
        {
            _1325 = abs((1.0 - _1282) / _1293);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1293 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1282 + 1.0) / _1293);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1325 = frontier_phi_17_15_ladder;
        }
        float _1498;
        if (_1296 > 0.0)
        {
            _1498 = abs((1.0 - _1286) / _1296);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1296 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1286 + 1.0) / _1296);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1498 = frontier_phi_26_22_ladder;
        }
        float _1795;
        if (_1299 > 0.0)
        {
            _1795 = abs((1.0 - _1290) / _1299);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1290 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1795 = frontier_phi_38_33_ladder;
        }
        float _1797 = isnan(_1498) ? _1325 : (isnan(_1325) ? _1498 : min(_1325, _1498));
        float _1798 = isnan(_1795) ? _1797 : (isnan(_1797) ? _1795 : min(_1797, _1795));
        float _1802 = (_1798 * _1293) + _1282;
        float _1803 = (_1798 * _1296) + _1286;
        float _1804 = (_1798 * _1299) + _1290;
        float _1805 = _1798 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1805;
        float _1809 = _1805 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 > _1809) || ((_1803 < _1807) || ((_1802 < _1807) || (_1802 > _1809))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1804, cbModelParam._m0[9u].z, fma(_1803, cbModelParam._m0[9u].y, _1802 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1804, cbModelParam._m0[10u].z, fma(_1803, cbModelParam._m0[10u].y, _1802 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1804, cbModelParam._m0[11u].z, fma(_1803, cbModelParam._m0[11u].y, _1802 * cbModelParam._m0[11u].x))), _1234);
            frontier_phi_16_38_ladder = _1949.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1949.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1949.x * cbModelParam._m0[1u].y;
        }
        _1315 = frontier_phi_16_38_ladder_2;
        _1317 = frontier_phi_16_38_ladder_1;
        _1319 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_423, _424, _425), _1234);
        _1315 = _1303.x * cbModelParam._m0[1u].y;
        _1317 = _1303.y * cbModelParam._m0[1u].y;
        _1319 = _1303.z * cbModelParam._m0[1u].y;
    }
    float _1322 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1378 = fma(_455, cbModelParam._m0[21u].z, fma(_451, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _447)) + cbModelParam._m0[21u].w;
        float _1382 = fma(_455, cbModelParam._m0[22u].z, fma(_451, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _447)) + cbModelParam._m0[22u].w;
        float _1386 = fma(_455, cbModelParam._m0[23u].z, fma(_451, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _447)) + cbModelParam._m0[23u].w;
        float _1389 = fma(_425, cbModelParam._m0[21u].z, fma(_424, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423));
        float _1392 = fma(_425, cbModelParam._m0[22u].z, fma(_424, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423));
        float _1395 = fma(_425, cbModelParam._m0[23u].z, fma(_424, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423));
        float _1503;
        if (_1389 > 0.0)
        {
            _1503 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1503 = frontier_phi_28_24_ladder;
        }
        float _1822;
        if (_1392 > 0.0)
        {
            _1822 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1822 = frontier_phi_40_35_ladder;
        }
        float _2095;
        if (_1395 > 0.0)
        {
            _2095 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2095 = frontier_phi_50_47_ladder;
        }
        float _2097 = isnan(_1822) ? _1503 : (isnan(_1503) ? _1822 : min(_1503, _1822));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1389) + _1378;
        float _2103 = (_2098 * _1392) + _1382;
        float _2104 = (_2098 * _1395) + _1386;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2105;
        float _2108 = _2105 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2104 > _2108) || ((_2104 < _2106) || ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 < _2106) || (_2102 > _2108))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2195 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2104, cbModelParam._m0[17u].z, fma(_2103, cbModelParam._m0[17u].y, _2102 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2104, cbModelParam._m0[18u].z, fma(_2103, cbModelParam._m0[18u].y, _2102 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2104, cbModelParam._m0[19u].z, fma(_2103, cbModelParam._m0[19u].y, _2102 * cbModelParam._m0[19u].x))), _1322);
            frontier_phi_25_50_ladder = _2195.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2195.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2195.x * cbModelParam._m0[1u].z;
        }
        _1414 = frontier_phi_25_50_ladder_2;
        _1416 = frontier_phi_25_50_ladder_1;
        _1418 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1398 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_423, _424, _425), _1322);
        _1414 = _1398.x * cbModelParam._m0[1u].z;
        _1416 = _1398.y * cbModelParam._m0[1u].z;
        _1418 = _1398.z * cbModelParam._m0[1u].z;
    }
    float _1430 = _414 * 0.01200000010430812835693359375;
    float _1432 = _1430 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1433 = _1430 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1434 = _1430 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1437 = fma(_1434, cbSceneParam._m0[89u].z, fma(_1433, cbSceneParam._m0[89u].y, _1432 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1434, cbSceneParam._m0[90u].z, fma(_1433, cbSceneParam._m0[90u].y, _1432 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1434, cbSceneParam._m0[91u].z, fma(_1433, cbSceneParam._m0[91u].y, _1432 * cbSceneParam._m0[91u].x));
    float _1477 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1481 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1485 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1489 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1490 = _1477 / _1489;
    float _1491 = _1481 / _1489;
    float _1492 = _1485 / _1489;
    float _1639;
    float _1640;
    float _1641;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1519 = ((uint(_1492 > cbSceneParam._m0[59u].y) + uint(_1492 > cbSceneParam._m0[59u].x)) + uint(_1492 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1520 = _1519 + 43u;
        uint _1528 = _1519 + 44u;
        uint _1536 = _1519 + 45u;
        uint _1544 = _1519 + 46u;
        float _1555 = fma(_1489, cbSceneParam._m0[_1520].w, fma(_1485, cbSceneParam._m0[_1520].z, fma(_1481, cbSceneParam._m0[_1520].y, _1477 * cbSceneParam._m0[_1520].x)));
        float _1559 = fma(_1489, cbSceneParam._m0[_1528].w, fma(_1485, cbSceneParam._m0[_1528].z, fma(_1481, cbSceneParam._m0[_1528].y, _1477 * cbSceneParam._m0[_1528].x)));
        float _1567 = fma(_1489, cbSceneParam._m0[_1544].w, fma(_1485, cbSceneParam._m0[_1544].z, fma(_1481, cbSceneParam._m0[_1544].y, _1477 * cbSceneParam._m0[_1544].x)));
        float _1572 = cbSceneParam._m0[33u].z * _1567;
        float _1574 = cbSceneParam._m0[33u].w * _1567;
        float _1577 = fma(_1489, cbSceneParam._m0[_1536].w, fma(_1485, cbSceneParam._m0[_1536].z, fma(_1481, cbSceneParam._m0[_1536].y, _1477 * cbSceneParam._m0[_1536].x))) / _1567;
        float _1625 = (cbSceneParam._m0[33u].x - sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492))) * cbSceneParam._m0[33u].y;
        float _3735 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1632 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 + _1555) / _1567, (_1574 + _1559) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1574 + _1555) / _1567, (_1559 - _1572) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1555 - _1572) / _1567, (_1559 - _1574) / _1567), _1577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1555 - _1574) / _1567, (_1572 + _1559) / _1567), _1577), 0.0)).x), vec4(0.25)));
        _1639 = 1.0 - (_1632 * cbSceneParam._m0[34u].x);
        _1640 = 1.0 - (_1632 * cbSceneParam._m0[34u].y);
        _1641 = 1.0 - (_1632 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1639 = 1.0;
        _1640 = 1.0;
        _1641 = 1.0;
    }
    float _1705;
    float _1707;
    float _1709;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1693 = fma(_1489, cbSceneParam._m0[63u].w, fma(_1485, cbSceneParam._m0[63u].z, fma(_1481, cbSceneParam._m0[63u].y, _1477 * cbSceneParam._m0[63u].x)));
        float _1694 = fma(_1489, cbSceneParam._m0[60u].w, fma(_1485, cbSceneParam._m0[60u].z, fma(_1481, cbSceneParam._m0[60u].y, _1477 * cbSceneParam._m0[60u].x))) / _1693;
        float _1695 = fma(_1489, cbSceneParam._m0[61u].w, fma(_1485, cbSceneParam._m0[61u].z, fma(_1481, cbSceneParam._m0[61u].y, _1477 * cbSceneParam._m0[61u].x))) / _1693;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1694 >= cbSceneParam._m0[64u].x) && (_1695 >= cbSceneParam._m0[64u].y)) && (_1694 <= cbSceneParam._m0[64u].z)) && (_1695 <= cbSceneParam._m0[64u].w))
        {
            float _1835 = fma(_1489, cbSceneParam._m0[62u].w, fma(_1485, cbSceneParam._m0[62u].z, fma(_1481, cbSceneParam._m0[62u].y, _1477 * cbSceneParam._m0[62u].x))) / _1693;
            float _1839 = isnan(cbSceneParam._m0[41u].w) ? _1835 : (isnan(_1835) ? cbSceneParam._m0[41u].w : max(_1835, cbSceneParam._m0[41u].w));
            float _1882 = (cbSceneParam._m0[33u].x - sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492))) * cbSceneParam._m0[33u].y;
            float _3751 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
            float _1889 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1694, cbSceneParam._m0[33u].w + _1695), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1694, _1695 - cbSceneParam._m0[33u].z), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1694 - cbSceneParam._m0[33u].z, _1695 - cbSceneParam._m0[33u].w), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1694 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1695), _1839), 0.0)).x), vec4(0.25)));
            float _1893 = 1.0 - (_1889 * cbSceneParam._m0[34u].x);
            float _1894 = 1.0 - (_1889 * cbSceneParam._m0[34u].y);
            float _1895 = 1.0 - (_1889 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1895) ? _1641 : (isnan(_1641) ? _1895 : min(_1641, _1895));
            frontier_phi_37_36_ladder_1 = isnan(_1894) ? _1640 : (isnan(_1640) ? _1894 : min(_1640, _1894));
            frontier_phi_37_36_ladder_2 = isnan(_1893) ? _1639 : (isnan(_1639) ? _1893 : min(_1639, _1893));
        }
        else
        {
            frontier_phi_37_36_ladder = _1641;
            frontier_phi_37_36_ladder_1 = _1640;
            frontier_phi_37_36_ladder_2 = _1639;
        }
        _1705 = frontier_phi_37_36_ladder_2;
        _1707 = frontier_phi_37_36_ladder_1;
        _1709 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1705 = _1639;
        _1707 = _1640;
        _1709 = _1641;
    }
    uvec4 _1714 = floatBitsToUint(cbInstanceData._m0[_389 + 5u]);
    uint _1716 = _1714.x * 14u;
    uint _1717 = _1716 + 13u;
    float _1724 = _414 + (-1.0);
    float _1730 = (cbLight._m0[_1717].x * _1724) + 1.0;
    float _1731 = (cbLight._m0[_1717].y * _1724) + 1.0;
    float _1732 = (cbLight._m0[_1717].z * _1724) + 1.0;
    float _1733 = (cbLight._m0[_1717].w * _1724) + 1.0;
    uint _1734 = _1716 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1716 + 4u;
    float _1754 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1758 = _1716 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_248, _249, _250));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_248, _249, _250));
    float _3787 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3798 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1734].x * _1740) * _1779) + (((cbLight._m0[_1744].x * _1705) * _1754) * _1777);
    float _1787 = ((_1740 * cbLight._m0[_1734].y) * _1779) + (((cbLight._m0[_1744].y * _1707) * _1754) * _1777);
    float _1788 = ((_1740 * cbLight._m0[_1734].z) * _1779) + (((cbLight._m0[_1744].z * _1709) * _1754) * _1777);
    uvec4 _1792 = floatBitsToUint(cbLight._m0[_1716 + 12u]);
    bool _1794 = _1792.x == 0u;
    float _1896;
    float _1898;
    float _1900;
    if (_1794)
    {
        _1896 = _1786;
        _1898 = _1787;
        _1900 = _1788;
    }
    else
    {
        uint _1904 = _1716 + 6u;
        float _1920 = (dot(vec3(cbLight._m0[_1716 + 2u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3809 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1923 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1896 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1786;
        _1898 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1787;
        _1900 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1788;
    }
    bool _1903 = _1792.y == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1903)
    {
        _1958 = _1896;
        _1960 = _1898;
        _1962 = _1900;
    }
    else
    {
        uint _2066 = _1716 + 7u;
        float _2082 = (dot(vec3(cbLight._m0[_1716 + 3u].xyz), vec3(_248, _249, _250)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _3825 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _2085 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1958 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _1896;
        _1960 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _1898;
        _1962 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _1900;
    }
    uint _1964 = _1716 + 8u;
    float _1970 = cbLight._m0[_1716].x + _328;
    float _1971 = cbLight._m0[_1716].y + _329;
    float _1972 = cbLight._m0[_1716].z + _330;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1980 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1716].xyz));
    float _3841 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _1984 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1716].xyz), vec3(_1970 * _1976, _1971 * _1976, _1972 * _1976));
    float _3863 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2002 = (0.5 / ((_1983 + 9.9999999392252902907785028219223e-09) + _1984)) * _1983;
    float _3874 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.31831014156341552734375;
    uint _2018 = _1716 + 9u;
    float _2024 = cbLight._m0[_1758].x + _328;
    float _2025 = cbLight._m0[_1758].y + _329;
    float _2026 = cbLight._m0[_1758].z + _330;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2034 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_1758].xyz));
    float _3885 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_2024 * _2030, _2025 * _2030, _2026 * _2030));
    float _3896 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = (0.5 / ((_2037 + 9.9999999392252902907785028219223e-09) + _1984)) * _2037;
    float _3907 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.31831014156341552734375;
    float _2063 = (((_2047 * cbLight._m0[_2018].x) * _2053) * _1740) + ((((cbLight._m0[_1964].x * _1705) * _1996) * _2004) * _1754);
    float _2064 = (((_2047 * cbLight._m0[_2018].y) * _2053) * _1740) + ((((cbLight._m0[_1964].y * _1707) * _1996) * _2004) * _1754);
    float _2065 = (((_2047 * cbLight._m0[_2018].z) * _2053) * _1740) + ((((cbLight._m0[_1964].z * _1709) * _1996) * _2004) * _1754);
    float _2121;
    float _2123;
    float _2125;
    if (_1794)
    {
        _2121 = _2063;
        _2123 = _2064;
        _2125 = _2065;
    }
    else
    {
        uint _2127 = _1716 + 10u;
        uint _2133 = _1716 + 2u;
        float _2139 = cbLight._m0[_2133].x + _328;
        float _2140 = cbLight._m0[_2133].y + _329;
        float _2141 = cbLight._m0[_2133].z + _330;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2149 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_2133].xyz));
        float _3918 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2133].xyz), vec3(_2139 * _2145, _2140 * _2145, _2141 * _2145));
        float _3929 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2166 = (0.5 / ((_2152 + 9.9999999392252902907785028219223e-09) + _1984)) * _2152;
        float _3940 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.31831014156341552734375;
        float _2169 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2121 = (((_2162 * cbLight._m0[_2127].x) * _2168) * _2169) + _2063;
        _2123 = (((_2162 * cbLight._m0[_2127].y) * _2168) * _2169) + _2064;
        _2125 = (((_2162 * cbLight._m0[_2127].z) * _2168) * _2169) + _2065;
    }
    float _2200;
    float _2202;
    float _2204;
    if (_1903)
    {
        _2200 = _2121;
        _2202 = _2123;
        _2204 = _2125;
    }
    else
    {
        uint _2211 = _1716 + 11u;
        uint _2217 = _1716 + 3u;
        float _2223 = cbLight._m0[_2217].x + _328;
        float _2224 = cbLight._m0[_2217].y + _329;
        float _2225 = cbLight._m0[_2217].z + _330;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2233 = dot(vec3(_248, _249, _250), vec3(cbLight._m0[_2217].xyz));
        float _3956 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2223 * _2229, _2224 * _2229, _2225 * _2229));
        float _3967 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2250 = (0.5 / ((_2236 + 9.9999999392252902907785028219223e-09) + _1984)) * _2236;
        float _3978 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.31831014156341552734375;
        float _2253 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2200 = (((_2246 * cbLight._m0[_2211].x) * _2252) * _2253) + _2121;
        _2202 = (((_2246 * cbLight._m0[_2211].y) * _2252) * _2253) + _2123;
        _2204 = (((_2246 * cbLight._m0[_2211].z) * _2252) * _2253) + _2125;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1714.y == 0u)
    {
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _350) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _349) / _2275)));
        float _2296 = (log2(_1492 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
        }
        else
        {
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2598)
                {
                    frontier_phi_71_pred = _2587;
                    frontier_phi_71_pred_1 = _2586;
                    frontier_phi_71_pred_2 = _2585;
                    frontier_phi_71_pred_3 = _2584;
                    frontier_phi_71_pred_4 = _2583;
                    frontier_phi_71_pred_5 = _2582;
                }
                else
                {
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    uint _2733;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2597;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    for (;;)
                    {
                        uint _2737 = uint(findLSB(_2733)) + (_2588 << 5u);
                        uint _2734 = (_2733 + 4294967295u) & _2733;
                        uint _2739 = _2737 * 48u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2759 = (_2737 * 48u) + 4u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2778 = (_2737 * 48u) + 8u;
                        vec3 _2789 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x));
                        float _2793 = _2753.x - _1490;
                        float _2794 = _2753.y - _1491;
                        float _2795 = _2753.z - _1492;
                        float _2796 = dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795));
                        float _2799 = inversesqrt(_2796);
                        float _2808 = 1.0 - (_2796 * _2753.w);
                        float _4004 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2810 = sqrt(_2796) * _2772.w;
                        float _2813 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * dot(vec3(_370, _373, _376), vec3(_2799 * _2793, _2799 * _2794, _2799 * _2795))) + _2814;
                        float _2820 = _2810 * _2810;
                        float _2824 = ((isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))) * _2809) / ((_2820 * 0.699999988079071044921875) + 1.0);
                        float _2828 = (-0.0) - _1490;
                        float _2829 = (-0.0) - _1491;
                        float _2830 = (-0.0) - _1492;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2838 = dot(vec3(_370, _373, _376), vec3(_2834 * _2828, _2834 * _2829, _2834 * _2830));
                        float _4020 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _4031 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2842 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2846 = (0.5 / (((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) + 9.9999999392252902907785028219223e-09) + _2842)) * _2842;
                        float _4042 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2855 = (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 3.1415927410125732421875) / ((_2820 * 2.1991131305694580078125) + 3.141590118408203125)) * _2809;
                        _2657 = (_2824 * _2772.x) + _2730;
                        _2658 = (_2824 * _2772.y) + _2731;
                        _2659 = (_2824 * _2772.z) + _2732;
                        _2654 = (_2855 * _2789.x) + _2727;
                        _2655 = (_2855 * _2789.y) + _2728;
                        _2656 = (_2855 * _2789.z) + _2729;
                        if (_2734 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2734;
                        }
                    }
                    frontier_phi_71_pred = _2659;
                    frontier_phi_71_pred_1 = _2658;
                    frontier_phi_71_pred_2 = _2657;
                    frontier_phi_71_pred_3 = _2656;
                    frontier_phi_71_pred_4 = _2655;
                    frontier_phi_71_pred_5 = _2654;
                }
                _2432 = frontier_phi_71_pred;
                _2430 = frontier_phi_71_pred_1;
                _2428 = frontier_phi_71_pred_2;
                _2426 = frontier_phi_71_pred_3;
                _2424 = frontier_phi_71_pred_4;
                _2422 = frontier_phi_71_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2422;
                    _2583 = _2424;
                    _2584 = _2426;
                    _2585 = _2428;
                    _2586 = _2430;
                    _2587 = _2432;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
        }
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.z;
        uint _2438 = (_2436 >> 8u) & 15u;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        if (((4294967295u << _2438) & _2306) == 0u)
        {
            _2553 = _2421;
            _2555 = _2423;
            _2557 = _2425;
            _2559 = _2427;
            _2561 = _2429;
            _2563 = _2431;
        }
        else
        {
            float _2578 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2438 < ((_2436 >> 12u) & 15u))
            {
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2562;
                float _2564;
                float _2710 = _2421;
                float _2711 = _2423;
                float _2712 = _2425;
                float _2713 = _2427;
                float _2714 = _2429;
                float _2715 = _2431;
                uint _2716 = _2438;
                uint _2725;
                bool _2726;
                for (;;)
                {
                    _2725 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                    _2726 = _2725 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2726)
                    {
                        frontier_phi_82_pred = _2715;
                        frontier_phi_82_pred_1 = _2714;
                        frontier_phi_82_pred_2 = _2713;
                        frontier_phi_82_pred_3 = _2712;
                        frontier_phi_82_pred_4 = _2711;
                        frontier_phi_82_pred_5 = _2710;
                    }
                    else
                    {
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _2882 = _2710;
                        float _2883 = _2711;
                        float _2884 = _2712;
                        float _2885 = _2713;
                        float _2886 = _2714;
                        float _2887 = _2715;
                        uint _2888 = _2725;
                        uint _2889;
                        vec4 _2914;
                        float _2915;
                        vec4 _2930;
                        vec3 _2942;
                        vec4 _2958;
                        vec4 _2974;
                        float _3021;
                        bool _3022;
                        for (;;)
                        {
                            uint _2899 = ((_2716 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2888));
                            _2889 = (_2888 + 4294967295u) & _2888;
                            uint _2901 = _2899 * 40u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            _2915 = _2914.w;
                            uint _2917 = (_2899 * 40u) + 4u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2932 = (_2899 * 40u) + 8u;
                            _2942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x));
                            uint _2945 = (_2899 * 40u) + 16u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2899 * 40u) + 20u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2977 = (_2899 * 40u) + 24u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2996 = (_2899 * 40u) + 28u;
                            vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3021 = fma(_1492, _3009.z, fma(_1491, _3009.y, _3009.x * _1490)) + _3009.w;
                            _3022 = !((fma(_1492, _2990.z, fma(_1491, _2990.y, _2990.x * _1490)) + _2990.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3022)
                            {
                                float _3049 = _2914.x - _1490;
                                float _3050 = _2914.y - _1491;
                                float _3051 = _2914.z - _1492;
                                float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                                float _3055 = inversesqrt(_3052);
                                float _3056 = _3055 * _3049;
                                float _3057 = _3055 * _3050;
                                float _3058 = _3055 * _3051;
                                float _3062 = 1.0 - (_3052 / (_2915 * _2915));
                                float _4053 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3067 = sqrt(_3052) * _2930.w;
                                float _3069 = 1.39999997615814208984375 / (_3067 + 1.39999997615814208984375);
                                float _3070 = _3069 * _3069;
                                float _3071 = 1.0 - _3070;
                                float _3073 = (_3071 * dot(vec3(_3056, _3057, _3058), vec3(_370, _373, _376))) + _3070;
                                float _3076 = _3067 * _3067;
                                float _3080 = (fma(_1492, _2958.z, fma(_1491, _2958.y, _2958.x * _1490)) + _2958.w) / _3021;
                                float _3081 = (fma(_1492, _2974.z, fma(_1491, _2974.y, _2974.x * _1490)) + _2974.w) / _3021;
                                float _3085 = 1.0 - dot(vec2(_3080, _3081), vec2(_3080, _3081));
                                float _4069 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3086 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3087 = _3086 * (((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3063) / ((_3076 * 0.699999988079071044921875) + 1.0));
                                float _3097 = dot(vec3(_370, _373, _376), vec3((-0.0) - (_1490 * _2578), (-0.0) - (_1491 * _2578), (-0.0) - (_1492 * _2578)));
                                float _4080 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3105 = (_3071 * dot(vec3(_370, _373, _376), vec3(_3056, _3057, _3058))) + _3070;
                                float _4091 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3110 = (0.5 / (((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) + 9.9999999392252902907785028219223e-09) + _3106)) * _3106;
                                float _4102 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3117 = (_3086 * _3063) * (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 3.1415927410125732421875) / ((_3076 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3087 * _2930.z;
                                frontier_phi_88_pred_1 = _3087 * _2930.y;
                                frontier_phi_88_pred_2 = _3087 * _2930.x;
                                frontier_phi_88_pred_3 = _3117 * _2942.z;
                                frontier_phi_88_pred_4 = _3117 * _2942.y;
                                frontier_phi_88_pred_5 = _3117 * _2942.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_88_pred;
                            _3125 = frontier_phi_88_pred_1;
                            _3124 = frontier_phi_88_pred_2;
                            _3123 = frontier_phi_88_pred_3;
                            _3122 = frontier_phi_88_pred_4;
                            _3121 = frontier_phi_88_pred_5;
                            _2872 = _3124 + _2885;
                            _2873 = _3125 + _2886;
                            _2874 = _3126 + _2887;
                            _2869 = _3121 + _2882;
                            _2870 = _3122 + _2883;
                            _2871 = _3123 + _2884;
                            if (_2889 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2889;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2874;
                        frontier_phi_82_pred_1 = _2873;
                        frontier_phi_82_pred_2 = _2872;
                        frontier_phi_82_pred_3 = _2871;
                        frontier_phi_82_pred_4 = _2870;
                        frontier_phi_82_pred_5 = _2869;
                    }
                    _2564 = frontier_phi_82_pred;
                    _2562 = frontier_phi_82_pred_1;
                    _2560 = frontier_phi_82_pred_2;
                    _2558 = frontier_phi_82_pred_3;
                    _2556 = frontier_phi_82_pred_4;
                    _2554 = frontier_phi_82_pred_5;
                    uint _2717 = _2716 + 1u;
                    if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2710 = _2554;
                        _2711 = _2556;
                        _2712 = _2558;
                        _2713 = _2560;
                        _2714 = _2562;
                        _2715 = _2564;
                        _2716 = _2717;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2560;
                frontier_phi_63_64_ladder_1 = _2564;
                frontier_phi_63_64_ladder_2 = _2562;
                frontier_phi_63_64_ladder_3 = _2558;
                frontier_phi_63_64_ladder_4 = _2556;
                frontier_phi_63_64_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_63_64_ladder = _2427;
                frontier_phi_63_64_ladder_1 = _2431;
                frontier_phi_63_64_ladder_2 = _2429;
                frontier_phi_63_64_ladder_3 = _2425;
                frontier_phi_63_64_ladder_4 = _2423;
                frontier_phi_63_64_ladder_5 = _2421;
            }
            _2553 = frontier_phi_63_64_ladder_5;
            _2555 = frontier_phi_63_64_ladder_4;
            _2557 = frontier_phi_63_64_ladder_3;
            _2559 = frontier_phi_63_64_ladder;
            _2561 = frontier_phi_63_64_ladder_2;
            _2563 = frontier_phi_63_64_ladder_1;
        }
        float _2568 = isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0));
        _2319 = (_2568 * _2559) + _1958;
        _2321 = (_2568 * _2561) + _1960;
        _2323 = (_2568 * _2563) + _1962;
        _2325 = ((_2553 * 0.039999999105930328369140625) * _2568) + _2200;
        _2327 = ((_2555 * 0.039999999105930328369140625) * _2568) + _2202;
        _2329 = ((_2557 * 0.039999999105930328369140625) * _2568) + _2204;
    }
    else
    {
        _2319 = _1958;
        _2321 = _1960;
        _2323 = _1962;
        _2325 = _2200;
        _2327 = _2202;
        _2329 = _2204;
    }
    uint _2335 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _2343 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _239.x) * cbInstanceData._m0[_2335].x;
    float _2346 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _239.y) * cbInstanceData._m0[_2335].y;
    float _2349 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _239.z) * cbInstanceData._m0[_2335].z;
    float _4118 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _4129 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _4140 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _2366 = (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2319 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _414))) + ((_2325 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + _2343;
    float _2368 = (_2346 + ((_2327 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2321 + ((isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0))) * _414)));
    float _2370 = (_2349 + ((_2329 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1225)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2323 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _414)));
    float _2371 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2372 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2379 = cbMtdParam._m0[2u].x * _2343;
    float _2380 = cbMtdParam._m0[2u].y * _2346;
    float _2381 = cbMtdParam._m0[2u].z * _2349;
    float _4166 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2383 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    uint _2384 = _389 + 6u;
    float _2392 = _349 / cbSceneParam._m0[86u].x;
    float _2393 = _350 / cbSceneParam._m0[86u].y;
    vec4 _2407 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, (log2((isnan(cbSceneParam._m0[77u].w) ? _270 : (isnan(_270) ? cbSceneParam._m0[77u].w : min(_270, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2409 = _2407.x;
    float _2410 = _2407.y;
    float _2411 = _2407.z;
    float _2412 = _2407.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_270 > cbSceneParam._m0[78u].w)
    {
        float _2446 = isnan(_270) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _270 : min(cbSceneParam._m0[80u].w, _270));
        float _2447 = _2446 / _270;
        float _2458 = _2447 * _321;
        float _2459 = _322 * _2447;
        float _2460 = (-0.0) - _2459;
        float _2462 = _2447 * _323;
        float _2464 = (cbSceneParam._m0[77u].w * _2460) / _2446;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2459;
        float _2472 = sqrt(((_2458 * _2458) + (_2459 * _2459)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2446)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2667;
        if (abs((_2460 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2667 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2613 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2667 = ((abs(_2472 / _2460) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2482 * _2622) - exp2(_2482 * _2623)) * _2611))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2669 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2392, _2393, 1.0), 0.0);
        float _2678 = exp2((_2667 * (-1.44269502162933349609375)) * (1.0 - _2669.w));
        float _2679 = log2(_2678);
        float _2695 = log2(_2412);
        _2484 = (exp2(_2695 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].x)) * _2669.x) / cbSceneParam._m0[78u].x)) + _2409;
        _2486 = (exp2(_2695 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].y)) * _2669.y) / cbSceneParam._m0[78u].y)) + _2410;
        _2488 = (exp2(_2695 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].z)) * _2669.z) / cbSceneParam._m0[78u].z)) + _2411;
        _2490 = _2678 * _2412;
    }
    else
    {
        _2484 = _2409;
        _2486 = _2410;
        _2488 = _2411;
        _2490 = _2412;
    }
    bool _2705;
    vec4 _2500;
    vec4 _2523;
    float _2525;
    float _2529;
    float _2530;
    float _2531;
    float _2534;
    float _2537;
    float _2540;
    float _2541;
    bool _2552;
    for (;;)
    {
        _2500 = cbMatDynParam._m0[0u];
        float _2502 = roundEven(_2500.y);
        bool _2503 = _2502 == 3.0;
        float _2505 = log2(_2490);
        float _2509 = exp2(_2505 * cbSceneParam._m0[78u].x);
        float _2510 = exp2(_2505 * cbSceneParam._m0[78u].y);
        float _2511 = exp2(_2505 * cbSceneParam._m0[78u].z);
        float _2512 = _2509 * _2371;
        float _2513 = _2510 * _2372;
        float _2514 = _2511 * _2373;
        float _2521 = _337 + (-0.5);
        _2523 = cbMtdParam._m0[1u];
        _2525 = _2523.y * _2521;
        float _2528 = (_2502 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2529 = _2528 * (_2503 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2484)));
        _2530 = _2528 * (_2503 ? _2513 : (_2513 + (cbSceneParam._m0[72u].w * _2486)));
        _2531 = _2528 * (_2503 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2488)));
        _2534 = ((_2379 * _2383) * _2509) * _2528;
        _2537 = ((_2380 * _2383) * _2510) * _2528;
        _2540 = ((_2381 * _2383) * _2511) * _2528;
        _2541 = _2521 * 0.999000012874603271484375;
        _2552 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2552)
        {
            if ((cbInstanceData._m0[_389 + 7u].x + _2541) < 0.5)
            {
                _2705 = true;
                break;
            }
        }
        uint _2646 = _390 + uint(_2500.w);
        if ((cbInstanceData._m0[_2646].w < 1.0) && ((cbInstanceData._m0[_2646].w + _2541) < 0.5))
        {
            _2705 = true;
            break;
        }
        if ((_2525 + 1.0) < _2523.x)
        {
            _2705 = true;
            break;
        }
        _2705 = false;
        break;
    }
    float _2860;
    if (_2705)
    {
        discard_state = true;
        _2860 = 0.0;
    }
    else
    {
        _2860 = cbInstanceData._m0[_2384].w;
    }
    SV_Target.x = _2529;
    SV_Target.y = _2530;
    SV_Target.z = _2531;
    SV_Target.w = _2860;
    SV_Target_1.x = _2534;
    SV_Target_1.y = _2537;
    SV_Target_1.z = _2540;
    SV_Target_1.w = cbInstanceData._m0[_2384].w;
    discard_exit();
}


