#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _769;
float _3261;
float _3262;
float _3263;
float _3264;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _229 = _228 * _168;
    float _230 = _228 * _169;
    float _231 = _228 * _170;
    float _3273 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3284 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3295 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    vec4 _316 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _318 = _316.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _448 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _454 = (cbMatDynParam._m0[5u].x * _448) + cbMatDynParam._m0[5u].y;
        float _3306 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        float _455 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _459 = (cbMatDynParam._m0[5u].z * _448) + cbMatDynParam._m0[5u].w;
        float _3317 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) - _455)) + _455) < ((_318 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _351 = fma(_231, cbSceneParam._m0[5u].z, fma(_230, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _229));
    float _354 = fma(_231, cbSceneParam._m0[6u].z, fma(_230, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _229));
    float _357 = fma(_231, cbSceneParam._m0[7u].z, fma(_230, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _229));
    uint _370 = uint(roundEven(NORMAL.w)) * 13u;
    uint _372 = _370 + 9u;
    uint _373 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _379 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_373].x;
    float _380 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_373].y;
    float _381 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_373].z;
    float _3328 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    vec4 _393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _396 = _393.x * TEXCOORD.z;
    float _397 = dot(vec3(_229, _230, _231), vec3(_309, _310, _311));
    float _400 = _397 * 2.0;
    float _405 = (_400 * _229) - _309;
    float _406 = (_400 * _230) - _310;
    float _407 = (_400 * _231) - _311;
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _768;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _493 = fma(_437, cbModelParam._m0[26u].z, fma(_433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _429));
        float _497 = fma(_437, cbModelParam._m0[27u].z, fma(_433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _429));
        float _501 = fma(_437, cbModelParam._m0[28u].z, fma(_433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _429));
        float _526 = _429 + _229;
        float _527 = _433 + _230;
        float _528 = _437 + _231;
        float _538 = fma(_528, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526)) - _493;
        float _539 = fma(_528, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526)) - _497;
        float _540 = fma(_528, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526)) - _501;
        float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
        float _557 = ((_544 * _538) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_493 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_544 * _539) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_497 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _559 = ((_544 * _540) / cbModelParam._m0[34u].z) + ((((((_501 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_557, _558, _559), 0.0);
        float _596 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_562.x + (-0.5));
        float _598 = _596 * (_562.y + (-0.5));
        float _599 = _596 * (_562.z + (-0.5));
        float _606 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_569.x + (-0.5));
        float _608 = _606 * (_569.y + (-0.5));
        float _609 = _606 * (_569.z + (-0.5));
        float _616 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_576.x + (-0.5));
        float _618 = _616 * (_576.y + (-0.5));
        float _619 = _616 * (_576.z + (-0.5));
        float _626 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_583.x + (-0.5));
        float _628 = _626 * (_583.y + (-0.5));
        float _629 = _626 * (_583.z + (-0.5));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = _597 * 0.5;
        float _634 = _607 * 0.5;
        float _635 = _617 * 0.5;
        float _636 = dot(vec3(_633, _634, _635), vec3(_633, _634, _635));
        float _641 = (_636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_636);
        float _650 = (dot(vec3(_229, _230, _231), vec3(_641 * _633, _641 * _634, _641 * _635)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _660 = sqrt(((_634 * _634) + (_633 * _633)) + (_635 * _635)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _662 = _661 * 2.0;
        float _666 = (1.0 - _661) / (_661 + 1.0);
        float _3398 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _676 = ((((1.0 - _667) * (_662 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_662 + 1.0))) + _667) * _630;
        float _677 = _598 * 0.5;
        float _678 = _608 * 0.5;
        float _679 = _618 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _693 = (dot(vec3(_229, _230, _231), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _702 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3431 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_704 + 1.0))) + _709) * _631;
        float _719 = _599 * 0.5;
        float _720 = _609 * 0.5;
        float _721 = _619 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_229, _230, _231), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3464 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_746 + 1.0))) + _751) * _632;
        _768 = _599;
        _770 = _598;
        _771 = _597;
        _772 = _609;
        _773 = _608;
        _774 = _607;
        _775 = _619;
        _776 = _618;
        _777 = _617;
        _778 = _632;
        _779 = _631;
        _780 = _630;
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
    }
    else
    {
        _768 = _769;
        _770 = _769;
        _771 = _769;
        _772 = _769;
        _773 = _769;
        _774 = _769;
        _775 = _769;
        _776 = _769;
        _777 = _769;
        _778 = _769;
        _779 = _769;
        _780 = _769;
        _781 = 0.0;
        _782 = 0.0;
        _783 = 0.0;
    }
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _812 = fma(_437, cbModelParam._m0[30u].z, fma(_433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _429));
        float _816 = fma(_437, cbModelParam._m0[31u].z, fma(_433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _429));
        float _820 = fma(_437, cbModelParam._m0[32u].z, fma(_433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _429));
        float _843 = _429 + _229;
        float _844 = _433 + _230;
        float _845 = _437 + _231;
        float _855 = fma(_845, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843)) - _812;
        float _856 = fma(_845, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843)) - _816;
        float _857 = fma(_845, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843)) - _820;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_812 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_816 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[35u].z) + ((((((_820 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _911 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_878.x + (-0.5));
        float _913 = _911 * (_878.y + (-0.5));
        float _914 = _911 * (_878.z + (-0.5));
        float _921 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_885.x + (-0.5));
        float _923 = _921 * (_885.y + (-0.5));
        float _924 = _921 * (_885.z + (-0.5));
        float _931 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_892.x + (-0.5));
        float _933 = _931 * (_892.y + (-0.5));
        float _934 = _931 * (_892.z + (-0.5));
        float _941 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_899.x + (-0.5));
        float _943 = _941 * (_899.y + (-0.5));
        float _944 = _941 * (_899.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_229, _230, _231), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3527 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_975 + 1.0))) + _980) * _945;
        float _990 = _913 * 0.5;
        float _991 = _923 * 0.5;
        float _992 = _933 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_229, _230, _231), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3560 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1017 + 1.0))) + _1022) * _946;
        float _1032 = _914 * 0.5;
        float _1033 = _924 * 0.5;
        float _1034 = _934 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_229, _230, _231), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3593 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1059 + 1.0))) + _1064) * _947;
        _1081 = _914;
        _1082 = _913;
        _1083 = _912;
        _1084 = _924;
        _1085 = _923;
        _1086 = _922;
        _1087 = _934;
        _1088 = _933;
        _1089 = _932;
        _1090 = _947;
        _1091 = _946;
        _1092 = _945;
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _769;
        _1082 = _769;
        _1083 = _769;
        _1084 = _769;
        _1085 = _769;
        _1086 = _769;
        _1087 = _769;
        _1088 = _769;
        _1089 = _769;
        _1090 = _769;
        _1091 = _769;
        _1092 = _769;
        _1093 = 0.0;
        _1094 = 0.0;
        _1095 = 0.0;
    }
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1128 = fma(_1107, cbSceneParam._m0[89u].z, fma(_1106, cbSceneParam._m0[89u].y, _1105 * cbSceneParam._m0[89u].x));
    float _1131 = fma(_1107, cbSceneParam._m0[90u].z, fma(_1106, cbSceneParam._m0[90u].y, _1105 * cbSceneParam._m0[90u].x));
    float _1134 = fma(_1107, cbSceneParam._m0[91u].z, fma(_1106, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1105));
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = _407 * 0.5;
    float _1152 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1155 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1158 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1192;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1165 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_768, _772, _775, _778));
        float _1169 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_770, _773, _776, _779));
        float _1173 = dot(vec4(_1149, _1150, _1151, 1.0), vec4(_771, _774, _777, _780));
        float _1180 = dot(vec4(cbModelParam._m0[39u]), vec4(_1149, _1150, _1151, 1.0));
        _1192 = dot(vec3(isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1180) ? 0.0 : (isnan(0.0) ? _1180 : max(0.0, _1180))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1192 = 1.0;
    }
    float _1203;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1194 = dot(vec4(cbModelParam._m0[40u]), vec4(_1149, _1150, _1151, 1.0));
        _1203 = dot(vec3(isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1203 = 1.0;
    }
    float _1207 = (_1203 * cbModelParam._m0[1u].x) + (_1192 * (1.0 - cbModelParam._m0[1u].x));
    float _1216 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1297;
    float _1299;
    float _1301;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1264 = fma(_437, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429)) + cbModelParam._m0[13u].w;
        float _1268 = fma(_437, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429)) + cbModelParam._m0[14u].w;
        float _1272 = fma(_437, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429)) + cbModelParam._m0[15u].w;
        float _1275 = fma(_407, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405));
        float _1278 = fma(_407, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405));
        float _1281 = fma(_407, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405));
        float _1307;
        if (_1275 > 0.0)
        {
            _1307 = abs((1.0 - _1264) / _1275);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1264 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1307 = frontier_phi_17_15_ladder;
        }
        float _1482;
        if (_1278 > 0.0)
        {
            _1482 = abs((1.0 - _1268) / _1278);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1268 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1482 = frontier_phi_26_22_ladder;
        }
        float _1779;
        if (_1281 > 0.0)
        {
            _1779 = abs((1.0 - _1272) / _1281);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1272 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1779 = frontier_phi_38_33_ladder;
        }
        float _1781 = isnan(_1482) ? _1307 : (isnan(_1307) ? _1482 : min(_1307, _1482));
        float _1782 = isnan(_1779) ? _1781 : (isnan(_1781) ? _1779 : min(_1781, _1779));
        float _1786 = (_1782 * _1275) + _1264;
        float _1787 = (_1782 * _1278) + _1268;
        float _1788 = (_1782 * _1281) + _1272;
        float _1789 = _1782 * 9.9999997473787516355514526367188e-05;
        float _1791 = (-1.0) - _1789;
        float _1793 = _1789 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1788 > _1793) || ((_1788 < _1791) || ((_1787 > _1793) || ((_1787 < _1791) || ((_1786 < _1791) || (_1786 > _1793))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1788, cbModelParam._m0[9u].z, fma(_1787, cbModelParam._m0[9u].y, _1786 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1788, cbModelParam._m0[10u].z, fma(_1787, cbModelParam._m0[10u].y, _1786 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1788, cbModelParam._m0[11u].z, fma(_1787, cbModelParam._m0[11u].y, _1786 * cbModelParam._m0[11u].x))), _1216);
            frontier_phi_16_38_ladder = _1933.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1933.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1933.x * cbModelParam._m0[1u].y;
        }
        _1297 = frontier_phi_16_38_ladder_2;
        _1299 = frontier_phi_16_38_ladder_1;
        _1301 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_405, _406, _407), _1216);
        _1297 = _1285.x * cbModelParam._m0[1u].y;
        _1299 = _1285.y * cbModelParam._m0[1u].y;
        _1301 = _1285.z * cbModelParam._m0[1u].y;
    }
    float _1304 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1361 = fma(_437, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429)) + cbModelParam._m0[21u].w;
        float _1365 = fma(_437, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429)) + cbModelParam._m0[22u].w;
        float _1369 = fma(_437, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429)) + cbModelParam._m0[23u].w;
        float _1372 = fma(_407, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405));
        float _1375 = fma(_407, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405));
        float _1378 = fma(_407, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405));
        float _1487;
        if (_1372 > 0.0)
        {
            _1487 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1487 = frontier_phi_28_24_ladder;
        }
        float _1806;
        if (_1375 > 0.0)
        {
            _1806 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1806 = frontier_phi_40_35_ladder;
        }
        float _2079;
        if (_1378 > 0.0)
        {
            _2079 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2079 = frontier_phi_50_47_ladder;
        }
        float _2081 = isnan(_1806) ? _1487 : (isnan(_1487) ? _1806 : min(_1487, _1806));
        float _2082 = isnan(_2079) ? _2081 : (isnan(_2081) ? _2079 : min(_2081, _2079));
        float _2086 = (_2082 * _1372) + _1361;
        float _2087 = (_2082 * _1375) + _1365;
        float _2088 = (_2082 * _1378) + _1369;
        float _2089 = _2082 * 9.9999997473787516355514526367188e-05;
        float _2090 = (-1.0) - _2089;
        float _2092 = _2089 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2088 > _2092) || ((_2088 < _2090) || ((_2087 > _2092) || ((_2087 < _2090) || ((_2086 < _2090) || (_2086 > _2092))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2088, cbModelParam._m0[17u].z, fma(_2087, cbModelParam._m0[17u].y, _2086 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2088, cbModelParam._m0[18u].z, fma(_2087, cbModelParam._m0[18u].y, _2086 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2088, cbModelParam._m0[19u].z, fma(_2087, cbModelParam._m0[19u].y, _2086 * cbModelParam._m0[19u].x))), _1304);
            frontier_phi_25_50_ladder = _2179.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2179.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2179.x * cbModelParam._m0[1u].z;
        }
        _1397 = frontier_phi_25_50_ladder_2;
        _1399 = frontier_phi_25_50_ladder_1;
        _1401 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_405, _406, _407), _1304);
        _1397 = _1381.x * cbModelParam._m0[1u].z;
        _1399 = _1381.y * cbModelParam._m0[1u].z;
        _1401 = _1381.z * cbModelParam._m0[1u].z;
    }
    float _1413 = _396 * 0.01200000010430812835693359375;
    float _1415 = _1413 * ((cbModelParam._m0[1u].w * (_1397 - _1297)) + _1297);
    float _1416 = _1413 * ((cbModelParam._m0[1u].w * (_1399 - _1299)) + _1299);
    float _1417 = _1413 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1420 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, _1415 * cbSceneParam._m0[91u].x));
    float _1461 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1469 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1474 = _1461 / _1473;
    float _1475 = _1465 / _1473;
    float _1476 = _1469 / _1473;
    float _1623;
    float _1624;
    float _1625;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1503 = ((uint(_1476 > cbSceneParam._m0[59u].y) + uint(_1476 > cbSceneParam._m0[59u].x)) + uint(_1476 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1504 = _1503 + 43u;
        uint _1512 = _1503 + 44u;
        uint _1520 = _1503 + 45u;
        uint _1528 = _1503 + 46u;
        float _1539 = fma(_1473, cbSceneParam._m0[_1504].w, fma(_1469, cbSceneParam._m0[_1504].z, fma(_1465, cbSceneParam._m0[_1504].y, _1461 * cbSceneParam._m0[_1504].x)));
        float _1543 = fma(_1473, cbSceneParam._m0[_1512].w, fma(_1469, cbSceneParam._m0[_1512].z, fma(_1465, cbSceneParam._m0[_1512].y, _1461 * cbSceneParam._m0[_1512].x)));
        float _1551 = fma(_1473, cbSceneParam._m0[_1528].w, fma(_1469, cbSceneParam._m0[_1528].z, fma(_1465, cbSceneParam._m0[_1528].y, _1461 * cbSceneParam._m0[_1528].x)));
        float _1556 = cbSceneParam._m0[33u].z * _1551;
        float _1558 = cbSceneParam._m0[33u].w * _1551;
        float _1561 = fma(_1473, cbSceneParam._m0[_1520].w, fma(_1469, cbSceneParam._m0[_1520].z, fma(_1465, cbSceneParam._m0[_1520].y, _1461 * cbSceneParam._m0[_1520].x))) / _1551;
        float _1609 = (cbSceneParam._m0[33u].x - sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476))) * cbSceneParam._m0[33u].y;
        float _3719 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1616 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1556 + _1539) / _1551, (_1558 + _1543) / _1551), _1561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1558 + _1539) / _1551, (_1543 - _1556) / _1551), _1561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1539 - _1556) / _1551, (_1543 - _1558) / _1551), _1561), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1539 - _1558) / _1551, (_1556 + _1543) / _1551), _1561), 0.0)).x), vec4(0.25)));
        _1623 = 1.0 - (_1616 * cbSceneParam._m0[34u].x);
        _1624 = 1.0 - (_1616 * cbSceneParam._m0[34u].y);
        _1625 = 1.0 - (_1616 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1623 = 1.0;
        _1624 = 1.0;
        _1625 = 1.0;
    }
    float _1689;
    float _1691;
    float _1693;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1677 = fma(_1473, cbSceneParam._m0[63u].w, fma(_1469, cbSceneParam._m0[63u].z, fma(_1465, cbSceneParam._m0[63u].y, _1461 * cbSceneParam._m0[63u].x)));
        float _1678 = fma(_1473, cbSceneParam._m0[60u].w, fma(_1469, cbSceneParam._m0[60u].z, fma(_1465, cbSceneParam._m0[60u].y, _1461 * cbSceneParam._m0[60u].x))) / _1677;
        float _1679 = fma(_1473, cbSceneParam._m0[61u].w, fma(_1469, cbSceneParam._m0[61u].z, fma(_1465, cbSceneParam._m0[61u].y, _1461 * cbSceneParam._m0[61u].x))) / _1677;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1678 >= cbSceneParam._m0[64u].x) && (_1679 >= cbSceneParam._m0[64u].y)) && (_1678 <= cbSceneParam._m0[64u].z)) && (_1679 <= cbSceneParam._m0[64u].w))
        {
            float _1819 = fma(_1473, cbSceneParam._m0[62u].w, fma(_1469, cbSceneParam._m0[62u].z, fma(_1465, cbSceneParam._m0[62u].y, _1461 * cbSceneParam._m0[62u].x))) / _1677;
            float _1823 = isnan(cbSceneParam._m0[41u].w) ? _1819 : (isnan(_1819) ? cbSceneParam._m0[41u].w : max(_1819, cbSceneParam._m0[41u].w));
            float _1866 = (cbSceneParam._m0[33u].x - sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476))) * cbSceneParam._m0[33u].y;
            float _3735 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
            float _1873 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1678, cbSceneParam._m0[33u].w + _1679), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1678, _1679 - cbSceneParam._m0[33u].z), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1678 - cbSceneParam._m0[33u].z, _1679 - cbSceneParam._m0[33u].w), _1823), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1678 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1679), _1823), 0.0)).x), vec4(0.25)));
            float _1877 = 1.0 - (_1873 * cbSceneParam._m0[34u].x);
            float _1878 = 1.0 - (_1873 * cbSceneParam._m0[34u].y);
            float _1879 = 1.0 - (_1873 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1879) ? _1625 : (isnan(_1625) ? _1879 : min(_1625, _1879));
            frontier_phi_37_36_ladder_1 = isnan(_1878) ? _1624 : (isnan(_1624) ? _1878 : min(_1624, _1878));
            frontier_phi_37_36_ladder_2 = isnan(_1877) ? _1623 : (isnan(_1623) ? _1877 : min(_1623, _1877));
        }
        else
        {
            frontier_phi_37_36_ladder = _1625;
            frontier_phi_37_36_ladder_1 = _1624;
            frontier_phi_37_36_ladder_2 = _1623;
        }
        _1689 = frontier_phi_37_36_ladder_2;
        _1691 = frontier_phi_37_36_ladder_1;
        _1693 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1689 = _1623;
        _1691 = _1624;
        _1693 = _1625;
    }
    uvec4 _1698 = floatBitsToUint(cbInstanceData._m0[_370 + 5u]);
    uint _1700 = _1698.x * 14u;
    uint _1701 = _1700 + 13u;
    float _1708 = _396 + (-1.0);
    float _1714 = (cbLight._m0[_1701].x * _1708) + 1.0;
    float _1715 = (cbLight._m0[_1701].y * _1708) + 1.0;
    float _1716 = (cbLight._m0[_1701].z * _1708) + 1.0;
    float _1717 = (cbLight._m0[_1701].w * _1708) + 1.0;
    uint _1718 = _1700 + 5u;
    float _1724 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1728 = _1700 + 4u;
    float _1738 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1742 = _1700 | 1u;
    float _1753 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_229, _230, _231));
    float _1756 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_229, _230, _231));
    float _3771 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _3782 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1761 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1763 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1770 = ((cbLight._m0[_1718].x * _1724) * _1763) + (((cbLight._m0[_1728].x * _1689) * _1738) * _1761);
    float _1771 = ((_1724 * cbLight._m0[_1718].y) * _1763) + (((cbLight._m0[_1728].y * _1691) * _1738) * _1761);
    float _1772 = ((_1724 * cbLight._m0[_1718].z) * _1763) + (((cbLight._m0[_1728].z * _1693) * _1738) * _1761);
    uvec4 _1776 = floatBitsToUint(cbLight._m0[_1700 + 12u]);
    bool _1778 = _1776.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1778)
    {
        _1880 = _1770;
        _1882 = _1771;
        _1884 = _1772;
    }
    else
    {
        uint _1888 = _1700 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1700 + 2u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3793 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1907 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1770;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1771;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1772;
    }
    bool _1887 = _1776.y == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1887)
    {
        _1942 = _1880;
        _1944 = _1882;
        _1946 = _1884;
    }
    else
    {
        uint _2050 = _1700 + 7u;
        float _2066 = (dot(vec3(cbLight._m0[_1700 + 3u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _2067 = _2066 * _2066;
        float _3809 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2068 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _2069 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _1942 = (((cbLight._m0[_2050].x * 0.3183098733425140380859375) * _2068) * _2069) + _1880;
        _1944 = (((cbLight._m0[_2050].y * 0.3183098733425140380859375) * _2068) * _2069) + _1882;
        _1946 = (((cbLight._m0[_2050].z * 0.3183098733425140380859375) * _2068) * _2069) + _1884;
    }
    uint _1948 = _1700 + 8u;
    float _1954 = cbLight._m0[_1700].x + _309;
    float _1955 = cbLight._m0[_1700].y + _310;
    float _1956 = cbLight._m0[_1700].z + _311;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1964 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1700].xyz));
    float _3825 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _1968 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1969 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1954 * _1960, _1955 * _1960, _1956 * _1960));
    float _3847 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1980 = (exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1986 = (0.5 / ((_1967 + 9.9999999392252902907785028219223e-09) + _1968)) * _1967;
    float _3858 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.31831014156341552734375;
    uint _2002 = _1700 + 9u;
    float _2008 = cbLight._m0[_1742].x + _309;
    float _2009 = cbLight._m0[_1742].y + _310;
    float _2010 = cbLight._m0[_1742].z + _311;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2018 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1742].xyz));
    float _3869 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_2008 * _2014, _2009 * _2014, _2010 * _2014));
    float _3880 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = (0.5 / ((_2021 + 9.9999999392252902907785028219223e-09) + _1968)) * _2021;
    float _3891 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.31831014156341552734375;
    float _2047 = (((_2031 * cbLight._m0[_2002].x) * _2037) * _1724) + ((((cbLight._m0[_1948].x * _1689) * _1980) * _1988) * _1738);
    float _2048 = (((_2031 * cbLight._m0[_2002].y) * _2037) * _1724) + ((((cbLight._m0[_1948].y * _1691) * _1980) * _1988) * _1738);
    float _2049 = (((_2031 * cbLight._m0[_2002].z) * _2037) * _1724) + ((((cbLight._m0[_1948].z * _1693) * _1980) * _1988) * _1738);
    float _2105;
    float _2107;
    float _2109;
    if (_1778)
    {
        _2105 = _2047;
        _2107 = _2048;
        _2109 = _2049;
    }
    else
    {
        uint _2111 = _1700 + 10u;
        uint _2117 = _1700 + 2u;
        float _2123 = cbLight._m0[_2117].x + _309;
        float _2124 = cbLight._m0[_2117].y + _310;
        float _2125 = cbLight._m0[_2117].z + _311;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2133 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2117].xyz));
        float _3902 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2123 * _2129, _2124 * _2129, _2125 * _2129));
        float _3913 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2150 = (0.5 / ((_2136 + 9.9999999392252902907785028219223e-09) + _1968)) * _2136;
        float _3924 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.31831014156341552734375;
        float _2153 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
        _2105 = (((_2146 * cbLight._m0[_2111].x) * _2152) * _2153) + _2047;
        _2107 = (((_2146 * cbLight._m0[_2111].y) * _2152) * _2153) + _2048;
        _2109 = (((_2146 * cbLight._m0[_2111].z) * _2152) * _2153) + _2049;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1887)
    {
        _2184 = _2105;
        _2186 = _2107;
        _2188 = _2109;
    }
    else
    {
        uint _2195 = _1700 + 11u;
        uint _2201 = _1700 + 3u;
        float _2207 = cbLight._m0[_2201].x + _309;
        float _2208 = cbLight._m0[_2201].y + _310;
        float _2209 = cbLight._m0[_2201].z + _311;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2217 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2201].xyz));
        float _3940 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2207 * _2213, _2208 * _2213, _2209 * _2213));
        float _3951 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2234 = (0.5 / ((_2220 + 9.9999999392252902907785028219223e-09) + _1968)) * _2220;
        float _3962 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.31831014156341552734375;
        float _2237 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
        _2184 = (((_2230 * cbLight._m0[_2195].x) * _2236) * _2237) + _2105;
        _2186 = (((_2230 * cbLight._m0[_2195].y) * _2236) * _2237) + _2107;
        _2188 = (((_2230 * cbLight._m0[_2195].z) * _2236) * _2237) + _2109;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1698.y == 0u)
    {
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _2259)));
        float _2280 = (log2(_1476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
        }
        else
        {
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            uint _2572 = 0u;
            uint _2581;
            bool _2582;
            for (;;)
            {
                _2581 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2572 << 2u)) >> 2u)).x;
                _2582 = _2581 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2582)
                {
                    frontier_phi_71_pred = _2571;
                    frontier_phi_71_pred_1 = _2570;
                    frontier_phi_71_pred_2 = _2569;
                    frontier_phi_71_pred_3 = _2568;
                    frontier_phi_71_pred_4 = _2567;
                    frontier_phi_71_pred_5 = _2566;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2568;
                    _2714 = _2569;
                    _2715 = _2570;
                    _2716 = _2571;
                    _2717 = _2581;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2572 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _1474;
                        float _2778 = _2737.y - _1475;
                        float _2779 = _2737.z - _1476;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _3988 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * dot(vec3(_351, _354, _357), vec3(_2783 * _2777, _2783 * _2778, _2783 * _2779))) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _1474;
                        float _2813 = (-0.0) - _1475;
                        float _2814 = (-0.0) - _1476;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_351, _354, _357), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4004 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _4015 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2826 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2830 = (0.5 / (((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) + 9.9999999392252902907785028219223e-09) + _2826)) * _2826;
                        float _4026 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2839 = (((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 3.1415927410125732421875) / ((_2804 * 2.1991131305694580078125) + 3.141590118408203125)) * _2793;
                        _2641 = (_2808 * _2756.x) + _2714;
                        _2642 = (_2808 * _2756.y) + _2715;
                        _2643 = (_2808 * _2756.z) + _2716;
                        _2638 = (_2839 * _2773.x) + _2711;
                        _2639 = (_2839 * _2773.y) + _2712;
                        _2640 = (_2839 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2640;
                            _2714 = _2641;
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_71_pred = _2643;
                    frontier_phi_71_pred_1 = _2642;
                    frontier_phi_71_pred_2 = _2641;
                    frontier_phi_71_pred_3 = _2640;
                    frontier_phi_71_pred_4 = _2639;
                    frontier_phi_71_pred_5 = _2638;
                }
                _2416 = frontier_phi_71_pred;
                _2414 = frontier_phi_71_pred_1;
                _2412 = frontier_phi_71_pred_2;
                _2410 = frontier_phi_71_pred_3;
                _2408 = frontier_phi_71_pred_4;
                _2406 = frontier_phi_71_pred_5;
                uint _2573 = _2572 + 1u;
                if (_2573 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2566 = _2406;
                    _2567 = _2408;
                    _2568 = _2410;
                    _2569 = _2412;
                    _2570 = _2414;
                    _2571 = _2416;
                    _2572 = _2573;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
        }
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.z;
        uint _2422 = (_2420 >> 8u) & 15u;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((4294967295u << _2422) & _2290) == 0u)
        {
            _2537 = _2405;
            _2539 = _2407;
            _2541 = _2409;
            _2543 = _2411;
            _2545 = _2413;
            _2547 = _2415;
        }
        else
        {
            float _2562 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2422 < ((_2420 >> 12u) & 15u))
            {
                float _2538;
                float _2540;
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2694 = _2405;
                float _2695 = _2407;
                float _2696 = _2409;
                float _2697 = _2411;
                float _2698 = _2413;
                float _2699 = _2415;
                uint _2700 = _2422;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2710)
                    {
                        frontier_phi_82_pred = _2699;
                        frontier_phi_82_pred_1 = _2698;
                        frontier_phi_82_pred_2 = _2697;
                        frontier_phi_82_pred_3 = _2696;
                        frontier_phi_82_pred_4 = _2695;
                        frontier_phi_82_pred_5 = _2694;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _2866 = _2694;
                        float _2867 = _2695;
                        float _2868 = _2696;
                        float _2869 = _2697;
                        float _2870 = _2698;
                        float _2871 = _2699;
                        uint _2872 = _2709;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2942;
                        vec4 _2958;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2883 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2929 = (_2883 * 40u) + 16u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2883 * 40u) + 20u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2961 = (_2883 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2883 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_1476, _2993.z, fma(_1475, _2993.y, _2993.x * _1474)) + _2993.w;
                            _3006 = !((fma(_1476, _2974.z, fma(_1475, _2974.y, _2974.x * _1474)) + _2974.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2898.x - _1474;
                                float _3034 = _2898.y - _1475;
                                float _3035 = _2898.z - _1476;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2899 * _2899));
                                float _4037 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3051 = sqrt(_3036) * _2914.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3055 = 1.0 - _3054;
                                float _3057 = (_3055 * dot(vec3(_3040, _3041, _3042), vec3(_351, _354, _357))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_1476, _2942.z, fma(_1475, _2942.y, _2942.x * _1474)) + _2942.w) / _3005;
                                float _3065 = (fma(_1476, _2958.z, fma(_1475, _2958.y, _2958.x * _1474)) + _2958.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4053 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3081 = dot(vec3(_351, _354, _357), vec3((-0.0) - (_1474 * _2562), (-0.0) - (_1475 * _2562), (-0.0) - (_1476 * _2562)));
                                float _4064 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3089 = (_3055 * dot(vec3(_351, _354, _357), vec3(_3040, _3041, _3042))) + _3054;
                                float _4075 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3094 = (0.5 / (((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) + 9.9999999392252902907785028219223e-09) + _3090)) * _3090;
                                float _4086 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3101 = (_3070 * _3047) * (((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 3.1415927410125732421875) / ((_3060 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3071 * _2914.z;
                                frontier_phi_88_pred_1 = _3071 * _2914.y;
                                frontier_phi_88_pred_2 = _3071 * _2914.x;
                                frontier_phi_88_pred_3 = _3101 * _2926.z;
                                frontier_phi_88_pred_4 = _3101 * _2926.y;
                                frontier_phi_88_pred_5 = _3101 * _2926.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3110 = frontier_phi_88_pred;
                            _3109 = frontier_phi_88_pred_1;
                            _3108 = frontier_phi_88_pred_2;
                            _3107 = frontier_phi_88_pred_3;
                            _3106 = frontier_phi_88_pred_4;
                            _3105 = frontier_phi_88_pred_5;
                            _2856 = _3108 + _2869;
                            _2857 = _3109 + _2870;
                            _2858 = _3110 + _2871;
                            _2853 = _3105 + _2866;
                            _2854 = _3106 + _2867;
                            _2855 = _3107 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2858;
                        frontier_phi_82_pred_1 = _2857;
                        frontier_phi_82_pred_2 = _2856;
                        frontier_phi_82_pred_3 = _2855;
                        frontier_phi_82_pred_4 = _2854;
                        frontier_phi_82_pred_5 = _2853;
                    }
                    _2548 = frontier_phi_82_pred;
                    _2546 = frontier_phi_82_pred_1;
                    _2544 = frontier_phi_82_pred_2;
                    _2542 = frontier_phi_82_pred_3;
                    _2540 = frontier_phi_82_pred_4;
                    _2538 = frontier_phi_82_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2538;
                        _2695 = _2540;
                        _2696 = _2542;
                        _2697 = _2544;
                        _2698 = _2546;
                        _2699 = _2548;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2544;
                frontier_phi_63_64_ladder_1 = _2548;
                frontier_phi_63_64_ladder_2 = _2546;
                frontier_phi_63_64_ladder_3 = _2542;
                frontier_phi_63_64_ladder_4 = _2540;
                frontier_phi_63_64_ladder_5 = _2538;
            }
            else
            {
                frontier_phi_63_64_ladder = _2411;
                frontier_phi_63_64_ladder_1 = _2415;
                frontier_phi_63_64_ladder_2 = _2413;
                frontier_phi_63_64_ladder_3 = _2409;
                frontier_phi_63_64_ladder_4 = _2407;
                frontier_phi_63_64_ladder_5 = _2405;
            }
            _2537 = frontier_phi_63_64_ladder_5;
            _2539 = frontier_phi_63_64_ladder_4;
            _2541 = frontier_phi_63_64_ladder_3;
            _2543 = frontier_phi_63_64_ladder;
            _2545 = frontier_phi_63_64_ladder_2;
            _2547 = frontier_phi_63_64_ladder_1;
        }
        float _2552 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
        _2303 = (_2552 * _2543) + _1942;
        _2305 = (_2552 * _2545) + _1944;
        _2307 = (_2552 * _2547) + _1946;
        _2309 = ((_2537 * 0.039999999105930328369140625) * _2552) + _2184;
        _2311 = ((_2539 * 0.039999999105930328369140625) * _2552) + _2186;
        _2313 = ((_2541 * 0.039999999105930328369140625) * _2552) + _2188;
    }
    else
    {
        _2303 = _1942;
        _2305 = _1944;
        _2307 = _1946;
        _2309 = _2184;
        _2311 = _2186;
        _2313 = _2188;
    }
    uint _2319 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _2327 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * cbInstanceData._m0[_2319].x;
    float _2330 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * cbInstanceData._m0[_2319].y;
    float _2333 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * cbInstanceData._m0[_2319].z;
    float _4102 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _4113 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _4124 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _2350 = (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2303 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _396))) + ((_2309 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + _2327;
    float _2352 = (_2330 + ((_2311 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2305 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _396)));
    float _2354 = (_2333 + ((_2313 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1207)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2307 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _396)));
    float _2355 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2356 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2357 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2363 = cbMtdParam._m0[2u].x * _2327;
    float _2364 = cbMtdParam._m0[2u].y * _2330;
    float _2365 = cbMtdParam._m0[2u].z * _2333;
    float _4150 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2367 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    uint _2368 = _370 + 6u;
    float _2376 = _330 / cbSceneParam._m0[86u].x;
    float _2377 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2430 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2431 = _2430 / _251;
        float _2442 = _2431 * _302;
        float _2443 = _303 * _2431;
        float _2444 = (-0.0) - _2443;
        float _2446 = _2431 * _304;
        float _2448 = (cbSceneParam._m0[77u].w * _2444) / _2430;
        float _2449 = _2448 + cbSceneParam._m0[79u].w;
        float _2450 = cbSceneParam._m0[79u].w - _2443;
        float _2456 = sqrt(((_2442 * _2442) + (_2443 * _2443)) + (_2446 * _2446));
        float _2459 = (1.0 - (cbSceneParam._m0[77u].w / _2430)) * _2456;
        float _2464 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2466 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2651;
        if (abs((_2444 - _2448) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2651 = ((((_2449 > 0.0) ? exp2(_2464 * _2449) : (2.0 - exp2(_2466 * _2449))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2459;
        }
        else
        {
            float _2595 = 1.0 / cbSceneParam._m0[80u].x;
            float _2596 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : max(_2449, _2450));
            float _2597 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : min(_2449, _2450));
            float _2606 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : min(_2596, 0.0));
            float _2607 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : min(_2597, 0.0));
            _2651 = ((abs(_2456 / _2444) * cbSceneParam._m0[80u].y) * ((((_2606 - _2607) * 2.0) - ((exp2(_2464 * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)))) - exp2(_2464 * (isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0))))) * _2595)) - ((exp2(_2466 * _2606) - exp2(_2466 * _2607)) * _2595))) + (_2459 * cbSceneParam._m0[80u].z);
        }
        vec4 _2653 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2662 = exp2((_2651 * (-1.44269502162933349609375)) * (1.0 - _2653.w));
        float _2663 = log2(_2662);
        float _2679 = log2(_2396);
        _2468 = (exp2(_2679 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].x)) * _2653.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2470 = (exp2(_2679 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].y)) * _2653.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2472 = (exp2(_2679 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2663 * cbSceneParam._m0[78u].z)) * _2653.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2474 = _2662 * _2396;
    }
    else
    {
        _2468 = _2393;
        _2470 = _2394;
        _2472 = _2395;
        _2474 = _2396;
    }
    bool _2689;
    vec4 _2484;
    vec4 _2507;
    float _2509;
    float _2513;
    float _2514;
    float _2515;
    float _2518;
    float _2521;
    float _2524;
    float _2525;
    bool _2536;
    for (;;)
    {
        _2484 = cbMatDynParam._m0[0u];
        float _2486 = roundEven(_2484.y);
        bool _2487 = _2486 == 3.0;
        float _2489 = log2(_2474);
        float _2493 = exp2(_2489 * cbSceneParam._m0[78u].x);
        float _2494 = exp2(_2489 * cbSceneParam._m0[78u].y);
        float _2495 = exp2(_2489 * cbSceneParam._m0[78u].z);
        float _2496 = _2493 * _2355;
        float _2497 = _2494 * _2356;
        float _2498 = _2495 * _2357;
        float _2505 = _318 + (-0.5);
        _2507 = cbMtdParam._m0[1u];
        _2509 = _2507.y * _2505;
        float _2512 = (_2486 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2513 = _2512 * (_2487 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2468)));
        _2514 = _2512 * (_2487 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2470)));
        _2515 = _2512 * (_2487 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
        _2518 = ((_2363 * _2367) * _2493) * _2512;
        _2521 = ((_2364 * _2367) * _2494) * _2512;
        _2524 = ((_2365 * _2367) * _2495) * _2512;
        _2525 = _2505 * 0.999000012874603271484375;
        _2536 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2536)
        {
            if ((cbInstanceData._m0[_370 + 7u].x + _2525) < 0.5)
            {
                _2689 = true;
                break;
            }
        }
        uint _2630 = _372 + uint(_2484.w);
        if ((cbInstanceData._m0[_2630].w < 1.0) && ((cbInstanceData._m0[_2630].w + _2525) < 0.5))
        {
            _2689 = true;
            break;
        }
        if ((_2509 + 1.0) < _2507.x)
        {
            _2689 = true;
            break;
        }
        _2689 = false;
        break;
    }
    float _2844;
    if (_2689)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = cbInstanceData._m0[_2368].w;
    }
    SV_Target.x = _2513;
    SV_Target.y = _2514;
    SV_Target.z = _2515;
    SV_Target.w = _2844;
    SV_Target_1.x = _2518;
    SV_Target_1.y = _2521;
    SV_Target_1.z = _2524;
    SV_Target_1.w = cbInstanceData._m0[_2368].w;
    discard_exit();
}


