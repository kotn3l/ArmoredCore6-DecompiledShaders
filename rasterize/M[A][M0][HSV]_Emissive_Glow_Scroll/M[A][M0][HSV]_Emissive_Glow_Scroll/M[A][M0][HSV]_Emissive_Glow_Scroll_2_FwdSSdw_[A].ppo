#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _785;
float _3015;
float _3016;
float _3017;
float _3018;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _245 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _246 = _245 * _171;
    float _247 = _245 * _172;
    float _248 = _245 * _173;
    float _3027 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3038 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3049 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _268 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _309 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _319 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _309);
    float _320 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _309);
    float _321 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _309);
    float _325 = inversesqrt(dot(vec3(_319, _320, _321), vec3(_319, _320, _321)));
    float _326 = _319 * _325;
    float _327 = _320 * _325;
    float _328 = _321 * _325;
    vec4 _333 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _335 = _333.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _464 = sqrt(((_319 * _319) + (_320 * _320)) + (_321 * _321));
        float _470 = (cbMatDynParam._m0[5u].x * _464) + cbMatDynParam._m0[5u].y;
        float _3060 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
        float _471 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
        float _475 = (cbMatDynParam._m0[5u].z * _464) + cbMatDynParam._m0[5u].w;
        float _3071 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0))) - _471)) + _471) < ((_335 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _347 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _348 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _368 = fma(_248, cbSceneParam._m0[5u].z, fma(_247, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _246));
    float _371 = fma(_248, cbSceneParam._m0[6u].z, fma(_247, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _246));
    float _374 = fma(_248, cbSceneParam._m0[7u].z, fma(_247, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _246));
    uint _387 = uint(roundEven(NORMAL.w)) * 13u;
    uint _388 = _387 + 9u;
    uint _389 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _395 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3027 : (isnan(_3027) ? 1.0 : min(_3027, 1.0)))) * cbInstanceData._m0[_389].x;
    float _396 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3038 : (isnan(_3038) ? 1.0 : min(_3038, 1.0)))) * cbInstanceData._m0[_389].y;
    float _397 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3049 : (isnan(_3049) ? 1.0 : min(_3049, 1.0)))) * cbInstanceData._m0[_389].z;
    float _3082 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0));
    float _3093 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _399 = isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0));
    float _3104 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    vec4 _409 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _347, cbSceneParam._m0[86u].y * _348));
    float _412 = _409.x * TEXCOORD.z;
    float _413 = dot(vec3(_246, _247, _248), vec3(_326, _327, _328));
    float _416 = _413 * 2.0;
    float _421 = (_416 * _246) - _326;
    float _422 = (_416 * _247) - _327;
    float _423 = (_416 * _248) - _328;
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _784;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _509 = fma(_453, cbModelParam._m0[26u].z, fma(_449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _445));
        float _513 = fma(_453, cbModelParam._m0[27u].z, fma(_449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _445));
        float _517 = fma(_453, cbModelParam._m0[28u].z, fma(_449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _445));
        float _542 = _445 + _246;
        float _543 = _449 + _247;
        float _544 = _453 + _248;
        float _554 = fma(_544, cbModelParam._m0[26u].z, fma(_543, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542)) - _509;
        float _555 = fma(_544, cbModelParam._m0[27u].z, fma(_543, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542)) - _513;
        float _556 = fma(_544, cbModelParam._m0[28u].z, fma(_543, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542)) - _517;
        float _560 = inversesqrt(dot(vec3(_554, _555, _556), vec3(_554, _555, _556)));
        float _573 = ((_560 * _554) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_509 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _574 = ((_560 * _555) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_513 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _575 = ((_560 * _556) / cbModelParam._m0[34u].z) + ((((((_517 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_573, _574, _575), 0.0);
        float _612 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_578.x + (-0.5));
        float _614 = _612 * (_578.y + (-0.5));
        float _615 = _612 * (_578.z + (-0.5));
        float _622 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_585.x + (-0.5));
        float _624 = _622 * (_585.y + (-0.5));
        float _625 = _622 * (_585.z + (-0.5));
        float _632 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_592.x + (-0.5));
        float _634 = _632 * (_592.y + (-0.5));
        float _635 = _632 * (_592.z + (-0.5));
        float _642 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_599.x + (-0.5));
        float _644 = _642 * (_599.y + (-0.5));
        float _645 = _642 * (_599.z + (-0.5));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _648 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _649 = _613 * 0.5;
        float _650 = _623 * 0.5;
        float _651 = _633 * 0.5;
        float _652 = dot(vec3(_649, _650, _651), vec3(_649, _650, _651));
        float _657 = (_652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_652);
        float _666 = (dot(vec3(_246, _247, _248), vec3(_657 * _649, _657 * _650, _657 * _651)) + 1.0) * 0.5;
        float _3130 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _676 = sqrt(((_650 * _650) + (_649 * _649)) + (_651 * _651)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3141 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _677 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
        float _678 = _677 * 2.0;
        float _682 = (1.0 - _677) / (_677 + 1.0);
        float _3152 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0));
        float _692 = ((((1.0 - _683) * (_678 + 2.0)) * exp2(log2(isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * (_678 + 1.0))) + _683) * _646;
        float _693 = _614 * 0.5;
        float _694 = _624 * 0.5;
        float _695 = _634 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _709 = (dot(vec3(_246, _247, _248), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _3163 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _718 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_647 + 9.9999997473787516355514526367188e-06);
        float _3174 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _3185 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * (_720 + 1.0))) + _725) * _647;
        float _735 = _615 * 0.5;
        float _736 = _625 * 0.5;
        float _737 = _635 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _751 = (dot(vec3(_246, _247, _248), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3196 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _760 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_648 + 9.9999997473787516355514526367188e-06);
        float _3207 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3218 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))) * (_762 + 1.0))) + _767) * _648;
        _784 = _615;
        _786 = _614;
        _787 = _613;
        _788 = _625;
        _789 = _624;
        _790 = _623;
        _791 = _635;
        _792 = _634;
        _793 = _633;
        _794 = _648;
        _795 = _647;
        _796 = _646;
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0)));
        _798 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
        _799 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
    }
    else
    {
        _784 = _785;
        _786 = _785;
        _787 = _785;
        _788 = _785;
        _789 = _785;
        _790 = _785;
        _791 = _785;
        _792 = _785;
        _793 = _785;
        _794 = _785;
        _795 = _785;
        _796 = _785;
        _797 = 0.0;
        _798 = 0.0;
        _799 = 0.0;
    }
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _828 = fma(_453, cbModelParam._m0[30u].z, fma(_449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _445));
        float _832 = fma(_453, cbModelParam._m0[31u].z, fma(_449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _445));
        float _836 = fma(_453, cbModelParam._m0[32u].z, fma(_449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _445));
        float _859 = _445 + _246;
        float _860 = _449 + _247;
        float _861 = _453 + _248;
        float _871 = fma(_861, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859)) - _828;
        float _872 = fma(_861, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859)) - _832;
        float _873 = fma(_861, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859)) - _836;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_828 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_832 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[35u].z) + ((((((_836 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _927 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_894.x + (-0.5));
        float _929 = _927 * (_894.y + (-0.5));
        float _930 = _927 * (_894.z + (-0.5));
        float _937 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_901.x + (-0.5));
        float _939 = _937 * (_901.y + (-0.5));
        float _940 = _937 * (_901.z + (-0.5));
        float _947 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_908.x + (-0.5));
        float _949 = _947 * (_908.y + (-0.5));
        float _950 = _947 * (_908.z + (-0.5));
        float _957 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_915.x + (-0.5));
        float _959 = _957 * (_915.y + (-0.5));
        float _960 = _957 * (_915.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_246, _247, _248), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3281 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_991 + 1.0))) + _996) * _961;
        float _1006 = _929 * 0.5;
        float _1007 = _939 * 0.5;
        float _1008 = _949 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_246, _247, _248), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3314 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_1033 + 1.0))) + _1038) * _962;
        float _1048 = _930 * 0.5;
        float _1049 = _940 * 0.5;
        float _1050 = _950 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_246, _247, _248), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3325 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3336 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3347 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_1075 + 1.0))) + _1080) * _963;
        _1097 = _930;
        _1098 = _929;
        _1099 = _928;
        _1100 = _940;
        _1101 = _939;
        _1102 = _938;
        _1103 = _950;
        _1104 = _949;
        _1105 = _948;
        _1106 = _963;
        _1107 = _962;
        _1108 = _961;
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1110 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1111 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _785;
        _1098 = _785;
        _1099 = _785;
        _1100 = _785;
        _1101 = _785;
        _1102 = _785;
        _1103 = _785;
        _1104 = _785;
        _1105 = _785;
        _1106 = _785;
        _1107 = _785;
        _1108 = _785;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _797)) + _797;
    float _1122 = (cbModelParam._m0[1u].x * (_1110 - _798)) + _798;
    float _1123 = (cbModelParam._m0[1u].x * (_1111 - _799)) + _799;
    float _1144 = fma(_1123, cbSceneParam._m0[89u].z, fma(_1122, cbSceneParam._m0[89u].y, _1121 * cbSceneParam._m0[89u].x));
    float _1147 = fma(_1123, cbSceneParam._m0[90u].z, fma(_1122, cbSceneParam._m0[90u].y, _1121 * cbSceneParam._m0[90u].x));
    float _1150 = fma(_1123, cbSceneParam._m0[91u].z, fma(_1122, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1121));
    float _1165 = _421 * 0.5;
    float _1166 = _422 * 0.5;
    float _1167 = _423 * 0.5;
    float _1168 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1099, _1102, _1105, _1108));
    float _1171 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1098, _1101, _1104, _1107));
    float _1174 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1208;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1181 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_784, _788, _791, _794));
        float _1185 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_786, _789, _792, _795));
        float _1189 = dot(vec4(_1165, _1166, _1167, 1.0), vec4(_787, _790, _793, _796));
        float _1196 = dot(vec4(cbModelParam._m0[39u]), vec4(_1165, _1166, _1167, 1.0));
        _1208 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1208 = 1.0;
    }
    float _1219;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1210 = dot(vec4(cbModelParam._m0[40u]), vec4(_1165, _1166, _1167, 1.0));
        _1219 = dot(vec3(isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1219 = 1.0;
    }
    float _1223 = (_1219 * cbModelParam._m0[1u].x) + (_1208 * (1.0 - cbModelParam._m0[1u].x));
    float _1232 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1313;
    float _1315;
    float _1317;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1280 = fma(_453, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445)) + cbModelParam._m0[13u].w;
        float _1284 = fma(_453, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445)) + cbModelParam._m0[14u].w;
        float _1288 = fma(_453, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445)) + cbModelParam._m0[15u].w;
        float _1291 = fma(_423, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421));
        float _1294 = fma(_423, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421));
        float _1297 = fma(_423, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421));
        float _1323;
        if (_1291 > 0.0)
        {
            _1323 = abs((1.0 - _1280) / _1291);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1291 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1280 + 1.0) / _1291);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1323 = frontier_phi_17_15_ladder;
        }
        float _1550;
        if (_1294 > 0.0)
        {
            _1550 = abs((1.0 - _1284) / _1294);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1294 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1284 + 1.0) / _1294);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1550 = frontier_phi_26_22_ladder;
        }
        float _1742;
        if (_1297 > 0.0)
        {
            _1742 = abs((1.0 - _1288) / _1297);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1288 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1742 = frontier_phi_38_33_ladder;
        }
        float _1744 = isnan(_1550) ? _1323 : (isnan(_1323) ? _1550 : min(_1323, _1550));
        float _1745 = isnan(_1742) ? _1744 : (isnan(_1744) ? _1742 : min(_1744, _1742));
        float _1749 = (_1745 * _1291) + _1280;
        float _1750 = (_1745 * _1294) + _1284;
        float _1751 = (_1745 * _1297) + _1288;
        float _1752 = _1745 * 9.9999997473787516355514526367188e-05;
        float _1754 = (-1.0) - _1752;
        float _1756 = _1752 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1751 > _1756) || ((_1751 < _1754) || ((_1750 > _1756) || ((_1750 < _1754) || ((_1749 < _1754) || (_1749 > _1756))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1751, cbModelParam._m0[9u].z, fma(_1750, cbModelParam._m0[9u].y, _1749 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1751, cbModelParam._m0[10u].z, fma(_1750, cbModelParam._m0[10u].y, _1749 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1751, cbModelParam._m0[11u].z, fma(_1750, cbModelParam._m0[11u].y, _1749 * cbModelParam._m0[11u].x))), _1232);
            frontier_phi_16_38_ladder = _1848.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1848.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1848.x * cbModelParam._m0[1u].y;
        }
        _1313 = frontier_phi_16_38_ladder_2;
        _1315 = frontier_phi_16_38_ladder_1;
        _1317 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_421, _422, _423), _1232);
        _1313 = _1301.x * cbModelParam._m0[1u].y;
        _1315 = _1301.y * cbModelParam._m0[1u].y;
        _1317 = _1301.z * cbModelParam._m0[1u].y;
    }
    float _1320 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1412;
    float _1414;
    float _1416;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1376 = fma(_453, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445)) + cbModelParam._m0[21u].w;
        float _1380 = fma(_453, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445)) + cbModelParam._m0[22u].w;
        float _1384 = fma(_453, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445)) + cbModelParam._m0[23u].w;
        float _1387 = fma(_423, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421));
        float _1390 = fma(_423, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421));
        float _1393 = fma(_423, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421));
        float _1555;
        if (_1387 > 0.0)
        {
            _1555 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1555 = frontier_phi_28_24_ladder;
        }
        float _1769;
        if (_1390 > 0.0)
        {
            _1769 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1769 = frontier_phi_40_35_ladder;
        }
        float _1920;
        if (_1393 > 0.0)
        {
            _1920 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1920 = frontier_phi_49_46_ladder;
        }
        float _1922 = isnan(_1769) ? _1555 : (isnan(_1555) ? _1769 : min(_1555, _1769));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1387) + _1376;
        float _1928 = (_1923 * _1390) + _1380;
        float _1929 = (_1923 * _1393) + _1384;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1930;
        float _1933 = _1930 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1929 > _1933) || ((_1929 < _1931) || ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 < _1931) || (_1927 > _1933))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1929, cbModelParam._m0[17u].z, fma(_1928, cbModelParam._m0[17u].y, _1927 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1929, cbModelParam._m0[18u].z, fma(_1928, cbModelParam._m0[18u].y, _1927 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1929, cbModelParam._m0[19u].z, fma(_1928, cbModelParam._m0[19u].y, _1927 * cbModelParam._m0[19u].x))), _1320);
            frontier_phi_25_49_ladder = _2163.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2163.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2163.x * cbModelParam._m0[1u].z;
        }
        _1412 = frontier_phi_25_49_ladder_2;
        _1414 = frontier_phi_25_49_ladder_1;
        _1416 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_421, _422, _423), _1320);
        _1412 = _1396.x * cbModelParam._m0[1u].z;
        _1414 = _1396.y * cbModelParam._m0[1u].z;
        _1416 = _1396.z * cbModelParam._m0[1u].z;
    }
    float _1428 = _412 * 0.01200000010430812835693359375;
    float _1430 = _1428 * ((cbModelParam._m0[1u].w * (_1412 - _1313)) + _1313);
    float _1431 = _1428 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1432 = _1428 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1435 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, _1430 * cbSceneParam._m0[91u].x));
    vec4 _1449 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_347, _348));
    float _1451 = _1449.w;
    float _1463 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1451);
    float _1464 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1451);
    float _1465 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1451);
    uvec4 _1469 = floatBitsToUint(cbInstanceData._m0[_387 + 5u]);
    uint _1471 = _1469.x * 14u;
    uint _1472 = _1471 + 13u;
    float _1479 = _412 + (-1.0);
    float _1485 = (cbLight._m0[_1472].x * _1479) + 1.0;
    float _1486 = (cbLight._m0[_1472].y * _1479) + 1.0;
    float _1487 = (cbLight._m0[_1472].z * _1479) + 1.0;
    float _1488 = (cbLight._m0[_1472].w * _1479) + 1.0;
    uint _1489 = _1471 + 5u;
    float _1495 = isnan(1.0) ? _1486 : (isnan(_1486) ? 1.0 : min(_1486, 1.0));
    uint _1499 = _1471 + 4u;
    float _1509 = isnan(1.0) ? _1485 : (isnan(_1485) ? 1.0 : min(_1485, 1.0));
    uint _1513 = _1471 | 1u;
    float _1524 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_246, _247, _248));
    float _1527 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_246, _247, _248));
    float _3483 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _3494 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1532 = (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.3183098733425140380859375;
    float _1534 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.3183098733425140380859375;
    float _1541 = ((cbLight._m0[_1489].x * _1495) * _1534) + (((cbLight._m0[_1499].x * _1463) * _1509) * _1532);
    float _1542 = ((_1495 * cbLight._m0[_1489].y) * _1534) + (((cbLight._m0[_1499].y * _1464) * _1509) * _1532);
    float _1543 = ((_1495 * cbLight._m0[_1489].z) * _1534) + (((cbLight._m0[_1499].z * _1465) * _1509) * _1532);
    uvec4 _1547 = floatBitsToUint(cbLight._m0[_1471 + 12u]);
    bool _1549 = _1547.x == 0u;
    float _1560;
    float _1562;
    float _1564;
    if (_1549)
    {
        _1560 = _1541;
        _1562 = _1542;
        _1564 = _1543;
    }
    else
    {
        uint _1568 = _1471 + 6u;
        float _1584 = (dot(vec3(cbLight._m0[_1471 + 2u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1585 = _1584 * _1584;
        float _3505 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1587 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1560 = (((cbLight._m0[_1568].x * 0.3183098733425140380859375) * _1586) * _1587) + _1541;
        _1562 = (((cbLight._m0[_1568].y * 0.3183098733425140380859375) * _1586) * _1587) + _1542;
        _1564 = (((cbLight._m0[_1568].z * 0.3183098733425140380859375) * _1586) * _1587) + _1543;
    }
    bool _1567 = _1547.y == 0u;
    float _1605;
    float _1607;
    float _1609;
    if (_1567)
    {
        _1605 = _1560;
        _1607 = _1562;
        _1609 = _1564;
    }
    else
    {
        uint _1713 = _1471 + 7u;
        float _1729 = (dot(vec3(cbLight._m0[_1471 + 3u].xyz), vec3(_246, _247, _248)) * 0.5) + 0.5;
        float _1730 = _1729 * _1729;
        float _3521 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1732 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1605 = (((cbLight._m0[_1713].x * 0.3183098733425140380859375) * _1731) * _1732) + _1560;
        _1607 = (((cbLight._m0[_1713].y * 0.3183098733425140380859375) * _1731) * _1732) + _1562;
        _1609 = (((cbLight._m0[_1713].z * 0.3183098733425140380859375) * _1731) * _1732) + _1564;
    }
    uint _1611 = _1471 + 8u;
    float _1617 = cbLight._m0[_1471].x + _326;
    float _1618 = cbLight._m0[_1471].y + _327;
    float _1619 = cbLight._m0[_1471].z + _328;
    float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
    float _1627 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1471].xyz));
    float _3537 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1630 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _1631 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1471].xyz), vec3(_1617 * _1623, _1618 * _1623, _1619 * _1623));
    float _3559 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1643 = (exp2(log2(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1649 = (0.5 / ((_1630 + 9.9999999392252902907785028219223e-09) + _1631)) * _1630;
    float _3570 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.31831014156341552734375;
    uint _1665 = _1471 + 9u;
    float _1671 = cbLight._m0[_1513].x + _326;
    float _1672 = cbLight._m0[_1513].y + _327;
    float _1673 = cbLight._m0[_1513].z + _328;
    float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
    float _1681 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1513].xyz));
    float _3581 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
    float _1685 = dot(vec3(cbLight._m0[_1513].xyz), vec3(_1671 * _1677, _1672 * _1677, _1673 * _1677));
    float _3592 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1694 = (exp2(log2(1.0 - (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1698 = (0.5 / ((_1684 + 9.9999999392252902907785028219223e-09) + _1631)) * _1684;
    float _3603 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1700 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.31831014156341552734375;
    float _1710 = (((_1694 * cbLight._m0[_1665].x) * _1700) * _1495) + ((((cbLight._m0[_1611].x * _1463) * _1643) * _1651) * _1509);
    float _1711 = (((_1694 * cbLight._m0[_1665].y) * _1700) * _1495) + ((((cbLight._m0[_1611].y * _1464) * _1643) * _1651) * _1509);
    float _1712 = (((_1694 * cbLight._m0[_1665].z) * _1700) * _1495) + ((((cbLight._m0[_1611].z * _1465) * _1643) * _1651) * _1509);
    float _1774;
    float _1776;
    float _1778;
    if (_1549)
    {
        _1774 = _1710;
        _1776 = _1711;
        _1778 = _1712;
    }
    else
    {
        uint _1780 = _1471 + 10u;
        uint _1786 = _1471 + 2u;
        float _1792 = cbLight._m0[_1786].x + _326;
        float _1793 = cbLight._m0[_1786].y + _327;
        float _1794 = cbLight._m0[_1786].z + _328;
        float _1798 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
        float _1802 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1786].xyz));
        float _3614 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1805 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1806 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1792 * _1798, _1793 * _1798, _1794 * _1798));
        float _3625 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1819 = (0.5 / ((_1805 + 9.9999999392252902907785028219223e-09) + _1631)) * _1805;
        float _3636 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1821 = (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.31831014156341552734375;
        float _1822 = isnan(1.0) ? _1487 : (isnan(_1487) ? 1.0 : min(_1487, 1.0));
        _1774 = (((_1815 * cbLight._m0[_1780].x) * _1821) * _1822) + _1710;
        _1776 = (((_1815 * cbLight._m0[_1780].y) * _1821) * _1822) + _1711;
        _1778 = (((_1815 * cbLight._m0[_1780].z) * _1821) * _1822) + _1712;
    }
    float _1857;
    float _1859;
    float _1861;
    if (_1567)
    {
        _1857 = _1774;
        _1859 = _1776;
        _1861 = _1778;
    }
    else
    {
        uint _1868 = _1471 + 11u;
        uint _1874 = _1471 + 3u;
        float _1880 = cbLight._m0[_1874].x + _326;
        float _1881 = cbLight._m0[_1874].y + _327;
        float _1882 = cbLight._m0[_1874].z + _328;
        float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
        float _1890 = dot(vec3(_246, _247, _248), vec3(cbLight._m0[_1874].xyz));
        float _3652 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1893 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1894 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_1880 * _1886, _1881 * _1886, _1882 * _1886));
        float _3663 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1907 = (0.5 / ((_1893 + 9.9999999392252902907785028219223e-09) + _1631)) * _1893;
        float _3674 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1909 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.31831014156341552734375;
        float _1910 = isnan(1.0) ? _1488 : (isnan(_1488) ? 1.0 : min(_1488, 1.0));
        _1857 = (((_1903 * cbLight._m0[_1868].x) * _1909) * _1910) + _1774;
        _1859 = (((_1903 * cbLight._m0[_1868].y) * _1909) * _1910) + _1776;
        _1861 = (((_1903 * cbLight._m0[_1868].z) * _1909) * _1910) + _1778;
    }
    float _2045;
    float _2047;
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    if (_1469.y == 0u)
    {
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1985;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1985;
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1985;
        uvec4 _2000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2001 = _2000.x;
        uint _2012 = uint((float(_2000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _348) / _2001))) + floor(float(uint(cbSceneParam._m0[85u].x * _347) / _2001)));
        float _2022 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2023 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        uint _2026 = uint(isnan(14.0) ? _2023 : (isnan(_2023) ? 14.0 : min(_2023, 14.0)));
        uvec4 _2031 = texelFetch(g_lightClusterGridBuffer, int(((_2026 << 2u) + (_2012 << 6u)) >> 2u));
        uint _2032 = _2031.x;
        uint _2033 = _2000.z;
        float _2168;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        if (((((1u << ((_2033 >> 4u) & 15u)) + 4294967295u) & _2032) == 0u) || ((_2033 & 240u) == 0u))
        {
            _2168 = 0.0;
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
        }
        else
        {
            float _2169;
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            uint _2335 = 0u;
            uint _2344;
            bool _2345;
            for (;;)
            {
                _2344 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                _2345 = _2344 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2345)
                {
                    frontier_phi_66_pred = _2329;
                    frontier_phi_66_pred_1 = _2334;
                    frontier_phi_66_pred_2 = _2333;
                    frontier_phi_66_pred_3 = _2332;
                    frontier_phi_66_pred_4 = _2331;
                    frontier_phi_66_pred_5 = _2330;
                }
                else
                {
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    float _2479;
                    uint _2480;
                    _2474 = _2329;
                    _2475 = _2330;
                    _2476 = _2331;
                    _2477 = _2332;
                    _2478 = _2333;
                    _2479 = _2334;
                    _2480 = _2344;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    for (;;)
                    {
                        uint _2484 = uint(findLSB(_2480)) + (_2335 << 5u);
                        uint _2481 = (_2480 + 4294967295u) & _2480;
                        uint _2486 = _2484 * 48u;
                        vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2486)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2486 + 3u)).x));
                        uint _2506 = (_2484 * 48u) + 4u;
                        vec4 _2519 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 3u)).x));
                        uint _2525 = (_2484 * 48u) + 8u;
                        vec3 _2536 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2525)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2525 + 2u)).x));
                        float _2540 = _2500.x - _1986;
                        float _2541 = _2500.y - _1987;
                        float _2542 = _2500.z - _1988;
                        float _2543 = dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542));
                        float _2546 = inversesqrt(_2543);
                        float _2555 = 1.0 - (_2543 * _2500.w);
                        float _3700 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
                        float _2556 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
                        float _2557 = sqrt(_2543) * _2519.w;
                        float _2560 = 1.39999997615814208984375 / (_2557 + 1.39999997615814208984375);
                        float _2561 = _2560 * _2560;
                        float _2564 = ((1.0 - _2561) * dot(vec3(_368, _371, _374), vec3(_2546 * _2540, _2546 * _2541, _2546 * _2542))) + _2561;
                        float _2567 = _2557 * _2557;
                        float _2571 = ((isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))) * _2556) / ((_2567 * 0.699999988079071044921875) + 1.0);
                        float _2575 = (-0.0) - _1986;
                        float _2576 = (-0.0) - _1987;
                        float _2577 = (-0.0) - _1988;
                        float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
                        float _2585 = dot(vec3(_368, _371, _374), vec3(_2581 * _2575, _2581 * _2576, _2581 * _2577));
                        float _3716 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _3727 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _2589 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
                        float _2593 = (0.5 / (((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) + 9.9999999392252902907785028219223e-09) + _2589)) * _2589;
                        float _3738 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _2602 = (((isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 3.1415927410125732421875) / ((_2567 * 2.1991131305694580078125) + 3.141590118408203125)) * _2556;
                        _2404 = (_2571 * _2519.x) + _2477;
                        _2405 = (_2571 * _2519.y) + _2478;
                        _2406 = (_2571 * _2519.z) + _2479;
                        _2401 = (_2602 * _2536.x) + _2474;
                        _2402 = (_2602 * _2536.y) + _2475;
                        _2403 = (_2602 * _2536.z) + _2476;
                        if (_2481 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2474 = _2401;
                            _2475 = _2402;
                            _2476 = _2403;
                            _2477 = _2404;
                            _2478 = _2405;
                            _2479 = _2406;
                            _2480 = _2481;
                        }
                    }
                    frontier_phi_66_pred = _2401;
                    frontier_phi_66_pred_1 = _2406;
                    frontier_phi_66_pred_2 = _2405;
                    frontier_phi_66_pred_3 = _2404;
                    frontier_phi_66_pred_4 = _2403;
                    frontier_phi_66_pred_5 = _2402;
                }
                _2169 = frontier_phi_66_pred;
                _2179 = frontier_phi_66_pred_1;
                _2177 = frontier_phi_66_pred_2;
                _2175 = frontier_phi_66_pred_3;
                _2173 = frontier_phi_66_pred_4;
                _2171 = frontier_phi_66_pred_5;
                uint _2336 = _2335 + 1u;
                if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2329 = _2169;
                    _2330 = _2171;
                    _2331 = _2173;
                    _2332 = _2175;
                    _2333 = _2177;
                    _2334 = _2179;
                    _2335 = _2336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2168 = _2169;
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
        }
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.z;
        uint _2185 = (_2183 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2185) & _2032) == 0u)
        {
            _2300 = _2168;
            _2302 = _2170;
            _2304 = _2172;
            _2306 = _2174;
            _2308 = _2176;
            _2310 = _2178;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2185 < ((_2183 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2457 = _2168;
                float _2458 = _2170;
                float _2459 = _2172;
                float _2460 = _2174;
                float _2461 = _2176;
                float _2462 = _2178;
                uint _2463 = _2185;
                uint _2472;
                bool _2473;
                for (;;)
                {
                    _2472 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2463 << 2u)) >> 2u)).x;
                    _2473 = _2472 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2473)
                    {
                        frontier_phi_77_pred = _2462;
                        frontier_phi_77_pred_1 = _2461;
                        frontier_phi_77_pred_2 = _2460;
                        frontier_phi_77_pred_3 = _2459;
                        frontier_phi_77_pred_4 = _2458;
                        frontier_phi_77_pred_5 = _2457;
                    }
                    else
                    {
                        float _2616;
                        float _2617;
                        float _2618;
                        float _2619;
                        float _2620;
                        float _2621;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2629 = _2457;
                        float _2630 = _2458;
                        float _2631 = _2459;
                        float _2632 = _2460;
                        float _2633 = _2461;
                        float _2634 = _2462;
                        uint _2635 = _2472;
                        uint _2636;
                        vec4 _2661;
                        float _2662;
                        vec4 _2677;
                        vec3 _2689;
                        vec4 _2705;
                        vec4 _2721;
                        float _2768;
                        bool _2769;
                        for (;;)
                        {
                            uint _2646 = ((_2463 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2635));
                            _2636 = (_2635 + 4294967295u) & _2635;
                            uint _2648 = _2646 * 40u;
                            _2661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2648 + 3u)).x));
                            _2662 = _2661.w;
                            uint _2664 = (_2646 * 40u) + 4u;
                            _2677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2664 + 3u)).x));
                            uint _2679 = (_2646 * 40u) + 8u;
                            _2689 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x));
                            uint _2692 = (_2646 * 40u) + 16u;
                            _2705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2692 + 3u)).x));
                            uint _2708 = (_2646 * 40u) + 20u;
                            _2721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2708 + 3u)).x));
                            uint _2724 = (_2646 * 40u) + 24u;
                            vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            uint _2743 = (_2646 * 40u) + 28u;
                            vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2743 + 3u)).x));
                            _2768 = fma(_1988, _2756.z, fma(_1987, _2756.y, _2756.x * _1986)) + _2756.w;
                            _2769 = !((fma(_1988, _2737.z, fma(_1987, _2737.y, _2737.x * _1986)) + _2737.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2769)
                            {
                                float _2796 = _2661.x - _1986;
                                float _2797 = _2661.y - _1987;
                                float _2798 = _2661.z - _1988;
                                float _2799 = dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798));
                                float _2802 = inversesqrt(_2799);
                                float _2803 = _2802 * _2796;
                                float _2804 = _2802 * _2797;
                                float _2805 = _2802 * _2798;
                                float _2809 = 1.0 - (_2799 / (_2662 * _2662));
                                float _3749 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                                float _2810 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                                float _2814 = sqrt(_2799) * _2677.w;
                                float _2816 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                                float _2817 = _2816 * _2816;
                                float _2818 = 1.0 - _2817;
                                float _2820 = (_2818 * dot(vec3(_2803, _2804, _2805), vec3(_368, _371, _374))) + _2817;
                                float _2823 = _2814 * _2814;
                                float _2827 = (fma(_1988, _2705.z, fma(_1987, _2705.y, _2705.x * _1986)) + _2705.w) / _2768;
                                float _2828 = (fma(_1988, _2721.z, fma(_1987, _2721.y, _2721.x * _1986)) + _2721.w) / _2768;
                                float _2832 = 1.0 - dot(vec2(_2827, _2828), vec2(_2827, _2828));
                                float _3765 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                                float _2833 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
                                float _2834 = _2833 * (((isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * _2810) / ((_2823 * 0.699999988079071044921875) + 1.0));
                                float _2844 = dot(vec3(_368, _371, _374), vec3((-0.0) - (_1986 * _2325), (-0.0) - (_1987 * _2325), (-0.0) - (_1988 * _2325)));
                                float _3776 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2852 = (_2818 * dot(vec3(_368, _371, _374), vec3(_2803, _2804, _2805))) + _2817;
                                float _3787 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                                float _2857 = (0.5 / (((isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) + 9.9999999392252902907785028219223e-09) + _2853)) * _2853;
                                float _3798 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2864 = (_2833 * _2810) * (((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 3.1415927410125732421875) / ((_2823 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2834 * _2677.y;
                                frontier_phi_83_pred_1 = _2834 * _2677.x;
                                frontier_phi_83_pred_2 = _2864 * _2689.z;
                                frontier_phi_83_pred_3 = _2864 * _2689.y;
                                frontier_phi_83_pred_4 = _2864 * _2689.x;
                                frontier_phi_83_pred_5 = _2834 * _2677.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2872 = frontier_phi_83_pred;
                            _2871 = frontier_phi_83_pred_1;
                            _2870 = frontier_phi_83_pred_2;
                            _2869 = frontier_phi_83_pred_3;
                            _2868 = frontier_phi_83_pred_4;
                            _2873 = frontier_phi_83_pred_5;
                            _2619 = _2871 + _2632;
                            _2620 = _2872 + _2633;
                            _2621 = _2873 + _2634;
                            _2616 = _2868 + _2629;
                            _2617 = _2869 + _2630;
                            _2618 = _2870 + _2631;
                            if (_2636 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2629 = _2616;
                                _2630 = _2617;
                                _2631 = _2618;
                                _2632 = _2619;
                                _2633 = _2620;
                                _2634 = _2621;
                                _2635 = _2636;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2621;
                        frontier_phi_77_pred_1 = _2620;
                        frontier_phi_77_pred_2 = _2619;
                        frontier_phi_77_pred_3 = _2618;
                        frontier_phi_77_pred_4 = _2617;
                        frontier_phi_77_pred_5 = _2616;
                    }
                    _2311 = frontier_phi_77_pred;
                    _2309 = frontier_phi_77_pred_1;
                    _2307 = frontier_phi_77_pred_2;
                    _2305 = frontier_phi_77_pred_3;
                    _2303 = frontier_phi_77_pred_4;
                    _2301 = frontier_phi_77_pred_5;
                    uint _2464 = _2463 + 1u;
                    if (_2464 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2457 = _2301;
                        _2458 = _2303;
                        _2459 = _2305;
                        _2460 = _2307;
                        _2461 = _2309;
                        _2462 = _2311;
                        _2463 = _2464;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2305;
                frontier_phi_58_59_ladder_1 = _2311;
                frontier_phi_58_59_ladder_2 = _2309;
                frontier_phi_58_59_ladder_3 = _2307;
                frontier_phi_58_59_ladder_4 = _2303;
                frontier_phi_58_59_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_58_59_ladder = _2172;
                frontier_phi_58_59_ladder_1 = _2178;
                frontier_phi_58_59_ladder_2 = _2176;
                frontier_phi_58_59_ladder_3 = _2174;
                frontier_phi_58_59_ladder_4 = _2170;
                frontier_phi_58_59_ladder_5 = _2168;
            }
            _2300 = frontier_phi_58_59_ladder_5;
            _2302 = frontier_phi_58_59_ladder_4;
            _2304 = frontier_phi_58_59_ladder;
            _2306 = frontier_phi_58_59_ladder_3;
            _2308 = frontier_phi_58_59_ladder_2;
            _2310 = frontier_phi_58_59_ladder_1;
        }
        float _2315 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
        _2045 = (_2315 * _2306) + _1605;
        _2047 = (_2315 * _2308) + _1607;
        _2049 = (_2315 * _2310) + _1609;
        _2051 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1857;
        _2053 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1859;
        _2055 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1861;
    }
    else
    {
        _2045 = _1605;
        _2047 = _1607;
        _2049 = _1609;
        _2051 = _1857;
        _2053 = _1859;
        _2055 = _1861;
    }
    uint _2061 = _388 + uint(cbMatDynParam._m0[0u].w);
    float _2069 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _237.x) * cbInstanceData._m0[_2061].x;
    float _2072 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _237.y) * cbInstanceData._m0[_2061].y;
    float _2075 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _237.z) * cbInstanceData._m0[_2061].z;
    float _3814 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _3825 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3836 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _2092 = (((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * (_2045 + ((isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0))) * _412))) + ((_2051 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + _2069;
    float _2094 = (_2072 + ((_2053 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_2047 + ((isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))) * _412)));
    float _2096 = (_2075 + ((_2055 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1223)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_2049 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _412)));
    float _2097 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2098 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2105 = cbMtdParam._m0[2u].x * _2069;
    float _2106 = cbMtdParam._m0[2u].y * _2072;
    float _2107 = cbMtdParam._m0[2u].z * _2075;
    float _3862 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2109 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    uint _2110 = _387 + 6u;
    float _2118 = _347 / cbSceneParam._m0[86u].x;
    float _2119 = _348 / cbSceneParam._m0[86u].y;
    vec4 _2133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, (log2((isnan(cbSceneParam._m0[77u].w) ? _268 : (isnan(_268) ? cbSceneParam._m0[77u].w : min(_268, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2135 = _2133.x;
    float _2136 = _2133.y;
    float _2137 = _2133.z;
    float _2138 = _2133.w;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_268 > cbSceneParam._m0[78u].w)
    {
        float _2193 = isnan(_268) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _268 : min(cbSceneParam._m0[80u].w, _268));
        float _2194 = _2193 / _268;
        float _2205 = _2194 * _319;
        float _2206 = _320 * _2194;
        float _2207 = (-0.0) - _2206;
        float _2209 = _2194 * _321;
        float _2211 = (cbSceneParam._m0[77u].w * _2207) / _2193;
        float _2212 = _2211 + cbSceneParam._m0[79u].w;
        float _2213 = cbSceneParam._m0[79u].w - _2206;
        float _2219 = sqrt(((_2205 * _2205) + (_2206 * _2206)) + (_2209 * _2209));
        float _2222 = (1.0 - (cbSceneParam._m0[77u].w / _2193)) * _2219;
        float _2227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2414;
        if (abs((_2207 - _2211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2414 = ((((_2212 > 0.0) ? exp2(_2227 * _2212) : (2.0 - exp2(_2229 * _2212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2222;
        }
        else
        {
            float _2358 = 1.0 / cbSceneParam._m0[80u].x;
            float _2359 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : max(_2212, _2213));
            float _2360 = isnan(_2213) ? _2212 : (isnan(_2212) ? _2213 : min(_2212, _2213));
            float _2369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : min(_2359, 0.0));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            _2414 = ((abs(_2219 / _2207) * cbSceneParam._m0[80u].y) * ((((_2369 - _2370) * 2.0) - ((exp2(_2227 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)))) - exp2(_2227 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))))) * _2358)) - ((exp2(_2229 * _2369) - exp2(_2229 * _2370)) * _2358))) + (_2222 * cbSceneParam._m0[80u].z);
        }
        vec4 _2416 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2118, _2119, 1.0), 0.0);
        float _2425 = exp2((_2414 * (-1.44269502162933349609375)) * (1.0 - _2416.w));
        float _2426 = log2(_2425);
        float _2442 = log2(_2138);
        _2231 = (exp2(_2442 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].x)) * _2416.x) / cbSceneParam._m0[78u].x)) + _2135;
        _2233 = (exp2(_2442 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].y)) * _2416.y) / cbSceneParam._m0[78u].y)) + _2136;
        _2235 = (exp2(_2442 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2426 * cbSceneParam._m0[78u].z)) * _2416.z) / cbSceneParam._m0[78u].z)) + _2137;
        _2237 = _2425 * _2138;
    }
    else
    {
        _2231 = _2135;
        _2233 = _2136;
        _2235 = _2137;
        _2237 = _2138;
    }
    bool _2452;
    vec4 _2247;
    vec4 _2270;
    float _2272;
    float _2276;
    float _2277;
    float _2278;
    float _2281;
    float _2284;
    float _2287;
    float _2288;
    bool _2299;
    for (;;)
    {
        _2247 = cbMatDynParam._m0[0u];
        float _2249 = roundEven(_2247.y);
        bool _2250 = _2249 == 3.0;
        float _2252 = log2(_2237);
        float _2256 = exp2(_2252 * cbSceneParam._m0[78u].x);
        float _2257 = exp2(_2252 * cbSceneParam._m0[78u].y);
        float _2258 = exp2(_2252 * cbSceneParam._m0[78u].z);
        float _2259 = _2256 * _2097;
        float _2260 = _2257 * _2098;
        float _2261 = _2258 * _2099;
        float _2268 = _335 + (-0.5);
        _2270 = cbMtdParam._m0[1u];
        _2272 = _2270.y * _2268;
        float _2275 = (_2249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2276 = _2275 * (_2250 ? _2259 : (_2259 + (cbSceneParam._m0[72u].w * _2231)));
        _2277 = _2275 * (_2250 ? _2260 : (_2260 + (cbSceneParam._m0[72u].w * _2233)));
        _2278 = _2275 * (_2250 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2235)));
        _2281 = ((_2105 * _2109) * _2256) * _2275;
        _2284 = ((_2106 * _2109) * _2257) * _2275;
        _2287 = ((_2107 * _2109) * _2258) * _2275;
        _2288 = _2268 * 0.999000012874603271484375;
        _2299 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2299)
        {
            if ((cbInstanceData._m0[_387 + 7u].x + _2288) < 0.5)
            {
                _2452 = true;
                break;
            }
        }
        uint _2393 = _388 + uint(_2247.w);
        if ((cbInstanceData._m0[_2393].w < 1.0) && ((cbInstanceData._m0[_2393].w + _2288) < 0.5))
        {
            _2452 = true;
            break;
        }
        if ((_2272 + 1.0) < _2270.x)
        {
            _2452 = true;
            break;
        }
        _2452 = false;
        break;
    }
    float _2607;
    if (_2452)
    {
        discard_state = true;
        _2607 = 0.0;
    }
    else
    {
        _2607 = cbInstanceData._m0[_2110].w;
    }
    SV_Target.x = _2276;
    SV_Target.y = _2277;
    SV_Target.z = _2278;
    SV_Target.w = _2607;
    SV_Target_1.x = _2281;
    SV_Target_1.y = _2284;
    SV_Target_1.z = _2287;
    SV_Target_1.w = cbInstanceData._m0[_2110].w;
    discard_exit();
}


