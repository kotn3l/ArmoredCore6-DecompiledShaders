#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _757;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _233 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _246 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2933 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _248 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
    float _256 = (((_248 * _248) * (3.0 - (_248 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _260 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _261 = _260 * _167;
    float _262 = _260 * _168;
    float _263 = _260 * _169;
    float _2944 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2955 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2966 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _282 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _323 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _333 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _323);
    float _334 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _323);
    float _335 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _323);
    float _339 = inversesqrt(dot(vec3(_333, _334, _335), vec3(_333, _334, _335)));
    float _340 = _333 * _339;
    float _341 = _334 * _339;
    float _342 = _335 * _339;
    float _348 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _349 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _370 = fma(_263, cbSceneParam._m0[5u].z, fma(_262, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _261));
    float _373 = fma(_263, cbSceneParam._m0[6u].z, fma(_262, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _261));
    float _376 = fma(_263, cbSceneParam._m0[7u].z, fma(_262, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _261));
    uint _389 = uint(roundEven(NORMAL.w)) * 13u;
    uint _390 = _389 + 9u;
    uint _391 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _397 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0)))) * cbInstanceData._m0[_391].x;
    float _398 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0)))) * cbInstanceData._m0[_391].y;
    float _399 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0)))) * cbInstanceData._m0[_391].z;
    float _2977 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _400 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
    float _2988 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _401 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
    float _2999 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0));
    vec4 _411 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _348, cbSceneParam._m0[86u].y * _349));
    float _414 = _411.x * TEXCOORD.z;
    float _415 = dot(vec3(_261, _262, _263), vec3(_340, _341, _342));
    float _418 = _415 * 2.0;
    float _422 = (_418 * _261) - _340;
    float _423 = (_418 * _262) - _341;
    float _424 = (_418 * _263) - _342;
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _756;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _481 = fma(_454, cbModelParam._m0[26u].z, fma(_450, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _446));
        float _485 = fma(_454, cbModelParam._m0[27u].z, fma(_450, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _446));
        float _489 = fma(_454, cbModelParam._m0[28u].z, fma(_450, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _446));
        float _514 = _446 + _261;
        float _515 = _450 + _262;
        float _516 = _454 + _263;
        float _526 = fma(_516, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _514)) - _481;
        float _527 = fma(_516, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _514)) - _485;
        float _528 = fma(_516, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _514)) - _489;
        float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
        float _545 = ((_532 * _526) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_481 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _546 = ((_532 * _527) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_485 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _547 = ((_532 * _528) / cbModelParam._m0[34u].z) + ((((((_489 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_545, _546, _547), 0.0);
        float _584 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _585 = _584 * (_550.x + (-0.5));
        float _586 = _584 * (_550.y + (-0.5));
        float _587 = _584 * (_550.z + (-0.5));
        float _594 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _595 = _594 * (_557.x + (-0.5));
        float _596 = _594 * (_557.y + (-0.5));
        float _597 = _594 * (_557.z + (-0.5));
        float _604 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_564.x + (-0.5));
        float _606 = _604 * (_564.y + (-0.5));
        float _607 = _604 * (_564.z + (-0.5));
        float _614 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_571.x + (-0.5));
        float _616 = _614 * (_571.y + (-0.5));
        float _617 = _614 * (_571.z + (-0.5));
        float _618 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _619 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        float _620 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _621 = _585 * 0.5;
        float _622 = _595 * 0.5;
        float _623 = _605 * 0.5;
        float _624 = dot(vec3(_621, _622, _623), vec3(_621, _622, _623));
        float _629 = (_624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_624);
        float _638 = (dot(vec3(_261, _262, _263), vec3(_629 * _621, _629 * _622, _629 * _623)) + 1.0) * 0.5;
        float _3025 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        float _648 = sqrt(((_622 * _622) + (_621 * _621)) + (_623 * _623)) / (_618 + 9.9999997473787516355514526367188e-06);
        float _3036 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _650 = _649 * 2.0;
        float _654 = (1.0 - _649) / (_649 + 1.0);
        float _3047 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
        float _664 = ((((1.0 - _655) * (_650 + 2.0)) * exp2(log2(isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0))) * (_650 + 1.0))) + _655) * _618;
        float _665 = _586 * 0.5;
        float _666 = _596 * 0.5;
        float _667 = _606 * 0.5;
        float _668 = dot(vec3(_665, _666, _667), vec3(_665, _666, _667));
        float _673 = (_668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_668);
        float _681 = (dot(vec3(_261, _262, _263), vec3(_673 * _665, _673 * _666, _673 * _667)) + 1.0) * 0.5;
        float _3058 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _690 = sqrt(((_666 * _666) + (_665 * _665)) + (_667 * _667)) / (_619 + 9.9999997473787516355514526367188e-06);
        float _3069 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _692 = _691 * 2.0;
        float _696 = (1.0 - _691) / (_691 + 1.0);
        float _3080 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
        float _706 = ((((1.0 - _697) * (_692 + 2.0)) * exp2(log2(isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0))) * (_692 + 1.0))) + _697) * _619;
        float _707 = _587 * 0.5;
        float _708 = _597 * 0.5;
        float _709 = _607 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _723 = (dot(vec3(_261, _262, _263), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3091 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _732 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_620 + 9.9999997473787516355514526367188e-06);
        float _3102 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _734 = _733 * 2.0;
        float _738 = (1.0 - _733) / (_733 + 1.0);
        float _3113 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0));
        float _748 = ((((1.0 - _739) * (_734 + 2.0)) * exp2(log2(isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0))) * (_734 + 1.0))) + _739) * _620;
        _756 = _587;
        _758 = _586;
        _759 = _585;
        _760 = _597;
        _761 = _596;
        _762 = _595;
        _763 = _607;
        _764 = _606;
        _765 = _605;
        _766 = _620;
        _767 = _619;
        _768 = _618;
        _769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0)));
        _770 = cbModelParam._m0[36u].z * (isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0)));
        _771 = cbModelParam._m0[36u].z * (isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0)));
    }
    else
    {
        _756 = _757;
        _758 = _757;
        _759 = _757;
        _760 = _757;
        _761 = _757;
        _762 = _757;
        _763 = _757;
        _764 = _757;
        _765 = _757;
        _766 = _757;
        _767 = _757;
        _768 = _757;
        _769 = 0.0;
        _770 = 0.0;
        _771 = 0.0;
    }
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _797 = fma(_454, cbModelParam._m0[30u].z, fma(_450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _446));
        float _801 = fma(_454, cbModelParam._m0[31u].z, fma(_450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _446));
        float _805 = fma(_454, cbModelParam._m0[32u].z, fma(_450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _446));
        float _828 = _446 + _261;
        float _829 = _450 + _262;
        float _830 = _454 + _263;
        float _840 = fma(_830, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828)) - _797;
        float _841 = fma(_830, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828)) - _801;
        float _842 = fma(_830, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828)) - _805;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_797 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_801 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[35u].z) + ((((((_805 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _896 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_863.x + (-0.5));
        float _898 = _896 * (_863.y + (-0.5));
        float _899 = _896 * (_863.z + (-0.5));
        float _906 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_870.x + (-0.5));
        float _908 = _906 * (_870.y + (-0.5));
        float _909 = _906 * (_870.z + (-0.5));
        float _916 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_877.x + (-0.5));
        float _918 = _916 * (_877.y + (-0.5));
        float _919 = _916 * (_877.z + (-0.5));
        float _926 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_884.x + (-0.5));
        float _928 = _926 * (_884.y + (-0.5));
        float _929 = _926 * (_884.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_261, _262, _263), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3176 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_960 + 1.0))) + _965) * _930;
        float _975 = _898 * 0.5;
        float _976 = _908 * 0.5;
        float _977 = _918 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_261, _262, _263), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3187 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3198 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3209 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0))) * (_1002 + 1.0))) + _1007) * _931;
        float _1017 = _899 * 0.5;
        float _1018 = _909 * 0.5;
        float _1019 = _919 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_261, _262, _263), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3220 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3231 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3242 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))) * (_1044 + 1.0))) + _1049) * _932;
        _1066 = _899;
        _1067 = _898;
        _1068 = _897;
        _1069 = _909;
        _1070 = _908;
        _1071 = _907;
        _1072 = _919;
        _1073 = _918;
        _1074 = _917;
        _1075 = _932;
        _1076 = _931;
        _1077 = _930;
        _1078 = cbModelParam._m0[36u].w * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1079 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1080 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _757;
        _1067 = _757;
        _1068 = _757;
        _1069 = _757;
        _1070 = _757;
        _1071 = _757;
        _1072 = _757;
        _1073 = _757;
        _1074 = _757;
        _1075 = _757;
        _1076 = _757;
        _1077 = _757;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1090 = (cbModelParam._m0[1u].x * (_1078 - _769)) + _769;
    float _1091 = (cbModelParam._m0[1u].x * (_1079 - _770)) + _770;
    float _1092 = (cbModelParam._m0[1u].x * (_1080 - _771)) + _771;
    float _1113 = fma(_1092, cbSceneParam._m0[89u].z, fma(_1091, cbSceneParam._m0[89u].y, _1090 * cbSceneParam._m0[89u].x));
    float _1116 = fma(_1092, cbSceneParam._m0[90u].z, fma(_1091, cbSceneParam._m0[90u].y, _1090 * cbSceneParam._m0[90u].x));
    float _1119 = fma(_1092, cbSceneParam._m0[91u].z, fma(_1091, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1090));
    float _1134 = _422 * 0.5;
    float _1135 = _423 * 0.5;
    float _1136 = _424 * 0.5;
    float _1137 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1140 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1143 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_1066, _1069, _1072, _1075));
    float _1177;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1150 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_756, _760, _763, _766));
        float _1154 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_758, _761, _764, _767));
        float _1158 = dot(vec4(_1134, _1135, _1136, 1.0), vec4(_759, _762, _765, _768));
        float _1165 = dot(vec4(cbModelParam._m0[39u]), vec4(_1134, _1135, _1136, 1.0));
        _1177 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1165) ? 0.0 : (isnan(0.0) ? _1165 : max(0.0, _1165))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1177 = 1.0;
    }
    float _1188;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1179 = dot(vec4(cbModelParam._m0[40u]), vec4(_1134, _1135, _1136, 1.0));
        _1188 = dot(vec3(isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1179) ? 0.0 : (isnan(0.0) ? _1179 : max(0.0, _1179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1188 = 1.0;
    }
    float _1192 = (_1188 * cbModelParam._m0[1u].x) + (_1177 * (1.0 - cbModelParam._m0[1u].x));
    float _1201 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1282;
    float _1284;
    float _1286;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1249 = fma(_454, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _446)) + cbModelParam._m0[13u].w;
        float _1253 = fma(_454, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _446)) + cbModelParam._m0[14u].w;
        float _1257 = fma(_454, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _446)) + cbModelParam._m0[15u].w;
        float _1260 = fma(_424, cbModelParam._m0[13u].z, fma(_423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _422));
        float _1263 = fma(_424, cbModelParam._m0[14u].z, fma(_423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _422));
        float _1266 = fma(_424, cbModelParam._m0[15u].z, fma(_423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _422));
        float _1292;
        if (_1260 > 0.0)
        {
            _1292 = abs((1.0 - _1249) / _1260);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1260 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1249 + 1.0) / _1260);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1292 = frontier_phi_14_12_ladder;
        }
        float _1518;
        if (_1263 > 0.0)
        {
            _1518 = abs((1.0 - _1253) / _1263);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1253 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1518 = frontier_phi_23_19_ladder;
        }
        float _1710;
        if (_1266 > 0.0)
        {
            _1710 = abs((1.0 - _1257) / _1266);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1257 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1710 = frontier_phi_35_30_ladder;
        }
        float _1712 = isnan(_1518) ? _1292 : (isnan(_1292) ? _1518 : min(_1292, _1518));
        float _1713 = isnan(_1710) ? _1712 : (isnan(_1712) ? _1710 : min(_1712, _1710));
        float _1717 = (_1713 * _1260) + _1249;
        float _1718 = (_1713 * _1263) + _1253;
        float _1719 = (_1713 * _1266) + _1257;
        float _1720 = _1713 * 9.9999997473787516355514526367188e-05;
        float _1722 = (-1.0) - _1720;
        float _1724 = _1720 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1719 > _1724) || ((_1719 < _1722) || ((_1718 > _1724) || ((_1718 < _1722) || ((_1717 < _1722) || (_1717 > _1724))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1719, cbModelParam._m0[9u].z, fma(_1718, cbModelParam._m0[9u].y, _1717 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1719, cbModelParam._m0[10u].z, fma(_1718, cbModelParam._m0[10u].y, _1717 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1719, cbModelParam._m0[11u].z, fma(_1718, cbModelParam._m0[11u].y, _1717 * cbModelParam._m0[11u].x))), _1201);
            frontier_phi_13_35_ladder = _1816.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1816.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1816.x * cbModelParam._m0[1u].y;
        }
        _1282 = frontier_phi_13_35_ladder_2;
        _1284 = frontier_phi_13_35_ladder_1;
        _1286 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_422, _423, _424), _1201);
        _1282 = _1270.x * cbModelParam._m0[1u].y;
        _1284 = _1270.y * cbModelParam._m0[1u].y;
        _1286 = _1270.z * cbModelParam._m0[1u].y;
    }
    float _1289 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1345 = fma(_454, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _446)) + cbModelParam._m0[21u].w;
        float _1349 = fma(_454, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _446)) + cbModelParam._m0[22u].w;
        float _1353 = fma(_454, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _446)) + cbModelParam._m0[23u].w;
        float _1356 = fma(_424, cbModelParam._m0[21u].z, fma(_423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _422));
        float _1359 = fma(_424, cbModelParam._m0[22u].z, fma(_423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _422));
        float _1362 = fma(_424, cbModelParam._m0[23u].z, fma(_423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _422));
        float _1523;
        if (_1356 > 0.0)
        {
            _1523 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1523 = frontier_phi_25_21_ladder;
        }
        float _1737;
        if (_1359 > 0.0)
        {
            _1737 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1737 = frontier_phi_37_32_ladder;
        }
        float _1888;
        if (_1362 > 0.0)
        {
            _1888 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1888 = frontier_phi_46_43_ladder;
        }
        float _1890 = isnan(_1737) ? _1523 : (isnan(_1523) ? _1737 : min(_1523, _1737));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1356) + _1345;
        float _1896 = (_1891 * _1359) + _1349;
        float _1897 = (_1891 * _1362) + _1353;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1899 = (-1.0) - _1898;
        float _1901 = _1898 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1897 > _1901) || ((_1897 < _1899) || ((_1896 > _1901) || ((_1896 < _1899) || ((_1895 < _1899) || (_1895 > _1901))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1897, cbModelParam._m0[17u].z, fma(_1896, cbModelParam._m0[17u].y, _1895 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1897, cbModelParam._m0[18u].z, fma(_1896, cbModelParam._m0[18u].y, _1895 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1897, cbModelParam._m0[19u].z, fma(_1896, cbModelParam._m0[19u].y, _1895 * cbModelParam._m0[19u].x))), _1289);
            frontier_phi_22_46_ladder = _2134.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2134.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2134.x * cbModelParam._m0[1u].z;
        }
        _1381 = frontier_phi_22_46_ladder_2;
        _1383 = frontier_phi_22_46_ladder_1;
        _1385 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1365 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_422, _423, _424), _1289);
        _1381 = _1365.x * cbModelParam._m0[1u].z;
        _1383 = _1365.y * cbModelParam._m0[1u].z;
        _1385 = _1365.z * cbModelParam._m0[1u].z;
    }
    float _1397 = _414 * 0.01200000010430812835693359375;
    float _1399 = _1397 * ((cbModelParam._m0[1u].w * (_1381 - _1282)) + _1282);
    float _1400 = _1397 * ((cbModelParam._m0[1u].w * (_1383 - _1284)) + _1284);
    float _1401 = _1397 * ((cbModelParam._m0[1u].w * (_1385 - _1286)) + _1286);
    float _1404 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1407 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1410 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, _1399 * cbSceneParam._m0[91u].x));
    vec4 _1418 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_348, _349));
    float _1420 = _1418.w;
    float _1432 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1420);
    float _1433 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1420);
    float _1434 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1420);
    uvec4 _1438 = floatBitsToUint(cbInstanceData._m0[_389 + 5u]);
    uint _1440 = _1438.x * 14u;
    uint _1441 = _1440 + 13u;
    float _1448 = _414 + (-1.0);
    float _1453 = (cbLight._m0[_1441].x * _1448) + 1.0;
    float _1454 = (cbLight._m0[_1441].y * _1448) + 1.0;
    float _1455 = (cbLight._m0[_1441].z * _1448) + 1.0;
    float _1456 = (cbLight._m0[_1441].w * _1448) + 1.0;
    uint _1457 = _1440 + 5u;
    float _1463 = isnan(1.0) ? _1454 : (isnan(_1454) ? 1.0 : min(_1454, 1.0));
    uint _1467 = _1440 + 4u;
    float _1477 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
    uint _1481 = _1440 | 1u;
    float _1492 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_261, _262, _263));
    float _1495 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_261, _262, _263));
    float _3378 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _3389 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _1500 = (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.3183098733425140380859375;
    float _1502 = (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * 0.3183098733425140380859375;
    float _1509 = ((cbLight._m0[_1457].x * _1463) * _1502) + (((cbLight._m0[_1467].x * _1432) * _1477) * _1500);
    float _1510 = ((_1463 * cbLight._m0[_1457].y) * _1502) + (((cbLight._m0[_1467].y * _1433) * _1477) * _1500);
    float _1511 = ((_1463 * cbLight._m0[_1457].z) * _1502) + (((cbLight._m0[_1467].z * _1434) * _1477) * _1500);
    uvec4 _1515 = floatBitsToUint(cbLight._m0[_1440 + 12u]);
    bool _1517 = _1515.x == 0u;
    float _1528;
    float _1530;
    float _1532;
    if (_1517)
    {
        _1528 = _1509;
        _1530 = _1510;
        _1532 = _1511;
    }
    else
    {
        uint _1536 = _1440 + 6u;
        float _1552 = (dot(vec3(cbLight._m0[_1440 + 2u].xyz), vec3(_261, _262, _263)) * 0.5) + 0.5;
        float _1553 = _1552 * _1552;
        float _3400 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1555 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1528 = (((cbLight._m0[_1536].x * 0.3183098733425140380859375) * _1554) * _1555) + _1509;
        _1530 = (((cbLight._m0[_1536].y * 0.3183098733425140380859375) * _1554) * _1555) + _1510;
        _1532 = (((cbLight._m0[_1536].z * 0.3183098733425140380859375) * _1554) * _1555) + _1511;
    }
    bool _1535 = _1515.y == 0u;
    float _1573;
    float _1575;
    float _1577;
    if (_1535)
    {
        _1573 = _1528;
        _1575 = _1530;
        _1577 = _1532;
    }
    else
    {
        uint _1681 = _1440 + 7u;
        float _1697 = (dot(vec3(cbLight._m0[_1440 + 3u].xyz), vec3(_261, _262, _263)) * 0.5) + 0.5;
        float _1698 = _1697 * _1697;
        float _3416 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1700 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1573 = (((cbLight._m0[_1681].x * 0.3183098733425140380859375) * _1699) * _1700) + _1528;
        _1575 = (((cbLight._m0[_1681].y * 0.3183098733425140380859375) * _1699) * _1700) + _1530;
        _1577 = (((cbLight._m0[_1681].z * 0.3183098733425140380859375) * _1699) * _1700) + _1532;
    }
    uint _1579 = _1440 + 8u;
    float _1585 = cbLight._m0[_1440].x + _340;
    float _1586 = cbLight._m0[_1440].y + _341;
    float _1587 = cbLight._m0[_1440].z + _342;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1440].xyz));
    float _3432 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _1599 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1440].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3454 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1617 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1599)) * _1598;
    float _3465 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1619 = (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.31831014156341552734375;
    uint _1633 = _1440 + 9u;
    float _1639 = cbLight._m0[_1481].x + _340;
    float _1640 = cbLight._m0[_1481].y + _341;
    float _1641 = cbLight._m0[_1481].z + _342;
    float _1645 = inversesqrt(dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641)));
    float _1649 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1481].xyz));
    float _3476 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _1653 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1639 * _1645, _1640 * _1645, _1641 * _1645));
    float _3487 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1662 = (exp2(log2(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1666 = (0.5 / ((_1652 + 9.9999999392252902907785028219223e-09) + _1599)) * _1652;
    float _3498 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1668 = (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * 0.31831014156341552734375;
    float _1678 = (((_1662 * cbLight._m0[_1633].x) * _1668) * _1463) + ((((cbLight._m0[_1579].x * _1432) * _1611) * _1619) * _1477);
    float _1679 = (((_1662 * cbLight._m0[_1633].y) * _1668) * _1463) + ((((cbLight._m0[_1579].y * _1433) * _1611) * _1619) * _1477);
    float _1680 = (((_1662 * cbLight._m0[_1633].z) * _1668) * _1463) + ((((cbLight._m0[_1579].z * _1434) * _1611) * _1619) * _1477);
    float _1742;
    float _1744;
    float _1746;
    if (_1517)
    {
        _1742 = _1678;
        _1744 = _1679;
        _1746 = _1680;
    }
    else
    {
        uint _1748 = _1440 + 10u;
        uint _1754 = _1440 + 2u;
        float _1760 = cbLight._m0[_1754].x + _340;
        float _1761 = cbLight._m0[_1754].y + _341;
        float _1762 = cbLight._m0[_1754].z + _342;
        float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
        float _1770 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1754].xyz));
        float _3509 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1773 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1774 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1760 * _1766, _1761 * _1766, _1762 * _1766));
        float _3520 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1787 = (0.5 / ((_1773 + 9.9999999392252902907785028219223e-09) + _1599)) * _1773;
        float _3531 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1789 = (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * 0.31831014156341552734375;
        float _1790 = isnan(1.0) ? _1455 : (isnan(_1455) ? 1.0 : min(_1455, 1.0));
        _1742 = (((_1783 * cbLight._m0[_1748].x) * _1789) * _1790) + _1678;
        _1744 = (((_1783 * cbLight._m0[_1748].y) * _1789) * _1790) + _1679;
        _1746 = (((_1783 * cbLight._m0[_1748].z) * _1789) * _1790) + _1680;
    }
    float _1825;
    float _1827;
    float _1829;
    if (_1535)
    {
        _1825 = _1742;
        _1827 = _1744;
        _1829 = _1746;
    }
    else
    {
        uint _1836 = _1440 + 11u;
        uint _1842 = _1440 + 3u;
        float _1848 = cbLight._m0[_1842].x + _340;
        float _1849 = cbLight._m0[_1842].y + _341;
        float _1850 = cbLight._m0[_1842].z + _342;
        float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
        float _1858 = dot(vec3(_261, _262, _263), vec3(cbLight._m0[_1842].xyz));
        float _3547 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1861 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1862 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1848 * _1854, _1849 * _1854, _1850 * _1854));
        float _3558 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1875 = (0.5 / ((_1861 + 9.9999999392252902907785028219223e-09) + _1599)) * _1861;
        float _3569 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1877 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.31831014156341552734375;
        float _1878 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
        _1825 = (((_1871 * cbLight._m0[_1836].x) * _1877) * _1878) + _1742;
        _1827 = (((_1871 * cbLight._m0[_1836].y) * _1877) * _1878) + _1744;
        _1829 = (((_1871 * cbLight._m0[_1836].z) * _1877) * _1878) + _1746;
    }
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    if (_1438.y == 0u)
    {
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1953;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1953;
        float _1956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1953;
        uvec4 _1968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1969 = _1968.x;
        uint _1980 = uint((float(_1968.y) * floor(float(uint(cbSceneParam._m0[85u].y * _349) / _1969))) + floor(float(uint(cbSceneParam._m0[85u].x * _348) / _1969)));
        float _1990 = (log2(_1956 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1991 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        uint _1994 = uint(isnan(14.0) ? _1991 : (isnan(_1991) ? 14.0 : min(_1991, 14.0)));
        uvec4 _1999 = texelFetch(g_lightClusterGridBuffer, int(((_1994 << 2u) + (_1980 << 6u)) >> 2u));
        uint _2000 = _1999.x;
        uint _2001 = _1968.z;
        float _2139;
        float _2141;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        if (((((1u << ((_2001 >> 4u) & 15u)) + 4294967295u) & _2000) == 0u) || ((_2001 & 240u) == 0u))
        {
            _2139 = 0.0;
            _2141 = 0.0;
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
        }
        else
        {
            float _2140;
            float _2142;
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            uint _2296 = 0u;
            uint _2305;
            bool _2306;
            for (;;)
            {
                _2305 = texelFetch(g_lightClassification, int((((_1994 << 5u) + (_1980 << 9u)) + (_2296 << 2u)) >> 2u)).x;
                _2306 = _2305 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2306)
                {
                    frontier_phi_61_pred = _2290;
                    frontier_phi_61_pred_1 = _2295;
                    frontier_phi_61_pred_2 = _2294;
                    frontier_phi_61_pred_3 = _2293;
                    frontier_phi_61_pred_4 = _2292;
                    frontier_phi_61_pred_5 = _2291;
                }
                else
                {
                    float _2414;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    uint _2420;
                    _2414 = _2290;
                    _2415 = _2291;
                    _2416 = _2292;
                    _2417 = _2293;
                    _2418 = _2294;
                    _2419 = _2295;
                    _2420 = _2305;
                    float _2346;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    float _2351;
                    for (;;)
                    {
                        uint _2424 = uint(findLSB(_2420)) + (_2296 << 5u);
                        uint _2421 = (_2420 + 4294967295u) & _2420;
                        uint _2426 = _2424 * 48u;
                        vec4 _2440 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2426)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2426 + 3u)).x));
                        uint _2446 = (_2424 * 48u) + 4u;
                        vec4 _2459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2446)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2446 + 3u)).x));
                        uint _2465 = (_2424 * 48u) + 8u;
                        vec3 _2476 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x));
                        float _2480 = _2440.x - _1954;
                        float _2481 = _2440.y - _1955;
                        float _2482 = _2440.z - _1956;
                        float _2483 = dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482));
                        float _2486 = inversesqrt(_2483);
                        float _2495 = 1.0 - (_2483 * _2440.w);
                        float _3595 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
                        float _2496 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                        float _2497 = sqrt(_2483) * _2459.w;
                        float _2500 = 1.39999997615814208984375 / (_2497 + 1.39999997615814208984375);
                        float _2501 = _2500 * _2500;
                        float _2504 = ((1.0 - _2501) * dot(vec3(_370, _373, _376), vec3(_2486 * _2480, _2486 * _2481, _2486 * _2482))) + _2501;
                        float _2507 = _2497 * _2497;
                        float _2511 = ((isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))) * _2496) / ((_2507 * 0.699999988079071044921875) + 1.0);
                        float _2515 = (-0.0) - _1954;
                        float _2516 = (-0.0) - _1955;
                        float _2517 = (-0.0) - _1956;
                        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
                        float _2525 = dot(vec3(_370, _373, _376), vec3(_2521 * _2515, _2521 * _2516, _2521 * _2517));
                        float _3611 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                        float _3622 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2529 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
                        float _2533 = (0.5 / (((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) + 9.9999999392252902907785028219223e-09) + _2529)) * _2529;
                        float _3633 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2542 = (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 3.1415927410125732421875) / ((_2507 * 2.1991131305694580078125) + 3.141590118408203125)) * _2496;
                        _2349 = (_2511 * _2459.x) + _2417;
                        _2350 = (_2511 * _2459.y) + _2418;
                        _2351 = (_2511 * _2459.z) + _2419;
                        _2346 = (_2542 * _2476.x) + _2414;
                        _2347 = (_2542 * _2476.y) + _2415;
                        _2348 = (_2542 * _2476.z) + _2416;
                        if (_2421 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2414 = _2346;
                            _2415 = _2347;
                            _2416 = _2348;
                            _2417 = _2349;
                            _2418 = _2350;
                            _2419 = _2351;
                            _2420 = _2421;
                        }
                    }
                    frontier_phi_61_pred = _2346;
                    frontier_phi_61_pred_1 = _2351;
                    frontier_phi_61_pred_2 = _2350;
                    frontier_phi_61_pred_3 = _2349;
                    frontier_phi_61_pred_4 = _2348;
                    frontier_phi_61_pred_5 = _2347;
                }
                _2140 = frontier_phi_61_pred;
                _2150 = frontier_phi_61_pred_1;
                _2148 = frontier_phi_61_pred_2;
                _2146 = frontier_phi_61_pred_3;
                _2144 = frontier_phi_61_pred_4;
                _2142 = frontier_phi_61_pred_5;
                uint _2297 = _2296 + 1u;
                if (_2297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2290 = _2140;
                    _2291 = _2142;
                    _2292 = _2144;
                    _2293 = _2146;
                    _2294 = _2148;
                    _2295 = _2150;
                    _2296 = _2297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2139 = _2140;
            _2141 = _2142;
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
        }
        uvec4 _2153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2154 = _2153.z;
        uint _2156 = (_2154 >> 8u) & 15u;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((4294967295u << _2156) & _2000) == 0u)
        {
            _2261 = _2139;
            _2263 = _2141;
            _2265 = _2143;
            _2267 = _2145;
            _2269 = _2147;
            _2271 = _2149;
        }
        else
        {
            float _2286 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2156 < ((_2154 >> 12u) & 15u))
            {
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2397 = _2139;
                float _2398 = _2141;
                float _2399 = _2143;
                float _2400 = _2145;
                float _2401 = _2147;
                float _2402 = _2149;
                uint _2403 = _2156;
                uint _2412;
                bool _2413;
                for (;;)
                {
                    _2412 = texelFetch(g_lightClassification, int((((_1994 << 5u) + (_1980 << 9u)) + (_2403 << 2u)) >> 2u)).x;
                    _2413 = _2412 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2413)
                    {
                        frontier_phi_67_pred = _2400;
                        frontier_phi_67_pred_1 = _2401;
                        frontier_phi_67_pred_2 = _2402;
                        frontier_phi_67_pred_3 = _2399;
                        frontier_phi_67_pred_4 = _2398;
                        frontier_phi_67_pred_5 = _2397;
                    }
                    else
                    {
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2550;
                        float _2551;
                        float _2552;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2560 = _2397;
                        float _2561 = _2398;
                        float _2562 = _2399;
                        float _2563 = _2400;
                        float _2564 = _2401;
                        float _2565 = _2402;
                        uint _2566 = _2412;
                        uint _2567;
                        vec4 _2592;
                        float _2593;
                        vec4 _2608;
                        vec3 _2620;
                        vec4 _2636;
                        vec4 _2652;
                        float _2699;
                        bool _2700;
                        for (;;)
                        {
                            uint _2577 = ((_2403 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2566));
                            _2567 = (_2566 + 4294967295u) & _2566;
                            uint _2579 = _2577 * 40u;
                            _2592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2579 + 3u)).x));
                            _2593 = _2592.w;
                            uint _2595 = (_2577 * 40u) + 4u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2610 = (_2577 * 40u) + 8u;
                            _2620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 2u)).x));
                            uint _2623 = (_2577 * 40u) + 16u;
                            _2636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 3u)).x));
                            uint _2639 = (_2577 * 40u) + 20u;
                            _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2655 = (_2577 * 40u) + 24u;
                            vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 3u)).x));
                            uint _2674 = (_2577 * 40u) + 28u;
                            vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            _2699 = fma(_1956, _2687.z, fma(_1955, _2687.y, _2687.x * _1954)) + _2687.w;
                            _2700 = !((fma(_1956, _2668.z, fma(_1955, _2668.y, _2668.x * _1954)) + _2668.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2700)
                            {
                                float _2727 = _2592.x - _1954;
                                float _2728 = _2592.y - _1955;
                                float _2729 = _2592.z - _1956;
                                float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                                float _2733 = inversesqrt(_2730);
                                float _2734 = _2733 * _2727;
                                float _2735 = _2733 * _2728;
                                float _2736 = _2733 * _2729;
                                float _2740 = 1.0 - (_2730 / (_2593 * _2593));
                                float _3644 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
                                float _2741 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
                                float _2745 = sqrt(_2730) * _2608.w;
                                float _2747 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                                float _2748 = _2747 * _2747;
                                float _2749 = 1.0 - _2748;
                                float _2751 = (_2749 * dot(vec3(_2734, _2735, _2736), vec3(_370, _373, _376))) + _2748;
                                float _2754 = _2745 * _2745;
                                float _2758 = (fma(_1956, _2636.z, fma(_1955, _2636.y, _2636.x * _1954)) + _2636.w) / _2699;
                                float _2759 = (fma(_1956, _2652.z, fma(_1955, _2652.y, _2652.x * _1954)) + _2652.w) / _2699;
                                float _2763 = 1.0 - dot(vec2(_2758, _2759), vec2(_2758, _2759));
                                float _3660 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                                float _2764 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
                                float _2765 = _2764 * (((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2741) / ((_2754 * 0.699999988079071044921875) + 1.0));
                                float _2775 = dot(vec3(_370, _373, _376), vec3((-0.0) - (_1954 * _2286), (-0.0) - (_1955 * _2286), (-0.0) - (_1956 * _2286)));
                                float _3671 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2783 = (_2749 * dot(vec3(_370, _373, _376), vec3(_2734, _2735, _2736))) + _2748;
                                float _3682 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
                                float _2788 = (0.5 / (((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) + 9.9999999392252902907785028219223e-09) + _2784)) * _2784;
                                float _3693 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2795 = (_2764 * _2741) * (((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 3.1415927410125732421875) / ((_2754 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2795 * _2620.x;
                                frontier_phi_73_pred_1 = _2795 * _2620.y;
                                frontier_phi_73_pred_2 = _2765 * _2608.z;
                                frontier_phi_73_pred_3 = _2765 * _2608.y;
                                frontier_phi_73_pred_4 = _2765 * _2608.x;
                                frontier_phi_73_pred_5 = _2795 * _2620.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2799 = frontier_phi_73_pred;
                            _2800 = frontier_phi_73_pred_1;
                            _2804 = frontier_phi_73_pred_2;
                            _2803 = frontier_phi_73_pred_3;
                            _2802 = frontier_phi_73_pred_4;
                            _2801 = frontier_phi_73_pred_5;
                            _2550 = _2802 + _2563;
                            _2551 = _2803 + _2564;
                            _2552 = _2804 + _2565;
                            _2547 = _2799 + _2560;
                            _2548 = _2800 + _2561;
                            _2549 = _2801 + _2562;
                            if (_2567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2560 = _2547;
                                _2561 = _2548;
                                _2562 = _2549;
                                _2563 = _2550;
                                _2564 = _2551;
                                _2565 = _2552;
                                _2566 = _2567;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2550;
                        frontier_phi_67_pred_1 = _2551;
                        frontier_phi_67_pred_2 = _2552;
                        frontier_phi_67_pred_3 = _2549;
                        frontier_phi_67_pred_4 = _2548;
                        frontier_phi_67_pred_5 = _2547;
                    }
                    _2268 = frontier_phi_67_pred;
                    _2270 = frontier_phi_67_pred_1;
                    _2272 = frontier_phi_67_pred_2;
                    _2266 = frontier_phi_67_pred_3;
                    _2264 = frontier_phi_67_pred_4;
                    _2262 = frontier_phi_67_pred_5;
                    uint _2404 = _2403 + 1u;
                    if (_2404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2397 = _2262;
                        _2398 = _2264;
                        _2399 = _2266;
                        _2400 = _2268;
                        _2401 = _2270;
                        _2402 = _2272;
                        _2403 = _2404;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2270;
                frontier_phi_55_56_ladder_1 = _2272;
                frontier_phi_55_56_ladder_2 = _2268;
                frontier_phi_55_56_ladder_3 = _2266;
                frontier_phi_55_56_ladder_4 = _2264;
                frontier_phi_55_56_ladder_5 = _2262;
            }
            else
            {
                frontier_phi_55_56_ladder = _2147;
                frontier_phi_55_56_ladder_1 = _2149;
                frontier_phi_55_56_ladder_2 = _2145;
                frontier_phi_55_56_ladder_3 = _2143;
                frontier_phi_55_56_ladder_4 = _2141;
                frontier_phi_55_56_ladder_5 = _2139;
            }
            _2261 = frontier_phi_55_56_ladder_5;
            _2263 = frontier_phi_55_56_ladder_4;
            _2265 = frontier_phi_55_56_ladder_3;
            _2267 = frontier_phi_55_56_ladder_2;
            _2269 = frontier_phi_55_56_ladder;
            _2271 = frontier_phi_55_56_ladder_1;
        }
        float _2276 = isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0));
        _2013 = (_2276 * _2267) + _1573;
        _2015 = (_2276 * _2269) + _1575;
        _2017 = (_2276 * _2271) + _1577;
        _2019 = ((_2261 * 0.039999999105930328369140625) * _2276) + _1825;
        _2021 = ((_2263 * 0.039999999105930328369140625) * _2276) + _1827;
        _2023 = ((_2265 * 0.039999999105930328369140625) * _2276) + _1829;
    }
    else
    {
        _2013 = _1573;
        _2015 = _1575;
        _2017 = _1577;
        _2019 = _1825;
        _2021 = _1827;
        _2023 = _1829;
    }
    uint _2029 = _390 + uint(cbMatDynParam._m0[0u].w);
    float _2038 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _233.x) * _256) * cbInstanceData._m0[_2029].x;
    float _2042 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _233.y) * _256) * cbInstanceData._m0[_2029].y;
    float _2046 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _233.z) * _256) * cbInstanceData._m0[_2029].z;
    float _3709 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3720 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3731 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _2063 = (((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_2013 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _414))) + ((_2019 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1192)) * cbPerFrame._m0[3u].x)) + _2038;
    float _2065 = (_2042 + ((_2021 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1192)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_2015 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _414)));
    float _2067 = (_2046 + ((_2023 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _1192)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_2017 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _414)));
    float _3757 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2080 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    uint _2081 = _389 + 6u;
    float _2089 = _348 / cbSceneParam._m0[86u].x;
    float _2090 = _349 / cbSceneParam._m0[86u].y;
    vec4 _2104 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, (log2((isnan(cbSceneParam._m0[77u].w) ? _282 : (isnan(_282) ? cbSceneParam._m0[77u].w : min(_282, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2106 = _2104.x;
    float _2107 = _2104.y;
    float _2108 = _2104.z;
    float _2109 = _2104.w;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    if (_282 > cbSceneParam._m0[78u].w)
    {
        float _2164 = isnan(_282) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _282 : min(cbSceneParam._m0[80u].w, _282));
        float _2165 = _2164 / _282;
        float _2176 = _2165 * _333;
        float _2177 = _334 * _2165;
        float _2178 = (-0.0) - _2177;
        float _2180 = _2165 * _335;
        float _2182 = (cbSceneParam._m0[77u].w * _2178) / _2164;
        float _2183 = _2182 + cbSceneParam._m0[79u].w;
        float _2184 = cbSceneParam._m0[79u].w - _2177;
        float _2190 = sqrt(((_2176 * _2176) + (_2177 * _2177)) + (_2180 * _2180));
        float _2193 = (1.0 - (cbSceneParam._m0[77u].w / _2164)) * _2190;
        float _2198 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2200 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2359;
        if (abs((_2178 - _2182) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2359 = ((((_2183 > 0.0) ? exp2(_2198 * _2183) : (2.0 - exp2(_2200 * _2183))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2193;
        }
        else
        {
            float _2319 = 1.0 / cbSceneParam._m0[80u].x;
            float _2320 = isnan(_2184) ? _2183 : (isnan(_2183) ? _2184 : max(_2183, _2184));
            float _2321 = isnan(_2184) ? _2183 : (isnan(_2183) ? _2184 : min(_2183, _2184));
            float _2330 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : min(_2320, 0.0));
            float _2331 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : min(_2321, 0.0));
            _2359 = ((abs(_2190 / _2178) * cbSceneParam._m0[80u].y) * ((((_2330 - _2331) * 2.0) - ((exp2(_2198 * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)))) - exp2(_2198 * (isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0))))) * _2319)) - ((exp2(_2200 * _2330) - exp2(_2200 * _2331)) * _2319))) + (_2193 * cbSceneParam._m0[80u].z);
        }
        vec4 _2361 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2089, _2090, 1.0), 0.0);
        float _2370 = exp2((_2359 * (-1.44269502162933349609375)) * (1.0 - _2361.w));
        float _2371 = log2(_2370);
        float _2387 = log2(_2109);
        _2202 = (exp2(_2387 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].x)) * _2361.x) / cbSceneParam._m0[78u].x)) + _2106;
        _2204 = (exp2(_2387 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].y)) * _2361.y) / cbSceneParam._m0[78u].y)) + _2107;
        _2206 = (exp2(_2387 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2371 * cbSceneParam._m0[78u].z)) * _2361.z) / cbSceneParam._m0[78u].z)) + _2108;
        _2208 = _2370 * _2109;
    }
    else
    {
        _2202 = _2106;
        _2204 = _2107;
        _2206 = _2108;
        _2208 = _2109;
    }
    float _2220 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2221 = _2220 == 3.0;
    float _2222 = log2(_2208);
    float _2226 = exp2(_2222 * cbSceneParam._m0[78u].x);
    float _2227 = exp2(_2222 * cbSceneParam._m0[78u].y);
    float _2228 = exp2(_2222 * cbSceneParam._m0[78u].z);
    float _2229 = _2226 * (isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0)));
    float _2230 = _2227 * (isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0)));
    float _2231 = _2228 * (isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0)));
    float _2240 = (_2220 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2240 * (_2221 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2202)));
    SV_Target.y = _2240 * (_2221 ? _2230 : (_2230 + (cbSceneParam._m0[72u].w * _2204)));
    SV_Target.z = _2240 * (_2221 ? _2231 : (_2231 + (cbSceneParam._m0[72u].w * _2206)));
    SV_Target.w = cbInstanceData._m0[_2081].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2038) * _2080) * _2226) * _2240;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2042) * _2080) * _2227) * _2240;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2046) * _2080) * _2228) * _2240;
    SV_Target_1.w = cbInstanceData._m0[_2081].w;
}


