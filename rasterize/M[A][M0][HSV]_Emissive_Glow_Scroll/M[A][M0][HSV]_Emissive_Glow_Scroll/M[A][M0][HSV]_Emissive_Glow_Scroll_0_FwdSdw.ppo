#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _724;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _216 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _225 = _224 * _164;
    float _226 = _224 * _165;
    float _227 = _224 * _166;
    float _3161 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _3172 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3183 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _247 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    float _313 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _314 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _335 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _338 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _341 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _354 = uint(roundEven(NORMAL.w)) * 13u;
    uint _356 = _354 + 9u;
    uint _357 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _363 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * cbInstanceData._m0[_357].x;
    float _364 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_357].y;
    float _365 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_357].z;
    float _3194 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _366 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _367 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _368 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    vec4 _377 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _313, cbSceneParam._m0[86u].y * _314));
    float _380 = _377.x * TEXCOORD.z;
    float _381 = dot(vec3(_225, _226, _227), vec3(_305, _306, _307));
    float _384 = _381 * 2.0;
    float _389 = (_384 * _225) - _305;
    float _390 = (_384 * _226) - _306;
    float _391 = (_384 * _227) - _307;
    float _413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _723;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _448 = fma(_421, cbModelParam._m0[26u].z, fma(_417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _413));
        float _452 = fma(_421, cbModelParam._m0[27u].z, fma(_417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _413));
        float _456 = fma(_421, cbModelParam._m0[28u].z, fma(_417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _413));
        float _481 = _413 + _225;
        float _482 = _417 + _226;
        float _483 = _421 + _227;
        float _493 = fma(_483, cbModelParam._m0[26u].z, fma(_482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481)) - _448;
        float _494 = fma(_483, cbModelParam._m0[27u].z, fma(_482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481)) - _452;
        float _495 = fma(_483, cbModelParam._m0[28u].z, fma(_482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481)) - _456;
        float _499 = inversesqrt(dot(vec3(_493, _494, _495), vec3(_493, _494, _495)));
        float _512 = ((_499 * _493) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_448 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _513 = ((_499 * _494) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_452 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _514 = ((_499 * _495) / cbModelParam._m0[34u].z) + ((((((_456 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_512, _513, _514), 0.0);
        float _551 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _552 = _551 * (_517.x + (-0.5));
        float _553 = _551 * (_517.y + (-0.5));
        float _554 = _551 * (_517.z + (-0.5));
        float _561 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_524.x + (-0.5));
        float _563 = _561 * (_524.y + (-0.5));
        float _564 = _561 * (_524.z + (-0.5));
        float _571 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_531.x + (-0.5));
        float _573 = _571 * (_531.y + (-0.5));
        float _574 = _571 * (_531.z + (-0.5));
        float _581 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_538.x + (-0.5));
        float _583 = _581 * (_538.y + (-0.5));
        float _584 = _581 * (_538.z + (-0.5));
        float _585 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        float _586 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = _552 * 0.5;
        float _589 = _562 * 0.5;
        float _590 = _572 * 0.5;
        float _591 = dot(vec3(_588, _589, _590), vec3(_588, _589, _590));
        float _596 = (_591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_591);
        float _605 = (dot(vec3(_225, _226, _227), vec3(_596 * _588, _596 * _589, _596 * _590)) + 1.0) * 0.5;
        float _3242 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _615 = sqrt(((_589 * _589) + (_588 * _588)) + (_590 * _590)) / (_585 + 9.9999997473787516355514526367188e-06);
        float _3253 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _617 = _616 * 2.0;
        float _621 = (1.0 - _616) / (_616 + 1.0);
        float _3264 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _631 = ((((1.0 - _622) * (_617 + 2.0)) * exp2(log2(isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))) * (_617 + 1.0))) + _622) * _585;
        float _632 = _553 * 0.5;
        float _633 = _563 * 0.5;
        float _634 = _573 * 0.5;
        float _635 = dot(vec3(_632, _633, _634), vec3(_632, _633, _634));
        float _640 = (_635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_635);
        float _648 = (dot(vec3(_225, _226, _227), vec3(_640 * _632, _640 * _633, _640 * _634)) + 1.0) * 0.5;
        float _3275 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _657 = sqrt(((_633 * _633) + (_632 * _632)) + (_634 * _634)) / (_586 + 9.9999997473787516355514526367188e-06);
        float _3286 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _659 = _658 * 2.0;
        float _663 = (1.0 - _658) / (_658 + 1.0);
        float _3297 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _673 = ((((1.0 - _664) * (_659 + 2.0)) * exp2(log2(isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) * (_659 + 1.0))) + _664) * _586;
        float _674 = _554 * 0.5;
        float _675 = _564 * 0.5;
        float _676 = _574 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _690 = (dot(vec3(_225, _226, _227), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3308 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _699 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _3319 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3330 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * (_701 + 1.0))) + _706) * _587;
        _723 = _554;
        _725 = _553;
        _726 = _552;
        _727 = _564;
        _728 = _563;
        _729 = _562;
        _730 = _574;
        _731 = _573;
        _732 = _572;
        _733 = _587;
        _734 = _586;
        _735 = _585;
        _736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0)));
        _737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0)));
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
    }
    else
    {
        _723 = _724;
        _725 = _724;
        _726 = _724;
        _727 = _724;
        _728 = _724;
        _729 = _724;
        _730 = _724;
        _731 = _724;
        _732 = _724;
        _733 = _724;
        _734 = _724;
        _735 = _724;
        _736 = 0.0;
        _737 = 0.0;
        _738 = 0.0;
    }
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _764 = fma(_421, cbModelParam._m0[30u].z, fma(_417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _413));
        float _768 = fma(_421, cbModelParam._m0[31u].z, fma(_417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _413));
        float _772 = fma(_421, cbModelParam._m0[32u].z, fma(_417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _413));
        float _795 = _413 + _225;
        float _796 = _417 + _226;
        float _797 = _421 + _227;
        float _807 = fma(_797, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795)) - _764;
        float _808 = fma(_797, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795)) - _768;
        float _809 = fma(_797, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795)) - _772;
        float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
        float _826 = ((_813 * _807) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_764 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_813 * _808) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_768 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_813 * _809) / cbModelParam._m0[35u].z) + ((((((_772 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_826, _827, _828), 0.0);
        float _863 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_830.x + (-0.5));
        float _865 = _863 * (_830.y + (-0.5));
        float _866 = _863 * (_830.z + (-0.5));
        float _873 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_837.x + (-0.5));
        float _875 = _873 * (_837.y + (-0.5));
        float _876 = _873 * (_837.z + (-0.5));
        float _883 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_844.x + (-0.5));
        float _885 = _883 * (_844.y + (-0.5));
        float _886 = _883 * (_844.z + (-0.5));
        float _893 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_851.x + (-0.5));
        float _895 = _893 * (_851.y + (-0.5));
        float _896 = _893 * (_851.z + (-0.5));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = _864 * 0.5;
        float _901 = _874 * 0.5;
        float _902 = _884 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_225, _226, _227), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3393 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_927 + 1.0))) + _932) * _897;
        float _942 = _865 * 0.5;
        float _943 = _875 * 0.5;
        float _944 = _885 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_225, _226, _227), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3426 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_969 + 1.0))) + _974) * _898;
        float _984 = _866 * 0.5;
        float _985 = _876 * 0.5;
        float _986 = _886 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_225, _226, _227), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3459 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_1011 + 1.0))) + _1016) * _899;
        _1033 = _866;
        _1034 = _865;
        _1035 = _864;
        _1036 = _876;
        _1037 = _875;
        _1038 = _874;
        _1039 = _886;
        _1040 = _885;
        _1041 = _884;
        _1042 = _899;
        _1043 = _898;
        _1044 = _897;
        _1045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
    }
    else
    {
        _1033 = _724;
        _1034 = _724;
        _1035 = _724;
        _1036 = _724;
        _1037 = _724;
        _1038 = _724;
        _1039 = _724;
        _1040 = _724;
        _1041 = _724;
        _1042 = _724;
        _1043 = _724;
        _1044 = _724;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1057 = (cbModelParam._m0[1u].x * (_1045 - _736)) + _736;
    float _1058 = (cbModelParam._m0[1u].x * (_1046 - _737)) + _737;
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1080 = fma(_1059, cbSceneParam._m0[89u].z, fma(_1058, cbSceneParam._m0[89u].y, _1057 * cbSceneParam._m0[89u].x));
    float _1083 = fma(_1059, cbSceneParam._m0[90u].z, fma(_1058, cbSceneParam._m0[90u].y, _1057 * cbSceneParam._m0[90u].x));
    float _1086 = fma(_1059, cbSceneParam._m0[91u].z, fma(_1058, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1057));
    float _1101 = _389 * 0.5;
    float _1102 = _390 * 0.5;
    float _1103 = _391 * 0.5;
    float _1104 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1107 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1034, _1037, _1040, _1043));
    float _1110 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_1033, _1036, _1039, _1042));
    float _1144;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1117 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_723, _727, _730, _733));
        float _1121 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_725, _728, _731, _734));
        float _1125 = dot(vec4(_1101, _1102, _1103, 1.0), vec4(_726, _729, _732, _735));
        float _1132 = dot(vec4(cbModelParam._m0[39u]), vec4(_1101, _1102, _1103, 1.0));
        _1144 = dot(vec3(isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1132) ? 0.0 : (isnan(0.0) ? _1132 : max(0.0, _1132))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1144 = 1.0;
    }
    float _1155;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1146 = dot(vec4(cbModelParam._m0[40u]), vec4(_1101, _1102, _1103, 1.0));
        _1155 = dot(vec3(isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)), isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1146) ? 0.0 : (isnan(0.0) ? _1146 : max(0.0, _1146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1155 = 1.0;
    }
    float _1159 = (_1155 * cbModelParam._m0[1u].x) + (_1144 * (1.0 - cbModelParam._m0[1u].x));
    float _1168 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1249;
    float _1251;
    float _1253;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1216 = fma(_421, cbModelParam._m0[13u].z, fma(_417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413)) + cbModelParam._m0[13u].w;
        float _1220 = fma(_421, cbModelParam._m0[14u].z, fma(_417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413)) + cbModelParam._m0[14u].w;
        float _1224 = fma(_421, cbModelParam._m0[15u].z, fma(_417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413)) + cbModelParam._m0[15u].w;
        float _1227 = fma(_391, cbModelParam._m0[13u].z, fma(_390, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _389));
        float _1230 = fma(_391, cbModelParam._m0[14u].z, fma(_390, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _389));
        float _1233 = fma(_391, cbModelParam._m0[15u].z, fma(_390, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _389));
        float _1259;
        if (_1227 > 0.0)
        {
            _1259 = abs((1.0 - _1216) / _1227);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1216 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1259 = frontier_phi_14_12_ladder;
        }
        float _1434;
        if (_1230 > 0.0)
        {
            _1434 = abs((1.0 - _1220) / _1230);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1230 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1220 + 1.0) / _1230);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1434 = frontier_phi_23_19_ladder;
        }
        float _1731;
        if (_1233 > 0.0)
        {
            _1731 = abs((1.0 - _1224) / _1233);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1224 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1731 = frontier_phi_35_30_ladder;
        }
        float _1733 = isnan(_1434) ? _1259 : (isnan(_1259) ? _1434 : min(_1259, _1434));
        float _1734 = isnan(_1731) ? _1733 : (isnan(_1733) ? _1731 : min(_1733, _1731));
        float _1738 = (_1734 * _1227) + _1216;
        float _1739 = (_1734 * _1230) + _1220;
        float _1740 = (_1734 * _1233) + _1224;
        float _1741 = _1734 * 9.9999997473787516355514526367188e-05;
        float _1743 = (-1.0) - _1741;
        float _1745 = _1741 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1740 > _1745) || ((_1740 < _1743) || ((_1739 > _1745) || ((_1739 < _1743) || ((_1738 < _1743) || (_1738 > _1745))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1885 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1740, cbModelParam._m0[9u].z, fma(_1739, cbModelParam._m0[9u].y, _1738 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1740, cbModelParam._m0[10u].z, fma(_1739, cbModelParam._m0[10u].y, _1738 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1740, cbModelParam._m0[11u].z, fma(_1739, cbModelParam._m0[11u].y, _1738 * cbModelParam._m0[11u].x))), _1168);
            frontier_phi_13_35_ladder = _1885.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1885.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1885.x * cbModelParam._m0[1u].y;
        }
        _1249 = frontier_phi_13_35_ladder_2;
        _1251 = frontier_phi_13_35_ladder_1;
        _1253 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_389, _390, _391), _1168);
        _1249 = _1237.x * cbModelParam._m0[1u].y;
        _1251 = _1237.y * cbModelParam._m0[1u].y;
        _1253 = _1237.z * cbModelParam._m0[1u].y;
    }
    float _1256 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1349;
    float _1351;
    float _1353;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1313 = fma(_421, cbModelParam._m0[21u].z, fma(_417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413)) + cbModelParam._m0[21u].w;
        float _1317 = fma(_421, cbModelParam._m0[22u].z, fma(_417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413)) + cbModelParam._m0[22u].w;
        float _1321 = fma(_421, cbModelParam._m0[23u].z, fma(_417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413)) + cbModelParam._m0[23u].w;
        float _1324 = fma(_391, cbModelParam._m0[21u].z, fma(_390, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _389));
        float _1327 = fma(_391, cbModelParam._m0[22u].z, fma(_390, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _389));
        float _1330 = fma(_391, cbModelParam._m0[23u].z, fma(_390, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _389));
        float _1439;
        if (_1324 > 0.0)
        {
            _1439 = abs((1.0 - _1313) / _1324);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1313 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1439 = frontier_phi_25_21_ladder;
        }
        float _1758;
        if (_1327 > 0.0)
        {
            _1758 = abs((1.0 - _1317) / _1327);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1317 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1758 = frontier_phi_37_32_ladder;
        }
        float _2031;
        if (_1330 > 0.0)
        {
            _2031 = abs((1.0 - _1321) / _1330);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1321 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2031 = frontier_phi_47_44_ladder;
        }
        float _2033 = isnan(_1758) ? _1439 : (isnan(_1439) ? _1758 : min(_1439, _1758));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1324) + _1313;
        float _2039 = (_2034 * _1327) + _1317;
        float _2040 = (_2034 * _1330) + _1321;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2041;
        float _2044 = _2041 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2040 > _2044) || ((_2040 < _2042) || ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 < _2042) || (_2038 > _2044))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2040, cbModelParam._m0[17u].z, fma(_2039, cbModelParam._m0[17u].y, _2038 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2040, cbModelParam._m0[18u].z, fma(_2039, cbModelParam._m0[18u].y, _2038 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2040, cbModelParam._m0[19u].z, fma(_2039, cbModelParam._m0[19u].y, _2038 * cbModelParam._m0[19u].x))), _1256);
            frontier_phi_22_47_ladder = _2131.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2131.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2131.x * cbModelParam._m0[1u].z;
        }
        _1349 = frontier_phi_22_47_ladder_2;
        _1351 = frontier_phi_22_47_ladder_1;
        _1353 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_389, _390, _391), _1256);
        _1349 = _1333.x * cbModelParam._m0[1u].z;
        _1351 = _1333.y * cbModelParam._m0[1u].z;
        _1353 = _1333.z * cbModelParam._m0[1u].z;
    }
    float _1365 = _380 * 0.01200000010430812835693359375;
    float _1367 = _1365 * ((cbModelParam._m0[1u].w * (_1349 - _1249)) + _1249);
    float _1368 = _1365 * ((cbModelParam._m0[1u].w * (_1351 - _1251)) + _1251);
    float _1369 = _1365 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1372 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1375 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1378 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, _1367 * cbSceneParam._m0[91u].x));
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1426 = _1413 / _1425;
    float _1427 = _1417 / _1425;
    float _1428 = _1421 / _1425;
    float _1575;
    float _1576;
    float _1577;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1455 = ((uint(_1428 > cbSceneParam._m0[59u].y) + uint(_1428 > cbSceneParam._m0[59u].x)) + uint(_1428 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1456 = _1455 + 43u;
        uint _1464 = _1455 + 44u;
        uint _1472 = _1455 + 45u;
        uint _1480 = _1455 + 46u;
        float _1491 = fma(_1425, cbSceneParam._m0[_1456].w, fma(_1421, cbSceneParam._m0[_1456].z, fma(_1417, cbSceneParam._m0[_1456].y, _1413 * cbSceneParam._m0[_1456].x)));
        float _1495 = fma(_1425, cbSceneParam._m0[_1464].w, fma(_1421, cbSceneParam._m0[_1464].z, fma(_1417, cbSceneParam._m0[_1464].y, _1413 * cbSceneParam._m0[_1464].x)));
        float _1503 = fma(_1425, cbSceneParam._m0[_1480].w, fma(_1421, cbSceneParam._m0[_1480].z, fma(_1417, cbSceneParam._m0[_1480].y, _1413 * cbSceneParam._m0[_1480].x)));
        float _1508 = cbSceneParam._m0[33u].z * _1503;
        float _1510 = cbSceneParam._m0[33u].w * _1503;
        float _1513 = fma(_1425, cbSceneParam._m0[_1472].w, fma(_1421, cbSceneParam._m0[_1472].z, fma(_1417, cbSceneParam._m0[_1472].y, _1413 * cbSceneParam._m0[_1472].x))) / _1503;
        float _1561 = (cbSceneParam._m0[33u].x - sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428))) * cbSceneParam._m0[33u].y;
        float _3585 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1568 = (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1508 + _1491) / _1503, (_1510 + _1495) / _1503), _1513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1510 + _1491) / _1503, (_1495 - _1508) / _1503), _1513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1491 - _1508) / _1503, (_1495 - _1510) / _1503), _1513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1491 - _1510) / _1503, (_1508 + _1495) / _1503), _1513), 0.0)).x), vec4(0.25)));
        _1575 = 1.0 - (_1568 * cbSceneParam._m0[34u].x);
        _1576 = 1.0 - (_1568 * cbSceneParam._m0[34u].y);
        _1577 = 1.0 - (_1568 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1575 = 1.0;
        _1576 = 1.0;
        _1577 = 1.0;
    }
    float _1641;
    float _1643;
    float _1645;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1629 = fma(_1425, cbSceneParam._m0[63u].w, fma(_1421, cbSceneParam._m0[63u].z, fma(_1417, cbSceneParam._m0[63u].y, _1413 * cbSceneParam._m0[63u].x)));
        float _1630 = fma(_1425, cbSceneParam._m0[60u].w, fma(_1421, cbSceneParam._m0[60u].z, fma(_1417, cbSceneParam._m0[60u].y, _1413 * cbSceneParam._m0[60u].x))) / _1629;
        float _1631 = fma(_1425, cbSceneParam._m0[61u].w, fma(_1421, cbSceneParam._m0[61u].z, fma(_1417, cbSceneParam._m0[61u].y, _1413 * cbSceneParam._m0[61u].x))) / _1629;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1630 >= cbSceneParam._m0[64u].x) && (_1631 >= cbSceneParam._m0[64u].y)) && (_1630 <= cbSceneParam._m0[64u].z)) && (_1631 <= cbSceneParam._m0[64u].w))
        {
            float _1771 = fma(_1425, cbSceneParam._m0[62u].w, fma(_1421, cbSceneParam._m0[62u].z, fma(_1417, cbSceneParam._m0[62u].y, _1413 * cbSceneParam._m0[62u].x))) / _1629;
            float _1775 = isnan(cbSceneParam._m0[41u].w) ? _1771 : (isnan(_1771) ? cbSceneParam._m0[41u].w : max(_1771, cbSceneParam._m0[41u].w));
            float _1818 = (cbSceneParam._m0[33u].x - sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428))) * cbSceneParam._m0[33u].y;
            float _3601 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
            float _1825 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1630, cbSceneParam._m0[33u].w + _1631), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1630, _1631 - cbSceneParam._m0[33u].z), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1630 - cbSceneParam._m0[33u].z, _1631 - cbSceneParam._m0[33u].w), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1630 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1631), _1775), 0.0)).x), vec4(0.25)));
            float _1829 = 1.0 - (_1825 * cbSceneParam._m0[34u].x);
            float _1830 = 1.0 - (_1825 * cbSceneParam._m0[34u].y);
            float _1831 = 1.0 - (_1825 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1831) ? _1577 : (isnan(_1577) ? _1831 : min(_1577, _1831));
            frontier_phi_34_33_ladder_1 = isnan(_1830) ? _1576 : (isnan(_1576) ? _1830 : min(_1576, _1830));
            frontier_phi_34_33_ladder_2 = isnan(_1829) ? _1575 : (isnan(_1575) ? _1829 : min(_1575, _1829));
        }
        else
        {
            frontier_phi_34_33_ladder = _1577;
            frontier_phi_34_33_ladder_1 = _1576;
            frontier_phi_34_33_ladder_2 = _1575;
        }
        _1641 = frontier_phi_34_33_ladder_2;
        _1643 = frontier_phi_34_33_ladder_1;
        _1645 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1641 = _1575;
        _1643 = _1576;
        _1645 = _1577;
    }
    uvec4 _1650 = floatBitsToUint(cbInstanceData._m0[_354 + 5u]);
    uint _1652 = _1650.x * 14u;
    uint _1653 = _1652 + 13u;
    float _1660 = _380 + (-1.0);
    float _1666 = (cbLight._m0[_1653].x * _1660) + 1.0;
    float _1667 = (cbLight._m0[_1653].y * _1660) + 1.0;
    float _1668 = (cbLight._m0[_1653].z * _1660) + 1.0;
    float _1669 = (cbLight._m0[_1653].w * _1660) + 1.0;
    uint _1670 = _1652 + 5u;
    float _1676 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
    uint _1680 = _1652 + 4u;
    float _1690 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1694 = _1652 | 1u;
    float _1705 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_225, _226, _227));
    float _1708 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_225, _226, _227));
    float _3637 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _3648 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1713 = (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.3183098733425140380859375;
    float _1715 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.3183098733425140380859375;
    float _1722 = ((cbLight._m0[_1670].x * _1676) * _1715) + (((cbLight._m0[_1680].x * _1641) * _1690) * _1713);
    float _1723 = ((_1676 * cbLight._m0[_1670].y) * _1715) + (((cbLight._m0[_1680].y * _1643) * _1690) * _1713);
    float _1724 = ((_1676 * cbLight._m0[_1670].z) * _1715) + (((cbLight._m0[_1680].z * _1645) * _1690) * _1713);
    uvec4 _1728 = floatBitsToUint(cbLight._m0[_1652 + 12u]);
    bool _1730 = _1728.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1730)
    {
        _1832 = _1722;
        _1834 = _1723;
        _1836 = _1724;
    }
    else
    {
        uint _1840 = _1652 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1652 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _3659 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1859 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1722;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1723;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1724;
    }
    bool _1839 = _1728.y == 0u;
    float _1894;
    float _1896;
    float _1898;
    if (_1839)
    {
        _1894 = _1832;
        _1896 = _1834;
        _1898 = _1836;
    }
    else
    {
        uint _2002 = _1652 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1652 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3675 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _2021 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _1894 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1832;
        _1896 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1834;
        _1898 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1836;
    }
    uint _1900 = _1652 + 8u;
    float _1906 = cbLight._m0[_1652].x + _305;
    float _1907 = cbLight._m0[_1652].y + _306;
    float _1908 = cbLight._m0[_1652].z + _307;
    float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
    float _1916 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1652].xyz));
    float _3691 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _1920 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1652].xyz), vec3(_1906 * _1912, _1907 * _1912, _1908 * _1912));
    float _3713 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = (0.5 / ((_1919 + 9.9999999392252902907785028219223e-09) + _1920)) * _1919;
    float _3724 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.31831014156341552734375;
    uint _1954 = _1652 + 9u;
    float _1960 = cbLight._m0[_1694].x + _305;
    float _1961 = cbLight._m0[_1694].y + _306;
    float _1962 = cbLight._m0[_1694].z + _307;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1970 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1694].xyz));
    float _3735 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1960 * _1966, _1961 * _1966, _1962 * _1966));
    float _3746 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1983 = (exp2(log2(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = (0.5 / ((_1973 + 9.9999999392252902907785028219223e-09) + _1920)) * _1973;
    float _3757 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.31831014156341552734375;
    float _1999 = (((_1983 * cbLight._m0[_1954].x) * _1989) * _1676) + ((((cbLight._m0[_1900].x * _1641) * _1932) * _1940) * _1690);
    float _2000 = (((_1983 * cbLight._m0[_1954].y) * _1989) * _1676) + ((((cbLight._m0[_1900].y * _1643) * _1932) * _1940) * _1690);
    float _2001 = (((_1983 * cbLight._m0[_1954].z) * _1989) * _1676) + ((((cbLight._m0[_1900].z * _1645) * _1932) * _1940) * _1690);
    float _2057;
    float _2059;
    float _2061;
    if (_1730)
    {
        _2057 = _1999;
        _2059 = _2000;
        _2061 = _2001;
    }
    else
    {
        uint _2063 = _1652 + 10u;
        uint _2069 = _1652 + 2u;
        float _2075 = cbLight._m0[_2069].x + _305;
        float _2076 = cbLight._m0[_2069].y + _306;
        float _2077 = cbLight._m0[_2069].z + _307;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2085 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_2069].xyz));
        float _3768 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _2089 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2075 * _2081, _2076 * _2081, _2077 * _2081));
        float _3779 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2102 = (0.5 / ((_2088 + 9.9999999392252902907785028219223e-09) + _1920)) * _2088;
        float _3790 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.31831014156341552734375;
        float _2105 = isnan(1.0) ? _1668 : (isnan(_1668) ? 1.0 : min(_1668, 1.0));
        _2057 = (((_2098 * cbLight._m0[_2063].x) * _2104) * _2105) + _1999;
        _2059 = (((_2098 * cbLight._m0[_2063].y) * _2104) * _2105) + _2000;
        _2061 = (((_2098 * cbLight._m0[_2063].z) * _2104) * _2105) + _2001;
    }
    float _2136;
    float _2138;
    float _2140;
    if (_1839)
    {
        _2136 = _2057;
        _2138 = _2059;
        _2140 = _2061;
    }
    else
    {
        uint _2147 = _1652 + 11u;
        uint _2153 = _1652 + 3u;
        float _2159 = cbLight._m0[_2153].x + _305;
        float _2160 = cbLight._m0[_2153].y + _306;
        float _2161 = cbLight._m0[_2153].z + _307;
        float _2165 = inversesqrt(dot(vec3(_2159, _2160, _2161), vec3(_2159, _2160, _2161)));
        float _2169 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_2153].xyz));
        float _3806 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2159 * _2165, _2160 * _2165, _2161 * _2165));
        float _3817 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = (0.5 / ((_2172 + 9.9999999392252902907785028219223e-09) + _1920)) * _2172;
        float _3828 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * 0.31831014156341552734375;
        float _2189 = isnan(1.0) ? _1669 : (isnan(_1669) ? 1.0 : min(_1669, 1.0));
        _2136 = (((_2182 * cbLight._m0[_2147].x) * _2188) * _2189) + _2057;
        _2138 = (((_2182 * cbLight._m0[_2147].y) * _2188) * _2189) + _2059;
        _2140 = (((_2182 * cbLight._m0[_2147].z) * _2188) * _2189) + _2061;
    }
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_1650.y == 0u)
    {
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.x;
        uint _2222 = uint((float(_2210.y) * floor(float(uint(cbSceneParam._m0[85u].y * _314) / _2211))) + floor(float(uint(cbSceneParam._m0[85u].x * _313) / _2211)));
        float _2232 = (log2(_1428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2233 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        uint _2236 = uint(isnan(14.0) ? _2233 : (isnan(_2233) ? 14.0 : min(_2233, 14.0)));
        uvec4 _2241 = texelFetch(g_lightClusterGridBuffer, int(((_2236 << 2u) + (_2222 << 6u)) >> 2u));
        uint _2242 = _2241.x;
        uint _2243 = _2210.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2243 >> 4u) & 15u)) + 4294967295u) & _2242) == 0u) || ((_2243 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            uint _2515 = 0u;
            uint _2524;
            bool _2525;
            for (;;)
            {
                _2524 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2515 << 2u)) >> 2u)).x;
                _2525 = _2524 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2525)
                {
                    frontier_phi_66_pred = _2514;
                    frontier_phi_66_pred_1 = _2513;
                    frontier_phi_66_pred_2 = _2512;
                    frontier_phi_66_pred_3 = _2511;
                    frontier_phi_66_pred_4 = _2510;
                    frontier_phi_66_pred_5 = _2509;
                }
                else
                {
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    uint _2639;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2524;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    for (;;)
                    {
                        uint _2643 = uint(findLSB(_2639)) + (_2515 << 5u);
                        uint _2640 = (_2639 + 4294967295u) & _2639;
                        uint _2645 = _2643 * 48u;
                        vec4 _2659 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2645)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2645 + 3u)).x));
                        uint _2665 = (_2643 * 48u) + 4u;
                        vec4 _2678 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2684 = (_2643 * 48u) + 8u;
                        vec3 _2695 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2684)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2684 + 2u)).x));
                        float _2699 = _2659.x - _1426;
                        float _2700 = _2659.y - _1427;
                        float _2701 = _2659.z - _1428;
                        float _2702 = dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701));
                        float _2705 = inversesqrt(_2702);
                        float _2714 = 1.0 - (_2702 * _2659.w);
                        float _3854 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                        float _2715 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
                        float _2716 = sqrt(_2702) * _2678.w;
                        float _2719 = 1.39999997615814208984375 / (_2716 + 1.39999997615814208984375);
                        float _2720 = _2719 * _2719;
                        float _2723 = ((1.0 - _2720) * dot(vec3(_335, _338, _341), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701))) + _2720;
                        float _2726 = _2716 * _2716;
                        float _2730 = ((isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0))) * _2715) / ((_2726 * 0.699999988079071044921875) + 1.0);
                        float _2734 = (-0.0) - _1426;
                        float _2735 = (-0.0) - _1427;
                        float _2736 = (-0.0) - _1428;
                        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
                        float _2744 = dot(vec3(_335, _338, _341), vec3(_2740 * _2734, _2740 * _2735, _2740 * _2736));
                        float _3870 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _3881 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2748 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2752 = (0.5 / (((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) + 9.9999999392252902907785028219223e-09) + _2748)) * _2748;
                        float _3892 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2761 = (((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 3.1415927410125732421875) / ((_2726 * 2.1991131305694580078125) + 3.141590118408203125)) * _2715;
                        _2568 = (_2730 * _2678.x) + _2636;
                        _2569 = (_2730 * _2678.y) + _2637;
                        _2570 = (_2730 * _2678.z) + _2638;
                        _2565 = (_2761 * _2695.x) + _2633;
                        _2566 = (_2761 * _2695.y) + _2634;
                        _2567 = (_2761 * _2695.z) + _2635;
                        if (_2640 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2640;
                        }
                    }
                    frontier_phi_66_pred = _2570;
                    frontier_phi_66_pred_1 = _2569;
                    frontier_phi_66_pred_2 = _2568;
                    frontier_phi_66_pred_3 = _2567;
                    frontier_phi_66_pred_4 = _2566;
                    frontier_phi_66_pred_5 = _2565;
                }
                _2368 = frontier_phi_66_pred;
                _2366 = frontier_phi_66_pred_1;
                _2364 = frontier_phi_66_pred_2;
                _2362 = frontier_phi_66_pred_3;
                _2360 = frontier_phi_66_pred_4;
                _2358 = frontier_phi_66_pred_5;
                uint _2516 = _2515 + 1u;
                if (_2516 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2509 = _2358;
                    _2510 = _2360;
                    _2511 = _2362;
                    _2512 = _2364;
                    _2513 = _2366;
                    _2514 = _2368;
                    _2515 = _2516;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2374) & _2242) == 0u)
        {
            _2480 = _2357;
            _2482 = _2359;
            _2484 = _2361;
            _2486 = _2363;
            _2488 = _2365;
            _2490 = _2367;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2616 = _2357;
                float _2617 = _2359;
                float _2618 = _2361;
                float _2619 = _2363;
                float _2620 = _2365;
                float _2621 = _2367;
                uint _2622 = _2374;
                uint _2631;
                bool _2632;
                for (;;)
                {
                    _2631 = texelFetch(g_lightClassification, int((((_2236 << 5u) + (_2222 << 9u)) + (_2622 << 2u)) >> 2u)).x;
                    _2632 = _2631 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2632)
                    {
                        frontier_phi_72_pred = _2621;
                        frontier_phi_72_pred_1 = _2620;
                        frontier_phi_72_pred_2 = _2619;
                        frontier_phi_72_pred_3 = _2618;
                        frontier_phi_72_pred_4 = _2617;
                        frontier_phi_72_pred_5 = _2616;
                    }
                    else
                    {
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _2779 = _2616;
                        float _2780 = _2617;
                        float _2781 = _2618;
                        float _2782 = _2619;
                        float _2783 = _2620;
                        float _2784 = _2621;
                        uint _2785 = _2631;
                        uint _2786;
                        vec4 _2811;
                        float _2812;
                        vec4 _2827;
                        vec3 _2839;
                        vec4 _2855;
                        vec4 _2871;
                        float _2918;
                        bool _2919;
                        for (;;)
                        {
                            uint _2796 = ((_2622 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2785));
                            _2786 = (_2785 + 4294967295u) & _2785;
                            uint _2798 = _2796 * 40u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            _2812 = _2811.w;
                            uint _2814 = (_2796 * 40u) + 4u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2796 * 40u) + 8u;
                            _2839 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x));
                            uint _2842 = (_2796 * 40u) + 16u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2796 * 40u) + 20u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2874 = (_2796 * 40u) + 24u;
                            vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2893 = (_2796 * 40u) + 28u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            _2918 = fma(_1428, _2906.z, fma(_1427, _2906.y, _2906.x * _1426)) + _2906.w;
                            _2919 = !((fma(_1428, _2887.z, fma(_1427, _2887.y, _2887.x * _1426)) + _2887.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2919)
                            {
                                float _2946 = _2811.x - _1426;
                                float _2947 = _2811.y - _1427;
                                float _2948 = _2811.z - _1428;
                                float _2949 = dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948));
                                float _2952 = inversesqrt(_2949);
                                float _2953 = _2952 * _2946;
                                float _2954 = _2952 * _2947;
                                float _2955 = _2952 * _2948;
                                float _2959 = 1.0 - (_2949 / (_2812 * _2812));
                                float _3903 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                                float _2960 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2964 = sqrt(_2949) * _2827.w;
                                float _2966 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                                float _2967 = _2966 * _2966;
                                float _2968 = 1.0 - _2967;
                                float _2970 = (_2968 * dot(vec3(_2953, _2954, _2955), vec3(_335, _338, _341))) + _2967;
                                float _2973 = _2964 * _2964;
                                float _2977 = (fma(_1428, _2855.z, fma(_1427, _2855.y, _2855.x * _1426)) + _2855.w) / _2918;
                                float _2978 = (fma(_1428, _2871.z, fma(_1427, _2871.y, _2871.x * _1426)) + _2871.w) / _2918;
                                float _2982 = 1.0 - dot(vec2(_2977, _2978), vec2(_2977, _2978));
                                float _3919 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                                float _2984 = _2983 * (((isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))) * _2960) / ((_2973 * 0.699999988079071044921875) + 1.0));
                                float _2994 = dot(vec3(_335, _338, _341), vec3((-0.0) - (_1426 * _2505), (-0.0) - (_1427 * _2505), (-0.0) - (_1428 * _2505)));
                                float _3930 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _3002 = (_2968 * dot(vec3(_335, _338, _341), vec3(_2953, _2954, _2955))) + _2967;
                                float _3941 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _3007 = (0.5 / (((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) + 9.9999999392252902907785028219223e-09) + _3003)) * _3003;
                                float _3952 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3014 = (_2983 * _2960) * (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 3.1415927410125732421875) / ((_2973 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2984 * _2827.y;
                                frontier_phi_78_pred_1 = _2984 * _2827.x;
                                frontier_phi_78_pred_2 = _3014 * _2839.z;
                                frontier_phi_78_pred_3 = _3014 * _2839.y;
                                frontier_phi_78_pred_4 = _3014 * _2839.x;
                                frontier_phi_78_pred_5 = _2984 * _2827.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3022 = frontier_phi_78_pred;
                            _3021 = frontier_phi_78_pred_1;
                            _3020 = frontier_phi_78_pred_2;
                            _3019 = frontier_phi_78_pred_3;
                            _3018 = frontier_phi_78_pred_4;
                            _3023 = frontier_phi_78_pred_5;
                            _2769 = _3021 + _2782;
                            _2770 = _3022 + _2783;
                            _2771 = _3023 + _2784;
                            _2766 = _3018 + _2779;
                            _2767 = _3019 + _2780;
                            _2768 = _3020 + _2781;
                            if (_2786 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2786;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2771;
                        frontier_phi_72_pred_1 = _2770;
                        frontier_phi_72_pred_2 = _2769;
                        frontier_phi_72_pred_3 = _2768;
                        frontier_phi_72_pred_4 = _2767;
                        frontier_phi_72_pred_5 = _2766;
                    }
                    _2491 = frontier_phi_72_pred;
                    _2489 = frontier_phi_72_pred_1;
                    _2487 = frontier_phi_72_pred_2;
                    _2485 = frontier_phi_72_pred_3;
                    _2483 = frontier_phi_72_pred_4;
                    _2481 = frontier_phi_72_pred_5;
                    uint _2623 = _2622 + 1u;
                    if (_2623 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2616 = _2481;
                        _2617 = _2483;
                        _2618 = _2485;
                        _2619 = _2487;
                        _2620 = _2489;
                        _2621 = _2491;
                        _2622 = _2623;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2491;
                frontier_phi_60_61_ladder_1 = _2489;
                frontier_phi_60_61_ladder_2 = _2485;
                frontier_phi_60_61_ladder_3 = _2483;
                frontier_phi_60_61_ladder_4 = _2481;
                frontier_phi_60_61_ladder_5 = _2487;
            }
            else
            {
                frontier_phi_60_61_ladder = _2367;
                frontier_phi_60_61_ladder_1 = _2365;
                frontier_phi_60_61_ladder_2 = _2361;
                frontier_phi_60_61_ladder_3 = _2359;
                frontier_phi_60_61_ladder_4 = _2357;
                frontier_phi_60_61_ladder_5 = _2363;
            }
            _2480 = frontier_phi_60_61_ladder_4;
            _2482 = frontier_phi_60_61_ladder_3;
            _2484 = frontier_phi_60_61_ladder_2;
            _2486 = frontier_phi_60_61_ladder_5;
            _2488 = frontier_phi_60_61_ladder_1;
            _2490 = frontier_phi_60_61_ladder;
        }
        float _2495 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
        _2255 = (_2495 * _2486) + _1894;
        _2257 = (_2495 * _2488) + _1896;
        _2259 = (_2495 * _2490) + _1898;
        _2261 = ((_2480 * 0.039999999105930328369140625) * _2495) + _2136;
        _2263 = ((_2482 * 0.039999999105930328369140625) * _2495) + _2138;
        _2265 = ((_2484 * 0.039999999105930328369140625) * _2495) + _2140;
    }
    else
    {
        _2255 = _1894;
        _2257 = _1896;
        _2259 = _1898;
        _2261 = _2136;
        _2263 = _2138;
        _2265 = _2140;
    }
    uint _2271 = _356 + uint(cbMatDynParam._m0[0u].w);
    float _2279 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _216.x) * cbInstanceData._m0[_2271].x;
    float _2282 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _216.y) * cbInstanceData._m0[_2271].y;
    float _2285 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _216.z) * cbInstanceData._m0[_2271].z;
    float _3968 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3979 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3990 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _2302 = (((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2255 + ((isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0))) * _380))) + ((_2261 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + _2279;
    float _2304 = (_2282 + ((_2263 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2257 + ((isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0))) * _380)));
    float _2306 = (_2285 + ((_2265 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1159)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2259 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _380)));
    float _4016 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2319 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    uint _2320 = _354 + 6u;
    float _2328 = _313 / cbSceneParam._m0[86u].x;
    float _2329 = _314 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2383 = _2382 / _247;
        float _2394 = _2383 * _298;
        float _2395 = _299 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2398 = _2383 * _300;
        float _2400 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2395;
        float _2408 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2418 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2578;
        if (abs((_2396 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2578 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2418 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2538 = 1.0 / cbSceneParam._m0[80u].x;
            float _2539 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2540 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2549 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : min(_2539, 0.0));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            _2578 = ((abs(_2408 / _2396) * cbSceneParam._m0[80u].y) * ((((_2549 - _2550) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))))) * _2538)) - ((exp2(_2418 * _2549) - exp2(_2418 * _2550)) * _2538))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2580 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2589 = exp2((_2578 * (-1.44269502162933349609375)) * (1.0 - _2580.w));
        float _2590 = log2(_2589);
        float _2606 = log2(_2348);
        _2420 = (exp2(_2606 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].x)) * _2580.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2422 = (exp2(_2606 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].y)) * _2580.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2424 = (exp2(_2606 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].z)) * _2580.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2426 = _2589 * _2348;
    }
    else
    {
        _2420 = _2345;
        _2422 = _2346;
        _2424 = _2347;
        _2426 = _2348;
    }
    float _2438 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2439 = _2438 == 3.0;
    float _2441 = log2(_2426);
    float _2445 = exp2(_2441 * cbSceneParam._m0[78u].x);
    float _2446 = exp2(_2441 * cbSceneParam._m0[78u].y);
    float _2447 = exp2(_2441 * cbSceneParam._m0[78u].z);
    float _2448 = _2445 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2449 = _2446 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0)));
    float _2450 = _2447 * (isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0)));
    float _2459 = (_2438 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2459 * (_2439 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2420)));
    SV_Target.y = _2459 * (_2439 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.z = _2459 * (_2439 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.w = cbInstanceData._m0[_2320].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2279) * _2319) * _2445) * _2459;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2282) * _2319) * _2446) * _2459;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2285) * _2319) * _2447) * _2459;
    SV_Target_1.w = cbInstanceData._m0[_2320].w;
}


