#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _804;
float _3295;
float _3296;
float _3297;
float _3298;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _239 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _252 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3307 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _254 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _262 = (((_254 * _254) * (3.0 - (_254 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _266 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _267 = _266 * _173;
    float _268 = _266 * _174;
    float _269 = _266 * _175;
    float _3318 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3329 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3340 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _288 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _329 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _339 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _329);
    float _340 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _329);
    float _341 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _329);
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _346 = _339 * _345;
    float _347 = _340 * _345;
    float _348 = _341 * _345;
    vec4 _353 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _355 = _353.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _483 = sqrt(((_339 * _339) + (_340 * _340)) + (_341 * _341));
        float _489 = (cbMatDynParam._m0[5u].x * _483) + cbMatDynParam._m0[5u].y;
        float _3351 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
        float _490 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _494 = (cbMatDynParam._m0[5u].z * _483) + cbMatDynParam._m0[5u].w;
        float _3362 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))) - _490)) + _490) < ((_355 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _367 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _368 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _388 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _391 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _394 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _407 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = _407 + 9u;
    uint _409 = _408 + uint(cbMatDynParam._m0[0u].w);
    float _415 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_409].x;
    float _416 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_409].y;
    float _417 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_409].z;
    float _3373 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _420 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    vec4 _429 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _367, cbSceneParam._m0[86u].y * _368));
    float _432 = _429.x * TEXCOORD.z;
    float _433 = dot(vec3(_267, _268, _269), vec3(_346, _347, _348));
    float _436 = _433 * 2.0;
    float _440 = (_436 * _267) - _346;
    float _441 = (_436 * _268) - _347;
    float _442 = (_436 * _269) - _348;
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _803;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _528 = fma(_472, cbModelParam._m0[26u].z, fma(_468, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _464));
        float _532 = fma(_472, cbModelParam._m0[27u].z, fma(_468, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _464));
        float _536 = fma(_472, cbModelParam._m0[28u].z, fma(_468, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _464));
        float _561 = _464 + _267;
        float _562 = _468 + _268;
        float _563 = _472 + _269;
        float _573 = fma(_563, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561)) - _528;
        float _574 = fma(_563, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561)) - _532;
        float _575 = fma(_563, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561)) - _536;
        float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
        float _592 = ((_579 * _573) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_528 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_579 * _574) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_532 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_579 * _575) / cbModelParam._m0[34u].z) + ((((((_536 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        float _631 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _632 = _631 * (_597.x + (-0.5));
        float _633 = _631 * (_597.y + (-0.5));
        float _634 = _631 * (_597.z + (-0.5));
        float _641 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _642 = _641 * (_604.x + (-0.5));
        float _643 = _641 * (_604.y + (-0.5));
        float _644 = _641 * (_604.z + (-0.5));
        float _651 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _652 = _651 * (_611.x + (-0.5));
        float _653 = _651 * (_611.y + (-0.5));
        float _654 = _651 * (_611.z + (-0.5));
        float _661 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_618.x + (-0.5));
        float _663 = _661 * (_618.y + (-0.5));
        float _664 = _661 * (_618.z + (-0.5));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _668 = _632 * 0.5;
        float _669 = _642 * 0.5;
        float _670 = _652 * 0.5;
        float _671 = dot(vec3(_668, _669, _670), vec3(_668, _669, _670));
        float _676 = (_671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_671);
        float _685 = (dot(vec3(_267, _268, _269), vec3(_676 * _668, _676 * _669, _676 * _670)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _695 = sqrt(((_669 * _669) + (_668 * _668)) + (_670 * _670)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _696 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _697 = _696 * 2.0;
        float _701 = (1.0 - _696) / (_696 + 1.0);
        float _3443 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _711 = ((((1.0 - _702) * (_697 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_697 + 1.0))) + _702) * _665;
        float _712 = _633 * 0.5;
        float _713 = _643 * 0.5;
        float _714 = _653 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _728 = (dot(vec3(_267, _268, _269), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3454 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _737 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3465 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3476 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * (_739 + 1.0))) + _744) * _666;
        float _754 = _634 * 0.5;
        float _755 = _644 * 0.5;
        float _756 = _654 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_267, _268, _269), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_667 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3509 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_781 + 1.0))) + _786) * _667;
        _803 = _634;
        _805 = _633;
        _806 = _632;
        _807 = _644;
        _808 = _643;
        _809 = _642;
        _810 = _654;
        _811 = _653;
        _812 = _652;
        _813 = _667;
        _814 = _666;
        _815 = _665;
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _818 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
    }
    else
    {
        _803 = _804;
        _805 = _804;
        _806 = _804;
        _807 = _804;
        _808 = _804;
        _809 = _804;
        _810 = _804;
        _811 = _804;
        _812 = _804;
        _813 = _804;
        _814 = _804;
        _815 = _804;
        _816 = 0.0;
        _817 = 0.0;
        _818 = 0.0;
    }
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _847 = fma(_472, cbModelParam._m0[30u].z, fma(_468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _464));
        float _851 = fma(_472, cbModelParam._m0[31u].z, fma(_468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _464));
        float _855 = fma(_472, cbModelParam._m0[32u].z, fma(_468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _464));
        float _878 = _464 + _267;
        float _879 = _468 + _268;
        float _880 = _472 + _269;
        float _890 = fma(_880, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878)) - _847;
        float _891 = fma(_880, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878)) - _851;
        float _892 = fma(_880, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878)) - _855;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_847 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_851 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[35u].z) + ((((((_855 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _946 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_913.x + (-0.5));
        float _948 = _946 * (_913.y + (-0.5));
        float _949 = _946 * (_913.z + (-0.5));
        float _956 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_920.x + (-0.5));
        float _958 = _956 * (_920.y + (-0.5));
        float _959 = _956 * (_920.z + (-0.5));
        float _966 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_927.x + (-0.5));
        float _968 = _966 * (_927.y + (-0.5));
        float _969 = _966 * (_927.z + (-0.5));
        float _976 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_934.x + (-0.5));
        float _978 = _976 * (_934.y + (-0.5));
        float _979 = _976 * (_934.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_267, _268, _269), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3572 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1010 + 1.0))) + _1015) * _980;
        float _1025 = _948 * 0.5;
        float _1026 = _958 * 0.5;
        float _1027 = _968 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_267, _268, _269), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3605 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1052 + 1.0))) + _1057) * _981;
        float _1067 = _949 * 0.5;
        float _1068 = _959 * 0.5;
        float _1069 = _969 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_267, _268, _269), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3638 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1094 + 1.0))) + _1099) * _982;
        _1116 = _949;
        _1117 = _948;
        _1118 = _947;
        _1119 = _959;
        _1120 = _958;
        _1121 = _957;
        _1122 = _969;
        _1123 = _968;
        _1124 = _967;
        _1125 = _982;
        _1126 = _981;
        _1127 = _980;
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _804;
        _1117 = _804;
        _1118 = _804;
        _1119 = _804;
        _1120 = _804;
        _1121 = _804;
        _1122 = _804;
        _1123 = _804;
        _1124 = _804;
        _1125 = _804;
        _1126 = _804;
        _1127 = _804;
        _1128 = 0.0;
        _1129 = 0.0;
        _1130 = 0.0;
    }
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _816)) + _816;
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _817)) + _817;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _818)) + _818;
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1140));
    float _1184 = _440 * 0.5;
    float _1185 = _441 * 0.5;
    float _1186 = _442 * 0.5;
    float _1187 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1190 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1193 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1227;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1200 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_803, _807, _810, _813));
        float _1204 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_805, _808, _811, _814));
        float _1208 = dot(vec4(_1184, _1185, _1186, 1.0), vec4(_806, _809, _812, _815));
        float _1215 = dot(vec4(cbModelParam._m0[39u]), vec4(_1184, _1185, _1186, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1215) ? 0.0 : (isnan(0.0) ? _1215 : max(0.0, _1215))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1238;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1229 = dot(vec4(cbModelParam._m0[40u]), vec4(_1184, _1185, _1186, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1229) ? 0.0 : (isnan(0.0) ? _1229 : max(0.0, _1229))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1242 = (_1238 * cbModelParam._m0[1u].x) + (_1227 * (1.0 - cbModelParam._m0[1u].x));
    float _1251 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1332;
    float _1334;
    float _1336;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1299 = fma(_472, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464)) + cbModelParam._m0[13u].w;
        float _1303 = fma(_472, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464)) + cbModelParam._m0[14u].w;
        float _1307 = fma(_472, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464)) + cbModelParam._m0[15u].w;
        float _1310 = fma(_442, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440));
        float _1313 = fma(_442, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440));
        float _1316 = fma(_442, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440));
        float _1342;
        if (_1310 > 0.0)
        {
            _1342 = abs((1.0 - _1299) / _1310);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1299 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1342 = frontier_phi_17_15_ladder;
        }
        float _1515;
        if (_1313 > 0.0)
        {
            _1515 = abs((1.0 - _1303) / _1313);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1303 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1515 = frontier_phi_26_22_ladder;
        }
        float _1811;
        if (_1316 > 0.0)
        {
            _1811 = abs((1.0 - _1307) / _1316);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1307 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1811 = frontier_phi_38_33_ladder;
        }
        float _1813 = isnan(_1515) ? _1342 : (isnan(_1342) ? _1515 : min(_1342, _1515));
        float _1814 = isnan(_1811) ? _1813 : (isnan(_1813) ? _1811 : min(_1813, _1811));
        float _1818 = (_1814 * _1310) + _1299;
        float _1819 = (_1814 * _1313) + _1303;
        float _1820 = (_1814 * _1316) + _1307;
        float _1821 = _1814 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1821;
        float _1825 = _1821 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 > _1825) || ((_1819 < _1823) || ((_1818 < _1823) || (_1818 > _1825))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1820, cbModelParam._m0[9u].z, fma(_1819, cbModelParam._m0[9u].y, _1818 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1820, cbModelParam._m0[10u].z, fma(_1819, cbModelParam._m0[10u].y, _1818 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1820, cbModelParam._m0[11u].z, fma(_1819, cbModelParam._m0[11u].y, _1818 * cbModelParam._m0[11u].x))), _1251);
            frontier_phi_16_38_ladder = _1965.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1965.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1965.x * cbModelParam._m0[1u].y;
        }
        _1332 = frontier_phi_16_38_ladder_2;
        _1334 = frontier_phi_16_38_ladder_1;
        _1336 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_440, _441, _442), _1251);
        _1332 = _1320.x * cbModelParam._m0[1u].y;
        _1334 = _1320.y * cbModelParam._m0[1u].y;
        _1336 = _1320.z * cbModelParam._m0[1u].y;
    }
    float _1339 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1431;
    float _1433;
    float _1435;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1395 = fma(_472, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464)) + cbModelParam._m0[21u].w;
        float _1399 = fma(_472, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464)) + cbModelParam._m0[22u].w;
        float _1403 = fma(_472, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464)) + cbModelParam._m0[23u].w;
        float _1406 = fma(_442, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440));
        float _1409 = fma(_442, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440));
        float _1412 = fma(_442, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440));
        float _1520;
        if (_1406 > 0.0)
        {
            _1520 = abs((1.0 - _1395) / _1406);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1395 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1520 = frontier_phi_28_24_ladder;
        }
        float _1838;
        if (_1409 > 0.0)
        {
            _1838 = abs((1.0 - _1399) / _1409);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1409 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1399 + 1.0) / _1409);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1838 = frontier_phi_40_35_ladder;
        }
        float _2111;
        if (_1412 > 0.0)
        {
            _2111 = abs((1.0 - _1403) / _1412);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1403 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2111 = frontier_phi_50_47_ladder;
        }
        float _2113 = isnan(_1838) ? _1520 : (isnan(_1520) ? _1838 : min(_1520, _1838));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1406) + _1395;
        float _2119 = (_2114 * _1409) + _1399;
        float _2120 = (_2114 * _1412) + _1403;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2121;
        float _2124 = _2121 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2120 > _2124) || ((_2120 < _2122) || ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 < _2122) || (_2118 > _2124))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2120, cbModelParam._m0[17u].z, fma(_2119, cbModelParam._m0[17u].y, _2118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2120, cbModelParam._m0[18u].z, fma(_2119, cbModelParam._m0[18u].y, _2118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2120, cbModelParam._m0[19u].z, fma(_2119, cbModelParam._m0[19u].y, _2118 * cbModelParam._m0[19u].x))), _1339);
            frontier_phi_25_50_ladder = _2211.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2211.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2211.x * cbModelParam._m0[1u].z;
        }
        _1431 = frontier_phi_25_50_ladder_2;
        _1433 = frontier_phi_25_50_ladder_1;
        _1435 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1415 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_440, _441, _442), _1339);
        _1431 = _1415.x * cbModelParam._m0[1u].z;
        _1433 = _1415.y * cbModelParam._m0[1u].z;
        _1435 = _1415.z * cbModelParam._m0[1u].z;
    }
    float _1447 = _432 * 0.01200000010430812835693359375;
    float _1449 = _1447 * ((cbModelParam._m0[1u].w * (_1431 - _1332)) + _1332);
    float _1450 = _1447 * ((cbModelParam._m0[1u].w * (_1433 - _1334)) + _1334);
    float _1451 = _1447 * ((cbModelParam._m0[1u].w * (_1435 - _1336)) + _1336);
    float _1454 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, _1449 * cbSceneParam._m0[91u].x));
    float _1494 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1507 = _1494 / _1506;
    float _1508 = _1498 / _1506;
    float _1509 = _1502 / _1506;
    float _1656;
    float _1657;
    float _1658;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1536 = ((uint(_1509 > cbSceneParam._m0[59u].y) + uint(_1509 > cbSceneParam._m0[59u].x)) + uint(_1509 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1537 = _1536 + 43u;
        uint _1545 = _1536 + 44u;
        uint _1553 = _1536 + 45u;
        uint _1561 = _1536 + 46u;
        float _1572 = fma(_1506, cbSceneParam._m0[_1537].w, fma(_1502, cbSceneParam._m0[_1537].z, fma(_1498, cbSceneParam._m0[_1537].y, _1494 * cbSceneParam._m0[_1537].x)));
        float _1576 = fma(_1506, cbSceneParam._m0[_1545].w, fma(_1502, cbSceneParam._m0[_1545].z, fma(_1498, cbSceneParam._m0[_1545].y, _1494 * cbSceneParam._m0[_1545].x)));
        float _1584 = fma(_1506, cbSceneParam._m0[_1561].w, fma(_1502, cbSceneParam._m0[_1561].z, fma(_1498, cbSceneParam._m0[_1561].y, _1494 * cbSceneParam._m0[_1561].x)));
        float _1589 = cbSceneParam._m0[33u].z * _1584;
        float _1591 = cbSceneParam._m0[33u].w * _1584;
        float _1594 = fma(_1506, cbSceneParam._m0[_1553].w, fma(_1502, cbSceneParam._m0[_1553].z, fma(_1498, cbSceneParam._m0[_1553].y, _1494 * cbSceneParam._m0[_1553].x))) / _1584;
        float _1642 = (cbSceneParam._m0[33u].x - sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509))) * cbSceneParam._m0[33u].y;
        float _3764 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1649 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1589 + _1572) / _1584, (_1591 + _1576) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1591 + _1572) / _1584, (_1576 - _1589) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 - _1589) / _1584, (_1576 - _1591) / _1584), _1594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1572 - _1591) / _1584, (_1589 + _1576) / _1584), _1594), 0.0)).x), vec4(0.25)));
        _1656 = 1.0 - (_1649 * cbSceneParam._m0[34u].x);
        _1657 = 1.0 - (_1649 * cbSceneParam._m0[34u].y);
        _1658 = 1.0 - (_1649 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1656 = 1.0;
        _1657 = 1.0;
        _1658 = 1.0;
    }
    float _1722;
    float _1724;
    float _1726;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1710 = fma(_1506, cbSceneParam._m0[63u].w, fma(_1502, cbSceneParam._m0[63u].z, fma(_1498, cbSceneParam._m0[63u].y, _1494 * cbSceneParam._m0[63u].x)));
        float _1711 = fma(_1506, cbSceneParam._m0[60u].w, fma(_1502, cbSceneParam._m0[60u].z, fma(_1498, cbSceneParam._m0[60u].y, _1494 * cbSceneParam._m0[60u].x))) / _1710;
        float _1712 = fma(_1506, cbSceneParam._m0[61u].w, fma(_1502, cbSceneParam._m0[61u].z, fma(_1498, cbSceneParam._m0[61u].y, _1494 * cbSceneParam._m0[61u].x))) / _1710;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1711 >= cbSceneParam._m0[64u].x) && (_1712 >= cbSceneParam._m0[64u].y)) && (_1711 <= cbSceneParam._m0[64u].z)) && (_1712 <= cbSceneParam._m0[64u].w))
        {
            float _1851 = fma(_1506, cbSceneParam._m0[62u].w, fma(_1502, cbSceneParam._m0[62u].z, fma(_1498, cbSceneParam._m0[62u].y, _1494 * cbSceneParam._m0[62u].x))) / _1710;
            float _1855 = isnan(cbSceneParam._m0[41u].w) ? _1851 : (isnan(_1851) ? cbSceneParam._m0[41u].w : max(_1851, cbSceneParam._m0[41u].w));
            float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509))) * cbSceneParam._m0[33u].y;
            float _3780 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
            float _1905 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1711, cbSceneParam._m0[33u].w + _1712), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1711, _1712 - cbSceneParam._m0[33u].z), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1711 - cbSceneParam._m0[33u].z, _1712 - cbSceneParam._m0[33u].w), _1855), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1711 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1712), _1855), 0.0)).x), vec4(0.25)));
            float _1909 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
            float _1910 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
            float _1911 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1911) ? _1658 : (isnan(_1658) ? _1911 : min(_1658, _1911));
            frontier_phi_37_36_ladder_1 = isnan(_1910) ? _1657 : (isnan(_1657) ? _1910 : min(_1657, _1910));
            frontier_phi_37_36_ladder_2 = isnan(_1909) ? _1656 : (isnan(_1656) ? _1909 : min(_1656, _1909));
        }
        else
        {
            frontier_phi_37_36_ladder = _1658;
            frontier_phi_37_36_ladder_1 = _1657;
            frontier_phi_37_36_ladder_2 = _1656;
        }
        _1722 = frontier_phi_37_36_ladder_2;
        _1724 = frontier_phi_37_36_ladder_1;
        _1726 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1722 = _1656;
        _1724 = _1657;
        _1726 = _1658;
    }
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_407 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _432 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1770 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1774 = _1733 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_267, _268, _269));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_267, _268, _269));
    float _3816 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3827 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1750].x * _1756) * _1795) + (((cbLight._m0[_1760].x * _1722) * _1770) * _1793);
    float _1803 = ((_1756 * cbLight._m0[_1750].y) * _1795) + (((cbLight._m0[_1760].y * _1724) * _1770) * _1793);
    float _1804 = ((_1756 * cbLight._m0[_1750].z) * _1795) + (((cbLight._m0[_1760].z * _1726) * _1770) * _1793);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1810)
    {
        _1912 = _1802;
        _1914 = _1803;
        _1916 = _1804;
    }
    else
    {
        uint _1920 = _1733 + 6u;
        float _1936 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1937 = _1936 * _1936;
        float _3838 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1939 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1912 = (((cbLight._m0[_1920].x * 0.3183098733425140380859375) * _1938) * _1939) + _1802;
        _1914 = (((cbLight._m0[_1920].y * 0.3183098733425140380859375) * _1938) * _1939) + _1803;
        _1916 = (((cbLight._m0[_1920].z * 0.3183098733425140380859375) * _1938) * _1939) + _1804;
    }
    bool _1919 = _1808.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1919)
    {
        _1974 = _1912;
        _1976 = _1914;
        _1978 = _1916;
    }
    else
    {
        uint _2082 = _1733 + 7u;
        float _2098 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _2099 = _2098 * _2098;
        float _3854 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2100 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _2101 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1974 = (((cbLight._m0[_2082].x * 0.3183098733425140380859375) * _2100) * _2101) + _1912;
        _1976 = (((cbLight._m0[_2082].y * 0.3183098733425140380859375) * _2100) * _2101) + _1914;
        _1978 = (((cbLight._m0[_2082].z * 0.3183098733425140380859375) * _2100) * _2101) + _1916;
    }
    uint _1980 = _1733 + 8u;
    float _1986 = cbLight._m0[_1733].x + _346;
    float _1987 = cbLight._m0[_1733].y + _347;
    float _1988 = cbLight._m0[_1733].z + _348;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1996 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1733].xyz));
    float _3870 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _2000 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1986 * _1992, _1987 * _1992, _1988 * _1992));
    float _3892 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2012 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2018 = (0.5 / ((_1999 + 9.9999999392252902907785028219223e-09) + _2000)) * _1999;
    float _3903 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.31831014156341552734375;
    uint _2034 = _1733 + 9u;
    float _2040 = cbLight._m0[_1774].x + _346;
    float _2041 = cbLight._m0[_1774].y + _347;
    float _2042 = cbLight._m0[_1774].z + _348;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2050 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1774].xyz));
    float _3914 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_2040 * _2046, _2041 * _2046, _2042 * _2046));
    float _3925 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = (0.5 / ((_2053 + 9.9999999392252902907785028219223e-09) + _2000)) * _2053;
    float _3936 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.31831014156341552734375;
    float _2079 = (((_2063 * cbLight._m0[_2034].x) * _2069) * _1756) + ((((cbLight._m0[_1980].x * _1722) * _2012) * _2020) * _1770);
    float _2080 = (((_2063 * cbLight._m0[_2034].y) * _2069) * _1756) + ((((cbLight._m0[_1980].y * _1724) * _2012) * _2020) * _1770);
    float _2081 = (((_2063 * cbLight._m0[_2034].z) * _2069) * _1756) + ((((cbLight._m0[_1980].z * _1726) * _2012) * _2020) * _1770);
    float _2137;
    float _2139;
    float _2141;
    if (_1810)
    {
        _2137 = _2079;
        _2139 = _2080;
        _2141 = _2081;
    }
    else
    {
        uint _2143 = _1733 + 10u;
        uint _2149 = _1733 + 2u;
        float _2155 = cbLight._m0[_2149].x + _346;
        float _2156 = cbLight._m0[_2149].y + _347;
        float _2157 = cbLight._m0[_2149].z + _348;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2165 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2149].xyz));
        float _3947 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2169 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2155 * _2161, _2156 * _2161, _2157 * _2161));
        float _3958 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2178 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2182 = (0.5 / ((_2168 + 9.9999999392252902907785028219223e-09) + _2000)) * _2168;
        float _3969 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.31831014156341552734375;
        float _2185 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2137 = (((_2178 * cbLight._m0[_2143].x) * _2184) * _2185) + _2079;
        _2139 = (((_2178 * cbLight._m0[_2143].y) * _2184) * _2185) + _2080;
        _2141 = (((_2178 * cbLight._m0[_2143].z) * _2184) * _2185) + _2081;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1919)
    {
        _2216 = _2137;
        _2218 = _2139;
        _2220 = _2141;
    }
    else
    {
        uint _2227 = _1733 + 11u;
        uint _2233 = _1733 + 3u;
        float _2239 = cbLight._m0[_2233].x + _346;
        float _2240 = cbLight._m0[_2233].y + _347;
        float _2241 = cbLight._m0[_2233].z + _348;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2249 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2233].xyz));
        float _3985 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2239 * _2245, _2240 * _2245, _2241 * _2245));
        float _3996 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2262 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = (0.5 / ((_2252 + 9.9999999392252902907785028219223e-09) + _2000)) * _2252;
        float _4007 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.31831014156341552734375;
        float _2269 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2216 = (((_2262 * cbLight._m0[_2227].x) * _2268) * _2269) + _2137;
        _2218 = (((_2262 * cbLight._m0[_2227].y) * _2268) * _2269) + _2139;
        _2220 = (((_2262 * cbLight._m0[_2227].z) * _2268) * _2269) + _2141;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1731.y == 0u)
    {
        uvec4 _2290 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2291 = _2290.x;
        uint _2302 = uint((float(_2290.y) * floor(float(uint(cbSceneParam._m0[85u].y * _368) / _2291))) + floor(float(uint(cbSceneParam._m0[85u].x * _367) / _2291)));
        float _2312 = (log2(_1509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2313 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        uint _2316 = uint(isnan(14.0) ? _2313 : (isnan(_2313) ? 14.0 : min(_2313, 14.0)));
        uvec4 _2321 = texelFetch(g_lightClusterGridBuffer, int(((_2316 << 2u) + (_2302 << 6u)) >> 2u));
        uint _2322 = _2321.x;
        uint _2323 = _2290.z;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((((1u << ((_2323 >> 4u) & 15u)) + 4294967295u) & _2322) == 0u) || ((_2323 & 240u) == 0u))
        {
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
            _2448 = 0.0;
            _2450 = 0.0;
        }
        else
        {
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2449;
            float _2451;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            uint _2606 = 0u;
            uint _2615;
            bool _2616;
            for (;;)
            {
                _2615 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                _2616 = _2615 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2616)
                {
                    frontier_phi_71_pred = _2605;
                    frontier_phi_71_pred_1 = _2604;
                    frontier_phi_71_pred_2 = _2603;
                    frontier_phi_71_pred_3 = _2602;
                    frontier_phi_71_pred_4 = _2601;
                    frontier_phi_71_pred_5 = _2600;
                }
                else
                {
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    uint _2751;
                    _2745 = _2600;
                    _2746 = _2601;
                    _2747 = _2602;
                    _2748 = _2603;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2615;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    for (;;)
                    {
                        uint _2755 = uint(findLSB(_2751)) + (_2606 << 5u);
                        uint _2752 = (_2751 + 4294967295u) & _2751;
                        uint _2757 = _2755 * 48u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 3u)).x));
                        uint _2777 = (_2755 * 48u) + 4u;
                        vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 3u)).x));
                        uint _2796 = (_2755 * 48u) + 8u;
                        vec3 _2807 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x));
                        float _2811 = _2771.x - _1507;
                        float _2812 = _2771.y - _1508;
                        float _2813 = _2771.z - _1509;
                        float _2814 = dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813));
                        float _2817 = inversesqrt(_2814);
                        float _2826 = 1.0 - (_2814 * _2771.w);
                        float _4033 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2827 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2828 = sqrt(_2814) * _2790.w;
                        float _2831 = 1.39999997615814208984375 / (_2828 + 1.39999997615814208984375);
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * dot(vec3(_388, _391, _394), vec3(_2817 * _2811, _2817 * _2812, _2817 * _2813))) + _2832;
                        float _2838 = _2828 * _2828;
                        float _2842 = ((isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * _2827) / ((_2838 * 0.699999988079071044921875) + 1.0);
                        float _2846 = (-0.0) - _1507;
                        float _2847 = (-0.0) - _1508;
                        float _2848 = (-0.0) - _1509;
                        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
                        float _2856 = dot(vec3(_388, _391, _394), vec3(_2852 * _2846, _2852 * _2847, _2852 * _2848));
                        float _4049 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _4060 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2860 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2864 = (0.5 / (((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) + 9.9999999392252902907785028219223e-09) + _2860)) * _2860;
                        float _4071 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2873 = (((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 3.1415927410125732421875) / ((_2838 * 2.1991131305694580078125) + 3.141590118408203125)) * _2827;
                        _2675 = (_2842 * _2790.x) + _2748;
                        _2676 = (_2842 * _2790.y) + _2749;
                        _2677 = (_2842 * _2790.z) + _2750;
                        _2672 = (_2873 * _2807.x) + _2745;
                        _2673 = (_2873 * _2807.y) + _2746;
                        _2674 = (_2873 * _2807.z) + _2747;
                        if (_2752 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2745 = _2672;
                            _2746 = _2673;
                            _2747 = _2674;
                            _2748 = _2675;
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2752;
                        }
                    }
                    frontier_phi_71_pred = _2677;
                    frontier_phi_71_pred_1 = _2676;
                    frontier_phi_71_pred_2 = _2675;
                    frontier_phi_71_pred_3 = _2674;
                    frontier_phi_71_pred_4 = _2673;
                    frontier_phi_71_pred_5 = _2672;
                }
                _2451 = frontier_phi_71_pred;
                _2449 = frontier_phi_71_pred_1;
                _2447 = frontier_phi_71_pred_2;
                _2445 = frontier_phi_71_pred_3;
                _2443 = frontier_phi_71_pred_4;
                _2441 = frontier_phi_71_pred_5;
                uint _2607 = _2606 + 1u;
                if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2600 = _2441;
                    _2601 = _2443;
                    _2602 = _2445;
                    _2603 = _2447;
                    _2604 = _2449;
                    _2605 = _2451;
                    _2606 = _2607;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
            _2448 = _2449;
            _2450 = _2451;
        }
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.z;
        uint _2457 = (_2455 >> 8u) & 15u;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        if (((4294967295u << _2457) & _2322) == 0u)
        {
            _2571 = _2440;
            _2573 = _2442;
            _2575 = _2444;
            _2577 = _2446;
            _2579 = _2448;
            _2581 = _2450;
        }
        else
        {
            float _2596 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2457 < ((_2455 >> 12u) & 15u))
            {
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2728 = _2440;
                float _2729 = _2442;
                float _2730 = _2444;
                float _2731 = _2446;
                float _2732 = _2448;
                float _2733 = _2450;
                uint _2734 = _2457;
                uint _2743;
                bool _2744;
                for (;;)
                {
                    _2743 = texelFetch(g_lightClassification, int((((_2316 << 5u) + (_2302 << 9u)) + (_2734 << 2u)) >> 2u)).x;
                    _2744 = _2743 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2744)
                    {
                        frontier_phi_82_pred = _2733;
                        frontier_phi_82_pred_1 = _2732;
                        frontier_phi_82_pred_2 = _2731;
                        frontier_phi_82_pred_3 = _2730;
                        frontier_phi_82_pred_4 = _2729;
                        frontier_phi_82_pred_5 = _2728;
                    }
                    else
                    {
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _2900 = _2728;
                        float _2901 = _2729;
                        float _2902 = _2730;
                        float _2903 = _2731;
                        float _2904 = _2732;
                        float _2905 = _2733;
                        uint _2906 = _2743;
                        uint _2907;
                        vec4 _2932;
                        float _2933;
                        vec4 _2948;
                        vec3 _2960;
                        vec4 _2976;
                        vec4 _2992;
                        float _3039;
                        bool _3040;
                        for (;;)
                        {
                            uint _2917 = ((_2734 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2906));
                            _2907 = (_2906 + 4294967295u) & _2906;
                            uint _2919 = _2917 * 40u;
                            _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            _2933 = _2932.w;
                            uint _2935 = (_2917 * 40u) + 4u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2950 = (_2917 * 40u) + 8u;
                            _2960 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x));
                            uint _2963 = (_2917 * 40u) + 16u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2979 = (_2917 * 40u) + 20u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2995 = (_2917 * 40u) + 24u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            uint _3014 = (_2917 * 40u) + 28u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3039 = fma(_1509, _3027.z, fma(_1508, _3027.y, _3027.x * _1507)) + _3027.w;
                            _3040 = !((fma(_1509, _3008.z, fma(_1508, _3008.y, _3008.x * _1507)) + _3008.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3040)
                            {
                                float _3067 = _2932.x - _1507;
                                float _3068 = _2932.y - _1508;
                                float _3069 = _2932.z - _1509;
                                float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                                float _3073 = inversesqrt(_3070);
                                float _3074 = _3073 * _3067;
                                float _3075 = _3073 * _3068;
                                float _3076 = _3073 * _3069;
                                float _3080 = 1.0 - (_3070 / (_2933 * _2933));
                                float _4082 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3085 = sqrt(_3070) * _2948.w;
                                float _3087 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                                float _3088 = _3087 * _3087;
                                float _3089 = 1.0 - _3088;
                                float _3091 = (_3089 * dot(vec3(_3074, _3075, _3076), vec3(_388, _391, _394))) + _3088;
                                float _3094 = _3085 * _3085;
                                float _3098 = (fma(_1509, _2976.z, fma(_1508, _2976.y, _2976.x * _1507)) + _2976.w) / _3039;
                                float _3099 = (fma(_1509, _2992.z, fma(_1508, _2992.y, _2992.x * _1507)) + _2992.w) / _3039;
                                float _3103 = 1.0 - dot(vec2(_3098, _3099), vec2(_3098, _3099));
                                float _4098 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3105 = _3104 * (((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3081) / ((_3094 * 0.699999988079071044921875) + 1.0));
                                float _3115 = dot(vec3(_388, _391, _394), vec3((-0.0) - (_1507 * _2596), (-0.0) - (_1508 * _2596), (-0.0) - (_1509 * _2596)));
                                float _4109 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3123 = (_3089 * dot(vec3(_388, _391, _394), vec3(_3074, _3075, _3076))) + _3088;
                                float _4120 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3128 = (0.5 / (((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) + 9.9999999392252902907785028219223e-09) + _3124)) * _3124;
                                float _4131 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3135 = (_3104 * _3081) * (((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 3.1415927410125732421875) / ((_3094 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3105 * _2948.z;
                                frontier_phi_88_pred_1 = _3105 * _2948.y;
                                frontier_phi_88_pred_2 = _3105 * _2948.x;
                                frontier_phi_88_pred_3 = _3135 * _2960.z;
                                frontier_phi_88_pred_4 = _3135 * _2960.y;
                                frontier_phi_88_pred_5 = _3135 * _2960.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3144 = frontier_phi_88_pred;
                            _3143 = frontier_phi_88_pred_1;
                            _3142 = frontier_phi_88_pred_2;
                            _3141 = frontier_phi_88_pred_3;
                            _3140 = frontier_phi_88_pred_4;
                            _3139 = frontier_phi_88_pred_5;
                            _2890 = _3142 + _2903;
                            _2891 = _3143 + _2904;
                            _2892 = _3144 + _2905;
                            _2887 = _3139 + _2900;
                            _2888 = _3140 + _2901;
                            _2889 = _3141 + _2902;
                            if (_2907 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2907;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2892;
                        frontier_phi_82_pred_1 = _2891;
                        frontier_phi_82_pred_2 = _2890;
                        frontier_phi_82_pred_3 = _2889;
                        frontier_phi_82_pred_4 = _2888;
                        frontier_phi_82_pred_5 = _2887;
                    }
                    _2582 = frontier_phi_82_pred;
                    _2580 = frontier_phi_82_pred_1;
                    _2578 = frontier_phi_82_pred_2;
                    _2576 = frontier_phi_82_pred_3;
                    _2574 = frontier_phi_82_pred_4;
                    _2572 = frontier_phi_82_pred_5;
                    uint _2735 = _2734 + 1u;
                    if (_2735 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2728 = _2572;
                        _2729 = _2574;
                        _2730 = _2576;
                        _2731 = _2578;
                        _2732 = _2580;
                        _2733 = _2582;
                        _2734 = _2735;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2578;
                frontier_phi_63_64_ladder_1 = _2582;
                frontier_phi_63_64_ladder_2 = _2580;
                frontier_phi_63_64_ladder_3 = _2576;
                frontier_phi_63_64_ladder_4 = _2574;
                frontier_phi_63_64_ladder_5 = _2572;
            }
            else
            {
                frontier_phi_63_64_ladder = _2446;
                frontier_phi_63_64_ladder_1 = _2450;
                frontier_phi_63_64_ladder_2 = _2448;
                frontier_phi_63_64_ladder_3 = _2444;
                frontier_phi_63_64_ladder_4 = _2442;
                frontier_phi_63_64_ladder_5 = _2440;
            }
            _2571 = frontier_phi_63_64_ladder_5;
            _2573 = frontier_phi_63_64_ladder_4;
            _2575 = frontier_phi_63_64_ladder_3;
            _2577 = frontier_phi_63_64_ladder;
            _2579 = frontier_phi_63_64_ladder_2;
            _2581 = frontier_phi_63_64_ladder_1;
        }
        float _2586 = isnan(1.0) ? _432 : (isnan(_432) ? 1.0 : min(_432, 1.0));
        _2335 = (_2586 * _2577) + _1974;
        _2337 = (_2586 * _2579) + _1976;
        _2339 = (_2586 * _2581) + _1978;
        _2341 = ((_2571 * 0.039999999105930328369140625) * _2586) + _2216;
        _2343 = ((_2573 * 0.039999999105930328369140625) * _2586) + _2218;
        _2345 = ((_2575 * 0.039999999105930328369140625) * _2586) + _2220;
    }
    else
    {
        _2335 = _1974;
        _2337 = _1976;
        _2339 = _1978;
        _2341 = _2216;
        _2343 = _2218;
        _2345 = _2220;
    }
    uint _2351 = _408 + uint(cbMatDynParam._m0[0u].w);
    float _2360 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _239.x) * _262) * cbInstanceData._m0[_2351].x;
    float _2364 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _239.y) * _262) * cbInstanceData._m0[_2351].y;
    float _2368 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _239.z) * _262) * cbInstanceData._m0[_2351].z;
    float _4147 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _4158 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _4169 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _2385 = (((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2335 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _432))) + ((_2341 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + _2360;
    float _2387 = (_2364 + ((_2343 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2337 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _432)));
    float _2389 = (_2368 + ((_2345 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1242)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2339 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _432)));
    float _2390 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2391 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2392 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2398 = cbMtdParam._m0[2u].x * _2360;
    float _2399 = cbMtdParam._m0[2u].y * _2364;
    float _2400 = cbMtdParam._m0[2u].z * _2368;
    float _4195 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2402 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    uint _2403 = _407 + 6u;
    float _2411 = _367 / cbSceneParam._m0[86u].x;
    float _2412 = _368 / cbSceneParam._m0[86u].y;
    vec4 _2426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, (log2((isnan(cbSceneParam._m0[77u].w) ? _288 : (isnan(_288) ? cbSceneParam._m0[77u].w : min(_288, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2428 = _2426.x;
    float _2429 = _2426.y;
    float _2430 = _2426.z;
    float _2431 = _2426.w;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_288 > cbSceneParam._m0[78u].w)
    {
        float _2465 = isnan(_288) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _288 : min(cbSceneParam._m0[80u].w, _288));
        float _2466 = _2465 / _288;
        float _2477 = _2466 * _339;
        float _2478 = _340 * _2466;
        float _2479 = (-0.0) - _2478;
        float _2481 = _2466 * _341;
        float _2483 = (cbSceneParam._m0[77u].w * _2479) / _2465;
        float _2484 = _2483 + cbSceneParam._m0[79u].w;
        float _2485 = cbSceneParam._m0[79u].w - _2478;
        float _2491 = sqrt(((_2477 * _2477) + (_2478 * _2478)) + (_2481 * _2481));
        float _2494 = (1.0 - (cbSceneParam._m0[77u].w / _2465)) * _2491;
        float _2499 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2501 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2685;
        if (abs((_2479 - _2483) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2685 = ((((_2484 > 0.0) ? exp2(_2499 * _2484) : (2.0 - exp2(_2501 * _2484))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2494;
        }
        else
        {
            float _2629 = 1.0 / cbSceneParam._m0[80u].x;
            float _2630 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : max(_2484, _2485));
            float _2631 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : min(_2484, _2485));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            _2685 = ((abs(_2491 / _2479) * cbSceneParam._m0[80u].y) * ((((_2640 - _2641) * 2.0) - ((exp2(_2499 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0)))) - exp2(_2499 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))))) * _2629)) - ((exp2(_2501 * _2640) - exp2(_2501 * _2641)) * _2629))) + (_2494 * cbSceneParam._m0[80u].z);
        }
        vec4 _2687 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, 1.0), 0.0);
        float _2696 = exp2((_2685 * (-1.44269502162933349609375)) * (1.0 - _2687.w));
        float _2697 = log2(_2696);
        float _2713 = log2(_2431);
        _2503 = (exp2(_2713 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].x)) * _2687.x) / cbSceneParam._m0[78u].x)) + _2428;
        _2505 = (exp2(_2713 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].y)) * _2687.y) / cbSceneParam._m0[78u].y)) + _2429;
        _2507 = (exp2(_2713 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2697 * cbSceneParam._m0[78u].z)) * _2687.z) / cbSceneParam._m0[78u].z)) + _2430;
        _2509 = _2696 * _2431;
    }
    else
    {
        _2503 = _2428;
        _2505 = _2429;
        _2507 = _2430;
        _2509 = _2431;
    }
    bool _2723;
    vec4 _2519;
    vec4 _2541;
    float _2543;
    float _2547;
    float _2548;
    float _2549;
    float _2552;
    float _2555;
    float _2558;
    float _2559;
    bool _2570;
    for (;;)
    {
        _2519 = cbMatDynParam._m0[0u];
        float _2521 = roundEven(_2519.y);
        bool _2522 = _2521 == 3.0;
        float _2523 = log2(_2509);
        float _2527 = exp2(_2523 * cbSceneParam._m0[78u].x);
        float _2528 = exp2(_2523 * cbSceneParam._m0[78u].y);
        float _2529 = exp2(_2523 * cbSceneParam._m0[78u].z);
        float _2530 = _2527 * _2390;
        float _2531 = _2528 * _2391;
        float _2532 = _2529 * _2392;
        float _2539 = _355 + (-0.5);
        _2541 = cbMtdParam._m0[1u];
        _2543 = _2541.y * _2539;
        float _2546 = (_2521 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2547 = _2546 * (_2522 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2503)));
        _2548 = _2546 * (_2522 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2505)));
        _2549 = _2546 * (_2522 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2507)));
        _2552 = ((_2398 * _2402) * _2527) * _2546;
        _2555 = ((_2399 * _2402) * _2528) * _2546;
        _2558 = ((_2400 * _2402) * _2529) * _2546;
        _2559 = _2539 * 0.999000012874603271484375;
        _2570 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2570)
        {
            if ((cbInstanceData._m0[_407 + 7u].x + _2559) < 0.5)
            {
                _2723 = true;
                break;
            }
        }
        uint _2664 = _408 + uint(_2519.w);
        if ((cbInstanceData._m0[_2664].w < 1.0) && ((cbInstanceData._m0[_2664].w + _2559) < 0.5))
        {
            _2723 = true;
            break;
        }
        if ((_2543 + 1.0) < _2541.x)
        {
            _2723 = true;
            break;
        }
        _2723 = false;
        break;
    }
    float _2878;
    if (_2723)
    {
        discard_state = true;
        _2878 = 0.0;
    }
    else
    {
        _2878 = cbInstanceData._m0[_2403].w;
    }
    SV_Target.x = _2547;
    SV_Target.y = _2548;
    SV_Target.z = _2549;
    SV_Target.w = _2878;
    SV_Target_1.x = _2552;
    SV_Target_1.y = _2555;
    SV_Target_1.z = _2558;
    SV_Target_1.w = cbInstanceData._m0[_2403].w;
    discard_exit();
}


