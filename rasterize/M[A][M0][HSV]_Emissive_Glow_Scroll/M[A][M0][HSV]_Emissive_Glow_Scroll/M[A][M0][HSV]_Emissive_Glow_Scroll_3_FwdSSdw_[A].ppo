#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _802;
float _3033;
float _3034;
float _3035;
float _3036;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _237 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _250 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3045 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _252 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    float _260 = (((_252 * _252) * (3.0 - (_252 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _264 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _265 = _264 * _171;
    float _266 = _264 * _172;
    float _267 = _264 * _173;
    float _3056 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3067 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3078 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _286 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _327 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _337 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _327);
    float _338 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _327);
    float _339 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _327);
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _344 = _337 * _343;
    float _345 = _338 * _343;
    float _346 = _339 * _343;
    vec4 _351 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _353 = _351.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _481 = sqrt(((_337 * _337) + (_338 * _338)) + (_339 * _339));
        float _487 = (cbMatDynParam._m0[5u].x * _481) + cbMatDynParam._m0[5u].y;
        float _3089 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
        float _488 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _492 = (cbMatDynParam._m0[5u].z * _481) + cbMatDynParam._m0[5u].w;
        float _3100 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) - _488)) + _488) < ((_353 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _365 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _366 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _386 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _389 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _392 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _405 = uint(roundEven(NORMAL.w)) * 13u;
    uint _406 = _405 + 9u;
    uint _407 = _406 + uint(cbMatDynParam._m0[0u].w);
    float _413 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0)))) * cbInstanceData._m0[_407].x;
    float _414 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0)))) * cbInstanceData._m0[_407].y;
    float _415 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0)))) * cbInstanceData._m0[_407].z;
    float _3111 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
    float _3122 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
    float _3133 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
    vec4 _427 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _365, cbSceneParam._m0[86u].y * _366));
    float _430 = _427.x * TEXCOORD.z;
    float _431 = dot(vec3(_265, _266, _267), vec3(_344, _345, _346));
    float _434 = _431 * 2.0;
    float _438 = (_434 * _265) - _344;
    float _439 = (_434 * _266) - _345;
    float _440 = (_434 * _267) - _346;
    float _462 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _466 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _470 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _801;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _526 = fma(_470, cbModelParam._m0[26u].z, fma(_466, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _462));
        float _530 = fma(_470, cbModelParam._m0[27u].z, fma(_466, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _462));
        float _534 = fma(_470, cbModelParam._m0[28u].z, fma(_466, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _462));
        float _559 = _462 + _265;
        float _560 = _466 + _266;
        float _561 = _470 + _267;
        float _571 = fma(_561, cbModelParam._m0[26u].z, fma(_560, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _559)) - _526;
        float _572 = fma(_561, cbModelParam._m0[27u].z, fma(_560, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _559)) - _530;
        float _573 = fma(_561, cbModelParam._m0[28u].z, fma(_560, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _559)) - _534;
        float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
        float _590 = ((_577 * _571) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_526 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_577 * _572) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_530 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_577 * _573) / cbModelParam._m0[34u].z) + ((((((_534 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        float _629 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _630 = _629 * (_595.x + (-0.5));
        float _631 = _629 * (_595.y + (-0.5));
        float _632 = _629 * (_595.z + (-0.5));
        float _639 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_602.x + (-0.5));
        float _641 = _639 * (_602.y + (-0.5));
        float _642 = _639 * (_602.z + (-0.5));
        float _649 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_609.x + (-0.5));
        float _651 = _649 * (_609.y + (-0.5));
        float _652 = _649 * (_609.z + (-0.5));
        float _659 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_616.x + (-0.5));
        float _661 = _659 * (_616.y + (-0.5));
        float _662 = _659 * (_616.z + (-0.5));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = _630 * 0.5;
        float _667 = _640 * 0.5;
        float _668 = _650 * 0.5;
        float _669 = dot(vec3(_666, _667, _668), vec3(_666, _667, _668));
        float _674 = (_669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_669);
        float _683 = (dot(vec3(_265, _266, _267), vec3(_674 * _666, _674 * _667, _674 * _668)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _693 = sqrt(((_667 * _667) + (_666 * _666)) + (_668 * _668)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _695 = _694 * 2.0;
        float _699 = (1.0 - _694) / (_694 + 1.0);
        float _3181 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _709 = ((((1.0 - _700) * (_695 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_695 + 1.0))) + _700) * _663;
        float _710 = _631 * 0.5;
        float _711 = _641 * 0.5;
        float _712 = _651 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _726 = (dot(vec3(_265, _266, _267), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3192 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _735 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3203 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3214 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0))) * (_737 + 1.0))) + _742) * _664;
        float _752 = _632 * 0.5;
        float _753 = _642 * 0.5;
        float _754 = _652 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_265, _266, _267), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3225 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3236 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3247 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_779 + 1.0))) + _784) * _665;
        _801 = _632;
        _803 = _631;
        _804 = _630;
        _805 = _642;
        _806 = _641;
        _807 = _640;
        _808 = _652;
        _809 = _651;
        _810 = _650;
        _811 = _665;
        _812 = _664;
        _813 = _663;
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
    }
    else
    {
        _801 = _802;
        _803 = _802;
        _804 = _802;
        _805 = _802;
        _806 = _802;
        _807 = _802;
        _808 = _802;
        _809 = _802;
        _810 = _802;
        _811 = _802;
        _812 = _802;
        _813 = _802;
        _814 = 0.0;
        _815 = 0.0;
        _816 = 0.0;
    }
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _845 = fma(_470, cbModelParam._m0[30u].z, fma(_466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _462));
        float _849 = fma(_470, cbModelParam._m0[31u].z, fma(_466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _462));
        float _853 = fma(_470, cbModelParam._m0[32u].z, fma(_466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _462));
        float _876 = _462 + _265;
        float _877 = _466 + _266;
        float _878 = _470 + _267;
        float _888 = fma(_878, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876)) - _845;
        float _889 = fma(_878, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876)) - _849;
        float _890 = fma(_878, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876)) - _853;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_845 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_849 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[35u].z) + ((((((_853 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _944 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_911.x + (-0.5));
        float _946 = _944 * (_911.y + (-0.5));
        float _947 = _944 * (_911.z + (-0.5));
        float _954 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_918.x + (-0.5));
        float _956 = _954 * (_918.y + (-0.5));
        float _957 = _954 * (_918.z + (-0.5));
        float _964 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_925.x + (-0.5));
        float _966 = _964 * (_925.y + (-0.5));
        float _967 = _964 * (_925.z + (-0.5));
        float _974 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_932.x + (-0.5));
        float _976 = _974 * (_932.y + (-0.5));
        float _977 = _974 * (_932.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_265, _266, _267), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3288 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3299 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3310 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))) * (_1008 + 1.0))) + _1013) * _978;
        float _1023 = _946 * 0.5;
        float _1024 = _956 * 0.5;
        float _1025 = _966 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_265, _266, _267), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3343 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_1050 + 1.0))) + _1055) * _979;
        float _1065 = _947 * 0.5;
        float _1066 = _957 * 0.5;
        float _1067 = _967 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_265, _266, _267), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3376 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_1092 + 1.0))) + _1097) * _980;
        _1114 = _947;
        _1115 = _946;
        _1116 = _945;
        _1117 = _957;
        _1118 = _956;
        _1119 = _955;
        _1120 = _967;
        _1121 = _966;
        _1122 = _965;
        _1123 = _980;
        _1124 = _979;
        _1125 = _978;
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1127 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1128 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _802;
        _1115 = _802;
        _1116 = _802;
        _1117 = _802;
        _1118 = _802;
        _1119 = _802;
        _1120 = _802;
        _1121 = _802;
        _1122 = _802;
        _1123 = _802;
        _1124 = _802;
        _1125 = _802;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _814)) + _814;
    float _1139 = (cbModelParam._m0[1u].x * (_1127 - _815)) + _815;
    float _1140 = (cbModelParam._m0[1u].x * (_1128 - _816)) + _816;
    float _1161 = fma(_1140, cbSceneParam._m0[89u].z, fma(_1139, cbSceneParam._m0[89u].y, _1138 * cbSceneParam._m0[89u].x));
    float _1164 = fma(_1140, cbSceneParam._m0[90u].z, fma(_1139, cbSceneParam._m0[90u].y, _1138 * cbSceneParam._m0[90u].x));
    float _1167 = fma(_1140, cbSceneParam._m0[91u].z, fma(_1139, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1138));
    float _1182 = _438 * 0.5;
    float _1183 = _439 * 0.5;
    float _1184 = _440 * 0.5;
    float _1185 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1116, _1119, _1122, _1125));
    float _1188 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1115, _1118, _1121, _1124));
    float _1191 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1225;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1198 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_801, _805, _808, _811));
        float _1202 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_803, _806, _809, _812));
        float _1206 = dot(vec4(_1182, _1183, _1184, 1.0), vec4(_804, _807, _810, _813));
        float _1213 = dot(vec4(cbModelParam._m0[39u]), vec4(_1182, _1183, _1184, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1213) ? 0.0 : (isnan(0.0) ? _1213 : max(0.0, _1213))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1236;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1227 = dot(vec4(cbModelParam._m0[40u]), vec4(_1182, _1183, _1184, 1.0));
        _1236 = dot(vec3(isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1227) ? 0.0 : (isnan(0.0) ? _1227 : max(0.0, _1227))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1236 = 1.0;
    }
    float _1240 = (_1236 * cbModelParam._m0[1u].x) + (_1225 * (1.0 - cbModelParam._m0[1u].x));
    float _1249 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1297 = fma(_470, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462)) + cbModelParam._m0[13u].w;
        float _1301 = fma(_470, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462)) + cbModelParam._m0[14u].w;
        float _1305 = fma(_470, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462)) + cbModelParam._m0[15u].w;
        float _1308 = fma(_440, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _438));
        float _1311 = fma(_440, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _438));
        float _1314 = fma(_440, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _438));
        float _1340;
        if (_1308 > 0.0)
        {
            _1340 = abs((1.0 - _1297) / _1308);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1297 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1340 = frontier_phi_17_15_ladder;
        }
        float _1566;
        if (_1311 > 0.0)
        {
            _1566 = abs((1.0 - _1301) / _1311);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1301 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1566 = frontier_phi_26_22_ladder;
        }
        float _1758;
        if (_1314 > 0.0)
        {
            _1758 = abs((1.0 - _1305) / _1314);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1305 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1758 = frontier_phi_38_33_ladder;
        }
        float _1760 = isnan(_1566) ? _1340 : (isnan(_1340) ? _1566 : min(_1340, _1566));
        float _1761 = isnan(_1758) ? _1760 : (isnan(_1760) ? _1758 : min(_1760, _1758));
        float _1765 = (_1761 * _1308) + _1297;
        float _1766 = (_1761 * _1311) + _1301;
        float _1767 = (_1761 * _1314) + _1305;
        float _1768 = _1761 * 9.9999997473787516355514526367188e-05;
        float _1770 = (-1.0) - _1768;
        float _1772 = _1768 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1767 > _1772) || ((_1767 < _1770) || ((_1766 > _1772) || ((_1766 < _1770) || ((_1765 < _1770) || (_1765 > _1772))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1767, cbModelParam._m0[9u].z, fma(_1766, cbModelParam._m0[9u].y, _1765 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1767, cbModelParam._m0[10u].z, fma(_1766, cbModelParam._m0[10u].y, _1765 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1767, cbModelParam._m0[11u].z, fma(_1766, cbModelParam._m0[11u].y, _1765 * cbModelParam._m0[11u].x))), _1249);
            frontier_phi_16_38_ladder = _1864.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1864.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1864.x * cbModelParam._m0[1u].y;
        }
        _1330 = frontier_phi_16_38_ladder_2;
        _1332 = frontier_phi_16_38_ladder_1;
        _1334 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_438, _439, _440), _1249);
        _1330 = _1318.x * cbModelParam._m0[1u].y;
        _1332 = _1318.y * cbModelParam._m0[1u].y;
        _1334 = _1318.z * cbModelParam._m0[1u].y;
    }
    float _1337 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1429;
    float _1431;
    float _1433;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1393 = fma(_470, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462)) + cbModelParam._m0[21u].w;
        float _1397 = fma(_470, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462)) + cbModelParam._m0[22u].w;
        float _1401 = fma(_470, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462)) + cbModelParam._m0[23u].w;
        float _1404 = fma(_440, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _438));
        float _1407 = fma(_440, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _438));
        float _1410 = fma(_440, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _438));
        float _1571;
        if (_1404 > 0.0)
        {
            _1571 = abs((1.0 - _1393) / _1404);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1393 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1571 = frontier_phi_28_24_ladder;
        }
        float _1785;
        if (_1407 > 0.0)
        {
            _1785 = abs((1.0 - _1397) / _1407);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1397 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1785 = frontier_phi_40_35_ladder;
        }
        float _1936;
        if (_1410 > 0.0)
        {
            _1936 = abs((1.0 - _1401) / _1410);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1401 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1936 = frontier_phi_49_46_ladder;
        }
        float _1938 = isnan(_1785) ? _1571 : (isnan(_1571) ? _1785 : min(_1571, _1785));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1404) + _1393;
        float _1944 = (_1939 * _1407) + _1397;
        float _1945 = (_1939 * _1410) + _1401;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1947 = (-1.0) - _1946;
        float _1949 = _1946 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1945 > _1949) || ((_1945 < _1947) || ((_1944 > _1949) || ((_1944 < _1947) || ((_1943 < _1947) || (_1943 > _1949))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1945, cbModelParam._m0[17u].z, fma(_1944, cbModelParam._m0[17u].y, _1943 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1945, cbModelParam._m0[18u].z, fma(_1944, cbModelParam._m0[18u].y, _1943 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1945, cbModelParam._m0[19u].z, fma(_1944, cbModelParam._m0[19u].y, _1943 * cbModelParam._m0[19u].x))), _1337);
            frontier_phi_25_49_ladder = _2182.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2182.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2182.x * cbModelParam._m0[1u].z;
        }
        _1429 = frontier_phi_25_49_ladder_2;
        _1431 = frontier_phi_25_49_ladder_1;
        _1433 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1413 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_438, _439, _440), _1337);
        _1429 = _1413.x * cbModelParam._m0[1u].z;
        _1431 = _1413.y * cbModelParam._m0[1u].z;
        _1433 = _1413.z * cbModelParam._m0[1u].z;
    }
    float _1445 = _430 * 0.01200000010430812835693359375;
    float _1447 = _1445 * ((cbModelParam._m0[1u].w * (_1429 - _1330)) + _1330);
    float _1448 = _1445 * ((cbModelParam._m0[1u].w * (_1431 - _1332)) + _1332);
    float _1449 = _1445 * ((cbModelParam._m0[1u].w * (_1433 - _1334)) + _1334);
    float _1452 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, _1447 * cbSceneParam._m0[91u].x));
    vec4 _1466 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_365, _366));
    float _1468 = _1466.w;
    float _1480 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1468);
    float _1481 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1468);
    float _1482 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1468);
    uvec4 _1486 = floatBitsToUint(cbInstanceData._m0[_405 + 5u]);
    uint _1488 = _1486.x * 14u;
    uint _1489 = _1488 + 13u;
    float _1496 = _430 + (-1.0);
    float _1501 = (cbLight._m0[_1489].x * _1496) + 1.0;
    float _1502 = (cbLight._m0[_1489].y * _1496) + 1.0;
    float _1503 = (cbLight._m0[_1489].z * _1496) + 1.0;
    float _1504 = (cbLight._m0[_1489].w * _1496) + 1.0;
    uint _1505 = _1488 + 5u;
    float _1511 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
    uint _1515 = _1488 + 4u;
    float _1525 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
    uint _1529 = _1488 | 1u;
    float _1540 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_265, _266, _267));
    float _1543 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_265, _266, _267));
    float _3512 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _3523 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _1548 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.3183098733425140380859375;
    float _1550 = (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * 0.3183098733425140380859375;
    float _1557 = ((cbLight._m0[_1505].x * _1511) * _1550) + (((cbLight._m0[_1515].x * _1480) * _1525) * _1548);
    float _1558 = ((_1511 * cbLight._m0[_1505].y) * _1550) + (((cbLight._m0[_1515].y * _1481) * _1525) * _1548);
    float _1559 = ((_1511 * cbLight._m0[_1505].z) * _1550) + (((cbLight._m0[_1515].z * _1482) * _1525) * _1548);
    uvec4 _1563 = floatBitsToUint(cbLight._m0[_1488 + 12u]);
    bool _1565 = _1563.x == 0u;
    float _1576;
    float _1578;
    float _1580;
    if (_1565)
    {
        _1576 = _1557;
        _1578 = _1558;
        _1580 = _1559;
    }
    else
    {
        uint _1584 = _1488 + 6u;
        float _1600 = (dot(vec3(cbLight._m0[_1488 + 2u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1601 = _1600 * _1600;
        float _3534 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1603 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1576 = (((cbLight._m0[_1584].x * 0.3183098733425140380859375) * _1602) * _1603) + _1557;
        _1578 = (((cbLight._m0[_1584].y * 0.3183098733425140380859375) * _1602) * _1603) + _1558;
        _1580 = (((cbLight._m0[_1584].z * 0.3183098733425140380859375) * _1602) * _1603) + _1559;
    }
    bool _1583 = _1563.y == 0u;
    float _1621;
    float _1623;
    float _1625;
    if (_1583)
    {
        _1621 = _1576;
        _1623 = _1578;
        _1625 = _1580;
    }
    else
    {
        uint _1729 = _1488 + 7u;
        float _1745 = (dot(vec3(cbLight._m0[_1488 + 3u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3550 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1748 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _1621 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1576;
        _1623 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1578;
        _1625 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1580;
    }
    uint _1627 = _1488 + 8u;
    float _1633 = cbLight._m0[_1488].x + _344;
    float _1634 = cbLight._m0[_1488].y + _345;
    float _1635 = cbLight._m0[_1488].z + _346;
    float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
    float _1643 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1488].xyz));
    float _3566 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1646 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _1647 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _1648 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_1633 * _1639, _1634 * _1639, _1635 * _1639));
    float _3588 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1659 = (exp2(log2(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1665 = (0.5 / ((_1646 + 9.9999999392252902907785028219223e-09) + _1647)) * _1646;
    float _3599 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1667 = (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.31831014156341552734375;
    uint _1681 = _1488 + 9u;
    float _1687 = cbLight._m0[_1529].x + _344;
    float _1688 = cbLight._m0[_1529].y + _345;
    float _1689 = cbLight._m0[_1529].z + _346;
    float _1693 = inversesqrt(dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689)));
    float _1697 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1529].xyz));
    float _3610 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_1687 * _1693, _1688 * _1693, _1689 * _1693));
    float _3621 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1710 = (exp2(log2(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1714 = (0.5 / ((_1700 + 9.9999999392252902907785028219223e-09) + _1647)) * _1700;
    float _3632 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.31831014156341552734375;
    float _1726 = (((_1710 * cbLight._m0[_1681].x) * _1716) * _1511) + ((((cbLight._m0[_1627].x * _1480) * _1659) * _1667) * _1525);
    float _1727 = (((_1710 * cbLight._m0[_1681].y) * _1716) * _1511) + ((((cbLight._m0[_1627].y * _1481) * _1659) * _1667) * _1525);
    float _1728 = (((_1710 * cbLight._m0[_1681].z) * _1716) * _1511) + ((((cbLight._m0[_1627].z * _1482) * _1659) * _1667) * _1525);
    float _1790;
    float _1792;
    float _1794;
    if (_1565)
    {
        _1790 = _1726;
        _1792 = _1727;
        _1794 = _1728;
    }
    else
    {
        uint _1796 = _1488 + 10u;
        uint _1802 = _1488 + 2u;
        float _1808 = cbLight._m0[_1802].x + _344;
        float _1809 = cbLight._m0[_1802].y + _345;
        float _1810 = cbLight._m0[_1802].z + _346;
        float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
        float _1818 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1802].xyz));
        float _3643 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1821 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1822 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_1808 * _1814, _1809 * _1814, _1810 * _1814));
        float _3654 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1835 = (0.5 / ((_1821 + 9.9999999392252902907785028219223e-09) + _1647)) * _1821;
        float _3665 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1837 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.31831014156341552734375;
        float _1838 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1790 = (((_1831 * cbLight._m0[_1796].x) * _1837) * _1838) + _1726;
        _1792 = (((_1831 * cbLight._m0[_1796].y) * _1837) * _1838) + _1727;
        _1794 = (((_1831 * cbLight._m0[_1796].z) * _1837) * _1838) + _1728;
    }
    float _1873;
    float _1875;
    float _1877;
    if (_1583)
    {
        _1873 = _1790;
        _1875 = _1792;
        _1877 = _1794;
    }
    else
    {
        uint _1884 = _1488 + 11u;
        uint _1890 = _1488 + 3u;
        float _1896 = cbLight._m0[_1890].x + _344;
        float _1897 = cbLight._m0[_1890].y + _345;
        float _1898 = cbLight._m0[_1890].z + _346;
        float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
        float _1906 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1890].xyz));
        float _3681 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1909 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1910 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_1896 * _1902, _1897 * _1902, _1898 * _1902));
        float _3692 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1923 = (0.5 / ((_1909 + 9.9999999392252902907785028219223e-09) + _1647)) * _1909;
        float _3703 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1925 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.31831014156341552734375;
        float _1926 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _1873 = (((_1919 * cbLight._m0[_1884].x) * _1925) * _1926) + _1790;
        _1875 = (((_1919 * cbLight._m0[_1884].y) * _1925) * _1926) + _1792;
        _1877 = (((_1919 * cbLight._m0[_1884].z) * _1925) * _1926) + _1794;
    }
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    if (_1486.y == 0u)
    {
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2001;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2001;
        float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2001;
        uvec4 _2016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2017 = _2016.x;
        uint _2028 = uint((float(_2016.y) * floor(float(uint(cbSceneParam._m0[85u].y * _366) / _2017))) + floor(float(uint(cbSceneParam._m0[85u].x * _365) / _2017)));
        float _2038 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2039 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        uint _2042 = uint(isnan(14.0) ? _2039 : (isnan(_2039) ? 14.0 : min(_2039, 14.0)));
        uvec4 _2047 = texelFetch(g_lightClusterGridBuffer, int(((_2042 << 2u) + (_2028 << 6u)) >> 2u));
        uint _2048 = _2047.x;
        uint _2049 = _2016.z;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        if (((((1u << ((_2049 >> 4u) & 15u)) + 4294967295u) & _2048) == 0u) || ((_2049 & 240u) == 0u))
        {
            _2187 = 0.0;
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
        }
        else
        {
            float _2188;
            float _2190;
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2347 = 0.0;
            float _2348 = 0.0;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            uint _2353 = 0u;
            uint _2362;
            bool _2363;
            for (;;)
            {
                _2362 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2353 << 2u)) >> 2u)).x;
                _2363 = _2362 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2363)
                {
                    frontier_phi_66_pred = _2347;
                    frontier_phi_66_pred_1 = _2352;
                    frontier_phi_66_pred_2 = _2351;
                    frontier_phi_66_pred_3 = _2350;
                    frontier_phi_66_pred_4 = _2349;
                    frontier_phi_66_pred_5 = _2348;
                }
                else
                {
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    uint _2498;
                    _2492 = _2347;
                    _2493 = _2348;
                    _2494 = _2349;
                    _2495 = _2350;
                    _2496 = _2351;
                    _2497 = _2352;
                    _2498 = _2362;
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    for (;;)
                    {
                        uint _2502 = uint(findLSB(_2498)) + (_2353 << 5u);
                        uint _2499 = (_2498 + 4294967295u) & _2498;
                        uint _2504 = _2502 * 48u;
                        vec4 _2518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 3u)).x));
                        uint _2524 = (_2502 * 48u) + 4u;
                        vec4 _2537 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2524)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 3u)).x));
                        uint _2543 = (_2502 * 48u) + 8u;
                        vec3 _2554 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x));
                        float _2558 = _2518.x - _2002;
                        float _2559 = _2518.y - _2003;
                        float _2560 = _2518.z - _2004;
                        float _2561 = dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560));
                        float _2564 = inversesqrt(_2561);
                        float _2573 = 1.0 - (_2561 * _2518.w);
                        float _3729 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                        float _2574 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                        float _2575 = sqrt(_2561) * _2537.w;
                        float _2578 = 1.39999997615814208984375 / (_2575 + 1.39999997615814208984375);
                        float _2579 = _2578 * _2578;
                        float _2582 = ((1.0 - _2579) * dot(vec3(_386, _389, _392), vec3(_2564 * _2558, _2564 * _2559, _2564 * _2560))) + _2579;
                        float _2585 = _2575 * _2575;
                        float _2589 = ((isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))) * _2574) / ((_2585 * 0.699999988079071044921875) + 1.0);
                        float _2593 = (-0.0) - _2002;
                        float _2594 = (-0.0) - _2003;
                        float _2595 = (-0.0) - _2004;
                        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
                        float _2603 = dot(vec3(_386, _389, _392), vec3(_2599 * _2593, _2599 * _2594, _2599 * _2595));
                        float _3745 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _3756 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2607 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
                        float _2611 = (0.5 / (((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) + 9.9999999392252902907785028219223e-09) + _2607)) * _2607;
                        float _3767 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2620 = (((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 3.1415927410125732421875) / ((_2585 * 2.1991131305694580078125) + 3.141590118408203125)) * _2574;
                        _2422 = (_2589 * _2537.x) + _2495;
                        _2423 = (_2589 * _2537.y) + _2496;
                        _2424 = (_2589 * _2537.z) + _2497;
                        _2419 = (_2620 * _2554.x) + _2492;
                        _2420 = (_2620 * _2554.y) + _2493;
                        _2421 = (_2620 * _2554.z) + _2494;
                        if (_2499 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2492 = _2419;
                            _2493 = _2420;
                            _2494 = _2421;
                            _2495 = _2422;
                            _2496 = _2423;
                            _2497 = _2424;
                            _2498 = _2499;
                        }
                    }
                    frontier_phi_66_pred = _2419;
                    frontier_phi_66_pred_1 = _2424;
                    frontier_phi_66_pred_2 = _2423;
                    frontier_phi_66_pred_3 = _2422;
                    frontier_phi_66_pred_4 = _2421;
                    frontier_phi_66_pred_5 = _2420;
                }
                _2188 = frontier_phi_66_pred;
                _2198 = frontier_phi_66_pred_1;
                _2196 = frontier_phi_66_pred_2;
                _2194 = frontier_phi_66_pred_3;
                _2192 = frontier_phi_66_pred_4;
                _2190 = frontier_phi_66_pred_5;
                uint _2354 = _2353 + 1u;
                if (_2354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2347 = _2188;
                    _2348 = _2190;
                    _2349 = _2192;
                    _2350 = _2194;
                    _2351 = _2196;
                    _2352 = _2198;
                    _2353 = _2354;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2187 = _2188;
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
        }
        uvec4 _2201 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2202 = _2201.z;
        uint _2204 = (_2202 >> 8u) & 15u;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        if (((4294967295u << _2204) & _2048) == 0u)
        {
            _2318 = _2187;
            _2320 = _2189;
            _2322 = _2191;
            _2324 = _2193;
            _2326 = _2195;
            _2328 = _2197;
        }
        else
        {
            float _2343 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2204 < ((_2202 >> 12u) & 15u))
            {
                float _2319;
                float _2321;
                float _2323;
                float _2325;
                float _2327;
                float _2329;
                float _2475 = _2187;
                float _2476 = _2189;
                float _2477 = _2191;
                float _2478 = _2193;
                float _2479 = _2195;
                float _2480 = _2197;
                uint _2481 = _2204;
                uint _2490;
                bool _2491;
                for (;;)
                {
                    _2490 = texelFetch(g_lightClassification, int((((_2042 << 5u) + (_2028 << 9u)) + (_2481 << 2u)) >> 2u)).x;
                    _2491 = _2490 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2491)
                    {
                        frontier_phi_77_pred = _2480;
                        frontier_phi_77_pred_1 = _2479;
                        frontier_phi_77_pred_2 = _2478;
                        frontier_phi_77_pred_3 = _2477;
                        frontier_phi_77_pred_4 = _2476;
                        frontier_phi_77_pred_5 = _2475;
                    }
                    else
                    {
                        float _2634;
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2647 = _2475;
                        float _2648 = _2476;
                        float _2649 = _2477;
                        float _2650 = _2478;
                        float _2651 = _2479;
                        float _2652 = _2480;
                        uint _2653 = _2490;
                        uint _2654;
                        vec4 _2679;
                        float _2680;
                        vec4 _2695;
                        vec3 _2707;
                        vec4 _2723;
                        vec4 _2739;
                        float _2786;
                        bool _2787;
                        for (;;)
                        {
                            uint _2664 = ((_2481 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2653));
                            _2654 = (_2653 + 4294967295u) & _2653;
                            uint _2666 = _2664 * 40u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            _2680 = _2679.w;
                            uint _2682 = (_2664 * 40u) + 4u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2697 = (_2664 * 40u) + 8u;
                            _2707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2697 + 2u)).x));
                            uint _2710 = (_2664 * 40u) + 16u;
                            _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            uint _2726 = (_2664 * 40u) + 20u;
                            _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            uint _2742 = (_2664 * 40u) + 24u;
                            vec4 _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            uint _2761 = (_2664 * 40u) + 28u;
                            vec4 _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            _2786 = fma(_2004, _2774.z, fma(_2003, _2774.y, _2774.x * _2002)) + _2774.w;
                            _2787 = !((fma(_2004, _2755.z, fma(_2003, _2755.y, _2755.x * _2002)) + _2755.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2787)
                            {
                                float _2814 = _2679.x - _2002;
                                float _2815 = _2679.y - _2003;
                                float _2816 = _2679.z - _2004;
                                float _2817 = dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816));
                                float _2820 = inversesqrt(_2817);
                                float _2821 = _2820 * _2814;
                                float _2822 = _2820 * _2815;
                                float _2823 = _2820 * _2816;
                                float _2827 = 1.0 - (_2817 / (_2680 * _2680));
                                float _3778 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2828 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                                float _2832 = sqrt(_2817) * _2695.w;
                                float _2834 = 1.39999997615814208984375 / (_2832 + 1.39999997615814208984375);
                                float _2835 = _2834 * _2834;
                                float _2836 = 1.0 - _2835;
                                float _2838 = (_2836 * dot(vec3(_2821, _2822, _2823), vec3(_386, _389, _392))) + _2835;
                                float _2841 = _2832 * _2832;
                                float _2845 = (fma(_2004, _2723.z, fma(_2003, _2723.y, _2723.x * _2002)) + _2723.w) / _2786;
                                float _2846 = (fma(_2004, _2739.z, fma(_2003, _2739.y, _2739.x * _2002)) + _2739.w) / _2786;
                                float _2850 = 1.0 - dot(vec2(_2845, _2846), vec2(_2845, _2846));
                                float _3794 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                                float _2851 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                                float _2852 = _2851 * (((isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))) * _2828) / ((_2841 * 0.699999988079071044921875) + 1.0));
                                float _2862 = dot(vec3(_386, _389, _392), vec3((-0.0) - (_2002 * _2343), (-0.0) - (_2003 * _2343), (-0.0) - (_2004 * _2343)));
                                float _3805 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2870 = (_2836 * dot(vec3(_386, _389, _392), vec3(_2821, _2822, _2823))) + _2835;
                                float _3816 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2871 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                                float _2875 = (0.5 / (((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) + 9.9999999392252902907785028219223e-09) + _2871)) * _2871;
                                float _3827 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2882 = (_2851 * _2828) * (((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 3.1415927410125732421875) / ((_2841 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2852 * _2695.y;
                                frontier_phi_83_pred_1 = _2852 * _2695.x;
                                frontier_phi_83_pred_2 = _2882 * _2707.z;
                                frontier_phi_83_pred_3 = _2882 * _2707.y;
                                frontier_phi_83_pred_4 = _2882 * _2707.x;
                                frontier_phi_83_pred_5 = _2852 * _2695.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2890 = frontier_phi_83_pred;
                            _2889 = frontier_phi_83_pred_1;
                            _2888 = frontier_phi_83_pred_2;
                            _2887 = frontier_phi_83_pred_3;
                            _2886 = frontier_phi_83_pred_4;
                            _2891 = frontier_phi_83_pred_5;
                            _2637 = _2889 + _2650;
                            _2638 = _2890 + _2651;
                            _2639 = _2891 + _2652;
                            _2634 = _2886 + _2647;
                            _2635 = _2887 + _2648;
                            _2636 = _2888 + _2649;
                            if (_2654 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2654;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2639;
                        frontier_phi_77_pred_1 = _2638;
                        frontier_phi_77_pred_2 = _2637;
                        frontier_phi_77_pred_3 = _2636;
                        frontier_phi_77_pred_4 = _2635;
                        frontier_phi_77_pred_5 = _2634;
                    }
                    _2329 = frontier_phi_77_pred;
                    _2327 = frontier_phi_77_pred_1;
                    _2325 = frontier_phi_77_pred_2;
                    _2323 = frontier_phi_77_pred_3;
                    _2321 = frontier_phi_77_pred_4;
                    _2319 = frontier_phi_77_pred_5;
                    uint _2482 = _2481 + 1u;
                    if (_2482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2475 = _2319;
                        _2476 = _2321;
                        _2477 = _2323;
                        _2478 = _2325;
                        _2479 = _2327;
                        _2480 = _2329;
                        _2481 = _2482;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2323;
                frontier_phi_58_59_ladder_1 = _2329;
                frontier_phi_58_59_ladder_2 = _2327;
                frontier_phi_58_59_ladder_3 = _2325;
                frontier_phi_58_59_ladder_4 = _2321;
                frontier_phi_58_59_ladder_5 = _2319;
            }
            else
            {
                frontier_phi_58_59_ladder = _2191;
                frontier_phi_58_59_ladder_1 = _2197;
                frontier_phi_58_59_ladder_2 = _2195;
                frontier_phi_58_59_ladder_3 = _2193;
                frontier_phi_58_59_ladder_4 = _2189;
                frontier_phi_58_59_ladder_5 = _2187;
            }
            _2318 = frontier_phi_58_59_ladder_5;
            _2320 = frontier_phi_58_59_ladder_4;
            _2322 = frontier_phi_58_59_ladder;
            _2324 = frontier_phi_58_59_ladder_3;
            _2326 = frontier_phi_58_59_ladder_2;
            _2328 = frontier_phi_58_59_ladder_1;
        }
        float _2333 = isnan(1.0) ? _430 : (isnan(_430) ? 1.0 : min(_430, 1.0));
        _2061 = (_2333 * _2324) + _1621;
        _2063 = (_2333 * _2326) + _1623;
        _2065 = (_2333 * _2328) + _1625;
        _2067 = ((_2318 * 0.039999999105930328369140625) * _2333) + _1873;
        _2069 = ((_2320 * 0.039999999105930328369140625) * _2333) + _1875;
        _2071 = ((_2322 * 0.039999999105930328369140625) * _2333) + _1877;
    }
    else
    {
        _2061 = _1621;
        _2063 = _1623;
        _2065 = _1625;
        _2067 = _1873;
        _2069 = _1875;
        _2071 = _1877;
    }
    uint _2077 = _406 + uint(cbMatDynParam._m0[0u].w);
    float _2086 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _237.x) * _260) * cbInstanceData._m0[_2077].x;
    float _2090 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _237.y) * _260) * cbInstanceData._m0[_2077].y;
    float _2094 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _237.z) * _260) * cbInstanceData._m0[_2077].z;
    float _3843 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3854 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3865 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _2111 = (((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2061 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _430))) + ((_2067 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1240)) * cbPerFrame._m0[3u].x)) + _2086;
    float _2113 = (_2090 + ((_2069 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1240)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2063 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _430)));
    float _2115 = (_2094 + ((_2071 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1240)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_2065 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _430)));
    float _2116 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2117 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2118 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2124 = cbMtdParam._m0[2u].x * _2086;
    float _2125 = cbMtdParam._m0[2u].y * _2090;
    float _2126 = cbMtdParam._m0[2u].z * _2094;
    float _3891 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2128 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    uint _2129 = _405 + 6u;
    float _2137 = _365 / cbSceneParam._m0[86u].x;
    float _2138 = _366 / cbSceneParam._m0[86u].y;
    vec4 _2152 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, (log2((isnan(cbSceneParam._m0[77u].w) ? _286 : (isnan(_286) ? cbSceneParam._m0[77u].w : min(_286, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2154 = _2152.x;
    float _2155 = _2152.y;
    float _2156 = _2152.z;
    float _2157 = _2152.w;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    if (_286 > cbSceneParam._m0[78u].w)
    {
        float _2212 = isnan(_286) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _286 : min(cbSceneParam._m0[80u].w, _286));
        float _2213 = _2212 / _286;
        float _2224 = _2213 * _337;
        float _2225 = _338 * _2213;
        float _2226 = (-0.0) - _2225;
        float _2228 = _2213 * _339;
        float _2230 = (cbSceneParam._m0[77u].w * _2226) / _2212;
        float _2231 = _2230 + cbSceneParam._m0[79u].w;
        float _2232 = cbSceneParam._m0[79u].w - _2225;
        float _2238 = sqrt(((_2224 * _2224) + (_2225 * _2225)) + (_2228 * _2228));
        float _2241 = (1.0 - (cbSceneParam._m0[77u].w / _2212)) * _2238;
        float _2246 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2248 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2432;
        if (abs((_2226 - _2230) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2432 = ((((_2231 > 0.0) ? exp2(_2246 * _2231) : (2.0 - exp2(_2248 * _2231))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2241;
        }
        else
        {
            float _2376 = 1.0 / cbSceneParam._m0[80u].x;
            float _2377 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : max(_2231, _2232));
            float _2378 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : min(_2231, _2232));
            float _2387 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : min(_2377, 0.0));
            float _2388 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : min(_2378, 0.0));
            _2432 = ((abs(_2238 / _2226) * cbSceneParam._m0[80u].y) * ((((_2387 - _2388) * 2.0) - ((exp2(_2246 * (isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0)))) - exp2(_2246 * (isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0))))) * _2376)) - ((exp2(_2248 * _2387) - exp2(_2248 * _2388)) * _2376))) + (_2241 * cbSceneParam._m0[80u].z);
        }
        vec4 _2434 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2137, _2138, 1.0), 0.0);
        float _2443 = exp2((_2432 * (-1.44269502162933349609375)) * (1.0 - _2434.w));
        float _2444 = log2(_2443);
        float _2460 = log2(_2157);
        _2250 = (exp2(_2460 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].x)) * _2434.x) / cbSceneParam._m0[78u].x)) + _2154;
        _2252 = (exp2(_2460 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].y)) * _2434.y) / cbSceneParam._m0[78u].y)) + _2155;
        _2254 = (exp2(_2460 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2444 * cbSceneParam._m0[78u].z)) * _2434.z) / cbSceneParam._m0[78u].z)) + _2156;
        _2256 = _2443 * _2157;
    }
    else
    {
        _2250 = _2154;
        _2252 = _2155;
        _2254 = _2156;
        _2256 = _2157;
    }
    bool _2470;
    vec4 _2266;
    vec4 _2288;
    float _2290;
    float _2294;
    float _2295;
    float _2296;
    float _2299;
    float _2302;
    float _2305;
    float _2306;
    bool _2317;
    for (;;)
    {
        _2266 = cbMatDynParam._m0[0u];
        float _2268 = roundEven(_2266.y);
        bool _2269 = _2268 == 3.0;
        float _2270 = log2(_2256);
        float _2274 = exp2(_2270 * cbSceneParam._m0[78u].x);
        float _2275 = exp2(_2270 * cbSceneParam._m0[78u].y);
        float _2276 = exp2(_2270 * cbSceneParam._m0[78u].z);
        float _2277 = _2274 * _2116;
        float _2278 = _2275 * _2117;
        float _2279 = _2276 * _2118;
        float _2286 = _353 + (-0.5);
        _2288 = cbMtdParam._m0[1u];
        _2290 = _2288.y * _2286;
        float _2293 = (_2268 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2294 = _2293 * (_2269 ? _2277 : (_2277 + (cbSceneParam._m0[72u].w * _2250)));
        _2295 = _2293 * (_2269 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2252)));
        _2296 = _2293 * (_2269 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2254)));
        _2299 = ((_2124 * _2128) * _2274) * _2293;
        _2302 = ((_2125 * _2128) * _2275) * _2293;
        _2305 = ((_2126 * _2128) * _2276) * _2293;
        _2306 = _2286 * 0.999000012874603271484375;
        _2317 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2317)
        {
            if ((cbInstanceData._m0[_405 + 7u].x + _2306) < 0.5)
            {
                _2470 = true;
                break;
            }
        }
        uint _2411 = _406 + uint(_2266.w);
        if ((cbInstanceData._m0[_2411].w < 1.0) && ((cbInstanceData._m0[_2411].w + _2306) < 0.5))
        {
            _2470 = true;
            break;
        }
        if ((_2290 + 1.0) < _2288.x)
        {
            _2470 = true;
            break;
        }
        _2470 = false;
        break;
    }
    float _2625;
    if (_2470)
    {
        discard_state = true;
        _2625 = 0.0;
    }
    else
    {
        _2625 = cbInstanceData._m0[_2129].w;
    }
    SV_Target.x = _2294;
    SV_Target.y = _2295;
    SV_Target.z = _2296;
    SV_Target.w = _2625;
    SV_Target_1.x = _2299;
    SV_Target_1.y = _2302;
    SV_Target_1.z = _2305;
    SV_Target_1.w = cbInstanceData._m0[_2129].w;
    discard_exit();
}


