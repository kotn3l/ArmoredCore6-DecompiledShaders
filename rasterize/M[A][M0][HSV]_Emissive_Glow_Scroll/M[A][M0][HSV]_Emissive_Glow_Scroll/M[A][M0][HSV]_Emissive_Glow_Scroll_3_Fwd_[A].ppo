#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _800;
float _3007;
float _3008;
float _3009;
float _3010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _248 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3019 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _250 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
    float _258 = (((_250 * _250) * (3.0 - (_250 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _262 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _263 = _262 * _169;
    float _264 = _262 * _170;
    float _265 = _262 * _171;
    float _3030 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3041 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3052 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _325 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _335 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _325);
    float _336 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _325);
    float _337 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _325);
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _342 = _335 * _341;
    float _343 = _336 * _341;
    float _344 = _337 * _341;
    vec4 _349 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _351 = _349.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _479 = sqrt(((_335 * _335) + (_336 * _336)) + (_337 * _337));
        float _485 = (cbMatDynParam._m0[5u].x * _479) + cbMatDynParam._m0[5u].y;
        float _3063 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
        float _486 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
        float _490 = (cbMatDynParam._m0[5u].z * _479) + cbMatDynParam._m0[5u].w;
        float _3074 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))) - _486)) + _486) < ((_351 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _363 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _364 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _384 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _387 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _390 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _403 = uint(roundEven(NORMAL.w)) * 13u;
    uint _404 = _403 + 9u;
    uint _405 = _404 + uint(cbMatDynParam._m0[0u].w);
    float _411 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_405].x;
    float _412 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * cbInstanceData._m0[_405].y;
    float _413 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0)))) * cbInstanceData._m0[_405].z;
    float _3085 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _414 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
    float _3096 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _415 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
    float _3107 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _416 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
    vec4 _425 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _363, cbSceneParam._m0[86u].y * _364));
    float _428 = _425.x * TEXCOORD.z;
    float _429 = dot(vec3(_263, _264, _265), vec3(_342, _343, _344));
    float _432 = _429 * 2.0;
    float _436 = (_432 * _263) - _342;
    float _437 = (_432 * _264) - _343;
    float _438 = (_432 * _265) - _344;
    float _460 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _799;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _524 = fma(_468, cbModelParam._m0[26u].z, fma(_464, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _460));
        float _528 = fma(_468, cbModelParam._m0[27u].z, fma(_464, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _460));
        float _532 = fma(_468, cbModelParam._m0[28u].z, fma(_464, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _460));
        float _557 = _460 + _263;
        float _558 = _464 + _264;
        float _559 = _468 + _265;
        float _569 = fma(_559, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _557)) - _524;
        float _570 = fma(_559, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _557)) - _528;
        float _571 = fma(_559, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _557)) - _532;
        float _575 = inversesqrt(dot(vec3(_569, _570, _571), vec3(_569, _570, _571)));
        float _588 = ((_575 * _569) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_524 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _589 = ((_575 * _570) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_528 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _590 = ((_575 * _571) / cbModelParam._m0[34u].z) + ((((((_532 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        vec4 _614 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_588, _589, _590), 0.0);
        float _627 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_593.x + (-0.5));
        float _629 = _627 * (_593.y + (-0.5));
        float _630 = _627 * (_593.z + (-0.5));
        float _637 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_600.x + (-0.5));
        float _639 = _637 * (_600.y + (-0.5));
        float _640 = _637 * (_600.z + (-0.5));
        float _647 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_607.x + (-0.5));
        float _649 = _647 * (_607.y + (-0.5));
        float _650 = _647 * (_607.z + (-0.5));
        float _657 = exp2((_614.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_614.x + (-0.5));
        float _659 = _657 * (_614.y + (-0.5));
        float _660 = _657 * (_614.z + (-0.5));
        float _661 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _662 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = _628 * 0.5;
        float _665 = _638 * 0.5;
        float _666 = _648 * 0.5;
        float _667 = dot(vec3(_664, _665, _666), vec3(_664, _665, _666));
        float _672 = (_667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_667);
        float _681 = (dot(vec3(_263, _264, _265), vec3(_672 * _664, _672 * _665, _672 * _666)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _691 = sqrt(((_665 * _665) + (_664 * _664)) + (_666 * _666)) / (_661 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _693 = _692 * 2.0;
        float _697 = (1.0 - _692) / (_692 + 1.0);
        float _3155 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _698 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _707 = ((((1.0 - _698) * (_693 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_693 + 1.0))) + _698) * _661;
        float _708 = _629 * 0.5;
        float _709 = _639 * 0.5;
        float _710 = _649 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _724 = (dot(vec3(_263, _264, _265), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3166 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _733 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_662 + 9.9999997473787516355514526367188e-06);
        float _3177 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3188 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))) * (_735 + 1.0))) + _740) * _662;
        float _750 = _630 * 0.5;
        float _751 = _640 * 0.5;
        float _752 = _650 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_263, _264, _265), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3199 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3210 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3221 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) * (_777 + 1.0))) + _782) * _663;
        _799 = _630;
        _801 = _629;
        _802 = _628;
        _803 = _640;
        _804 = _639;
        _805 = _638;
        _806 = _650;
        _807 = _649;
        _808 = _648;
        _809 = _663;
        _810 = _662;
        _811 = _661;
        _812 = cbModelParam._m0[36u].z * (isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0)));
        _813 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
    }
    else
    {
        _799 = _800;
        _801 = _800;
        _802 = _800;
        _803 = _800;
        _804 = _800;
        _805 = _800;
        _806 = _800;
        _807 = _800;
        _808 = _800;
        _809 = _800;
        _810 = _800;
        _811 = _800;
        _812 = 0.0;
        _813 = 0.0;
        _814 = 0.0;
    }
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _843 = fma(_468, cbModelParam._m0[30u].z, fma(_464, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _460));
        float _847 = fma(_468, cbModelParam._m0[31u].z, fma(_464, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _460));
        float _851 = fma(_468, cbModelParam._m0[32u].z, fma(_464, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _460));
        float _874 = _460 + _263;
        float _875 = _464 + _264;
        float _876 = _468 + _265;
        float _886 = fma(_876, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874)) - _843;
        float _887 = fma(_876, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874)) - _847;
        float _888 = fma(_876, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874)) - _851;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_843 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_847 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[35u].z) + ((((((_851 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _942 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_909.x + (-0.5));
        float _944 = _942 * (_909.y + (-0.5));
        float _945 = _942 * (_909.z + (-0.5));
        float _952 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_916.x + (-0.5));
        float _954 = _952 * (_916.y + (-0.5));
        float _955 = _952 * (_916.z + (-0.5));
        float _962 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_923.x + (-0.5));
        float _964 = _962 * (_923.y + (-0.5));
        float _965 = _962 * (_923.z + (-0.5));
        float _972 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_930.x + (-0.5));
        float _974 = _972 * (_930.y + (-0.5));
        float _975 = _972 * (_930.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_263, _264, _265), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3284 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_1006 + 1.0))) + _1011) * _976;
        float _1021 = _944 * 0.5;
        float _1022 = _954 * 0.5;
        float _1023 = _964 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_263, _264, _265), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3295 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3306 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3317 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * (_1048 + 1.0))) + _1053) * _977;
        float _1063 = _945 * 0.5;
        float _1064 = _955 * 0.5;
        float _1065 = _965 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_263, _264, _265), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3328 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3339 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3350 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * (_1090 + 1.0))) + _1095) * _978;
        _1112 = _945;
        _1113 = _944;
        _1114 = _943;
        _1115 = _955;
        _1116 = _954;
        _1117 = _953;
        _1118 = _965;
        _1119 = _964;
        _1120 = _963;
        _1121 = _978;
        _1122 = _977;
        _1123 = _976;
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _800;
        _1113 = _800;
        _1114 = _800;
        _1115 = _800;
        _1116 = _800;
        _1117 = _800;
        _1118 = _800;
        _1119 = _800;
        _1120 = _800;
        _1121 = _800;
        _1122 = _800;
        _1123 = _800;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _812)) + _812;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _813)) + _813;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _814)) + _814;
    float _1159 = fma(_1138, cbSceneParam._m0[89u].z, fma(_1137, cbSceneParam._m0[89u].y, _1136 * cbSceneParam._m0[89u].x));
    float _1162 = fma(_1138, cbSceneParam._m0[90u].z, fma(_1137, cbSceneParam._m0[90u].y, _1136 * cbSceneParam._m0[90u].x));
    float _1165 = fma(_1138, cbSceneParam._m0[91u].z, fma(_1137, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1136));
    float _1180 = _436 * 0.5;
    float _1181 = _437 * 0.5;
    float _1182 = _438 * 0.5;
    float _1183 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1186 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1189 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1223;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1196 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_799, _803, _806, _809));
        float _1200 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_801, _804, _807, _810));
        float _1204 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_802, _805, _808, _811));
        float _1211 = dot(vec4(cbModelParam._m0[39u]), vec4(_1180, _1181, _1182, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1211) ? 0.0 : (isnan(0.0) ? _1211 : max(0.0, _1211))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1234;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1225 = dot(vec4(cbModelParam._m0[40u]), vec4(_1180, _1181, _1182, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1225) ? 0.0 : (isnan(0.0) ? _1225 : max(0.0, _1225))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1238 = (_1234 * cbModelParam._m0[1u].x) + (_1223 * (1.0 - cbModelParam._m0[1u].x));
    float _1247 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1328;
    float _1330;
    float _1332;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1295 = fma(_468, cbModelParam._m0[13u].z, fma(_464, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460)) + cbModelParam._m0[13u].w;
        float _1299 = fma(_468, cbModelParam._m0[14u].z, fma(_464, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460)) + cbModelParam._m0[14u].w;
        float _1303 = fma(_468, cbModelParam._m0[15u].z, fma(_464, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460)) + cbModelParam._m0[15u].w;
        float _1306 = fma(_438, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _436));
        float _1309 = fma(_438, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _436));
        float _1312 = fma(_438, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _436));
        float _1338;
        if (_1306 > 0.0)
        {
            _1338 = abs((1.0 - _1295) / _1306);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1295 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1338 = frontier_phi_17_15_ladder;
        }
        float _1543;
        if (_1309 > 0.0)
        {
            _1543 = abs((1.0 - _1299) / _1309);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1299 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1543 = frontier_phi_26_22_ladder;
        }
        float _1732;
        if (_1312 > 0.0)
        {
            _1732 = abs((1.0 - _1303) / _1312);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1303 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1732 = frontier_phi_38_33_ladder;
        }
        float _1734 = isnan(_1543) ? _1338 : (isnan(_1338) ? _1543 : min(_1338, _1543));
        float _1735 = isnan(_1732) ? _1734 : (isnan(_1734) ? _1732 : min(_1734, _1732));
        float _1739 = (_1735 * _1306) + _1295;
        float _1740 = (_1735 * _1309) + _1299;
        float _1741 = (_1735 * _1312) + _1303;
        float _1742 = _1735 * 9.9999997473787516355514526367188e-05;
        float _1744 = (-1.0) - _1742;
        float _1746 = _1742 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1741 > _1746) || ((_1741 < _1744) || ((_1740 > _1746) || ((_1740 < _1744) || ((_1739 < _1744) || (_1739 > _1746))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1741, cbModelParam._m0[9u].z, fma(_1740, cbModelParam._m0[9u].y, _1739 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1741, cbModelParam._m0[10u].z, fma(_1740, cbModelParam._m0[10u].y, _1739 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1741, cbModelParam._m0[11u].z, fma(_1740, cbModelParam._m0[11u].y, _1739 * cbModelParam._m0[11u].x))), _1247);
            frontier_phi_16_38_ladder = _1838.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1838.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1838.x * cbModelParam._m0[1u].y;
        }
        _1328 = frontier_phi_16_38_ladder_2;
        _1330 = frontier_phi_16_38_ladder_1;
        _1332 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_436, _437, _438), _1247);
        _1328 = _1316.x * cbModelParam._m0[1u].y;
        _1330 = _1316.y * cbModelParam._m0[1u].y;
        _1332 = _1316.z * cbModelParam._m0[1u].y;
    }
    float _1335 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1427;
    float _1429;
    float _1431;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1391 = fma(_468, cbModelParam._m0[21u].z, fma(_464, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460)) + cbModelParam._m0[21u].w;
        float _1395 = fma(_468, cbModelParam._m0[22u].z, fma(_464, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460)) + cbModelParam._m0[22u].w;
        float _1399 = fma(_468, cbModelParam._m0[23u].z, fma(_464, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460)) + cbModelParam._m0[23u].w;
        float _1402 = fma(_438, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _436));
        float _1405 = fma(_438, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _436));
        float _1408 = fma(_438, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _436));
        float _1548;
        if (_1402 > 0.0)
        {
            _1548 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1548 = frontier_phi_28_24_ladder;
        }
        float _1759;
        if (_1405 > 0.0)
        {
            _1759 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1759 = frontier_phi_40_35_ladder;
        }
        float _1910;
        if (_1408 > 0.0)
        {
            _1910 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1910 = frontier_phi_49_46_ladder;
        }
        float _1912 = isnan(_1759) ? _1548 : (isnan(_1548) ? _1759 : min(_1548, _1759));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1402) + _1391;
        float _1918 = (_1913 * _1405) + _1395;
        float _1919 = (_1913 * _1408) + _1399;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1921 = (-1.0) - _1920;
        float _1923 = _1920 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1919 > _1923) || ((_1919 < _1921) || ((_1918 > _1923) || ((_1918 < _1921) || ((_1917 < _1921) || (_1917 > _1923))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1919, cbModelParam._m0[17u].z, fma(_1918, cbModelParam._m0[17u].y, _1917 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1919, cbModelParam._m0[18u].z, fma(_1918, cbModelParam._m0[18u].y, _1917 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1919, cbModelParam._m0[19u].z, fma(_1918, cbModelParam._m0[19u].y, _1917 * cbModelParam._m0[19u].x))), _1335);
            frontier_phi_25_49_ladder = _2156.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2156.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2156.x * cbModelParam._m0[1u].z;
        }
        _1427 = frontier_phi_25_49_ladder_2;
        _1429 = frontier_phi_25_49_ladder_1;
        _1431 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_436, _437, _438), _1335);
        _1427 = _1411.x * cbModelParam._m0[1u].z;
        _1429 = _1411.y * cbModelParam._m0[1u].z;
        _1431 = _1411.z * cbModelParam._m0[1u].z;
    }
    float _1443 = _428 * 0.01200000010430812835693359375;
    float _1445 = _1443 * ((cbModelParam._m0[1u].w * (_1427 - _1328)) + _1328);
    float _1446 = _1443 * ((cbModelParam._m0[1u].w * (_1429 - _1330)) + _1330);
    float _1447 = _1443 * ((cbModelParam._m0[1u].w * (_1431 - _1332)) + _1332);
    float _1450 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, _1445 * cbSceneParam._m0[91u].x));
    uvec4 _1466 = floatBitsToUint(cbInstanceData._m0[_403 + 5u]);
    uint _1468 = _1466.x * 14u;
    uint _1469 = _1468 + 13u;
    float _1476 = _428 + (-1.0);
    float _1481 = (cbLight._m0[_1469].x * _1476) + 1.0;
    float _1482 = (cbLight._m0[_1469].y * _1476) + 1.0;
    float _1483 = (cbLight._m0[_1469].z * _1476) + 1.0;
    float _1484 = (cbLight._m0[_1469].w * _1476) + 1.0;
    uint _1485 = _1468 + 5u;
    float _1491 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
    uint _1495 = _1468 + 4u;
    float _1502 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1506 = _1468 | 1u;
    float _1517 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_263, _264, _265));
    float _1520 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_263, _264, _265));
    float _3486 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _3497 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _1525 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.3183098733425140380859375;
    float _1527 = (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.3183098733425140380859375;
    float _1534 = ((cbLight._m0[_1485].x * _1491) * _1527) + ((cbLight._m0[_1495].x * _1502) * _1525);
    float _1535 = ((_1491 * cbLight._m0[_1485].y) * _1527) + ((_1502 * cbLight._m0[_1495].y) * _1525);
    float _1536 = ((_1491 * cbLight._m0[_1485].z) * _1527) + ((_1502 * cbLight._m0[_1495].z) * _1525);
    uvec4 _1540 = floatBitsToUint(cbLight._m0[_1468 + 12u]);
    bool _1542 = _1540.x == 0u;
    float _1553;
    float _1555;
    float _1557;
    if (_1542)
    {
        _1553 = _1534;
        _1555 = _1535;
        _1557 = _1536;
    }
    else
    {
        uint _1561 = _1468 + 6u;
        float _1577 = (dot(vec3(cbLight._m0[_1468 + 2u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1578 = _1577 * _1577;
        float _3508 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1580 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1553 = (((cbLight._m0[_1561].x * 0.3183098733425140380859375) * _1579) * _1580) + _1534;
        _1555 = (((cbLight._m0[_1561].y * 0.3183098733425140380859375) * _1579) * _1580) + _1535;
        _1557 = (((cbLight._m0[_1561].z * 0.3183098733425140380859375) * _1579) * _1580) + _1536;
    }
    bool _1560 = _1540.y == 0u;
    float _1598;
    float _1600;
    float _1602;
    if (_1560)
    {
        _1598 = _1553;
        _1600 = _1555;
        _1602 = _1557;
    }
    else
    {
        uint _1703 = _1468 + 7u;
        float _1719 = (dot(vec3(cbLight._m0[_1468 + 3u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3524 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1722 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1598 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1553;
        _1600 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1555;
        _1602 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1557;
    }
    uint _1604 = _1468 + 8u;
    float _1610 = cbLight._m0[_1468].x + _342;
    float _1611 = cbLight._m0[_1468].y + _343;
    float _1612 = cbLight._m0[_1468].z + _344;
    float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
    float _1620 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1468].xyz));
    float _3540 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1623 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _1624 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _1625 = dot(vec3(cbLight._m0[_1468].xyz), vec3(_1610 * _1616, _1611 * _1616, _1612 * _1616));
    float _3562 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
    float _1636 = (exp2(log2(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1642 = (0.5 / ((_1623 + 9.9999999392252902907785028219223e-09) + _1624)) * _1623;
    float _3573 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1644 = (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.31831014156341552734375;
    uint _1655 = _1468 + 9u;
    float _1661 = cbLight._m0[_1506].x + _342;
    float _1662 = cbLight._m0[_1506].y + _343;
    float _1663 = cbLight._m0[_1506].z + _344;
    float _1667 = inversesqrt(dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663)));
    float _1671 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1506].xyz));
    float _3584 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1674 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _1675 = dot(vec3(cbLight._m0[_1506].xyz), vec3(_1661 * _1667, _1662 * _1667, _1663 * _1667));
    float _3595 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
    float _1684 = (exp2(log2(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1688 = (0.5 / ((_1674 + 9.9999999392252902907785028219223e-09) + _1624)) * _1674;
    float _3606 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1690 = (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 0.31831014156341552734375;
    float _1700 = (((_1684 * cbLight._m0[_1655].x) * _1690) * _1491) + (((_1636 * cbLight._m0[_1604].x) * _1644) * _1502);
    float _1701 = (((_1684 * cbLight._m0[_1655].y) * _1690) * _1491) + (((_1636 * cbLight._m0[_1604].y) * _1644) * _1502);
    float _1702 = (((_1684 * cbLight._m0[_1655].z) * _1690) * _1491) + (((_1636 * cbLight._m0[_1604].z) * _1644) * _1502);
    float _1764;
    float _1766;
    float _1768;
    if (_1542)
    {
        _1764 = _1700;
        _1766 = _1701;
        _1768 = _1702;
    }
    else
    {
        uint _1770 = _1468 + 10u;
        uint _1776 = _1468 + 2u;
        float _1782 = cbLight._m0[_1776].x + _342;
        float _1783 = cbLight._m0[_1776].y + _343;
        float _1784 = cbLight._m0[_1776].z + _344;
        float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
        float _1792 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1776].xyz));
        float _3617 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1795 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1796 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1782 * _1788, _1783 * _1788, _1784 * _1788));
        float _3628 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = (exp2(log2(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1809 = (0.5 / ((_1795 + 9.9999999392252902907785028219223e-09) + _1624)) * _1795;
        float _3639 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1811 = (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.31831014156341552734375;
        float _1812 = isnan(1.0) ? _1483 : (isnan(_1483) ? 1.0 : min(_1483, 1.0));
        _1764 = (((_1805 * cbLight._m0[_1770].x) * _1811) * _1812) + _1700;
        _1766 = (((_1805 * cbLight._m0[_1770].y) * _1811) * _1812) + _1701;
        _1768 = (((_1805 * cbLight._m0[_1770].z) * _1811) * _1812) + _1702;
    }
    float _1847;
    float _1849;
    float _1851;
    if (_1560)
    {
        _1847 = _1764;
        _1849 = _1766;
        _1851 = _1768;
    }
    else
    {
        uint _1858 = _1468 + 11u;
        uint _1864 = _1468 + 3u;
        float _1870 = cbLight._m0[_1864].x + _342;
        float _1871 = cbLight._m0[_1864].y + _343;
        float _1872 = cbLight._m0[_1864].z + _344;
        float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
        float _1880 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1864].xyz));
        float _3655 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1883 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1884 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_1870 * _1876, _1871 * _1876, _1872 * _1876));
        float _3666 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1897 = (0.5 / ((_1883 + 9.9999999392252902907785028219223e-09) + _1624)) * _1883;
        float _3677 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1899 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.31831014156341552734375;
        float _1900 = isnan(1.0) ? _1484 : (isnan(_1484) ? 1.0 : min(_1484, 1.0));
        _1847 = (((_1893 * cbLight._m0[_1858].x) * _1899) * _1900) + _1764;
        _1849 = (((_1893 * cbLight._m0[_1858].y) * _1899) * _1900) + _1766;
        _1851 = (((_1893 * cbLight._m0[_1858].z) * _1899) * _1900) + _1768;
    }
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    if (_1466.y == 0u)
    {
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1975;
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1975;
        float _1978 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1975;
        uvec4 _1990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1991 = _1990.x;
        uint _2002 = uint((float(_1990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _364) / _1991))) + floor(float(uint(cbSceneParam._m0[85u].x * _363) / _1991)));
        float _2012 = (log2(_1978 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2013 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        uint _2016 = uint(isnan(14.0) ? _2013 : (isnan(_2013) ? 14.0 : min(_2013, 14.0)));
        uvec4 _2021 = texelFetch(g_lightClusterGridBuffer, int(((_2016 << 2u) + (_2002 << 6u)) >> 2u));
        uint _2022 = _2021.x;
        uint _2023 = _1990.z;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        if (((((1u << ((_2023 >> 4u) & 15u)) + 4294967295u) & _2022) == 0u) || ((_2023 & 240u) == 0u))
        {
            _2161 = 0.0;
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
        }
        else
        {
            float _2162;
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2321 = 0.0;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            uint _2327 = 0u;
            uint _2336;
            bool _2337;
            for (;;)
            {
                _2336 = texelFetch(g_lightClassification, int((((_2016 << 5u) + (_2002 << 9u)) + (_2327 << 2u)) >> 2u)).x;
                _2337 = _2336 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2337)
                {
                    frontier_phi_66_pred = _2321;
                    frontier_phi_66_pred_1 = _2326;
                    frontier_phi_66_pred_2 = _2325;
                    frontier_phi_66_pred_3 = _2324;
                    frontier_phi_66_pred_4 = _2323;
                    frontier_phi_66_pred_5 = _2322;
                }
                else
                {
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    uint _2472;
                    _2466 = _2321;
                    _2467 = _2322;
                    _2468 = _2323;
                    _2469 = _2324;
                    _2470 = _2325;
                    _2471 = _2326;
                    _2472 = _2336;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    for (;;)
                    {
                        uint _2476 = uint(findLSB(_2472)) + (_2327 << 5u);
                        uint _2473 = (_2472 + 4294967295u) & _2472;
                        uint _2478 = _2476 * 48u;
                        vec4 _2492 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 3u)).x));
                        uint _2498 = (_2476 * 48u) + 4u;
                        vec4 _2511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2498)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2498 + 3u)).x));
                        uint _2517 = (_2476 * 48u) + 8u;
                        vec3 _2528 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2517)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 2u)).x));
                        float _2532 = _2492.x - _1976;
                        float _2533 = _2492.y - _1977;
                        float _2534 = _2492.z - _1978;
                        float _2535 = dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534));
                        float _2538 = inversesqrt(_2535);
                        float _2547 = 1.0 - (_2535 * _2492.w);
                        float _3703 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
                        float _2548 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                        float _2549 = sqrt(_2535) * _2511.w;
                        float _2552 = 1.39999997615814208984375 / (_2549 + 1.39999997615814208984375);
                        float _2553 = _2552 * _2552;
                        float _2556 = ((1.0 - _2553) * dot(vec3(_384, _387, _390), vec3(_2538 * _2532, _2538 * _2533, _2538 * _2534))) + _2553;
                        float _2559 = _2549 * _2549;
                        float _2563 = ((isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))) * _2548) / ((_2559 * 0.699999988079071044921875) + 1.0);
                        float _2567 = (-0.0) - _1976;
                        float _2568 = (-0.0) - _1977;
                        float _2569 = (-0.0) - _1978;
                        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
                        float _2577 = dot(vec3(_384, _387, _390), vec3(_2573 * _2567, _2573 * _2568, _2573 * _2569));
                        float _3719 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _3730 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
                        float _2581 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
                        float _2585 = (0.5 / (((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) + 9.9999999392252902907785028219223e-09) + _2581)) * _2581;
                        float _3741 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2594 = (((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 3.1415927410125732421875) / ((_2559 * 2.1991131305694580078125) + 3.141590118408203125)) * _2548;
                        _2396 = (_2563 * _2511.x) + _2469;
                        _2397 = (_2563 * _2511.y) + _2470;
                        _2398 = (_2563 * _2511.z) + _2471;
                        _2393 = (_2594 * _2528.x) + _2466;
                        _2394 = (_2594 * _2528.y) + _2467;
                        _2395 = (_2594 * _2528.z) + _2468;
                        if (_2473 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2466 = _2393;
                            _2467 = _2394;
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2473;
                        }
                    }
                    frontier_phi_66_pred = _2393;
                    frontier_phi_66_pred_1 = _2398;
                    frontier_phi_66_pred_2 = _2397;
                    frontier_phi_66_pred_3 = _2396;
                    frontier_phi_66_pred_4 = _2395;
                    frontier_phi_66_pred_5 = _2394;
                }
                _2162 = frontier_phi_66_pred;
                _2172 = frontier_phi_66_pred_1;
                _2170 = frontier_phi_66_pred_2;
                _2168 = frontier_phi_66_pred_3;
                _2166 = frontier_phi_66_pred_4;
                _2164 = frontier_phi_66_pred_5;
                uint _2328 = _2327 + 1u;
                if (_2328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2321 = _2162;
                    _2322 = _2164;
                    _2323 = _2166;
                    _2324 = _2168;
                    _2325 = _2170;
                    _2326 = _2172;
                    _2327 = _2328;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2161 = _2162;
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
        }
        uvec4 _2175 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2176 = _2175.z;
        uint _2178 = (_2176 >> 8u) & 15u;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        if (((4294967295u << _2178) & _2022) == 0u)
        {
            _2292 = _2161;
            _2294 = _2163;
            _2296 = _2165;
            _2298 = _2167;
            _2300 = _2169;
            _2302 = _2171;
        }
        else
        {
            float _2317 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2178 < ((_2176 >> 12u) & 15u))
            {
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2449 = _2161;
                float _2450 = _2163;
                float _2451 = _2165;
                float _2452 = _2167;
                float _2453 = _2169;
                float _2454 = _2171;
                uint _2455 = _2178;
                uint _2464;
                bool _2465;
                for (;;)
                {
                    _2464 = texelFetch(g_lightClassification, int((((_2016 << 5u) + (_2002 << 9u)) + (_2455 << 2u)) >> 2u)).x;
                    _2465 = _2464 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2465)
                    {
                        frontier_phi_77_pred = _2454;
                        frontier_phi_77_pred_1 = _2453;
                        frontier_phi_77_pred_2 = _2452;
                        frontier_phi_77_pred_3 = _2451;
                        frontier_phi_77_pred_4 = _2450;
                        frontier_phi_77_pred_5 = _2449;
                    }
                    else
                    {
                        float _2608;
                        float _2609;
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2621 = _2449;
                        float _2622 = _2450;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        uint _2627 = _2464;
                        uint _2628;
                        vec4 _2653;
                        float _2654;
                        vec4 _2669;
                        vec3 _2681;
                        vec4 _2697;
                        vec4 _2713;
                        float _2760;
                        bool _2761;
                        for (;;)
                        {
                            uint _2638 = ((_2455 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2627));
                            _2628 = (_2627 + 4294967295u) & _2627;
                            uint _2640 = _2638 * 40u;
                            _2653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2640 + 3u)).x));
                            _2654 = _2653.w;
                            uint _2656 = (_2638 * 40u) + 4u;
                            _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            uint _2671 = (_2638 * 40u) + 8u;
                            _2681 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 2u)).x));
                            uint _2684 = (_2638 * 40u) + 16u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            uint _2700 = (_2638 * 40u) + 20u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2716 = (_2638 * 40u) + 24u;
                            vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2735 = (_2638 * 40u) + 28u;
                            vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            _2760 = fma(_1978, _2748.z, fma(_1977, _2748.y, _2748.x * _1976)) + _2748.w;
                            _2761 = !((fma(_1978, _2729.z, fma(_1977, _2729.y, _2729.x * _1976)) + _2729.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2761)
                            {
                                float _2788 = _2653.x - _1976;
                                float _2789 = _2653.y - _1977;
                                float _2790 = _2653.z - _1978;
                                float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                                float _2794 = inversesqrt(_2791);
                                float _2795 = _2794 * _2788;
                                float _2796 = _2794 * _2789;
                                float _2797 = _2794 * _2790;
                                float _2801 = 1.0 - (_2791 / (_2654 * _2654));
                                float _3752 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2802 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                                float _2806 = sqrt(_2791) * _2669.w;
                                float _2808 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                                float _2809 = _2808 * _2808;
                                float _2810 = 1.0 - _2809;
                                float _2812 = (_2810 * dot(vec3(_2795, _2796, _2797), vec3(_384, _387, _390))) + _2809;
                                float _2815 = _2806 * _2806;
                                float _2819 = (fma(_1978, _2697.z, fma(_1977, _2697.y, _2697.x * _1976)) + _2697.w) / _2760;
                                float _2820 = (fma(_1978, _2713.z, fma(_1977, _2713.y, _2713.x * _1976)) + _2713.w) / _2760;
                                float _2824 = 1.0 - dot(vec2(_2819, _2820), vec2(_2819, _2820));
                                float _3768 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2825 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                                float _2826 = _2825 * (((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2802) / ((_2815 * 0.699999988079071044921875) + 1.0));
                                float _2836 = dot(vec3(_384, _387, _390), vec3((-0.0) - (_1976 * _2317), (-0.0) - (_1977 * _2317), (-0.0) - (_1978 * _2317)));
                                float _3779 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2844 = (_2810 * dot(vec3(_384, _387, _390), vec3(_2795, _2796, _2797))) + _2809;
                                float _3790 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2845 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                                float _2849 = (0.5 / (((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) + 9.9999999392252902907785028219223e-09) + _2845)) * _2845;
                                float _3801 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                                float _2856 = (_2825 * _2802) * (((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 3.1415927410125732421875) / ((_2815 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2826 * _2669.y;
                                frontier_phi_83_pred_1 = _2826 * _2669.x;
                                frontier_phi_83_pred_2 = _2856 * _2681.z;
                                frontier_phi_83_pred_3 = _2856 * _2681.y;
                                frontier_phi_83_pred_4 = _2856 * _2681.x;
                                frontier_phi_83_pred_5 = _2826 * _2669.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2864 = frontier_phi_83_pred;
                            _2863 = frontier_phi_83_pred_1;
                            _2862 = frontier_phi_83_pred_2;
                            _2861 = frontier_phi_83_pred_3;
                            _2860 = frontier_phi_83_pred_4;
                            _2865 = frontier_phi_83_pred_5;
                            _2611 = _2863 + _2624;
                            _2612 = _2864 + _2625;
                            _2613 = _2865 + _2626;
                            _2608 = _2860 + _2621;
                            _2609 = _2861 + _2622;
                            _2610 = _2862 + _2623;
                            if (_2628 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2621 = _2608;
                                _2622 = _2609;
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2628;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2613;
                        frontier_phi_77_pred_1 = _2612;
                        frontier_phi_77_pred_2 = _2611;
                        frontier_phi_77_pred_3 = _2610;
                        frontier_phi_77_pred_4 = _2609;
                        frontier_phi_77_pred_5 = _2608;
                    }
                    _2303 = frontier_phi_77_pred;
                    _2301 = frontier_phi_77_pred_1;
                    _2299 = frontier_phi_77_pred_2;
                    _2297 = frontier_phi_77_pred_3;
                    _2295 = frontier_phi_77_pred_4;
                    _2293 = frontier_phi_77_pred_5;
                    uint _2456 = _2455 + 1u;
                    if (_2456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2449 = _2293;
                        _2450 = _2295;
                        _2451 = _2297;
                        _2452 = _2299;
                        _2453 = _2301;
                        _2454 = _2303;
                        _2455 = _2456;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2297;
                frontier_phi_58_59_ladder_1 = _2303;
                frontier_phi_58_59_ladder_2 = _2301;
                frontier_phi_58_59_ladder_3 = _2299;
                frontier_phi_58_59_ladder_4 = _2295;
                frontier_phi_58_59_ladder_5 = _2293;
            }
            else
            {
                frontier_phi_58_59_ladder = _2165;
                frontier_phi_58_59_ladder_1 = _2171;
                frontier_phi_58_59_ladder_2 = _2169;
                frontier_phi_58_59_ladder_3 = _2167;
                frontier_phi_58_59_ladder_4 = _2163;
                frontier_phi_58_59_ladder_5 = _2161;
            }
            _2292 = frontier_phi_58_59_ladder_5;
            _2294 = frontier_phi_58_59_ladder_4;
            _2296 = frontier_phi_58_59_ladder;
            _2298 = frontier_phi_58_59_ladder_3;
            _2300 = frontier_phi_58_59_ladder_2;
            _2302 = frontier_phi_58_59_ladder_1;
        }
        float _2307 = isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0));
        _2035 = (_2307 * _2298) + _1598;
        _2037 = (_2307 * _2300) + _1600;
        _2039 = (_2307 * _2302) + _1602;
        _2041 = ((_2292 * 0.039999999105930328369140625) * _2307) + _1847;
        _2043 = ((_2294 * 0.039999999105930328369140625) * _2307) + _1849;
        _2045 = ((_2296 * 0.039999999105930328369140625) * _2307) + _1851;
    }
    else
    {
        _2035 = _1598;
        _2037 = _1600;
        _2039 = _1602;
        _2041 = _1847;
        _2043 = _1849;
        _2045 = _1851;
    }
    uint _2051 = _404 + uint(cbMatDynParam._m0[0u].w);
    float _2060 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * _258) * cbInstanceData._m0[_2051].x;
    float _2064 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * _258) * cbInstanceData._m0[_2051].y;
    float _2068 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * _258) * cbInstanceData._m0[_2051].z;
    float _3817 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3828 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _3839 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _2085 = (((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_2035 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _428))) + ((_2041 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1238)) * cbPerFrame._m0[3u].x)) + _2060;
    float _2087 = (_2064 + ((_2043 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1238)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_2037 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _428)));
    float _2089 = (_2068 + ((_2045 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1238)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_2039 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _428)));
    float _2090 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2091 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2092 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2098 = cbMtdParam._m0[2u].x * _2060;
    float _2099 = cbMtdParam._m0[2u].y * _2064;
    float _2100 = cbMtdParam._m0[2u].z * _2068;
    float _3865 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2102 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    uint _2103 = _403 + 6u;
    float _2111 = _363 / cbSceneParam._m0[86u].x;
    float _2112 = _364 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _284 : (isnan(_284) ? cbSceneParam._m0[77u].w : min(_284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    if (_284 > cbSceneParam._m0[78u].w)
    {
        float _2186 = isnan(_284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _284 : min(cbSceneParam._m0[80u].w, _284));
        float _2187 = _2186 / _284;
        float _2198 = _2187 * _335;
        float _2199 = _336 * _2187;
        float _2200 = (-0.0) - _2199;
        float _2202 = _2187 * _337;
        float _2204 = (cbSceneParam._m0[77u].w * _2200) / _2186;
        float _2205 = _2204 + cbSceneParam._m0[79u].w;
        float _2206 = cbSceneParam._m0[79u].w - _2199;
        float _2212 = sqrt(((_2198 * _2198) + (_2199 * _2199)) + (_2202 * _2202));
        float _2215 = (1.0 - (cbSceneParam._m0[77u].w / _2186)) * _2212;
        float _2220 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2222 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2406;
        if (abs((_2200 - _2204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2406 = ((((_2205 > 0.0) ? exp2(_2220 * _2205) : (2.0 - exp2(_2222 * _2205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2215;
        }
        else
        {
            float _2350 = 1.0 / cbSceneParam._m0[80u].x;
            float _2351 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : max(_2205, _2206));
            float _2352 = isnan(_2206) ? _2205 : (isnan(_2205) ? _2206 : min(_2205, _2206));
            float _2361 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : min(_2351, 0.0));
            float _2362 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : min(_2352, 0.0));
            _2406 = ((abs(_2212 / _2200) * cbSceneParam._m0[80u].y) * ((((_2361 - _2362) * 2.0) - ((exp2(_2220 * (isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0)))) - exp2(_2220 * (isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0))))) * _2350)) - ((exp2(_2222 * _2361) - exp2(_2222 * _2362)) * _2350))) + (_2215 * cbSceneParam._m0[80u].z);
        }
        vec4 _2408 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2417 = exp2((_2406 * (-1.44269502162933349609375)) * (1.0 - _2408.w));
        float _2418 = log2(_2417);
        float _2434 = log2(_2131);
        _2224 = (exp2(_2434 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].x)) * _2408.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2226 = (exp2(_2434 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].y)) * _2408.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2228 = (exp2(_2434 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2418 * cbSceneParam._m0[78u].z)) * _2408.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2230 = _2417 * _2131;
    }
    else
    {
        _2224 = _2128;
        _2226 = _2129;
        _2228 = _2130;
        _2230 = _2131;
    }
    bool _2444;
    vec4 _2240;
    vec4 _2262;
    float _2264;
    float _2268;
    float _2269;
    float _2270;
    float _2273;
    float _2276;
    float _2279;
    float _2280;
    bool _2291;
    for (;;)
    {
        _2240 = cbMatDynParam._m0[0u];
        float _2242 = roundEven(_2240.y);
        bool _2243 = _2242 == 3.0;
        float _2244 = log2(_2230);
        float _2248 = exp2(_2244 * cbSceneParam._m0[78u].x);
        float _2249 = exp2(_2244 * cbSceneParam._m0[78u].y);
        float _2250 = exp2(_2244 * cbSceneParam._m0[78u].z);
        float _2251 = _2248 * _2090;
        float _2252 = _2249 * _2091;
        float _2253 = _2250 * _2092;
        float _2260 = _351 + (-0.5);
        _2262 = cbMtdParam._m0[1u];
        _2264 = _2262.y * _2260;
        float _2267 = (_2242 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2268 = _2267 * (_2243 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2224)));
        _2269 = _2267 * (_2243 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2226)));
        _2270 = _2267 * (_2243 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2228)));
        _2273 = ((_2098 * _2102) * _2248) * _2267;
        _2276 = ((_2099 * _2102) * _2249) * _2267;
        _2279 = ((_2100 * _2102) * _2250) * _2267;
        _2280 = _2260 * 0.999000012874603271484375;
        _2291 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2291)
        {
            if ((cbInstanceData._m0[_403 + 7u].x + _2280) < 0.5)
            {
                _2444 = true;
                break;
            }
        }
        uint _2385 = _404 + uint(_2240.w);
        if ((cbInstanceData._m0[_2385].w < 1.0) && ((cbInstanceData._m0[_2385].w + _2280) < 0.5))
        {
            _2444 = true;
            break;
        }
        if ((_2264 + 1.0) < _2262.x)
        {
            _2444 = true;
            break;
        }
        _2444 = false;
        break;
    }
    float _2599;
    if (_2444)
    {
        discard_state = true;
        _2599 = 0.0;
    }
    else
    {
        _2599 = cbInstanceData._m0[_2103].w;
    }
    SV_Target.x = _2268;
    SV_Target.y = _2269;
    SV_Target.z = _2270;
    SV_Target.w = _2599;
    SV_Target_1.x = _2273;
    SV_Target_1.y = _2276;
    SV_Target_1.z = _2279;
    SV_Target_1.w = cbInstanceData._m0[_2103].w;
    discard_exit();
}


