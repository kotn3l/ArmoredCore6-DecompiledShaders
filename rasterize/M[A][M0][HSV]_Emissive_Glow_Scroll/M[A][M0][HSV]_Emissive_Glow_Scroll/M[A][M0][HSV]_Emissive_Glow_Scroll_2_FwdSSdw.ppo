#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _740;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _233 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _241 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _242 = _241 * _167;
    float _243 = _241 * _168;
    float _244 = _241 * _169;
    float _2915 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2926 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2937 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _264 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _305 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _315 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _305);
    float _316 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _305);
    float _317 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _305);
    float _321 = inversesqrt(dot(vec3(_315, _316, _317), vec3(_315, _316, _317)));
    float _322 = _315 * _321;
    float _323 = _316 * _321;
    float _324 = _317 * _321;
    float _330 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _331 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _352 = fma(_244, cbSceneParam._m0[5u].z, fma(_243, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _242));
    float _355 = fma(_244, cbSceneParam._m0[6u].z, fma(_243, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _242));
    float _358 = fma(_244, cbSceneParam._m0[7u].z, fma(_243, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _242));
    uint _371 = uint(roundEven(NORMAL.w)) * 13u;
    uint _372 = _371 + 9u;
    uint _373 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _379 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0)))) * cbInstanceData._m0[_373].x;
    float _380 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0)))) * cbInstanceData._m0[_373].y;
    float _381 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0)))) * cbInstanceData._m0[_373].z;
    float _2948 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
    float _2959 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
    float _2970 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
    vec4 _393 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _330, cbSceneParam._m0[86u].y * _331));
    float _396 = _393.x * TEXCOORD.z;
    float _397 = dot(vec3(_242, _243, _244), vec3(_322, _323, _324));
    float _400 = _397 * 2.0;
    float _405 = (_400 * _242) - _322;
    float _406 = (_400 * _243) - _323;
    float _407 = (_400 * _244) - _324;
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _739;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _464 = fma(_437, cbModelParam._m0[26u].z, fma(_433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _429));
        float _468 = fma(_437, cbModelParam._m0[27u].z, fma(_433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _429));
        float _472 = fma(_437, cbModelParam._m0[28u].z, fma(_433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _429));
        float _497 = _429 + _242;
        float _498 = _433 + _243;
        float _499 = _437 + _244;
        float _509 = fma(_499, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497)) - _464;
        float _510 = fma(_499, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497)) - _468;
        float _511 = fma(_499, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497)) - _472;
        float _515 = inversesqrt(dot(vec3(_509, _510, _511), vec3(_509, _510, _511)));
        float _528 = ((_515 * _509) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_464 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _529 = ((_515 * _510) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_468 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _530 = ((_515 * _511) / cbModelParam._m0[34u].z) + ((((((_472 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_528, _529, _530), 0.0);
        float _567 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_533.x + (-0.5));
        float _569 = _567 * (_533.y + (-0.5));
        float _570 = _567 * (_533.z + (-0.5));
        float _577 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_540.x + (-0.5));
        float _579 = _577 * (_540.y + (-0.5));
        float _580 = _577 * (_540.z + (-0.5));
        float _587 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_547.x + (-0.5));
        float _589 = _587 * (_547.y + (-0.5));
        float _590 = _587 * (_547.z + (-0.5));
        float _597 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_554.x + (-0.5));
        float _599 = _597 * (_554.y + (-0.5));
        float _600 = _597 * (_554.z + (-0.5));
        float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        float _604 = _568 * 0.5;
        float _605 = _578 * 0.5;
        float _606 = _588 * 0.5;
        float _607 = dot(vec3(_604, _605, _606), vec3(_604, _605, _606));
        float _612 = (_607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_607);
        float _621 = (dot(vec3(_242, _243, _244), vec3(_612 * _604, _612 * _605, _612 * _606)) + 1.0) * 0.5;
        float _2996 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _631 = sqrt(((_605 * _605) + (_604 * _604)) + (_606 * _606)) / (_601 + 9.9999997473787516355514526367188e-06);
        float _3007 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _633 = _632 * 2.0;
        float _637 = (1.0 - _632) / (_632 + 1.0);
        float _3018 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _647 = ((((1.0 - _638) * (_633 + 2.0)) * exp2(log2(isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0))) * (_633 + 1.0))) + _638) * _601;
        float _648 = _569 * 0.5;
        float _649 = _579 * 0.5;
        float _650 = _589 * 0.5;
        float _651 = dot(vec3(_648, _649, _650), vec3(_648, _649, _650));
        float _656 = (_651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_651);
        float _664 = (dot(vec3(_242, _243, _244), vec3(_656 * _648, _656 * _649, _656 * _650)) + 1.0) * 0.5;
        float _3029 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _673 = sqrt(((_649 * _649) + (_648 * _648)) + (_650 * _650)) / (_602 + 9.9999997473787516355514526367188e-06);
        float _3040 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _675 = _674 * 2.0;
        float _679 = (1.0 - _674) / (_674 + 1.0);
        float _3051 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
        float _689 = ((((1.0 - _680) * (_675 + 2.0)) * exp2(log2(isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) * (_675 + 1.0))) + _680) * _602;
        float _690 = _570 * 0.5;
        float _691 = _580 * 0.5;
        float _692 = _590 * 0.5;
        float _693 = dot(vec3(_690, _691, _692), vec3(_690, _691, _692));
        float _698 = (_693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_693);
        float _706 = (dot(vec3(_242, _243, _244), vec3(_698 * _690, _698 * _691, _698 * _692)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _715 = sqrt(((_691 * _691) + (_690 * _690)) + (_692 * _692)) / (_603 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _717 = _716 * 2.0;
        float _721 = (1.0 - _716) / (_716 + 1.0);
        float _3084 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _731 = ((((1.0 - _722) * (_717 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_717 + 1.0))) + _722) * _603;
        _739 = _570;
        _741 = _569;
        _742 = _568;
        _743 = _580;
        _744 = _579;
        _745 = _578;
        _746 = _590;
        _747 = _589;
        _748 = _588;
        _749 = _603;
        _750 = _602;
        _751 = _601;
        _752 = cbModelParam._m0[36u].z * (isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0)));
        _753 = cbModelParam._m0[36u].z * (isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0)));
        _754 = cbModelParam._m0[36u].z * (isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0)));
    }
    else
    {
        _739 = _740;
        _741 = _740;
        _742 = _740;
        _743 = _740;
        _744 = _740;
        _745 = _740;
        _746 = _740;
        _747 = _740;
        _748 = _740;
        _749 = _740;
        _750 = _740;
        _751 = _740;
        _752 = 0.0;
        _753 = 0.0;
        _754 = 0.0;
    }
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _780 = fma(_437, cbModelParam._m0[30u].z, fma(_433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _429));
        float _784 = fma(_437, cbModelParam._m0[31u].z, fma(_433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _429));
        float _788 = fma(_437, cbModelParam._m0[32u].z, fma(_433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _429));
        float _811 = _429 + _242;
        float _812 = _433 + _243;
        float _813 = _437 + _244;
        float _823 = fma(_813, cbModelParam._m0[30u].z, fma(_812, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811)) - _780;
        float _824 = fma(_813, cbModelParam._m0[31u].z, fma(_812, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811)) - _784;
        float _825 = fma(_813, cbModelParam._m0[32u].z, fma(_812, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811)) - _788;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_780 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_784 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[35u].z) + ((((((_788 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _879 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_846.x + (-0.5));
        float _881 = _879 * (_846.y + (-0.5));
        float _882 = _879 * (_846.z + (-0.5));
        float _889 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_853.x + (-0.5));
        float _891 = _889 * (_853.y + (-0.5));
        float _892 = _889 * (_853.z + (-0.5));
        float _899 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_860.x + (-0.5));
        float _901 = _899 * (_860.y + (-0.5));
        float _902 = _899 * (_860.z + (-0.5));
        float _909 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_867.x + (-0.5));
        float _911 = _909 * (_867.y + (-0.5));
        float _912 = _909 * (_867.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_242, _243, _244), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3125 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3136 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3147 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0))) * (_943 + 1.0))) + _948) * _913;
        float _958 = _881 * 0.5;
        float _959 = _891 * 0.5;
        float _960 = _901 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _974 = (dot(vec3(_242, _243, _244), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3158 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _983 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3169 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3180 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0))) * (_985 + 1.0))) + _990) * _914;
        float _1000 = _882 * 0.5;
        float _1001 = _892 * 0.5;
        float _1002 = _902 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_242, _243, _244), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3213 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_1027 + 1.0))) + _1032) * _915;
        _1049 = _882;
        _1050 = _881;
        _1051 = _880;
        _1052 = _892;
        _1053 = _891;
        _1054 = _890;
        _1055 = _902;
        _1056 = _901;
        _1057 = _900;
        _1058 = _915;
        _1059 = _914;
        _1060 = _913;
        _1061 = cbModelParam._m0[36u].w * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
        _1062 = cbModelParam._m0[36u].w * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1063 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
    }
    else
    {
        _1049 = _740;
        _1050 = _740;
        _1051 = _740;
        _1052 = _740;
        _1053 = _740;
        _1054 = _740;
        _1055 = _740;
        _1056 = _740;
        _1057 = _740;
        _1058 = _740;
        _1059 = _740;
        _1060 = _740;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1073 = (cbModelParam._m0[1u].x * (_1061 - _752)) + _752;
    float _1074 = (cbModelParam._m0[1u].x * (_1062 - _753)) + _753;
    float _1075 = (cbModelParam._m0[1u].x * (_1063 - _754)) + _754;
    float _1096 = fma(_1075, cbSceneParam._m0[89u].z, fma(_1074, cbSceneParam._m0[89u].y, _1073 * cbSceneParam._m0[89u].x));
    float _1099 = fma(_1075, cbSceneParam._m0[90u].z, fma(_1074, cbSceneParam._m0[90u].y, _1073 * cbSceneParam._m0[90u].x));
    float _1102 = fma(_1075, cbSceneParam._m0[91u].z, fma(_1074, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1073));
    float _1117 = _405 * 0.5;
    float _1118 = _406 * 0.5;
    float _1119 = _407 * 0.5;
    float _1120 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_1051, _1054, _1057, _1060));
    float _1123 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_1050, _1053, _1056, _1059));
    float _1126 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_1049, _1052, _1055, _1058));
    float _1160;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1133 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_739, _743, _746, _749));
        float _1137 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_741, _744, _747, _750));
        float _1141 = dot(vec4(_1117, _1118, _1119, 1.0), vec4(_742, _745, _748, _751));
        float _1148 = dot(vec4(cbModelParam._m0[39u]), vec4(_1117, _1118, _1119, 1.0));
        _1160 = dot(vec3(isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1148) ? 0.0 : (isnan(0.0) ? _1148 : max(0.0, _1148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1160 = 1.0;
    }
    float _1171;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1162 = dot(vec4(cbModelParam._m0[40u]), vec4(_1117, _1118, _1119, 1.0));
        _1171 = dot(vec3(isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1171 = 1.0;
    }
    float _1175 = (_1171 * cbModelParam._m0[1u].x) + (_1160 * (1.0 - cbModelParam._m0[1u].x));
    float _1184 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1265;
    float _1267;
    float _1269;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1232 = fma(_437, cbModelParam._m0[13u].z, fma(_433, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429)) + cbModelParam._m0[13u].w;
        float _1236 = fma(_437, cbModelParam._m0[14u].z, fma(_433, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429)) + cbModelParam._m0[14u].w;
        float _1240 = fma(_437, cbModelParam._m0[15u].z, fma(_433, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429)) + cbModelParam._m0[15u].w;
        float _1243 = fma(_407, cbModelParam._m0[13u].z, fma(_406, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _405));
        float _1246 = fma(_407, cbModelParam._m0[14u].z, fma(_406, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _405));
        float _1249 = fma(_407, cbModelParam._m0[15u].z, fma(_406, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _405));
        float _1275;
        if (_1243 > 0.0)
        {
            _1275 = abs((1.0 - _1232) / _1243);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1243 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1232 + 1.0) / _1243);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1275 = frontier_phi_14_12_ladder;
        }
        float _1502;
        if (_1246 > 0.0)
        {
            _1502 = abs((1.0 - _1236) / _1246);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1246 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1236 + 1.0) / _1246);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1502 = frontier_phi_23_19_ladder;
        }
        float _1694;
        if (_1249 > 0.0)
        {
            _1694 = abs((1.0 - _1240) / _1249);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1240 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1694 = frontier_phi_35_30_ladder;
        }
        float _1696 = isnan(_1502) ? _1275 : (isnan(_1275) ? _1502 : min(_1275, _1502));
        float _1697 = isnan(_1694) ? _1696 : (isnan(_1696) ? _1694 : min(_1696, _1694));
        float _1701 = (_1697 * _1243) + _1232;
        float _1702 = (_1697 * _1246) + _1236;
        float _1703 = (_1697 * _1249) + _1240;
        float _1704 = _1697 * 9.9999997473787516355514526367188e-05;
        float _1706 = (-1.0) - _1704;
        float _1708 = _1704 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1703 > _1708) || ((_1703 < _1706) || ((_1702 > _1708) || ((_1702 < _1706) || ((_1701 < _1706) || (_1701 > _1708))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1800 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1703, cbModelParam._m0[9u].z, fma(_1702, cbModelParam._m0[9u].y, _1701 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1703, cbModelParam._m0[10u].z, fma(_1702, cbModelParam._m0[10u].y, _1701 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1703, cbModelParam._m0[11u].z, fma(_1702, cbModelParam._m0[11u].y, _1701 * cbModelParam._m0[11u].x))), _1184);
            frontier_phi_13_35_ladder = _1800.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1800.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1800.x * cbModelParam._m0[1u].y;
        }
        _1265 = frontier_phi_13_35_ladder_2;
        _1267 = frontier_phi_13_35_ladder_1;
        _1269 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1253 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_405, _406, _407), _1184);
        _1265 = _1253.x * cbModelParam._m0[1u].y;
        _1267 = _1253.y * cbModelParam._m0[1u].y;
        _1269 = _1253.z * cbModelParam._m0[1u].y;
    }
    float _1272 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1328 = fma(_437, cbModelParam._m0[21u].z, fma(_433, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429)) + cbModelParam._m0[21u].w;
        float _1332 = fma(_437, cbModelParam._m0[22u].z, fma(_433, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429)) + cbModelParam._m0[22u].w;
        float _1336 = fma(_437, cbModelParam._m0[23u].z, fma(_433, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429)) + cbModelParam._m0[23u].w;
        float _1339 = fma(_407, cbModelParam._m0[21u].z, fma(_406, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _405));
        float _1342 = fma(_407, cbModelParam._m0[22u].z, fma(_406, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _405));
        float _1345 = fma(_407, cbModelParam._m0[23u].z, fma(_406, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _405));
        float _1507;
        if (_1339 > 0.0)
        {
            _1507 = abs((1.0 - _1328) / _1339);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1339 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1328 + 1.0) / _1339);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1507 = frontier_phi_25_21_ladder;
        }
        float _1721;
        if (_1342 > 0.0)
        {
            _1721 = abs((1.0 - _1332) / _1342);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1332 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1721 = frontier_phi_37_32_ladder;
        }
        float _1872;
        if (_1345 > 0.0)
        {
            _1872 = abs((1.0 - _1336) / _1345);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1336 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1872 = frontier_phi_46_43_ladder;
        }
        float _1874 = isnan(_1721) ? _1507 : (isnan(_1507) ? _1721 : min(_1507, _1721));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1339) + _1328;
        float _1880 = (_1875 * _1342) + _1332;
        float _1881 = (_1875 * _1345) + _1336;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1882;
        float _1885 = _1882 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1881 > _1885) || ((_1881 < _1883) || ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 < _1883) || (_1879 > _1885))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1881, cbModelParam._m0[17u].z, fma(_1880, cbModelParam._m0[17u].y, _1879 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1881, cbModelParam._m0[18u].z, fma(_1880, cbModelParam._m0[18u].y, _1879 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1881, cbModelParam._m0[19u].z, fma(_1880, cbModelParam._m0[19u].y, _1879 * cbModelParam._m0[19u].x))), _1272);
            frontier_phi_22_46_ladder = _2115.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2115.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2115.x * cbModelParam._m0[1u].z;
        }
        _1364 = frontier_phi_22_46_ladder_2;
        _1366 = frontier_phi_22_46_ladder_1;
        _1368 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_405, _406, _407), _1272);
        _1364 = _1348.x * cbModelParam._m0[1u].z;
        _1366 = _1348.y * cbModelParam._m0[1u].z;
        _1368 = _1348.z * cbModelParam._m0[1u].z;
    }
    float _1380 = _396 * 0.01200000010430812835693359375;
    float _1382 = _1380 * ((cbModelParam._m0[1u].w * (_1364 - _1265)) + _1265);
    float _1383 = _1380 * ((cbModelParam._m0[1u].w * (_1366 - _1267)) + _1267);
    float _1384 = _1380 * ((cbModelParam._m0[1u].w * (_1368 - _1269)) + _1269);
    float _1387 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, _1382 * cbSceneParam._m0[91u].x));
    vec4 _1401 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_330, _331));
    float _1403 = _1401.w;
    float _1415 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1403);
    float _1416 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1403);
    float _1417 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1403);
    uvec4 _1421 = floatBitsToUint(cbInstanceData._m0[_371 + 5u]);
    uint _1423 = _1421.x * 14u;
    uint _1424 = _1423 + 13u;
    float _1431 = _396 + (-1.0);
    float _1437 = (cbLight._m0[_1424].x * _1431) + 1.0;
    float _1438 = (cbLight._m0[_1424].y * _1431) + 1.0;
    float _1439 = (cbLight._m0[_1424].z * _1431) + 1.0;
    float _1440 = (cbLight._m0[_1424].w * _1431) + 1.0;
    uint _1441 = _1423 + 5u;
    float _1447 = isnan(1.0) ? _1438 : (isnan(_1438) ? 1.0 : min(_1438, 1.0));
    uint _1451 = _1423 + 4u;
    float _1461 = isnan(1.0) ? _1437 : (isnan(_1437) ? 1.0 : min(_1437, 1.0));
    uint _1465 = _1423 | 1u;
    float _1476 = dot(vec3(cbLight._m0[_1423].xyz), vec3(_242, _243, _244));
    float _1479 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_242, _243, _244));
    float _3349 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
    float _3360 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
    float _1484 = (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.3183098733425140380859375;
    float _1486 = (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.3183098733425140380859375;
    float _1493 = ((cbLight._m0[_1441].x * _1447) * _1486) + (((cbLight._m0[_1451].x * _1415) * _1461) * _1484);
    float _1494 = ((_1447 * cbLight._m0[_1441].y) * _1486) + (((cbLight._m0[_1451].y * _1416) * _1461) * _1484);
    float _1495 = ((_1447 * cbLight._m0[_1441].z) * _1486) + (((cbLight._m0[_1451].z * _1417) * _1461) * _1484);
    uvec4 _1499 = floatBitsToUint(cbLight._m0[_1423 + 12u]);
    bool _1501 = _1499.x == 0u;
    float _1512;
    float _1514;
    float _1516;
    if (_1501)
    {
        _1512 = _1493;
        _1514 = _1494;
        _1516 = _1495;
    }
    else
    {
        uint _1520 = _1423 + 6u;
        float _1536 = (dot(vec3(cbLight._m0[_1423 + 2u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1537 = _1536 * _1536;
        float _3371 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1539 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1512 = (((cbLight._m0[_1520].x * 0.3183098733425140380859375) * _1538) * _1539) + _1493;
        _1514 = (((cbLight._m0[_1520].y * 0.3183098733425140380859375) * _1538) * _1539) + _1494;
        _1516 = (((cbLight._m0[_1520].z * 0.3183098733425140380859375) * _1538) * _1539) + _1495;
    }
    bool _1519 = _1499.y == 0u;
    float _1557;
    float _1559;
    float _1561;
    if (_1519)
    {
        _1557 = _1512;
        _1559 = _1514;
        _1561 = _1516;
    }
    else
    {
        uint _1665 = _1423 + 7u;
        float _1681 = (dot(vec3(cbLight._m0[_1423 + 3u].xyz), vec3(_242, _243, _244)) * 0.5) + 0.5;
        float _1682 = _1681 * _1681;
        float _3387 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1684 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1557 = (((cbLight._m0[_1665].x * 0.3183098733425140380859375) * _1683) * _1684) + _1512;
        _1559 = (((cbLight._m0[_1665].y * 0.3183098733425140380859375) * _1683) * _1684) + _1514;
        _1561 = (((cbLight._m0[_1665].z * 0.3183098733425140380859375) * _1683) * _1684) + _1516;
    }
    uint _1563 = _1423 + 8u;
    float _1569 = cbLight._m0[_1423].x + _322;
    float _1570 = cbLight._m0[_1423].y + _323;
    float _1571 = cbLight._m0[_1423].z + _324;
    float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
    float _1579 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1423].xyz));
    float _3403 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
    float _1582 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _1583 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _1584 = dot(vec3(cbLight._m0[_1423].xyz), vec3(_1569 * _1575, _1570 * _1575, _1571 * _1575));
    float _3425 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1595 = (exp2(log2(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1601 = (0.5 / ((_1582 + 9.9999999392252902907785028219223e-09) + _1583)) * _1582;
    float _3436 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _1603 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.31831014156341552734375;
    uint _1617 = _1423 + 9u;
    float _1623 = cbLight._m0[_1465].x + _322;
    float _1624 = cbLight._m0[_1465].y + _323;
    float _1625 = cbLight._m0[_1465].z + _324;
    float _1629 = inversesqrt(dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625)));
    float _1633 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1465].xyz));
    float _3447 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1636 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _1637 = dot(vec3(cbLight._m0[_1465].xyz), vec3(_1623 * _1629, _1624 * _1629, _1625 * _1629));
    float _3458 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1646 = (exp2(log2(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1650 = (0.5 / ((_1636 + 9.9999999392252902907785028219223e-09) + _1583)) * _1636;
    float _3469 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1652 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.31831014156341552734375;
    float _1662 = (((_1646 * cbLight._m0[_1617].x) * _1652) * _1447) + ((((cbLight._m0[_1563].x * _1415) * _1595) * _1603) * _1461);
    float _1663 = (((_1646 * cbLight._m0[_1617].y) * _1652) * _1447) + ((((cbLight._m0[_1563].y * _1416) * _1595) * _1603) * _1461);
    float _1664 = (((_1646 * cbLight._m0[_1617].z) * _1652) * _1447) + ((((cbLight._m0[_1563].z * _1417) * _1595) * _1603) * _1461);
    float _1726;
    float _1728;
    float _1730;
    if (_1501)
    {
        _1726 = _1662;
        _1728 = _1663;
        _1730 = _1664;
    }
    else
    {
        uint _1732 = _1423 + 10u;
        uint _1738 = _1423 + 2u;
        float _1744 = cbLight._m0[_1738].x + _322;
        float _1745 = cbLight._m0[_1738].y + _323;
        float _1746 = cbLight._m0[_1738].z + _324;
        float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
        float _1754 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1738].xyz));
        float _3480 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1757 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1758 = dot(vec3(cbLight._m0[_1738].xyz), vec3(_1744 * _1750, _1745 * _1750, _1746 * _1750));
        float _3491 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = (exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1771 = (0.5 / ((_1757 + 9.9999999392252902907785028219223e-09) + _1583)) * _1757;
        float _3502 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1773 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * 0.31831014156341552734375;
        float _1774 = isnan(1.0) ? _1439 : (isnan(_1439) ? 1.0 : min(_1439, 1.0));
        _1726 = (((_1767 * cbLight._m0[_1732].x) * _1773) * _1774) + _1662;
        _1728 = (((_1767 * cbLight._m0[_1732].y) * _1773) * _1774) + _1663;
        _1730 = (((_1767 * cbLight._m0[_1732].z) * _1773) * _1774) + _1664;
    }
    float _1809;
    float _1811;
    float _1813;
    if (_1519)
    {
        _1809 = _1726;
        _1811 = _1728;
        _1813 = _1730;
    }
    else
    {
        uint _1820 = _1423 + 11u;
        uint _1826 = _1423 + 3u;
        float _1832 = cbLight._m0[_1826].x + _322;
        float _1833 = cbLight._m0[_1826].y + _323;
        float _1834 = cbLight._m0[_1826].z + _324;
        float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
        float _1842 = dot(vec3(_242, _243, _244), vec3(cbLight._m0[_1826].xyz));
        float _3518 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1845 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1846 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_1832 * _1838, _1833 * _1838, _1834 * _1838));
        float _3529 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = (exp2(log2(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1859 = (0.5 / ((_1845 + 9.9999999392252902907785028219223e-09) + _1583)) * _1845;
        float _3540 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1861 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.31831014156341552734375;
        float _1862 = isnan(1.0) ? _1440 : (isnan(_1440) ? 1.0 : min(_1440, 1.0));
        _1809 = (((_1855 * cbLight._m0[_1820].x) * _1861) * _1862) + _1726;
        _1811 = (((_1855 * cbLight._m0[_1820].y) * _1861) * _1862) + _1728;
        _1813 = (((_1855 * cbLight._m0[_1820].z) * _1861) * _1862) + _1730;
    }
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    if (_1421.y == 0u)
    {
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1937;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1937;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1937;
        uvec4 _1952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1953 = _1952.x;
        uint _1964 = uint((float(_1952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _331) / _1953))) + floor(float(uint(cbSceneParam._m0[85u].x * _330) / _1953)));
        float _1974 = (log2(_1940 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1975 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        uint _1978 = uint(isnan(14.0) ? _1975 : (isnan(_1975) ? 14.0 : min(_1975, 14.0)));
        uvec4 _1983 = texelFetch(g_lightClusterGridBuffer, int(((_1978 << 2u) + (_1964 << 6u)) >> 2u));
        uint _1984 = _1983.x;
        uint _1985 = _1952.z;
        float _2120;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        if (((((1u << ((_1985 >> 4u) & 15u)) + 4294967295u) & _1984) == 0u) || ((_1985 & 240u) == 0u))
        {
            _2120 = 0.0;
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
        }
        else
        {
            float _2121;
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2272 = 0.0;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            float _2277 = 0.0;
            uint _2278 = 0u;
            uint _2287;
            bool _2288;
            for (;;)
            {
                _2287 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2278 << 2u)) >> 2u)).x;
                _2288 = _2287 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2288)
                {
                    frontier_phi_61_pred = _2272;
                    frontier_phi_61_pred_1 = _2277;
                    frontier_phi_61_pred_2 = _2276;
                    frontier_phi_61_pred_3 = _2275;
                    frontier_phi_61_pred_4 = _2274;
                    frontier_phi_61_pred_5 = _2273;
                }
                else
                {
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    float _2401;
                    uint _2402;
                    _2396 = _2272;
                    _2397 = _2273;
                    _2398 = _2274;
                    _2399 = _2275;
                    _2400 = _2276;
                    _2401 = _2277;
                    _2402 = _2287;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    for (;;)
                    {
                        uint _2406 = uint(findLSB(_2402)) + (_2278 << 5u);
                        uint _2403 = (_2402 + 4294967295u) & _2402;
                        uint _2408 = _2406 * 48u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 3u)).x));
                        uint _2428 = (_2406 * 48u) + 4u;
                        vec4 _2441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 3u)).x));
                        uint _2447 = (_2406 * 48u) + 8u;
                        vec3 _2458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2447)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2447 + 2u)).x));
                        float _2462 = _2422.x - _1938;
                        float _2463 = _2422.y - _1939;
                        float _2464 = _2422.z - _1940;
                        float _2465 = dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464));
                        float _2468 = inversesqrt(_2465);
                        float _2477 = 1.0 - (_2465 * _2422.w);
                        float _3566 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
                        float _2478 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
                        float _2479 = sqrt(_2465) * _2441.w;
                        float _2482 = 1.39999997615814208984375 / (_2479 + 1.39999997615814208984375);
                        float _2483 = _2482 * _2482;
                        float _2486 = ((1.0 - _2483) * dot(vec3(_352, _355, _358), vec3(_2468 * _2462, _2468 * _2463, _2468 * _2464))) + _2483;
                        float _2489 = _2479 * _2479;
                        float _2493 = ((isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0))) * _2478) / ((_2489 * 0.699999988079071044921875) + 1.0);
                        float _2497 = (-0.0) - _1938;
                        float _2498 = (-0.0) - _1939;
                        float _2499 = (-0.0) - _1940;
                        float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
                        float _2507 = dot(vec3(_352, _355, _358), vec3(_2503 * _2497, _2503 * _2498, _2503 * _2499));
                        float _3582 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _3593 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
                        float _2511 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
                        float _2515 = (0.5 / (((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) + 9.9999999392252902907785028219223e-09) + _2511)) * _2511;
                        float _3604 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                        float _2524 = (((isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 3.1415927410125732421875) / ((_2489 * 2.1991131305694580078125) + 3.141590118408203125)) * _2478;
                        _2331 = (_2493 * _2441.x) + _2399;
                        _2332 = (_2493 * _2441.y) + _2400;
                        _2333 = (_2493 * _2441.z) + _2401;
                        _2328 = (_2524 * _2458.x) + _2396;
                        _2329 = (_2524 * _2458.y) + _2397;
                        _2330 = (_2524 * _2458.z) + _2398;
                        if (_2403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2396 = _2328;
                            _2397 = _2329;
                            _2398 = _2330;
                            _2399 = _2331;
                            _2400 = _2332;
                            _2401 = _2333;
                            _2402 = _2403;
                        }
                    }
                    frontier_phi_61_pred = _2328;
                    frontier_phi_61_pred_1 = _2333;
                    frontier_phi_61_pred_2 = _2332;
                    frontier_phi_61_pred_3 = _2331;
                    frontier_phi_61_pred_4 = _2330;
                    frontier_phi_61_pred_5 = _2329;
                }
                _2121 = frontier_phi_61_pred;
                _2131 = frontier_phi_61_pred_1;
                _2129 = frontier_phi_61_pred_2;
                _2127 = frontier_phi_61_pred_3;
                _2125 = frontier_phi_61_pred_4;
                _2123 = frontier_phi_61_pred_5;
                uint _2279 = _2278 + 1u;
                if (_2279 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2272 = _2121;
                    _2273 = _2123;
                    _2274 = _2125;
                    _2275 = _2127;
                    _2276 = _2129;
                    _2277 = _2131;
                    _2278 = _2279;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2120 = _2121;
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
        }
        uvec4 _2134 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2135 = _2134.z;
        uint _2137 = (_2135 >> 8u) & 15u;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        if (((4294967295u << _2137) & _1984) == 0u)
        {
            _2243 = _2120;
            _2245 = _2122;
            _2247 = _2124;
            _2249 = _2126;
            _2251 = _2128;
            _2253 = _2130;
        }
        else
        {
            float _2268 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2137 < ((_2135 >> 12u) & 15u))
            {
                float _2244;
                float _2246;
                float _2248;
                float _2250;
                float _2252;
                float _2254;
                float _2379 = _2120;
                float _2380 = _2122;
                float _2381 = _2124;
                float _2382 = _2126;
                float _2383 = _2128;
                float _2384 = _2130;
                uint _2385 = _2137;
                uint _2394;
                bool _2395;
                for (;;)
                {
                    _2394 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2385 << 2u)) >> 2u)).x;
                    _2395 = _2394 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2395)
                    {
                        frontier_phi_67_pred = _2382;
                        frontier_phi_67_pred_1 = _2383;
                        frontier_phi_67_pred_2 = _2384;
                        frontier_phi_67_pred_3 = _2381;
                        frontier_phi_67_pred_4 = _2380;
                        frontier_phi_67_pred_5 = _2379;
                    }
                    else
                    {
                        float _2529;
                        float _2530;
                        float _2531;
                        float _2532;
                        float _2533;
                        float _2534;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2542 = _2379;
                        float _2543 = _2380;
                        float _2544 = _2381;
                        float _2545 = _2382;
                        float _2546 = _2383;
                        float _2547 = _2384;
                        uint _2548 = _2394;
                        uint _2549;
                        vec4 _2574;
                        float _2575;
                        vec4 _2590;
                        vec3 _2602;
                        vec4 _2618;
                        vec4 _2634;
                        float _2681;
                        bool _2682;
                        for (;;)
                        {
                            uint _2559 = ((_2385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2548));
                            _2549 = (_2548 + 4294967295u) & _2548;
                            uint _2561 = _2559 * 40u;
                            _2574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2561 + 3u)).x));
                            _2575 = _2574.w;
                            uint _2577 = (_2559 * 40u) + 4u;
                            _2590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2577 + 3u)).x));
                            uint _2592 = (_2559 * 40u) + 8u;
                            _2602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x));
                            uint _2605 = (_2559 * 40u) + 16u;
                            _2618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2605 + 3u)).x));
                            uint _2621 = (_2559 * 40u) + 20u;
                            _2634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2621 + 3u)).x));
                            uint _2637 = (_2559 * 40u) + 24u;
                            vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            uint _2656 = (_2559 * 40u) + 28u;
                            vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2656 + 3u)).x));
                            _2681 = fma(_1940, _2669.z, fma(_1939, _2669.y, _2669.x * _1938)) + _2669.w;
                            _2682 = !((fma(_1940, _2650.z, fma(_1939, _2650.y, _2650.x * _1938)) + _2650.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2682)
                            {
                                float _2709 = _2574.x - _1938;
                                float _2710 = _2574.y - _1939;
                                float _2711 = _2574.z - _1940;
                                float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                                float _2715 = inversesqrt(_2712);
                                float _2716 = _2715 * _2709;
                                float _2717 = _2715 * _2710;
                                float _2718 = _2715 * _2711;
                                float _2722 = 1.0 - (_2712 / (_2575 * _2575));
                                float _3615 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                                float _2723 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
                                float _2727 = sqrt(_2712) * _2590.w;
                                float _2729 = 1.39999997615814208984375 / (_2727 + 1.39999997615814208984375);
                                float _2730 = _2729 * _2729;
                                float _2731 = 1.0 - _2730;
                                float _2733 = (_2731 * dot(vec3(_2716, _2717, _2718), vec3(_352, _355, _358))) + _2730;
                                float _2736 = _2727 * _2727;
                                float _2740 = (fma(_1940, _2618.z, fma(_1939, _2618.y, _2618.x * _1938)) + _2618.w) / _2681;
                                float _2741 = (fma(_1940, _2634.z, fma(_1939, _2634.y, _2634.x * _1938)) + _2634.w) / _2681;
                                float _2745 = 1.0 - dot(vec2(_2740, _2741), vec2(_2740, _2741));
                                float _3631 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2746 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
                                float _2747 = _2746 * (((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2723) / ((_2736 * 0.699999988079071044921875) + 1.0));
                                float _2757 = dot(vec3(_352, _355, _358), vec3((-0.0) - (_1938 * _2268), (-0.0) - (_1939 * _2268), (-0.0) - (_1940 * _2268)));
                                float _3642 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                                float _2765 = (_2731 * dot(vec3(_352, _355, _358), vec3(_2716, _2717, _2718))) + _2730;
                                float _3653 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                                float _2766 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
                                float _2770 = (0.5 / (((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) + 9.9999999392252902907785028219223e-09) + _2766)) * _2766;
                                float _3664 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                                float _2777 = (_2746 * _2723) * (((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 3.1415927410125732421875) / ((_2736 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2777 * _2602.x;
                                frontier_phi_73_pred_1 = _2777 * _2602.y;
                                frontier_phi_73_pred_2 = _2747 * _2590.z;
                                frontier_phi_73_pred_3 = _2747 * _2590.y;
                                frontier_phi_73_pred_4 = _2747 * _2590.x;
                                frontier_phi_73_pred_5 = _2777 * _2602.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2781 = frontier_phi_73_pred;
                            _2782 = frontier_phi_73_pred_1;
                            _2786 = frontier_phi_73_pred_2;
                            _2785 = frontier_phi_73_pred_3;
                            _2784 = frontier_phi_73_pred_4;
                            _2783 = frontier_phi_73_pred_5;
                            _2532 = _2784 + _2545;
                            _2533 = _2785 + _2546;
                            _2534 = _2786 + _2547;
                            _2529 = _2781 + _2542;
                            _2530 = _2782 + _2543;
                            _2531 = _2783 + _2544;
                            if (_2549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2542 = _2529;
                                _2543 = _2530;
                                _2544 = _2531;
                                _2545 = _2532;
                                _2546 = _2533;
                                _2547 = _2534;
                                _2548 = _2549;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2532;
                        frontier_phi_67_pred_1 = _2533;
                        frontier_phi_67_pred_2 = _2534;
                        frontier_phi_67_pred_3 = _2531;
                        frontier_phi_67_pred_4 = _2530;
                        frontier_phi_67_pred_5 = _2529;
                    }
                    _2250 = frontier_phi_67_pred;
                    _2252 = frontier_phi_67_pred_1;
                    _2254 = frontier_phi_67_pred_2;
                    _2248 = frontier_phi_67_pred_3;
                    _2246 = frontier_phi_67_pred_4;
                    _2244 = frontier_phi_67_pred_5;
                    uint _2386 = _2385 + 1u;
                    if (_2386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2379 = _2244;
                        _2380 = _2246;
                        _2381 = _2248;
                        _2382 = _2250;
                        _2383 = _2252;
                        _2384 = _2254;
                        _2385 = _2386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2252;
                frontier_phi_55_56_ladder_1 = _2254;
                frontier_phi_55_56_ladder_2 = _2250;
                frontier_phi_55_56_ladder_3 = _2248;
                frontier_phi_55_56_ladder_4 = _2246;
                frontier_phi_55_56_ladder_5 = _2244;
            }
            else
            {
                frontier_phi_55_56_ladder = _2128;
                frontier_phi_55_56_ladder_1 = _2130;
                frontier_phi_55_56_ladder_2 = _2126;
                frontier_phi_55_56_ladder_3 = _2124;
                frontier_phi_55_56_ladder_4 = _2122;
                frontier_phi_55_56_ladder_5 = _2120;
            }
            _2243 = frontier_phi_55_56_ladder_5;
            _2245 = frontier_phi_55_56_ladder_4;
            _2247 = frontier_phi_55_56_ladder_3;
            _2249 = frontier_phi_55_56_ladder_2;
            _2251 = frontier_phi_55_56_ladder;
            _2253 = frontier_phi_55_56_ladder_1;
        }
        float _2258 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
        _1997 = (_2258 * _2249) + _1557;
        _1999 = (_2258 * _2251) + _1559;
        _2001 = (_2258 * _2253) + _1561;
        _2003 = ((_2243 * 0.039999999105930328369140625) * _2258) + _1809;
        _2005 = ((_2245 * 0.039999999105930328369140625) * _2258) + _1811;
        _2007 = ((_2247 * 0.039999999105930328369140625) * _2258) + _1813;
    }
    else
    {
        _1997 = _1557;
        _1999 = _1559;
        _2001 = _1561;
        _2003 = _1809;
        _2005 = _1811;
        _2007 = _1813;
    }
    uint _2013 = _372 + uint(cbMatDynParam._m0[0u].w);
    float _2021 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _233.x) * cbInstanceData._m0[_2013].x;
    float _2024 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _233.y) * cbInstanceData._m0[_2013].y;
    float _2027 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _233.z) * cbInstanceData._m0[_2013].z;
    float _3680 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3691 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3702 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _2044 = (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1997 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _396))) + ((_2003 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _1175)) * cbPerFrame._m0[3u].x)) + _2021;
    float _2046 = (_2024 + ((_2005 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _1175)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1999 + ((isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0))) * _396)));
    float _2048 = (_2027 + ((_2007 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1175)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_2001 + ((isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))) * _396)));
    float _3728 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2061 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    uint _2062 = _371 + 6u;
    float _2070 = _330 / cbSceneParam._m0[86u].x;
    float _2071 = _331 / cbSceneParam._m0[86u].y;
    vec4 _2085 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, (log2((isnan(cbSceneParam._m0[77u].w) ? _264 : (isnan(_264) ? cbSceneParam._m0[77u].w : min(_264, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2087 = _2085.x;
    float _2088 = _2085.y;
    float _2089 = _2085.z;
    float _2090 = _2085.w;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_264 > cbSceneParam._m0[78u].w)
    {
        float _2145 = isnan(_264) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _264 : min(cbSceneParam._m0[80u].w, _264));
        float _2146 = _2145 / _264;
        float _2157 = _2146 * _315;
        float _2158 = _316 * _2146;
        float _2159 = (-0.0) - _2158;
        float _2161 = _2146 * _317;
        float _2163 = (cbSceneParam._m0[77u].w * _2159) / _2145;
        float _2164 = _2163 + cbSceneParam._m0[79u].w;
        float _2165 = cbSceneParam._m0[79u].w - _2158;
        float _2171 = sqrt(((_2157 * _2157) + (_2158 * _2158)) + (_2161 * _2161));
        float _2174 = (1.0 - (cbSceneParam._m0[77u].w / _2145)) * _2171;
        float _2179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2341;
        if (abs((_2159 - _2163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2341 = ((((_2164 > 0.0) ? exp2(_2179 * _2164) : (2.0 - exp2(_2181 * _2164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2174;
        }
        else
        {
            float _2301 = 1.0 / cbSceneParam._m0[80u].x;
            float _2302 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : max(_2164, _2165));
            float _2303 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : min(_2164, _2165));
            float _2312 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : min(_2302, 0.0));
            float _2313 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : min(_2303, 0.0));
            _2341 = ((abs(_2171 / _2159) * cbSceneParam._m0[80u].y) * ((((_2312 - _2313) * 2.0) - ((exp2(_2179 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)))) - exp2(_2179 * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))))) * _2301)) - ((exp2(_2181 * _2312) - exp2(_2181 * _2313)) * _2301))) + (_2174 * cbSceneParam._m0[80u].z);
        }
        vec4 _2343 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2070, _2071, 1.0), 0.0);
        float _2352 = exp2((_2341 * (-1.44269502162933349609375)) * (1.0 - _2343.w));
        float _2353 = log2(_2352);
        float _2369 = log2(_2090);
        _2183 = (exp2(_2369 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].x)) * _2343.x) / cbSceneParam._m0[78u].x)) + _2087;
        _2185 = (exp2(_2369 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].y)) * _2343.y) / cbSceneParam._m0[78u].y)) + _2088;
        _2187 = (exp2(_2369 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].z)) * _2343.z) / cbSceneParam._m0[78u].z)) + _2089;
        _2189 = _2352 * _2090;
    }
    else
    {
        _2183 = _2087;
        _2185 = _2088;
        _2187 = _2089;
        _2189 = _2090;
    }
    float _2201 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2202 = _2201 == 3.0;
    float _2204 = log2(_2189);
    float _2208 = exp2(_2204 * cbSceneParam._m0[78u].x);
    float _2209 = exp2(_2204 * cbSceneParam._m0[78u].y);
    float _2210 = exp2(_2204 * cbSceneParam._m0[78u].z);
    float _2211 = _2208 * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    float _2212 = _2209 * (isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)));
    float _2213 = _2210 * (isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)));
    float _2222 = (_2201 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2222 * (_2202 ? _2211 : (_2211 + (cbSceneParam._m0[72u].w * _2183)));
    SV_Target.y = _2222 * (_2202 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
    SV_Target.z = _2222 * (_2202 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
    SV_Target.w = cbInstanceData._m0[_2062].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2021) * _2061) * _2208) * _2222;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2024) * _2061) * _2209) * _2222;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2027) * _2061) * _2210) * _2222;
    SV_Target_1.w = cbInstanceData._m0[_2062].w;
}


