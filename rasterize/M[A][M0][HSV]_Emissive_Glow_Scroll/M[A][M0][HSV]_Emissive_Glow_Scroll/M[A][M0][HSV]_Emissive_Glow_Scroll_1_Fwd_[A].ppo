#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _789;
float _2996;
float _2997;
float _2998;
float _2999;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3008 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _238 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
    float _246 = (((_238 * _238) * (3.0 - (_238 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _250 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _251 = _250 * _169;
    float _252 = _250 * _170;
    float _253 = _250 * _171;
    float _3019 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3030 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3041 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _272 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _313 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _323 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _313);
    float _324 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _313);
    float _325 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _313);
    float _329 = inversesqrt(dot(vec3(_323, _324, _325), vec3(_323, _324, _325)));
    float _330 = _323 * _329;
    float _331 = _324 * _329;
    float _332 = _325 * _329;
    vec4 _337 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _339 = _337.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _468 = sqrt(((_323 * _323) + (_324 * _324)) + (_325 * _325));
        float _474 = (cbMatDynParam._m0[5u].x * _468) + cbMatDynParam._m0[5u].y;
        float _3052 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
        float _475 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _479 = (cbMatDynParam._m0[5u].z * _468) + cbMatDynParam._m0[5u].w;
        float _3063 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0))) - _475)) + _475) < ((_339 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _351 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _352 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_253, cbSceneParam._m0[5u].z, fma(_252, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _251));
    float _375 = fma(_253, cbSceneParam._m0[6u].z, fma(_252, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _251));
    float _378 = fma(_253, cbSceneParam._m0[7u].z, fma(_252, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _251));
    uint _391 = uint(roundEven(NORMAL.w)) * 13u;
    uint _393 = _391 + 9u;
    uint _394 = _393 + uint(cbMatDynParam._m0[0u].w);
    float _400 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_394].x;
    float _401 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_394].y;
    float _402 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * cbInstanceData._m0[_394].z;
    float _3074 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _3085 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
    float _3096 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
    vec4 _414 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _351, cbSceneParam._m0[86u].y * _352));
    float _417 = _414.x * TEXCOORD.z;
    float _418 = dot(vec3(_251, _252, _253), vec3(_330, _331, _332));
    float _421 = _418 * 2.0;
    float _425 = (_421 * _251) - _330;
    float _426 = (_421 * _252) - _331;
    float _427 = (_421 * _253) - _332;
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _788;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _513 = fma(_457, cbModelParam._m0[26u].z, fma(_453, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _449));
        float _517 = fma(_457, cbModelParam._m0[27u].z, fma(_453, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _449));
        float _521 = fma(_457, cbModelParam._m0[28u].z, fma(_453, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _449));
        float _546 = _449 + _251;
        float _547 = _453 + _252;
        float _548 = _457 + _253;
        float _558 = fma(_548, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546)) - _513;
        float _559 = fma(_548, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546)) - _517;
        float _560 = fma(_548, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546)) - _521;
        float _564 = inversesqrt(dot(vec3(_558, _559, _560), vec3(_558, _559, _560)));
        float _577 = ((_564 * _558) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_513 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _578 = ((_564 * _559) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_517 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _579 = ((_564 * _560) / cbModelParam._m0[34u].z) + ((((((_521 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_577, _578, _579), 0.0);
        float _616 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_582.x + (-0.5));
        float _618 = _616 * (_582.y + (-0.5));
        float _619 = _616 * (_582.z + (-0.5));
        float _626 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _627 = _626 * (_589.x + (-0.5));
        float _628 = _626 * (_589.y + (-0.5));
        float _629 = _626 * (_589.z + (-0.5));
        float _636 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_596.x + (-0.5));
        float _638 = _636 * (_596.y + (-0.5));
        float _639 = _636 * (_596.z + (-0.5));
        float _646 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_603.x + (-0.5));
        float _648 = _646 * (_603.y + (-0.5));
        float _649 = _646 * (_603.z + (-0.5));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = _617 * 0.5;
        float _654 = _627 * 0.5;
        float _655 = _637 * 0.5;
        float _656 = dot(vec3(_653, _654, _655), vec3(_653, _654, _655));
        float _661 = (_656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_656);
        float _670 = (dot(vec3(_251, _252, _253), vec3(_661 * _653, _661 * _654, _661 * _655)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _680 = sqrt(((_654 * _654) + (_653 * _653)) + (_655 * _655)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _682 = _681 * 2.0;
        float _686 = (1.0 - _681) / (_681 + 1.0);
        float _3144 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _696 = ((((1.0 - _687) * (_682 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_682 + 1.0))) + _687) * _650;
        float _697 = _618 * 0.5;
        float _698 = _628 * 0.5;
        float _699 = _638 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _713 = (dot(vec3(_251, _252, _253), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _722 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_651 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3177 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_724 + 1.0))) + _729) * _651;
        float _739 = _619 * 0.5;
        float _740 = _629 * 0.5;
        float _741 = _639 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(_251, _252, _253), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3188 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3199 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3210 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))) * (_766 + 1.0))) + _771) * _652;
        _788 = _619;
        _790 = _618;
        _791 = _617;
        _792 = _629;
        _793 = _628;
        _794 = _627;
        _795 = _639;
        _796 = _638;
        _797 = _637;
        _798 = _652;
        _799 = _651;
        _800 = _650;
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0)));
        _802 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
    }
    else
    {
        _788 = _789;
        _790 = _789;
        _791 = _789;
        _792 = _789;
        _793 = _789;
        _794 = _789;
        _795 = _789;
        _796 = _789;
        _797 = _789;
        _798 = _789;
        _799 = _789;
        _800 = _789;
        _801 = 0.0;
        _802 = 0.0;
        _803 = 0.0;
    }
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _832 = fma(_457, cbModelParam._m0[30u].z, fma(_453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _449));
        float _836 = fma(_457, cbModelParam._m0[31u].z, fma(_453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _449));
        float _840 = fma(_457, cbModelParam._m0[32u].z, fma(_453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _449));
        float _863 = _449 + _251;
        float _864 = _453 + _252;
        float _865 = _457 + _253;
        float _875 = fma(_865, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863)) - _832;
        float _876 = fma(_865, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863)) - _836;
        float _877 = fma(_865, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863)) - _840;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_832 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_836 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[35u].z) + ((((((_840 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _931 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_898.x + (-0.5));
        float _933 = _931 * (_898.y + (-0.5));
        float _934 = _931 * (_898.z + (-0.5));
        float _941 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_905.x + (-0.5));
        float _943 = _941 * (_905.y + (-0.5));
        float _944 = _941 * (_905.z + (-0.5));
        float _951 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_912.x + (-0.5));
        float _953 = _951 * (_912.y + (-0.5));
        float _954 = _951 * (_912.z + (-0.5));
        float _961 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_919.x + (-0.5));
        float _963 = _961 * (_919.y + (-0.5));
        float _964 = _961 * (_919.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_251, _252, _253), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3273 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_995 + 1.0))) + _1000) * _965;
        float _1010 = _933 * 0.5;
        float _1011 = _943 * 0.5;
        float _1012 = _953 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_251, _252, _253), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3306 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1037 + 1.0))) + _1042) * _966;
        float _1052 = _934 * 0.5;
        float _1053 = _944 * 0.5;
        float _1054 = _954 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_251, _252, _253), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3317 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3328 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3339 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (_1079 + 1.0))) + _1084) * _967;
        _1101 = _934;
        _1102 = _933;
        _1103 = _932;
        _1104 = _944;
        _1105 = _943;
        _1106 = _942;
        _1107 = _954;
        _1108 = _953;
        _1109 = _952;
        _1110 = _967;
        _1111 = _966;
        _1112 = _965;
        _1113 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1114 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _789;
        _1102 = _789;
        _1103 = _789;
        _1104 = _789;
        _1105 = _789;
        _1106 = _789;
        _1107 = _789;
        _1108 = _789;
        _1109 = _789;
        _1110 = _789;
        _1111 = _789;
        _1112 = _789;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1125 = (cbModelParam._m0[1u].x * (_1113 - _801)) + _801;
    float _1126 = (cbModelParam._m0[1u].x * (_1114 - _802)) + _802;
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _803)) + _803;
    float _1148 = fma(_1127, cbSceneParam._m0[89u].z, fma(_1126, cbSceneParam._m0[89u].y, _1125 * cbSceneParam._m0[89u].x));
    float _1151 = fma(_1127, cbSceneParam._m0[90u].z, fma(_1126, cbSceneParam._m0[90u].y, _1125 * cbSceneParam._m0[90u].x));
    float _1154 = fma(_1127, cbSceneParam._m0[91u].z, fma(_1126, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1125));
    float _1169 = _425 * 0.5;
    float _1170 = _426 * 0.5;
    float _1171 = _427 * 0.5;
    float _1172 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1175 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1102, _1105, _1108, _1111));
    float _1178 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_1101, _1104, _1107, _1110));
    float _1212;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1185 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_788, _792, _795, _798));
        float _1189 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_790, _793, _796, _799));
        float _1193 = dot(vec4(_1169, _1170, _1171, 1.0), vec4(_791, _794, _797, _800));
        float _1200 = dot(vec4(cbModelParam._m0[39u]), vec4(_1169, _1170, _1171, 1.0));
        _1212 = dot(vec3(isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1212 = 1.0;
    }
    float _1223;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1214 = dot(vec4(cbModelParam._m0[40u]), vec4(_1169, _1170, _1171, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1214) ? 0.0 : (isnan(0.0) ? _1214 : max(0.0, _1214))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1227 = (_1223 * cbModelParam._m0[1u].x) + (_1212 * (1.0 - cbModelParam._m0[1u].x));
    float _1236 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1317;
    float _1319;
    float _1321;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1284 = fma(_457, cbModelParam._m0[13u].z, fma(_453, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449)) + cbModelParam._m0[13u].w;
        float _1288 = fma(_457, cbModelParam._m0[14u].z, fma(_453, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449)) + cbModelParam._m0[14u].w;
        float _1292 = fma(_457, cbModelParam._m0[15u].z, fma(_453, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449)) + cbModelParam._m0[15u].w;
        float _1295 = fma(_427, cbModelParam._m0[13u].z, fma(_426, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _425));
        float _1298 = fma(_427, cbModelParam._m0[14u].z, fma(_426, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _425));
        float _1301 = fma(_427, cbModelParam._m0[15u].z, fma(_426, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _425));
        float _1327;
        if (_1295 > 0.0)
        {
            _1327 = abs((1.0 - _1284) / _1295);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1284 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1327 = frontier_phi_17_15_ladder;
        }
        float _1532;
        if (_1298 > 0.0)
        {
            _1532 = abs((1.0 - _1288) / _1298);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1298 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1288 + 1.0) / _1298);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1532 = frontier_phi_26_22_ladder;
        }
        float _1721;
        if (_1301 > 0.0)
        {
            _1721 = abs((1.0 - _1292) / _1301);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1292 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1721 = frontier_phi_38_33_ladder;
        }
        float _1723 = isnan(_1532) ? _1327 : (isnan(_1327) ? _1532 : min(_1327, _1532));
        float _1724 = isnan(_1721) ? _1723 : (isnan(_1723) ? _1721 : min(_1723, _1721));
        float _1728 = (_1724 * _1295) + _1284;
        float _1729 = (_1724 * _1298) + _1288;
        float _1730 = (_1724 * _1301) + _1292;
        float _1731 = _1724 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1731;
        float _1735 = _1731 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 > _1735) || ((_1729 < _1733) || ((_1728 < _1733) || (_1728 > _1735))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1730, cbModelParam._m0[9u].z, fma(_1729, cbModelParam._m0[9u].y, _1728 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1730, cbModelParam._m0[10u].z, fma(_1729, cbModelParam._m0[10u].y, _1728 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1730, cbModelParam._m0[11u].z, fma(_1729, cbModelParam._m0[11u].y, _1728 * cbModelParam._m0[11u].x))), _1236);
            frontier_phi_16_38_ladder = _1827.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1827.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1827.x * cbModelParam._m0[1u].y;
        }
        _1317 = frontier_phi_16_38_ladder_2;
        _1319 = frontier_phi_16_38_ladder_1;
        _1321 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_425, _426, _427), _1236);
        _1317 = _1305.x * cbModelParam._m0[1u].y;
        _1319 = _1305.y * cbModelParam._m0[1u].y;
        _1321 = _1305.z * cbModelParam._m0[1u].y;
    }
    float _1324 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1416;
    float _1418;
    float _1420;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1380 = fma(_457, cbModelParam._m0[21u].z, fma(_453, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449)) + cbModelParam._m0[21u].w;
        float _1384 = fma(_457, cbModelParam._m0[22u].z, fma(_453, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449)) + cbModelParam._m0[22u].w;
        float _1388 = fma(_457, cbModelParam._m0[23u].z, fma(_453, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449)) + cbModelParam._m0[23u].w;
        float _1391 = fma(_427, cbModelParam._m0[21u].z, fma(_426, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _425));
        float _1394 = fma(_427, cbModelParam._m0[22u].z, fma(_426, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _425));
        float _1397 = fma(_427, cbModelParam._m0[23u].z, fma(_426, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _425));
        float _1537;
        if (_1391 > 0.0)
        {
            _1537 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1537 = frontier_phi_28_24_ladder;
        }
        float _1748;
        if (_1394 > 0.0)
        {
            _1748 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1748 = frontier_phi_40_35_ladder;
        }
        float _1899;
        if (_1397 > 0.0)
        {
            _1899 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1899 = frontier_phi_49_46_ladder;
        }
        float _1901 = isnan(_1748) ? _1537 : (isnan(_1537) ? _1748 : min(_1537, _1748));
        float _1902 = isnan(_1899) ? _1901 : (isnan(_1901) ? _1899 : min(_1901, _1899));
        float _1906 = (_1902 * _1391) + _1380;
        float _1907 = (_1902 * _1394) + _1384;
        float _1908 = (_1902 * _1397) + _1388;
        float _1909 = _1902 * 9.9999997473787516355514526367188e-05;
        float _1910 = (-1.0) - _1909;
        float _1912 = _1909 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1908 > _1912) || ((_1908 < _1910) || ((_1907 > _1912) || ((_1907 < _1910) || ((_1906 < _1910) || (_1906 > _1912))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1908, cbModelParam._m0[17u].z, fma(_1907, cbModelParam._m0[17u].y, _1906 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1908, cbModelParam._m0[18u].z, fma(_1907, cbModelParam._m0[18u].y, _1906 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1908, cbModelParam._m0[19u].z, fma(_1907, cbModelParam._m0[19u].y, _1906 * cbModelParam._m0[19u].x))), _1324);
            frontier_phi_25_49_ladder = _2145.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2145.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2145.x * cbModelParam._m0[1u].z;
        }
        _1416 = frontier_phi_25_49_ladder_2;
        _1418 = frontier_phi_25_49_ladder_1;
        _1420 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_425, _426, _427), _1324);
        _1416 = _1400.x * cbModelParam._m0[1u].z;
        _1418 = _1400.y * cbModelParam._m0[1u].z;
        _1420 = _1400.z * cbModelParam._m0[1u].z;
    }
    float _1432 = _417 * 0.01200000010430812835693359375;
    float _1434 = _1432 * ((cbModelParam._m0[1u].w * (_1416 - _1317)) + _1317);
    float _1435 = _1432 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1436 = _1432 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1439 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1442 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1445 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, _1434 * cbSceneParam._m0[91u].x));
    uvec4 _1455 = floatBitsToUint(cbInstanceData._m0[_391 + 5u]);
    uint _1457 = _1455.x * 14u;
    uint _1458 = _1457 + 13u;
    float _1465 = _417 + (-1.0);
    float _1470 = (cbLight._m0[_1458].x * _1465) + 1.0;
    float _1471 = (cbLight._m0[_1458].y * _1465) + 1.0;
    float _1472 = (cbLight._m0[_1458].z * _1465) + 1.0;
    float _1473 = (cbLight._m0[_1458].w * _1465) + 1.0;
    uint _1474 = _1457 + 5u;
    float _1480 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
    uint _1484 = _1457 + 4u;
    float _1491 = isnan(1.0) ? _1470 : (isnan(_1470) ? 1.0 : min(_1470, 1.0));
    uint _1495 = _1457 | 1u;
    float _1506 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_251, _252, _253));
    float _1509 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_251, _252, _253));
    float _3475 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
    float _3486 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1514 = (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 0.3183098733425140380859375;
    float _1516 = (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * 0.3183098733425140380859375;
    float _1523 = ((cbLight._m0[_1474].x * _1480) * _1516) + ((cbLight._m0[_1484].x * _1491) * _1514);
    float _1524 = ((_1480 * cbLight._m0[_1474].y) * _1516) + ((_1491 * cbLight._m0[_1484].y) * _1514);
    float _1525 = ((_1480 * cbLight._m0[_1474].z) * _1516) + ((_1491 * cbLight._m0[_1484].z) * _1514);
    uvec4 _1529 = floatBitsToUint(cbLight._m0[_1457 + 12u]);
    bool _1531 = _1529.x == 0u;
    float _1542;
    float _1544;
    float _1546;
    if (_1531)
    {
        _1542 = _1523;
        _1544 = _1524;
        _1546 = _1525;
    }
    else
    {
        uint _1550 = _1457 + 6u;
        float _1566 = (dot(vec3(cbLight._m0[_1457 + 2u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _1567 = _1566 * _1566;
        float _3497 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1569 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1542 = (((cbLight._m0[_1550].x * 0.3183098733425140380859375) * _1568) * _1569) + _1523;
        _1544 = (((cbLight._m0[_1550].y * 0.3183098733425140380859375) * _1568) * _1569) + _1524;
        _1546 = (((cbLight._m0[_1550].z * 0.3183098733425140380859375) * _1568) * _1569) + _1525;
    }
    bool _1549 = _1529.y == 0u;
    float _1587;
    float _1589;
    float _1591;
    if (_1549)
    {
        _1587 = _1542;
        _1589 = _1544;
        _1591 = _1546;
    }
    else
    {
        uint _1692 = _1457 + 7u;
        float _1708 = (dot(vec3(cbLight._m0[_1457 + 3u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _1709 = _1708 * _1708;
        float _3513 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1711 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1587 = (((cbLight._m0[_1692].x * 0.3183098733425140380859375) * _1710) * _1711) + _1542;
        _1589 = (((cbLight._m0[_1692].y * 0.3183098733425140380859375) * _1710) * _1711) + _1544;
        _1591 = (((cbLight._m0[_1692].z * 0.3183098733425140380859375) * _1710) * _1711) + _1546;
    }
    uint _1593 = _1457 + 8u;
    float _1599 = cbLight._m0[_1457].x + _330;
    float _1600 = cbLight._m0[_1457].y + _331;
    float _1601 = cbLight._m0[_1457].z + _332;
    float _1605 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
    float _1609 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1457].xyz));
    float _3529 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1612 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _1613 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _1614 = dot(vec3(cbLight._m0[_1457].xyz), vec3(_1599 * _1605, _1600 * _1605, _1601 * _1605));
    float _3551 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1625 = (exp2(log2(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1631 = (0.5 / ((_1612 + 9.9999999392252902907785028219223e-09) + _1613)) * _1612;
    float _3562 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1633 = (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.31831014156341552734375;
    uint _1644 = _1457 + 9u;
    float _1650 = cbLight._m0[_1495].x + _330;
    float _1651 = cbLight._m0[_1495].y + _331;
    float _1652 = cbLight._m0[_1495].z + _332;
    float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
    float _1660 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1495].xyz));
    float _3573 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1663 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1664 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_1650 * _1656, _1651 * _1656, _1652 * _1656));
    float _3584 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1673 = (exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1677 = (0.5 / ((_1663 + 9.9999999392252902907785028219223e-09) + _1613)) * _1663;
    float _3595 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1679 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.31831014156341552734375;
    float _1689 = (((_1673 * cbLight._m0[_1644].x) * _1679) * _1480) + (((_1625 * cbLight._m0[_1593].x) * _1633) * _1491);
    float _1690 = (((_1673 * cbLight._m0[_1644].y) * _1679) * _1480) + (((_1625 * cbLight._m0[_1593].y) * _1633) * _1491);
    float _1691 = (((_1673 * cbLight._m0[_1644].z) * _1679) * _1480) + (((_1625 * cbLight._m0[_1593].z) * _1633) * _1491);
    float _1753;
    float _1755;
    float _1757;
    if (_1531)
    {
        _1753 = _1689;
        _1755 = _1690;
        _1757 = _1691;
    }
    else
    {
        uint _1759 = _1457 + 10u;
        uint _1765 = _1457 + 2u;
        float _1771 = cbLight._m0[_1765].x + _330;
        float _1772 = cbLight._m0[_1765].y + _331;
        float _1773 = cbLight._m0[_1765].z + _332;
        float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
        float _1781 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1765].xyz));
        float _3606 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1784 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1785 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1771 * _1777, _1772 * _1777, _1773 * _1777));
        float _3617 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1798 = (0.5 / ((_1784 + 9.9999999392252902907785028219223e-09) + _1613)) * _1784;
        float _3628 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1800 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
        float _1801 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1753 = (((_1794 * cbLight._m0[_1759].x) * _1800) * _1801) + _1689;
        _1755 = (((_1794 * cbLight._m0[_1759].y) * _1800) * _1801) + _1690;
        _1757 = (((_1794 * cbLight._m0[_1759].z) * _1800) * _1801) + _1691;
    }
    float _1836;
    float _1838;
    float _1840;
    if (_1549)
    {
        _1836 = _1753;
        _1838 = _1755;
        _1840 = _1757;
    }
    else
    {
        uint _1847 = _1457 + 11u;
        uint _1853 = _1457 + 3u;
        float _1859 = cbLight._m0[_1853].x + _330;
        float _1860 = cbLight._m0[_1853].y + _331;
        float _1861 = cbLight._m0[_1853].z + _332;
        float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
        float _1869 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1853].xyz));
        float _3644 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1872 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1873 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_1859 * _1865, _1860 * _1865, _1861 * _1865));
        float _3655 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1886 = (0.5 / ((_1872 + 9.9999999392252902907785028219223e-09) + _1613)) * _1872;
        float _3666 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1888 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.31831014156341552734375;
        float _1889 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1836 = (((_1882 * cbLight._m0[_1847].x) * _1888) * _1889) + _1753;
        _1838 = (((_1882 * cbLight._m0[_1847].y) * _1888) * _1889) + _1755;
        _1840 = (((_1882 * cbLight._m0[_1847].z) * _1888) * _1889) + _1757;
    }
    float _2024;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    if (_1455.y == 0u)
    {
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1964;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1964;
        float _1967 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1964;
        uvec4 _1979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1980 = _1979.x;
        uint _1991 = uint((float(_1979.y) * floor(float(uint(cbSceneParam._m0[85u].y * _352) / _1980))) + floor(float(uint(cbSceneParam._m0[85u].x * _351) / _1980)));
        float _2001 = (log2(_1967 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2002 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        uint _2005 = uint(isnan(14.0) ? _2002 : (isnan(_2002) ? 14.0 : min(_2002, 14.0)));
        uvec4 _2010 = texelFetch(g_lightClusterGridBuffer, int(((_2005 << 2u) + (_1991 << 6u)) >> 2u));
        uint _2011 = _2010.x;
        uint _2012 = _1979.z;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        if (((((1u << ((_2012 >> 4u) & 15u)) + 4294967295u) & _2011) == 0u) || ((_2012 & 240u) == 0u))
        {
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
        }
        else
        {
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            uint _2316 = 0u;
            uint _2325;
            bool _2326;
            for (;;)
            {
                _2325 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2316 << 2u)) >> 2u)).x;
                _2326 = _2325 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2326)
                {
                    frontier_phi_66_pred = _2310;
                    frontier_phi_66_pred_1 = _2315;
                    frontier_phi_66_pred_2 = _2314;
                    frontier_phi_66_pred_3 = _2313;
                    frontier_phi_66_pred_4 = _2312;
                    frontier_phi_66_pred_5 = _2311;
                }
                else
                {
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    uint _2461;
                    _2455 = _2310;
                    _2456 = _2311;
                    _2457 = _2312;
                    _2458 = _2313;
                    _2459 = _2314;
                    _2460 = _2315;
                    _2461 = _2325;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    for (;;)
                    {
                        uint _2465 = uint(findLSB(_2461)) + (_2316 << 5u);
                        uint _2462 = (_2461 + 4294967295u) & _2461;
                        uint _2467 = _2465 * 48u;
                        vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2467)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2467 + 3u)).x));
                        uint _2487 = (_2465 * 48u) + 4u;
                        vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2487)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2487 + 3u)).x));
                        uint _2506 = (_2465 * 48u) + 8u;
                        vec3 _2517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x));
                        float _2521 = _2481.x - _1965;
                        float _2522 = _2481.y - _1966;
                        float _2523 = _2481.z - _1967;
                        float _2524 = dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523));
                        float _2527 = inversesqrt(_2524);
                        float _2536 = 1.0 - (_2524 * _2481.w);
                        float _3692 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                        float _2537 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
                        float _2538 = sqrt(_2524) * _2500.w;
                        float _2541 = 1.39999997615814208984375 / (_2538 + 1.39999997615814208984375);
                        float _2542 = _2541 * _2541;
                        float _2545 = ((1.0 - _2542) * dot(vec3(_372, _375, _378), vec3(_2527 * _2521, _2527 * _2522, _2527 * _2523))) + _2542;
                        float _2548 = _2538 * _2538;
                        float _2552 = ((isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))) * _2537) / ((_2548 * 0.699999988079071044921875) + 1.0);
                        float _2556 = (-0.0) - _1965;
                        float _2557 = (-0.0) - _1966;
                        float _2558 = (-0.0) - _1967;
                        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
                        float _2566 = dot(vec3(_372, _375, _378), vec3(_2562 * _2556, _2562 * _2557, _2562 * _2558));
                        float _3708 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _3719 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                        float _2570 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                        float _2574 = (0.5 / (((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) + 9.9999999392252902907785028219223e-09) + _2570)) * _2570;
                        float _3730 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                        float _2583 = (((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 3.1415927410125732421875) / ((_2548 * 2.1991131305694580078125) + 3.141590118408203125)) * _2537;
                        _2385 = (_2552 * _2500.x) + _2458;
                        _2386 = (_2552 * _2500.y) + _2459;
                        _2387 = (_2552 * _2500.z) + _2460;
                        _2382 = (_2583 * _2517.x) + _2455;
                        _2383 = (_2583 * _2517.y) + _2456;
                        _2384 = (_2583 * _2517.z) + _2457;
                        if (_2462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2455 = _2382;
                            _2456 = _2383;
                            _2457 = _2384;
                            _2458 = _2385;
                            _2459 = _2386;
                            _2460 = _2387;
                            _2461 = _2462;
                        }
                    }
                    frontier_phi_66_pred = _2382;
                    frontier_phi_66_pred_1 = _2387;
                    frontier_phi_66_pred_2 = _2386;
                    frontier_phi_66_pred_3 = _2385;
                    frontier_phi_66_pred_4 = _2384;
                    frontier_phi_66_pred_5 = _2383;
                }
                _2151 = frontier_phi_66_pred;
                _2161 = frontier_phi_66_pred_1;
                _2159 = frontier_phi_66_pred_2;
                _2157 = frontier_phi_66_pred_3;
                _2155 = frontier_phi_66_pred_4;
                _2153 = frontier_phi_66_pred_5;
                uint _2317 = _2316 + 1u;
                if (_2317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2310 = _2151;
                    _2311 = _2153;
                    _2312 = _2155;
                    _2313 = _2157;
                    _2314 = _2159;
                    _2315 = _2161;
                    _2316 = _2317;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
        }
        uvec4 _2164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2165 = _2164.z;
        uint _2167 = (_2165 >> 8u) & 15u;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        if (((4294967295u << _2167) & _2011) == 0u)
        {
            _2281 = _2150;
            _2283 = _2152;
            _2285 = _2154;
            _2287 = _2156;
            _2289 = _2158;
            _2291 = _2160;
        }
        else
        {
            float _2306 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2167 < ((_2165 >> 12u) & 15u))
            {
                float _2282;
                float _2284;
                float _2286;
                float _2288;
                float _2290;
                float _2292;
                float _2438 = _2150;
                float _2439 = _2152;
                float _2440 = _2154;
                float _2441 = _2156;
                float _2442 = _2158;
                float _2443 = _2160;
                uint _2444 = _2167;
                uint _2453;
                bool _2454;
                for (;;)
                {
                    _2453 = texelFetch(g_lightClassification, int((((_2005 << 5u) + (_1991 << 9u)) + (_2444 << 2u)) >> 2u)).x;
                    _2454 = _2453 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2454)
                    {
                        frontier_phi_77_pred = _2443;
                        frontier_phi_77_pred_1 = _2442;
                        frontier_phi_77_pred_2 = _2441;
                        frontier_phi_77_pred_3 = _2440;
                        frontier_phi_77_pred_4 = _2439;
                        frontier_phi_77_pred_5 = _2438;
                    }
                    else
                    {
                        float _2597;
                        float _2598;
                        float _2599;
                        float _2600;
                        float _2601;
                        float _2602;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2610 = _2438;
                        float _2611 = _2439;
                        float _2612 = _2440;
                        float _2613 = _2441;
                        float _2614 = _2442;
                        float _2615 = _2443;
                        uint _2616 = _2453;
                        uint _2617;
                        vec4 _2642;
                        float _2643;
                        vec4 _2658;
                        vec3 _2670;
                        vec4 _2686;
                        vec4 _2702;
                        float _2749;
                        bool _2750;
                        for (;;)
                        {
                            uint _2627 = ((_2444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2616));
                            _2617 = (_2616 + 4294967295u) & _2616;
                            uint _2629 = _2627 * 40u;
                            _2642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2629 + 3u)).x));
                            _2643 = _2642.w;
                            uint _2645 = (_2627 * 40u) + 4u;
                            _2658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2645 + 3u)).x));
                            uint _2660 = (_2627 * 40u) + 8u;
                            _2670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x));
                            uint _2673 = (_2627 * 40u) + 16u;
                            _2686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 3u)).x));
                            uint _2689 = (_2627 * 40u) + 20u;
                            _2702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 3u)).x));
                            uint _2705 = (_2627 * 40u) + 24u;
                            vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2724 = (_2627 * 40u) + 28u;
                            vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            _2749 = fma(_1967, _2737.z, fma(_1966, _2737.y, _2737.x * _1965)) + _2737.w;
                            _2750 = !((fma(_1967, _2718.z, fma(_1966, _2718.y, _2718.x * _1965)) + _2718.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2750)
                            {
                                float _2777 = _2642.x - _1965;
                                float _2778 = _2642.y - _1966;
                                float _2779 = _2642.z - _1967;
                                float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                                float _2783 = inversesqrt(_2780);
                                float _2784 = _2783 * _2777;
                                float _2785 = _2783 * _2778;
                                float _2786 = _2783 * _2779;
                                float _2790 = 1.0 - (_2780 / (_2643 * _2643));
                                float _3741 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                                float _2791 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2795 = sqrt(_2780) * _2658.w;
                                float _2797 = 1.39999997615814208984375 / (_2795 + 1.39999997615814208984375);
                                float _2798 = _2797 * _2797;
                                float _2799 = 1.0 - _2798;
                                float _2801 = (_2799 * dot(vec3(_2784, _2785, _2786), vec3(_372, _375, _378))) + _2798;
                                float _2804 = _2795 * _2795;
                                float _2808 = (fma(_1967, _2686.z, fma(_1966, _2686.y, _2686.x * _1965)) + _2686.w) / _2749;
                                float _2809 = (fma(_1967, _2702.z, fma(_1966, _2702.y, _2702.x * _1965)) + _2702.w) / _2749;
                                float _2813 = 1.0 - dot(vec2(_2808, _2809), vec2(_2808, _2809));
                                float _3757 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                                float _2814 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2815 = _2814 * (((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2791) / ((_2804 * 0.699999988079071044921875) + 1.0));
                                float _2825 = dot(vec3(_372, _375, _378), vec3((-0.0) - (_1965 * _2306), (-0.0) - (_1966 * _2306), (-0.0) - (_1967 * _2306)));
                                float _3768 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2833 = (_2799 * dot(vec3(_372, _375, _378), vec3(_2784, _2785, _2786))) + _2798;
                                float _3779 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2834 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                                float _2838 = (0.5 / (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) + 9.9999999392252902907785028219223e-09) + _2834)) * _2834;
                                float _3790 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2845 = (_2814 * _2791) * (((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 3.1415927410125732421875) / ((_2804 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2815 * _2658.y;
                                frontier_phi_83_pred_1 = _2815 * _2658.x;
                                frontier_phi_83_pred_2 = _2845 * _2670.z;
                                frontier_phi_83_pred_3 = _2845 * _2670.y;
                                frontier_phi_83_pred_4 = _2845 * _2670.x;
                                frontier_phi_83_pred_5 = _2815 * _2658.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2853 = frontier_phi_83_pred;
                            _2852 = frontier_phi_83_pred_1;
                            _2851 = frontier_phi_83_pred_2;
                            _2850 = frontier_phi_83_pred_3;
                            _2849 = frontier_phi_83_pred_4;
                            _2854 = frontier_phi_83_pred_5;
                            _2600 = _2852 + _2613;
                            _2601 = _2853 + _2614;
                            _2602 = _2854 + _2615;
                            _2597 = _2849 + _2610;
                            _2598 = _2850 + _2611;
                            _2599 = _2851 + _2612;
                            if (_2617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2599;
                                _2613 = _2600;
                                _2614 = _2601;
                                _2615 = _2602;
                                _2616 = _2617;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2602;
                        frontier_phi_77_pred_1 = _2601;
                        frontier_phi_77_pred_2 = _2600;
                        frontier_phi_77_pred_3 = _2599;
                        frontier_phi_77_pred_4 = _2598;
                        frontier_phi_77_pred_5 = _2597;
                    }
                    _2292 = frontier_phi_77_pred;
                    _2290 = frontier_phi_77_pred_1;
                    _2288 = frontier_phi_77_pred_2;
                    _2286 = frontier_phi_77_pred_3;
                    _2284 = frontier_phi_77_pred_4;
                    _2282 = frontier_phi_77_pred_5;
                    uint _2445 = _2444 + 1u;
                    if (_2445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2438 = _2282;
                        _2439 = _2284;
                        _2440 = _2286;
                        _2441 = _2288;
                        _2442 = _2290;
                        _2443 = _2292;
                        _2444 = _2445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2286;
                frontier_phi_58_59_ladder_1 = _2292;
                frontier_phi_58_59_ladder_2 = _2290;
                frontier_phi_58_59_ladder_3 = _2288;
                frontier_phi_58_59_ladder_4 = _2284;
                frontier_phi_58_59_ladder_5 = _2282;
            }
            else
            {
                frontier_phi_58_59_ladder = _2154;
                frontier_phi_58_59_ladder_1 = _2160;
                frontier_phi_58_59_ladder_2 = _2158;
                frontier_phi_58_59_ladder_3 = _2156;
                frontier_phi_58_59_ladder_4 = _2152;
                frontier_phi_58_59_ladder_5 = _2150;
            }
            _2281 = frontier_phi_58_59_ladder_5;
            _2283 = frontier_phi_58_59_ladder_4;
            _2285 = frontier_phi_58_59_ladder;
            _2287 = frontier_phi_58_59_ladder_3;
            _2289 = frontier_phi_58_59_ladder_2;
            _2291 = frontier_phi_58_59_ladder_1;
        }
        float _2296 = isnan(1.0) ? _417 : (isnan(_417) ? 1.0 : min(_417, 1.0));
        _2024 = (_2296 * _2287) + _1587;
        _2026 = (_2296 * _2289) + _1589;
        _2028 = (_2296 * _2291) + _1591;
        _2030 = ((_2281 * 0.039999999105930328369140625) * _2296) + _1836;
        _2032 = ((_2283 * 0.039999999105930328369140625) * _2296) + _1838;
        _2034 = ((_2285 * 0.039999999105930328369140625) * _2296) + _1840;
    }
    else
    {
        _2024 = _1587;
        _2026 = _1589;
        _2028 = _1591;
        _2030 = _1836;
        _2032 = _1838;
        _2034 = _1840;
    }
    uint _2040 = _393 + uint(cbMatDynParam._m0[0u].w);
    float _2049 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * _246) * cbInstanceData._m0[_2040].x;
    float _2053 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * _246) * cbInstanceData._m0[_2040].y;
    float _2057 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * _246) * cbInstanceData._m0[_2040].z;
    float _3806 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3817 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3828 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _2074 = (((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2024 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _417))) + ((_2030 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + _2049;
    float _2076 = (_2053 + ((_2032 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_2026 + ((isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))) * _417)));
    float _2078 = (_2057 + ((_2034 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1227)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_2028 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _417)));
    float _2079 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2080 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2087 = cbMtdParam._m0[2u].x * _2049;
    float _2088 = cbMtdParam._m0[2u].y * _2053;
    float _2089 = cbMtdParam._m0[2u].z * _2057;
    float _3854 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2091 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    uint _2092 = _391 + 6u;
    float _2100 = _351 / cbSceneParam._m0[86u].x;
    float _2101 = _352 / cbSceneParam._m0[86u].y;
    vec4 _2115 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2100, _2101, (log2((isnan(cbSceneParam._m0[77u].w) ? _272 : (isnan(_272) ? cbSceneParam._m0[77u].w : min(_272, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2117 = _2115.x;
    float _2118 = _2115.y;
    float _2119 = _2115.z;
    float _2120 = _2115.w;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_272 > cbSceneParam._m0[78u].w)
    {
        float _2175 = isnan(_272) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _272 : min(cbSceneParam._m0[80u].w, _272));
        float _2176 = _2175 / _272;
        float _2187 = _2176 * _323;
        float _2188 = _324 * _2176;
        float _2189 = (-0.0) - _2188;
        float _2191 = _2176 * _325;
        float _2193 = (cbSceneParam._m0[77u].w * _2189) / _2175;
        float _2194 = _2193 + cbSceneParam._m0[79u].w;
        float _2195 = cbSceneParam._m0[79u].w - _2188;
        float _2201 = sqrt(((_2187 * _2187) + (_2188 * _2188)) + (_2191 * _2191));
        float _2204 = (1.0 - (cbSceneParam._m0[77u].w / _2175)) * _2201;
        float _2209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2395;
        if (abs((_2189 - _2193) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2395 = ((((_2194 > 0.0) ? exp2(_2209 * _2194) : (2.0 - exp2(_2211 * _2194))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2204;
        }
        else
        {
            float _2339 = 1.0 / cbSceneParam._m0[80u].x;
            float _2340 = isnan(_2195) ? _2194 : (isnan(_2194) ? _2195 : max(_2194, _2195));
            float _2341 = isnan(_2195) ? _2194 : (isnan(_2194) ? _2195 : min(_2194, _2195));
            float _2350 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : min(_2340, 0.0));
            float _2351 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : min(_2341, 0.0));
            _2395 = ((abs(_2201 / _2189) * cbSceneParam._m0[80u].y) * ((((_2350 - _2351) * 2.0) - ((exp2(_2209 * (isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0)))) - exp2(_2209 * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0))))) * _2339)) - ((exp2(_2211 * _2350) - exp2(_2211 * _2351)) * _2339))) + (_2204 * cbSceneParam._m0[80u].z);
        }
        vec4 _2397 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2100, _2101, 1.0), 0.0);
        float _2406 = exp2((_2395 * (-1.44269502162933349609375)) * (1.0 - _2397.w));
        float _2407 = log2(_2406);
        float _2423 = log2(_2120);
        _2213 = (exp2(_2423 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].x)) * _2397.x) / cbSceneParam._m0[78u].x)) + _2117;
        _2215 = (exp2(_2423 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].y)) * _2397.y) / cbSceneParam._m0[78u].y)) + _2118;
        _2217 = (exp2(_2423 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2407 * cbSceneParam._m0[78u].z)) * _2397.z) / cbSceneParam._m0[78u].z)) + _2119;
        _2219 = _2406 * _2120;
    }
    else
    {
        _2213 = _2117;
        _2215 = _2118;
        _2217 = _2119;
        _2219 = _2120;
    }
    bool _2433;
    vec4 _2229;
    vec4 _2251;
    float _2253;
    float _2257;
    float _2258;
    float _2259;
    float _2262;
    float _2265;
    float _2268;
    float _2269;
    bool _2280;
    for (;;)
    {
        _2229 = cbMatDynParam._m0[0u];
        float _2231 = roundEven(_2229.y);
        bool _2232 = _2231 == 3.0;
        float _2233 = log2(_2219);
        float _2237 = exp2(_2233 * cbSceneParam._m0[78u].x);
        float _2238 = exp2(_2233 * cbSceneParam._m0[78u].y);
        float _2239 = exp2(_2233 * cbSceneParam._m0[78u].z);
        float _2240 = _2237 * _2079;
        float _2241 = _2238 * _2080;
        float _2242 = _2239 * _2081;
        float _2249 = _339 + (-0.5);
        _2251 = cbMtdParam._m0[1u];
        _2253 = _2251.y * _2249;
        float _2256 = (_2231 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2257 = _2256 * (_2232 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2213)));
        _2258 = _2256 * (_2232 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2215)));
        _2259 = _2256 * (_2232 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2217)));
        _2262 = ((_2087 * _2091) * _2237) * _2256;
        _2265 = ((_2088 * _2091) * _2238) * _2256;
        _2268 = ((_2089 * _2091) * _2239) * _2256;
        _2269 = _2249 * 0.999000012874603271484375;
        _2280 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2280)
        {
            if ((cbInstanceData._m0[_391 + 7u].x + _2269) < 0.5)
            {
                _2433 = true;
                break;
            }
        }
        uint _2374 = _393 + uint(_2229.w);
        if ((cbInstanceData._m0[_2374].w < 1.0) && ((cbInstanceData._m0[_2374].w + _2269) < 0.5))
        {
            _2433 = true;
            break;
        }
        if ((_2253 + 1.0) < _2251.x)
        {
            _2433 = true;
            break;
        }
        _2433 = false;
        break;
    }
    float _2588;
    if (_2433)
    {
        discard_state = true;
        _2588 = 0.0;
    }
    else
    {
        _2588 = cbInstanceData._m0[_2092].w;
    }
    SV_Target.x = _2257;
    SV_Target.y = _2258;
    SV_Target.z = _2259;
    SV_Target.w = _2588;
    SV_Target_1.x = _2262;
    SV_Target_1.y = _2265;
    SV_Target_1.z = _2268;
    SV_Target_1.w = cbInstanceData._m0[_2092].w;
    discard_exit();
}


