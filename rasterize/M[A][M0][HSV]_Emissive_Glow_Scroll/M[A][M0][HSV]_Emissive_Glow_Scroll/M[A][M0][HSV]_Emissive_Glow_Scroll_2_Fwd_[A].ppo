#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _783;
float _2989;
float _2990;
float _2991;
float _2992;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _243 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _244 = _243 * _169;
    float _245 = _243 * _170;
    float _246 = _243 * _171;
    float _3001 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3012 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3023 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _266 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _307 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _317 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _307);
    float _318 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _307);
    float _319 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _307);
    float _323 = inversesqrt(dot(vec3(_317, _318, _319), vec3(_317, _318, _319)));
    float _324 = _317 * _323;
    float _325 = _318 * _323;
    float _326 = _319 * _323;
    vec4 _331 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _333 = _331.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _462 = sqrt(((_317 * _317) + (_318 * _318)) + (_319 * _319));
        float _468 = (cbMatDynParam._m0[5u].x * _462) + cbMatDynParam._m0[5u].y;
        float _3034 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
        float _469 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _473 = (cbMatDynParam._m0[5u].z * _462) + cbMatDynParam._m0[5u].w;
        float _3045 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) - _469)) + _469) < ((_333 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _345 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _346 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _366 = fma(_246, cbSceneParam._m0[5u].z, fma(_245, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _244));
    float _369 = fma(_246, cbSceneParam._m0[6u].z, fma(_245, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _244));
    float _372 = fma(_246, cbSceneParam._m0[7u].z, fma(_245, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _244));
    uint _385 = uint(roundEven(NORMAL.w)) * 13u;
    uint _386 = _385 + 9u;
    uint _387 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _393 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3001 : (isnan(_3001) ? 1.0 : min(_3001, 1.0)))) * cbInstanceData._m0[_387].x;
    float _394 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3012 : (isnan(_3012) ? 1.0 : min(_3012, 1.0)))) * cbInstanceData._m0[_387].y;
    float _395 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0)))) * cbInstanceData._m0[_387].z;
    float _3056 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _396 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
    float _3067 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _397 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
    float _3078 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _398 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
    vec4 _407 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _345, cbSceneParam._m0[86u].y * _346));
    float _410 = _407.x * TEXCOORD.z;
    float _411 = dot(vec3(_244, _245, _246), vec3(_324, _325, _326));
    float _414 = _411 * 2.0;
    float _419 = (_414 * _244) - _324;
    float _420 = (_414 * _245) - _325;
    float _421 = (_414 * _246) - _326;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _782;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _507 = fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443));
        float _511 = fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443));
        float _515 = fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443));
        float _540 = _443 + _244;
        float _541 = _447 + _245;
        float _542 = _451 + _246;
        float _552 = fma(_542, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540)) - _507;
        float _553 = fma(_542, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540)) - _511;
        float _554 = fma(_542, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540)) - _515;
        float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
        float _571 = ((_558 * _552) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_507 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _572 = ((_558 * _553) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_511 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _573 = ((_558 * _554) / cbModelParam._m0[34u].z) + ((((((_515 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _590 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        vec4 _597 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_571, _572, _573), 0.0);
        float _610 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_576.x + (-0.5));
        float _612 = _610 * (_576.y + (-0.5));
        float _613 = _610 * (_576.z + (-0.5));
        float _620 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_583.x + (-0.5));
        float _622 = _620 * (_583.y + (-0.5));
        float _623 = _620 * (_583.z + (-0.5));
        float _630 = exp2((_590.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_590.x + (-0.5));
        float _632 = _630 * (_590.y + (-0.5));
        float _633 = _630 * (_590.z + (-0.5));
        float _640 = exp2((_597.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_597.x + (-0.5));
        float _642 = _640 * (_597.y + (-0.5));
        float _643 = _640 * (_597.z + (-0.5));
        float _644 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _645 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _646 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _647 = _611 * 0.5;
        float _648 = _621 * 0.5;
        float _649 = _631 * 0.5;
        float _650 = dot(vec3(_647, _648, _649), vec3(_647, _648, _649));
        float _655 = (_650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_650);
        float _664 = (dot(vec3(_244, _245, _246), vec3(_655 * _647, _655 * _648, _655 * _649)) + 1.0) * 0.5;
        float _3104 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _674 = sqrt(((_648 * _648) + (_647 * _647)) + (_649 * _649)) / (_644 + 9.9999997473787516355514526367188e-06);
        float _3115 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _676 = _675 * 2.0;
        float _680 = (1.0 - _675) / (_675 + 1.0);
        float _3126 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _681 = isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0));
        float _690 = ((((1.0 - _681) * (_676 + 2.0)) * exp2(log2(isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0))) * (_676 + 1.0))) + _681) * _644;
        float _691 = _612 * 0.5;
        float _692 = _622 * 0.5;
        float _693 = _632 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _707 = (dot(vec3(_244, _245, _246), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _3137 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _716 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_645 + 9.9999997473787516355514526367188e-06);
        float _3148 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _718 = _717 * 2.0;
        float _722 = (1.0 - _717) / (_717 + 1.0);
        float _3159 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _732 = ((((1.0 - _723) * (_718 + 2.0)) * exp2(log2(isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0))) * (_718 + 1.0))) + _723) * _645;
        float _733 = _613 * 0.5;
        float _734 = _623 * 0.5;
        float _735 = _633 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _749 = (dot(vec3(_244, _245, _246), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3170 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _758 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_646 + 9.9999997473787516355514526367188e-06);
        float _3181 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _760 = _759 * 2.0;
        float _764 = (1.0 - _759) / (_759 + 1.0);
        float _3192 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _774 = ((((1.0 - _765) * (_760 + 2.0)) * exp2(log2(isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0))) * (_760 + 1.0))) + _765) * _646;
        _782 = _613;
        _784 = _612;
        _785 = _611;
        _786 = _623;
        _787 = _622;
        _788 = _621;
        _789 = _633;
        _790 = _632;
        _791 = _631;
        _792 = _646;
        _793 = _645;
        _794 = _644;
        _795 = cbModelParam._m0[36u].z * (isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0)));
        _796 = cbModelParam._m0[36u].z * (isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0)));
        _797 = cbModelParam._m0[36u].z * (isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0)));
    }
    else
    {
        _782 = _783;
        _784 = _783;
        _785 = _783;
        _786 = _783;
        _787 = _783;
        _788 = _783;
        _789 = _783;
        _790 = _783;
        _791 = _783;
        _792 = _783;
        _793 = _783;
        _794 = _783;
        _795 = 0.0;
        _796 = 0.0;
        _797 = 0.0;
    }
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _826 = fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443));
        float _830 = fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443));
        float _834 = fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443));
        float _857 = _443 + _244;
        float _858 = _447 + _245;
        float _859 = _451 + _246;
        float _869 = fma(_859, cbModelParam._m0[30u].z, fma(_858, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857)) - _826;
        float _870 = fma(_859, cbModelParam._m0[31u].z, fma(_858, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857)) - _830;
        float _871 = fma(_859, cbModelParam._m0[32u].z, fma(_858, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857)) - _834;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_826 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_830 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[35u].z) + ((((((_834 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _925 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_892.x + (-0.5));
        float _927 = _925 * (_892.y + (-0.5));
        float _928 = _925 * (_892.z + (-0.5));
        float _935 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_899.x + (-0.5));
        float _937 = _935 * (_899.y + (-0.5));
        float _938 = _935 * (_899.z + (-0.5));
        float _945 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_906.x + (-0.5));
        float _947 = _945 * (_906.y + (-0.5));
        float _948 = _945 * (_906.z + (-0.5));
        float _955 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_913.x + (-0.5));
        float _957 = _955 * (_913.y + (-0.5));
        float _958 = _955 * (_913.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_244, _245, _246), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3233 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3244 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3255 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))) * (_989 + 1.0))) + _994) * _959;
        float _1004 = _927 * 0.5;
        float _1005 = _937 * 0.5;
        float _1006 = _947 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_244, _245, _246), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3266 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3277 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3288 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0))) * (_1031 + 1.0))) + _1036) * _960;
        float _1046 = _928 * 0.5;
        float _1047 = _938 * 0.5;
        float _1048 = _948 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_244, _245, _246), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3299 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3310 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3321 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0))) * (_1073 + 1.0))) + _1078) * _961;
        _1095 = _928;
        _1096 = _927;
        _1097 = _926;
        _1098 = _938;
        _1099 = _937;
        _1100 = _936;
        _1101 = _948;
        _1102 = _947;
        _1103 = _946;
        _1104 = _961;
        _1105 = _960;
        _1106 = _959;
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1108 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1109 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
    }
    else
    {
        _1095 = _783;
        _1096 = _783;
        _1097 = _783;
        _1098 = _783;
        _1099 = _783;
        _1100 = _783;
        _1101 = _783;
        _1102 = _783;
        _1103 = _783;
        _1104 = _783;
        _1105 = _783;
        _1106 = _783;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _795)) + _795;
    float _1120 = (cbModelParam._m0[1u].x * (_1108 - _796)) + _796;
    float _1121 = (cbModelParam._m0[1u].x * (_1109 - _797)) + _797;
    float _1142 = fma(_1121, cbSceneParam._m0[89u].z, fma(_1120, cbSceneParam._m0[89u].y, _1119 * cbSceneParam._m0[89u].x));
    float _1145 = fma(_1121, cbSceneParam._m0[90u].z, fma(_1120, cbSceneParam._m0[90u].y, _1119 * cbSceneParam._m0[90u].x));
    float _1148 = fma(_1121, cbSceneParam._m0[91u].z, fma(_1120, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1119));
    float _1163 = _419 * 0.5;
    float _1164 = _420 * 0.5;
    float _1165 = _421 * 0.5;
    float _1166 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1097, _1100, _1103, _1106));
    float _1169 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1096, _1099, _1102, _1105));
    float _1172 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1206;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1179 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_782, _786, _789, _792));
        float _1183 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_784, _787, _790, _793));
        float _1187 = dot(vec4(_1163, _1164, _1165, 1.0), vec4(_785, _788, _791, _794));
        float _1194 = dot(vec4(cbModelParam._m0[39u]), vec4(_1163, _1164, _1165, 1.0));
        _1206 = dot(vec3(isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1194) ? 0.0 : (isnan(0.0) ? _1194 : max(0.0, _1194))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1206 = 1.0;
    }
    float _1217;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1208 = dot(vec4(cbModelParam._m0[40u]), vec4(_1163, _1164, _1165, 1.0));
        _1217 = dot(vec3(isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1217 = 1.0;
    }
    float _1221 = (_1217 * cbModelParam._m0[1u].x) + (_1206 * (1.0 - cbModelParam._m0[1u].x));
    float _1230 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1311;
    float _1313;
    float _1315;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1278 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _1282 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _1286 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _1289 = fma(_421, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419));
        float _1292 = fma(_421, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419));
        float _1295 = fma(_421, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419));
        float _1321;
        if (_1289 > 0.0)
        {
            _1321 = abs((1.0 - _1278) / _1289);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1278 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1321 = frontier_phi_17_15_ladder;
        }
        float _1527;
        if (_1292 > 0.0)
        {
            _1527 = abs((1.0 - _1282) / _1292);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1292 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1282 + 1.0) / _1292);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1527 = frontier_phi_26_22_ladder;
        }
        float _1716;
        if (_1295 > 0.0)
        {
            _1716 = abs((1.0 - _1286) / _1295);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1295 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1286 + 1.0) / _1295);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1716 = frontier_phi_38_33_ladder;
        }
        float _1718 = isnan(_1527) ? _1321 : (isnan(_1321) ? _1527 : min(_1321, _1527));
        float _1719 = isnan(_1716) ? _1718 : (isnan(_1718) ? _1716 : min(_1718, _1716));
        float _1723 = (_1719 * _1289) + _1278;
        float _1724 = (_1719 * _1292) + _1282;
        float _1725 = (_1719 * _1295) + _1286;
        float _1726 = _1719 * 9.9999997473787516355514526367188e-05;
        float _1728 = (-1.0) - _1726;
        float _1730 = _1726 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1725 > _1730) || ((_1725 < _1728) || ((_1724 > _1730) || ((_1724 < _1728) || ((_1723 < _1728) || (_1723 > _1730))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1725, cbModelParam._m0[9u].z, fma(_1724, cbModelParam._m0[9u].y, _1723 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1725, cbModelParam._m0[10u].z, fma(_1724, cbModelParam._m0[10u].y, _1723 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1725, cbModelParam._m0[11u].z, fma(_1724, cbModelParam._m0[11u].y, _1723 * cbModelParam._m0[11u].x))), _1230);
            frontier_phi_16_38_ladder = _1822.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1822.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1822.x * cbModelParam._m0[1u].y;
        }
        _1311 = frontier_phi_16_38_ladder_2;
        _1313 = frontier_phi_16_38_ladder_1;
        _1315 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_419, _420, _421), _1230);
        _1311 = _1299.x * cbModelParam._m0[1u].y;
        _1313 = _1299.y * cbModelParam._m0[1u].y;
        _1315 = _1299.z * cbModelParam._m0[1u].y;
    }
    float _1318 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1410;
    float _1412;
    float _1414;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1374 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _1378 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _1382 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _1385 = fma(_421, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419));
        float _1388 = fma(_421, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419));
        float _1391 = fma(_421, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419));
        float _1532;
        if (_1385 > 0.0)
        {
            _1532 = abs((1.0 - _1374) / _1385);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1374 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1532 = frontier_phi_28_24_ladder;
        }
        float _1743;
        if (_1388 > 0.0)
        {
            _1743 = abs((1.0 - _1378) / _1388);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1378 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1743 = frontier_phi_40_35_ladder;
        }
        float _1894;
        if (_1391 > 0.0)
        {
            _1894 = abs((1.0 - _1382) / _1391);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1382 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1894 = frontier_phi_49_46_ladder;
        }
        float _1896 = isnan(_1743) ? _1532 : (isnan(_1532) ? _1743 : min(_1532, _1743));
        float _1897 = isnan(_1894) ? _1896 : (isnan(_1896) ? _1894 : min(_1896, _1894));
        float _1901 = (_1897 * _1385) + _1374;
        float _1902 = (_1897 * _1388) + _1378;
        float _1903 = (_1897 * _1391) + _1382;
        float _1904 = _1897 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1904;
        float _1907 = _1904 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1903 > _1907) || ((_1903 < _1905) || ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 < _1905) || (_1901 > _1907))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1903, cbModelParam._m0[17u].z, fma(_1902, cbModelParam._m0[17u].y, _1901 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1903, cbModelParam._m0[18u].z, fma(_1902, cbModelParam._m0[18u].y, _1901 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1903, cbModelParam._m0[19u].z, fma(_1902, cbModelParam._m0[19u].y, _1901 * cbModelParam._m0[19u].x))), _1318);
            frontier_phi_25_49_ladder = _2137.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2137.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2137.x * cbModelParam._m0[1u].z;
        }
        _1410 = frontier_phi_25_49_ladder_2;
        _1412 = frontier_phi_25_49_ladder_1;
        _1414 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_419, _420, _421), _1318);
        _1410 = _1394.x * cbModelParam._m0[1u].z;
        _1412 = _1394.y * cbModelParam._m0[1u].z;
        _1414 = _1394.z * cbModelParam._m0[1u].z;
    }
    float _1426 = _410 * 0.01200000010430812835693359375;
    float _1428 = _1426 * ((cbModelParam._m0[1u].w * (_1410 - _1311)) + _1311);
    float _1429 = _1426 * ((cbModelParam._m0[1u].w * (_1412 - _1313)) + _1313);
    float _1430 = _1426 * ((cbModelParam._m0[1u].w * (_1414 - _1315)) + _1315);
    float _1433 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, _1428 * cbSceneParam._m0[91u].x));
    uvec4 _1449 = floatBitsToUint(cbInstanceData._m0[_385 + 5u]);
    uint _1451 = _1449.x * 14u;
    uint _1452 = _1451 + 13u;
    float _1459 = _410 + (-1.0);
    float _1465 = (cbLight._m0[_1452].x * _1459) + 1.0;
    float _1466 = (cbLight._m0[_1452].y * _1459) + 1.0;
    float _1467 = (cbLight._m0[_1452].z * _1459) + 1.0;
    float _1468 = (cbLight._m0[_1452].w * _1459) + 1.0;
    uint _1469 = _1451 + 5u;
    float _1475 = isnan(1.0) ? _1466 : (isnan(_1466) ? 1.0 : min(_1466, 1.0));
    uint _1479 = _1451 + 4u;
    float _1486 = isnan(1.0) ? _1465 : (isnan(_1465) ? 1.0 : min(_1465, 1.0));
    uint _1490 = _1451 | 1u;
    float _1501 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_244, _245, _246));
    float _1504 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_244, _245, _246));
    float _3457 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _3468 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _1509 = (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.3183098733425140380859375;
    float _1511 = (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.3183098733425140380859375;
    float _1518 = ((cbLight._m0[_1469].x * _1475) * _1511) + ((cbLight._m0[_1479].x * _1486) * _1509);
    float _1519 = ((_1475 * cbLight._m0[_1469].y) * _1511) + ((_1486 * cbLight._m0[_1479].y) * _1509);
    float _1520 = ((_1475 * cbLight._m0[_1469].z) * _1511) + ((_1486 * cbLight._m0[_1479].z) * _1509);
    uvec4 _1524 = floatBitsToUint(cbLight._m0[_1451 + 12u]);
    bool _1526 = _1524.x == 0u;
    float _1537;
    float _1539;
    float _1541;
    if (_1526)
    {
        _1537 = _1518;
        _1539 = _1519;
        _1541 = _1520;
    }
    else
    {
        uint _1545 = _1451 + 6u;
        float _1561 = (dot(vec3(cbLight._m0[_1451 + 2u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1562 = _1561 * _1561;
        float _3479 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1564 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        _1537 = (((cbLight._m0[_1545].x * 0.3183098733425140380859375) * _1563) * _1564) + _1518;
        _1539 = (((cbLight._m0[_1545].y * 0.3183098733425140380859375) * _1563) * _1564) + _1519;
        _1541 = (((cbLight._m0[_1545].z * 0.3183098733425140380859375) * _1563) * _1564) + _1520;
    }
    bool _1544 = _1524.y == 0u;
    float _1582;
    float _1584;
    float _1586;
    if (_1544)
    {
        _1582 = _1537;
        _1584 = _1539;
        _1586 = _1541;
    }
    else
    {
        uint _1687 = _1451 + 7u;
        float _1703 = (dot(vec3(cbLight._m0[_1451 + 3u].xyz), vec3(_244, _245, _246)) * 0.5) + 0.5;
        float _1704 = _1703 * _1703;
        float _3495 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1706 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1582 = (((cbLight._m0[_1687].x * 0.3183098733425140380859375) * _1705) * _1706) + _1537;
        _1584 = (((cbLight._m0[_1687].y * 0.3183098733425140380859375) * _1705) * _1706) + _1539;
        _1586 = (((cbLight._m0[_1687].z * 0.3183098733425140380859375) * _1705) * _1706) + _1541;
    }
    uint _1588 = _1451 + 8u;
    float _1594 = cbLight._m0[_1451].x + _324;
    float _1595 = cbLight._m0[_1451].y + _325;
    float _1596 = cbLight._m0[_1451].z + _326;
    float _1600 = inversesqrt(dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596)));
    float _1604 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1451].xyz));
    float _3511 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1607 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _1608 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _1609 = dot(vec3(cbLight._m0[_1451].xyz), vec3(_1594 * _1600, _1595 * _1600, _1596 * _1600));
    float _3533 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
    float _1620 = (exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1626 = (0.5 / ((_1607 + 9.9999999392252902907785028219223e-09) + _1608)) * _1607;
    float _3544 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _1628 = (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.31831014156341552734375;
    uint _1639 = _1451 + 9u;
    float _1645 = cbLight._m0[_1490].x + _324;
    float _1646 = cbLight._m0[_1490].y + _325;
    float _1647 = cbLight._m0[_1490].z + _326;
    float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
    float _1655 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1490].xyz));
    float _3555 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1658 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _1659 = dot(vec3(cbLight._m0[_1490].xyz), vec3(_1645 * _1651, _1646 * _1651, _1647 * _1651));
    float _3566 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1668 = (exp2(log2(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1672 = (0.5 / ((_1658 + 9.9999999392252902907785028219223e-09) + _1608)) * _1658;
    float _3577 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1674 = (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.31831014156341552734375;
    float _1684 = (((_1668 * cbLight._m0[_1639].x) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].x) * _1628) * _1486);
    float _1685 = (((_1668 * cbLight._m0[_1639].y) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].y) * _1628) * _1486);
    float _1686 = (((_1668 * cbLight._m0[_1639].z) * _1674) * _1475) + (((_1620 * cbLight._m0[_1588].z) * _1628) * _1486);
    float _1748;
    float _1750;
    float _1752;
    if (_1526)
    {
        _1748 = _1684;
        _1750 = _1685;
        _1752 = _1686;
    }
    else
    {
        uint _1754 = _1451 + 10u;
        uint _1760 = _1451 + 2u;
        float _1766 = cbLight._m0[_1760].x + _324;
        float _1767 = cbLight._m0[_1760].y + _325;
        float _1768 = cbLight._m0[_1760].z + _326;
        float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
        float _1776 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1760].xyz));
        float _3588 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1779 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1780 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1766 * _1772, _1767 * _1772, _1768 * _1772));
        float _3599 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = (exp2(log2(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1793 = (0.5 / ((_1779 + 9.9999999392252902907785028219223e-09) + _1608)) * _1779;
        float _3610 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1795 = (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * 0.31831014156341552734375;
        float _1796 = isnan(1.0) ? _1467 : (isnan(_1467) ? 1.0 : min(_1467, 1.0));
        _1748 = (((_1789 * cbLight._m0[_1754].x) * _1795) * _1796) + _1684;
        _1750 = (((_1789 * cbLight._m0[_1754].y) * _1795) * _1796) + _1685;
        _1752 = (((_1789 * cbLight._m0[_1754].z) * _1795) * _1796) + _1686;
    }
    float _1831;
    float _1833;
    float _1835;
    if (_1544)
    {
        _1831 = _1748;
        _1833 = _1750;
        _1835 = _1752;
    }
    else
    {
        uint _1842 = _1451 + 11u;
        uint _1848 = _1451 + 3u;
        float _1854 = cbLight._m0[_1848].x + _324;
        float _1855 = cbLight._m0[_1848].y + _325;
        float _1856 = cbLight._m0[_1848].z + _326;
        float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
        float _1864 = dot(vec3(_244, _245, _246), vec3(cbLight._m0[_1848].xyz));
        float _3626 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1867 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1868 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_1854 * _1860, _1855 * _1860, _1856 * _1860));
        float _3637 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1877 = (exp2(log2(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1881 = (0.5 / ((_1867 + 9.9999999392252902907785028219223e-09) + _1608)) * _1867;
        float _3648 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1883 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.31831014156341552734375;
        float _1884 = isnan(1.0) ? _1468 : (isnan(_1468) ? 1.0 : min(_1468, 1.0));
        _1831 = (((_1877 * cbLight._m0[_1842].x) * _1883) * _1884) + _1748;
        _1833 = (((_1877 * cbLight._m0[_1842].y) * _1883) * _1884) + _1750;
        _1835 = (((_1877 * cbLight._m0[_1842].z) * _1883) * _1884) + _1752;
    }
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    if (_1449.y == 0u)
    {
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1959;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1959;
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1959;
        uvec4 _1974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1975 = _1974.x;
        uint _1986 = uint((float(_1974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _346) / _1975))) + floor(float(uint(cbSceneParam._m0[85u].x * _345) / _1975)));
        float _1996 = (log2(_1962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1997 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        uint _2000 = uint(isnan(14.0) ? _1997 : (isnan(_1997) ? 14.0 : min(_1997, 14.0)));
        uvec4 _2005 = texelFetch(g_lightClusterGridBuffer, int(((_2000 << 2u) + (_1986 << 6u)) >> 2u));
        uint _2006 = _2005.x;
        uint _2007 = _1974.z;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        float _2150;
        float _2152;
        if (((((1u << ((_2007 >> 4u) & 15u)) + 4294967295u) & _2006) == 0u) || ((_2007 & 240u) == 0u))
        {
            _2142 = 0.0;
            _2144 = 0.0;
            _2146 = 0.0;
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
        }
        else
        {
            float _2143;
            float _2145;
            float _2147;
            float _2149;
            float _2151;
            float _2153;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2319)
                {
                    frontier_phi_66_pred = _2303;
                    frontier_phi_66_pred_1 = _2308;
                    frontier_phi_66_pred_2 = _2307;
                    frontier_phi_66_pred_3 = _2306;
                    frontier_phi_66_pred_4 = _2305;
                    frontier_phi_66_pred_5 = _2304;
                }
                else
                {
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    uint _2454;
                    _2448 = _2303;
                    _2449 = _2304;
                    _2450 = _2305;
                    _2451 = _2306;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2318;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    for (;;)
                    {
                        uint _2458 = uint(findLSB(_2454)) + (_2309 << 5u);
                        uint _2455 = (_2454 + 4294967295u) & _2454;
                        uint _2460 = _2458 * 48u;
                        vec4 _2474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 3u)).x));
                        uint _2480 = (_2458 * 48u) + 4u;
                        vec4 _2493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2499 = (_2458 * 48u) + 8u;
                        vec3 _2510 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x));
                        float _2514 = _2474.x - _1960;
                        float _2515 = _2474.y - _1961;
                        float _2516 = _2474.z - _1962;
                        float _2517 = dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516));
                        float _2520 = inversesqrt(_2517);
                        float _2529 = 1.0 - (_2517 * _2474.w);
                        float _3674 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                        float _2530 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
                        float _2531 = sqrt(_2517) * _2493.w;
                        float _2534 = 1.39999997615814208984375 / (_2531 + 1.39999997615814208984375);
                        float _2535 = _2534 * _2534;
                        float _2538 = ((1.0 - _2535) * dot(vec3(_366, _369, _372), vec3(_2520 * _2514, _2520 * _2515, _2520 * _2516))) + _2535;
                        float _2541 = _2531 * _2531;
                        float _2545 = ((isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))) * _2530) / ((_2541 * 0.699999988079071044921875) + 1.0);
                        float _2549 = (-0.0) - _1960;
                        float _2550 = (-0.0) - _1961;
                        float _2551 = (-0.0) - _1962;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2559 = dot(vec3(_366, _369, _372), vec3(_2555 * _2549, _2555 * _2550, _2555 * _2551));
                        float _3690 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _3701 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2563 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
                        float _2567 = (0.5 / (((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) + 9.9999999392252902907785028219223e-09) + _2563)) * _2563;
                        float _3712 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
                        float _2576 = (((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 3.1415927410125732421875) / ((_2541 * 2.1991131305694580078125) + 3.141590118408203125)) * _2530;
                        _2378 = (_2545 * _2493.x) + _2451;
                        _2379 = (_2545 * _2493.y) + _2452;
                        _2380 = (_2545 * _2493.z) + _2453;
                        _2375 = (_2576 * _2510.x) + _2448;
                        _2376 = (_2576 * _2510.y) + _2449;
                        _2377 = (_2576 * _2510.z) + _2450;
                        if (_2455 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2448 = _2375;
                            _2449 = _2376;
                            _2450 = _2377;
                            _2451 = _2378;
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2455;
                        }
                    }
                    frontier_phi_66_pred = _2375;
                    frontier_phi_66_pred_1 = _2380;
                    frontier_phi_66_pred_2 = _2379;
                    frontier_phi_66_pred_3 = _2378;
                    frontier_phi_66_pred_4 = _2377;
                    frontier_phi_66_pred_5 = _2376;
                }
                _2143 = frontier_phi_66_pred;
                _2153 = frontier_phi_66_pred_1;
                _2151 = frontier_phi_66_pred_2;
                _2149 = frontier_phi_66_pred_3;
                _2147 = frontier_phi_66_pred_4;
                _2145 = frontier_phi_66_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2143;
                    _2304 = _2145;
                    _2305 = _2147;
                    _2306 = _2149;
                    _2307 = _2151;
                    _2308 = _2153;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2142 = _2143;
            _2144 = _2145;
            _2146 = _2147;
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
        }
        uvec4 _2156 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2157 = _2156.z;
        uint _2159 = (_2157 >> 8u) & 15u;
        float _2274;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        if (((4294967295u << _2159) & _2006) == 0u)
        {
            _2274 = _2142;
            _2276 = _2144;
            _2278 = _2146;
            _2280 = _2148;
            _2282 = _2150;
            _2284 = _2152;
        }
        else
        {
            float _2299 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2159 < ((_2157 >> 12u) & 15u))
            {
                float _2275;
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2431 = _2142;
                float _2432 = _2144;
                float _2433 = _2146;
                float _2434 = _2148;
                float _2435 = _2150;
                float _2436 = _2152;
                uint _2437 = _2159;
                uint _2446;
                bool _2447;
                for (;;)
                {
                    _2446 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                    _2447 = _2446 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2447)
                    {
                        frontier_phi_77_pred = _2436;
                        frontier_phi_77_pred_1 = _2435;
                        frontier_phi_77_pred_2 = _2434;
                        frontier_phi_77_pred_3 = _2433;
                        frontier_phi_77_pred_4 = _2432;
                        frontier_phi_77_pred_5 = _2431;
                    }
                    else
                    {
                        float _2590;
                        float _2591;
                        float _2592;
                        float _2593;
                        float _2594;
                        float _2595;
                        float _2842;
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2603 = _2431;
                        float _2604 = _2432;
                        float _2605 = _2433;
                        float _2606 = _2434;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        uint _2609 = _2446;
                        uint _2610;
                        vec4 _2635;
                        float _2636;
                        vec4 _2651;
                        vec3 _2663;
                        vec4 _2679;
                        vec4 _2695;
                        float _2742;
                        bool _2743;
                        for (;;)
                        {
                            uint _2620 = ((_2437 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2609));
                            _2610 = (_2609 + 4294967295u) & _2609;
                            uint _2622 = _2620 * 40u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            _2636 = _2635.w;
                            uint _2638 = (_2620 * 40u) + 4u;
                            _2651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2638 + 3u)).x));
                            uint _2653 = (_2620 * 40u) + 8u;
                            _2663 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x));
                            uint _2666 = (_2620 * 40u) + 16u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2682 = (_2620 * 40u) + 20u;
                            _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2698 = (_2620 * 40u) + 24u;
                            vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 3u)).x));
                            uint _2717 = (_2620 * 40u) + 28u;
                            vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            _2742 = fma(_1962, _2730.z, fma(_1961, _2730.y, _2730.x * _1960)) + _2730.w;
                            _2743 = !((fma(_1962, _2711.z, fma(_1961, _2711.y, _2711.x * _1960)) + _2711.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2743)
                            {
                                float _2770 = _2635.x - _1960;
                                float _2771 = _2635.y - _1961;
                                float _2772 = _2635.z - _1962;
                                float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                                float _2776 = inversesqrt(_2773);
                                float _2777 = _2776 * _2770;
                                float _2778 = _2776 * _2771;
                                float _2779 = _2776 * _2772;
                                float _2783 = 1.0 - (_2773 / (_2636 * _2636));
                                float _3723 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                                float _2784 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                                float _2788 = sqrt(_2773) * _2651.w;
                                float _2790 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                                float _2791 = _2790 * _2790;
                                float _2792 = 1.0 - _2791;
                                float _2794 = (_2792 * dot(vec3(_2777, _2778, _2779), vec3(_366, _369, _372))) + _2791;
                                float _2797 = _2788 * _2788;
                                float _2801 = (fma(_1962, _2679.z, fma(_1961, _2679.y, _2679.x * _1960)) + _2679.w) / _2742;
                                float _2802 = (fma(_1962, _2695.z, fma(_1961, _2695.y, _2695.x * _1960)) + _2695.w) / _2742;
                                float _2806 = 1.0 - dot(vec2(_2801, _2802), vec2(_2801, _2802));
                                float _3739 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                                float _2807 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
                                float _2808 = _2807 * (((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2784) / ((_2797 * 0.699999988079071044921875) + 1.0));
                                float _2818 = dot(vec3(_366, _369, _372), vec3((-0.0) - (_1960 * _2299), (-0.0) - (_1961 * _2299), (-0.0) - (_1962 * _2299)));
                                float _3750 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                                float _2826 = (_2792 * dot(vec3(_366, _369, _372), vec3(_2777, _2778, _2779))) + _2791;
                                float _3761 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
                                float _2831 = (0.5 / (((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) + 9.9999999392252902907785028219223e-09) + _2827)) * _2827;
                                float _3772 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                                float _2838 = (_2807 * _2784) * (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 3.1415927410125732421875) / ((_2797 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2808 * _2651.y;
                                frontier_phi_83_pred_1 = _2808 * _2651.x;
                                frontier_phi_83_pred_2 = _2838 * _2663.z;
                                frontier_phi_83_pred_3 = _2838 * _2663.y;
                                frontier_phi_83_pred_4 = _2838 * _2663.x;
                                frontier_phi_83_pred_5 = _2808 * _2651.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2846 = frontier_phi_83_pred;
                            _2845 = frontier_phi_83_pred_1;
                            _2844 = frontier_phi_83_pred_2;
                            _2843 = frontier_phi_83_pred_3;
                            _2842 = frontier_phi_83_pred_4;
                            _2847 = frontier_phi_83_pred_5;
                            _2593 = _2845 + _2606;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            _2590 = _2842 + _2603;
                            _2591 = _2843 + _2604;
                            _2592 = _2844 + _2605;
                            if (_2610 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2592;
                                _2606 = _2593;
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2610;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2595;
                        frontier_phi_77_pred_1 = _2594;
                        frontier_phi_77_pred_2 = _2593;
                        frontier_phi_77_pred_3 = _2592;
                        frontier_phi_77_pred_4 = _2591;
                        frontier_phi_77_pred_5 = _2590;
                    }
                    _2285 = frontier_phi_77_pred;
                    _2283 = frontier_phi_77_pred_1;
                    _2281 = frontier_phi_77_pred_2;
                    _2279 = frontier_phi_77_pred_3;
                    _2277 = frontier_phi_77_pred_4;
                    _2275 = frontier_phi_77_pred_5;
                    uint _2438 = _2437 + 1u;
                    if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2431 = _2275;
                        _2432 = _2277;
                        _2433 = _2279;
                        _2434 = _2281;
                        _2435 = _2283;
                        _2436 = _2285;
                        _2437 = _2438;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2279;
                frontier_phi_58_59_ladder_1 = _2285;
                frontier_phi_58_59_ladder_2 = _2283;
                frontier_phi_58_59_ladder_3 = _2281;
                frontier_phi_58_59_ladder_4 = _2277;
                frontier_phi_58_59_ladder_5 = _2275;
            }
            else
            {
                frontier_phi_58_59_ladder = _2146;
                frontier_phi_58_59_ladder_1 = _2152;
                frontier_phi_58_59_ladder_2 = _2150;
                frontier_phi_58_59_ladder_3 = _2148;
                frontier_phi_58_59_ladder_4 = _2144;
                frontier_phi_58_59_ladder_5 = _2142;
            }
            _2274 = frontier_phi_58_59_ladder_5;
            _2276 = frontier_phi_58_59_ladder_4;
            _2278 = frontier_phi_58_59_ladder;
            _2280 = frontier_phi_58_59_ladder_3;
            _2282 = frontier_phi_58_59_ladder_2;
            _2284 = frontier_phi_58_59_ladder_1;
        }
        float _2289 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
        _2019 = (_2289 * _2280) + _1582;
        _2021 = (_2289 * _2282) + _1584;
        _2023 = (_2289 * _2284) + _1586;
        _2025 = ((_2274 * 0.039999999105930328369140625) * _2289) + _1831;
        _2027 = ((_2276 * 0.039999999105930328369140625) * _2289) + _1833;
        _2029 = ((_2278 * 0.039999999105930328369140625) * _2289) + _1835;
    }
    else
    {
        _2019 = _1582;
        _2021 = _1584;
        _2023 = _1586;
        _2025 = _1831;
        _2027 = _1833;
        _2029 = _1835;
    }
    uint _2035 = _386 + uint(cbMatDynParam._m0[0u].w);
    float _2043 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * cbInstanceData._m0[_2035].x;
    float _2046 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * cbInstanceData._m0[_2035].y;
    float _2049 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * cbInstanceData._m0[_2035].z;
    float _3788 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3799 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3810 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _2066 = (((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_2019 + ((isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))) * _410))) + ((_2025 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + _2043;
    float _2068 = (_2046 + ((_2027 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_2021 + ((isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))) * _410)));
    float _2070 = (_2049 + ((_2029 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _1221)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_2023 + ((isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0))) * _410)));
    float _2071 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2072 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2079 = cbMtdParam._m0[2u].x * _2043;
    float _2080 = cbMtdParam._m0[2u].y * _2046;
    float _2081 = cbMtdParam._m0[2u].z * _2049;
    float _3836 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2083 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    uint _2084 = _385 + 6u;
    float _2092 = _345 / cbSceneParam._m0[86u].x;
    float _2093 = _346 / cbSceneParam._m0[86u].y;
    vec4 _2107 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2092, _2093, (log2((isnan(cbSceneParam._m0[77u].w) ? _266 : (isnan(_266) ? cbSceneParam._m0[77u].w : min(_266, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2109 = _2107.x;
    float _2110 = _2107.y;
    float _2111 = _2107.z;
    float _2112 = _2107.w;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    if (_266 > cbSceneParam._m0[78u].w)
    {
        float _2167 = isnan(_266) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _266 : min(cbSceneParam._m0[80u].w, _266));
        float _2168 = _2167 / _266;
        float _2179 = _2168 * _317;
        float _2180 = _318 * _2168;
        float _2181 = (-0.0) - _2180;
        float _2183 = _2168 * _319;
        float _2185 = (cbSceneParam._m0[77u].w * _2181) / _2167;
        float _2186 = _2185 + cbSceneParam._m0[79u].w;
        float _2187 = cbSceneParam._m0[79u].w - _2180;
        float _2193 = sqrt(((_2179 * _2179) + (_2180 * _2180)) + (_2183 * _2183));
        float _2196 = (1.0 - (cbSceneParam._m0[77u].w / _2167)) * _2193;
        float _2201 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2203 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2388;
        if (abs((_2181 - _2185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2388 = ((((_2186 > 0.0) ? exp2(_2201 * _2186) : (2.0 - exp2(_2203 * _2186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2196;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : max(_2186, _2187));
            float _2334 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : min(_2186, _2187));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2388 = ((abs(_2193 / _2181) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2201 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2201 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2203 * _2343) - exp2(_2203 * _2344)) * _2332))) + (_2196 * cbSceneParam._m0[80u].z);
        }
        vec4 _2390 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2092, _2093, 1.0), 0.0);
        float _2399 = exp2((_2388 * (-1.44269502162933349609375)) * (1.0 - _2390.w));
        float _2400 = log2(_2399);
        float _2416 = log2(_2112);
        _2205 = (exp2(_2416 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].x)) * _2390.x) / cbSceneParam._m0[78u].x)) + _2109;
        _2207 = (exp2(_2416 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].y)) * _2390.y) / cbSceneParam._m0[78u].y)) + _2110;
        _2209 = (exp2(_2416 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2400 * cbSceneParam._m0[78u].z)) * _2390.z) / cbSceneParam._m0[78u].z)) + _2111;
        _2211 = _2399 * _2112;
    }
    else
    {
        _2205 = _2109;
        _2207 = _2110;
        _2209 = _2111;
        _2211 = _2112;
    }
    bool _2426;
    vec4 _2221;
    vec4 _2244;
    float _2246;
    float _2250;
    float _2251;
    float _2252;
    float _2255;
    float _2258;
    float _2261;
    float _2262;
    bool _2273;
    for (;;)
    {
        _2221 = cbMatDynParam._m0[0u];
        float _2223 = roundEven(_2221.y);
        bool _2224 = _2223 == 3.0;
        float _2226 = log2(_2211);
        float _2230 = exp2(_2226 * cbSceneParam._m0[78u].x);
        float _2231 = exp2(_2226 * cbSceneParam._m0[78u].y);
        float _2232 = exp2(_2226 * cbSceneParam._m0[78u].z);
        float _2233 = _2230 * _2071;
        float _2234 = _2231 * _2072;
        float _2235 = _2232 * _2073;
        float _2242 = _333 + (-0.5);
        _2244 = cbMtdParam._m0[1u];
        _2246 = _2244.y * _2242;
        float _2249 = (_2223 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2250 = _2249 * (_2224 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2205)));
        _2251 = _2249 * (_2224 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2207)));
        _2252 = _2249 * (_2224 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2209)));
        _2255 = ((_2079 * _2083) * _2230) * _2249;
        _2258 = ((_2080 * _2083) * _2231) * _2249;
        _2261 = ((_2081 * _2083) * _2232) * _2249;
        _2262 = _2242 * 0.999000012874603271484375;
        _2273 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2273)
        {
            if ((cbInstanceData._m0[_385 + 7u].x + _2262) < 0.5)
            {
                _2426 = true;
                break;
            }
        }
        uint _2367 = _386 + uint(_2221.w);
        if ((cbInstanceData._m0[_2367].w < 1.0) && ((cbInstanceData._m0[_2367].w + _2262) < 0.5))
        {
            _2426 = true;
            break;
        }
        if ((_2246 + 1.0) < _2244.x)
        {
            _2426 = true;
            break;
        }
        _2426 = false;
        break;
    }
    float _2581;
    if (_2426)
    {
        discard_state = true;
        _2581 = 0.0;
    }
    else
    {
        _2581 = cbInstanceData._m0[_2084].w;
    }
    SV_Target.x = _2250;
    SV_Target.y = _2251;
    SV_Target.z = _2252;
    SV_Target.w = _2581;
    SV_Target_1.x = _2255;
    SV_Target_1.y = _2258;
    SV_Target_1.z = _2261;
    SV_Target_1.w = cbInstanceData._m0[_2084].w;
    discard_exit();
}


