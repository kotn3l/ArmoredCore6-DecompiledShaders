#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _744;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _164 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _165 = _164 * NORMAL.x;
    float _166 = _164 * NORMAL.y;
    float _167 = _164 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _216 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2896 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _234 = isnan(1.0) ? _2896 : (isnan(_2896) ? 1.0 : min(_2896, 1.0));
    float _242 = (((_234 * _234) * (3.0 - (_234 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _246 = inversesqrt(dot(vec3(_165, _166, _167), vec3(_165, _166, _167)));
    float _247 = _246 * _165;
    float _248 = _246 * _166;
    float _249 = _246 * _167;
    float _2907 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2918 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _2929 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _268 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _309 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _319 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _309);
    float _320 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _309);
    float _321 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _309);
    float _325 = inversesqrt(dot(vec3(_319, _320, _321), vec3(_319, _320, _321)));
    float _326 = _319 * _325;
    float _327 = _320 * _325;
    float _328 = _321 * _325;
    float _334 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _335 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _356 = fma(_249, cbSceneParam._m0[5u].z, fma(_248, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _247));
    float _359 = fma(_249, cbSceneParam._m0[6u].z, fma(_248, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _247));
    float _362 = fma(_249, cbSceneParam._m0[7u].z, fma(_248, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _247));
    uint _375 = uint(roundEven(NORMAL.w)) * 13u;
    uint _377 = _375 + 9u;
    uint _378 = _377 + uint(cbMatDynParam._m0[0u].w);
    float _384 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0)))) * cbInstanceData._m0[_378].x;
    float _385 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0)))) * cbInstanceData._m0[_378].y;
    float _386 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0)))) * cbInstanceData._m0[_378].z;
    float _2940 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0));
    float _2951 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0));
    float _2962 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0));
    vec4 _398 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _334, cbSceneParam._m0[86u].y * _335));
    float _401 = _398.x * TEXCOORD.z;
    float _402 = dot(vec3(_247, _248, _249), vec3(_326, _327, _328));
    float _405 = _402 * 2.0;
    float _409 = (_405 * _247) - _326;
    float _410 = (_405 * _248) - _327;
    float _411 = (_405 * _249) - _328;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _743;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _468 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _472 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _476 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _501 = _433 + _247;
        float _502 = _437 + _248;
        float _503 = _441 + _249;
        float _513 = fma(_503, cbModelParam._m0[26u].z, fma(_502, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _501)) - _468;
        float _514 = fma(_503, cbModelParam._m0[27u].z, fma(_502, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _501)) - _472;
        float _515 = fma(_503, cbModelParam._m0[28u].z, fma(_502, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _501)) - _476;
        float _519 = inversesqrt(dot(vec3(_513, _514, _515), vec3(_513, _514, _515)));
        float _532 = ((_519 * _513) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_468 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _533 = ((_519 * _514) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_472 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _534 = ((_519 * _515) / cbModelParam._m0[34u].z) + ((((((_476 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_532, _533, _534), 0.0);
        float _571 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_537.x + (-0.5));
        float _573 = _571 * (_537.y + (-0.5));
        float _574 = _571 * (_537.z + (-0.5));
        float _581 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_544.x + (-0.5));
        float _583 = _581 * (_544.y + (-0.5));
        float _584 = _581 * (_544.z + (-0.5));
        float _591 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_551.x + (-0.5));
        float _593 = _591 * (_551.y + (-0.5));
        float _594 = _591 * (_551.z + (-0.5));
        float _601 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _602 = _601 * (_558.x + (-0.5));
        float _603 = _601 * (_558.y + (-0.5));
        float _604 = _601 * (_558.z + (-0.5));
        float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
        float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = _572 * 0.5;
        float _609 = _582 * 0.5;
        float _610 = _592 * 0.5;
        float _611 = dot(vec3(_608, _609, _610), vec3(_608, _609, _610));
        float _616 = (_611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_611);
        float _625 = (dot(vec3(_247, _248, _249), vec3(_616 * _608, _616 * _609, _616 * _610)) + 1.0) * 0.5;
        float _2988 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _635 = sqrt(((_609 * _609) + (_608 * _608)) + (_610 * _610)) / (_605 + 9.9999997473787516355514526367188e-06);
        float _2999 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _2999 : (isnan(_2999) ? 1.0 : min(_2999, 1.0));
        float _637 = _636 * 2.0;
        float _641 = (1.0 - _636) / (_636 + 1.0);
        float _3010 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3010 : (isnan(_3010) ? 1.0 : min(_3010, 1.0));
        float _651 = ((((1.0 - _642) * (_637 + 2.0)) * exp2(log2(isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0))) * (_637 + 1.0))) + _642) * _605;
        float _652 = _573 * 0.5;
        float _653 = _583 * 0.5;
        float _654 = _593 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _668 = (dot(vec3(_247, _248, _249), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _3021 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _677 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_606 + 9.9999997473787516355514526367188e-06);
        float _3032 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _678 = isnan(1.0) ? _3032 : (isnan(_3032) ? 1.0 : min(_3032, 1.0));
        float _679 = _678 * 2.0;
        float _683 = (1.0 - _678) / (_678 + 1.0);
        float _3043 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0));
        float _693 = ((((1.0 - _684) * (_679 + 2.0)) * exp2(log2(isnan(1.0) ? _3021 : (isnan(_3021) ? 1.0 : min(_3021, 1.0))) * (_679 + 1.0))) + _684) * _606;
        float _694 = _574 * 0.5;
        float _695 = _584 * 0.5;
        float _696 = _594 * 0.5;
        float _697 = dot(vec3(_694, _695, _696), vec3(_694, _695, _696));
        float _702 = (_697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_697);
        float _710 = (dot(vec3(_247, _248, _249), vec3(_702 * _694, _702 * _695, _702 * _696)) + 1.0) * 0.5;
        float _3054 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _719 = sqrt(((_695 * _695) + (_694 * _694)) + (_696 * _696)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3065 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _721 = _720 * 2.0;
        float _725 = (1.0 - _720) / (_720 + 1.0);
        float _3076 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _735 = ((((1.0 - _726) * (_721 + 2.0)) * exp2(log2(isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0))) * (_721 + 1.0))) + _726) * _607;
        _743 = _574;
        _745 = _573;
        _746 = _572;
        _747 = _584;
        _748 = _583;
        _749 = _582;
        _750 = _594;
        _751 = _593;
        _752 = _592;
        _753 = _607;
        _754 = _606;
        _755 = _605;
        _756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0)));
        _757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)));
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0)));
    }
    else
    {
        _743 = _744;
        _745 = _744;
        _746 = _744;
        _747 = _744;
        _748 = _744;
        _749 = _744;
        _750 = _744;
        _751 = _744;
        _752 = _744;
        _753 = _744;
        _754 = _744;
        _755 = _744;
        _756 = 0.0;
        _757 = 0.0;
        _758 = 0.0;
    }
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _784 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _788 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _792 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _815 = _433 + _247;
        float _816 = _437 + _248;
        float _817 = _441 + _249;
        float _827 = fma(_817, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815)) - _784;
        float _828 = fma(_817, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815)) - _788;
        float _829 = fma(_817, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815)) - _792;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_784 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_788 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[35u].z) + ((((((_792 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _883 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_850.x + (-0.5));
        float _885 = _883 * (_850.y + (-0.5));
        float _886 = _883 * (_850.z + (-0.5));
        float _893 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_857.x + (-0.5));
        float _895 = _893 * (_857.y + (-0.5));
        float _896 = _893 * (_857.z + (-0.5));
        float _903 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_864.x + (-0.5));
        float _905 = _903 * (_864.y + (-0.5));
        float _906 = _903 * (_864.z + (-0.5));
        float _913 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_871.x + (-0.5));
        float _915 = _913 * (_871.y + (-0.5));
        float _916 = _913 * (_871.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_247, _248, _249), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3117 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3128 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3139 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) * (_947 + 1.0))) + _952) * _917;
        float _962 = _885 * 0.5;
        float _963 = _895 * 0.5;
        float _964 = _905 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_247, _248, _249), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3150 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3161 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3172 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))) * (_989 + 1.0))) + _994) * _918;
        float _1004 = _886 * 0.5;
        float _1005 = _896 * 0.5;
        float _1006 = _906 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_247, _248, _249), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3183 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3194 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3205 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * (_1031 + 1.0))) + _1036) * _919;
        _1053 = _886;
        _1054 = _885;
        _1055 = _884;
        _1056 = _896;
        _1057 = _895;
        _1058 = _894;
        _1059 = _906;
        _1060 = _905;
        _1061 = _904;
        _1062 = _919;
        _1063 = _918;
        _1064 = _917;
        _1065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _744;
        _1054 = _744;
        _1055 = _744;
        _1056 = _744;
        _1057 = _744;
        _1058 = _744;
        _1059 = _744;
        _1060 = _744;
        _1061 = _744;
        _1062 = _744;
        _1063 = _744;
        _1064 = _744;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1077 = (cbModelParam._m0[1u].x * (_1065 - _756)) + _756;
    float _1078 = (cbModelParam._m0[1u].x * (_1066 - _757)) + _757;
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _758)) + _758;
    float _1100 = fma(_1079, cbSceneParam._m0[89u].z, fma(_1078, cbSceneParam._m0[89u].y, _1077 * cbSceneParam._m0[89u].x));
    float _1103 = fma(_1079, cbSceneParam._m0[90u].z, fma(_1078, cbSceneParam._m0[90u].y, _1077 * cbSceneParam._m0[90u].x));
    float _1106 = fma(_1079, cbSceneParam._m0[91u].z, fma(_1078, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1077));
    float _1121 = _409 * 0.5;
    float _1122 = _410 * 0.5;
    float _1123 = _411 * 0.5;
    float _1124 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1127 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1054, _1057, _1060, _1063));
    float _1130 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_1053, _1056, _1059, _1062));
    float _1164;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1137 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_743, _747, _750, _753));
        float _1141 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_745, _748, _751, _754));
        float _1145 = dot(vec4(_1121, _1122, _1123, 1.0), vec4(_746, _749, _752, _755));
        float _1152 = dot(vec4(cbModelParam._m0[39u]), vec4(_1121, _1122, _1123, 1.0));
        _1164 = dot(vec3(isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1164 = 1.0;
    }
    float _1175;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1166 = dot(vec4(cbModelParam._m0[40u]), vec4(_1121, _1122, _1123, 1.0));
        _1175 = dot(vec3(isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1166) ? 0.0 : (isnan(0.0) ? _1166 : max(0.0, _1166))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1175 = 1.0;
    }
    float _1179 = (_1175 * cbModelParam._m0[1u].x) + (_1164 * (1.0 - cbModelParam._m0[1u].x));
    float _1188 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1269;
    float _1271;
    float _1273;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1236 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1240 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1244 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1247 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1250 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1253 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1279;
        if (_1247 > 0.0)
        {
            _1279 = abs((1.0 - _1236) / _1247);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1247 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1236 + 1.0) / _1247);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1279 = frontier_phi_14_12_ladder;
        }
        float _1484;
        if (_1250 > 0.0)
        {
            _1484 = abs((1.0 - _1240) / _1250);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1250 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1240 + 1.0) / _1250);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1484 = frontier_phi_23_19_ladder;
        }
        float _1673;
        if (_1253 > 0.0)
        {
            _1673 = abs((1.0 - _1244) / _1253);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1244 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1673 = frontier_phi_35_30_ladder;
        }
        float _1675 = isnan(_1484) ? _1279 : (isnan(_1279) ? _1484 : min(_1279, _1484));
        float _1676 = isnan(_1673) ? _1675 : (isnan(_1675) ? _1673 : min(_1675, _1673));
        float _1680 = (_1676 * _1247) + _1236;
        float _1681 = (_1676 * _1250) + _1240;
        float _1682 = (_1676 * _1253) + _1244;
        float _1683 = _1676 * 9.9999997473787516355514526367188e-05;
        float _1685 = (-1.0) - _1683;
        float _1687 = _1683 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1682 > _1687) || ((_1682 < _1685) || ((_1681 > _1687) || ((_1681 < _1685) || ((_1680 < _1685) || (_1680 > _1687))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1779 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1682, cbModelParam._m0[9u].z, fma(_1681, cbModelParam._m0[9u].y, _1680 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1682, cbModelParam._m0[10u].z, fma(_1681, cbModelParam._m0[10u].y, _1680 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1682, cbModelParam._m0[11u].z, fma(_1681, cbModelParam._m0[11u].y, _1680 * cbModelParam._m0[11u].x))), _1188);
            frontier_phi_13_35_ladder = _1779.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1779.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1779.x * cbModelParam._m0[1u].y;
        }
        _1269 = frontier_phi_13_35_ladder_2;
        _1271 = frontier_phi_13_35_ladder_1;
        _1273 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1188);
        _1269 = _1257.x * cbModelParam._m0[1u].y;
        _1271 = _1257.y * cbModelParam._m0[1u].y;
        _1273 = _1257.z * cbModelParam._m0[1u].y;
    }
    float _1276 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1332 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1336 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1340 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1343 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1346 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1349 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1489;
        if (_1343 > 0.0)
        {
            _1489 = abs((1.0 - _1332) / _1343);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1332 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1489 = frontier_phi_25_21_ladder;
        }
        float _1700;
        if (_1346 > 0.0)
        {
            _1700 = abs((1.0 - _1336) / _1346);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1336 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1700 = frontier_phi_37_32_ladder;
        }
        float _1851;
        if (_1349 > 0.0)
        {
            _1851 = abs((1.0 - _1340) / _1349);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1340 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1851 = frontier_phi_46_43_ladder;
        }
        float _1853 = isnan(_1700) ? _1489 : (isnan(_1489) ? _1700 : min(_1489, _1700));
        float _1854 = isnan(_1851) ? _1853 : (isnan(_1853) ? _1851 : min(_1853, _1851));
        float _1858 = (_1854 * _1343) + _1332;
        float _1859 = (_1854 * _1346) + _1336;
        float _1860 = (_1854 * _1349) + _1340;
        float _1861 = _1854 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1861;
        float _1864 = _1861 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1860 > _1864) || ((_1860 < _1862) || ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 < _1862) || (_1858 > _1864))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1860, cbModelParam._m0[17u].z, fma(_1859, cbModelParam._m0[17u].y, _1858 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1860, cbModelParam._m0[18u].z, fma(_1859, cbModelParam._m0[18u].y, _1858 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1860, cbModelParam._m0[19u].z, fma(_1859, cbModelParam._m0[19u].y, _1858 * cbModelParam._m0[19u].x))), _1276);
            frontier_phi_22_46_ladder = _2097.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2097.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2097.x * cbModelParam._m0[1u].z;
        }
        _1368 = frontier_phi_22_46_ladder_2;
        _1370 = frontier_phi_22_46_ladder_1;
        _1372 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1276);
        _1368 = _1352.x * cbModelParam._m0[1u].z;
        _1370 = _1352.y * cbModelParam._m0[1u].z;
        _1372 = _1352.z * cbModelParam._m0[1u].z;
    }
    float _1384 = _401 * 0.01200000010430812835693359375;
    float _1386 = _1384 * ((cbModelParam._m0[1u].w * (_1368 - _1269)) + _1269);
    float _1387 = _1384 * ((cbModelParam._m0[1u].w * (_1370 - _1271)) + _1271);
    float _1388 = _1384 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1391 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1394 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1397 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, _1386 * cbSceneParam._m0[91u].x));
    uvec4 _1407 = floatBitsToUint(cbInstanceData._m0[_375 + 5u]);
    uint _1409 = _1407.x * 14u;
    uint _1410 = _1409 + 13u;
    float _1417 = _401 + (-1.0);
    float _1422 = (cbLight._m0[_1410].x * _1417) + 1.0;
    float _1423 = (cbLight._m0[_1410].y * _1417) + 1.0;
    float _1424 = (cbLight._m0[_1410].z * _1417) + 1.0;
    float _1425 = (cbLight._m0[_1410].w * _1417) + 1.0;
    uint _1426 = _1409 + 5u;
    float _1432 = isnan(1.0) ? _1423 : (isnan(_1423) ? 1.0 : min(_1423, 1.0));
    uint _1436 = _1409 + 4u;
    float _1443 = isnan(1.0) ? _1422 : (isnan(_1422) ? 1.0 : min(_1422, 1.0));
    uint _1447 = _1409 | 1u;
    float _1458 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_247, _248, _249));
    float _1461 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_247, _248, _249));
    float _3341 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
    float _3352 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
    float _1466 = (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.3183098733425140380859375;
    float _1468 = (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.3183098733425140380859375;
    float _1475 = ((cbLight._m0[_1426].x * _1432) * _1468) + ((cbLight._m0[_1436].x * _1443) * _1466);
    float _1476 = ((_1432 * cbLight._m0[_1426].y) * _1468) + ((_1443 * cbLight._m0[_1436].y) * _1466);
    float _1477 = ((_1432 * cbLight._m0[_1426].z) * _1468) + ((_1443 * cbLight._m0[_1436].z) * _1466);
    uvec4 _1481 = floatBitsToUint(cbLight._m0[_1409 + 12u]);
    bool _1483 = _1481.x == 0u;
    float _1494;
    float _1496;
    float _1498;
    if (_1483)
    {
        _1494 = _1475;
        _1496 = _1476;
        _1498 = _1477;
    }
    else
    {
        uint _1502 = _1409 + 6u;
        float _1518 = (dot(vec3(cbLight._m0[_1409 + 2u].xyz), vec3(_247, _248, _249)) * 0.5) + 0.5;
        float _1519 = _1518 * _1518;
        float _3363 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1521 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1494 = (((cbLight._m0[_1502].x * 0.3183098733425140380859375) * _1520) * _1521) + _1475;
        _1496 = (((cbLight._m0[_1502].y * 0.3183098733425140380859375) * _1520) * _1521) + _1476;
        _1498 = (((cbLight._m0[_1502].z * 0.3183098733425140380859375) * _1520) * _1521) + _1477;
    }
    bool _1501 = _1481.y == 0u;
    float _1539;
    float _1541;
    float _1543;
    if (_1501)
    {
        _1539 = _1494;
        _1541 = _1496;
        _1543 = _1498;
    }
    else
    {
        uint _1644 = _1409 + 7u;
        float _1660 = (dot(vec3(cbLight._m0[_1409 + 3u].xyz), vec3(_247, _248, _249)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3379 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1663 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1539 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1494;
        _1541 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1496;
        _1543 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1498;
    }
    uint _1545 = _1409 + 8u;
    float _1551 = cbLight._m0[_1409].x + _326;
    float _1552 = cbLight._m0[_1409].y + _327;
    float _1553 = cbLight._m0[_1409].z + _328;
    float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
    float _1561 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1409].xyz));
    float _3395 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1564 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _1565 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _1566 = dot(vec3(cbLight._m0[_1409].xyz), vec3(_1551 * _1557, _1552 * _1557, _1553 * _1557));
    float _3417 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1577 = (exp2(log2(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1583 = (0.5 / ((_1564 + 9.9999999392252902907785028219223e-09) + _1565)) * _1564;
    float _3428 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1585 = (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 0.31831014156341552734375;
    uint _1596 = _1409 + 9u;
    float _1602 = cbLight._m0[_1447].x + _326;
    float _1603 = cbLight._m0[_1447].y + _327;
    float _1604 = cbLight._m0[_1447].z + _328;
    float _1608 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
    float _1612 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1447].xyz));
    float _3439 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1615 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _1616 = dot(vec3(cbLight._m0[_1447].xyz), vec3(_1602 * _1608, _1603 * _1608, _1604 * _1608));
    float _3450 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1625 = (exp2(log2(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1629 = (0.5 / ((_1615 + 9.9999999392252902907785028219223e-09) + _1565)) * _1615;
    float _3461 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1631 = (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * 0.31831014156341552734375;
    float _1641 = (((_1625 * cbLight._m0[_1596].x) * _1631) * _1432) + (((_1577 * cbLight._m0[_1545].x) * _1585) * _1443);
    float _1642 = (((_1625 * cbLight._m0[_1596].y) * _1631) * _1432) + (((_1577 * cbLight._m0[_1545].y) * _1585) * _1443);
    float _1643 = (((_1625 * cbLight._m0[_1596].z) * _1631) * _1432) + (((_1577 * cbLight._m0[_1545].z) * _1585) * _1443);
    float _1705;
    float _1707;
    float _1709;
    if (_1483)
    {
        _1705 = _1641;
        _1707 = _1642;
        _1709 = _1643;
    }
    else
    {
        uint _1711 = _1409 + 10u;
        uint _1717 = _1409 + 2u;
        float _1723 = cbLight._m0[_1717].x + _326;
        float _1724 = cbLight._m0[_1717].y + _327;
        float _1725 = cbLight._m0[_1717].z + _328;
        float _1729 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
        float _1733 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1717].xyz));
        float _3472 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1736 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1737 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1723 * _1729, _1724 * _1729, _1725 * _1729));
        float _3483 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1746 = (exp2(log2(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1750 = (0.5 / ((_1736 + 9.9999999392252902907785028219223e-09) + _1565)) * _1736;
        float _3494 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1752 = (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.31831014156341552734375;
        float _1753 = isnan(1.0) ? _1424 : (isnan(_1424) ? 1.0 : min(_1424, 1.0));
        _1705 = (((_1746 * cbLight._m0[_1711].x) * _1752) * _1753) + _1641;
        _1707 = (((_1746 * cbLight._m0[_1711].y) * _1752) * _1753) + _1642;
        _1709 = (((_1746 * cbLight._m0[_1711].z) * _1752) * _1753) + _1643;
    }
    float _1788;
    float _1790;
    float _1792;
    if (_1501)
    {
        _1788 = _1705;
        _1790 = _1707;
        _1792 = _1709;
    }
    else
    {
        uint _1799 = _1409 + 11u;
        uint _1805 = _1409 + 3u;
        float _1811 = cbLight._m0[_1805].x + _326;
        float _1812 = cbLight._m0[_1805].y + _327;
        float _1813 = cbLight._m0[_1805].z + _328;
        float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
        float _1821 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1805].xyz));
        float _3510 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1824 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1825 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_1811 * _1817, _1812 * _1817, _1813 * _1817));
        float _3521 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = (exp2(log2(1.0 - (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1838 = (0.5 / ((_1824 + 9.9999999392252902907785028219223e-09) + _1565)) * _1824;
        float _3532 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1840 = (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.31831014156341552734375;
        float _1841 = isnan(1.0) ? _1425 : (isnan(_1425) ? 1.0 : min(_1425, 1.0));
        _1788 = (((_1834 * cbLight._m0[_1799].x) * _1840) * _1841) + _1705;
        _1790 = (((_1834 * cbLight._m0[_1799].y) * _1840) * _1841) + _1707;
        _1792 = (((_1834 * cbLight._m0[_1799].z) * _1840) * _1841) + _1709;
    }
    float _1976;
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    if (_1407.y == 0u)
    {
        float _1916 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1916;
        float _1918 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1916;
        float _1919 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1916;
        uvec4 _1931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1932 = _1931.x;
        uint _1943 = uint((float(_1931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _335) / _1932))) + floor(float(uint(cbSceneParam._m0[85u].x * _334) / _1932)));
        float _1953 = (log2(_1919 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1954 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        uint _1957 = uint(isnan(14.0) ? _1954 : (isnan(_1954) ? 14.0 : min(_1954, 14.0)));
        uvec4 _1962 = texelFetch(g_lightClusterGridBuffer, int(((_1957 << 2u) + (_1943 << 6u)) >> 2u));
        uint _1963 = _1962.x;
        uint _1964 = _1931.z;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        if (((((1u << ((_1964 >> 4u) & 15u)) + 4294967295u) & _1963) == 0u) || ((_1964 & 240u) == 0u))
        {
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
        }
        else
        {
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            uint _2259 = 0u;
            uint _2268;
            bool _2269;
            for (;;)
            {
                _2268 = texelFetch(g_lightClassification, int((((_1957 << 5u) + (_1943 << 9u)) + (_2259 << 2u)) >> 2u)).x;
                _2269 = _2268 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2269)
                {
                    frontier_phi_61_pred = _2253;
                    frontier_phi_61_pred_1 = _2258;
                    frontier_phi_61_pred_2 = _2257;
                    frontier_phi_61_pred_3 = _2256;
                    frontier_phi_61_pred_4 = _2255;
                    frontier_phi_61_pred_5 = _2254;
                }
                else
                {
                    float _2377;
                    float _2378;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    uint _2383;
                    _2377 = _2253;
                    _2378 = _2254;
                    _2379 = _2255;
                    _2380 = _2256;
                    _2381 = _2257;
                    _2382 = _2258;
                    _2383 = _2268;
                    float _2309;
                    float _2310;
                    float _2311;
                    float _2312;
                    float _2313;
                    float _2314;
                    for (;;)
                    {
                        uint _2387 = uint(findLSB(_2383)) + (_2259 << 5u);
                        uint _2384 = (_2383 + 4294967295u) & _2383;
                        uint _2389 = _2387 * 48u;
                        vec4 _2403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2389)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 3u)).x));
                        uint _2409 = (_2387 * 48u) + 4u;
                        vec4 _2422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2409)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2409 + 3u)).x));
                        uint _2428 = (_2387 * 48u) + 8u;
                        vec3 _2439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2428)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2428 + 2u)).x));
                        float _2443 = _2403.x - _1917;
                        float _2444 = _2403.y - _1918;
                        float _2445 = _2403.z - _1919;
                        float _2446 = dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445));
                        float _2449 = inversesqrt(_2446);
                        float _2458 = 1.0 - (_2446 * _2403.w);
                        float _3558 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                        float _2459 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
                        float _2460 = sqrt(_2446) * _2422.w;
                        float _2463 = 1.39999997615814208984375 / (_2460 + 1.39999997615814208984375);
                        float _2464 = _2463 * _2463;
                        float _2467 = ((1.0 - _2464) * dot(vec3(_356, _359, _362), vec3(_2449 * _2443, _2449 * _2444, _2449 * _2445))) + _2464;
                        float _2470 = _2460 * _2460;
                        float _2474 = ((isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0))) * _2459) / ((_2470 * 0.699999988079071044921875) + 1.0);
                        float _2478 = (-0.0) - _1917;
                        float _2479 = (-0.0) - _1918;
                        float _2480 = (-0.0) - _1919;
                        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
                        float _2488 = dot(vec3(_356, _359, _362), vec3(_2484 * _2478, _2484 * _2479, _2484 * _2480));
                        float _3574 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _3585 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
                        float _2492 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
                        float _2496 = (0.5 / (((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) + 9.9999999392252902907785028219223e-09) + _2492)) * _2492;
                        float _3596 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                        float _2505 = (((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 3.1415927410125732421875) / ((_2470 * 2.1991131305694580078125) + 3.141590118408203125)) * _2459;
                        _2312 = (_2474 * _2422.x) + _2380;
                        _2313 = (_2474 * _2422.y) + _2381;
                        _2314 = (_2474 * _2422.z) + _2382;
                        _2309 = (_2505 * _2439.x) + _2377;
                        _2310 = (_2505 * _2439.y) + _2378;
                        _2311 = (_2505 * _2439.z) + _2379;
                        if (_2384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2377 = _2309;
                            _2378 = _2310;
                            _2379 = _2311;
                            _2380 = _2312;
                            _2381 = _2313;
                            _2382 = _2314;
                            _2383 = _2384;
                        }
                    }
                    frontier_phi_61_pred = _2309;
                    frontier_phi_61_pred_1 = _2314;
                    frontier_phi_61_pred_2 = _2313;
                    frontier_phi_61_pred_3 = _2312;
                    frontier_phi_61_pred_4 = _2311;
                    frontier_phi_61_pred_5 = _2310;
                }
                _2103 = frontier_phi_61_pred;
                _2113 = frontier_phi_61_pred_1;
                _2111 = frontier_phi_61_pred_2;
                _2109 = frontier_phi_61_pred_3;
                _2107 = frontier_phi_61_pred_4;
                _2105 = frontier_phi_61_pred_5;
                uint _2260 = _2259 + 1u;
                if (_2260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2253 = _2103;
                    _2254 = _2105;
                    _2255 = _2107;
                    _2256 = _2109;
                    _2257 = _2111;
                    _2258 = _2113;
                    _2259 = _2260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
        }
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.z;
        uint _2119 = (_2117 >> 8u) & 15u;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        if (((4294967295u << _2119) & _1963) == 0u)
        {
            _2224 = _2102;
            _2226 = _2104;
            _2228 = _2106;
            _2230 = _2108;
            _2232 = _2110;
            _2234 = _2112;
        }
        else
        {
            float _2249 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2119 < ((_2117 >> 12u) & 15u))
            {
                float _2225;
                float _2227;
                float _2229;
                float _2231;
                float _2233;
                float _2235;
                float _2360 = _2102;
                float _2361 = _2104;
                float _2362 = _2106;
                float _2363 = _2108;
                float _2364 = _2110;
                float _2365 = _2112;
                uint _2366 = _2119;
                uint _2375;
                bool _2376;
                for (;;)
                {
                    _2375 = texelFetch(g_lightClassification, int((((_1957 << 5u) + (_1943 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                    _2376 = _2375 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2376)
                    {
                        frontier_phi_67_pred = _2363;
                        frontier_phi_67_pred_1 = _2364;
                        frontier_phi_67_pred_2 = _2365;
                        frontier_phi_67_pred_3 = _2362;
                        frontier_phi_67_pred_4 = _2361;
                        frontier_phi_67_pred_5 = _2360;
                    }
                    else
                    {
                        float _2510;
                        float _2511;
                        float _2512;
                        float _2513;
                        float _2514;
                        float _2515;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2523 = _2360;
                        float _2524 = _2361;
                        float _2525 = _2362;
                        float _2526 = _2363;
                        float _2527 = _2364;
                        float _2528 = _2365;
                        uint _2529 = _2375;
                        uint _2530;
                        vec4 _2555;
                        float _2556;
                        vec4 _2571;
                        vec3 _2583;
                        vec4 _2599;
                        vec4 _2615;
                        float _2662;
                        bool _2663;
                        for (;;)
                        {
                            uint _2540 = ((_2366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2529));
                            _2530 = (_2529 + 4294967295u) & _2529;
                            uint _2542 = _2540 * 40u;
                            _2555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2542 + 3u)).x));
                            _2556 = _2555.w;
                            uint _2558 = (_2540 * 40u) + 4u;
                            _2571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2558 + 3u)).x));
                            uint _2573 = (_2540 * 40u) + 8u;
                            _2583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2573 + 2u)).x));
                            uint _2586 = (_2540 * 40u) + 16u;
                            _2599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2586 + 3u)).x));
                            uint _2602 = (_2540 * 40u) + 20u;
                            _2615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2602 + 3u)).x));
                            uint _2618 = (_2540 * 40u) + 24u;
                            vec4 _2631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 3u)).x));
                            uint _2637 = (_2540 * 40u) + 28u;
                            vec4 _2650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 3u)).x));
                            _2662 = fma(_1919, _2650.z, fma(_1918, _2650.y, _2650.x * _1917)) + _2650.w;
                            _2663 = !((fma(_1919, _2631.z, fma(_1918, _2631.y, _2631.x * _1917)) + _2631.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2663)
                            {
                                float _2690 = _2555.x - _1917;
                                float _2691 = _2555.y - _1918;
                                float _2692 = _2555.z - _1919;
                                float _2693 = dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692));
                                float _2696 = inversesqrt(_2693);
                                float _2697 = _2696 * _2690;
                                float _2698 = _2696 * _2691;
                                float _2699 = _2696 * _2692;
                                float _2703 = 1.0 - (_2693 / (_2556 * _2556));
                                float _3607 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                                float _2704 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
                                float _2708 = sqrt(_2693) * _2571.w;
                                float _2710 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                                float _2711 = _2710 * _2710;
                                float _2712 = 1.0 - _2711;
                                float _2714 = (_2712 * dot(vec3(_2697, _2698, _2699), vec3(_356, _359, _362))) + _2711;
                                float _2717 = _2708 * _2708;
                                float _2721 = (fma(_1919, _2599.z, fma(_1918, _2599.y, _2599.x * _1917)) + _2599.w) / _2662;
                                float _2722 = (fma(_1919, _2615.z, fma(_1918, _2615.y, _2615.x * _1917)) + _2615.w) / _2662;
                                float _2726 = 1.0 - dot(vec2(_2721, _2722), vec2(_2721, _2722));
                                float _3623 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                                float _2727 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
                                float _2728 = _2727 * (((isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0))) * _2704) / ((_2717 * 0.699999988079071044921875) + 1.0));
                                float _2738 = dot(vec3(_356, _359, _362), vec3((-0.0) - (_1917 * _2249), (-0.0) - (_1918 * _2249), (-0.0) - (_1919 * _2249)));
                                float _3634 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                                float _2746 = (_2712 * dot(vec3(_356, _359, _362), vec3(_2697, _2698, _2699))) + _2711;
                                float _3645 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
                                float _2751 = (0.5 / (((isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) + 9.9999999392252902907785028219223e-09) + _2747)) * _2747;
                                float _3656 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2758 = (_2727 * _2704) * (((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 3.1415927410125732421875) / ((_2717 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2758 * _2583.x;
                                frontier_phi_73_pred_1 = _2758 * _2583.y;
                                frontier_phi_73_pred_2 = _2728 * _2571.z;
                                frontier_phi_73_pred_3 = _2728 * _2571.y;
                                frontier_phi_73_pred_4 = _2728 * _2571.x;
                                frontier_phi_73_pred_5 = _2758 * _2583.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2762 = frontier_phi_73_pred;
                            _2763 = frontier_phi_73_pred_1;
                            _2767 = frontier_phi_73_pred_2;
                            _2766 = frontier_phi_73_pred_3;
                            _2765 = frontier_phi_73_pred_4;
                            _2764 = frontier_phi_73_pred_5;
                            _2513 = _2765 + _2526;
                            _2514 = _2766 + _2527;
                            _2515 = _2767 + _2528;
                            _2510 = _2762 + _2523;
                            _2511 = _2763 + _2524;
                            _2512 = _2764 + _2525;
                            if (_2530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2523 = _2510;
                                _2524 = _2511;
                                _2525 = _2512;
                                _2526 = _2513;
                                _2527 = _2514;
                                _2528 = _2515;
                                _2529 = _2530;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2513;
                        frontier_phi_67_pred_1 = _2514;
                        frontier_phi_67_pred_2 = _2515;
                        frontier_phi_67_pred_3 = _2512;
                        frontier_phi_67_pred_4 = _2511;
                        frontier_phi_67_pred_5 = _2510;
                    }
                    _2231 = frontier_phi_67_pred;
                    _2233 = frontier_phi_67_pred_1;
                    _2235 = frontier_phi_67_pred_2;
                    _2229 = frontier_phi_67_pred_3;
                    _2227 = frontier_phi_67_pred_4;
                    _2225 = frontier_phi_67_pred_5;
                    uint _2367 = _2366 + 1u;
                    if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2360 = _2225;
                        _2361 = _2227;
                        _2362 = _2229;
                        _2363 = _2231;
                        _2364 = _2233;
                        _2365 = _2235;
                        _2366 = _2367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2233;
                frontier_phi_55_56_ladder_1 = _2235;
                frontier_phi_55_56_ladder_2 = _2231;
                frontier_phi_55_56_ladder_3 = _2229;
                frontier_phi_55_56_ladder_4 = _2227;
                frontier_phi_55_56_ladder_5 = _2225;
            }
            else
            {
                frontier_phi_55_56_ladder = _2110;
                frontier_phi_55_56_ladder_1 = _2112;
                frontier_phi_55_56_ladder_2 = _2108;
                frontier_phi_55_56_ladder_3 = _2106;
                frontier_phi_55_56_ladder_4 = _2104;
                frontier_phi_55_56_ladder_5 = _2102;
            }
            _2224 = frontier_phi_55_56_ladder_5;
            _2226 = frontier_phi_55_56_ladder_4;
            _2228 = frontier_phi_55_56_ladder_3;
            _2230 = frontier_phi_55_56_ladder_2;
            _2232 = frontier_phi_55_56_ladder;
            _2234 = frontier_phi_55_56_ladder_1;
        }
        float _2239 = isnan(1.0) ? _401 : (isnan(_401) ? 1.0 : min(_401, 1.0));
        _1976 = (_2239 * _2230) + _1539;
        _1978 = (_2239 * _2232) + _1541;
        _1980 = (_2239 * _2234) + _1543;
        _1982 = ((_2224 * 0.039999999105930328369140625) * _2239) + _1788;
        _1984 = ((_2226 * 0.039999999105930328369140625) * _2239) + _1790;
        _1986 = ((_2228 * 0.039999999105930328369140625) * _2239) + _1792;
    }
    else
    {
        _1976 = _1539;
        _1978 = _1541;
        _1980 = _1543;
        _1982 = _1788;
        _1984 = _1790;
        _1986 = _1792;
    }
    uint _1992 = _377 + uint(cbMatDynParam._m0[0u].w);
    float _2001 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _216.x) * _242) * cbInstanceData._m0[_1992].x;
    float _2005 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _216.y) * _242) * cbInstanceData._m0[_1992].y;
    float _2009 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _216.z) * _242) * cbInstanceData._m0[_1992].z;
    float _3672 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3683 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3694 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _2026 = (((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1976 + ((isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0))) * _401))) + ((_1982 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + _2001;
    float _2028 = (_2005 + ((_1984 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1978 + ((isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))) * _401)));
    float _2030 = (_2009 + ((_1986 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _1179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1980 + ((isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0))) * _401)));
    float _3720 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2043 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    uint _2044 = _375 + 6u;
    float _2052 = _334 / cbSceneParam._m0[86u].x;
    float _2053 = _335 / cbSceneParam._m0[86u].y;
    vec4 _2067 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2052, _2053, (log2((isnan(cbSceneParam._m0[77u].w) ? _268 : (isnan(_268) ? cbSceneParam._m0[77u].w : min(_268, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2069 = _2067.x;
    float _2070 = _2067.y;
    float _2071 = _2067.z;
    float _2072 = _2067.w;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    if (_268 > cbSceneParam._m0[78u].w)
    {
        float _2127 = isnan(_268) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _268 : min(cbSceneParam._m0[80u].w, _268));
        float _2128 = _2127 / _268;
        float _2139 = _2128 * _319;
        float _2140 = _320 * _2128;
        float _2141 = (-0.0) - _2140;
        float _2143 = _2128 * _321;
        float _2145 = (cbSceneParam._m0[77u].w * _2141) / _2127;
        float _2146 = _2145 + cbSceneParam._m0[79u].w;
        float _2147 = cbSceneParam._m0[79u].w - _2140;
        float _2153 = sqrt(((_2139 * _2139) + (_2140 * _2140)) + (_2143 * _2143));
        float _2156 = (1.0 - (cbSceneParam._m0[77u].w / _2127)) * _2153;
        float _2161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2322;
        if (abs((_2141 - _2145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2322 = ((((_2146 > 0.0) ? exp2(_2161 * _2146) : (2.0 - exp2(_2163 * _2146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2156;
        }
        else
        {
            float _2282 = 1.0 / cbSceneParam._m0[80u].x;
            float _2283 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : max(_2146, _2147));
            float _2284 = isnan(_2147) ? _2146 : (isnan(_2146) ? _2147 : min(_2146, _2147));
            float _2293 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : min(_2283, 0.0));
            float _2294 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : min(_2284, 0.0));
            _2322 = ((abs(_2153 / _2141) * cbSceneParam._m0[80u].y) * ((((_2293 - _2294) * 2.0) - ((exp2(_2161 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)))) - exp2(_2161 * (isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))))) * _2282)) - ((exp2(_2163 * _2293) - exp2(_2163 * _2294)) * _2282))) + (_2156 * cbSceneParam._m0[80u].z);
        }
        vec4 _2324 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2052, _2053, 1.0), 0.0);
        float _2333 = exp2((_2322 * (-1.44269502162933349609375)) * (1.0 - _2324.w));
        float _2334 = log2(_2333);
        float _2350 = log2(_2072);
        _2165 = (exp2(_2350 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].x)) * _2324.x) / cbSceneParam._m0[78u].x)) + _2069;
        _2167 = (exp2(_2350 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].y)) * _2324.y) / cbSceneParam._m0[78u].y)) + _2070;
        _2169 = (exp2(_2350 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2334 * cbSceneParam._m0[78u].z)) * _2324.z) / cbSceneParam._m0[78u].z)) + _2071;
        _2171 = _2333 * _2072;
    }
    else
    {
        _2165 = _2069;
        _2167 = _2070;
        _2169 = _2071;
        _2171 = _2072;
    }
    float _2183 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2184 = _2183 == 3.0;
    float _2185 = log2(_2171);
    float _2189 = exp2(_2185 * cbSceneParam._m0[78u].x);
    float _2190 = exp2(_2185 * cbSceneParam._m0[78u].y);
    float _2191 = exp2(_2185 * cbSceneParam._m0[78u].z);
    float _2192 = _2189 * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    float _2193 = _2190 * (isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0)));
    float _2194 = _2191 * (isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)));
    float _2203 = (_2183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2203 * (_2184 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2165)));
    SV_Target.y = _2203 * (_2184 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.z = _2203 * (_2184 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.w = cbInstanceData._m0[_2044].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2001) * _2043) * _2189) * _2203;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2005) * _2043) * _2190) * _2203;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2009) * _2043) * _2191) * _2203;
    SV_Target_1.w = cbInstanceData._m0[_2044].w;
}


