#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _793;
float _3284;
float _3285;
float _3286;
float _3287;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _173 = _172 * NORMAL.x;
    float _174 = _172 * NORMAL.y;
    float _175 = _172 * NORMAL.z;
    vec4 _194 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _200 = _194.x * cbMtdParam._m0[9u].x;
    float _201 = _194.y * cbMtdParam._m0[9u].y;
    float _202 = _194.z * cbMtdParam._m0[9u].z;
    vec4 _224 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _240 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3296 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _242 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _250 = (((_242 * _242) * (3.0 - (_242 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _254 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _255 = _254 * _173;
    float _256 = _254 * _174;
    float _257 = _254 * _175;
    float _3307 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _3318 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3329 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _276 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _317 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _327 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _317);
    float _328 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _317);
    float _329 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _317);
    float _333 = inversesqrt(dot(vec3(_327, _328, _329), vec3(_327, _328, _329)));
    float _334 = _327 * _333;
    float _335 = _328 * _333;
    float _336 = _329 * _333;
    vec4 _341 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _343 = _341.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _472 = sqrt(((_327 * _327) + (_328 * _328)) + (_329 * _329));
        float _478 = (cbMatDynParam._m0[5u].x * _472) + cbMatDynParam._m0[5u].y;
        float _3340 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
        float _479 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _483 = (cbMatDynParam._m0[5u].z * _472) + cbMatDynParam._m0[5u].w;
        float _3351 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) - _479)) + _479) < ((_343 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _355 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _356 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_257, cbSceneParam._m0[5u].z, fma(_256, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _255));
    float _379 = fma(_257, cbSceneParam._m0[6u].z, fma(_256, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _255));
    float _382 = fma(_257, cbSceneParam._m0[7u].z, fma(_256, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _255));
    uint _395 = uint(roundEven(NORMAL.w)) * 13u;
    uint _397 = _395 + 9u;
    uint _398 = _397 + uint(cbMatDynParam._m0[0u].w);
    float _404 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0)))) * cbInstanceData._m0[_398].x;
    float _405 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * cbInstanceData._m0[_398].y;
    float _406 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * cbInstanceData._m0[_398].z;
    float _3362 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
    float _3373 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    vec4 _418 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _355, cbSceneParam._m0[86u].y * _356));
    float _421 = _418.x * TEXCOORD.z;
    float _422 = dot(vec3(_255, _256, _257), vec3(_334, _335, _336));
    float _425 = _422 * 2.0;
    float _429 = (_425 * _255) - _334;
    float _430 = (_425 * _256) - _335;
    float _431 = (_425 * _257) - _336;
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _457 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _792;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _517 = fma(_461, cbModelParam._m0[26u].z, fma(_457, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _453));
        float _521 = fma(_461, cbModelParam._m0[27u].z, fma(_457, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _453));
        float _525 = fma(_461, cbModelParam._m0[28u].z, fma(_457, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _453));
        float _550 = _453 + _255;
        float _551 = _457 + _256;
        float _552 = _461 + _257;
        float _562 = fma(_552, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550)) - _517;
        float _563 = fma(_552, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550)) - _521;
        float _564 = fma(_552, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550)) - _525;
        float _568 = inversesqrt(dot(vec3(_562, _563, _564), vec3(_562, _563, _564)));
        float _581 = ((_568 * _562) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_517 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _582 = ((_568 * _563) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_521 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _583 = ((_568 * _564) / cbModelParam._m0[34u].z) + ((((((_525 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _600 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        vec4 _607 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_581, _582, _583), 0.0);
        float _620 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_586.x + (-0.5));
        float _622 = _620 * (_586.y + (-0.5));
        float _623 = _620 * (_586.z + (-0.5));
        float _630 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_593.x + (-0.5));
        float _632 = _630 * (_593.y + (-0.5));
        float _633 = _630 * (_593.z + (-0.5));
        float _640 = exp2((_600.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_600.x + (-0.5));
        float _642 = _640 * (_600.y + (-0.5));
        float _643 = _640 * (_600.z + (-0.5));
        float _650 = exp2((_607.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_607.x + (-0.5));
        float _652 = _650 * (_607.y + (-0.5));
        float _653 = _650 * (_607.z + (-0.5));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _656 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _657 = _621 * 0.5;
        float _658 = _631 * 0.5;
        float _659 = _641 * 0.5;
        float _660 = dot(vec3(_657, _658, _659), vec3(_657, _658, _659));
        float _665 = (_660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_660);
        float _674 = (dot(vec3(_255, _256, _257), vec3(_665 * _657, _665 * _658, _665 * _659)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _684 = sqrt(((_658 * _658) + (_657 * _657)) + (_659 * _659)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _686 = _685 * 2.0;
        float _690 = (1.0 - _685) / (_685 + 1.0);
        float _3432 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _700 = ((((1.0 - _691) * (_686 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_686 + 1.0))) + _691) * _654;
        float _701 = _622 * 0.5;
        float _702 = _632 * 0.5;
        float _703 = _642 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(_255, _256, _257), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_655 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _3465 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_728 + 1.0))) + _733) * _655;
        float _743 = _623 * 0.5;
        float _744 = _633 * 0.5;
        float _745 = _643 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _759 = (dot(vec3(_255, _256, _257), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _768 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_656 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3498 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_770 + 1.0))) + _775) * _656;
        _792 = _623;
        _794 = _622;
        _795 = _621;
        _796 = _633;
        _797 = _632;
        _798 = _631;
        _799 = _643;
        _800 = _642;
        _801 = _641;
        _802 = _656;
        _803 = _655;
        _804 = _654;
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0)));
        _806 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
        _807 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
    }
    else
    {
        _792 = _793;
        _794 = _793;
        _795 = _793;
        _796 = _793;
        _797 = _793;
        _798 = _793;
        _799 = _793;
        _800 = _793;
        _801 = _793;
        _802 = _793;
        _803 = _793;
        _804 = _793;
        _805 = 0.0;
        _806 = 0.0;
        _807 = 0.0;
    }
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _836 = fma(_461, cbModelParam._m0[30u].z, fma(_457, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _453));
        float _840 = fma(_461, cbModelParam._m0[31u].z, fma(_457, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _453));
        float _844 = fma(_461, cbModelParam._m0[32u].z, fma(_457, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _453));
        float _867 = _453 + _255;
        float _868 = _457 + _256;
        float _869 = _461 + _257;
        float _879 = fma(_869, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867)) - _836;
        float _880 = fma(_869, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867)) - _840;
        float _881 = fma(_869, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867)) - _844;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_836 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_840 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[35u].z) + ((((((_844 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _935 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_902.x + (-0.5));
        float _937 = _935 * (_902.y + (-0.5));
        float _938 = _935 * (_902.z + (-0.5));
        float _945 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_909.x + (-0.5));
        float _947 = _945 * (_909.y + (-0.5));
        float _948 = _945 * (_909.z + (-0.5));
        float _955 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_916.x + (-0.5));
        float _957 = _955 * (_916.y + (-0.5));
        float _958 = _955 * (_916.z + (-0.5));
        float _965 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_923.x + (-0.5));
        float _967 = _965 * (_923.y + (-0.5));
        float _968 = _965 * (_923.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_255, _256, _257), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3561 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_999 + 1.0))) + _1004) * _969;
        float _1014 = _937 * 0.5;
        float _1015 = _947 * 0.5;
        float _1016 = _957 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_255, _256, _257), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3594 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1041 + 1.0))) + _1046) * _970;
        float _1056 = _938 * 0.5;
        float _1057 = _948 * 0.5;
        float _1058 = _958 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_255, _256, _257), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3627 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1083 + 1.0))) + _1088) * _971;
        _1105 = _938;
        _1106 = _937;
        _1107 = _936;
        _1108 = _948;
        _1109 = _947;
        _1110 = _946;
        _1111 = _958;
        _1112 = _957;
        _1113 = _956;
        _1114 = _971;
        _1115 = _970;
        _1116 = _969;
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _793;
        _1106 = _793;
        _1107 = _793;
        _1108 = _793;
        _1109 = _793;
        _1110 = _793;
        _1111 = _793;
        _1112 = _793;
        _1113 = _793;
        _1114 = _793;
        _1115 = _793;
        _1116 = _793;
        _1117 = 0.0;
        _1118 = 0.0;
        _1119 = 0.0;
    }
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _805)) + _805;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _806)) + _806;
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _807)) + _807;
    float _1152 = fma(_1131, cbSceneParam._m0[89u].z, fma(_1130, cbSceneParam._m0[89u].y, _1129 * cbSceneParam._m0[89u].x));
    float _1155 = fma(_1131, cbSceneParam._m0[90u].z, fma(_1130, cbSceneParam._m0[90u].y, _1129 * cbSceneParam._m0[90u].x));
    float _1158 = fma(_1131, cbSceneParam._m0[91u].z, fma(_1130, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1129));
    float _1173 = _429 * 0.5;
    float _1174 = _430 * 0.5;
    float _1175 = _431 * 0.5;
    float _1176 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1179 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1182 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1216;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1189 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_792, _796, _799, _802));
        float _1193 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_794, _797, _800, _803));
        float _1197 = dot(vec4(_1173, _1174, _1175, 1.0), vec4(_795, _798, _801, _804));
        float _1204 = dot(vec4(cbModelParam._m0[39u]), vec4(_1173, _1174, _1175, 1.0));
        _1216 = dot(vec3(isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1204) ? 0.0 : (isnan(0.0) ? _1204 : max(0.0, _1204))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1216 = 1.0;
    }
    float _1227;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1218 = dot(vec4(cbModelParam._m0[40u]), vec4(_1173, _1174, _1175, 1.0));
        _1227 = dot(vec3(isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)), isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1227 = 1.0;
    }
    float _1231 = (_1227 * cbModelParam._m0[1u].x) + (_1216 * (1.0 - cbModelParam._m0[1u].x));
    float _1240 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1321;
    float _1323;
    float _1325;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1288 = fma(_461, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453)) + cbModelParam._m0[13u].w;
        float _1292 = fma(_461, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453)) + cbModelParam._m0[14u].w;
        float _1296 = fma(_461, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453)) + cbModelParam._m0[15u].w;
        float _1299 = fma(_431, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _429));
        float _1302 = fma(_431, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _429));
        float _1305 = fma(_431, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _429));
        float _1331;
        if (_1299 > 0.0)
        {
            _1331 = abs((1.0 - _1288) / _1299);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1299 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1288 + 1.0) / _1299);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1331 = frontier_phi_17_15_ladder;
        }
        float _1504;
        if (_1302 > 0.0)
        {
            _1504 = abs((1.0 - _1292) / _1302);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1302 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1292 + 1.0) / _1302);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1504 = frontier_phi_26_22_ladder;
        }
        float _1800;
        if (_1305 > 0.0)
        {
            _1800 = abs((1.0 - _1296) / _1305);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1296 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1800 = frontier_phi_38_33_ladder;
        }
        float _1802 = isnan(_1504) ? _1331 : (isnan(_1331) ? _1504 : min(_1331, _1504));
        float _1803 = isnan(_1800) ? _1802 : (isnan(_1802) ? _1800 : min(_1802, _1800));
        float _1807 = (_1803 * _1299) + _1288;
        float _1808 = (_1803 * _1302) + _1292;
        float _1809 = (_1803 * _1305) + _1296;
        float _1810 = _1803 * 9.9999997473787516355514526367188e-05;
        float _1812 = (-1.0) - _1810;
        float _1814 = _1810 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1809 > _1814) || ((_1809 < _1812) || ((_1808 > _1814) || ((_1808 < _1812) || ((_1807 < _1812) || (_1807 > _1814))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1954 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1809, cbModelParam._m0[9u].z, fma(_1808, cbModelParam._m0[9u].y, _1807 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1809, cbModelParam._m0[10u].z, fma(_1808, cbModelParam._m0[10u].y, _1807 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1809, cbModelParam._m0[11u].z, fma(_1808, cbModelParam._m0[11u].y, _1807 * cbModelParam._m0[11u].x))), _1240);
            frontier_phi_16_38_ladder = _1954.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1954.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1954.x * cbModelParam._m0[1u].y;
        }
        _1321 = frontier_phi_16_38_ladder_2;
        _1323 = frontier_phi_16_38_ladder_1;
        _1325 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_429, _430, _431), _1240);
        _1321 = _1309.x * cbModelParam._m0[1u].y;
        _1323 = _1309.y * cbModelParam._m0[1u].y;
        _1325 = _1309.z * cbModelParam._m0[1u].y;
    }
    float _1328 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1384 = fma(_461, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453)) + cbModelParam._m0[21u].w;
        float _1388 = fma(_461, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453)) + cbModelParam._m0[22u].w;
        float _1392 = fma(_461, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453)) + cbModelParam._m0[23u].w;
        float _1395 = fma(_431, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _429));
        float _1398 = fma(_431, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _429));
        float _1401 = fma(_431, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _429));
        float _1509;
        if (_1395 > 0.0)
        {
            _1509 = abs((1.0 - _1384) / _1395);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1384 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1509 = frontier_phi_28_24_ladder;
        }
        float _1827;
        if (_1398 > 0.0)
        {
            _1827 = abs((1.0 - _1388) / _1398);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1388 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1827 = frontier_phi_40_35_ladder;
        }
        float _2100;
        if (_1401 > 0.0)
        {
            _2100 = abs((1.0 - _1392) / _1401);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1392 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2100 = frontier_phi_50_47_ladder;
        }
        float _2102 = isnan(_1827) ? _1509 : (isnan(_1509) ? _1827 : min(_1509, _1827));
        float _2103 = isnan(_2100) ? _2102 : (isnan(_2102) ? _2100 : min(_2102, _2100));
        float _2107 = (_2103 * _1395) + _1384;
        float _2108 = (_2103 * _1398) + _1388;
        float _2109 = (_2103 * _1401) + _1392;
        float _2110 = _2103 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2110;
        float _2113 = _2110 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2109 > _2113) || ((_2109 < _2111) || ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 < _2111) || (_2107 > _2113))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2200 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2109, cbModelParam._m0[17u].z, fma(_2108, cbModelParam._m0[17u].y, _2107 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2109, cbModelParam._m0[18u].z, fma(_2108, cbModelParam._m0[18u].y, _2107 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2109, cbModelParam._m0[19u].z, fma(_2108, cbModelParam._m0[19u].y, _2107 * cbModelParam._m0[19u].x))), _1328);
            frontier_phi_25_50_ladder = _2200.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2200.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2200.x * cbModelParam._m0[1u].z;
        }
        _1420 = frontier_phi_25_50_ladder_2;
        _1422 = frontier_phi_25_50_ladder_1;
        _1424 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1404 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_429, _430, _431), _1328);
        _1420 = _1404.x * cbModelParam._m0[1u].z;
        _1422 = _1404.y * cbModelParam._m0[1u].z;
        _1424 = _1404.z * cbModelParam._m0[1u].z;
    }
    float _1436 = _421 * 0.01200000010430812835693359375;
    float _1438 = _1436 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1439 = _1436 * ((cbModelParam._m0[1u].w * (_1422 - _1323)) + _1323);
    float _1440 = _1436 * ((cbModelParam._m0[1u].w * (_1424 - _1325)) + _1325);
    float _1443 = fma(_1440, cbSceneParam._m0[89u].z, fma(_1439, cbSceneParam._m0[89u].y, _1438 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1440, cbSceneParam._m0[90u].z, fma(_1439, cbSceneParam._m0[90u].y, _1438 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1440, cbSceneParam._m0[91u].z, fma(_1439, cbSceneParam._m0[91u].y, _1438 * cbSceneParam._m0[91u].x));
    float _1483 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1487 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1491 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1495 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1496 = _1483 / _1495;
    float _1497 = _1487 / _1495;
    float _1498 = _1491 / _1495;
    float _1645;
    float _1646;
    float _1647;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1525 = ((uint(_1498 > cbSceneParam._m0[59u].y) + uint(_1498 > cbSceneParam._m0[59u].x)) + uint(_1498 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1526 = _1525 + 43u;
        uint _1534 = _1525 + 44u;
        uint _1542 = _1525 + 45u;
        uint _1550 = _1525 + 46u;
        float _1561 = fma(_1495, cbSceneParam._m0[_1526].w, fma(_1491, cbSceneParam._m0[_1526].z, fma(_1487, cbSceneParam._m0[_1526].y, _1483 * cbSceneParam._m0[_1526].x)));
        float _1565 = fma(_1495, cbSceneParam._m0[_1534].w, fma(_1491, cbSceneParam._m0[_1534].z, fma(_1487, cbSceneParam._m0[_1534].y, _1483 * cbSceneParam._m0[_1534].x)));
        float _1573 = fma(_1495, cbSceneParam._m0[_1550].w, fma(_1491, cbSceneParam._m0[_1550].z, fma(_1487, cbSceneParam._m0[_1550].y, _1483 * cbSceneParam._m0[_1550].x)));
        float _1578 = cbSceneParam._m0[33u].z * _1573;
        float _1580 = cbSceneParam._m0[33u].w * _1573;
        float _1583 = fma(_1495, cbSceneParam._m0[_1542].w, fma(_1491, cbSceneParam._m0[_1542].z, fma(_1487, cbSceneParam._m0[_1542].y, _1483 * cbSceneParam._m0[_1542].x))) / _1573;
        float _1631 = (cbSceneParam._m0[33u].x - sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498))) * cbSceneParam._m0[33u].y;
        float _3753 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1638 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1578 + _1561) / _1573, (_1580 + _1565) / _1573), _1583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1580 + _1561) / _1573, (_1565 - _1578) / _1573), _1583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1561 - _1578) / _1573, (_1565 - _1580) / _1573), _1583), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1561 - _1580) / _1573, (_1578 + _1565) / _1573), _1583), 0.0)).x), vec4(0.25)));
        _1645 = 1.0 - (_1638 * cbSceneParam._m0[34u].x);
        _1646 = 1.0 - (_1638 * cbSceneParam._m0[34u].y);
        _1647 = 1.0 - (_1638 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1645 = 1.0;
        _1646 = 1.0;
        _1647 = 1.0;
    }
    float _1711;
    float _1713;
    float _1715;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1699 = fma(_1495, cbSceneParam._m0[63u].w, fma(_1491, cbSceneParam._m0[63u].z, fma(_1487, cbSceneParam._m0[63u].y, _1483 * cbSceneParam._m0[63u].x)));
        float _1700 = fma(_1495, cbSceneParam._m0[60u].w, fma(_1491, cbSceneParam._m0[60u].z, fma(_1487, cbSceneParam._m0[60u].y, _1483 * cbSceneParam._m0[60u].x))) / _1699;
        float _1701 = fma(_1495, cbSceneParam._m0[61u].w, fma(_1491, cbSceneParam._m0[61u].z, fma(_1487, cbSceneParam._m0[61u].y, _1483 * cbSceneParam._m0[61u].x))) / _1699;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1700 >= cbSceneParam._m0[64u].x) && (_1701 >= cbSceneParam._m0[64u].y)) && (_1700 <= cbSceneParam._m0[64u].z)) && (_1701 <= cbSceneParam._m0[64u].w))
        {
            float _1840 = fma(_1495, cbSceneParam._m0[62u].w, fma(_1491, cbSceneParam._m0[62u].z, fma(_1487, cbSceneParam._m0[62u].y, _1483 * cbSceneParam._m0[62u].x))) / _1699;
            float _1844 = isnan(cbSceneParam._m0[41u].w) ? _1840 : (isnan(_1840) ? cbSceneParam._m0[41u].w : max(_1840, cbSceneParam._m0[41u].w));
            float _1887 = (cbSceneParam._m0[33u].x - sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498))) * cbSceneParam._m0[33u].y;
            float _3769 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
            float _1894 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1700, cbSceneParam._m0[33u].w + _1701), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1700, _1701 - cbSceneParam._m0[33u].z), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1700 - cbSceneParam._m0[33u].z, _1701 - cbSceneParam._m0[33u].w), _1844), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1700 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1701), _1844), 0.0)).x), vec4(0.25)));
            float _1898 = 1.0 - (_1894 * cbSceneParam._m0[34u].x);
            float _1899 = 1.0 - (_1894 * cbSceneParam._m0[34u].y);
            float _1900 = 1.0 - (_1894 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1900) ? _1647 : (isnan(_1647) ? _1900 : min(_1647, _1900));
            frontier_phi_37_36_ladder_1 = isnan(_1899) ? _1646 : (isnan(_1646) ? _1899 : min(_1646, _1899));
            frontier_phi_37_36_ladder_2 = isnan(_1898) ? _1645 : (isnan(_1645) ? _1898 : min(_1645, _1898));
        }
        else
        {
            frontier_phi_37_36_ladder = _1647;
            frontier_phi_37_36_ladder_1 = _1646;
            frontier_phi_37_36_ladder_2 = _1645;
        }
        _1711 = frontier_phi_37_36_ladder_2;
        _1713 = frontier_phi_37_36_ladder_1;
        _1715 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1711 = _1645;
        _1713 = _1646;
        _1715 = _1647;
    }
    uvec4 _1720 = floatBitsToUint(cbInstanceData._m0[_395 + 5u]);
    uint _1722 = _1720.x * 14u;
    uint _1723 = _1722 + 13u;
    float _1730 = _421 + (-1.0);
    float _1735 = (cbLight._m0[_1723].x * _1730) + 1.0;
    float _1736 = (cbLight._m0[_1723].y * _1730) + 1.0;
    float _1737 = (cbLight._m0[_1723].z * _1730) + 1.0;
    float _1738 = (cbLight._m0[_1723].w * _1730) + 1.0;
    uint _1739 = _1722 + 5u;
    float _1745 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1749 = _1722 + 4u;
    float _1759 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1763 = _1722 | 1u;
    float _1774 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_255, _256, _257));
    float _1777 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_255, _256, _257));
    float _3805 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _3816 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1782 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1784 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
    float _1791 = ((cbLight._m0[_1739].x * _1745) * _1784) + (((cbLight._m0[_1749].x * _1711) * _1759) * _1782);
    float _1792 = ((_1745 * cbLight._m0[_1739].y) * _1784) + (((cbLight._m0[_1749].y * _1713) * _1759) * _1782);
    float _1793 = ((_1745 * cbLight._m0[_1739].z) * _1784) + (((cbLight._m0[_1749].z * _1715) * _1759) * _1782);
    uvec4 _1797 = floatBitsToUint(cbLight._m0[_1722 + 12u]);
    bool _1799 = _1797.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1799)
    {
        _1901 = _1791;
        _1903 = _1792;
        _1905 = _1793;
    }
    else
    {
        uint _1909 = _1722 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1722 + 2u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _3827 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1928 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1791;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1792;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1793;
    }
    bool _1908 = _1797.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1908)
    {
        _1963 = _1901;
        _1965 = _1903;
        _1967 = _1905;
    }
    else
    {
        uint _2071 = _1722 + 7u;
        float _2087 = (dot(vec3(cbLight._m0[_1722 + 3u].xyz), vec3(_255, _256, _257)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _3843 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _2090 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1963 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _1901;
        _1965 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _1903;
        _1967 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _1905;
    }
    uint _1969 = _1722 + 8u;
    float _1975 = cbLight._m0[_1722].x + _334;
    float _1976 = cbLight._m0[_1722].y + _335;
    float _1977 = cbLight._m0[_1722].z + _336;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1985 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1722].xyz));
    float _3859 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _1989 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1990 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1975 * _1981, _1976 * _1981, _1977 * _1981));
    float _3881 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2007 = (0.5 / ((_1988 + 9.9999999392252902907785028219223e-09) + _1989)) * _1988;
    float _3892 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.31831014156341552734375;
    uint _2023 = _1722 + 9u;
    float _2029 = cbLight._m0[_1763].x + _334;
    float _2030 = cbLight._m0[_1763].y + _335;
    float _2031 = cbLight._m0[_1763].z + _336;
    float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
    float _2039 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_1763].xyz));
    float _3903 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1763].xyz), vec3(_2029 * _2035, _2030 * _2035, _2031 * _2035));
    float _3914 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = (0.5 / ((_2042 + 9.9999999392252902907785028219223e-09) + _1989)) * _2042;
    float _3925 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.31831014156341552734375;
    float _2068 = (((_2052 * cbLight._m0[_2023].x) * _2058) * _1745) + ((((cbLight._m0[_1969].x * _1711) * _2001) * _2009) * _1759);
    float _2069 = (((_2052 * cbLight._m0[_2023].y) * _2058) * _1745) + ((((cbLight._m0[_1969].y * _1713) * _2001) * _2009) * _1759);
    float _2070 = (((_2052 * cbLight._m0[_2023].z) * _2058) * _1745) + ((((cbLight._m0[_1969].z * _1715) * _2001) * _2009) * _1759);
    float _2126;
    float _2128;
    float _2130;
    if (_1799)
    {
        _2126 = _2068;
        _2128 = _2069;
        _2130 = _2070;
    }
    else
    {
        uint _2132 = _1722 + 10u;
        uint _2138 = _1722 + 2u;
        float _2144 = cbLight._m0[_2138].x + _334;
        float _2145 = cbLight._m0[_2138].y + _335;
        float _2146 = cbLight._m0[_2138].z + _336;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2154 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_2138].xyz));
        float _3936 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2144 * _2150, _2145 * _2150, _2146 * _2150));
        float _3947 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = (0.5 / ((_2157 + 9.9999999392252902907785028219223e-09) + _1989)) * _2157;
        float _3958 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2173 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.31831014156341552734375;
        float _2174 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2126 = (((_2167 * cbLight._m0[_2132].x) * _2173) * _2174) + _2068;
        _2128 = (((_2167 * cbLight._m0[_2132].y) * _2173) * _2174) + _2069;
        _2130 = (((_2167 * cbLight._m0[_2132].z) * _2173) * _2174) + _2070;
    }
    float _2205;
    float _2207;
    float _2209;
    if (_1908)
    {
        _2205 = _2126;
        _2207 = _2128;
        _2209 = _2130;
    }
    else
    {
        uint _2216 = _1722 + 11u;
        uint _2222 = _1722 + 3u;
        float _2228 = cbLight._m0[_2222].x + _334;
        float _2229 = cbLight._m0[_2222].y + _335;
        float _2230 = cbLight._m0[_2222].z + _336;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2238 = dot(vec3(_255, _256, _257), vec3(cbLight._m0[_2222].xyz));
        float _3974 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2242 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2228 * _2234, _2229 * _2234, _2230 * _2234));
        float _3985 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = (0.5 / ((_2241 + 9.9999999392252902907785028219223e-09) + _1989)) * _2241;
        float _3996 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.31831014156341552734375;
        float _2258 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2205 = (((_2251 * cbLight._m0[_2216].x) * _2257) * _2258) + _2126;
        _2207 = (((_2251 * cbLight._m0[_2216].y) * _2257) * _2258) + _2128;
        _2209 = (((_2251 * cbLight._m0[_2216].z) * _2257) * _2258) + _2130;
    }
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    if (_1720.y == 0u)
    {
        uvec4 _2279 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2280 = _2279.x;
        uint _2291 = uint((float(_2279.y) * floor(float(uint(cbSceneParam._m0[85u].y * _356) / _2280))) + floor(float(uint(cbSceneParam._m0[85u].x * _355) / _2280)));
        float _2301 = (log2(_1498 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2302 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        uint _2305 = uint(isnan(14.0) ? _2302 : (isnan(_2302) ? 14.0 : min(_2302, 14.0)));
        uvec4 _2310 = texelFetch(g_lightClusterGridBuffer, int(((_2305 << 2u) + (_2291 << 6u)) >> 2u));
        uint _2311 = _2310.x;
        uint _2312 = _2279.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2312 >> 4u) & 15u)) + 4294967295u) & _2311) == 0u) || ((_2312 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            uint _2595 = 0u;
            uint _2604;
            bool _2605;
            for (;;)
            {
                _2604 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2595 << 2u)) >> 2u)).x;
                _2605 = _2604 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2605)
                {
                    frontier_phi_71_pred = _2594;
                    frontier_phi_71_pred_1 = _2593;
                    frontier_phi_71_pred_2 = _2592;
                    frontier_phi_71_pred_3 = _2591;
                    frontier_phi_71_pred_4 = _2590;
                    frontier_phi_71_pred_5 = _2589;
                }
                else
                {
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    uint _2740;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2604;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2744 = uint(findLSB(_2740)) + (_2595 << 5u);
                        uint _2741 = (_2740 + 4294967295u) & _2740;
                        uint _2746 = _2744 * 48u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2746)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2746 + 3u)).x));
                        uint _2766 = (_2744 * 48u) + 4u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2785 = (_2744 * 48u) + 8u;
                        vec3 _2796 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x));
                        float _2800 = _2760.x - _1496;
                        float _2801 = _2760.y - _1497;
                        float _2802 = _2760.z - _1498;
                        float _2803 = dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802));
                        float _2806 = inversesqrt(_2803);
                        float _2815 = 1.0 - (_2803 * _2760.w);
                        float _4022 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2817 = sqrt(_2803) * _2779.w;
                        float _2820 = 1.39999997615814208984375 / (_2817 + 1.39999997615814208984375);
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * dot(vec3(_376, _379, _382), vec3(_2806 * _2800, _2806 * _2801, _2806 * _2802))) + _2821;
                        float _2827 = _2817 * _2817;
                        float _2831 = ((isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0))) * _2816) / ((_2827 * 0.699999988079071044921875) + 1.0);
                        float _2835 = (-0.0) - _1496;
                        float _2836 = (-0.0) - _1497;
                        float _2837 = (-0.0) - _1498;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2845 = dot(vec3(_376, _379, _382), vec3(_2841 * _2835, _2841 * _2836, _2841 * _2837));
                        float _4038 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _4049 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2849 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2853 = (0.5 / (((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) + 9.9999999392252902907785028219223e-09) + _2849)) * _2849;
                        float _4060 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2862 = (((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 3.1415927410125732421875) / ((_2827 * 2.1991131305694580078125) + 3.141590118408203125)) * _2816;
                        _2664 = (_2831 * _2779.x) + _2737;
                        _2665 = (_2831 * _2779.y) + _2738;
                        _2666 = (_2831 * _2779.z) + _2739;
                        _2661 = (_2862 * _2796.x) + _2734;
                        _2662 = (_2862 * _2796.y) + _2735;
                        _2663 = (_2862 * _2796.z) + _2736;
                        if (_2741 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2741;
                        }
                    }
                    frontier_phi_71_pred = _2666;
                    frontier_phi_71_pred_1 = _2665;
                    frontier_phi_71_pred_2 = _2664;
                    frontier_phi_71_pred_3 = _2663;
                    frontier_phi_71_pred_4 = _2662;
                    frontier_phi_71_pred_5 = _2661;
                }
                _2440 = frontier_phi_71_pred;
                _2438 = frontier_phi_71_pred_1;
                _2436 = frontier_phi_71_pred_2;
                _2434 = frontier_phi_71_pred_3;
                _2432 = frontier_phi_71_pred_4;
                _2430 = frontier_phi_71_pred_5;
                uint _2596 = _2595 + 1u;
                if (_2596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2589 = _2430;
                    _2590 = _2432;
                    _2591 = _2434;
                    _2592 = _2436;
                    _2593 = _2438;
                    _2594 = _2440;
                    _2595 = _2596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2446) & _2311) == 0u)
        {
            _2560 = _2429;
            _2562 = _2431;
            _2564 = _2433;
            _2566 = _2435;
            _2568 = _2437;
            _2570 = _2439;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2717 = _2429;
                float _2718 = _2431;
                float _2719 = _2433;
                float _2720 = _2435;
                float _2721 = _2437;
                float _2722 = _2439;
                uint _2723 = _2446;
                uint _2732;
                bool _2733;
                for (;;)
                {
                    _2732 = texelFetch(g_lightClassification, int((((_2305 << 5u) + (_2291 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                    _2733 = _2732 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2733)
                    {
                        frontier_phi_82_pred = _2722;
                        frontier_phi_82_pred_1 = _2721;
                        frontier_phi_82_pred_2 = _2720;
                        frontier_phi_82_pred_3 = _2719;
                        frontier_phi_82_pred_4 = _2718;
                        frontier_phi_82_pred_5 = _2717;
                    }
                    else
                    {
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _2889 = _2717;
                        float _2890 = _2718;
                        float _2891 = _2719;
                        float _2892 = _2720;
                        float _2893 = _2721;
                        float _2894 = _2722;
                        uint _2895 = _2732;
                        uint _2896;
                        vec4 _2921;
                        float _2922;
                        vec4 _2937;
                        vec3 _2949;
                        vec4 _2965;
                        vec4 _2981;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2906 = ((_2723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2895));
                            _2896 = (_2895 + 4294967295u) & _2895;
                            uint _2908 = _2906 * 40u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2922 = _2921.w;
                            uint _2924 = (_2906 * 40u) + 4u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2939 = (_2906 * 40u) + 8u;
                            _2949 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x));
                            uint _2952 = (_2906 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2968 = (_2906 * 40u) + 20u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2984 = (_2906 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2906 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_1498, _3016.z, fma(_1497, _3016.y, _3016.x * _1496)) + _3016.w;
                            _3029 = !((fma(_1498, _2997.z, fma(_1497, _2997.y, _2997.x * _1496)) + _2997.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2921.x - _1496;
                                float _3057 = _2921.y - _1497;
                                float _3058 = _2921.z - _1498;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2922 * _2922));
                                float _4071 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3074 = sqrt(_3059) * _2937.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3078 = 1.0 - _3077;
                                float _3080 = (_3078 * dot(vec3(_3063, _3064, _3065), vec3(_376, _379, _382))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_1498, _2965.z, fma(_1497, _2965.y, _2965.x * _1496)) + _2965.w) / _3028;
                                float _3088 = (fma(_1498, _2981.z, fma(_1497, _2981.y, _2981.x * _1496)) + _2981.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4087 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3104 = dot(vec3(_376, _379, _382), vec3((-0.0) - (_1496 * _2585), (-0.0) - (_1497 * _2585), (-0.0) - (_1498 * _2585)));
                                float _4098 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3112 = (_3078 * dot(vec3(_376, _379, _382), vec3(_3063, _3064, _3065))) + _3077;
                                float _4109 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3117 = (0.5 / (((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) + 9.9999999392252902907785028219223e-09) + _3113)) * _3113;
                                float _4120 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3124 = (_3093 * _3070) * (((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 3.1415927410125732421875) / ((_3083 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _3094 * _2937.z;
                                frontier_phi_88_pred_1 = _3094 * _2937.y;
                                frontier_phi_88_pred_2 = _3094 * _2937.x;
                                frontier_phi_88_pred_3 = _3124 * _2949.z;
                                frontier_phi_88_pred_4 = _3124 * _2949.y;
                                frontier_phi_88_pred_5 = _3124 * _2949.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3133 = frontier_phi_88_pred;
                            _3132 = frontier_phi_88_pred_1;
                            _3131 = frontier_phi_88_pred_2;
                            _3130 = frontier_phi_88_pred_3;
                            _3129 = frontier_phi_88_pred_4;
                            _3128 = frontier_phi_88_pred_5;
                            _2879 = _3131 + _2892;
                            _2880 = _3132 + _2893;
                            _2881 = _3133 + _2894;
                            _2876 = _3128 + _2889;
                            _2877 = _3129 + _2890;
                            _2878 = _3130 + _2891;
                            if (_2896 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2896;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2881;
                        frontier_phi_82_pred_1 = _2880;
                        frontier_phi_82_pred_2 = _2879;
                        frontier_phi_82_pred_3 = _2878;
                        frontier_phi_82_pred_4 = _2877;
                        frontier_phi_82_pred_5 = _2876;
                    }
                    _2571 = frontier_phi_82_pred;
                    _2569 = frontier_phi_82_pred_1;
                    _2567 = frontier_phi_82_pred_2;
                    _2565 = frontier_phi_82_pred_3;
                    _2563 = frontier_phi_82_pred_4;
                    _2561 = frontier_phi_82_pred_5;
                    uint _2724 = _2723 + 1u;
                    if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2717 = _2561;
                        _2718 = _2563;
                        _2719 = _2565;
                        _2720 = _2567;
                        _2721 = _2569;
                        _2722 = _2571;
                        _2723 = _2724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2567;
                frontier_phi_63_64_ladder_1 = _2571;
                frontier_phi_63_64_ladder_2 = _2569;
                frontier_phi_63_64_ladder_3 = _2565;
                frontier_phi_63_64_ladder_4 = _2563;
                frontier_phi_63_64_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_63_64_ladder = _2435;
                frontier_phi_63_64_ladder_1 = _2439;
                frontier_phi_63_64_ladder_2 = _2437;
                frontier_phi_63_64_ladder_3 = _2433;
                frontier_phi_63_64_ladder_4 = _2431;
                frontier_phi_63_64_ladder_5 = _2429;
            }
            _2560 = frontier_phi_63_64_ladder_5;
            _2562 = frontier_phi_63_64_ladder_4;
            _2564 = frontier_phi_63_64_ladder_3;
            _2566 = frontier_phi_63_64_ladder;
            _2568 = frontier_phi_63_64_ladder_2;
            _2570 = frontier_phi_63_64_ladder_1;
        }
        float _2575 = isnan(1.0) ? _421 : (isnan(_421) ? 1.0 : min(_421, 1.0));
        _2324 = (_2575 * _2566) + _1963;
        _2326 = (_2575 * _2568) + _1965;
        _2328 = (_2575 * _2570) + _1967;
        _2330 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2205;
        _2332 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2207;
        _2334 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2209;
    }
    else
    {
        _2324 = _1963;
        _2326 = _1965;
        _2328 = _1967;
        _2330 = _2205;
        _2332 = _2207;
        _2334 = _2209;
    }
    uint _2340 = _397 + uint(cbMatDynParam._m0[0u].w);
    float _2349 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _224.x) * _250) * cbInstanceData._m0[_2340].x;
    float _2353 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _224.y) * _250) * cbInstanceData._m0[_2340].y;
    float _2357 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _224.z) * _250) * cbInstanceData._m0[_2340].z;
    float _4136 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _4147 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _4158 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _2374 = (((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2324 + ((isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))) * _421))) + ((_2330 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + _2349;
    float _2376 = (_2353 + ((_2332 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2326 + ((isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))) * _421)));
    float _2378 = (_2357 + ((_2334 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1231)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2328 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _421)));
    float _2379 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2380 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2381 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2387 = cbMtdParam._m0[2u].x * _2349;
    float _2388 = cbMtdParam._m0[2u].y * _2353;
    float _2389 = cbMtdParam._m0[2u].z * _2357;
    float _4184 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2391 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    uint _2392 = _395 + 6u;
    float _2400 = _355 / cbSceneParam._m0[86u].x;
    float _2401 = _356 / cbSceneParam._m0[86u].y;
    vec4 _2415 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, (log2((isnan(cbSceneParam._m0[77u].w) ? _276 : (isnan(_276) ? cbSceneParam._m0[77u].w : min(_276, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2417 = _2415.x;
    float _2418 = _2415.y;
    float _2419 = _2415.z;
    float _2420 = _2415.w;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_276 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_276) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _276 : min(cbSceneParam._m0[80u].w, _276));
        float _2455 = _2454 / _276;
        float _2466 = _2455 * _327;
        float _2467 = _328 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2470 = _2455 * _329;
        float _2472 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2467;
        float _2480 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2490 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2674;
        if (abs((_2468 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2674 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2490 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2618 = 1.0 / cbSceneParam._m0[80u].x;
            float _2619 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2620 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            float _2630 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : min(_2620, 0.0));
            _2674 = ((abs(_2480 / _2468) * cbSceneParam._m0[80u].y) * ((((_2629 - _2630) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))))) * _2618)) - ((exp2(_2490 * _2629) - exp2(_2490 * _2630)) * _2618))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2676 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, 1.0), 0.0);
        float _2685 = exp2((_2674 * (-1.44269502162933349609375)) * (1.0 - _2676.w));
        float _2686 = log2(_2685);
        float _2702 = log2(_2420);
        _2492 = (exp2(_2702 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].x)) * _2676.x) / cbSceneParam._m0[78u].x)) + _2417;
        _2494 = (exp2(_2702 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].y)) * _2676.y) / cbSceneParam._m0[78u].y)) + _2418;
        _2496 = (exp2(_2702 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].z)) * _2676.z) / cbSceneParam._m0[78u].z)) + _2419;
        _2498 = _2685 * _2420;
    }
    else
    {
        _2492 = _2417;
        _2494 = _2418;
        _2496 = _2419;
        _2498 = _2420;
    }
    bool _2712;
    vec4 _2508;
    vec4 _2530;
    float _2532;
    float _2536;
    float _2537;
    float _2538;
    float _2541;
    float _2544;
    float _2547;
    float _2548;
    bool _2559;
    for (;;)
    {
        _2508 = cbMatDynParam._m0[0u];
        float _2510 = roundEven(_2508.y);
        bool _2511 = _2510 == 3.0;
        float _2512 = log2(_2498);
        float _2516 = exp2(_2512 * cbSceneParam._m0[78u].x);
        float _2517 = exp2(_2512 * cbSceneParam._m0[78u].y);
        float _2518 = exp2(_2512 * cbSceneParam._m0[78u].z);
        float _2519 = _2516 * _2379;
        float _2520 = _2517 * _2380;
        float _2521 = _2518 * _2381;
        float _2528 = _343 + (-0.5);
        _2530 = cbMtdParam._m0[1u];
        _2532 = _2530.y * _2528;
        float _2535 = (_2510 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2536 = _2535 * (_2511 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2492)));
        _2537 = _2535 * (_2511 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2494)));
        _2538 = _2535 * (_2511 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2496)));
        _2541 = ((_2387 * _2391) * _2516) * _2535;
        _2544 = ((_2388 * _2391) * _2517) * _2535;
        _2547 = ((_2389 * _2391) * _2518) * _2535;
        _2548 = _2528 * 0.999000012874603271484375;
        _2559 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2559)
        {
            if ((cbInstanceData._m0[_395 + 7u].x + _2548) < 0.5)
            {
                _2712 = true;
                break;
            }
        }
        uint _2653 = _397 + uint(_2508.w);
        if ((cbInstanceData._m0[_2653].w < 1.0) && ((cbInstanceData._m0[_2653].w + _2548) < 0.5))
        {
            _2712 = true;
            break;
        }
        if ((_2532 + 1.0) < _2530.x)
        {
            _2712 = true;
            break;
        }
        _2712 = false;
        break;
    }
    float _2867;
    if (_2712)
    {
        discard_state = true;
        _2867 = 0.0;
    }
    else
    {
        _2867 = cbInstanceData._m0[_2392].w;
    }
    SV_Target.x = _2536;
    SV_Target.y = _2537;
    SV_Target.z = _2538;
    SV_Target.w = _2867;
    SV_Target_1.x = _2541;
    SV_Target_1.y = _2544;
    SV_Target_1.z = _2547;
    SV_Target_1.w = cbInstanceData._m0[_2392].w;
    discard_exit();
}


