#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _791;
float _3022;
float _3023;
float _3024;
float _3025;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _171 = _170 * NORMAL.x;
    float _172 = _170 * NORMAL.y;
    float _173 = _170 * NORMAL.z;
    vec4 _192 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _192.x * cbMtdParam._m0[9u].x;
    float _199 = _192.y * cbMtdParam._m0[9u].y;
    float _200 = _192.z * cbMtdParam._m0[9u].z;
    vec4 _222 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3034 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _240 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _248 = (((_240 * _240) * (3.0 - (_240 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _252 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _253 = _252 * _171;
    float _254 = _252 * _172;
    float _255 = _252 * _173;
    float _3045 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3056 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3067 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _274 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _315 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _325 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _315);
    float _326 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _315);
    float _327 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _315);
    float _331 = inversesqrt(dot(vec3(_325, _326, _327), vec3(_325, _326, _327)));
    float _332 = _325 * _331;
    float _333 = _326 * _331;
    float _334 = _327 * _331;
    vec4 _339 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _341 = _339.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _470 = sqrt(((_325 * _325) + (_326 * _326)) + (_327 * _327));
        float _476 = (cbMatDynParam._m0[5u].x * _470) + cbMatDynParam._m0[5u].y;
        float _3078 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
        float _477 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _481 = (cbMatDynParam._m0[5u].z * _470) + cbMatDynParam._m0[5u].w;
        float _3089 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) - _477)) + _477) < ((_341 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _353 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _354 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_255, cbSceneParam._m0[5u].z, fma(_254, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _253));
    float _377 = fma(_255, cbSceneParam._m0[6u].z, fma(_254, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _253));
    float _380 = fma(_255, cbSceneParam._m0[7u].z, fma(_254, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _253));
    uint _393 = uint(roundEven(NORMAL.w)) * 13u;
    uint _395 = _393 + 9u;
    uint _396 = _395 + uint(cbMatDynParam._m0[0u].w);
    float _402 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0)))) * cbInstanceData._m0[_396].x;
    float _403 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0)))) * cbInstanceData._m0[_396].y;
    float _404 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0)))) * cbInstanceData._m0[_396].z;
    float _3100 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
    float _3111 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
    float _3122 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
    vec4 _416 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _353, cbSceneParam._m0[86u].y * _354));
    float _419 = _416.x * TEXCOORD.z;
    float _420 = dot(vec3(_253, _254, _255), vec3(_332, _333, _334));
    float _423 = _420 * 2.0;
    float _427 = (_423 * _253) - _332;
    float _428 = (_423 * _254) - _333;
    float _429 = (_423 * _255) - _334;
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _459 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _790;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _515 = fma(_459, cbModelParam._m0[26u].z, fma(_455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _451));
        float _519 = fma(_459, cbModelParam._m0[27u].z, fma(_455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _451));
        float _523 = fma(_459, cbModelParam._m0[28u].z, fma(_455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _451));
        float _548 = _451 + _253;
        float _549 = _455 + _254;
        float _550 = _459 + _255;
        float _560 = fma(_550, cbModelParam._m0[26u].z, fma(_549, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548)) - _515;
        float _561 = fma(_550, cbModelParam._m0[27u].z, fma(_549, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548)) - _519;
        float _562 = fma(_550, cbModelParam._m0[28u].z, fma(_549, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548)) - _523;
        float _566 = inversesqrt(dot(vec3(_560, _561, _562), vec3(_560, _561, _562)));
        float _579 = ((_566 * _560) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_515 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _580 = ((_566 * _561) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_519 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _581 = ((_566 * _562) / cbModelParam._m0[34u].z) + ((((((_523 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _598 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        vec4 _605 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_579, _580, _581), 0.0);
        float _618 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_584.x + (-0.5));
        float _620 = _618 * (_584.y + (-0.5));
        float _621 = _618 * (_584.z + (-0.5));
        float _628 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_591.x + (-0.5));
        float _630 = _628 * (_591.y + (-0.5));
        float _631 = _628 * (_591.z + (-0.5));
        float _638 = exp2((_598.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_598.x + (-0.5));
        float _640 = _638 * (_598.y + (-0.5));
        float _641 = _638 * (_598.z + (-0.5));
        float _648 = exp2((_605.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_605.x + (-0.5));
        float _650 = _648 * (_605.y + (-0.5));
        float _651 = _648 * (_605.z + (-0.5));
        float _652 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _653 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _654 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _655 = _619 * 0.5;
        float _656 = _629 * 0.5;
        float _657 = _639 * 0.5;
        float _658 = dot(vec3(_655, _656, _657), vec3(_655, _656, _657));
        float _663 = (_658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_658);
        float _672 = (dot(vec3(_253, _254, _255), vec3(_663 * _655, _663 * _656, _663 * _657)) + 1.0) * 0.5;
        float _3148 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _682 = sqrt(((_656 * _656) + (_655 * _655)) + (_657 * _657)) / (_652 + 9.9999997473787516355514526367188e-06);
        float _3159 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _683 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
        float _684 = _683 * 2.0;
        float _688 = (1.0 - _683) / (_683 + 1.0);
        float _3170 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _689 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _698 = ((((1.0 - _689) * (_684 + 2.0)) * exp2(log2(isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0))) * (_684 + 1.0))) + _689) * _652;
        float _699 = _620 * 0.5;
        float _700 = _630 * 0.5;
        float _701 = _640 * 0.5;
        float _702 = dot(vec3(_699, _700, _701), vec3(_699, _700, _701));
        float _707 = (_702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_702);
        float _715 = (dot(vec3(_253, _254, _255), vec3(_707 * _699, _707 * _700, _707 * _701)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _724 = sqrt(((_700 * _700) + (_699 * _699)) + (_701 * _701)) / (_653 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3203 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_726 + 1.0))) + _731) * _653;
        float _741 = _621 * 0.5;
        float _742 = _631 * 0.5;
        float _743 = _641 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(_253, _254, _255), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_654 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3236 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_768 + 1.0))) + _773) * _654;
        _790 = _621;
        _792 = _620;
        _793 = _619;
        _794 = _631;
        _795 = _630;
        _796 = _629;
        _797 = _641;
        _798 = _640;
        _799 = _639;
        _800 = _654;
        _801 = _653;
        _802 = _652;
        _803 = cbModelParam._m0[36u].z * (isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)));
        _804 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _805 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
    }
    else
    {
        _790 = _791;
        _792 = _791;
        _793 = _791;
        _794 = _791;
        _795 = _791;
        _796 = _791;
        _797 = _791;
        _798 = _791;
        _799 = _791;
        _800 = _791;
        _801 = _791;
        _802 = _791;
        _803 = 0.0;
        _804 = 0.0;
        _805 = 0.0;
    }
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _834 = fma(_459, cbModelParam._m0[30u].z, fma(_455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _451));
        float _838 = fma(_459, cbModelParam._m0[31u].z, fma(_455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _451));
        float _842 = fma(_459, cbModelParam._m0[32u].z, fma(_455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _451));
        float _865 = _451 + _253;
        float _866 = _455 + _254;
        float _867 = _459 + _255;
        float _877 = fma(_867, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865)) - _834;
        float _878 = fma(_867, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865)) - _838;
        float _879 = fma(_867, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865)) - _842;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_834 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_838 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[35u].z) + ((((((_842 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _933 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_900.x + (-0.5));
        float _935 = _933 * (_900.y + (-0.5));
        float _936 = _933 * (_900.z + (-0.5));
        float _943 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_907.x + (-0.5));
        float _945 = _943 * (_907.y + (-0.5));
        float _946 = _943 * (_907.z + (-0.5));
        float _953 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_914.x + (-0.5));
        float _955 = _953 * (_914.y + (-0.5));
        float _956 = _953 * (_914.z + (-0.5));
        float _963 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_921.x + (-0.5));
        float _965 = _963 * (_921.y + (-0.5));
        float _966 = _963 * (_921.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_253, _254, _255), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3299 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_997 + 1.0))) + _1002) * _967;
        float _1012 = _935 * 0.5;
        float _1013 = _945 * 0.5;
        float _1014 = _955 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_253, _254, _255), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3332 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_1039 + 1.0))) + _1044) * _968;
        float _1054 = _936 * 0.5;
        float _1055 = _946 * 0.5;
        float _1056 = _956 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_253, _254, _255), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3365 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_1081 + 1.0))) + _1086) * _969;
        _1103 = _936;
        _1104 = _935;
        _1105 = _934;
        _1106 = _946;
        _1107 = _945;
        _1108 = _944;
        _1109 = _956;
        _1110 = _955;
        _1111 = _954;
        _1112 = _969;
        _1113 = _968;
        _1114 = _967;
        _1115 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _791;
        _1104 = _791;
        _1105 = _791;
        _1106 = _791;
        _1107 = _791;
        _1108 = _791;
        _1109 = _791;
        _1110 = _791;
        _1111 = _791;
        _1112 = _791;
        _1113 = _791;
        _1114 = _791;
        _1115 = 0.0;
        _1116 = 0.0;
        _1117 = 0.0;
    }
    float _1127 = (cbModelParam._m0[1u].x * (_1115 - _803)) + _803;
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _804)) + _804;
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _805)) + _805;
    float _1150 = fma(_1129, cbSceneParam._m0[89u].z, fma(_1128, cbSceneParam._m0[89u].y, _1127 * cbSceneParam._m0[89u].x));
    float _1153 = fma(_1129, cbSceneParam._m0[90u].z, fma(_1128, cbSceneParam._m0[90u].y, _1127 * cbSceneParam._m0[90u].x));
    float _1156 = fma(_1129, cbSceneParam._m0[91u].z, fma(_1128, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1127));
    float _1171 = _427 * 0.5;
    float _1172 = _428 * 0.5;
    float _1173 = _429 * 0.5;
    float _1174 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1177 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1104, _1107, _1110, _1113));
    float _1180 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_1103, _1106, _1109, _1112));
    float _1214;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1187 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_790, _794, _797, _800));
        float _1191 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_792, _795, _798, _801));
        float _1195 = dot(vec4(_1171, _1172, _1173, 1.0), vec4(_793, _796, _799, _802));
        float _1202 = dot(vec4(cbModelParam._m0[39u]), vec4(_1171, _1172, _1173, 1.0));
        _1214 = dot(vec3(isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1202) ? 0.0 : (isnan(0.0) ? _1202 : max(0.0, _1202))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1214 = 1.0;
    }
    float _1225;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1216 = dot(vec4(cbModelParam._m0[40u]), vec4(_1171, _1172, _1173, 1.0));
        _1225 = dot(vec3(isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1225 = 1.0;
    }
    float _1229 = (_1225 * cbModelParam._m0[1u].x) + (_1214 * (1.0 - cbModelParam._m0[1u].x));
    float _1238 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1319;
    float _1321;
    float _1323;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1286 = fma(_459, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451)) + cbModelParam._m0[13u].w;
        float _1290 = fma(_459, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451)) + cbModelParam._m0[14u].w;
        float _1294 = fma(_459, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451)) + cbModelParam._m0[15u].w;
        float _1297 = fma(_429, cbModelParam._m0[13u].z, fma(_428, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427));
        float _1300 = fma(_429, cbModelParam._m0[14u].z, fma(_428, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427));
        float _1303 = fma(_429, cbModelParam._m0[15u].z, fma(_428, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427));
        float _1329;
        if (_1297 > 0.0)
        {
            _1329 = abs((1.0 - _1286) / _1297);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1297 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1286 + 1.0) / _1297);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1329 = frontier_phi_17_15_ladder;
        }
        float _1555;
        if (_1300 > 0.0)
        {
            _1555 = abs((1.0 - _1290) / _1300);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1300 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1290 + 1.0) / _1300);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1555 = frontier_phi_26_22_ladder;
        }
        float _1747;
        if (_1303 > 0.0)
        {
            _1747 = abs((1.0 - _1294) / _1303);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1294 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1747 = frontier_phi_38_33_ladder;
        }
        float _1749 = isnan(_1555) ? _1329 : (isnan(_1329) ? _1555 : min(_1329, _1555));
        float _1750 = isnan(_1747) ? _1749 : (isnan(_1749) ? _1747 : min(_1749, _1747));
        float _1754 = (_1750 * _1297) + _1286;
        float _1755 = (_1750 * _1300) + _1290;
        float _1756 = (_1750 * _1303) + _1294;
        float _1757 = _1750 * 9.9999997473787516355514526367188e-05;
        float _1759 = (-1.0) - _1757;
        float _1761 = _1757 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1756 > _1761) || ((_1756 < _1759) || ((_1755 > _1761) || ((_1755 < _1759) || ((_1754 < _1759) || (_1754 > _1761))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1756, cbModelParam._m0[9u].z, fma(_1755, cbModelParam._m0[9u].y, _1754 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1756, cbModelParam._m0[10u].z, fma(_1755, cbModelParam._m0[10u].y, _1754 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1756, cbModelParam._m0[11u].z, fma(_1755, cbModelParam._m0[11u].y, _1754 * cbModelParam._m0[11u].x))), _1238);
            frontier_phi_16_38_ladder = _1853.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1853.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1853.x * cbModelParam._m0[1u].y;
        }
        _1319 = frontier_phi_16_38_ladder_2;
        _1321 = frontier_phi_16_38_ladder_1;
        _1323 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_427, _428, _429), _1238);
        _1319 = _1307.x * cbModelParam._m0[1u].y;
        _1321 = _1307.y * cbModelParam._m0[1u].y;
        _1323 = _1307.z * cbModelParam._m0[1u].y;
    }
    float _1326 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1382 = fma(_459, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451)) + cbModelParam._m0[21u].w;
        float _1386 = fma(_459, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451)) + cbModelParam._m0[22u].w;
        float _1390 = fma(_459, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451)) + cbModelParam._m0[23u].w;
        float _1393 = fma(_429, cbModelParam._m0[21u].z, fma(_428, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427));
        float _1396 = fma(_429, cbModelParam._m0[22u].z, fma(_428, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427));
        float _1399 = fma(_429, cbModelParam._m0[23u].z, fma(_428, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427));
        float _1560;
        if (_1393 > 0.0)
        {
            _1560 = abs((1.0 - _1382) / _1393);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1382 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1560 = frontier_phi_28_24_ladder;
        }
        float _1774;
        if (_1396 > 0.0)
        {
            _1774 = abs((1.0 - _1386) / _1396);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1386 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1774 = frontier_phi_40_35_ladder;
        }
        float _1925;
        if (_1399 > 0.0)
        {
            _1925 = abs((1.0 - _1390) / _1399);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1390 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1925 = frontier_phi_49_46_ladder;
        }
        float _1927 = isnan(_1774) ? _1560 : (isnan(_1560) ? _1774 : min(_1560, _1774));
        float _1928 = isnan(_1925) ? _1927 : (isnan(_1927) ? _1925 : min(_1927, _1925));
        float _1932 = (_1928 * _1393) + _1382;
        float _1933 = (_1928 * _1396) + _1386;
        float _1934 = (_1928 * _1399) + _1390;
        float _1935 = _1928 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1935;
        float _1938 = _1935 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1934 > _1938) || ((_1934 < _1936) || ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 < _1936) || (_1932 > _1938))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2171 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1934, cbModelParam._m0[17u].z, fma(_1933, cbModelParam._m0[17u].y, _1932 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1934, cbModelParam._m0[18u].z, fma(_1933, cbModelParam._m0[18u].y, _1932 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1934, cbModelParam._m0[19u].z, fma(_1933, cbModelParam._m0[19u].y, _1932 * cbModelParam._m0[19u].x))), _1326);
            frontier_phi_25_49_ladder = _2171.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2171.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2171.x * cbModelParam._m0[1u].z;
        }
        _1418 = frontier_phi_25_49_ladder_2;
        _1420 = frontier_phi_25_49_ladder_1;
        _1422 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_427, _428, _429), _1326);
        _1418 = _1402.x * cbModelParam._m0[1u].z;
        _1420 = _1402.y * cbModelParam._m0[1u].z;
        _1422 = _1402.z * cbModelParam._m0[1u].z;
    }
    float _1434 = _419 * 0.01200000010430812835693359375;
    float _1436 = _1434 * ((cbModelParam._m0[1u].w * (_1418 - _1319)) + _1319);
    float _1437 = _1434 * ((cbModelParam._m0[1u].w * (_1420 - _1321)) + _1321);
    float _1438 = _1434 * ((cbModelParam._m0[1u].w * (_1422 - _1323)) + _1323);
    float _1441 = fma(_1438, cbSceneParam._m0[89u].z, fma(_1437, cbSceneParam._m0[89u].y, _1436 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1438, cbSceneParam._m0[90u].z, fma(_1437, cbSceneParam._m0[90u].y, _1436 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1438, cbSceneParam._m0[91u].z, fma(_1437, cbSceneParam._m0[91u].y, _1436 * cbSceneParam._m0[91u].x));
    vec4 _1455 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_353, _354));
    float _1457 = _1455.w;
    float _1469 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1457);
    float _1470 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1457);
    float _1471 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1457);
    uvec4 _1475 = floatBitsToUint(cbInstanceData._m0[_393 + 5u]);
    uint _1477 = _1475.x * 14u;
    uint _1478 = _1477 + 13u;
    float _1485 = _419 + (-1.0);
    float _1490 = (cbLight._m0[_1478].x * _1485) + 1.0;
    float _1491 = (cbLight._m0[_1478].y * _1485) + 1.0;
    float _1492 = (cbLight._m0[_1478].z * _1485) + 1.0;
    float _1493 = (cbLight._m0[_1478].w * _1485) + 1.0;
    uint _1494 = _1477 + 5u;
    float _1500 = isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0));
    uint _1504 = _1477 + 4u;
    float _1514 = isnan(1.0) ? _1490 : (isnan(_1490) ? 1.0 : min(_1490, 1.0));
    uint _1518 = _1477 | 1u;
    float _1529 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_253, _254, _255));
    float _1532 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_253, _254, _255));
    float _3501 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
    float _3512 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
    float _1537 = (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * 0.3183098733425140380859375;
    float _1539 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.3183098733425140380859375;
    float _1546 = ((cbLight._m0[_1494].x * _1500) * _1539) + (((cbLight._m0[_1504].x * _1469) * _1514) * _1537);
    float _1547 = ((_1500 * cbLight._m0[_1494].y) * _1539) + (((cbLight._m0[_1504].y * _1470) * _1514) * _1537);
    float _1548 = ((_1500 * cbLight._m0[_1494].z) * _1539) + (((cbLight._m0[_1504].z * _1471) * _1514) * _1537);
    uvec4 _1552 = floatBitsToUint(cbLight._m0[_1477 + 12u]);
    bool _1554 = _1552.x == 0u;
    float _1565;
    float _1567;
    float _1569;
    if (_1554)
    {
        _1565 = _1546;
        _1567 = _1547;
        _1569 = _1548;
    }
    else
    {
        uint _1573 = _1477 + 6u;
        float _1589 = (dot(vec3(cbLight._m0[_1477 + 2u].xyz), vec3(_253, _254, _255)) * 0.5) + 0.5;
        float _1590 = _1589 * _1589;
        float _3523 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1592 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
        _1565 = (((cbLight._m0[_1573].x * 0.3183098733425140380859375) * _1591) * _1592) + _1546;
        _1567 = (((cbLight._m0[_1573].y * 0.3183098733425140380859375) * _1591) * _1592) + _1547;
        _1569 = (((cbLight._m0[_1573].z * 0.3183098733425140380859375) * _1591) * _1592) + _1548;
    }
    bool _1572 = _1552.y == 0u;
    float _1610;
    float _1612;
    float _1614;
    if (_1572)
    {
        _1610 = _1565;
        _1612 = _1567;
        _1614 = _1569;
    }
    else
    {
        uint _1718 = _1477 + 7u;
        float _1734 = (dot(vec3(cbLight._m0[_1477 + 3u].xyz), vec3(_253, _254, _255)) * 0.5) + 0.5;
        float _1735 = _1734 * _1734;
        float _3539 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1737 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        _1610 = (((cbLight._m0[_1718].x * 0.3183098733425140380859375) * _1736) * _1737) + _1565;
        _1612 = (((cbLight._m0[_1718].y * 0.3183098733425140380859375) * _1736) * _1737) + _1567;
        _1614 = (((cbLight._m0[_1718].z * 0.3183098733425140380859375) * _1736) * _1737) + _1569;
    }
    uint _1616 = _1477 + 8u;
    float _1622 = cbLight._m0[_1477].x + _332;
    float _1623 = cbLight._m0[_1477].y + _333;
    float _1624 = cbLight._m0[_1477].z + _334;
    float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
    float _1632 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1477].xyz));
    float _3555 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1635 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _1636 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _1637 = dot(vec3(cbLight._m0[_1477].xyz), vec3(_1622 * _1628, _1623 * _1628, _1624 * _1628));
    float _3577 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1648 = (exp2(log2(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1654 = (0.5 / ((_1635 + 9.9999999392252902907785028219223e-09) + _1636)) * _1635;
    float _3588 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1656 = (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 0.31831014156341552734375;
    uint _1670 = _1477 + 9u;
    float _1676 = cbLight._m0[_1518].x + _332;
    float _1677 = cbLight._m0[_1518].y + _333;
    float _1678 = cbLight._m0[_1518].z + _334;
    float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
    float _1686 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1518].xyz));
    float _3599 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
    float _1689 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _1690 = dot(vec3(cbLight._m0[_1518].xyz), vec3(_1676 * _1682, _1677 * _1682, _1678 * _1682));
    float _3610 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1699 = (exp2(log2(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1703 = (0.5 / ((_1689 + 9.9999999392252902907785028219223e-09) + _1636)) * _1689;
    float _3621 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1705 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.31831014156341552734375;
    float _1715 = (((_1699 * cbLight._m0[_1670].x) * _1705) * _1500) + ((((cbLight._m0[_1616].x * _1469) * _1648) * _1656) * _1514);
    float _1716 = (((_1699 * cbLight._m0[_1670].y) * _1705) * _1500) + ((((cbLight._m0[_1616].y * _1470) * _1648) * _1656) * _1514);
    float _1717 = (((_1699 * cbLight._m0[_1670].z) * _1705) * _1500) + ((((cbLight._m0[_1616].z * _1471) * _1648) * _1656) * _1514);
    float _1779;
    float _1781;
    float _1783;
    if (_1554)
    {
        _1779 = _1715;
        _1781 = _1716;
        _1783 = _1717;
    }
    else
    {
        uint _1785 = _1477 + 10u;
        uint _1791 = _1477 + 2u;
        float _1797 = cbLight._m0[_1791].x + _332;
        float _1798 = cbLight._m0[_1791].y + _333;
        float _1799 = cbLight._m0[_1791].z + _334;
        float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
        float _1807 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1791].xyz));
        float _3632 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1810 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1811 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1797 * _1803, _1798 * _1803, _1799 * _1803));
        float _3643 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1824 = (0.5 / ((_1810 + 9.9999999392252902907785028219223e-09) + _1636)) * _1810;
        float _3654 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1826 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.31831014156341552734375;
        float _1827 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
        _1779 = (((_1820 * cbLight._m0[_1785].x) * _1826) * _1827) + _1715;
        _1781 = (((_1820 * cbLight._m0[_1785].y) * _1826) * _1827) + _1716;
        _1783 = (((_1820 * cbLight._m0[_1785].z) * _1826) * _1827) + _1717;
    }
    float _1862;
    float _1864;
    float _1866;
    if (_1572)
    {
        _1862 = _1779;
        _1864 = _1781;
        _1866 = _1783;
    }
    else
    {
        uint _1873 = _1477 + 11u;
        uint _1879 = _1477 + 3u;
        float _1885 = cbLight._m0[_1879].x + _332;
        float _1886 = cbLight._m0[_1879].y + _333;
        float _1887 = cbLight._m0[_1879].z + _334;
        float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
        float _1895 = dot(vec3(_253, _254, _255), vec3(cbLight._m0[_1879].xyz));
        float _3670 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1898 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1899 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_1885 * _1891, _1886 * _1891, _1887 * _1891));
        float _3681 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1908 = (exp2(log2(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1912 = (0.5 / ((_1898 + 9.9999999392252902907785028219223e-09) + _1636)) * _1898;
        float _3692 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1914 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.31831014156341552734375;
        float _1915 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        _1862 = (((_1908 * cbLight._m0[_1873].x) * _1914) * _1915) + _1779;
        _1864 = (((_1908 * cbLight._m0[_1873].y) * _1914) * _1915) + _1781;
        _1866 = (((_1908 * cbLight._m0[_1873].z) * _1914) * _1915) + _1783;
    }
    float _2050;
    float _2052;
    float _2054;
    float _2056;
    float _2058;
    float _2060;
    if (_1475.y == 0u)
    {
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1990;
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1990;
        float _1993 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1990;
        uvec4 _2005 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2006 = _2005.x;
        uint _2017 = uint((float(_2005.y) * floor(float(uint(cbSceneParam._m0[85u].y * _354) / _2006))) + floor(float(uint(cbSceneParam._m0[85u].x * _353) / _2006)));
        float _2027 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2028 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        uint _2031 = uint(isnan(14.0) ? _2028 : (isnan(_2028) ? 14.0 : min(_2028, 14.0)));
        uvec4 _2036 = texelFetch(g_lightClusterGridBuffer, int(((_2031 << 2u) + (_2017 << 6u)) >> 2u));
        uint _2037 = _2036.x;
        uint _2038 = _2005.z;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        float _2186;
        if (((((1u << ((_2038 >> 4u) & 15u)) + 4294967295u) & _2037) == 0u) || ((_2038 & 240u) == 0u))
        {
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
            _2184 = 0.0;
            _2186 = 0.0;
        }
        else
        {
            float _2177;
            float _2179;
            float _2181;
            float _2183;
            float _2185;
            float _2187;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            uint _2342 = 0u;
            uint _2351;
            bool _2352;
            for (;;)
            {
                _2351 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2342 << 2u)) >> 2u)).x;
                _2352 = _2351 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2352)
                {
                    frontier_phi_66_pred = _2336;
                    frontier_phi_66_pred_1 = _2341;
                    frontier_phi_66_pred_2 = _2340;
                    frontier_phi_66_pred_3 = _2339;
                    frontier_phi_66_pred_4 = _2338;
                    frontier_phi_66_pred_5 = _2337;
                }
                else
                {
                    float _2481;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    uint _2487;
                    _2481 = _2336;
                    _2482 = _2337;
                    _2483 = _2338;
                    _2484 = _2339;
                    _2485 = _2340;
                    _2486 = _2341;
                    _2487 = _2351;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    for (;;)
                    {
                        uint _2491 = uint(findLSB(_2487)) + (_2342 << 5u);
                        uint _2488 = (_2487 + 4294967295u) & _2487;
                        uint _2493 = _2491 * 48u;
                        vec4 _2507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2493)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2493 + 3u)).x));
                        uint _2513 = (_2491 * 48u) + 4u;
                        vec4 _2526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2513)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 3u)).x));
                        uint _2532 = (_2491 * 48u) + 8u;
                        vec3 _2543 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2532)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2532 + 2u)).x));
                        float _2547 = _2507.x - _1991;
                        float _2548 = _2507.y - _1992;
                        float _2549 = _2507.z - _1993;
                        float _2550 = dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549));
                        float _2553 = inversesqrt(_2550);
                        float _2562 = 1.0 - (_2550 * _2507.w);
                        float _3718 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
                        float _2563 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
                        float _2564 = sqrt(_2550) * _2526.w;
                        float _2567 = 1.39999997615814208984375 / (_2564 + 1.39999997615814208984375);
                        float _2568 = _2567 * _2567;
                        float _2571 = ((1.0 - _2568) * dot(vec3(_374, _377, _380), vec3(_2553 * _2547, _2553 * _2548, _2553 * _2549))) + _2568;
                        float _2574 = _2564 * _2564;
                        float _2578 = ((isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))) * _2563) / ((_2574 * 0.699999988079071044921875) + 1.0);
                        float _2582 = (-0.0) - _1991;
                        float _2583 = (-0.0) - _1992;
                        float _2584 = (-0.0) - _1993;
                        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
                        float _2592 = dot(vec3(_374, _377, _380), vec3(_2588 * _2582, _2588 * _2583, _2588 * _2584));
                        float _3734 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _3745 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                        float _2596 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                        float _2600 = (0.5 / (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) + 9.9999999392252902907785028219223e-09) + _2596)) * _2596;
                        float _3756 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                        float _2609 = (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 3.1415927410125732421875) / ((_2574 * 2.1991131305694580078125) + 3.141590118408203125)) * _2563;
                        _2411 = (_2578 * _2526.x) + _2484;
                        _2412 = (_2578 * _2526.y) + _2485;
                        _2413 = (_2578 * _2526.z) + _2486;
                        _2408 = (_2609 * _2543.x) + _2481;
                        _2409 = (_2609 * _2543.y) + _2482;
                        _2410 = (_2609 * _2543.z) + _2483;
                        if (_2488 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2481 = _2408;
                            _2482 = _2409;
                            _2483 = _2410;
                            _2484 = _2411;
                            _2485 = _2412;
                            _2486 = _2413;
                            _2487 = _2488;
                        }
                    }
                    frontier_phi_66_pred = _2408;
                    frontier_phi_66_pred_1 = _2413;
                    frontier_phi_66_pred_2 = _2412;
                    frontier_phi_66_pred_3 = _2411;
                    frontier_phi_66_pred_4 = _2410;
                    frontier_phi_66_pred_5 = _2409;
                }
                _2177 = frontier_phi_66_pred;
                _2187 = frontier_phi_66_pred_1;
                _2185 = frontier_phi_66_pred_2;
                _2183 = frontier_phi_66_pred_3;
                _2181 = frontier_phi_66_pred_4;
                _2179 = frontier_phi_66_pred_5;
                uint _2343 = _2342 + 1u;
                if (_2343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2336 = _2177;
                    _2337 = _2179;
                    _2338 = _2181;
                    _2339 = _2183;
                    _2340 = _2185;
                    _2341 = _2187;
                    _2342 = _2343;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
            _2184 = _2185;
            _2186 = _2187;
        }
        uvec4 _2190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2191 = _2190.z;
        uint _2193 = (_2191 >> 8u) & 15u;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((4294967295u << _2193) & _2037) == 0u)
        {
            _2307 = _2176;
            _2309 = _2178;
            _2311 = _2180;
            _2313 = _2182;
            _2315 = _2184;
            _2317 = _2186;
        }
        else
        {
            float _2332 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2193 < ((_2191 >> 12u) & 15u))
            {
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2464 = _2176;
                float _2465 = _2178;
                float _2466 = _2180;
                float _2467 = _2182;
                float _2468 = _2184;
                float _2469 = _2186;
                uint _2470 = _2193;
                uint _2479;
                bool _2480;
                for (;;)
                {
                    _2479 = texelFetch(g_lightClassification, int((((_2031 << 5u) + (_2017 << 9u)) + (_2470 << 2u)) >> 2u)).x;
                    _2480 = _2479 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2480)
                    {
                        frontier_phi_77_pred = _2469;
                        frontier_phi_77_pred_1 = _2468;
                        frontier_phi_77_pred_2 = _2467;
                        frontier_phi_77_pred_3 = _2466;
                        frontier_phi_77_pred_4 = _2465;
                        frontier_phi_77_pred_5 = _2464;
                    }
                    else
                    {
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2636 = _2464;
                        float _2637 = _2465;
                        float _2638 = _2466;
                        float _2639 = _2467;
                        float _2640 = _2468;
                        float _2641 = _2469;
                        uint _2642 = _2479;
                        uint _2643;
                        vec4 _2668;
                        float _2669;
                        vec4 _2684;
                        vec3 _2696;
                        vec4 _2712;
                        vec4 _2728;
                        float _2775;
                        bool _2776;
                        for (;;)
                        {
                            uint _2653 = ((_2470 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2642));
                            _2643 = (_2642 + 4294967295u) & _2642;
                            uint _2655 = _2653 * 40u;
                            _2668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2655 + 3u)).x));
                            _2669 = _2668.w;
                            uint _2671 = (_2653 * 40u) + 4u;
                            _2684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2671 + 3u)).x));
                            uint _2686 = (_2653 * 40u) + 8u;
                            _2696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x));
                            uint _2699 = (_2653 * 40u) + 16u;
                            _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            uint _2715 = (_2653 * 40u) + 20u;
                            _2728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 3u)).x));
                            uint _2731 = (_2653 * 40u) + 24u;
                            vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            uint _2750 = (_2653 * 40u) + 28u;
                            vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            _2775 = fma(_1993, _2763.z, fma(_1992, _2763.y, _2763.x * _1991)) + _2763.w;
                            _2776 = !((fma(_1993, _2744.z, fma(_1992, _2744.y, _2744.x * _1991)) + _2744.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2776)
                            {
                                float _2803 = _2668.x - _1991;
                                float _2804 = _2668.y - _1992;
                                float _2805 = _2668.z - _1993;
                                float _2806 = dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805));
                                float _2809 = inversesqrt(_2806);
                                float _2810 = _2809 * _2803;
                                float _2811 = _2809 * _2804;
                                float _2812 = _2809 * _2805;
                                float _2816 = 1.0 - (_2806 / (_2669 * _2669));
                                float _3767 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2817 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2821 = sqrt(_2806) * _2684.w;
                                float _2823 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                                float _2824 = _2823 * _2823;
                                float _2825 = 1.0 - _2824;
                                float _2827 = (_2825 * dot(vec3(_2810, _2811, _2812), vec3(_374, _377, _380))) + _2824;
                                float _2830 = _2821 * _2821;
                                float _2834 = (fma(_1993, _2712.z, fma(_1992, _2712.y, _2712.x * _1991)) + _2712.w) / _2775;
                                float _2835 = (fma(_1993, _2728.z, fma(_1992, _2728.y, _2728.x * _1991)) + _2728.w) / _2775;
                                float _2839 = 1.0 - dot(vec2(_2834, _2835), vec2(_2834, _2835));
                                float _3783 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                                float _2840 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2841 = _2840 * (((isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))) * _2817) / ((_2830 * 0.699999988079071044921875) + 1.0));
                                float _2851 = dot(vec3(_374, _377, _380), vec3((-0.0) - (_1991 * _2332), (-0.0) - (_1992 * _2332), (-0.0) - (_1993 * _2332)));
                                float _3794 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                                float _2859 = (_2825 * dot(vec3(_374, _377, _380), vec3(_2810, _2811, _2812))) + _2824;
                                float _3805 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2860 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2864 = (0.5 / (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) + 9.9999999392252902907785028219223e-09) + _2860)) * _2860;
                                float _3816 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                                float _2871 = (_2840 * _2817) * (((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 3.1415927410125732421875) / ((_2830 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2841 * _2684.y;
                                frontier_phi_83_pred_1 = _2841 * _2684.x;
                                frontier_phi_83_pred_2 = _2871 * _2696.z;
                                frontier_phi_83_pred_3 = _2871 * _2696.y;
                                frontier_phi_83_pred_4 = _2871 * _2696.x;
                                frontier_phi_83_pred_5 = _2841 * _2684.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2879 = frontier_phi_83_pred;
                            _2878 = frontier_phi_83_pred_1;
                            _2877 = frontier_phi_83_pred_2;
                            _2876 = frontier_phi_83_pred_3;
                            _2875 = frontier_phi_83_pred_4;
                            _2880 = frontier_phi_83_pred_5;
                            _2626 = _2878 + _2639;
                            _2627 = _2879 + _2640;
                            _2628 = _2880 + _2641;
                            _2623 = _2875 + _2636;
                            _2624 = _2876 + _2637;
                            _2625 = _2877 + _2638;
                            if (_2643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2643;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2628;
                        frontier_phi_77_pred_1 = _2627;
                        frontier_phi_77_pred_2 = _2626;
                        frontier_phi_77_pred_3 = _2625;
                        frontier_phi_77_pred_4 = _2624;
                        frontier_phi_77_pred_5 = _2623;
                    }
                    _2318 = frontier_phi_77_pred;
                    _2316 = frontier_phi_77_pred_1;
                    _2314 = frontier_phi_77_pred_2;
                    _2312 = frontier_phi_77_pred_3;
                    _2310 = frontier_phi_77_pred_4;
                    _2308 = frontier_phi_77_pred_5;
                    uint _2471 = _2470 + 1u;
                    if (_2471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2464 = _2308;
                        _2465 = _2310;
                        _2466 = _2312;
                        _2467 = _2314;
                        _2468 = _2316;
                        _2469 = _2318;
                        _2470 = _2471;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2312;
                frontier_phi_58_59_ladder_1 = _2318;
                frontier_phi_58_59_ladder_2 = _2316;
                frontier_phi_58_59_ladder_3 = _2314;
                frontier_phi_58_59_ladder_4 = _2310;
                frontier_phi_58_59_ladder_5 = _2308;
            }
            else
            {
                frontier_phi_58_59_ladder = _2180;
                frontier_phi_58_59_ladder_1 = _2186;
                frontier_phi_58_59_ladder_2 = _2184;
                frontier_phi_58_59_ladder_3 = _2182;
                frontier_phi_58_59_ladder_4 = _2178;
                frontier_phi_58_59_ladder_5 = _2176;
            }
            _2307 = frontier_phi_58_59_ladder_5;
            _2309 = frontier_phi_58_59_ladder_4;
            _2311 = frontier_phi_58_59_ladder;
            _2313 = frontier_phi_58_59_ladder_3;
            _2315 = frontier_phi_58_59_ladder_2;
            _2317 = frontier_phi_58_59_ladder_1;
        }
        float _2322 = isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0));
        _2050 = (_2322 * _2313) + _1610;
        _2052 = (_2322 * _2315) + _1612;
        _2054 = (_2322 * _2317) + _1614;
        _2056 = ((_2307 * 0.039999999105930328369140625) * _2322) + _1862;
        _2058 = ((_2309 * 0.039999999105930328369140625) * _2322) + _1864;
        _2060 = ((_2311 * 0.039999999105930328369140625) * _2322) + _1866;
    }
    else
    {
        _2050 = _1610;
        _2052 = _1612;
        _2054 = _1614;
        _2056 = _1862;
        _2058 = _1864;
        _2060 = _1866;
    }
    uint _2066 = _395 + uint(cbMatDynParam._m0[0u].w);
    float _2075 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _222.x) * _248) * cbInstanceData._m0[_2066].x;
    float _2079 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _222.y) * _248) * cbInstanceData._m0[_2066].y;
    float _2083 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _222.z) * _248) * cbInstanceData._m0[_2066].z;
    float _3832 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3843 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3854 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _2100 = (((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2050 + ((isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0))) * _419))) + ((_2056 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + _2075;
    float _2102 = (_2079 + ((_2058 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2052 + ((isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0))) * _419)));
    float _2104 = (_2083 + ((_2060 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1229)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2054 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _419)));
    float _2105 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2106 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2107 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2113 = cbMtdParam._m0[2u].x * _2075;
    float _2114 = cbMtdParam._m0[2u].y * _2079;
    float _2115 = cbMtdParam._m0[2u].z * _2083;
    float _3880 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2117 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    uint _2118 = _393 + 6u;
    float _2126 = _353 / cbSceneParam._m0[86u].x;
    float _2127 = _354 / cbSceneParam._m0[86u].y;
    vec4 _2141 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, (log2((isnan(cbSceneParam._m0[77u].w) ? _274 : (isnan(_274) ? cbSceneParam._m0[77u].w : min(_274, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2143 = _2141.x;
    float _2144 = _2141.y;
    float _2145 = _2141.z;
    float _2146 = _2141.w;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_274 > cbSceneParam._m0[78u].w)
    {
        float _2201 = isnan(_274) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _274 : min(cbSceneParam._m0[80u].w, _274));
        float _2202 = _2201 / _274;
        float _2213 = _2202 * _325;
        float _2214 = _326 * _2202;
        float _2215 = (-0.0) - _2214;
        float _2217 = _2202 * _327;
        float _2219 = (cbSceneParam._m0[77u].w * _2215) / _2201;
        float _2220 = _2219 + cbSceneParam._m0[79u].w;
        float _2221 = cbSceneParam._m0[79u].w - _2214;
        float _2227 = sqrt(((_2213 * _2213) + (_2214 * _2214)) + (_2217 * _2217));
        float _2230 = (1.0 - (cbSceneParam._m0[77u].w / _2201)) * _2227;
        float _2235 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2237 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2421;
        if (abs((_2215 - _2219) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2421 = ((((_2220 > 0.0) ? exp2(_2235 * _2220) : (2.0 - exp2(_2237 * _2220))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2230;
        }
        else
        {
            float _2365 = 1.0 / cbSceneParam._m0[80u].x;
            float _2366 = isnan(_2221) ? _2220 : (isnan(_2220) ? _2221 : max(_2220, _2221));
            float _2367 = isnan(_2221) ? _2220 : (isnan(_2220) ? _2221 : min(_2220, _2221));
            float _2376 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : min(_2366, 0.0));
            float _2377 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : min(_2367, 0.0));
            _2421 = ((abs(_2227 / _2215) * cbSceneParam._m0[80u].y) * ((((_2376 - _2377) * 2.0) - ((exp2(_2235 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0)))) - exp2(_2235 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0))))) * _2365)) - ((exp2(_2237 * _2376) - exp2(_2237 * _2377)) * _2365))) + (_2230 * cbSceneParam._m0[80u].z);
        }
        vec4 _2423 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, 1.0), 0.0);
        float _2432 = exp2((_2421 * (-1.44269502162933349609375)) * (1.0 - _2423.w));
        float _2433 = log2(_2432);
        float _2449 = log2(_2146);
        _2239 = (exp2(_2449 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].x)) * _2423.x) / cbSceneParam._m0[78u].x)) + _2143;
        _2241 = (exp2(_2449 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].y)) * _2423.y) / cbSceneParam._m0[78u].y)) + _2144;
        _2243 = (exp2(_2449 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2433 * cbSceneParam._m0[78u].z)) * _2423.z) / cbSceneParam._m0[78u].z)) + _2145;
        _2245 = _2432 * _2146;
    }
    else
    {
        _2239 = _2143;
        _2241 = _2144;
        _2243 = _2145;
        _2245 = _2146;
    }
    bool _2459;
    vec4 _2255;
    vec4 _2277;
    float _2279;
    float _2283;
    float _2284;
    float _2285;
    float _2288;
    float _2291;
    float _2294;
    float _2295;
    bool _2306;
    for (;;)
    {
        _2255 = cbMatDynParam._m0[0u];
        float _2257 = roundEven(_2255.y);
        bool _2258 = _2257 == 3.0;
        float _2259 = log2(_2245);
        float _2263 = exp2(_2259 * cbSceneParam._m0[78u].x);
        float _2264 = exp2(_2259 * cbSceneParam._m0[78u].y);
        float _2265 = exp2(_2259 * cbSceneParam._m0[78u].z);
        float _2266 = _2263 * _2105;
        float _2267 = _2264 * _2106;
        float _2268 = _2265 * _2107;
        float _2275 = _341 + (-0.5);
        _2277 = cbMtdParam._m0[1u];
        _2279 = _2277.y * _2275;
        float _2282 = (_2257 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2283 = _2282 * (_2258 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2239)));
        _2284 = _2282 * (_2258 ? _2267 : (_2267 + (cbSceneParam._m0[72u].w * _2241)));
        _2285 = _2282 * (_2258 ? _2268 : (_2268 + (cbSceneParam._m0[72u].w * _2243)));
        _2288 = ((_2113 * _2117) * _2263) * _2282;
        _2291 = ((_2114 * _2117) * _2264) * _2282;
        _2294 = ((_2115 * _2117) * _2265) * _2282;
        _2295 = _2275 * 0.999000012874603271484375;
        _2306 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2306)
        {
            if ((cbInstanceData._m0[_393 + 7u].x + _2295) < 0.5)
            {
                _2459 = true;
                break;
            }
        }
        uint _2400 = _395 + uint(_2255.w);
        if ((cbInstanceData._m0[_2400].w < 1.0) && ((cbInstanceData._m0[_2400].w + _2295) < 0.5))
        {
            _2459 = true;
            break;
        }
        if ((_2279 + 1.0) < _2277.x)
        {
            _2459 = true;
            break;
        }
        _2459 = false;
        break;
    }
    float _2614;
    if (_2459)
    {
        discard_state = true;
        _2614 = 0.0;
    }
    else
    {
        _2614 = cbInstanceData._m0[_2118].w;
    }
    SV_Target.x = _2283;
    SV_Target.y = _2284;
    SV_Target.z = _2285;
    SV_Target.w = _2614;
    SV_Target_1.x = _2288;
    SV_Target_1.y = _2291;
    SV_Target_1.z = _2294;
    SV_Target_1.w = cbInstanceData._m0[_2118].w;
    discard_exit();
}


