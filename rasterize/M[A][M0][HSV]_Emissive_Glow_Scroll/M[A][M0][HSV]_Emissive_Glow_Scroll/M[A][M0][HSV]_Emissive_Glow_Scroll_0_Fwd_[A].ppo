#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _765;
float _2973;
float _2974;
float _2975;
float _2976;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _163 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _164 = _163 * NORMAL.x;
    float _165 = _163 * NORMAL.y;
    float _166 = _163 * NORMAL.z;
    vec4 _186 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _192 = _186.x * cbMtdParam._m0[9u].x;
    float _193 = _186.y * cbMtdParam._m0[9u].y;
    float _194 = _186.z * cbMtdParam._m0[9u].z;
    vec4 _216 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _225 = _224 * _164;
    float _226 = _224 * _165;
    float _227 = _224 * _166;
    float _2985 = isnan(0.0) ? _192 : (isnan(_192) ? 0.0 : max(_192, 0.0));
    float _2996 = isnan(0.0) ? _193 : (isnan(_193) ? 0.0 : max(_193, 0.0));
    float _3007 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _247 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    float _304 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _305 = _298 * _304;
    float _306 = _299 * _304;
    float _307 = _300 * _304;
    vec4 _312 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _314 = _312.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _444 = sqrt(((_298 * _298) + (_299 * _299)) + (_300 * _300));
        float _450 = (cbMatDynParam._m0[5u].x * _444) + cbMatDynParam._m0[5u].y;
        float _3018 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
        float _451 = isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0));
        float _455 = (cbMatDynParam._m0[5u].z * _444) + cbMatDynParam._m0[5u].w;
        float _3029 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0))) - _451)) + _451) < ((_314 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _326 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _327 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _347 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _350 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _353 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _366 = uint(roundEven(NORMAL.w)) * 13u;
    uint _368 = _366 + 9u;
    uint _369 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _375 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0)))) * cbInstanceData._m0[_369].x;
    float _376 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0)))) * cbInstanceData._m0[_369].y;
    float _377 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0)))) * cbInstanceData._m0[_369].z;
    float _3040 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
    float _3051 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0));
    float _3062 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
    vec4 _389 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _326, cbSceneParam._m0[86u].y * _327));
    float _392 = _389.x * TEXCOORD.z;
    float _393 = dot(vec3(_225, _226, _227), vec3(_305, _306, _307));
    float _396 = _393 * 2.0;
    float _401 = (_396 * _225) - _305;
    float _402 = (_396 * _226) - _306;
    float _403 = (_396 * _227) - _307;
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _429 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _764;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _489 = fma(_433, cbModelParam._m0[26u].z, fma(_429, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _425));
        float _493 = fma(_433, cbModelParam._m0[27u].z, fma(_429, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _425));
        float _497 = fma(_433, cbModelParam._m0[28u].z, fma(_429, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _425));
        float _522 = _425 + _225;
        float _523 = _429 + _226;
        float _524 = _433 + _227;
        float _534 = fma(_524, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522)) - _489;
        float _535 = fma(_524, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522)) - _493;
        float _536 = fma(_524, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522)) - _497;
        float _540 = inversesqrt(dot(vec3(_534, _535, _536), vec3(_534, _535, _536)));
        float _553 = ((_540 * _534) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_489 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _554 = ((_540 * _535) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_493 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _555 = ((_540 * _536) / cbModelParam._m0[34u].z) + ((((((_497 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_553, _554, _555), 0.0);
        float _592 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _593 = _592 * (_558.x + (-0.5));
        float _594 = _592 * (_558.y + (-0.5));
        float _595 = _592 * (_558.z + (-0.5));
        float _602 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_565.x + (-0.5));
        float _604 = _602 * (_565.y + (-0.5));
        float _605 = _602 * (_565.z + (-0.5));
        float _612 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_572.x + (-0.5));
        float _614 = _612 * (_572.y + (-0.5));
        float _615 = _612 * (_572.z + (-0.5));
        float _622 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_579.x + (-0.5));
        float _624 = _622 * (_579.y + (-0.5));
        float _625 = _622 * (_579.z + (-0.5));
        float _626 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = _593 * 0.5;
        float _630 = _603 * 0.5;
        float _631 = _613 * 0.5;
        float _632 = dot(vec3(_629, _630, _631), vec3(_629, _630, _631));
        float _637 = (_632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_632);
        float _646 = (dot(vec3(_225, _226, _227), vec3(_637 * _629, _637 * _630, _637 * _631)) + 1.0) * 0.5;
        float _3088 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _656 = sqrt(((_630 * _630) + (_629 * _629)) + (_631 * _631)) / (_626 + 9.9999997473787516355514526367188e-06);
        float _3099 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _658 = _657 * 2.0;
        float _662 = (1.0 - _657) / (_657 + 1.0);
        float _3110 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0));
        float _672 = ((((1.0 - _663) * (_658 + 2.0)) * exp2(log2(isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0))) * (_658 + 1.0))) + _663) * _626;
        float _673 = _594 * 0.5;
        float _674 = _604 * 0.5;
        float _675 = _614 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _689 = (dot(vec3(_225, _226, _227), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3121 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _698 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3132 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _700 = _699 * 2.0;
        float _704 = (1.0 - _699) / (_699 + 1.0);
        float _3143 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _714 = ((((1.0 - _705) * (_700 + 2.0)) * exp2(log2(isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0))) * (_700 + 1.0))) + _705) * _627;
        float _715 = _595 * 0.5;
        float _716 = _605 * 0.5;
        float _717 = _615 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _731 = (dot(vec3(_225, _226, _227), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3154 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _740 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3165 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _742 = _741 * 2.0;
        float _746 = (1.0 - _741) / (_741 + 1.0);
        float _3176 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
        float _756 = ((((1.0 - _747) * (_742 + 2.0)) * exp2(log2(isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0))) * (_742 + 1.0))) + _747) * _628;
        _764 = _595;
        _766 = _594;
        _767 = _593;
        _768 = _605;
        _769 = _604;
        _770 = _603;
        _771 = _615;
        _772 = _614;
        _773 = _613;
        _774 = _628;
        _775 = _627;
        _776 = _626;
        _777 = cbModelParam._m0[36u].z * (isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0)));
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)));
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0)));
    }
    else
    {
        _764 = _765;
        _766 = _765;
        _767 = _765;
        _768 = _765;
        _769 = _765;
        _770 = _765;
        _771 = _765;
        _772 = _765;
        _773 = _765;
        _774 = _765;
        _775 = _765;
        _776 = _765;
        _777 = 0.0;
        _778 = 0.0;
        _779 = 0.0;
    }
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _808 = fma(_433, cbModelParam._m0[30u].z, fma(_429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _425));
        float _812 = fma(_433, cbModelParam._m0[31u].z, fma(_429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _425));
        float _816 = fma(_433, cbModelParam._m0[32u].z, fma(_429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _425));
        float _839 = _425 + _225;
        float _840 = _429 + _226;
        float _841 = _433 + _227;
        float _851 = fma(_841, cbModelParam._m0[30u].z, fma(_840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[31u].z, fma(_840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[32u].z, fma(_840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_808 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_812 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[35u].z) + ((((((_816 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _907 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_874.x + (-0.5));
        float _909 = _907 * (_874.y + (-0.5));
        float _910 = _907 * (_874.z + (-0.5));
        float _917 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_881.x + (-0.5));
        float _919 = _917 * (_881.y + (-0.5));
        float _920 = _917 * (_881.z + (-0.5));
        float _927 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_888.x + (-0.5));
        float _929 = _927 * (_888.y + (-0.5));
        float _930 = _927 * (_888.z + (-0.5));
        float _937 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_895.x + (-0.5));
        float _939 = _937 * (_895.y + (-0.5));
        float _940 = _937 * (_895.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_225, _226, _227), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3239 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_971 + 1.0))) + _976) * _941;
        float _986 = _909 * 0.5;
        float _987 = _919 * 0.5;
        float _988 = _929 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_225, _226, _227), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3272 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_1013 + 1.0))) + _1018) * _942;
        float _1028 = _910 * 0.5;
        float _1029 = _920 * 0.5;
        float _1030 = _930 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_225, _226, _227), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3305 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_1055 + 1.0))) + _1060) * _943;
        _1077 = _910;
        _1078 = _909;
        _1079 = _908;
        _1080 = _920;
        _1081 = _919;
        _1082 = _918;
        _1083 = _930;
        _1084 = _929;
        _1085 = _928;
        _1086 = _943;
        _1087 = _942;
        _1088 = _941;
        _1089 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _765;
        _1078 = _765;
        _1079 = _765;
        _1080 = _765;
        _1081 = _765;
        _1082 = _765;
        _1083 = _765;
        _1084 = _765;
        _1085 = _765;
        _1086 = _765;
        _1087 = _765;
        _1088 = _765;
        _1089 = 0.0;
        _1090 = 0.0;
        _1091 = 0.0;
    }
    float _1101 = (cbModelParam._m0[1u].x * (_1089 - _777)) + _777;
    float _1102 = (cbModelParam._m0[1u].x * (_1090 - _778)) + _778;
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _779)) + _779;
    float _1124 = fma(_1103, cbSceneParam._m0[89u].z, fma(_1102, cbSceneParam._m0[89u].y, _1101 * cbSceneParam._m0[89u].x));
    float _1127 = fma(_1103, cbSceneParam._m0[90u].z, fma(_1102, cbSceneParam._m0[90u].y, _1101 * cbSceneParam._m0[90u].x));
    float _1130 = fma(_1103, cbSceneParam._m0[91u].z, fma(_1102, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1101));
    float _1145 = _401 * 0.5;
    float _1146 = _402 * 0.5;
    float _1147 = _403 * 0.5;
    float _1148 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1151 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1154 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_1077, _1080, _1083, _1086));
    float _1188;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1161 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_764, _768, _771, _774));
        float _1165 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_766, _769, _772, _775));
        float _1169 = dot(vec4(_1145, _1146, _1147, 1.0), vec4(_767, _770, _773, _776));
        float _1176 = dot(vec4(cbModelParam._m0[39u]), vec4(_1145, _1146, _1147, 1.0));
        _1188 = dot(vec3(isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)), isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1188 = 1.0;
    }
    float _1199;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1190 = dot(vec4(cbModelParam._m0[40u]), vec4(_1145, _1146, _1147, 1.0));
        _1199 = dot(vec3(isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1190) ? 0.0 : (isnan(0.0) ? _1190 : max(0.0, _1190))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1199 = 1.0;
    }
    float _1203 = (_1199 * cbModelParam._m0[1u].x) + (_1188 * (1.0 - cbModelParam._m0[1u].x));
    float _1212 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1293;
    float _1295;
    float _1297;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1260 = fma(_433, cbModelParam._m0[13u].z, fma(_429, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _425)) + cbModelParam._m0[13u].w;
        float _1264 = fma(_433, cbModelParam._m0[14u].z, fma(_429, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _425)) + cbModelParam._m0[14u].w;
        float _1268 = fma(_433, cbModelParam._m0[15u].z, fma(_429, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _425)) + cbModelParam._m0[15u].w;
        float _1271 = fma(_403, cbModelParam._m0[13u].z, fma(_402, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _401));
        float _1274 = fma(_403, cbModelParam._m0[14u].z, fma(_402, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _401));
        float _1277 = fma(_403, cbModelParam._m0[15u].z, fma(_402, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _401));
        float _1303;
        if (_1271 > 0.0)
        {
            _1303 = abs((1.0 - _1260) / _1271);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1260 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1303 = frontier_phi_17_15_ladder;
        }
        float _1511;
        if (_1274 > 0.0)
        {
            _1511 = abs((1.0 - _1264) / _1274);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1264 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1511 = frontier_phi_26_22_ladder;
        }
        float _1700;
        if (_1277 > 0.0)
        {
            _1700 = abs((1.0 - _1268) / _1277);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1268 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1700 = frontier_phi_38_33_ladder;
        }
        float _1702 = isnan(_1511) ? _1303 : (isnan(_1303) ? _1511 : min(_1303, _1511));
        float _1703 = isnan(_1700) ? _1702 : (isnan(_1702) ? _1700 : min(_1702, _1700));
        float _1707 = (_1703 * _1271) + _1260;
        float _1708 = (_1703 * _1274) + _1264;
        float _1709 = (_1703 * _1277) + _1268;
        float _1710 = _1703 * 9.9999997473787516355514526367188e-05;
        float _1712 = (-1.0) - _1710;
        float _1714 = _1710 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1709 > _1714) || ((_1709 < _1712) || ((_1708 > _1714) || ((_1708 < _1712) || ((_1707 < _1712) || (_1707 > _1714))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1709, cbModelParam._m0[9u].z, fma(_1708, cbModelParam._m0[9u].y, _1707 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1709, cbModelParam._m0[10u].z, fma(_1708, cbModelParam._m0[10u].y, _1707 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1709, cbModelParam._m0[11u].z, fma(_1708, cbModelParam._m0[11u].y, _1707 * cbModelParam._m0[11u].x))), _1212);
            frontier_phi_16_38_ladder = _1806.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1806.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1806.x * cbModelParam._m0[1u].y;
        }
        _1293 = frontier_phi_16_38_ladder_2;
        _1295 = frontier_phi_16_38_ladder_1;
        _1297 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1281 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_401, _402, _403), _1212);
        _1293 = _1281.x * cbModelParam._m0[1u].y;
        _1295 = _1281.y * cbModelParam._m0[1u].y;
        _1297 = _1281.z * cbModelParam._m0[1u].y;
    }
    float _1300 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1357 = fma(_433, cbModelParam._m0[21u].z, fma(_429, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _425)) + cbModelParam._m0[21u].w;
        float _1361 = fma(_433, cbModelParam._m0[22u].z, fma(_429, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _425)) + cbModelParam._m0[22u].w;
        float _1365 = fma(_433, cbModelParam._m0[23u].z, fma(_429, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _425)) + cbModelParam._m0[23u].w;
        float _1368 = fma(_403, cbModelParam._m0[21u].z, fma(_402, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _401));
        float _1371 = fma(_403, cbModelParam._m0[22u].z, fma(_402, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _401));
        float _1374 = fma(_403, cbModelParam._m0[23u].z, fma(_402, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _401));
        float _1516;
        if (_1368 > 0.0)
        {
            _1516 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1516 = frontier_phi_28_24_ladder;
        }
        float _1727;
        if (_1371 > 0.0)
        {
            _1727 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1727 = frontier_phi_40_35_ladder;
        }
        float _1878;
        if (_1374 > 0.0)
        {
            _1878 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _1878 = frontier_phi_49_46_ladder;
        }
        float _1880 = isnan(_1727) ? _1516 : (isnan(_1516) ? _1727 : min(_1516, _1727));
        float _1881 = isnan(_1878) ? _1880 : (isnan(_1880) ? _1878 : min(_1880, _1878));
        float _1885 = (_1881 * _1368) + _1357;
        float _1886 = (_1881 * _1371) + _1361;
        float _1887 = (_1881 * _1374) + _1365;
        float _1888 = _1881 * 9.9999997473787516355514526367188e-05;
        float _1889 = (-1.0) - _1888;
        float _1891 = _1888 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1887 > _1891) || ((_1887 < _1889) || ((_1886 > _1891) || ((_1886 < _1889) || ((_1885 < _1889) || (_1885 > _1891))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1887, cbModelParam._m0[17u].z, fma(_1886, cbModelParam._m0[17u].y, _1885 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1887, cbModelParam._m0[18u].z, fma(_1886, cbModelParam._m0[18u].y, _1885 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1887, cbModelParam._m0[19u].z, fma(_1886, cbModelParam._m0[19u].y, _1885 * cbModelParam._m0[19u].x))), _1300);
            frontier_phi_25_49_ladder = _2121.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2121.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2121.x * cbModelParam._m0[1u].z;
        }
        _1393 = frontier_phi_25_49_ladder_2;
        _1395 = frontier_phi_25_49_ladder_1;
        _1397 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_401, _402, _403), _1300);
        _1393 = _1377.x * cbModelParam._m0[1u].z;
        _1395 = _1377.y * cbModelParam._m0[1u].z;
        _1397 = _1377.z * cbModelParam._m0[1u].z;
    }
    float _1409 = _392 * 0.01200000010430812835693359375;
    float _1411 = _1409 * ((cbModelParam._m0[1u].w * (_1393 - _1293)) + _1293);
    float _1412 = _1409 * ((cbModelParam._m0[1u].w * (_1395 - _1295)) + _1295);
    float _1413 = _1409 * ((cbModelParam._m0[1u].w * (_1397 - _1297)) + _1297);
    float _1416 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1419 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1422 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, _1411 * cbSceneParam._m0[91u].x));
    uvec4 _1432 = floatBitsToUint(cbInstanceData._m0[_366 + 5u]);
    uint _1434 = _1432.x * 14u;
    uint _1435 = _1434 + 13u;
    float _1442 = _392 + (-1.0);
    float _1448 = (cbLight._m0[_1435].x * _1442) + 1.0;
    float _1449 = (cbLight._m0[_1435].y * _1442) + 1.0;
    float _1450 = (cbLight._m0[_1435].z * _1442) + 1.0;
    float _1451 = (cbLight._m0[_1435].w * _1442) + 1.0;
    uint _1452 = _1434 + 5u;
    float _1458 = isnan(1.0) ? _1449 : (isnan(_1449) ? 1.0 : min(_1449, 1.0));
    uint _1462 = _1434 + 4u;
    float _1469 = isnan(1.0) ? _1448 : (isnan(_1448) ? 1.0 : min(_1448, 1.0));
    uint _1473 = _1434 | 1u;
    float _1484 = dot(vec3(cbLight._m0[_1434].xyz), vec3(_225, _226, _227));
    float _1487 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_225, _226, _227));
    float _3441 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    float _3452 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1492 = (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.3183098733425140380859375;
    float _1494 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.3183098733425140380859375;
    float _1501 = ((cbLight._m0[_1452].x * _1458) * _1494) + ((cbLight._m0[_1462].x * _1469) * _1492);
    float _1502 = ((_1458 * cbLight._m0[_1452].y) * _1494) + ((_1469 * cbLight._m0[_1462].y) * _1492);
    float _1503 = ((_1458 * cbLight._m0[_1452].z) * _1494) + ((_1469 * cbLight._m0[_1462].z) * _1492);
    uvec4 _1508 = floatBitsToUint(cbLight._m0[_1434 + 12u]);
    bool _1510 = _1508.x == 0u;
    float _1521;
    float _1523;
    float _1525;
    if (_1510)
    {
        _1521 = _1501;
        _1523 = _1502;
        _1525 = _1503;
    }
    else
    {
        uint _1529 = _1434 + 6u;
        float _1545 = (dot(vec3(cbLight._m0[_1434 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1546 = _1545 * _1545;
        float _3463 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1548 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
        _1521 = (((cbLight._m0[_1529].x * 0.3183098733425140380859375) * _1547) * _1548) + _1501;
        _1523 = (((cbLight._m0[_1529].y * 0.3183098733425140380859375) * _1547) * _1548) + _1502;
        _1525 = (((cbLight._m0[_1529].z * 0.3183098733425140380859375) * _1547) * _1548) + _1503;
    }
    bool _1528 = _1508.y == 0u;
    float _1566;
    float _1568;
    float _1570;
    if (_1528)
    {
        _1566 = _1521;
        _1568 = _1523;
        _1570 = _1525;
    }
    else
    {
        uint _1671 = _1434 + 7u;
        float _1687 = (dot(vec3(cbLight._m0[_1434 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1688 = _1687 * _1687;
        float _3479 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1690 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1566 = (((cbLight._m0[_1671].x * 0.3183098733425140380859375) * _1689) * _1690) + _1521;
        _1568 = (((cbLight._m0[_1671].y * 0.3183098733425140380859375) * _1689) * _1690) + _1523;
        _1570 = (((cbLight._m0[_1671].z * 0.3183098733425140380859375) * _1689) * _1690) + _1525;
    }
    uint _1572 = _1434 + 8u;
    float _1578 = cbLight._m0[_1434].x + _305;
    float _1579 = cbLight._m0[_1434].y + _306;
    float _1580 = cbLight._m0[_1434].z + _307;
    float _1584 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
    float _1588 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1434].xyz));
    float _3495 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1591 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _1592 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _1593 = dot(vec3(cbLight._m0[_1434].xyz), vec3(_1578 * _1584, _1579 * _1584, _1580 * _1584));
    float _3517 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1604 = (exp2(log2(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1610 = (0.5 / ((_1591 + 9.9999999392252902907785028219223e-09) + _1592)) * _1591;
    float _3528 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1612 = (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * 0.31831014156341552734375;
    uint _1623 = _1434 + 9u;
    float _1629 = cbLight._m0[_1473].x + _305;
    float _1630 = cbLight._m0[_1473].y + _306;
    float _1631 = cbLight._m0[_1473].z + _307;
    float _1635 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
    float _1639 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1473].xyz));
    float _3539 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1642 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _1643 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_1629 * _1635, _1630 * _1635, _1631 * _1635));
    float _3550 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
    float _1652 = (exp2(log2(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1656 = (0.5 / ((_1642 + 9.9999999392252902907785028219223e-09) + _1592)) * _1642;
    float _3561 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1658 = (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.31831014156341552734375;
    float _1668 = (((_1652 * cbLight._m0[_1623].x) * _1658) * _1458) + (((_1604 * cbLight._m0[_1572].x) * _1612) * _1469);
    float _1669 = (((_1652 * cbLight._m0[_1623].y) * _1658) * _1458) + (((_1604 * cbLight._m0[_1572].y) * _1612) * _1469);
    float _1670 = (((_1652 * cbLight._m0[_1623].z) * _1658) * _1458) + (((_1604 * cbLight._m0[_1572].z) * _1612) * _1469);
    float _1732;
    float _1734;
    float _1736;
    if (_1510)
    {
        _1732 = _1668;
        _1734 = _1669;
        _1736 = _1670;
    }
    else
    {
        uint _1738 = _1434 + 10u;
        uint _1744 = _1434 + 2u;
        float _1750 = cbLight._m0[_1744].x + _305;
        float _1751 = cbLight._m0[_1744].y + _306;
        float _1752 = cbLight._m0[_1744].z + _307;
        float _1756 = inversesqrt(dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752)));
        float _1760 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1744].xyz));
        float _3572 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1763 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1764 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_1750 * _1756, _1751 * _1756, _1752 * _1756));
        float _3583 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = (exp2(log2(1.0 - (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1777 = (0.5 / ((_1763 + 9.9999999392252902907785028219223e-09) + _1592)) * _1763;
        float _3594 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1779 = (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 0.31831014156341552734375;
        float _1780 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
        _1732 = (((_1773 * cbLight._m0[_1738].x) * _1779) * _1780) + _1668;
        _1734 = (((_1773 * cbLight._m0[_1738].y) * _1779) * _1780) + _1669;
        _1736 = (((_1773 * cbLight._m0[_1738].z) * _1779) * _1780) + _1670;
    }
    float _1815;
    float _1817;
    float _1819;
    if (_1528)
    {
        _1815 = _1732;
        _1817 = _1734;
        _1819 = _1736;
    }
    else
    {
        uint _1826 = _1434 + 11u;
        uint _1832 = _1434 + 3u;
        float _1838 = cbLight._m0[_1832].x + _305;
        float _1839 = cbLight._m0[_1832].y + _306;
        float _1840 = cbLight._m0[_1832].z + _307;
        float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
        float _1848 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1832].xyz));
        float _3610 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1851 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1852 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1838 * _1844, _1839 * _1844, _1840 * _1844));
        float _3621 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = (exp2(log2(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1865 = (0.5 / ((_1851 + 9.9999999392252902907785028219223e-09) + _1592)) * _1851;
        float _3632 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1867 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.31831014156341552734375;
        float _1868 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1815 = (((_1861 * cbLight._m0[_1826].x) * _1867) * _1868) + _1732;
        _1817 = (((_1861 * cbLight._m0[_1826].y) * _1867) * _1868) + _1734;
        _1819 = (((_1861 * cbLight._m0[_1826].z) * _1867) * _1868) + _1736;
    }
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    float _2013;
    if (_1432.y == 0u)
    {
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1943;
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1943;
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1943;
        uvec4 _1958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1959 = _1958.x;
        uint _1970 = uint((float(_1958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _327) / _1959))) + floor(float(uint(cbSceneParam._m0[85u].x * _326) / _1959)));
        float _1980 = (log2(_1946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1981 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        uint _1984 = uint(isnan(14.0) ? _1981 : (isnan(_1981) ? 14.0 : min(_1981, 14.0)));
        uvec4 _1989 = texelFetch(g_lightClusterGridBuffer, int(((_1984 << 2u) + (_1970 << 6u)) >> 2u));
        uint _1990 = _1989.x;
        uint _1991 = _1958.z;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        if (((((1u << ((_1991 >> 4u) & 15u)) + 4294967295u) & _1990) == 0u) || ((_1991 & 240u) == 0u))
        {
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
        }
        else
        {
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2287 = 0.0;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            uint _2293 = 0u;
            uint _2302;
            bool _2303;
            for (;;)
            {
                _2302 = texelFetch(g_lightClassification, int((((_1984 << 5u) + (_1970 << 9u)) + (_2293 << 2u)) >> 2u)).x;
                _2303 = _2302 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2303)
                {
                    frontier_phi_66_pred = _2287;
                    frontier_phi_66_pred_1 = _2292;
                    frontier_phi_66_pred_2 = _2291;
                    frontier_phi_66_pred_3 = _2290;
                    frontier_phi_66_pred_4 = _2289;
                    frontier_phi_66_pred_5 = _2288;
                }
                else
                {
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    float _2437;
                    uint _2438;
                    _2432 = _2287;
                    _2433 = _2288;
                    _2434 = _2289;
                    _2435 = _2290;
                    _2436 = _2291;
                    _2437 = _2292;
                    _2438 = _2302;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    for (;;)
                    {
                        uint _2442 = uint(findLSB(_2438)) + (_2293 << 5u);
                        uint _2439 = (_2438 + 4294967295u) & _2438;
                        uint _2444 = _2442 * 48u;
                        vec4 _2458 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2444)).x, texelFetch(g_PointLightRenderingBuffer, int(_2444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2444 + 3u)).x));
                        uint _2464 = (_2442 * 48u) + 4u;
                        vec4 _2477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2464)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 3u)).x));
                        uint _2483 = (_2442 * 48u) + 8u;
                        vec3 _2494 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2483)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2483 + 2u)).x));
                        float _2498 = _2458.x - _1944;
                        float _2499 = _2458.y - _1945;
                        float _2500 = _2458.z - _1946;
                        float _2501 = dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500));
                        float _2504 = inversesqrt(_2501);
                        float _2513 = 1.0 - (_2501 * _2458.w);
                        float _3658 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2514 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
                        float _2515 = sqrt(_2501) * _2477.w;
                        float _2518 = 1.39999997615814208984375 / (_2515 + 1.39999997615814208984375);
                        float _2519 = _2518 * _2518;
                        float _2522 = ((1.0 - _2519) * dot(vec3(_347, _350, _353), vec3(_2504 * _2498, _2504 * _2499, _2504 * _2500))) + _2519;
                        float _2525 = _2515 * _2515;
                        float _2529 = ((isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0))) * _2514) / ((_2525 * 0.699999988079071044921875) + 1.0);
                        float _2533 = (-0.0) - _1944;
                        float _2534 = (-0.0) - _1945;
                        float _2535 = (-0.0) - _1946;
                        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
                        float _2543 = dot(vec3(_347, _350, _353), vec3(_2539 * _2533, _2539 * _2534, _2539 * _2535));
                        float _3674 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _3685 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2547 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
                        float _2551 = (0.5 / (((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) + 9.9999999392252902907785028219223e-09) + _2547)) * _2547;
                        float _3696 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
                        float _2560 = (((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 3.1415927410125732421875) / ((_2525 * 2.1991131305694580078125) + 3.141590118408203125)) * _2514;
                        _2362 = (_2529 * _2477.x) + _2435;
                        _2363 = (_2529 * _2477.y) + _2436;
                        _2364 = (_2529 * _2477.z) + _2437;
                        _2359 = (_2560 * _2494.x) + _2432;
                        _2360 = (_2560 * _2494.y) + _2433;
                        _2361 = (_2560 * _2494.z) + _2434;
                        if (_2439 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2432 = _2359;
                            _2433 = _2360;
                            _2434 = _2361;
                            _2435 = _2362;
                            _2436 = _2363;
                            _2437 = _2364;
                            _2438 = _2439;
                        }
                    }
                    frontier_phi_66_pred = _2359;
                    frontier_phi_66_pred_1 = _2364;
                    frontier_phi_66_pred_2 = _2363;
                    frontier_phi_66_pred_3 = _2362;
                    frontier_phi_66_pred_4 = _2361;
                    frontier_phi_66_pred_5 = _2360;
                }
                _2127 = frontier_phi_66_pred;
                _2137 = frontier_phi_66_pred_1;
                _2135 = frontier_phi_66_pred_2;
                _2133 = frontier_phi_66_pred_3;
                _2131 = frontier_phi_66_pred_4;
                _2129 = frontier_phi_66_pred_5;
                uint _2294 = _2293 + 1u;
                if (_2294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2287 = _2127;
                    _2288 = _2129;
                    _2289 = _2131;
                    _2290 = _2133;
                    _2291 = _2135;
                    _2292 = _2137;
                    _2293 = _2294;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
        }
        uvec4 _2140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2141 = _2140.z;
        uint _2143 = (_2141 >> 8u) & 15u;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        if (((4294967295u << _2143) & _1990) == 0u)
        {
            _2258 = _2126;
            _2260 = _2128;
            _2262 = _2130;
            _2264 = _2132;
            _2266 = _2134;
            _2268 = _2136;
        }
        else
        {
            float _2283 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2143 < ((_2141 >> 12u) & 15u))
            {
                float _2259;
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2269;
                float _2415 = _2126;
                float _2416 = _2128;
                float _2417 = _2130;
                float _2418 = _2132;
                float _2419 = _2134;
                float _2420 = _2136;
                uint _2421 = _2143;
                uint _2430;
                bool _2431;
                for (;;)
                {
                    _2430 = texelFetch(g_lightClassification, int((((_1984 << 5u) + (_1970 << 9u)) + (_2421 << 2u)) >> 2u)).x;
                    _2431 = _2430 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2431)
                    {
                        frontier_phi_77_pred = _2420;
                        frontier_phi_77_pred_1 = _2419;
                        frontier_phi_77_pred_2 = _2418;
                        frontier_phi_77_pred_3 = _2417;
                        frontier_phi_77_pred_4 = _2416;
                        frontier_phi_77_pred_5 = _2415;
                    }
                    else
                    {
                        float _2574;
                        float _2575;
                        float _2576;
                        float _2577;
                        float _2578;
                        float _2579;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2587 = _2415;
                        float _2588 = _2416;
                        float _2589 = _2417;
                        float _2590 = _2418;
                        float _2591 = _2419;
                        float _2592 = _2420;
                        uint _2593 = _2430;
                        uint _2594;
                        vec4 _2619;
                        float _2620;
                        vec4 _2635;
                        vec3 _2647;
                        vec4 _2663;
                        vec4 _2679;
                        float _2726;
                        bool _2727;
                        for (;;)
                        {
                            uint _2604 = ((_2421 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2593));
                            _2594 = (_2593 + 4294967295u) & _2593;
                            uint _2606 = _2604 * 40u;
                            _2619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2606 + 3u)).x));
                            _2620 = _2619.w;
                            uint _2622 = (_2604 * 40u) + 4u;
                            _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2637 = (_2604 * 40u) + 8u;
                            _2647 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2637 + 2u)).x));
                            uint _2650 = (_2604 * 40u) + 16u;
                            _2663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2650 + 3u)).x));
                            uint _2666 = (_2604 * 40u) + 20u;
                            _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2682 = (_2604 * 40u) + 24u;
                            vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2682 + 3u)).x));
                            uint _2701 = (_2604 * 40u) + 28u;
                            vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            _2726 = fma(_1946, _2714.z, fma(_1945, _2714.y, _2714.x * _1944)) + _2714.w;
                            _2727 = !((fma(_1946, _2695.z, fma(_1945, _2695.y, _2695.x * _1944)) + _2695.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2727)
                            {
                                float _2754 = _2619.x - _1944;
                                float _2755 = _2619.y - _1945;
                                float _2756 = _2619.z - _1946;
                                float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                                float _2760 = inversesqrt(_2757);
                                float _2761 = _2760 * _2754;
                                float _2762 = _2760 * _2755;
                                float _2763 = _2760 * _2756;
                                float _2767 = 1.0 - (_2757 / (_2620 * _2620));
                                float _3707 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2768 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                                float _2772 = sqrt(_2757) * _2635.w;
                                float _2774 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                                float _2775 = _2774 * _2774;
                                float _2776 = 1.0 - _2775;
                                float _2778 = (_2776 * dot(vec3(_2761, _2762, _2763), vec3(_347, _350, _353))) + _2775;
                                float _2781 = _2772 * _2772;
                                float _2785 = (fma(_1946, _2663.z, fma(_1945, _2663.y, _2663.x * _1944)) + _2663.w) / _2726;
                                float _2786 = (fma(_1946, _2679.z, fma(_1945, _2679.y, _2679.x * _1944)) + _2679.w) / _2726;
                                float _2790 = 1.0 - dot(vec2(_2785, _2786), vec2(_2785, _2786));
                                float _3723 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                                float _2791 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                                float _2792 = _2791 * (((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2768) / ((_2781 * 0.699999988079071044921875) + 1.0));
                                float _2802 = dot(vec3(_347, _350, _353), vec3((-0.0) - (_1944 * _2283), (-0.0) - (_1945 * _2283), (-0.0) - (_1946 * _2283)));
                                float _3734 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2810 = (_2776 * dot(vec3(_347, _350, _353), vec3(_2761, _2762, _2763))) + _2775;
                                float _3745 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2811 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2815 = (0.5 / (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) + 9.9999999392252902907785028219223e-09) + _2811)) * _2811;
                                float _3756 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                                float _2822 = (_2791 * _2768) * (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 3.1415927410125732421875) / ((_2781 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2792 * _2635.y;
                                frontier_phi_83_pred_1 = _2792 * _2635.x;
                                frontier_phi_83_pred_2 = _2822 * _2647.z;
                                frontier_phi_83_pred_3 = _2822 * _2647.y;
                                frontier_phi_83_pred_4 = _2822 * _2647.x;
                                frontier_phi_83_pred_5 = _2792 * _2635.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2830 = frontier_phi_83_pred;
                            _2829 = frontier_phi_83_pred_1;
                            _2828 = frontier_phi_83_pred_2;
                            _2827 = frontier_phi_83_pred_3;
                            _2826 = frontier_phi_83_pred_4;
                            _2831 = frontier_phi_83_pred_5;
                            _2577 = _2829 + _2590;
                            _2578 = _2830 + _2591;
                            _2579 = _2831 + _2592;
                            _2574 = _2826 + _2587;
                            _2575 = _2827 + _2588;
                            _2576 = _2828 + _2589;
                            if (_2594 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2587 = _2574;
                                _2588 = _2575;
                                _2589 = _2576;
                                _2590 = _2577;
                                _2591 = _2578;
                                _2592 = _2579;
                                _2593 = _2594;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2579;
                        frontier_phi_77_pred_1 = _2578;
                        frontier_phi_77_pred_2 = _2577;
                        frontier_phi_77_pred_3 = _2576;
                        frontier_phi_77_pred_4 = _2575;
                        frontier_phi_77_pred_5 = _2574;
                    }
                    _2269 = frontier_phi_77_pred;
                    _2267 = frontier_phi_77_pred_1;
                    _2265 = frontier_phi_77_pred_2;
                    _2263 = frontier_phi_77_pred_3;
                    _2261 = frontier_phi_77_pred_4;
                    _2259 = frontier_phi_77_pred_5;
                    uint _2422 = _2421 + 1u;
                    if (_2422 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2415 = _2259;
                        _2416 = _2261;
                        _2417 = _2263;
                        _2418 = _2265;
                        _2419 = _2267;
                        _2420 = _2269;
                        _2421 = _2422;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2263;
                frontier_phi_58_59_ladder_1 = _2269;
                frontier_phi_58_59_ladder_2 = _2267;
                frontier_phi_58_59_ladder_3 = _2265;
                frontier_phi_58_59_ladder_4 = _2261;
                frontier_phi_58_59_ladder_5 = _2259;
            }
            else
            {
                frontier_phi_58_59_ladder = _2130;
                frontier_phi_58_59_ladder_1 = _2136;
                frontier_phi_58_59_ladder_2 = _2134;
                frontier_phi_58_59_ladder_3 = _2132;
                frontier_phi_58_59_ladder_4 = _2128;
                frontier_phi_58_59_ladder_5 = _2126;
            }
            _2258 = frontier_phi_58_59_ladder_5;
            _2260 = frontier_phi_58_59_ladder_4;
            _2262 = frontier_phi_58_59_ladder;
            _2264 = frontier_phi_58_59_ladder_3;
            _2266 = frontier_phi_58_59_ladder_2;
            _2268 = frontier_phi_58_59_ladder_1;
        }
        float _2273 = isnan(1.0) ? _392 : (isnan(_392) ? 1.0 : min(_392, 1.0));
        _2003 = (_2273 * _2264) + _1566;
        _2005 = (_2273 * _2266) + _1568;
        _2007 = (_2273 * _2268) + _1570;
        _2009 = ((_2258 * 0.039999999105930328369140625) * _2273) + _1815;
        _2011 = ((_2260 * 0.039999999105930328369140625) * _2273) + _1817;
        _2013 = ((_2262 * 0.039999999105930328369140625) * _2273) + _1819;
    }
    else
    {
        _2003 = _1566;
        _2005 = _1568;
        _2007 = _1570;
        _2009 = _1815;
        _2011 = _1817;
        _2013 = _1819;
    }
    uint _2019 = _368 + uint(cbMatDynParam._m0[0u].w);
    float _2027 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _216.x) * cbInstanceData._m0[_2019].x;
    float _2030 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _216.y) * cbInstanceData._m0[_2019].y;
    float _2033 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _216.z) * cbInstanceData._m0[_2019].z;
    float _3772 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3783 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3794 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2050 = (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_2003 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _392))) + ((_2009 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + _2027;
    float _2052 = (_2030 + ((_2011 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_2005 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _392)));
    float _2054 = (_2033 + ((_2013 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _1203)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_2007 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _392)));
    float _2055 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2056 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2063 = cbMtdParam._m0[2u].x * _2027;
    float _2064 = cbMtdParam._m0[2u].y * _2030;
    float _2065 = cbMtdParam._m0[2u].z * _2033;
    float _3820 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2067 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    uint _2068 = _366 + 6u;
    float _2076 = _326 / cbSceneParam._m0[86u].x;
    float _2077 = _327 / cbSceneParam._m0[86u].y;
    vec4 _2091 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2076, _2077, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2093 = _2091.x;
    float _2094 = _2091.y;
    float _2095 = _2091.z;
    float _2096 = _2091.w;
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2151 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2152 = _2151 / _247;
        float _2163 = _2152 * _298;
        float _2164 = _299 * _2152;
        float _2165 = (-0.0) - _2164;
        float _2167 = _2152 * _300;
        float _2169 = (cbSceneParam._m0[77u].w * _2165) / _2151;
        float _2170 = _2169 + cbSceneParam._m0[79u].w;
        float _2171 = cbSceneParam._m0[79u].w - _2164;
        float _2177 = sqrt(((_2163 * _2163) + (_2164 * _2164)) + (_2167 * _2167));
        float _2180 = (1.0 - (cbSceneParam._m0[77u].w / _2151)) * _2177;
        float _2185 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2187 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2372;
        if (abs((_2165 - _2169) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2372 = ((((_2170 > 0.0) ? exp2(_2185 * _2170) : (2.0 - exp2(_2187 * _2170))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2180;
        }
        else
        {
            float _2316 = 1.0 / cbSceneParam._m0[80u].x;
            float _2317 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : max(_2170, _2171));
            float _2318 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : min(_2170, _2171));
            float _2327 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : min(_2317, 0.0));
            float _2328 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : min(_2318, 0.0));
            _2372 = ((abs(_2177 / _2165) * cbSceneParam._m0[80u].y) * ((((_2327 - _2328) * 2.0) - ((exp2(_2185 * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)))) - exp2(_2185 * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0))))) * _2316)) - ((exp2(_2187 * _2327) - exp2(_2187 * _2328)) * _2316))) + (_2180 * cbSceneParam._m0[80u].z);
        }
        vec4 _2374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2076, _2077, 1.0), 0.0);
        float _2383 = exp2((_2372 * (-1.44269502162933349609375)) * (1.0 - _2374.w));
        float _2384 = log2(_2383);
        float _2400 = log2(_2096);
        _2189 = (exp2(_2400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].x)) * _2374.x) / cbSceneParam._m0[78u].x)) + _2093;
        _2191 = (exp2(_2400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].y)) * _2374.y) / cbSceneParam._m0[78u].y)) + _2094;
        _2193 = (exp2(_2400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].z)) * _2374.z) / cbSceneParam._m0[78u].z)) + _2095;
        _2195 = _2383 * _2096;
    }
    else
    {
        _2189 = _2093;
        _2191 = _2094;
        _2193 = _2095;
        _2195 = _2096;
    }
    bool _2410;
    vec4 _2205;
    vec4 _2228;
    float _2230;
    float _2234;
    float _2235;
    float _2236;
    float _2239;
    float _2242;
    float _2245;
    float _2246;
    bool _2257;
    for (;;)
    {
        _2205 = cbMatDynParam._m0[0u];
        float _2207 = roundEven(_2205.y);
        bool _2208 = _2207 == 3.0;
        float _2210 = log2(_2195);
        float _2214 = exp2(_2210 * cbSceneParam._m0[78u].x);
        float _2215 = exp2(_2210 * cbSceneParam._m0[78u].y);
        float _2216 = exp2(_2210 * cbSceneParam._m0[78u].z);
        float _2217 = _2214 * _2055;
        float _2218 = _2215 * _2056;
        float _2219 = _2216 * _2057;
        float _2226 = _314 + (-0.5);
        _2228 = cbMtdParam._m0[1u];
        _2230 = _2228.y * _2226;
        float _2233 = (_2207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2234 = _2233 * (_2208 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2189)));
        _2235 = _2233 * (_2208 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2191)));
        _2236 = _2233 * (_2208 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2193)));
        _2239 = ((_2063 * _2067) * _2214) * _2233;
        _2242 = ((_2064 * _2067) * _2215) * _2233;
        _2245 = ((_2065 * _2067) * _2216) * _2233;
        _2246 = _2226 * 0.999000012874603271484375;
        _2257 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2257)
        {
            if ((cbInstanceData._m0[_366 + 7u].x + _2246) < 0.5)
            {
                _2410 = true;
                break;
            }
        }
        uint _2351 = _368 + uint(_2205.w);
        if ((cbInstanceData._m0[_2351].w < 1.0) && ((cbInstanceData._m0[_2351].w + _2246) < 0.5))
        {
            _2410 = true;
            break;
        }
        if ((_2230 + 1.0) < _2228.x)
        {
            _2410 = true;
            break;
        }
        _2410 = false;
        break;
    }
    float _2565;
    if (_2410)
    {
        discard_state = true;
        _2565 = 0.0;
    }
    else
    {
        _2565 = cbInstanceData._m0[_2068].w;
    }
    SV_Target.x = _2234;
    SV_Target.y = _2235;
    SV_Target.z = _2236;
    SV_Target.w = _2565;
    SV_Target_1.x = _2239;
    SV_Target_1.y = _2242;
    SV_Target_1.z = _2245;
    SV_Target_1.w = cbInstanceData._m0[_2068].w;
    discard_exit();
}


