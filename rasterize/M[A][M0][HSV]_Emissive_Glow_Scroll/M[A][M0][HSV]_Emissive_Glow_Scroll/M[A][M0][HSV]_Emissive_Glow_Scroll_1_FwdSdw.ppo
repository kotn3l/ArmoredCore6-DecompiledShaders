#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _748;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _220 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3184 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _238 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
    float _246 = (((_238 * _238) * (3.0 - (_238 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _250 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _251 = _250 * _169;
    float _252 = _250 * _170;
    float _253 = _250 * _171;
    float _3195 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3206 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3217 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _272 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _313 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _323 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _313);
    float _324 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _313);
    float _325 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _313);
    float _329 = inversesqrt(dot(vec3(_323, _324, _325), vec3(_323, _324, _325)));
    float _330 = _323 * _329;
    float _331 = _324 * _329;
    float _332 = _325 * _329;
    float _338 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _339 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _360 = fma(_253, cbSceneParam._m0[5u].z, fma(_252, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _251));
    float _363 = fma(_253, cbSceneParam._m0[6u].z, fma(_252, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _251));
    float _366 = fma(_253, cbSceneParam._m0[7u].z, fma(_252, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _251));
    uint _379 = uint(roundEven(NORMAL.w)) * 13u;
    uint _381 = _379 + 9u;
    uint _382 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _388 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0)))) * cbInstanceData._m0[_382].x;
    float _389 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_382].y;
    float _390 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * cbInstanceData._m0[_382].z;
    float _3228 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _3239 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _392 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _393 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    vec4 _402 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _338, cbSceneParam._m0[86u].y * _339));
    float _405 = _402.x * TEXCOORD.z;
    float _406 = dot(vec3(_251, _252, _253), vec3(_330, _331, _332));
    float _409 = _406 * 2.0;
    float _413 = (_409 * _251) - _330;
    float _414 = (_409 * _252) - _331;
    float _415 = (_409 * _253) - _332;
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _747;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _472 = fma(_445, cbModelParam._m0[26u].z, fma(_441, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _437));
        float _476 = fma(_445, cbModelParam._m0[27u].z, fma(_441, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _437));
        float _480 = fma(_445, cbModelParam._m0[28u].z, fma(_441, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _437));
        float _505 = _437 + _251;
        float _506 = _441 + _252;
        float _507 = _445 + _253;
        float _517 = fma(_507, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _505)) - _472;
        float _518 = fma(_507, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _505)) - _476;
        float _519 = fma(_507, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _505)) - _480;
        float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
        float _536 = ((_523 * _517) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_472 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _537 = ((_523 * _518) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_476 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _538 = ((_523 * _519) / cbModelParam._m0[34u].z) + ((((((_480 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _555 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_536, _537, _538), 0.0);
        float _575 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_541.x + (-0.5));
        float _577 = _575 * (_541.y + (-0.5));
        float _578 = _575 * (_541.z + (-0.5));
        float _585 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_548.x + (-0.5));
        float _587 = _585 * (_548.y + (-0.5));
        float _588 = _585 * (_548.z + (-0.5));
        float _595 = exp2((_555.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_555.x + (-0.5));
        float _597 = _595 * (_555.y + (-0.5));
        float _598 = _595 * (_555.z + (-0.5));
        float _605 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_562.x + (-0.5));
        float _607 = _605 * (_562.y + (-0.5));
        float _608 = _605 * (_562.z + (-0.5));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
        float _612 = _576 * 0.5;
        float _613 = _586 * 0.5;
        float _614 = _596 * 0.5;
        float _615 = dot(vec3(_612, _613, _614), vec3(_612, _613, _614));
        float _620 = (_615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_615);
        float _629 = (dot(vec3(_251, _252, _253), vec3(_620 * _612, _620 * _613, _620 * _614)) + 1.0) * 0.5;
        float _3276 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _639 = sqrt(((_613 * _613) + (_612 * _612)) + (_614 * _614)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3287 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _641 = _640 * 2.0;
        float _645 = (1.0 - _640) / (_640 + 1.0);
        float _3298 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
        float _646 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _655 = ((((1.0 - _646) * (_641 + 2.0)) * exp2(log2(isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (_641 + 1.0))) + _646) * _609;
        float _656 = _577 * 0.5;
        float _657 = _587 * 0.5;
        float _658 = _597 * 0.5;
        float _659 = dot(vec3(_656, _657, _658), vec3(_656, _657, _658));
        float _664 = (_659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_659);
        float _672 = (dot(vec3(_251, _252, _253), vec3(_664 * _656, _664 * _657, _664 * _658)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _681 = sqrt(((_657 * _657) + (_656 * _656)) + (_658 * _658)) / (_610 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _683 = _682 * 2.0;
        float _687 = (1.0 - _682) / (_682 + 1.0);
        float _3331 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _688 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _697 = ((((1.0 - _688) * (_683 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_683 + 1.0))) + _688) * _610;
        float _698 = _578 * 0.5;
        float _699 = _588 * 0.5;
        float _700 = _598 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _714 = (dot(vec3(_251, _252, _253), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3342 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _723 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_611 + 9.9999997473787516355514526367188e-06);
        float _3353 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3364 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * (_725 + 1.0))) + _730) * _611;
        _747 = _578;
        _749 = _577;
        _750 = _576;
        _751 = _588;
        _752 = _587;
        _753 = _586;
        _754 = _598;
        _755 = _597;
        _756 = _596;
        _757 = _611;
        _758 = _610;
        _759 = _609;
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0)));
        _761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0)));
        _762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
    }
    else
    {
        _747 = _748;
        _749 = _748;
        _750 = _748;
        _751 = _748;
        _752 = _748;
        _753 = _748;
        _754 = _748;
        _755 = _748;
        _756 = _748;
        _757 = _748;
        _758 = _748;
        _759 = _748;
        _760 = 0.0;
        _761 = 0.0;
        _762 = 0.0;
    }
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _788 = fma(_445, cbModelParam._m0[30u].z, fma(_441, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _437));
        float _792 = fma(_445, cbModelParam._m0[31u].z, fma(_441, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _437));
        float _796 = fma(_445, cbModelParam._m0[32u].z, fma(_441, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _437));
        float _819 = _437 + _251;
        float _820 = _441 + _252;
        float _821 = _445 + _253;
        float _831 = fma(_821, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819)) - _788;
        float _832 = fma(_821, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819)) - _792;
        float _833 = fma(_821, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819)) - _796;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[35u].z) + ((((((_796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _887 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_854.x + (-0.5));
        float _889 = _887 * (_854.y + (-0.5));
        float _890 = _887 * (_854.z + (-0.5));
        float _897 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_861.x + (-0.5));
        float _899 = _897 * (_861.y + (-0.5));
        float _900 = _897 * (_861.z + (-0.5));
        float _907 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_868.x + (-0.5));
        float _909 = _907 * (_868.y + (-0.5));
        float _910 = _907 * (_868.z + (-0.5));
        float _917 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_875.x + (-0.5));
        float _919 = _917 * (_875.y + (-0.5));
        float _920 = _917 * (_875.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _940 = (dot(vec3(_251, _252, _253), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _949 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3427 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_951 + 1.0))) + _956) * _921;
        float _966 = _889 * 0.5;
        float _967 = _899 * 0.5;
        float _968 = _909 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_251, _252, _253), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3460 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_993 + 1.0))) + _998) * _922;
        float _1008 = _890 * 0.5;
        float _1009 = _900 * 0.5;
        float _1010 = _910 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_251, _252, _253), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3471 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3482 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3493 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * (_1035 + 1.0))) + _1040) * _923;
        _1057 = _890;
        _1058 = _889;
        _1059 = _888;
        _1060 = _900;
        _1061 = _899;
        _1062 = _898;
        _1063 = _910;
        _1064 = _909;
        _1065 = _908;
        _1066 = _923;
        _1067 = _922;
        _1068 = _921;
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _748;
        _1058 = _748;
        _1059 = _748;
        _1060 = _748;
        _1061 = _748;
        _1062 = _748;
        _1063 = _748;
        _1064 = _748;
        _1065 = _748;
        _1066 = _748;
        _1067 = _748;
        _1068 = _748;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _760)) + _760;
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _761)) + _761;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _762)) + _762;
    float _1104 = fma(_1083, cbSceneParam._m0[89u].z, fma(_1082, cbSceneParam._m0[89u].y, _1081 * cbSceneParam._m0[89u].x));
    float _1107 = fma(_1083, cbSceneParam._m0[90u].z, fma(_1082, cbSceneParam._m0[90u].y, _1081 * cbSceneParam._m0[90u].x));
    float _1110 = fma(_1083, cbSceneParam._m0[91u].z, fma(_1082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1081));
    float _1125 = _413 * 0.5;
    float _1126 = _414 * 0.5;
    float _1127 = _415 * 0.5;
    float _1128 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1131 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1134 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1141 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_747, _751, _754, _757));
        float _1145 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_749, _752, _755, _758));
        float _1149 = dot(vec4(_1125, _1126, _1127, 1.0), vec4(_750, _753, _756, _759));
        float _1156 = dot(vec4(cbModelParam._m0[39u]), vec4(_1125, _1126, _1127, 1.0));
        _1168 = dot(vec3(isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)), isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1168 = 1.0;
    }
    float _1179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1170 = dot(vec4(cbModelParam._m0[40u]), vec4(_1125, _1126, _1127, 1.0));
        _1179 = dot(vec3(isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1170) ? 0.0 : (isnan(0.0) ? _1170 : max(0.0, _1170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1179 = 1.0;
    }
    float _1183 = (_1179 * cbModelParam._m0[1u].x) + (_1168 * (1.0 - cbModelParam._m0[1u].x));
    float _1192 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1273;
    float _1275;
    float _1277;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1240 = fma(_445, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437)) + cbModelParam._m0[13u].w;
        float _1244 = fma(_445, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437)) + cbModelParam._m0[14u].w;
        float _1248 = fma(_445, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437)) + cbModelParam._m0[15u].w;
        float _1251 = fma(_415, cbModelParam._m0[13u].z, fma(_414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _413));
        float _1254 = fma(_415, cbModelParam._m0[14u].z, fma(_414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _413));
        float _1257 = fma(_415, cbModelParam._m0[15u].z, fma(_414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _413));
        float _1283;
        if (_1251 > 0.0)
        {
            _1283 = abs((1.0 - _1240) / _1251);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1251 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1240 + 1.0) / _1251);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1283 = frontier_phi_14_12_ladder;
        }
        float _1456;
        if (_1254 > 0.0)
        {
            _1456 = abs((1.0 - _1244) / _1254);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1254 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1244 + 1.0) / _1254);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1456 = frontier_phi_23_19_ladder;
        }
        float _1752;
        if (_1257 > 0.0)
        {
            _1752 = abs((1.0 - _1248) / _1257);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1257 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1248 + 1.0) / _1257);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1752 = frontier_phi_35_30_ladder;
        }
        float _1754 = isnan(_1456) ? _1283 : (isnan(_1283) ? _1456 : min(_1283, _1456));
        float _1755 = isnan(_1752) ? _1754 : (isnan(_1754) ? _1752 : min(_1754, _1752));
        float _1759 = (_1755 * _1251) + _1240;
        float _1760 = (_1755 * _1254) + _1244;
        float _1761 = (_1755 * _1257) + _1248;
        float _1762 = _1755 * 9.9999997473787516355514526367188e-05;
        float _1764 = (-1.0) - _1762;
        float _1766 = _1762 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1761 > _1766) || ((_1761 < _1764) || ((_1760 > _1766) || ((_1760 < _1764) || ((_1759 < _1764) || (_1759 > _1766))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1906 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1761, cbModelParam._m0[9u].z, fma(_1760, cbModelParam._m0[9u].y, _1759 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1761, cbModelParam._m0[10u].z, fma(_1760, cbModelParam._m0[10u].y, _1759 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1761, cbModelParam._m0[11u].z, fma(_1760, cbModelParam._m0[11u].y, _1759 * cbModelParam._m0[11u].x))), _1192);
            frontier_phi_13_35_ladder = _1906.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1906.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1906.x * cbModelParam._m0[1u].y;
        }
        _1273 = frontier_phi_13_35_ladder_2;
        _1275 = frontier_phi_13_35_ladder_1;
        _1277 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_413, _414, _415), _1192);
        _1273 = _1261.x * cbModelParam._m0[1u].y;
        _1275 = _1261.y * cbModelParam._m0[1u].y;
        _1277 = _1261.z * cbModelParam._m0[1u].y;
    }
    float _1280 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1336 = fma(_445, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437)) + cbModelParam._m0[21u].w;
        float _1340 = fma(_445, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437)) + cbModelParam._m0[22u].w;
        float _1344 = fma(_445, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437)) + cbModelParam._m0[23u].w;
        float _1347 = fma(_415, cbModelParam._m0[21u].z, fma(_414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _413));
        float _1350 = fma(_415, cbModelParam._m0[22u].z, fma(_414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _413));
        float _1353 = fma(_415, cbModelParam._m0[23u].z, fma(_414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _413));
        float _1461;
        if (_1347 > 0.0)
        {
            _1461 = abs((1.0 - _1336) / _1347);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1336 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1461 = frontier_phi_25_21_ladder;
        }
        float _1779;
        if (_1350 > 0.0)
        {
            _1779 = abs((1.0 - _1340) / _1350);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1340 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1779 = frontier_phi_37_32_ladder;
        }
        float _2052;
        if (_1353 > 0.0)
        {
            _2052 = abs((1.0 - _1344) / _1353);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1344 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2052 = frontier_phi_47_44_ladder;
        }
        float _2054 = isnan(_1779) ? _1461 : (isnan(_1461) ? _1779 : min(_1461, _1779));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1347) + _1336;
        float _2060 = (_2055 * _1350) + _1340;
        float _2061 = (_2055 * _1353) + _1344;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2063 = (-1.0) - _2062;
        float _2065 = _2062 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2061 > _2065) || ((_2061 < _2063) || ((_2060 > _2065) || ((_2060 < _2063) || ((_2059 < _2063) || (_2059 > _2065))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2061, cbModelParam._m0[17u].z, fma(_2060, cbModelParam._m0[17u].y, _2059 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2061, cbModelParam._m0[18u].z, fma(_2060, cbModelParam._m0[18u].y, _2059 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2061, cbModelParam._m0[19u].z, fma(_2060, cbModelParam._m0[19u].y, _2059 * cbModelParam._m0[19u].x))), _1280);
            frontier_phi_22_47_ladder = _2152.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2152.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2152.x * cbModelParam._m0[1u].z;
        }
        _1372 = frontier_phi_22_47_ladder_2;
        _1374 = frontier_phi_22_47_ladder_1;
        _1376 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_413, _414, _415), _1280);
        _1372 = _1356.x * cbModelParam._m0[1u].z;
        _1374 = _1356.y * cbModelParam._m0[1u].z;
        _1376 = _1356.z * cbModelParam._m0[1u].z;
    }
    float _1388 = _405 * 0.01200000010430812835693359375;
    float _1390 = _1388 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1391 = _1388 * ((cbModelParam._m0[1u].w * (_1374 - _1275)) + _1275);
    float _1392 = _1388 * ((cbModelParam._m0[1u].w * (_1376 - _1277)) + _1277);
    float _1395 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, _1390 * cbSceneParam._m0[91u].x));
    float _1435 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1448 = _1435 / _1447;
    float _1449 = _1439 / _1447;
    float _1450 = _1443 / _1447;
    float _1597;
    float _1598;
    float _1599;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1477 = ((uint(_1450 > cbSceneParam._m0[59u].y) + uint(_1450 > cbSceneParam._m0[59u].x)) + uint(_1450 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1478 = _1477 + 43u;
        uint _1486 = _1477 + 44u;
        uint _1494 = _1477 + 45u;
        uint _1502 = _1477 + 46u;
        float _1513 = fma(_1447, cbSceneParam._m0[_1478].w, fma(_1443, cbSceneParam._m0[_1478].z, fma(_1439, cbSceneParam._m0[_1478].y, _1435 * cbSceneParam._m0[_1478].x)));
        float _1517 = fma(_1447, cbSceneParam._m0[_1486].w, fma(_1443, cbSceneParam._m0[_1486].z, fma(_1439, cbSceneParam._m0[_1486].y, _1435 * cbSceneParam._m0[_1486].x)));
        float _1525 = fma(_1447, cbSceneParam._m0[_1502].w, fma(_1443, cbSceneParam._m0[_1502].z, fma(_1439, cbSceneParam._m0[_1502].y, _1435 * cbSceneParam._m0[_1502].x)));
        float _1530 = cbSceneParam._m0[33u].z * _1525;
        float _1532 = cbSceneParam._m0[33u].w * _1525;
        float _1535 = fma(_1447, cbSceneParam._m0[_1494].w, fma(_1443, cbSceneParam._m0[_1494].z, fma(_1439, cbSceneParam._m0[_1494].y, _1435 * cbSceneParam._m0[_1494].x))) / _1525;
        float _1583 = (cbSceneParam._m0[33u].x - sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450))) * cbSceneParam._m0[33u].y;
        float _3619 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1590 = (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1530 + _1513) / _1525, (_1532 + _1517) / _1525), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1532 + _1513) / _1525, (_1517 - _1530) / _1525), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1513 - _1530) / _1525, (_1517 - _1532) / _1525), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1513 - _1532) / _1525, (_1530 + _1517) / _1525), _1535), 0.0)).x), vec4(0.25)));
        _1597 = 1.0 - (_1590 * cbSceneParam._m0[34u].x);
        _1598 = 1.0 - (_1590 * cbSceneParam._m0[34u].y);
        _1599 = 1.0 - (_1590 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1597 = 1.0;
        _1598 = 1.0;
        _1599 = 1.0;
    }
    float _1663;
    float _1665;
    float _1667;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1651 = fma(_1447, cbSceneParam._m0[63u].w, fma(_1443, cbSceneParam._m0[63u].z, fma(_1439, cbSceneParam._m0[63u].y, _1435 * cbSceneParam._m0[63u].x)));
        float _1652 = fma(_1447, cbSceneParam._m0[60u].w, fma(_1443, cbSceneParam._m0[60u].z, fma(_1439, cbSceneParam._m0[60u].y, _1435 * cbSceneParam._m0[60u].x))) / _1651;
        float _1653 = fma(_1447, cbSceneParam._m0[61u].w, fma(_1443, cbSceneParam._m0[61u].z, fma(_1439, cbSceneParam._m0[61u].y, _1435 * cbSceneParam._m0[61u].x))) / _1651;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1652 >= cbSceneParam._m0[64u].x) && (_1653 >= cbSceneParam._m0[64u].y)) && (_1652 <= cbSceneParam._m0[64u].z)) && (_1653 <= cbSceneParam._m0[64u].w))
        {
            float _1792 = fma(_1447, cbSceneParam._m0[62u].w, fma(_1443, cbSceneParam._m0[62u].z, fma(_1439, cbSceneParam._m0[62u].y, _1435 * cbSceneParam._m0[62u].x))) / _1651;
            float _1796 = isnan(cbSceneParam._m0[41u].w) ? _1792 : (isnan(_1792) ? cbSceneParam._m0[41u].w : max(_1792, cbSceneParam._m0[41u].w));
            float _1839 = (cbSceneParam._m0[33u].x - sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450))) * cbSceneParam._m0[33u].y;
            float _3635 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
            float _1846 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1652, cbSceneParam._m0[33u].w + _1653), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1652, _1653 - cbSceneParam._m0[33u].z), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1652 - cbSceneParam._m0[33u].z, _1653 - cbSceneParam._m0[33u].w), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1652 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1653), _1796), 0.0)).x), vec4(0.25)));
            float _1850 = 1.0 - (_1846 * cbSceneParam._m0[34u].x);
            float _1851 = 1.0 - (_1846 * cbSceneParam._m0[34u].y);
            float _1852 = 1.0 - (_1846 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1852) ? _1599 : (isnan(_1599) ? _1852 : min(_1599, _1852));
            frontier_phi_34_33_ladder_1 = isnan(_1851) ? _1598 : (isnan(_1598) ? _1851 : min(_1598, _1851));
            frontier_phi_34_33_ladder_2 = isnan(_1850) ? _1597 : (isnan(_1597) ? _1850 : min(_1597, _1850));
        }
        else
        {
            frontier_phi_34_33_ladder = _1599;
            frontier_phi_34_33_ladder_1 = _1598;
            frontier_phi_34_33_ladder_2 = _1597;
        }
        _1663 = frontier_phi_34_33_ladder_2;
        _1665 = frontier_phi_34_33_ladder_1;
        _1667 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1663 = _1597;
        _1665 = _1598;
        _1667 = _1599;
    }
    uvec4 _1672 = floatBitsToUint(cbInstanceData._m0[_379 + 5u]);
    uint _1674 = _1672.x * 14u;
    uint _1675 = _1674 + 13u;
    float _1682 = _405 + (-1.0);
    float _1687 = (cbLight._m0[_1675].x * _1682) + 1.0;
    float _1688 = (cbLight._m0[_1675].y * _1682) + 1.0;
    float _1689 = (cbLight._m0[_1675].z * _1682) + 1.0;
    float _1690 = (cbLight._m0[_1675].w * _1682) + 1.0;
    uint _1691 = _1674 + 5u;
    float _1697 = isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0));
    uint _1701 = _1674 + 4u;
    float _1711 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1715 = _1674 | 1u;
    float _1726 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_251, _252, _253));
    float _1729 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_251, _252, _253));
    float _3671 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _3682 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1734 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1736 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1743 = ((cbLight._m0[_1691].x * _1697) * _1736) + (((cbLight._m0[_1701].x * _1663) * _1711) * _1734);
    float _1744 = ((_1697 * cbLight._m0[_1691].y) * _1736) + (((cbLight._m0[_1701].y * _1665) * _1711) * _1734);
    float _1745 = ((_1697 * cbLight._m0[_1691].z) * _1736) + (((cbLight._m0[_1701].z * _1667) * _1711) * _1734);
    uvec4 _1749 = floatBitsToUint(cbLight._m0[_1674 + 12u]);
    bool _1751 = _1749.x == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1751)
    {
        _1853 = _1743;
        _1855 = _1744;
        _1857 = _1745;
    }
    else
    {
        uint _1861 = _1674 + 6u;
        float _1877 = (dot(vec3(cbLight._m0[_1674 + 2u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3693 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1880 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _1853 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1743;
        _1855 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1744;
        _1857 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1745;
    }
    bool _1860 = _1749.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1860)
    {
        _1915 = _1853;
        _1917 = _1855;
        _1919 = _1857;
    }
    else
    {
        uint _2023 = _1674 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1674 + 3u].xyz), vec3(_251, _252, _253)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _3709 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _2042 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _1915 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1853;
        _1917 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1855;
        _1919 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1857;
    }
    uint _1921 = _1674 + 8u;
    float _1927 = cbLight._m0[_1674].x + _330;
    float _1928 = cbLight._m0[_1674].y + _331;
    float _1929 = cbLight._m0[_1674].z + _332;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1937 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1674].xyz));
    float _3725 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _1941 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1942 = dot(vec3(cbLight._m0[_1674].xyz), vec3(_1927 * _1933, _1928 * _1933, _1929 * _1933));
    float _3747 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1959 = (0.5 / ((_1940 + 9.9999999392252902907785028219223e-09) + _1941)) * _1940;
    float _3758 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.31831014156341552734375;
    uint _1975 = _1674 + 9u;
    float _1981 = cbLight._m0[_1715].x + _330;
    float _1982 = cbLight._m0[_1715].y + _331;
    float _1983 = cbLight._m0[_1715].z + _332;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1991 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_1715].xyz));
    float _3769 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1995 = dot(vec3(cbLight._m0[_1715].xyz), vec3(_1981 * _1987, _1982 * _1987, _1983 * _1987));
    float _3780 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2008 = (0.5 / ((_1994 + 9.9999999392252902907785028219223e-09) + _1941)) * _1994;
    float _3791 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.31831014156341552734375;
    float _2020 = (((_2004 * cbLight._m0[_1975].x) * _2010) * _1697) + ((((cbLight._m0[_1921].x * _1663) * _1953) * _1961) * _1711);
    float _2021 = (((_2004 * cbLight._m0[_1975].y) * _2010) * _1697) + ((((cbLight._m0[_1921].y * _1665) * _1953) * _1961) * _1711);
    float _2022 = (((_2004 * cbLight._m0[_1975].z) * _2010) * _1697) + ((((cbLight._m0[_1921].z * _1667) * _1953) * _1961) * _1711);
    float _2078;
    float _2080;
    float _2082;
    if (_1751)
    {
        _2078 = _2020;
        _2080 = _2021;
        _2082 = _2022;
    }
    else
    {
        uint _2084 = _1674 + 10u;
        uint _2090 = _1674 + 2u;
        float _2096 = cbLight._m0[_2090].x + _330;
        float _2097 = cbLight._m0[_2090].y + _331;
        float _2098 = cbLight._m0[_2090].z + _332;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2106 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_2090].xyz));
        float _3802 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2096 * _2102, _2097 * _2102, _2098 * _2102));
        float _3813 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2123 = (0.5 / ((_2109 + 9.9999999392252902907785028219223e-09) + _1941)) * _2109;
        float _3824 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.31831014156341552734375;
        float _2126 = isnan(1.0) ? _1689 : (isnan(_1689) ? 1.0 : min(_1689, 1.0));
        _2078 = (((_2119 * cbLight._m0[_2084].x) * _2125) * _2126) + _2020;
        _2080 = (((_2119 * cbLight._m0[_2084].y) * _2125) * _2126) + _2021;
        _2082 = (((_2119 * cbLight._m0[_2084].z) * _2125) * _2126) + _2022;
    }
    float _2157;
    float _2159;
    float _2161;
    if (_1860)
    {
        _2157 = _2078;
        _2159 = _2080;
        _2161 = _2082;
    }
    else
    {
        uint _2168 = _1674 + 11u;
        uint _2174 = _1674 + 3u;
        float _2180 = cbLight._m0[_2174].x + _330;
        float _2181 = cbLight._m0[_2174].y + _331;
        float _2182 = cbLight._m0[_2174].z + _332;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2190 = dot(vec3(_251, _252, _253), vec3(cbLight._m0[_2174].xyz));
        float _3840 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2180 * _2186, _2181 * _2186, _2182 * _2186));
        float _3851 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = (0.5 / ((_2193 + 9.9999999392252902907785028219223e-09) + _1941)) * _2193;
        float _3862 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.31831014156341552734375;
        float _2210 = isnan(1.0) ? _1690 : (isnan(_1690) ? 1.0 : min(_1690, 1.0));
        _2157 = (((_2203 * cbLight._m0[_2168].x) * _2209) * _2210) + _2078;
        _2159 = (((_2203 * cbLight._m0[_2168].y) * _2209) * _2210) + _2080;
        _2161 = (((_2203 * cbLight._m0[_2168].z) * _2209) * _2210) + _2082;
    }
    float _2276;
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    if (_1672.y == 0u)
    {
        uvec4 _2231 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2232 = _2231.x;
        uint _2243 = uint((float(_2231.y) * floor(float(uint(cbSceneParam._m0[85u].y * _339) / _2232))) + floor(float(uint(cbSceneParam._m0[85u].x * _338) / _2232)));
        float _2253 = (log2(_1450 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2254 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        uint _2257 = uint(isnan(14.0) ? _2254 : (isnan(_2254) ? 14.0 : min(_2254, 14.0)));
        uvec4 _2262 = texelFetch(g_lightClusterGridBuffer, int(((_2257 << 2u) + (_2243 << 6u)) >> 2u));
        uint _2263 = _2262.x;
        uint _2264 = _2231.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2264 >> 4u) & 15u)) + 4294967295u) & _2263) == 0u) || ((_2264 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            float _2536 = 0.0;
            float _2537 = 0.0;
            uint _2538 = 0u;
            uint _2547;
            bool _2548;
            for (;;)
            {
                _2547 = texelFetch(g_lightClassification, int((((_2257 << 5u) + (_2243 << 9u)) + (_2538 << 2u)) >> 2u)).x;
                _2548 = _2547 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2548)
                {
                    frontier_phi_66_pred = _2537;
                    frontier_phi_66_pred_1 = _2536;
                    frontier_phi_66_pred_2 = _2535;
                    frontier_phi_66_pred_3 = _2534;
                    frontier_phi_66_pred_4 = _2533;
                    frontier_phi_66_pred_5 = _2532;
                }
                else
                {
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    uint _2662;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2547;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    for (;;)
                    {
                        uint _2666 = uint(findLSB(_2662)) + (_2538 << 5u);
                        uint _2663 = (_2662 + 4294967295u) & _2662;
                        uint _2668 = _2666 * 48u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2688 = (_2666 * 48u) + 4u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2707 = (_2666 * 48u) + 8u;
                        vec3 _2718 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x));
                        float _2722 = _2682.x - _1448;
                        float _2723 = _2682.y - _1449;
                        float _2724 = _2682.z - _1450;
                        float _2725 = dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724));
                        float _2728 = inversesqrt(_2725);
                        float _2737 = 1.0 - (_2725 * _2682.w);
                        float _3888 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2738 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                        float _2739 = sqrt(_2725) * _2701.w;
                        float _2742 = 1.39999997615814208984375 / (_2739 + 1.39999997615814208984375);
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * dot(vec3(_360, _363, _366), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724))) + _2743;
                        float _2749 = _2739 * _2739;
                        float _2753 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2738) / ((_2749 * 0.699999988079071044921875) + 1.0);
                        float _2757 = (-0.0) - _1448;
                        float _2758 = (-0.0) - _1449;
                        float _2759 = (-0.0) - _1450;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2767 = dot(vec3(_360, _363, _366), vec3(_2763 * _2757, _2763 * _2758, _2763 * _2759));
                        float _3904 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _3915 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2771 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
                        float _2775 = (0.5 / (((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) + 9.9999999392252902907785028219223e-09) + _2771)) * _2771;
                        float _3926 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2784 = (((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 3.1415927410125732421875) / ((_2749 * 2.1991131305694580078125) + 3.141590118408203125)) * _2738;
                        _2591 = (_2753 * _2701.x) + _2659;
                        _2592 = (_2753 * _2701.y) + _2660;
                        _2593 = (_2753 * _2701.z) + _2661;
                        _2588 = (_2784 * _2718.x) + _2656;
                        _2589 = (_2784 * _2718.y) + _2657;
                        _2590 = (_2784 * _2718.z) + _2658;
                        if (_2663 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2663;
                        }
                    }
                    frontier_phi_66_pred = _2593;
                    frontier_phi_66_pred_1 = _2592;
                    frontier_phi_66_pred_2 = _2591;
                    frontier_phi_66_pred_3 = _2590;
                    frontier_phi_66_pred_4 = _2589;
                    frontier_phi_66_pred_5 = _2588;
                }
                _2392 = frontier_phi_66_pred;
                _2390 = frontier_phi_66_pred_1;
                _2388 = frontier_phi_66_pred_2;
                _2386 = frontier_phi_66_pred_3;
                _2384 = frontier_phi_66_pred_4;
                _2382 = frontier_phi_66_pred_5;
                uint _2539 = _2538 + 1u;
                if (_2539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2532 = _2382;
                    _2533 = _2384;
                    _2534 = _2386;
                    _2535 = _2388;
                    _2536 = _2390;
                    _2537 = _2392;
                    _2538 = _2539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((4294967295u << _2398) & _2263) == 0u)
        {
            _2503 = _2381;
            _2505 = _2383;
            _2507 = _2385;
            _2509 = _2387;
            _2511 = _2389;
            _2513 = _2391;
        }
        else
        {
            float _2528 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2504;
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2639 = _2381;
                float _2640 = _2383;
                float _2641 = _2385;
                float _2642 = _2387;
                float _2643 = _2389;
                float _2644 = _2391;
                uint _2645 = _2398;
                uint _2654;
                bool _2655;
                for (;;)
                {
                    _2654 = texelFetch(g_lightClassification, int((((_2257 << 5u) + (_2243 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                    _2655 = _2654 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2655)
                    {
                        frontier_phi_72_pred = _2644;
                        frontier_phi_72_pred_1 = _2643;
                        frontier_phi_72_pred_2 = _2642;
                        frontier_phi_72_pred_3 = _2641;
                        frontier_phi_72_pred_4 = _2640;
                        frontier_phi_72_pred_5 = _2639;
                    }
                    else
                    {
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _2802 = _2639;
                        float _2803 = _2640;
                        float _2804 = _2641;
                        float _2805 = _2642;
                        float _2806 = _2643;
                        float _2807 = _2644;
                        uint _2808 = _2654;
                        uint _2809;
                        vec4 _2834;
                        float _2835;
                        vec4 _2850;
                        vec3 _2862;
                        vec4 _2878;
                        vec4 _2894;
                        float _2941;
                        bool _2942;
                        for (;;)
                        {
                            uint _2819 = ((_2645 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2808));
                            _2809 = (_2808 + 4294967295u) & _2808;
                            uint _2821 = _2819 * 40u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            _2835 = _2834.w;
                            uint _2837 = (_2819 * 40u) + 4u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2819 * 40u) + 8u;
                            _2862 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x));
                            uint _2865 = (_2819 * 40u) + 16u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            uint _2881 = (_2819 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2897 = (_2819 * 40u) + 24u;
                            vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2916 = (_2819 * 40u) + 28u;
                            vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            _2941 = fma(_1450, _2929.z, fma(_1449, _2929.y, _2929.x * _1448)) + _2929.w;
                            _2942 = !((fma(_1450, _2910.z, fma(_1449, _2910.y, _2910.x * _1448)) + _2910.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2942)
                            {
                                float _2969 = _2834.x - _1448;
                                float _2970 = _2834.y - _1449;
                                float _2971 = _2834.z - _1450;
                                float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                                float _2975 = inversesqrt(_2972);
                                float _2976 = _2975 * _2969;
                                float _2977 = _2975 * _2970;
                                float _2978 = _2975 * _2971;
                                float _2982 = 1.0 - (_2972 / (_2835 * _2835));
                                float _3937 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2983 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _2987 = sqrt(_2972) * _2850.w;
                                float _2989 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                                float _2990 = _2989 * _2989;
                                float _2991 = 1.0 - _2990;
                                float _2993 = (_2991 * dot(vec3(_2976, _2977, _2978), vec3(_360, _363, _366))) + _2990;
                                float _2996 = _2987 * _2987;
                                float _3000 = (fma(_1450, _2878.z, fma(_1449, _2878.y, _2878.x * _1448)) + _2878.w) / _2941;
                                float _3001 = (fma(_1450, _2894.z, fma(_1449, _2894.y, _2894.x * _1448)) + _2894.w) / _2941;
                                float _3005 = 1.0 - dot(vec2(_3000, _3001), vec2(_3000, _3001));
                                float _3953 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _3007 = _3006 * (((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2983) / ((_2996 * 0.699999988079071044921875) + 1.0));
                                float _3017 = dot(vec3(_360, _363, _366), vec3((-0.0) - (_1448 * _2528), (-0.0) - (_1449 * _2528), (-0.0) - (_1450 * _2528)));
                                float _3964 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3025 = (_2991 * dot(vec3(_360, _363, _366), vec3(_2976, _2977, _2978))) + _2990;
                                float _3975 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _3030 = (0.5 / (((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) + 9.9999999392252902907785028219223e-09) + _3026)) * _3026;
                                float _3986 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3037 = (_3006 * _2983) * (((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 3.1415927410125732421875) / ((_2996 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3007 * _2850.y;
                                frontier_phi_78_pred_1 = _3007 * _2850.x;
                                frontier_phi_78_pred_2 = _3037 * _2862.z;
                                frontier_phi_78_pred_3 = _3037 * _2862.y;
                                frontier_phi_78_pred_4 = _3037 * _2862.x;
                                frontier_phi_78_pred_5 = _3007 * _2850.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3045 = frontier_phi_78_pred;
                            _3044 = frontier_phi_78_pred_1;
                            _3043 = frontier_phi_78_pred_2;
                            _3042 = frontier_phi_78_pred_3;
                            _3041 = frontier_phi_78_pred_4;
                            _3046 = frontier_phi_78_pred_5;
                            _2792 = _3044 + _2805;
                            _2793 = _3045 + _2806;
                            _2794 = _3046 + _2807;
                            _2789 = _3041 + _2802;
                            _2790 = _3042 + _2803;
                            _2791 = _3043 + _2804;
                            if (_2809 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2809;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2794;
                        frontier_phi_72_pred_1 = _2793;
                        frontier_phi_72_pred_2 = _2792;
                        frontier_phi_72_pred_3 = _2791;
                        frontier_phi_72_pred_4 = _2790;
                        frontier_phi_72_pred_5 = _2789;
                    }
                    _2514 = frontier_phi_72_pred;
                    _2512 = frontier_phi_72_pred_1;
                    _2510 = frontier_phi_72_pred_2;
                    _2508 = frontier_phi_72_pred_3;
                    _2506 = frontier_phi_72_pred_4;
                    _2504 = frontier_phi_72_pred_5;
                    uint _2646 = _2645 + 1u;
                    if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2639 = _2504;
                        _2640 = _2506;
                        _2641 = _2508;
                        _2642 = _2510;
                        _2643 = _2512;
                        _2644 = _2514;
                        _2645 = _2646;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2514;
                frontier_phi_60_61_ladder_1 = _2512;
                frontier_phi_60_61_ladder_2 = _2508;
                frontier_phi_60_61_ladder_3 = _2506;
                frontier_phi_60_61_ladder_4 = _2504;
                frontier_phi_60_61_ladder_5 = _2510;
            }
            else
            {
                frontier_phi_60_61_ladder = _2391;
                frontier_phi_60_61_ladder_1 = _2389;
                frontier_phi_60_61_ladder_2 = _2385;
                frontier_phi_60_61_ladder_3 = _2383;
                frontier_phi_60_61_ladder_4 = _2381;
                frontier_phi_60_61_ladder_5 = _2387;
            }
            _2503 = frontier_phi_60_61_ladder_4;
            _2505 = frontier_phi_60_61_ladder_3;
            _2507 = frontier_phi_60_61_ladder_2;
            _2509 = frontier_phi_60_61_ladder_5;
            _2511 = frontier_phi_60_61_ladder_1;
            _2513 = frontier_phi_60_61_ladder;
        }
        float _2518 = isnan(1.0) ? _405 : (isnan(_405) ? 1.0 : min(_405, 1.0));
        _2276 = (_2518 * _2509) + _1915;
        _2278 = (_2518 * _2511) + _1917;
        _2280 = (_2518 * _2513) + _1919;
        _2282 = ((_2503 * 0.039999999105930328369140625) * _2518) + _2157;
        _2284 = ((_2505 * 0.039999999105930328369140625) * _2518) + _2159;
        _2286 = ((_2507 * 0.039999999105930328369140625) * _2518) + _2161;
    }
    else
    {
        _2276 = _1915;
        _2278 = _1917;
        _2280 = _1919;
        _2282 = _2157;
        _2284 = _2159;
        _2286 = _2161;
    }
    uint _2292 = _381 + uint(cbMatDynParam._m0[0u].w);
    float _2301 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _220.x) * _246) * cbInstanceData._m0[_2292].x;
    float _2305 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _220.y) * _246) * cbInstanceData._m0[_2292].y;
    float _2309 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _220.z) * _246) * cbInstanceData._m0[_2292].z;
    float _4002 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _4013 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _4024 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _2326 = (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2276 + ((isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0))) * _405))) + ((_2282 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + _2301;
    float _2328 = (_2305 + ((_2284 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2278 + ((isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0))) * _405)));
    float _2330 = (_2309 + ((_2286 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2280 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _405)));
    float _4050 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2343 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    uint _2344 = _379 + 6u;
    float _2352 = _338 / cbSceneParam._m0[86u].x;
    float _2353 = _339 / cbSceneParam._m0[86u].y;
    vec4 _2367 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, (log2((isnan(cbSceneParam._m0[77u].w) ? _272 : (isnan(_272) ? cbSceneParam._m0[77u].w : min(_272, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2369 = _2367.x;
    float _2370 = _2367.y;
    float _2371 = _2367.z;
    float _2372 = _2367.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_272 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_272) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _272 : min(cbSceneParam._m0[80u].w, _272));
        float _2407 = _2406 / _272;
        float _2418 = _2407 * _323;
        float _2419 = _324 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2422 = _2407 * _325;
        float _2424 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2419;
        float _2432 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2601;
        if (abs((_2420 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2601 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2561 = 1.0 / cbSceneParam._m0[80u].x;
            float _2562 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2563 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2572 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : min(_2562, 0.0));
            float _2573 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : min(_2563, 0.0));
            _2601 = ((abs(_2432 / _2420) * cbSceneParam._m0[80u].y) * ((((_2572 - _2573) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))))) * _2561)) - ((exp2(_2442 * _2572) - exp2(_2442 * _2573)) * _2561))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2603 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, 1.0), 0.0);
        float _2612 = exp2((_2601 * (-1.44269502162933349609375)) * (1.0 - _2603.w));
        float _2613 = log2(_2612);
        float _2629 = log2(_2372);
        _2444 = (exp2(_2629 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].x)) * _2603.x) / cbSceneParam._m0[78u].x)) + _2369;
        _2446 = (exp2(_2629 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].y)) * _2603.y) / cbSceneParam._m0[78u].y)) + _2370;
        _2448 = (exp2(_2629 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2613 * cbSceneParam._m0[78u].z)) * _2603.z) / cbSceneParam._m0[78u].z)) + _2371;
        _2450 = _2612 * _2372;
    }
    else
    {
        _2444 = _2369;
        _2446 = _2370;
        _2448 = _2371;
        _2450 = _2372;
    }
    float _2462 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2463 = _2462 == 3.0;
    float _2464 = log2(_2450);
    float _2468 = exp2(_2464 * cbSceneParam._m0[78u].x);
    float _2469 = exp2(_2464 * cbSceneParam._m0[78u].y);
    float _2470 = exp2(_2464 * cbSceneParam._m0[78u].z);
    float _2471 = _2468 * (isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)));
    float _2472 = _2469 * (isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0)));
    float _2473 = _2470 * (isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0)));
    float _2482 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2482 * (_2463 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2444)));
    SV_Target.y = _2482 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2446)));
    SV_Target.z = _2482 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2448)));
    SV_Target.w = cbInstanceData._m0[_2344].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2301) * _2343) * _2468) * _2482;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2305) * _2343) * _2469) * _2482;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2309) * _2343) * _2470) * _2482;
    SV_Target_1.w = cbInstanceData._m0[_2344].w;
}


