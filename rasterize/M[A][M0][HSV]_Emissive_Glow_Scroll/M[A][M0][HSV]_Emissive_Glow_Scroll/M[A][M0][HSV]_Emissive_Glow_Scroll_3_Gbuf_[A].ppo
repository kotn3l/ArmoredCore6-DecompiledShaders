#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec3 TEXCOORD;
layout(location = 3, component = 3) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _129 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _130 = _129 * NORMAL.x;
    float _131 = _129 * NORMAL.y;
    float _132 = _129 * NORMAL.z;
    vec4 _151 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _157 = _151.x * cbMtdParam._m0[9u].x;
    float _158 = _151.y * cbMtdParam._m0[9u].y;
    float _159 = _151.z * cbMtdParam._m0[9u].z;
    vec4 _196 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _209 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _429 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _211 = isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0));
    float _219 = (((_211 * _211) * (3.0 - (_211 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _223 = inversesqrt(dot(vec3(_130, _131, _132), vec3(_130, _131, _132)));
    float _440 = isnan(0.0) ? _157 : (isnan(_157) ? 0.0 : max(_157, 0.0));
    float _224 = isnan(1.0) ? _440 : (isnan(_440) ? 1.0 : min(_440, 1.0));
    float _451 = isnan(0.0) ? _158 : (isnan(_158) ? 0.0 : max(_158, 0.0));
    float _225 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
    float _462 = isnan(0.0) ? _159 : (isnan(_159) ? 0.0 : max(_159, 0.0));
    float _226 = isnan(1.0) ? _462 : (isnan(_462) ? 1.0 : min(_462, 1.0));
    uint _228 = uint(roundEven(NORMAL.w));
    vec4 _233 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _235 = _233.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _300 = (cbMatDynParam._m0[5u].x * TEXCOORD_8) + cbMatDynParam._m0[5u].y;
        float _473 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
        float _301 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        float _305 = (cbMatDynParam._m0[5u].z * TEXCOORD_8) + cbMatDynParam._m0[5u].w;
        float _484 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0))) - _301)) + _301) < ((_235 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _334;
    uint _255;
    vec4 _259;
    float _260;
    float _261;
    float _262;
    float _266;
    float _267;
    float _268;
    float _271;
    float _275;
    vec4 _279;
    float _281;
    float _282;
    bool _293;
    for (;;)
    {
        _255 = _228 * 13u;
        _259 = cbInstanceData._m0[(_255 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        _260 = _259.x;
        _261 = _259.y;
        _262 = _259.z;
        float _263 = (cbMtdParam._m0[0u].x * _224) * _260;
        float _264 = (cbMtdParam._m0[0u].y * _225) * _261;
        float _265 = (cbMtdParam._m0[0u].z * _226) * _262;
        float _495 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
        _266 = isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0));
        float _506 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
        _267 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        float _517 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
        _268 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _271 = cbMtdParam._m0[2u].w;
        _275 = cbInstanceData._m0[_255 + 6u].w;
        float _276 = _235 + (-0.5);
        _279 = cbMtdParam._m0[1u];
        _281 = _279.y * _276;
        _282 = _276 * 0.999000012874603271484375;
        _293 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_293)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _282) < 0.5)
            {
                _334 = true;
                break;
            }
        }
        if ((_259.w < 1.0) && ((_259.w + _282) < 0.5))
        {
            _334 = true;
            break;
        }
        if ((_281 + 1.0) < _279.x)
        {
            _334 = true;
            break;
        }
        _334 = false;
        break;
    }
    if (_334)
    {
        discard_state = true;
    }
    float _380;
    float _381;
    float _382;
    float _383;
    if (cbMtdParam._m0[1u].z != 0.0)
    {
        _380 = _275;
        _381 = _275;
        _382 = _275;
        _383 = _275;
    }
    else
    {
        _380 = _271;
        _381 = 0.0;
        _382 = float(floatBitsToUint(cbInstanceData._m0[_255 + 5u]).x) * 0.0039215688593685626983642578125;
        _383 = TEXCOORD.z;
    }
    SV_Target.x = ((_130 * 0.5) * _223) + 0.500488758087158203125;
    SV_Target.y = ((_131 * 0.5) * _223) + 0.500488758087158203125;
    SV_Target.z = ((_132 * 0.5) * _223) + 0.500488758087158203125;
    SV_Target.w = _381;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _383;
    SV_Target_2.x = _266;
    SV_Target_2.y = _267;
    SV_Target_2.z = _268;
    SV_Target_2.w = _382;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _381;
    SV_Target_4.x = ((((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _196.x) * _219) * _260) * cbSceneParam._m0[72u].z;
    SV_Target_4.y = ((((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _196.y) * _219) * _261) * cbSceneParam._m0[72u].z;
    SV_Target_4.z = ((((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _196.z) * _219) * _262) * cbSceneParam._m0[72u].z;
    SV_Target_4.w = _380;
    discard_exit();
}


