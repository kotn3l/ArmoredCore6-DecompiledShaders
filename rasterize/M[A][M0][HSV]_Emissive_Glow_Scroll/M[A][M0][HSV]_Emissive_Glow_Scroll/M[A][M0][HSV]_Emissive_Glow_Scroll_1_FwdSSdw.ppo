#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _746;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _166 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _167 = _166 * NORMAL.x;
    float _168 = _166 * NORMAL.y;
    float _169 = _166 * NORMAL.z;
    vec4 _188 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _188.x * cbMtdParam._m0[9u].x;
    float _195 = _188.y * cbMtdParam._m0[9u].y;
    float _196 = _188.z * cbMtdParam._m0[9u].z;
    vec4 _218 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _2922 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _236 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
    float _244 = (((_236 * _236) * (3.0 - (_236 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _248 = inversesqrt(dot(vec3(_167, _168, _169), vec3(_167, _168, _169)));
    float _249 = _248 * _167;
    float _250 = _248 * _168;
    float _251 = _248 * _169;
    float _2933 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2944 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _2955 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _270 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _311 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _321 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _311);
    float _322 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _311);
    float _323 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _311);
    float _327 = inversesqrt(dot(vec3(_321, _322, _323), vec3(_321, _322, _323)));
    float _328 = _321 * _327;
    float _329 = _322 * _327;
    float _330 = _323 * _327;
    float _336 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _337 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _358 = fma(_251, cbSceneParam._m0[5u].z, fma(_250, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _249));
    float _361 = fma(_251, cbSceneParam._m0[6u].z, fma(_250, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _249));
    float _364 = fma(_251, cbSceneParam._m0[7u].z, fma(_250, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _249));
    uint _377 = uint(roundEven(NORMAL.w)) * 13u;
    uint _379 = _377 + 9u;
    uint _380 = _379 + uint(cbMatDynParam._m0[0u].w);
    float _386 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0)))) * cbInstanceData._m0[_380].x;
    float _387 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0)))) * cbInstanceData._m0[_380].y;
    float _388 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0)))) * cbInstanceData._m0[_380].z;
    float _2966 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
    float _2977 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _2977 : (isnan(_2977) ? 1.0 : min(_2977, 1.0));
    float _2988 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _2988 : (isnan(_2988) ? 1.0 : min(_2988, 1.0));
    vec4 _400 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _336, cbSceneParam._m0[86u].y * _337));
    float _403 = _400.x * TEXCOORD.z;
    float _404 = dot(vec3(_249, _250, _251), vec3(_328, _329, _330));
    float _407 = _404 * 2.0;
    float _411 = (_407 * _249) - _328;
    float _412 = (_407 * _250) - _329;
    float _413 = (_407 * _251) - _330;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _745;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _470 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _474 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _478 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _503 = _435 + _249;
        float _504 = _439 + _250;
        float _505 = _443 + _251;
        float _515 = fma(_505, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503)) - _470;
        float _516 = fma(_505, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503)) - _474;
        float _517 = fma(_505, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503)) - _478;
        float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
        float _534 = ((_521 * _515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_521 * _516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_521 * _517) / cbModelParam._m0[34u].z) + ((((((_478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        float _573 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_539.x + (-0.5));
        float _575 = _573 * (_539.y + (-0.5));
        float _576 = _573 * (_539.z + (-0.5));
        float _583 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_546.x + (-0.5));
        float _585 = _583 * (_546.y + (-0.5));
        float _586 = _583 * (_546.z + (-0.5));
        float _593 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_553.x + (-0.5));
        float _595 = _593 * (_553.y + (-0.5));
        float _596 = _593 * (_553.z + (-0.5));
        float _603 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_560.x + (-0.5));
        float _605 = _603 * (_560.y + (-0.5));
        float _606 = _603 * (_560.z + (-0.5));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = _574 * 0.5;
        float _611 = _584 * 0.5;
        float _612 = _594 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _627 = (dot(vec3(_249, _250, _251), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _3014 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _637 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3025 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _3036 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0))) * (_639 + 1.0))) + _644) * _607;
        float _654 = _575 * 0.5;
        float _655 = _585 * 0.5;
        float _656 = _595 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_249, _250, _251), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3047 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3058 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3069 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0))) * (_681 + 1.0))) + _686) * _608;
        float _696 = _576 * 0.5;
        float _697 = _586 * 0.5;
        float _698 = _596 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(_249, _250, _251), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3080 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3091 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3102 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0))) * (_723 + 1.0))) + _728) * _609;
        _745 = _576;
        _747 = _575;
        _748 = _574;
        _749 = _586;
        _750 = _585;
        _751 = _584;
        _752 = _596;
        _753 = _595;
        _754 = _594;
        _755 = _609;
        _756 = _608;
        _757 = _607;
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
    }
    else
    {
        _745 = _746;
        _747 = _746;
        _748 = _746;
        _749 = _746;
        _750 = _746;
        _751 = _746;
        _752 = _746;
        _753 = _746;
        _754 = _746;
        _755 = _746;
        _756 = _746;
        _757 = _746;
        _758 = 0.0;
        _759 = 0.0;
        _760 = 0.0;
    }
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _786 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _790 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _794 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _817 = _435 + _249;
        float _818 = _439 + _250;
        float _819 = _443 + _251;
        float _829 = fma(_819, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817)) - _786;
        float _830 = fma(_819, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817)) - _790;
        float _831 = fma(_819, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817)) - _794;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_786 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_790 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[35u].z) + ((((((_794 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _885 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_852.x + (-0.5));
        float _887 = _885 * (_852.y + (-0.5));
        float _888 = _885 * (_852.z + (-0.5));
        float _895 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_859.x + (-0.5));
        float _897 = _895 * (_859.y + (-0.5));
        float _898 = _895 * (_859.z + (-0.5));
        float _905 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_866.x + (-0.5));
        float _907 = _905 * (_866.y + (-0.5));
        float _908 = _905 * (_866.z + (-0.5));
        float _915 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_873.x + (-0.5));
        float _917 = _915 * (_873.y + (-0.5));
        float _918 = _915 * (_873.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_249, _250, _251), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3165 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_949 + 1.0))) + _954) * _919;
        float _964 = _887 * 0.5;
        float _965 = _897 * 0.5;
        float _966 = _907 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_249, _250, _251), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3198 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_991 + 1.0))) + _996) * _920;
        float _1006 = _888 * 0.5;
        float _1007 = _898 * 0.5;
        float _1008 = _908 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_249, _250, _251), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3209 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3220 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3231 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) * (_1033 + 1.0))) + _1038) * _921;
        _1055 = _888;
        _1056 = _887;
        _1057 = _886;
        _1058 = _898;
        _1059 = _897;
        _1060 = _896;
        _1061 = _908;
        _1062 = _907;
        _1063 = _906;
        _1064 = _921;
        _1065 = _920;
        _1066 = _919;
        _1067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _746;
        _1056 = _746;
        _1057 = _746;
        _1058 = _746;
        _1059 = _746;
        _1060 = _746;
        _1061 = _746;
        _1062 = _746;
        _1063 = _746;
        _1064 = _746;
        _1065 = _746;
        _1066 = _746;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1079 = (cbModelParam._m0[1u].x * (_1067 - _758)) + _758;
    float _1080 = (cbModelParam._m0[1u].x * (_1068 - _759)) + _759;
    float _1081 = (cbModelParam._m0[1u].x * (_1069 - _760)) + _760;
    float _1102 = fma(_1081, cbSceneParam._m0[89u].z, fma(_1080, cbSceneParam._m0[89u].y, _1079 * cbSceneParam._m0[89u].x));
    float _1105 = fma(_1081, cbSceneParam._m0[90u].z, fma(_1080, cbSceneParam._m0[90u].y, _1079 * cbSceneParam._m0[90u].x));
    float _1108 = fma(_1081, cbSceneParam._m0[91u].z, fma(_1080, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1079));
    float _1123 = _411 * 0.5;
    float _1124 = _412 * 0.5;
    float _1125 = _413 * 0.5;
    float _1126 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1057, _1060, _1063, _1066));
    float _1129 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1056, _1059, _1062, _1065));
    float _1132 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_1055, _1058, _1061, _1064));
    float _1166;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1139 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_745, _749, _752, _755));
        float _1143 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_747, _750, _753, _756));
        float _1147 = dot(vec4(_1123, _1124, _1125, 1.0), vec4(_748, _751, _754, _757));
        float _1154 = dot(vec4(cbModelParam._m0[39u]), vec4(_1123, _1124, _1125, 1.0));
        _1166 = dot(vec3(isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)), isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)), isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1154) ? 0.0 : (isnan(0.0) ? _1154 : max(0.0, _1154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1166 = 1.0;
    }
    float _1177;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1168 = dot(vec4(cbModelParam._m0[40u]), vec4(_1123, _1124, _1125, 1.0));
        _1177 = dot(vec3(isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)), isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1168) ? 0.0 : (isnan(0.0) ? _1168 : max(0.0, _1168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1177 = 1.0;
    }
    float _1181 = (_1177 * cbModelParam._m0[1u].x) + (_1166 * (1.0 - cbModelParam._m0[1u].x));
    float _1190 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1271;
    float _1273;
    float _1275;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1238 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1242 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1246 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1249 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1252 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1255 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1281;
        if (_1249 > 0.0)
        {
            _1281 = abs((1.0 - _1238) / _1249);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1249 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1238 + 1.0) / _1249);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1281 = frontier_phi_14_12_ladder;
        }
        float _1507;
        if (_1252 > 0.0)
        {
            _1507 = abs((1.0 - _1242) / _1252);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1252 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1242 + 1.0) / _1252);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1507 = frontier_phi_23_19_ladder;
        }
        float _1699;
        if (_1255 > 0.0)
        {
            _1699 = abs((1.0 - _1246) / _1255);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1255 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1246 + 1.0) / _1255);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1699 = frontier_phi_35_30_ladder;
        }
        float _1701 = isnan(_1507) ? _1281 : (isnan(_1281) ? _1507 : min(_1281, _1507));
        float _1702 = isnan(_1699) ? _1701 : (isnan(_1701) ? _1699 : min(_1701, _1699));
        float _1706 = (_1702 * _1249) + _1238;
        float _1707 = (_1702 * _1252) + _1242;
        float _1708 = (_1702 * _1255) + _1246;
        float _1709 = _1702 * 9.9999997473787516355514526367188e-05;
        float _1711 = (-1.0) - _1709;
        float _1713 = _1709 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1708 > _1713) || ((_1708 < _1711) || ((_1707 > _1713) || ((_1707 < _1711) || ((_1706 < _1711) || (_1706 > _1713))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1805 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1708, cbModelParam._m0[9u].z, fma(_1707, cbModelParam._m0[9u].y, _1706 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1708, cbModelParam._m0[10u].z, fma(_1707, cbModelParam._m0[10u].y, _1706 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1708, cbModelParam._m0[11u].z, fma(_1707, cbModelParam._m0[11u].y, _1706 * cbModelParam._m0[11u].x))), _1190);
            frontier_phi_13_35_ladder = _1805.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1805.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1805.x * cbModelParam._m0[1u].y;
        }
        _1271 = frontier_phi_13_35_ladder_2;
        _1273 = frontier_phi_13_35_ladder_1;
        _1275 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1259 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1190);
        _1271 = _1259.x * cbModelParam._m0[1u].y;
        _1273 = _1259.y * cbModelParam._m0[1u].y;
        _1275 = _1259.z * cbModelParam._m0[1u].y;
    }
    float _1278 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1334 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1338 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1342 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1345 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1348 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1351 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1512;
        if (_1345 > 0.0)
        {
            _1512 = abs((1.0 - _1334) / _1345);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1334 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1512 = frontier_phi_25_21_ladder;
        }
        float _1726;
        if (_1348 > 0.0)
        {
            _1726 = abs((1.0 - _1338) / _1348);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1338 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1726 = frontier_phi_37_32_ladder;
        }
        float _1877;
        if (_1351 > 0.0)
        {
            _1877 = abs((1.0 - _1342) / _1351);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1342 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _1877 = frontier_phi_46_43_ladder;
        }
        float _1879 = isnan(_1726) ? _1512 : (isnan(_1512) ? _1726 : min(_1512, _1726));
        float _1880 = isnan(_1877) ? _1879 : (isnan(_1879) ? _1877 : min(_1879, _1877));
        float _1884 = (_1880 * _1345) + _1334;
        float _1885 = (_1880 * _1348) + _1338;
        float _1886 = (_1880 * _1351) + _1342;
        float _1887 = _1880 * 9.9999997473787516355514526367188e-05;
        float _1888 = (-1.0) - _1887;
        float _1890 = _1887 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1886 > _1890) || ((_1886 < _1888) || ((_1885 > _1890) || ((_1885 < _1888) || ((_1884 < _1888) || (_1884 > _1890))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1886, cbModelParam._m0[17u].z, fma(_1885, cbModelParam._m0[17u].y, _1884 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1886, cbModelParam._m0[18u].z, fma(_1885, cbModelParam._m0[18u].y, _1884 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1886, cbModelParam._m0[19u].z, fma(_1885, cbModelParam._m0[19u].y, _1884 * cbModelParam._m0[19u].x))), _1278);
            frontier_phi_22_46_ladder = _2123.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2123.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2123.x * cbModelParam._m0[1u].z;
        }
        _1370 = frontier_phi_22_46_ladder_2;
        _1372 = frontier_phi_22_46_ladder_1;
        _1374 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1278);
        _1370 = _1354.x * cbModelParam._m0[1u].z;
        _1372 = _1354.y * cbModelParam._m0[1u].z;
        _1374 = _1354.z * cbModelParam._m0[1u].z;
    }
    float _1386 = _403 * 0.01200000010430812835693359375;
    float _1388 = _1386 * ((cbModelParam._m0[1u].w * (_1370 - _1271)) + _1271);
    float _1389 = _1386 * ((cbModelParam._m0[1u].w * (_1372 - _1273)) + _1273);
    float _1390 = _1386 * ((cbModelParam._m0[1u].w * (_1374 - _1275)) + _1275);
    float _1393 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, _1388 * cbSceneParam._m0[91u].x));
    vec4 _1407 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_336, _337));
    float _1409 = _1407.w;
    float _1421 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1409);
    float _1422 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1409);
    float _1423 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1409);
    uvec4 _1427 = floatBitsToUint(cbInstanceData._m0[_377 + 5u]);
    uint _1429 = _1427.x * 14u;
    uint _1430 = _1429 + 13u;
    float _1437 = _403 + (-1.0);
    float _1442 = (cbLight._m0[_1430].x * _1437) + 1.0;
    float _1443 = (cbLight._m0[_1430].y * _1437) + 1.0;
    float _1444 = (cbLight._m0[_1430].z * _1437) + 1.0;
    float _1445 = (cbLight._m0[_1430].w * _1437) + 1.0;
    uint _1446 = _1429 + 5u;
    float _1452 = isnan(1.0) ? _1443 : (isnan(_1443) ? 1.0 : min(_1443, 1.0));
    uint _1456 = _1429 + 4u;
    float _1466 = isnan(1.0) ? _1442 : (isnan(_1442) ? 1.0 : min(_1442, 1.0));
    uint _1470 = _1429 | 1u;
    float _1481 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_249, _250, _251));
    float _1484 = dot(vec3(cbLight._m0[_1470].xyz), vec3(_249, _250, _251));
    float _3367 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
    float _3378 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    float _1489 = (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.3183098733425140380859375;
    float _1491 = (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.3183098733425140380859375;
    float _1498 = ((cbLight._m0[_1446].x * _1452) * _1491) + (((cbLight._m0[_1456].x * _1421) * _1466) * _1489);
    float _1499 = ((_1452 * cbLight._m0[_1446].y) * _1491) + (((cbLight._m0[_1456].y * _1422) * _1466) * _1489);
    float _1500 = ((_1452 * cbLight._m0[_1446].z) * _1491) + (((cbLight._m0[_1456].z * _1423) * _1466) * _1489);
    uvec4 _1504 = floatBitsToUint(cbLight._m0[_1429 + 12u]);
    bool _1506 = _1504.x == 0u;
    float _1517;
    float _1519;
    float _1521;
    if (_1506)
    {
        _1517 = _1498;
        _1519 = _1499;
        _1521 = _1500;
    }
    else
    {
        uint _1525 = _1429 + 6u;
        float _1541 = (dot(vec3(cbLight._m0[_1429 + 2u].xyz), vec3(_249, _250, _251)) * 0.5) + 0.5;
        float _1542 = _1541 * _1541;
        float _3389 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1544 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1517 = (((cbLight._m0[_1525].x * 0.3183098733425140380859375) * _1543) * _1544) + _1498;
        _1519 = (((cbLight._m0[_1525].y * 0.3183098733425140380859375) * _1543) * _1544) + _1499;
        _1521 = (((cbLight._m0[_1525].z * 0.3183098733425140380859375) * _1543) * _1544) + _1500;
    }
    bool _1524 = _1504.y == 0u;
    float _1562;
    float _1564;
    float _1566;
    if (_1524)
    {
        _1562 = _1517;
        _1564 = _1519;
        _1566 = _1521;
    }
    else
    {
        uint _1670 = _1429 + 7u;
        float _1686 = (dot(vec3(cbLight._m0[_1429 + 3u].xyz), vec3(_249, _250, _251)) * 0.5) + 0.5;
        float _1687 = _1686 * _1686;
        float _3405 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1689 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1562 = (((cbLight._m0[_1670].x * 0.3183098733425140380859375) * _1688) * _1689) + _1517;
        _1564 = (((cbLight._m0[_1670].y * 0.3183098733425140380859375) * _1688) * _1689) + _1519;
        _1566 = (((cbLight._m0[_1670].z * 0.3183098733425140380859375) * _1688) * _1689) + _1521;
    }
    uint _1568 = _1429 + 8u;
    float _1574 = cbLight._m0[_1429].x + _328;
    float _1575 = cbLight._m0[_1429].y + _329;
    float _1576 = cbLight._m0[_1429].z + _330;
    float _1580 = inversesqrt(dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576)));
    float _1584 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1429].xyz));
    float _3421 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1587 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _1588 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _1589 = dot(vec3(cbLight._m0[_1429].xyz), vec3(_1574 * _1580, _1575 * _1580, _1576 * _1580));
    float _3443 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1600 = (exp2(log2(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1606 = (0.5 / ((_1587 + 9.9999999392252902907785028219223e-09) + _1588)) * _1587;
    float _3454 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
    float _1608 = (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.31831014156341552734375;
    uint _1622 = _1429 + 9u;
    float _1628 = cbLight._m0[_1470].x + _328;
    float _1629 = cbLight._m0[_1470].y + _329;
    float _1630 = cbLight._m0[_1470].z + _330;
    float _1634 = inversesqrt(dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630)));
    float _1638 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1470].xyz));
    float _3465 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1641 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _1642 = dot(vec3(cbLight._m0[_1470].xyz), vec3(_1628 * _1634, _1629 * _1634, _1630 * _1634));
    float _3476 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _1651 = (exp2(log2(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1655 = (0.5 / ((_1641 + 9.9999999392252902907785028219223e-09) + _1588)) * _1641;
    float _3487 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1657 = (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.31831014156341552734375;
    float _1667 = (((_1651 * cbLight._m0[_1622].x) * _1657) * _1452) + ((((cbLight._m0[_1568].x * _1421) * _1600) * _1608) * _1466);
    float _1668 = (((_1651 * cbLight._m0[_1622].y) * _1657) * _1452) + ((((cbLight._m0[_1568].y * _1422) * _1600) * _1608) * _1466);
    float _1669 = (((_1651 * cbLight._m0[_1622].z) * _1657) * _1452) + ((((cbLight._m0[_1568].z * _1423) * _1600) * _1608) * _1466);
    float _1731;
    float _1733;
    float _1735;
    if (_1506)
    {
        _1731 = _1667;
        _1733 = _1668;
        _1735 = _1669;
    }
    else
    {
        uint _1737 = _1429 + 10u;
        uint _1743 = _1429 + 2u;
        float _1749 = cbLight._m0[_1743].x + _328;
        float _1750 = cbLight._m0[_1743].y + _329;
        float _1751 = cbLight._m0[_1743].z + _330;
        float _1755 = inversesqrt(dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751)));
        float _1759 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1743].xyz));
        float _3498 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1762 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1763 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1749 * _1755, _1750 * _1755, _1751 * _1755));
        float _3509 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = (exp2(log2(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1776 = (0.5 / ((_1762 + 9.9999999392252902907785028219223e-09) + _1588)) * _1762;
        float _3520 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1778 = (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.31831014156341552734375;
        float _1779 = isnan(1.0) ? _1444 : (isnan(_1444) ? 1.0 : min(_1444, 1.0));
        _1731 = (((_1772 * cbLight._m0[_1737].x) * _1778) * _1779) + _1667;
        _1733 = (((_1772 * cbLight._m0[_1737].y) * _1778) * _1779) + _1668;
        _1735 = (((_1772 * cbLight._m0[_1737].z) * _1778) * _1779) + _1669;
    }
    float _1814;
    float _1816;
    float _1818;
    if (_1524)
    {
        _1814 = _1731;
        _1816 = _1733;
        _1818 = _1735;
    }
    else
    {
        uint _1825 = _1429 + 11u;
        uint _1831 = _1429 + 3u;
        float _1837 = cbLight._m0[_1831].x + _328;
        float _1838 = cbLight._m0[_1831].y + _329;
        float _1839 = cbLight._m0[_1831].z + _330;
        float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
        float _1847 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1831].xyz));
        float _3536 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1850 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1851 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1837 * _1843, _1838 * _1843, _1839 * _1843));
        float _3547 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = (exp2(log2(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1864 = (0.5 / ((_1850 + 9.9999999392252902907785028219223e-09) + _1588)) * _1850;
        float _3558 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1866 = (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * 0.31831014156341552734375;
        float _1867 = isnan(1.0) ? _1445 : (isnan(_1445) ? 1.0 : min(_1445, 1.0));
        _1814 = (((_1860 * cbLight._m0[_1825].x) * _1866) * _1867) + _1731;
        _1816 = (((_1860 * cbLight._m0[_1825].y) * _1866) * _1867) + _1733;
        _1818 = (((_1860 * cbLight._m0[_1825].z) * _1866) * _1867) + _1735;
    }
    float _2002;
    float _2004;
    float _2006;
    float _2008;
    float _2010;
    float _2012;
    if (_1427.y == 0u)
    {
        float _1942 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1942;
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1942;
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1942;
        uvec4 _1957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1958 = _1957.x;
        uint _1969 = uint((float(_1957.y) * floor(float(uint(cbSceneParam._m0[85u].y * _337) / _1958))) + floor(float(uint(cbSceneParam._m0[85u].x * _336) / _1958)));
        float _1979 = (log2(_1945 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1980 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        uint _1983 = uint(isnan(14.0) ? _1980 : (isnan(_1980) ? 14.0 : min(_1980, 14.0)));
        uvec4 _1988 = texelFetch(g_lightClusterGridBuffer, int(((_1983 << 2u) + (_1969 << 6u)) >> 2u));
        uint _1989 = _1988.x;
        uint _1990 = _1957.z;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        float _2138;
        if (((((1u << ((_1990 >> 4u) & 15u)) + 4294967295u) & _1989) == 0u) || ((_1990 & 240u) == 0u))
        {
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
            _2138 = 0.0;
        }
        else
        {
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2139;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            uint _2285 = 0u;
            uint _2294;
            bool _2295;
            for (;;)
            {
                _2294 = texelFetch(g_lightClassification, int((((_1983 << 5u) + (_1969 << 9u)) + (_2285 << 2u)) >> 2u)).x;
                _2295 = _2294 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2295)
                {
                    frontier_phi_61_pred = _2279;
                    frontier_phi_61_pred_1 = _2284;
                    frontier_phi_61_pred_2 = _2283;
                    frontier_phi_61_pred_3 = _2282;
                    frontier_phi_61_pred_4 = _2281;
                    frontier_phi_61_pred_5 = _2280;
                }
                else
                {
                    float _2403;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    uint _2409;
                    _2403 = _2279;
                    _2404 = _2280;
                    _2405 = _2281;
                    _2406 = _2282;
                    _2407 = _2283;
                    _2408 = _2284;
                    _2409 = _2294;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    float _2339;
                    float _2340;
                    for (;;)
                    {
                        uint _2413 = uint(findLSB(_2409)) + (_2285 << 5u);
                        uint _2410 = (_2409 + 4294967295u) & _2409;
                        uint _2415 = _2413 * 48u;
                        vec4 _2429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2415)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2415 + 3u)).x));
                        uint _2435 = (_2413 * 48u) + 4u;
                        vec4 _2448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2454 = (_2413 * 48u) + 8u;
                        vec3 _2465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x));
                        float _2469 = _2429.x - _1943;
                        float _2470 = _2429.y - _1944;
                        float _2471 = _2429.z - _1945;
                        float _2472 = dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471));
                        float _2475 = inversesqrt(_2472);
                        float _2484 = 1.0 - (_2472 * _2429.w);
                        float _3584 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                        float _2485 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
                        float _2486 = sqrt(_2472) * _2448.w;
                        float _2489 = 1.39999997615814208984375 / (_2486 + 1.39999997615814208984375);
                        float _2490 = _2489 * _2489;
                        float _2493 = ((1.0 - _2490) * dot(vec3(_358, _361, _364), vec3(_2475 * _2469, _2475 * _2470, _2475 * _2471))) + _2490;
                        float _2496 = _2486 * _2486;
                        float _2500 = ((isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0))) * _2485) / ((_2496 * 0.699999988079071044921875) + 1.0);
                        float _2504 = (-0.0) - _1943;
                        float _2505 = (-0.0) - _1944;
                        float _2506 = (-0.0) - _1945;
                        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
                        float _2514 = dot(vec3(_358, _361, _364), vec3(_2510 * _2504, _2510 * _2505, _2510 * _2506));
                        float _3600 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
                        float _3611 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
                        float _2518 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                        float _2522 = (0.5 / (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) + 9.9999999392252902907785028219223e-09) + _2518)) * _2518;
                        float _3622 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
                        float _2531 = (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 3.1415927410125732421875) / ((_2496 * 2.1991131305694580078125) + 3.141590118408203125)) * _2485;
                        _2338 = (_2500 * _2448.x) + _2406;
                        _2339 = (_2500 * _2448.y) + _2407;
                        _2340 = (_2500 * _2448.z) + _2408;
                        _2335 = (_2531 * _2465.x) + _2403;
                        _2336 = (_2531 * _2465.y) + _2404;
                        _2337 = (_2531 * _2465.z) + _2405;
                        if (_2410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2403 = _2335;
                            _2404 = _2336;
                            _2405 = _2337;
                            _2406 = _2338;
                            _2407 = _2339;
                            _2408 = _2340;
                            _2409 = _2410;
                        }
                    }
                    frontier_phi_61_pred = _2335;
                    frontier_phi_61_pred_1 = _2340;
                    frontier_phi_61_pred_2 = _2339;
                    frontier_phi_61_pred_3 = _2338;
                    frontier_phi_61_pred_4 = _2337;
                    frontier_phi_61_pred_5 = _2336;
                }
                _2129 = frontier_phi_61_pred;
                _2139 = frontier_phi_61_pred_1;
                _2137 = frontier_phi_61_pred_2;
                _2135 = frontier_phi_61_pred_3;
                _2133 = frontier_phi_61_pred_4;
                _2131 = frontier_phi_61_pred_5;
                uint _2286 = _2285 + 1u;
                if (_2286 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2279 = _2129;
                    _2280 = _2131;
                    _2281 = _2133;
                    _2282 = _2135;
                    _2283 = _2137;
                    _2284 = _2139;
                    _2285 = _2286;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
            _2138 = _2139;
        }
        uvec4 _2142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2143 = _2142.z;
        uint _2145 = (_2143 >> 8u) & 15u;
        float _2250;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        if (((4294967295u << _2145) & _1989) == 0u)
        {
            _2250 = _2128;
            _2252 = _2130;
            _2254 = _2132;
            _2256 = _2134;
            _2258 = _2136;
            _2260 = _2138;
        }
        else
        {
            float _2275 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2145 < ((_2143 >> 12u) & 15u))
            {
                float _2251;
                float _2253;
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2386 = _2128;
                float _2387 = _2130;
                float _2388 = _2132;
                float _2389 = _2134;
                float _2390 = _2136;
                float _2391 = _2138;
                uint _2392 = _2145;
                uint _2401;
                bool _2402;
                for (;;)
                {
                    _2401 = texelFetch(g_lightClassification, int((((_1983 << 5u) + (_1969 << 9u)) + (_2392 << 2u)) >> 2u)).x;
                    _2402 = _2401 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2402)
                    {
                        frontier_phi_67_pred = _2389;
                        frontier_phi_67_pred_1 = _2390;
                        frontier_phi_67_pred_2 = _2391;
                        frontier_phi_67_pred_3 = _2388;
                        frontier_phi_67_pred_4 = _2387;
                        frontier_phi_67_pred_5 = _2386;
                    }
                    else
                    {
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2540;
                        float _2541;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2549 = _2386;
                        float _2550 = _2387;
                        float _2551 = _2388;
                        float _2552 = _2389;
                        float _2553 = _2390;
                        float _2554 = _2391;
                        uint _2555 = _2401;
                        uint _2556;
                        vec4 _2581;
                        float _2582;
                        vec4 _2597;
                        vec3 _2609;
                        vec4 _2625;
                        vec4 _2641;
                        float _2688;
                        bool _2689;
                        for (;;)
                        {
                            uint _2566 = ((_2392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2555));
                            _2556 = (_2555 + 4294967295u) & _2555;
                            uint _2568 = _2566 * 40u;
                            _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            _2582 = _2581.w;
                            uint _2584 = (_2566 * 40u) + 4u;
                            _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            uint _2599 = (_2566 * 40u) + 8u;
                            _2609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2599 + 2u)).x));
                            uint _2612 = (_2566 * 40u) + 16u;
                            _2625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2612 + 3u)).x));
                            uint _2628 = (_2566 * 40u) + 20u;
                            _2641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2628 + 3u)).x));
                            uint _2644 = (_2566 * 40u) + 24u;
                            vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            uint _2663 = (_2566 * 40u) + 28u;
                            vec4 _2676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 3u)).x));
                            _2688 = fma(_1945, _2676.z, fma(_1944, _2676.y, _2676.x * _1943)) + _2676.w;
                            _2689 = !((fma(_1945, _2657.z, fma(_1944, _2657.y, _2657.x * _1943)) + _2657.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2689)
                            {
                                float _2716 = _2581.x - _1943;
                                float _2717 = _2581.y - _1944;
                                float _2718 = _2581.z - _1945;
                                float _2719 = dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718));
                                float _2722 = inversesqrt(_2719);
                                float _2723 = _2722 * _2716;
                                float _2724 = _2722 * _2717;
                                float _2725 = _2722 * _2718;
                                float _2729 = 1.0 - (_2719 / (_2582 * _2582));
                                float _3633 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
                                float _2730 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
                                float _2734 = sqrt(_2719) * _2597.w;
                                float _2736 = 1.39999997615814208984375 / (_2734 + 1.39999997615814208984375);
                                float _2737 = _2736 * _2736;
                                float _2738 = 1.0 - _2737;
                                float _2740 = (_2738 * dot(vec3(_2723, _2724, _2725), vec3(_358, _361, _364))) + _2737;
                                float _2743 = _2734 * _2734;
                                float _2747 = (fma(_1945, _2625.z, fma(_1944, _2625.y, _2625.x * _1943)) + _2625.w) / _2688;
                                float _2748 = (fma(_1945, _2641.z, fma(_1944, _2641.y, _2641.x * _1943)) + _2641.w) / _2688;
                                float _2752 = 1.0 - dot(vec2(_2747, _2748), vec2(_2747, _2748));
                                float _3649 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                                float _2753 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                                float _2754 = _2753 * (((isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0))) * _2730) / ((_2743 * 0.699999988079071044921875) + 1.0));
                                float _2764 = dot(vec3(_358, _361, _364), vec3((-0.0) - (_1943 * _2275), (-0.0) - (_1944 * _2275), (-0.0) - (_1945 * _2275)));
                                float _3660 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                                float _2772 = (_2738 * dot(vec3(_358, _361, _364), vec3(_2723, _2724, _2725))) + _2737;
                                float _3671 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2773 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
                                float _2777 = (0.5 / (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) + 9.9999999392252902907785028219223e-09) + _2773)) * _2773;
                                float _3682 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                                float _2784 = (_2753 * _2730) * (((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 3.1415927410125732421875) / ((_2743 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2784 * _2609.x;
                                frontier_phi_73_pred_1 = _2784 * _2609.y;
                                frontier_phi_73_pred_2 = _2754 * _2597.z;
                                frontier_phi_73_pred_3 = _2754 * _2597.y;
                                frontier_phi_73_pred_4 = _2754 * _2597.x;
                                frontier_phi_73_pred_5 = _2784 * _2609.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2788 = frontier_phi_73_pred;
                            _2789 = frontier_phi_73_pred_1;
                            _2793 = frontier_phi_73_pred_2;
                            _2792 = frontier_phi_73_pred_3;
                            _2791 = frontier_phi_73_pred_4;
                            _2790 = frontier_phi_73_pred_5;
                            _2539 = _2791 + _2552;
                            _2540 = _2792 + _2553;
                            _2541 = _2793 + _2554;
                            _2536 = _2788 + _2549;
                            _2537 = _2789 + _2550;
                            _2538 = _2790 + _2551;
                            if (_2556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2540;
                                _2554 = _2541;
                                _2555 = _2556;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2539;
                        frontier_phi_67_pred_1 = _2540;
                        frontier_phi_67_pred_2 = _2541;
                        frontier_phi_67_pred_3 = _2538;
                        frontier_phi_67_pred_4 = _2537;
                        frontier_phi_67_pred_5 = _2536;
                    }
                    _2257 = frontier_phi_67_pred;
                    _2259 = frontier_phi_67_pred_1;
                    _2261 = frontier_phi_67_pred_2;
                    _2255 = frontier_phi_67_pred_3;
                    _2253 = frontier_phi_67_pred_4;
                    _2251 = frontier_phi_67_pred_5;
                    uint _2393 = _2392 + 1u;
                    if (_2393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2386 = _2251;
                        _2387 = _2253;
                        _2388 = _2255;
                        _2389 = _2257;
                        _2390 = _2259;
                        _2391 = _2261;
                        _2392 = _2393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2259;
                frontier_phi_55_56_ladder_1 = _2261;
                frontier_phi_55_56_ladder_2 = _2257;
                frontier_phi_55_56_ladder_3 = _2255;
                frontier_phi_55_56_ladder_4 = _2253;
                frontier_phi_55_56_ladder_5 = _2251;
            }
            else
            {
                frontier_phi_55_56_ladder = _2136;
                frontier_phi_55_56_ladder_1 = _2138;
                frontier_phi_55_56_ladder_2 = _2134;
                frontier_phi_55_56_ladder_3 = _2132;
                frontier_phi_55_56_ladder_4 = _2130;
                frontier_phi_55_56_ladder_5 = _2128;
            }
            _2250 = frontier_phi_55_56_ladder_5;
            _2252 = frontier_phi_55_56_ladder_4;
            _2254 = frontier_phi_55_56_ladder_3;
            _2256 = frontier_phi_55_56_ladder_2;
            _2258 = frontier_phi_55_56_ladder;
            _2260 = frontier_phi_55_56_ladder_1;
        }
        float _2265 = isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0));
        _2002 = (_2265 * _2256) + _1562;
        _2004 = (_2265 * _2258) + _1564;
        _2006 = (_2265 * _2260) + _1566;
        _2008 = ((_2250 * 0.039999999105930328369140625) * _2265) + _1814;
        _2010 = ((_2252 * 0.039999999105930328369140625) * _2265) + _1816;
        _2012 = ((_2254 * 0.039999999105930328369140625) * _2265) + _1818;
    }
    else
    {
        _2002 = _1562;
        _2004 = _1564;
        _2006 = _1566;
        _2008 = _1814;
        _2010 = _1816;
        _2012 = _1818;
    }
    uint _2018 = _379 + uint(cbMatDynParam._m0[0u].w);
    float _2027 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _218.x) * _244) * cbInstanceData._m0[_2018].x;
    float _2031 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _218.y) * _244) * cbInstanceData._m0[_2018].y;
    float _2035 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _218.z) * _244) * cbInstanceData._m0[_2018].z;
    float _3698 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3709 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3720 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _2052 = (((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_2002 + ((isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))) * _403))) + ((_2008 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + _2027;
    float _2054 = (_2031 + ((_2010 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_2004 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _403)));
    float _2056 = (_2035 + ((_2012 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _1181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_2006 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _403)));
    float _3746 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2069 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    uint _2070 = _377 + 6u;
    float _2078 = _336 / cbSceneParam._m0[86u].x;
    float _2079 = _337 / cbSceneParam._m0[86u].y;
    vec4 _2093 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2078, _2079, (log2((isnan(cbSceneParam._m0[77u].w) ? _270 : (isnan(_270) ? cbSceneParam._m0[77u].w : min(_270, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2095 = _2093.x;
    float _2096 = _2093.y;
    float _2097 = _2093.z;
    float _2098 = _2093.w;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    if (_270 > cbSceneParam._m0[78u].w)
    {
        float _2153 = isnan(_270) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _270 : min(cbSceneParam._m0[80u].w, _270));
        float _2154 = _2153 / _270;
        float _2165 = _2154 * _321;
        float _2166 = _322 * _2154;
        float _2167 = (-0.0) - _2166;
        float _2169 = _2154 * _323;
        float _2171 = (cbSceneParam._m0[77u].w * _2167) / _2153;
        float _2172 = _2171 + cbSceneParam._m0[79u].w;
        float _2173 = cbSceneParam._m0[79u].w - _2166;
        float _2179 = sqrt(((_2165 * _2165) + (_2166 * _2166)) + (_2169 * _2169));
        float _2182 = (1.0 - (cbSceneParam._m0[77u].w / _2153)) * _2179;
        float _2187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2348;
        if (abs((_2167 - _2171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2348 = ((((_2172 > 0.0) ? exp2(_2187 * _2172) : (2.0 - exp2(_2189 * _2172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2182;
        }
        else
        {
            float _2308 = 1.0 / cbSceneParam._m0[80u].x;
            float _2309 = isnan(_2173) ? _2172 : (isnan(_2172) ? _2173 : max(_2172, _2173));
            float _2310 = isnan(_2173) ? _2172 : (isnan(_2172) ? _2173 : min(_2172, _2173));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            float _2320 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : min(_2310, 0.0));
            _2348 = ((abs(_2179 / _2167) * cbSceneParam._m0[80u].y) * ((((_2319 - _2320) * 2.0) - ((exp2(_2187 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0)))) - exp2(_2187 * (isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0))))) * _2308)) - ((exp2(_2189 * _2319) - exp2(_2189 * _2320)) * _2308))) + (_2182 * cbSceneParam._m0[80u].z);
        }
        vec4 _2350 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2078, _2079, 1.0), 0.0);
        float _2359 = exp2((_2348 * (-1.44269502162933349609375)) * (1.0 - _2350.w));
        float _2360 = log2(_2359);
        float _2376 = log2(_2098);
        _2191 = (exp2(_2376 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].x)) * _2350.x) / cbSceneParam._m0[78u].x)) + _2095;
        _2193 = (exp2(_2376 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].y)) * _2350.y) / cbSceneParam._m0[78u].y)) + _2096;
        _2195 = (exp2(_2376 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2360 * cbSceneParam._m0[78u].z)) * _2350.z) / cbSceneParam._m0[78u].z)) + _2097;
        _2197 = _2359 * _2098;
    }
    else
    {
        _2191 = _2095;
        _2193 = _2096;
        _2195 = _2097;
        _2197 = _2098;
    }
    float _2209 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2210 = _2209 == 3.0;
    float _2211 = log2(_2197);
    float _2215 = exp2(_2211 * cbSceneParam._m0[78u].x);
    float _2216 = exp2(_2211 * cbSceneParam._m0[78u].y);
    float _2217 = exp2(_2211 * cbSceneParam._m0[78u].z);
    float _2218 = _2215 * (isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)));
    float _2219 = _2216 * (isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)));
    float _2220 = _2217 * (isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)));
    float _2229 = (_2209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2229 * (_2210 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2191)));
    SV_Target.y = _2229 * (_2210 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2193)));
    SV_Target.z = _2229 * (_2210 ? _2220 : (_2220 + (cbSceneParam._m0[72u].w * _2195)));
    SV_Target.w = cbInstanceData._m0[_2070].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2027) * _2069) * _2215) * _2229;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2031) * _2069) * _2216) * _2229;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2035) * _2069) * _2217) * _2229;
    SV_Target_1.w = cbInstanceData._m0[_2070].w;
}


