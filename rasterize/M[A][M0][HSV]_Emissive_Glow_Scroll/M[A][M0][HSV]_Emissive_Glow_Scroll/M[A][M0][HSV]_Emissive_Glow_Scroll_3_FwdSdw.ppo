#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _759;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _168 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _169 = _168 * NORMAL.x;
    float _170 = _168 * NORMAL.y;
    float _171 = _168 * NORMAL.z;
    vec4 _190 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _190.x * cbMtdParam._m0[9u].x;
    float _197 = _190.y * cbMtdParam._m0[9u].y;
    float _198 = _190.z * cbMtdParam._m0[9u].z;
    vec4 _235 = texture(sampler2D(M_A_M0_HSV_Emissive_Glow_Scroll_snp_0_Texture2D_3, SS_DiffuseMap), vec2(((((cbMtdParam._m0[12u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.x) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, ((((cbMtdParam._m0[13u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[11u].y) + TEXCOORD.y) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _248 = abs((fract(cbMtdParam._m0[12u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3195 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _250 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _258 = (((_250 * _250) * (3.0 - (_250 * 2.0))) * cbMtdParam._m0[11u].w) - cbMtdParam._m0[11u].z;
    float _262 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _263 = _262 * _169;
    float _264 = _262 * _170;
    float _265 = _262 * _171;
    float _3206 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3217 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3228 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _284 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _325 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _335 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _325);
    float _336 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _325);
    float _337 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _325);
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _342 = _335 * _341;
    float _343 = _336 * _341;
    float _344 = _337 * _341;
    float _350 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _351 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _372 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _375 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _378 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _391 = uint(roundEven(NORMAL.w)) * 13u;
    uint _392 = _391 + 9u;
    uint _393 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _399 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0)))) * cbInstanceData._m0[_393].x;
    float _400 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0)))) * cbInstanceData._m0[_393].y;
    float _401 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0)))) * cbInstanceData._m0[_393].z;
    float _3239 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _402 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _3250 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _403 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
    float _3261 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    vec4 _413 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _350, cbSceneParam._m0[86u].y * _351));
    float _416 = _413.x * TEXCOORD.z;
    float _417 = dot(vec3(_263, _264, _265), vec3(_342, _343, _344));
    float _420 = _417 * 2.0;
    float _424 = (_420 * _263) - _342;
    float _425 = (_420 * _264) - _343;
    float _426 = (_420 * _265) - _344;
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _456 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _758;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _483 = fma(_456, cbModelParam._m0[26u].z, fma(_452, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _448));
        float _487 = fma(_456, cbModelParam._m0[27u].z, fma(_452, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _448));
        float _491 = fma(_456, cbModelParam._m0[28u].z, fma(_452, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _448));
        float _516 = _448 + _263;
        float _517 = _452 + _264;
        float _518 = _456 + _265;
        float _528 = fma(_518, cbModelParam._m0[26u].z, fma(_517, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _516)) - _483;
        float _529 = fma(_518, cbModelParam._m0[27u].z, fma(_517, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _516)) - _487;
        float _530 = fma(_518, cbModelParam._m0[28u].z, fma(_517, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _516)) - _491;
        float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
        float _547 = ((_534 * _528) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_483 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _548 = ((_534 * _529) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_487 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _549 = ((_534 * _530) / cbModelParam._m0[34u].z) + ((((((_491 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_547, _548, _549), 0.0);
        float _586 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _587 = _586 * (_552.x + (-0.5));
        float _588 = _586 * (_552.y + (-0.5));
        float _589 = _586 * (_552.z + (-0.5));
        float _596 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _597 = _596 * (_559.x + (-0.5));
        float _598 = _596 * (_559.y + (-0.5));
        float _599 = _596 * (_559.z + (-0.5));
        float _606 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _607 = _606 * (_566.x + (-0.5));
        float _608 = _606 * (_566.y + (-0.5));
        float _609 = _606 * (_566.z + (-0.5));
        float _616 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _617 = _616 * (_573.x + (-0.5));
        float _618 = _616 * (_573.y + (-0.5));
        float _619 = _616 * (_573.z + (-0.5));
        float _620 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _621 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _622 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _623 = _587 * 0.5;
        float _624 = _597 * 0.5;
        float _625 = _607 * 0.5;
        float _626 = dot(vec3(_623, _624, _625), vec3(_623, _624, _625));
        float _631 = (_626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_626);
        float _640 = (dot(vec3(_263, _264, _265), vec3(_631 * _623, _631 * _624, _631 * _625)) + 1.0) * 0.5;
        float _3287 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        float _650 = sqrt(((_624 * _624) + (_623 * _623)) + (_625 * _625)) / (_620 + 9.9999997473787516355514526367188e-06);
        float _3298 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _652 = _651 * 2.0;
        float _656 = (1.0 - _651) / (_651 + 1.0);
        float _3309 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _666 = ((((1.0 - _657) * (_652 + 2.0)) * exp2(log2(isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) * (_652 + 1.0))) + _657) * _620;
        float _667 = _588 * 0.5;
        float _668 = _598 * 0.5;
        float _669 = _608 * 0.5;
        float _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
        float _675 = (_670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_670);
        float _683 = (dot(vec3(_263, _264, _265), vec3(_675 * _667, _675 * _668, _675 * _669)) + 1.0) * 0.5;
        float _3320 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _692 = sqrt(((_668 * _668) + (_667 * _667)) + (_669 * _669)) / (_621 + 9.9999997473787516355514526367188e-06);
        float _3331 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _694 = _693 * 2.0;
        float _698 = (1.0 - _693) / (_693 + 1.0);
        float _3342 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _708 = ((((1.0 - _699) * (_694 + 2.0)) * exp2(log2(isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_694 + 1.0))) + _699) * _621;
        float _709 = _589 * 0.5;
        float _710 = _599 * 0.5;
        float _711 = _609 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _725 = (dot(vec3(_263, _264, _265), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3353 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _734 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_622 + 9.9999997473787516355514526367188e-06);
        float _3364 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3375 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * (_736 + 1.0))) + _741) * _622;
        _758 = _589;
        _760 = _588;
        _761 = _587;
        _762 = _599;
        _763 = _598;
        _764 = _597;
        _765 = _609;
        _766 = _608;
        _767 = _607;
        _768 = _622;
        _769 = _621;
        _770 = _620;
        _771 = cbModelParam._m0[36u].z * (isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0)));
        _772 = cbModelParam._m0[36u].z * (isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0)));
        _773 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
    }
    else
    {
        _758 = _759;
        _760 = _759;
        _761 = _759;
        _762 = _759;
        _763 = _759;
        _764 = _759;
        _765 = _759;
        _766 = _759;
        _767 = _759;
        _768 = _759;
        _769 = _759;
        _770 = _759;
        _771 = 0.0;
        _772 = 0.0;
        _773 = 0.0;
    }
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _799 = fma(_456, cbModelParam._m0[30u].z, fma(_452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _448));
        float _803 = fma(_456, cbModelParam._m0[31u].z, fma(_452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _448));
        float _807 = fma(_456, cbModelParam._m0[32u].z, fma(_452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _448));
        float _830 = _448 + _263;
        float _831 = _452 + _264;
        float _832 = _456 + _265;
        float _842 = fma(_832, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830)) - _799;
        float _843 = fma(_832, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830)) - _803;
        float _844 = fma(_832, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830)) - _807;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_799 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_803 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[35u].z) + ((((((_807 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _898 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_865.x + (-0.5));
        float _900 = _898 * (_865.y + (-0.5));
        float _901 = _898 * (_865.z + (-0.5));
        float _908 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_872.x + (-0.5));
        float _910 = _908 * (_872.y + (-0.5));
        float _911 = _908 * (_872.z + (-0.5));
        float _918 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_879.x + (-0.5));
        float _920 = _918 * (_879.y + (-0.5));
        float _921 = _918 * (_879.z + (-0.5));
        float _928 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_886.x + (-0.5));
        float _930 = _928 * (_886.y + (-0.5));
        float _931 = _928 * (_886.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_263, _264, _265), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3416 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3427 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3438 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * (_962 + 1.0))) + _967) * _932;
        float _977 = _900 * 0.5;
        float _978 = _910 * 0.5;
        float _979 = _920 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_263, _264, _265), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3471 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1004 + 1.0))) + _1009) * _933;
        float _1019 = _901 * 0.5;
        float _1020 = _911 * 0.5;
        float _1021 = _921 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_263, _264, _265), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3504 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1046 + 1.0))) + _1051) * _934;
        _1068 = _901;
        _1069 = _900;
        _1070 = _899;
        _1071 = _911;
        _1072 = _910;
        _1073 = _909;
        _1074 = _921;
        _1075 = _920;
        _1076 = _919;
        _1077 = _934;
        _1078 = _933;
        _1079 = _932;
        _1080 = cbModelParam._m0[36u].w * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1081 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1082 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _759;
        _1069 = _759;
        _1070 = _759;
        _1071 = _759;
        _1072 = _759;
        _1073 = _759;
        _1074 = _759;
        _1075 = _759;
        _1076 = _759;
        _1077 = _759;
        _1078 = _759;
        _1079 = _759;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1092 = (cbModelParam._m0[1u].x * (_1080 - _771)) + _771;
    float _1093 = (cbModelParam._m0[1u].x * (_1081 - _772)) + _772;
    float _1094 = (cbModelParam._m0[1u].x * (_1082 - _773)) + _773;
    float _1115 = fma(_1094, cbSceneParam._m0[89u].z, fma(_1093, cbSceneParam._m0[89u].y, _1092 * cbSceneParam._m0[89u].x));
    float _1118 = fma(_1094, cbSceneParam._m0[90u].z, fma(_1093, cbSceneParam._m0[90u].y, _1092 * cbSceneParam._m0[90u].x));
    float _1121 = fma(_1094, cbSceneParam._m0[91u].z, fma(_1093, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1092));
    float _1136 = _424 * 0.5;
    float _1137 = _425 * 0.5;
    float _1138 = _426 * 0.5;
    float _1139 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1070, _1073, _1076, _1079));
    float _1142 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1145 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1179;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1152 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_758, _762, _765, _768));
        float _1156 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_760, _763, _766, _769));
        float _1160 = dot(vec4(_1136, _1137, _1138, 1.0), vec4(_761, _764, _767, _770));
        float _1167 = dot(vec4(cbModelParam._m0[39u]), vec4(_1136, _1137, _1138, 1.0));
        _1179 = dot(vec3(isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1167) ? 0.0 : (isnan(0.0) ? _1167 : max(0.0, _1167))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1179 = 1.0;
    }
    float _1190;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1181 = dot(vec4(cbModelParam._m0[40u]), vec4(_1136, _1137, _1138, 1.0));
        _1190 = dot(vec3(isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)), isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1181) ? 0.0 : (isnan(0.0) ? _1181 : max(0.0, _1181))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1190 = 1.0;
    }
    float _1194 = (_1190 * cbModelParam._m0[1u].x) + (_1179 * (1.0 - cbModelParam._m0[1u].x));
    float _1203 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1284;
    float _1286;
    float _1288;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1251 = fma(_456, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _448)) + cbModelParam._m0[13u].w;
        float _1255 = fma(_456, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _448)) + cbModelParam._m0[14u].w;
        float _1259 = fma(_456, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _448)) + cbModelParam._m0[15u].w;
        float _1262 = fma(_426, cbModelParam._m0[13u].z, fma(_425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _424));
        float _1265 = fma(_426, cbModelParam._m0[14u].z, fma(_425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _424));
        float _1268 = fma(_426, cbModelParam._m0[15u].z, fma(_425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _424));
        float _1294;
        if (_1262 > 0.0)
        {
            _1294 = abs((1.0 - _1251) / _1262);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1251 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1294 = frontier_phi_14_12_ladder;
        }
        float _1467;
        if (_1265 > 0.0)
        {
            _1467 = abs((1.0 - _1255) / _1265);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1255 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1467 = frontier_phi_23_19_ladder;
        }
        float _1763;
        if (_1268 > 0.0)
        {
            _1763 = abs((1.0 - _1259) / _1268);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1259 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1763 = frontier_phi_35_30_ladder;
        }
        float _1765 = isnan(_1467) ? _1294 : (isnan(_1294) ? _1467 : min(_1294, _1467));
        float _1766 = isnan(_1763) ? _1765 : (isnan(_1765) ? _1763 : min(_1765, _1763));
        float _1770 = (_1766 * _1262) + _1251;
        float _1771 = (_1766 * _1265) + _1255;
        float _1772 = (_1766 * _1268) + _1259;
        float _1773 = _1766 * 9.9999997473787516355514526367188e-05;
        float _1775 = (-1.0) - _1773;
        float _1777 = _1773 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1772 > _1777) || ((_1772 < _1775) || ((_1771 > _1777) || ((_1771 < _1775) || ((_1770 < _1775) || (_1770 > _1777))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1772, cbModelParam._m0[9u].z, fma(_1771, cbModelParam._m0[9u].y, _1770 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1772, cbModelParam._m0[10u].z, fma(_1771, cbModelParam._m0[10u].y, _1770 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1772, cbModelParam._m0[11u].z, fma(_1771, cbModelParam._m0[11u].y, _1770 * cbModelParam._m0[11u].x))), _1203);
            frontier_phi_13_35_ladder = _1917.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1917.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1917.x * cbModelParam._m0[1u].y;
        }
        _1284 = frontier_phi_13_35_ladder_2;
        _1286 = frontier_phi_13_35_ladder_1;
        _1288 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_424, _425, _426), _1203);
        _1284 = _1272.x * cbModelParam._m0[1u].y;
        _1286 = _1272.y * cbModelParam._m0[1u].y;
        _1288 = _1272.z * cbModelParam._m0[1u].y;
    }
    float _1291 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1347 = fma(_456, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _448)) + cbModelParam._m0[21u].w;
        float _1351 = fma(_456, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _448)) + cbModelParam._m0[22u].w;
        float _1355 = fma(_456, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _448)) + cbModelParam._m0[23u].w;
        float _1358 = fma(_426, cbModelParam._m0[21u].z, fma(_425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _424));
        float _1361 = fma(_426, cbModelParam._m0[22u].z, fma(_425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _424));
        float _1364 = fma(_426, cbModelParam._m0[23u].z, fma(_425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _424));
        float _1472;
        if (_1358 > 0.0)
        {
            _1472 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1472 = frontier_phi_25_21_ladder;
        }
        float _1790;
        if (_1361 > 0.0)
        {
            _1790 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1790 = frontier_phi_37_32_ladder;
        }
        float _2063;
        if (_1364 > 0.0)
        {
            _2063 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2063 = frontier_phi_47_44_ladder;
        }
        float _2065 = isnan(_1790) ? _1472 : (isnan(_1472) ? _1790 : min(_1472, _1790));
        float _2066 = isnan(_2063) ? _2065 : (isnan(_2065) ? _2063 : min(_2065, _2063));
        float _2070 = (_2066 * _1358) + _1347;
        float _2071 = (_2066 * _1361) + _1351;
        float _2072 = (_2066 * _1364) + _1355;
        float _2073 = _2066 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2073;
        float _2076 = _2073 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2072 > _2076) || ((_2072 < _2074) || ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 < _2074) || (_2070 > _2076))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2072, cbModelParam._m0[17u].z, fma(_2071, cbModelParam._m0[17u].y, _2070 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2072, cbModelParam._m0[18u].z, fma(_2071, cbModelParam._m0[18u].y, _2070 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2072, cbModelParam._m0[19u].z, fma(_2071, cbModelParam._m0[19u].y, _2070 * cbModelParam._m0[19u].x))), _1291);
            frontier_phi_22_47_ladder = _2163.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2163.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2163.x * cbModelParam._m0[1u].z;
        }
        _1383 = frontier_phi_22_47_ladder_2;
        _1385 = frontier_phi_22_47_ladder_1;
        _1387 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_424, _425, _426), _1291);
        _1383 = _1367.x * cbModelParam._m0[1u].z;
        _1385 = _1367.y * cbModelParam._m0[1u].z;
        _1387 = _1367.z * cbModelParam._m0[1u].z;
    }
    float _1399 = _416 * 0.01200000010430812835693359375;
    float _1401 = _1399 * ((cbModelParam._m0[1u].w * (_1383 - _1284)) + _1284);
    float _1402 = _1399 * ((cbModelParam._m0[1u].w * (_1385 - _1286)) + _1286);
    float _1403 = _1399 * ((cbModelParam._m0[1u].w * (_1387 - _1288)) + _1288);
    float _1406 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, _1401 * cbSceneParam._m0[91u].x));
    float _1446 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1459 = _1446 / _1458;
    float _1460 = _1450 / _1458;
    float _1461 = _1454 / _1458;
    float _1608;
    float _1609;
    float _1610;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1488 = ((uint(_1461 > cbSceneParam._m0[59u].y) + uint(_1461 > cbSceneParam._m0[59u].x)) + uint(_1461 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1489 = _1488 + 43u;
        uint _1497 = _1488 + 44u;
        uint _1505 = _1488 + 45u;
        uint _1513 = _1488 + 46u;
        float _1524 = fma(_1458, cbSceneParam._m0[_1489].w, fma(_1454, cbSceneParam._m0[_1489].z, fma(_1450, cbSceneParam._m0[_1489].y, _1446 * cbSceneParam._m0[_1489].x)));
        float _1528 = fma(_1458, cbSceneParam._m0[_1497].w, fma(_1454, cbSceneParam._m0[_1497].z, fma(_1450, cbSceneParam._m0[_1497].y, _1446 * cbSceneParam._m0[_1497].x)));
        float _1536 = fma(_1458, cbSceneParam._m0[_1513].w, fma(_1454, cbSceneParam._m0[_1513].z, fma(_1450, cbSceneParam._m0[_1513].y, _1446 * cbSceneParam._m0[_1513].x)));
        float _1541 = cbSceneParam._m0[33u].z * _1536;
        float _1543 = cbSceneParam._m0[33u].w * _1536;
        float _1546 = fma(_1458, cbSceneParam._m0[_1505].w, fma(_1454, cbSceneParam._m0[_1505].z, fma(_1450, cbSceneParam._m0[_1505].y, _1446 * cbSceneParam._m0[_1505].x))) / _1536;
        float _1594 = (cbSceneParam._m0[33u].x - sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461))) * cbSceneParam._m0[33u].y;
        float _3630 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1601 = (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1541 + _1524) / _1536, (_1543 + _1528) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1543 + _1524) / _1536, (_1528 - _1541) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1524 - _1541) / _1536, (_1528 - _1543) / _1536), _1546), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1524 - _1543) / _1536, (_1541 + _1528) / _1536), _1546), 0.0)).x), vec4(0.25)));
        _1608 = 1.0 - (_1601 * cbSceneParam._m0[34u].x);
        _1609 = 1.0 - (_1601 * cbSceneParam._m0[34u].y);
        _1610 = 1.0 - (_1601 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1608 = 1.0;
        _1609 = 1.0;
        _1610 = 1.0;
    }
    float _1674;
    float _1676;
    float _1678;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1662 = fma(_1458, cbSceneParam._m0[63u].w, fma(_1454, cbSceneParam._m0[63u].z, fma(_1450, cbSceneParam._m0[63u].y, _1446 * cbSceneParam._m0[63u].x)));
        float _1663 = fma(_1458, cbSceneParam._m0[60u].w, fma(_1454, cbSceneParam._m0[60u].z, fma(_1450, cbSceneParam._m0[60u].y, _1446 * cbSceneParam._m0[60u].x))) / _1662;
        float _1664 = fma(_1458, cbSceneParam._m0[61u].w, fma(_1454, cbSceneParam._m0[61u].z, fma(_1450, cbSceneParam._m0[61u].y, _1446 * cbSceneParam._m0[61u].x))) / _1662;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1663 >= cbSceneParam._m0[64u].x) && (_1664 >= cbSceneParam._m0[64u].y)) && (_1663 <= cbSceneParam._m0[64u].z)) && (_1664 <= cbSceneParam._m0[64u].w))
        {
            float _1803 = fma(_1458, cbSceneParam._m0[62u].w, fma(_1454, cbSceneParam._m0[62u].z, fma(_1450, cbSceneParam._m0[62u].y, _1446 * cbSceneParam._m0[62u].x))) / _1662;
            float _1807 = isnan(cbSceneParam._m0[41u].w) ? _1803 : (isnan(_1803) ? cbSceneParam._m0[41u].w : max(_1803, cbSceneParam._m0[41u].w));
            float _1850 = (cbSceneParam._m0[33u].x - sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461))) * cbSceneParam._m0[33u].y;
            float _3646 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
            float _1857 = (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1663, cbSceneParam._m0[33u].w + _1664), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1663, _1664 - cbSceneParam._m0[33u].z), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1663 - cbSceneParam._m0[33u].z, _1664 - cbSceneParam._m0[33u].w), _1807), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1663 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1664), _1807), 0.0)).x), vec4(0.25)));
            float _1861 = 1.0 - (_1857 * cbSceneParam._m0[34u].x);
            float _1862 = 1.0 - (_1857 * cbSceneParam._m0[34u].y);
            float _1863 = 1.0 - (_1857 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1863) ? _1610 : (isnan(_1610) ? _1863 : min(_1610, _1863));
            frontier_phi_34_33_ladder_1 = isnan(_1862) ? _1609 : (isnan(_1609) ? _1862 : min(_1609, _1862));
            frontier_phi_34_33_ladder_2 = isnan(_1861) ? _1608 : (isnan(_1608) ? _1861 : min(_1608, _1861));
        }
        else
        {
            frontier_phi_34_33_ladder = _1610;
            frontier_phi_34_33_ladder_1 = _1609;
            frontier_phi_34_33_ladder_2 = _1608;
        }
        _1674 = frontier_phi_34_33_ladder_2;
        _1676 = frontier_phi_34_33_ladder_1;
        _1678 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1674 = _1608;
        _1676 = _1609;
        _1678 = _1610;
    }
    uvec4 _1683 = floatBitsToUint(cbInstanceData._m0[_391 + 5u]);
    uint _1685 = _1683.x * 14u;
    uint _1686 = _1685 + 13u;
    float _1693 = _416 + (-1.0);
    float _1698 = (cbLight._m0[_1686].x * _1693) + 1.0;
    float _1699 = (cbLight._m0[_1686].y * _1693) + 1.0;
    float _1700 = (cbLight._m0[_1686].z * _1693) + 1.0;
    float _1701 = (cbLight._m0[_1686].w * _1693) + 1.0;
    uint _1702 = _1685 + 5u;
    float _1708 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1712 = _1685 + 4u;
    float _1722 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1726 = _1685 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_263, _264, _265));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_263, _264, _265));
    float _3682 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _3693 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1702].x * _1708) * _1747) + (((cbLight._m0[_1712].x * _1674) * _1722) * _1745);
    float _1755 = ((_1708 * cbLight._m0[_1702].y) * _1747) + (((cbLight._m0[_1712].y * _1676) * _1722) * _1745);
    float _1756 = ((_1708 * cbLight._m0[_1702].z) * _1747) + (((cbLight._m0[_1712].z * _1678) * _1722) * _1745);
    uvec4 _1760 = floatBitsToUint(cbLight._m0[_1685 + 12u]);
    bool _1762 = _1760.x == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1762)
    {
        _1864 = _1754;
        _1866 = _1755;
        _1868 = _1756;
    }
    else
    {
        uint _1872 = _1685 + 6u;
        float _1888 = (dot(vec3(cbLight._m0[_1685 + 2u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _3704 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1891 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1864 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1754;
        _1866 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1755;
        _1868 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1756;
    }
    bool _1871 = _1760.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1871)
    {
        _1926 = _1864;
        _1928 = _1866;
        _1930 = _1868;
    }
    else
    {
        uint _2034 = _1685 + 7u;
        float _2050 = (dot(vec3(cbLight._m0[_1685 + 3u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _2051 = _2050 * _2050;
        float _3720 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2052 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _2053 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1926 = (((cbLight._m0[_2034].x * 0.3183098733425140380859375) * _2052) * _2053) + _1864;
        _1928 = (((cbLight._m0[_2034].y * 0.3183098733425140380859375) * _2052) * _2053) + _1866;
        _1930 = (((cbLight._m0[_2034].z * 0.3183098733425140380859375) * _2052) * _2053) + _1868;
    }
    uint _1932 = _1685 + 8u;
    float _1938 = cbLight._m0[_1685].x + _342;
    float _1939 = cbLight._m0[_1685].y + _343;
    float _1940 = cbLight._m0[_1685].z + _344;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1948 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1685].xyz));
    float _3736 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _1952 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1938 * _1944, _1939 * _1944, _1940 * _1944));
    float _3758 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = (0.5 / ((_1951 + 9.9999999392252902907785028219223e-09) + _1952)) * _1951;
    float _3769 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1972 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.31831014156341552734375;
    uint _1986 = _1685 + 9u;
    float _1992 = cbLight._m0[_1726].x + _342;
    float _1993 = cbLight._m0[_1726].y + _343;
    float _1994 = cbLight._m0[_1726].z + _344;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _2002 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1726].xyz));
    float _3780 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1992 * _1998, _1993 * _1998, _1994 * _1998));
    float _3791 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2015 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2019 = (0.5 / ((_2005 + 9.9999999392252902907785028219223e-09) + _1952)) * _2005;
    float _3802 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2021 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.31831014156341552734375;
    float _2031 = (((_2015 * cbLight._m0[_1986].x) * _2021) * _1708) + ((((cbLight._m0[_1932].x * _1674) * _1964) * _1972) * _1722);
    float _2032 = (((_2015 * cbLight._m0[_1986].y) * _2021) * _1708) + ((((cbLight._m0[_1932].y * _1676) * _1964) * _1972) * _1722);
    float _2033 = (((_2015 * cbLight._m0[_1986].z) * _2021) * _1708) + ((((cbLight._m0[_1932].z * _1678) * _1964) * _1972) * _1722);
    float _2089;
    float _2091;
    float _2093;
    if (_1762)
    {
        _2089 = _2031;
        _2091 = _2032;
        _2093 = _2033;
    }
    else
    {
        uint _2095 = _1685 + 10u;
        uint _2101 = _1685 + 2u;
        float _2107 = cbLight._m0[_2101].x + _342;
        float _2108 = cbLight._m0[_2101].y + _343;
        float _2109 = cbLight._m0[_2101].z + _344;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2117 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_2101].xyz));
        float _3813 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _2121 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2107 * _2113, _2108 * _2113, _2109 * _2113));
        float _3824 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2130 = (exp2(log2(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2134 = (0.5 / ((_2120 + 9.9999999392252902907785028219223e-09) + _1952)) * _2120;
        float _3835 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.31831014156341552734375;
        float _2137 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2089 = (((_2130 * cbLight._m0[_2095].x) * _2136) * _2137) + _2031;
        _2091 = (((_2130 * cbLight._m0[_2095].y) * _2136) * _2137) + _2032;
        _2093 = (((_2130 * cbLight._m0[_2095].z) * _2136) * _2137) + _2033;
    }
    float _2168;
    float _2170;
    float _2172;
    if (_1871)
    {
        _2168 = _2089;
        _2170 = _2091;
        _2172 = _2093;
    }
    else
    {
        uint _2179 = _1685 + 11u;
        uint _2185 = _1685 + 3u;
        float _2191 = cbLight._m0[_2185].x + _342;
        float _2192 = cbLight._m0[_2185].y + _343;
        float _2193 = cbLight._m0[_2185].z + _344;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2201 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_2185].xyz));
        float _3851 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _2205 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2191 * _2197, _2192 * _2197, _2193 * _2197));
        float _3862 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2218 = (0.5 / ((_2204 + 9.9999999392252902907785028219223e-09) + _1952)) * _2204;
        float _3873 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2220 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.31831014156341552734375;
        float _2221 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2168 = (((_2214 * cbLight._m0[_2179].x) * _2220) * _2221) + _2089;
        _2170 = (((_2214 * cbLight._m0[_2179].y) * _2220) * _2221) + _2091;
        _2172 = (((_2214 * cbLight._m0[_2179].z) * _2220) * _2221) + _2093;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1683.y == 0u)
    {
        uvec4 _2242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2243 = _2242.x;
        uint _2254 = uint((float(_2242.y) * floor(float(uint(cbSceneParam._m0[85u].y * _351) / _2243))) + floor(float(uint(cbSceneParam._m0[85u].x * _350) / _2243)));
        float _2264 = (log2(_1461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2265 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        uint _2268 = uint(isnan(14.0) ? _2265 : (isnan(_2265) ? 14.0 : min(_2265, 14.0)));
        uvec4 _2273 = texelFetch(g_lightClusterGridBuffer, int(((_2268 << 2u) + (_2254 << 6u)) >> 2u));
        uint _2274 = _2273.x;
        uint _2275 = _2242.z;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        if (((((1u << ((_2275 >> 4u) & 15u)) + 4294967295u) & _2274) == 0u) || ((_2275 & 240u) == 0u))
        {
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
        }
        else
        {
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2559)
                {
                    frontier_phi_66_pred = _2548;
                    frontier_phi_66_pred_1 = _2547;
                    frontier_phi_66_pred_2 = _2546;
                    frontier_phi_66_pred_3 = _2545;
                    frontier_phi_66_pred_4 = _2544;
                    frontier_phi_66_pred_5 = _2543;
                }
                else
                {
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    uint _2673;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2558;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2677 = uint(findLSB(_2673)) + (_2549 << 5u);
                        uint _2674 = (_2673 + 4294967295u) & _2673;
                        uint _2679 = _2677 * 48u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2699 = (_2677 * 48u) + 4u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2718 = (_2677 * 48u) + 8u;
                        vec3 _2729 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x));
                        float _2733 = _2693.x - _1459;
                        float _2734 = _2693.y - _1460;
                        float _2735 = _2693.z - _1461;
                        float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                        float _2739 = inversesqrt(_2736);
                        float _2748 = 1.0 - (_2736 * _2693.w);
                        float _3899 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                        float _2750 = sqrt(_2736) * _2712.w;
                        float _2753 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * dot(vec3(_372, _375, _378), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735))) + _2754;
                        float _2760 = _2750 * _2750;
                        float _2764 = ((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2749) / ((_2760 * 0.699999988079071044921875) + 1.0);
                        float _2768 = (-0.0) - _1459;
                        float _2769 = (-0.0) - _1460;
                        float _2770 = (-0.0) - _1461;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2778 = dot(vec3(_372, _375, _378), vec3(_2774 * _2768, _2774 * _2769, _2774 * _2770));
                        float _3915 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _3926 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2782 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                        float _2786 = (0.5 / (((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) + 9.9999999392252902907785028219223e-09) + _2782)) * _2782;
                        float _3937 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2795 = (((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 3.1415927410125732421875) / ((_2760 * 2.1991131305694580078125) + 3.141590118408203125)) * _2749;
                        _2602 = (_2764 * _2712.x) + _2670;
                        _2603 = (_2764 * _2712.y) + _2671;
                        _2604 = (_2764 * _2712.z) + _2672;
                        _2599 = (_2795 * _2729.x) + _2667;
                        _2600 = (_2795 * _2729.y) + _2668;
                        _2601 = (_2795 * _2729.z) + _2669;
                        if (_2674 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2674;
                        }
                    }
                    frontier_phi_66_pred = _2604;
                    frontier_phi_66_pred_1 = _2603;
                    frontier_phi_66_pred_2 = _2602;
                    frontier_phi_66_pred_3 = _2601;
                    frontier_phi_66_pred_4 = _2600;
                    frontier_phi_66_pred_5 = _2599;
                }
                _2403 = frontier_phi_66_pred;
                _2401 = frontier_phi_66_pred_1;
                _2399 = frontier_phi_66_pred_2;
                _2397 = frontier_phi_66_pred_3;
                _2395 = frontier_phi_66_pred_4;
                _2393 = frontier_phi_66_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2393;
                    _2544 = _2395;
                    _2545 = _2397;
                    _2546 = _2399;
                    _2547 = _2401;
                    _2548 = _2403;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
        }
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.z;
        uint _2409 = (_2407 >> 8u) & 15u;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((4294967295u << _2409) & _2274) == 0u)
        {
            _2514 = _2392;
            _2516 = _2394;
            _2518 = _2396;
            _2520 = _2398;
            _2522 = _2400;
            _2524 = _2402;
        }
        else
        {
            float _2539 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2409 < ((_2407 >> 12u) & 15u))
            {
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2525;
                float _2650 = _2392;
                float _2651 = _2394;
                float _2652 = _2396;
                float _2653 = _2398;
                float _2654 = _2400;
                float _2655 = _2402;
                uint _2656 = _2409;
                uint _2665;
                bool _2666;
                for (;;)
                {
                    _2665 = texelFetch(g_lightClassification, int((((_2268 << 5u) + (_2254 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                    _2666 = _2665 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2666)
                    {
                        frontier_phi_72_pred = _2655;
                        frontier_phi_72_pred_1 = _2654;
                        frontier_phi_72_pred_2 = _2653;
                        frontier_phi_72_pred_3 = _2652;
                        frontier_phi_72_pred_4 = _2651;
                        frontier_phi_72_pred_5 = _2650;
                    }
                    else
                    {
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _2813 = _2650;
                        float _2814 = _2651;
                        float _2815 = _2652;
                        float _2816 = _2653;
                        float _2817 = _2654;
                        float _2818 = _2655;
                        uint _2819 = _2665;
                        uint _2820;
                        vec4 _2845;
                        float _2846;
                        vec4 _2861;
                        vec3 _2873;
                        vec4 _2889;
                        vec4 _2905;
                        float _2952;
                        bool _2953;
                        for (;;)
                        {
                            uint _2830 = ((_2656 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2819));
                            _2820 = (_2819 + 4294967295u) & _2819;
                            uint _2832 = _2830 * 40u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2846 = _2845.w;
                            uint _2848 = (_2830 * 40u) + 4u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2830 * 40u) + 8u;
                            _2873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x));
                            uint _2876 = (_2830 * 40u) + 16u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2830 * 40u) + 20u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2830 * 40u) + 24u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2927 = (_2830 * 40u) + 28u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2952 = fma(_1461, _2940.z, fma(_1460, _2940.y, _2940.x * _1459)) + _2940.w;
                            _2953 = !((fma(_1461, _2921.z, fma(_1460, _2921.y, _2921.x * _1459)) + _2921.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2953)
                            {
                                float _2980 = _2845.x - _1459;
                                float _2981 = _2845.y - _1460;
                                float _2982 = _2845.z - _1461;
                                float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                                float _2986 = inversesqrt(_2983);
                                float _2987 = _2986 * _2980;
                                float _2988 = _2986 * _2981;
                                float _2989 = _2986 * _2982;
                                float _2993 = 1.0 - (_2983 / (_2846 * _2846));
                                float _3948 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                                float _2998 = sqrt(_2983) * _2861.w;
                                float _3000 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                                float _3001 = _3000 * _3000;
                                float _3002 = 1.0 - _3001;
                                float _3004 = (_3002 * dot(vec3(_2987, _2988, _2989), vec3(_372, _375, _378))) + _3001;
                                float _3007 = _2998 * _2998;
                                float _3011 = (fma(_1461, _2889.z, fma(_1460, _2889.y, _2889.x * _1459)) + _2889.w) / _2952;
                                float _3012 = (fma(_1461, _2905.z, fma(_1460, _2905.y, _2905.x * _1459)) + _2905.w) / _2952;
                                float _3016 = 1.0 - dot(vec2(_3011, _3012), vec2(_3011, _3012));
                                float _3964 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                                float _3018 = _3017 * (((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2994) / ((_3007 * 0.699999988079071044921875) + 1.0));
                                float _3028 = dot(vec3(_372, _375, _378), vec3((-0.0) - (_1459 * _2539), (-0.0) - (_1460 * _2539), (-0.0) - (_1461 * _2539)));
                                float _3975 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3036 = (_3002 * dot(vec3(_372, _375, _378), vec3(_2987, _2988, _2989))) + _3001;
                                float _3986 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                                float _3041 = (0.5 / (((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) + 9.9999999392252902907785028219223e-09) + _3037)) * _3037;
                                float _3997 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3048 = (_3017 * _2994) * (((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 3.1415927410125732421875) / ((_3007 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _3018 * _2861.y;
                                frontier_phi_78_pred_1 = _3018 * _2861.x;
                                frontier_phi_78_pred_2 = _3048 * _2873.z;
                                frontier_phi_78_pred_3 = _3048 * _2873.y;
                                frontier_phi_78_pred_4 = _3048 * _2873.x;
                                frontier_phi_78_pred_5 = _3018 * _2861.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3056 = frontier_phi_78_pred;
                            _3055 = frontier_phi_78_pred_1;
                            _3054 = frontier_phi_78_pred_2;
                            _3053 = frontier_phi_78_pred_3;
                            _3052 = frontier_phi_78_pred_4;
                            _3057 = frontier_phi_78_pred_5;
                            _2803 = _3055 + _2816;
                            _2804 = _3056 + _2817;
                            _2805 = _3057 + _2818;
                            _2800 = _3052 + _2813;
                            _2801 = _3053 + _2814;
                            _2802 = _3054 + _2815;
                            if (_2820 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2820;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2805;
                        frontier_phi_72_pred_1 = _2804;
                        frontier_phi_72_pred_2 = _2803;
                        frontier_phi_72_pred_3 = _2802;
                        frontier_phi_72_pred_4 = _2801;
                        frontier_phi_72_pred_5 = _2800;
                    }
                    _2525 = frontier_phi_72_pred;
                    _2523 = frontier_phi_72_pred_1;
                    _2521 = frontier_phi_72_pred_2;
                    _2519 = frontier_phi_72_pred_3;
                    _2517 = frontier_phi_72_pred_4;
                    _2515 = frontier_phi_72_pred_5;
                    uint _2657 = _2656 + 1u;
                    if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2650 = _2515;
                        _2651 = _2517;
                        _2652 = _2519;
                        _2653 = _2521;
                        _2654 = _2523;
                        _2655 = _2525;
                        _2656 = _2657;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2525;
                frontier_phi_60_61_ladder_1 = _2523;
                frontier_phi_60_61_ladder_2 = _2519;
                frontier_phi_60_61_ladder_3 = _2517;
                frontier_phi_60_61_ladder_4 = _2515;
                frontier_phi_60_61_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_60_61_ladder = _2402;
                frontier_phi_60_61_ladder_1 = _2400;
                frontier_phi_60_61_ladder_2 = _2396;
                frontier_phi_60_61_ladder_3 = _2394;
                frontier_phi_60_61_ladder_4 = _2392;
                frontier_phi_60_61_ladder_5 = _2398;
            }
            _2514 = frontier_phi_60_61_ladder_4;
            _2516 = frontier_phi_60_61_ladder_3;
            _2518 = frontier_phi_60_61_ladder_2;
            _2520 = frontier_phi_60_61_ladder_5;
            _2522 = frontier_phi_60_61_ladder_1;
            _2524 = frontier_phi_60_61_ladder;
        }
        float _2529 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
        _2287 = (_2529 * _2520) + _1926;
        _2289 = (_2529 * _2522) + _1928;
        _2291 = (_2529 * _2524) + _1930;
        _2293 = ((_2514 * 0.039999999105930328369140625) * _2529) + _2168;
        _2295 = ((_2516 * 0.039999999105930328369140625) * _2529) + _2170;
        _2297 = ((_2518 * 0.039999999105930328369140625) * _2529) + _2172;
    }
    else
    {
        _2287 = _1926;
        _2289 = _1928;
        _2291 = _1930;
        _2293 = _2168;
        _2295 = _2170;
        _2297 = _2172;
    }
    uint _2303 = _392 + uint(cbMatDynParam._m0[0u].w);
    float _2312 = (((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].x) * _235.x) * _258) * cbInstanceData._m0[_2303].x;
    float _2316 = (((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].x) * _235.y) * _258) * cbInstanceData._m0[_2303].y;
    float _2320 = (((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].x) * _235.z) * _258) * cbInstanceData._m0[_2303].z;
    float _4013 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _4024 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _4035 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _2337 = (((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2287 + ((isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0))) * _416))) + ((_2293 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + _2312;
    float _2339 = (_2316 + ((_2295 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2289 + ((isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0))) * _416)));
    float _2341 = (_2320 + ((_2297 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _1194)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_2291 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _416)));
    float _4061 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2354 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    uint _2355 = _391 + 6u;
    float _2363 = _350 / cbSceneParam._m0[86u].x;
    float _2364 = _351 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _284 : (isnan(_284) ? cbSceneParam._m0[77u].w : min(_284, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_284 > cbSceneParam._m0[78u].w)
    {
        float _2417 = isnan(_284) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _284 : min(cbSceneParam._m0[80u].w, _284));
        float _2418 = _2417 / _284;
        float _2429 = _2418 * _335;
        float _2430 = _336 * _2418;
        float _2431 = (-0.0) - _2430;
        float _2433 = _2418 * _337;
        float _2435 = (cbSceneParam._m0[77u].w * _2431) / _2417;
        float _2436 = _2435 + cbSceneParam._m0[79u].w;
        float _2437 = cbSceneParam._m0[79u].w - _2430;
        float _2443 = sqrt(((_2429 * _2429) + (_2430 * _2430)) + (_2433 * _2433));
        float _2446 = (1.0 - (cbSceneParam._m0[77u].w / _2417)) * _2443;
        float _2451 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2453 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2431 - _2435) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2436 > 0.0) ? exp2(_2451 * _2436) : (2.0 - exp2(_2453 * _2436))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2446;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : max(_2436, _2437));
            float _2574 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : min(_2436, _2437));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2612 = ((abs(_2443 / _2431) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2451 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2451 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2453 * _2583) - exp2(_2453 * _2584)) * _2572))) + (_2446 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2383);
        _2455 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2457 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2459 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2461 = _2623 * _2383;
    }
    else
    {
        _2455 = _2380;
        _2457 = _2381;
        _2459 = _2382;
        _2461 = _2383;
    }
    float _2473 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2474 = _2473 == 3.0;
    float _2475 = log2(_2461);
    float _2479 = exp2(_2475 * cbSceneParam._m0[78u].x);
    float _2480 = exp2(_2475 * cbSceneParam._m0[78u].y);
    float _2481 = exp2(_2475 * cbSceneParam._m0[78u].z);
    float _2482 = _2479 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)));
    float _2483 = _2480 * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)));
    float _2484 = _2481 * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)));
    float _2493 = (_2473 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2493 * (_2474 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.y = _2493 * (_2474 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2457)));
    SV_Target.z = _2493 * (_2474 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2459)));
    SV_Target.w = cbInstanceData._m0[_2355].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2312) * _2354) * _2479) * _2493;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2316) * _2354) * _2480) * _2493;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2320) * _2354) * _2481) * _2493;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
}


