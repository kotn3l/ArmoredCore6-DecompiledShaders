#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _842;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = _220.w;
    float _233 = cbMtdParam._m0[9u].x * _220.x;
    float _234 = cbMtdParam._m0[9u].y * _220.y;
    float _235 = cbMtdParam._m0[9u].z * _220.z;
    vec4 _248 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _250 = _248.x;
    bool _257 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _274 = ((_257 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _250)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _250))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3211 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _277 = 1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0)));
    float _3222 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _278 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _286 = _226 - (((_278 * _278) * _226) * (3.0 - (_278 * 2.0)));
    vec4 _298 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _302 = _298.z;
    float _305 = (_298.x * 2.0) + (-1.0);
    float _307 = (_298.y * 2.0) + (-1.0);
    float _308 = dot(vec2(_305, _307), vec2(_305, _307));
    float _3233 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _313 = sqrt(1.0 - (isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0))));
    float _316 = fma(_313, _196 * NORMAL.x, fma(_307, _203 * TANGENT.x, (_189 * _182) * _305));
    float _319 = fma(_313, _196 * NORMAL.y, fma(_307, _203 * TANGENT.y, (_189 * _183) * _305));
    float _322 = fma(_313, _196 * NORMAL.z, fma(_307, _203 * TANGENT.z, (_189 * _184) * _305));
    float _326 = inversesqrt(dot(vec3(_316, _319, _322), vec3(_316, _319, _322)));
    float _327 = _326 * _316;
    float _328 = _326 * _319;
    float _329 = _326 * _322;
    float _3244 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _330 = isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0));
    float _3255 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _331 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _3266 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3277 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3288 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _339 = _257 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_329, cbSceneParam._m0[5u].z, fma(_328, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _327));
    float _429 = fma(_329, cbSceneParam._m0[6u].z, fma(_328, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _327));
    float _432 = fma(_329, cbSceneParam._m0[7u].z, fma(_328, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _327));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = (_445 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3299 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _3321 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _471 = _468.x * TEXCOORD.z;
    float _472 = dot(vec3(_327, _328, _329), vec3(_397, _398, _399));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _327) - _397;
    float _480 = (_475 * _328) - _398;
    float _481 = (_475 * _329) - _399;
    float _485 = abs(dot(vec3(_397, _398, _399), vec3(_327, _328, _329)));
    float _3332 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_331);
    float _499 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _841;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _566 = fma(_539, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _531));
        float _570 = fma(_539, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _531));
        float _574 = fma(_539, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _531));
        float _599 = _531 + _327;
        float _600 = _535 + _328;
        float _601 = _539 + _329;
        float _611 = fma(_601, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _599)) - _566;
        float _612 = fma(_601, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _599)) - _570;
        float _613 = fma(_601, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _599)) - _574;
        float _617 = inversesqrt(dot(vec3(_611, _612, _613), vec3(_611, _612, _613)));
        float _630 = ((_617 * _611) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_566 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _631 = ((_617 * _612) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_570 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_617 * _613) / cbModelParam._m0[34u].z) + ((((((_574 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _635 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _642 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_630, _631, _632), 0.0);
        float _669 = exp2((_635.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_635.x + (-0.5));
        float _671 = _669 * (_635.y + (-0.5));
        float _672 = _669 * (_635.z + (-0.5));
        float _679 = exp2((_642.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_642.x + (-0.5));
        float _681 = _679 * (_642.y + (-0.5));
        float _682 = _679 * (_642.z + (-0.5));
        float _689 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_649.x + (-0.5));
        float _691 = _689 * (_649.y + (-0.5));
        float _692 = _689 * (_649.z + (-0.5));
        float _699 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_656.x + (-0.5));
        float _701 = _699 * (_656.y + (-0.5));
        float _702 = _699 * (_656.z + (-0.5));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = _670 * 0.5;
        float _707 = _680 * 0.5;
        float _708 = _690 * 0.5;
        float _709 = dot(vec3(_706, _707, _708), vec3(_706, _707, _708));
        float _714 = (_709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_709);
        float _723 = (dot(vec3(_327, _328, _329), vec3(_714 * _706, _714 * _707, _714 * _708)) + 1.0) * 0.5;
        float _3358 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _733 = sqrt(((_707 * _707) + (_706 * _706)) + (_708 * _708)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3369 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _735 = _734 * 2.0;
        float _739 = (1.0 - _734) / (_734 + 1.0);
        float _3380 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _749 = ((((1.0 - _740) * (_735 + 2.0)) * exp2(log2(isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))) * (_735 + 1.0))) + _740) * _703;
        float _750 = _671 * 0.5;
        float _751 = _681 * 0.5;
        float _752 = _691 * 0.5;
        float _753 = dot(vec3(_750, _751, _752), vec3(_750, _751, _752));
        float _758 = (_753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_753);
        float _766 = (dot(vec3(_327, _328, _329), vec3(_758 * _750, _758 * _751, _758 * _752)) + 1.0) * 0.5;
        float _3391 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _775 = sqrt(((_751 * _751) + (_750 * _750)) + (_752 * _752)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3402 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _777 = _776 * 2.0;
        float _781 = (1.0 - _776) / (_776 + 1.0);
        float _3413 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _791 = ((((1.0 - _782) * (_777 + 2.0)) * exp2(log2(isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * (_777 + 1.0))) + _782) * _704;
        float _792 = _672 * 0.5;
        float _793 = _682 * 0.5;
        float _794 = _692 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _808 = (dot(vec3(_327, _328, _329), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3424 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _817 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3435 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3446 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) * (_819 + 1.0))) + _824) * _705;
        _841 = _672;
        _843 = _671;
        _844 = _670;
        _845 = _682;
        _846 = _681;
        _847 = _680;
        _848 = _692;
        _849 = _691;
        _850 = _690;
        _851 = _705;
        _852 = _704;
        _853 = _703;
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0)));
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
    }
    else
    {
        _841 = _842;
        _843 = _842;
        _844 = _842;
        _845 = _842;
        _846 = _842;
        _847 = _842;
        _848 = _842;
        _849 = _842;
        _850 = _842;
        _851 = _842;
        _852 = _842;
        _853 = _842;
        _854 = 0.0;
        _855 = 0.0;
        _856 = 0.0;
    }
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _882 = fma(_539, cbModelParam._m0[30u].z, fma(_535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _531));
        float _886 = fma(_539, cbModelParam._m0[31u].z, fma(_535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _531));
        float _890 = fma(_539, cbModelParam._m0[32u].z, fma(_535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _531));
        float _913 = _531 + _327;
        float _914 = _535 + _328;
        float _915 = _539 + _329;
        float _925 = fma(_915, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913)) - _882;
        float _926 = fma(_915, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913)) - _886;
        float _927 = fma(_915, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913)) - _890;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_882 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_886 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[35u].z) + ((((((_890 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _981 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_948.x + (-0.5));
        float _983 = _981 * (_948.y + (-0.5));
        float _984 = _981 * (_948.z + (-0.5));
        float _991 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_955.x + (-0.5));
        float _993 = _991 * (_955.y + (-0.5));
        float _994 = _991 * (_955.z + (-0.5));
        float _1001 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_962.x + (-0.5));
        float _1003 = _1001 * (_962.y + (-0.5));
        float _1004 = _1001 * (_962.z + (-0.5));
        float _1011 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_969.x + (-0.5));
        float _1013 = _1011 * (_969.y + (-0.5));
        float _1014 = _1011 * (_969.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_327, _328, _329), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3487 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3498 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3509 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * (_1045 + 1.0))) + _1050) * _1015;
        float _1060 = _983 * 0.5;
        float _1061 = _993 * 0.5;
        float _1062 = _1003 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_327, _328, _329), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3542 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1087 + 1.0))) + _1092) * _1016;
        float _1102 = _984 * 0.5;
        float _1103 = _994 * 0.5;
        float _1104 = _1004 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_327, _328, _329), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3575 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1129 + 1.0))) + _1134) * _1017;
        _1151 = _984;
        _1152 = _983;
        _1153 = _982;
        _1154 = _994;
        _1155 = _993;
        _1156 = _992;
        _1157 = _1004;
        _1158 = _1003;
        _1159 = _1002;
        _1160 = _1017;
        _1161 = _1016;
        _1162 = _1015;
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _842;
        _1152 = _842;
        _1153 = _842;
        _1154 = _842;
        _1155 = _842;
        _1156 = _842;
        _1157 = _842;
        _1158 = _842;
        _1159 = _842;
        _1160 = _842;
        _1161 = _842;
        _1162 = _842;
        _1163 = 0.0;
        _1164 = 0.0;
        _1165 = 0.0;
    }
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _855)) + _855;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1198 = fma(_1177, cbSceneParam._m0[89u].z, fma(_1176, cbSceneParam._m0[89u].y, _1175 * cbSceneParam._m0[89u].x));
    float _1201 = fma(_1177, cbSceneParam._m0[90u].z, fma(_1176, cbSceneParam._m0[90u].y, _1175 * cbSceneParam._m0[90u].x));
    float _1204 = fma(_1177, cbSceneParam._m0[91u].z, fma(_1176, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1175));
    float _1219 = _479 * 0.5;
    float _1220 = _480 * 0.5;
    float _1221 = _481 * 0.5;
    float _1222 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1225 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1228 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1262;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1235 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_841, _845, _848, _851));
        float _1239 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_843, _846, _849, _852));
        float _1243 = dot(vec4(_1219, _1220, _1221, 1.0), vec4(_844, _847, _850, _853));
        float _1250 = dot(vec4(cbModelParam._m0[39u]), vec4(_1219, _1220, _1221, 1.0));
        _1262 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1250) ? 0.0 : (isnan(0.0) ? _1250 : max(0.0, _1250))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1262 = 1.0;
    }
    float _1273;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1264 = dot(vec4(cbModelParam._m0[40u]), vec4(_1219, _1220, _1221, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1264) ? 0.0 : (isnan(0.0) ? _1264 : max(0.0, _1264))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1277 = (_1273 * cbModelParam._m0[1u].x) + (_1262 * (1.0 - cbModelParam._m0[1u].x));
    float _1287 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _331);
    float _1288 = isnan(_1287) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1287 : min(cbModelParam._m0[25u].z, _1287));
    float _1370;
    float _1372;
    float _1374;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1337 = fma(_539, cbModelParam._m0[13u].z, fma(_535, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531)) + cbModelParam._m0[13u].w;
        float _1341 = fma(_539, cbModelParam._m0[14u].z, fma(_535, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531)) + cbModelParam._m0[14u].w;
        float _1345 = fma(_539, cbModelParam._m0[15u].z, fma(_535, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531)) + cbModelParam._m0[15u].w;
        float _1348 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1351 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1354 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1382;
        if (_1348 > 0.0)
        {
            _1382 = abs((1.0 - _1337) / _1348);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1337 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1382 = frontier_phi_14_12_ladder;
        }
        float _1637;
        if (_1351 > 0.0)
        {
            _1637 = abs((1.0 - _1341) / _1351);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1341 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1637 = frontier_phi_23_19_ladder;
        }
        float _1883;
        if (_1354 > 0.0)
        {
            _1883 = abs((1.0 - _1345) / _1354);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1345 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1883 = frontier_phi_35_30_ladder;
        }
        float _1885 = isnan(_1637) ? _1382 : (isnan(_1382) ? _1637 : min(_1382, _1637));
        float _1886 = isnan(_1883) ? _1885 : (isnan(_1885) ? _1883 : min(_1885, _1883));
        float _1890 = (_1886 * _1348) + _1337;
        float _1891 = (_1886 * _1351) + _1341;
        float _1892 = (_1886 * _1354) + _1345;
        float _1893 = _1886 * 9.9999997473787516355514526367188e-05;
        float _1895 = (-1.0) - _1893;
        float _1897 = _1893 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1892 > _1897) || ((_1892 < _1895) || ((_1891 > _1897) || ((_1891 < _1895) || ((_1890 < _1895) || (_1890 > _1897))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1892, cbModelParam._m0[9u].z, fma(_1891, cbModelParam._m0[9u].y, _1890 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1892, cbModelParam._m0[10u].z, fma(_1891, cbModelParam._m0[10u].y, _1890 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1892, cbModelParam._m0[11u].z, fma(_1891, cbModelParam._m0[11u].y, _1890 * cbModelParam._m0[11u].x))), _1288);
            frontier_phi_13_35_ladder = _2016.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2016.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2016.x * cbModelParam._m0[1u].y;
        }
        _1370 = frontier_phi_13_35_ladder_2;
        _1372 = frontier_phi_13_35_ladder_1;
        _1374 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1288);
        _1370 = _1358.x * cbModelParam._m0[1u].y;
        _1372 = _1358.y * cbModelParam._m0[1u].y;
        _1374 = _1358.z * cbModelParam._m0[1u].y;
    }
    float _1378 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _331);
    float _1379 = isnan(_1378) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1378 : min(cbModelParam._m0[25u].w, _1378));
    float _1472;
    float _1474;
    float _1476;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1436 = fma(_539, cbModelParam._m0[21u].z, fma(_535, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531)) + cbModelParam._m0[21u].w;
        float _1440 = fma(_539, cbModelParam._m0[22u].z, fma(_535, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531)) + cbModelParam._m0[22u].w;
        float _1444 = fma(_539, cbModelParam._m0[23u].z, fma(_535, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531)) + cbModelParam._m0[23u].w;
        float _1447 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1450 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1453 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1642;
        if (_1447 > 0.0)
        {
            _1642 = abs((1.0 - _1436) / _1447);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1436 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1642 = frontier_phi_25_21_ladder;
        }
        float _1910;
        if (_1450 > 0.0)
        {
            _1910 = abs((1.0 - _1440) / _1450);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1440 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1910 = frontier_phi_37_32_ladder;
        }
        float _2115;
        if (_1453 > 0.0)
        {
            _2115 = abs((1.0 - _1444) / _1453);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1444 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2115 = frontier_phi_46_43_ladder;
        }
        float _2117 = isnan(_1910) ? _1642 : (isnan(_1642) ? _1910 : min(_1642, _1910));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1447) + _1436;
        float _2123 = (_2118 * _1450) + _1440;
        float _2124 = (_2118 * _1453) + _1444;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2125;
        float _2128 = _2125 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2124 > _2128) || ((_2124 < _2126) || ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 < _2126) || (_2122 > _2128))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2124, cbModelParam._m0[17u].z, fma(_2123, cbModelParam._m0[17u].y, _2122 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2124, cbModelParam._m0[18u].z, fma(_2123, cbModelParam._m0[18u].y, _2122 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2124, cbModelParam._m0[19u].z, fma(_2123, cbModelParam._m0[19u].y, _2122 * cbModelParam._m0[19u].x))), _1379);
            frontier_phi_22_46_ladder = _2325.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2325.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2325.x * cbModelParam._m0[1u].z;
        }
        _1472 = frontier_phi_22_46_ladder_2;
        _1474 = frontier_phi_22_46_ladder_1;
        _1476 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1379);
        _1472 = _1456.x * cbModelParam._m0[1u].z;
        _1474 = _1456.y * cbModelParam._m0[1u].z;
        _1476 = _1456.z * cbModelParam._m0[1u].z;
    }
    float _1488 = ((((1.0 - _499) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_499 * _487)) * _471;
    float _1489 = _1488 * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1490 = _1488 * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1491 = _1488 * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, _1489 * cbSceneParam._m0[91u].x));
    vec4 _1526 = texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _531), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _539)));
    vec4 _1536 = texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _531), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _539)));
    float _1545 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - _1526.x));
    float _3701 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1550 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - _1536.x));
    float _3712 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1552 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)));
    uvec4 _1556 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1558 = _1556.x * 14u;
    uint _1559 = _1558 + 13u;
    float _1566 = _471 + (-1.0);
    float _1571 = (cbLight._m0[_1559].x * _1566) + 1.0;
    float _1572 = (cbLight._m0[_1559].y * _1566) + 1.0;
    float _1573 = (cbLight._m0[_1559].z * _1566) + 1.0;
    float _1574 = (cbLight._m0[_1559].w * _1566) + 1.0;
    uint _1575 = _1558 + 5u;
    float _1581 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1585 = _1558 + 4u;
    float _1595 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1599 = _1558 | 1u;
    float _1610 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_327, _328, _329));
    float _1613 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_327, _328, _329));
    float _3733 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _3744 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1618 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.3183098733425140380859375;
    float _1620 = (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.3183098733425140380859375;
    float _1627 = ((cbLight._m0[_1575].x * _1581) * _1620) + (((cbLight._m0[_1585].x * _1552) * _1595) * _1618);
    float _1628 = ((_1581 * cbLight._m0[_1575].y) * _1620) + (((cbLight._m0[_1585].y * _1552) * _1595) * _1618);
    float _1629 = ((_1581 * cbLight._m0[_1575].z) * _1620) + (((cbLight._m0[_1585].z * _1552) * _1595) * _1618);
    uvec4 _1634 = floatBitsToUint(cbLight._m0[_1558 + 12u]);
    bool _1636 = _1634.x == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1636)
    {
        _1647 = _1627;
        _1649 = _1628;
        _1651 = _1629;
    }
    else
    {
        uint _1655 = _1558 + 6u;
        float _1671 = (dot(vec3(cbLight._m0[_1558 + 2u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _1672 = _1671 * _1671;
        float _3755 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1674 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1647 = (((cbLight._m0[_1655].x * 0.3183098733425140380859375) * _1673) * _1674) + _1627;
        _1649 = (((cbLight._m0[_1655].y * 0.3183098733425140380859375) * _1673) * _1674) + _1628;
        _1651 = (((cbLight._m0[_1655].z * 0.3183098733425140380859375) * _1673) * _1674) + _1629;
    }
    bool _1654 = _1634.y == 0u;
    float _1692;
    float _1694;
    float _1696;
    if (_1654)
    {
        _1692 = _1647;
        _1694 = _1649;
        _1696 = _1651;
    }
    else
    {
        uint _1854 = _1558 + 7u;
        float _1870 = (dot(vec3(cbLight._m0[_1558 + 3u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3771 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1873 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1692 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1647;
        _1694 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1649;
        _1696 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1651;
    }
    uint _1699 = _1558 + 8u;
    float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _331) * 0.949999988079071044921875);
    float _1713 = _1712 * _1712;
    float _1714 = cbLight._m0[_1558].x + _397;
    float _1715 = cbLight._m0[_1558].y + _398;
    float _1716 = cbLight._m0[_1558].z + _399;
    float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
    float _1721 = _1720 * _1714;
    float _1722 = _1720 * _1715;
    float _1723 = _1720 * _1716;
    float _1724 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1558].xyz));
    float _3787 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1728 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1729 = dot(vec3(_327, _328, _329), vec3(_1721, _1722, _1723));
    float _3809 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _1732 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1733 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1721, _1722, _1723));
    float _3820 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1737 = _1713 * _1713;
    float _1741 = ((_1732 * _1732) * (_1737 + (-1.0))) + 1.0;
    float _1752 = (exp2(log2(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1753 = 1.0 - _1713;
    float _1764 = (0.5 / (((_1728 * ((_1727 * _1753) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1753) + _1713) * _1727))) * _1727;
    float _3831 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1766 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1737 / ((_1741 * _1741) * 3.141590118408203125));
    uint _1780 = _1558 + 9u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1599].w)) * _331) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1599].x + _397;
    float _1794 = cbLight._m0[_1599].y + _398;
    float _1795 = cbLight._m0[_1599].z + _399;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1599].xyz));
    float _3842 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1807 = dot(vec3(_327, _328, _329), vec3(_1800, _1801, _1802));
    float _3853 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1811 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1800, _1801, _1802));
    float _3864 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1815 = _1792 * _1792;
    float _1819 = ((_1810 * _1810) * (_1815 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1792;
    float _1839 = (0.5 / (((_1728 * ((_1806 * _1829) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1829) + _1792) * _1806))) * _1806;
    float _3875 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1815 / ((_1819 * _1819) * 3.141590118408203125));
    float _1851 = (((_1828 * cbLight._m0[_1780].x) * _1841) * _1581) + ((((cbLight._m0[_1699].x * _1552) * _1752) * _1766) * _1595);
    float _1852 = (((_1828 * cbLight._m0[_1780].y) * _1841) * _1581) + ((((cbLight._m0[_1699].y * _1552) * _1752) * _1766) * _1595);
    float _1853 = (((_1828 * cbLight._m0[_1780].z) * _1841) * _1581) + ((((cbLight._m0[_1699].z * _1552) * _1752) * _1766) * _1595);
    float _1915;
    float _1917;
    float _1919;
    if (_1636)
    {
        _1915 = _1851;
        _1917 = _1852;
        _1919 = _1853;
    }
    else
    {
        uint _1921 = _1558 + 2u;
        uint _1925 = _1558 + 10u;
        float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _331) * 0.949999988079071044921875);
        float _1940 = _1939 * _1939;
        float _1941 = cbLight._m0[_1921].x + _397;
        float _1942 = cbLight._m0[_1921].y + _398;
        float _1943 = cbLight._m0[_1921].z + _399;
        float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
        float _1948 = _1947 * _1941;
        float _1949 = _1947 * _1942;
        float _1950 = _1947 * _1943;
        float _1951 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1921].xyz));
        float _3886 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1954 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1955 = dot(vec3(_327, _328, _329), vec3(_1948, _1949, _1950));
        float _3897 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_1948, _1949, _1950));
        float _3908 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1963 = _1940 * _1940;
        float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
        float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1977 = 1.0 - _1940;
        float _1987 = (0.5 / (((_1728 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _1977) + _1940) * _1954))) * _1954;
        float _3919 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1989 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
        float _1990 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1915 = (((_1976 * cbLight._m0[_1925].x) * _1989) * _1990) + _1851;
        _1917 = (((_1976 * cbLight._m0[_1925].y) * _1989) * _1990) + _1852;
        _1919 = (((_1976 * cbLight._m0[_1925].z) * _1989) * _1990) + _1853;
    }
    float _2025;
    float _2027;
    float _2029;
    if (_1654)
    {
        _2025 = _1915;
        _2027 = _1917;
        _2029 = _1919;
    }
    else
    {
        uint _2036 = _1558 + 3u;
        uint _2040 = _1558 + 11u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _331) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _397;
        float _2057 = cbLight._m0[_2036].y + _398;
        float _2058 = cbLight._m0[_2036].z + _399;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_2036].xyz));
        float _3935 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2070 = dot(vec3(_327, _328, _329), vec3(_2063, _2064, _2065));
        float _3946 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _3957 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2092 = 1.0 - _2055;
        float _2102 = (0.5 / (((_1728 * ((_2069 * _2092) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1728 * _2092) + _2055) * _2069))) * _2069;
        float _3968 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _2025 = (((_2091 * cbLight._m0[_2040].x) * _2104) * _2105) + _1915;
        _2027 = (((_2091 * cbLight._m0[_2040].y) * _2104) * _2105) + _1917;
        _2029 = (((_2091 * cbLight._m0[_2040].z) * _2104) * _2105) + _1919;
    }
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    if (_1556.y == 0u)
    {
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2180;
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2180;
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2180;
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.x;
        uint _2207 = uint((float(_2195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2196))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2196)));
        float _2217 = (log2(_2183 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2218 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        uint _2221 = uint(isnan(14.0) ? _2218 : (isnan(_2218) ? 14.0 : min(_2218, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2221 << 2u) + (_2207 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2195.z;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
        }
        else
        {
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            uint _2480 = 0u;
            uint _2489;
            bool _2490;
            for (;;)
            {
                _2489 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2480 << 2u)) >> 2u)).x;
                _2490 = _2489 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2490)
                {
                    frontier_phi_61_pred = _2474;
                    frontier_phi_61_pred_1 = _2479;
                    frontier_phi_61_pred_2 = _2478;
                    frontier_phi_61_pred_3 = _2477;
                    frontier_phi_61_pred_4 = _2476;
                    frontier_phi_61_pred_5 = _2475;
                }
                else
                {
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    uint _2604;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2478;
                    _2603 = _2479;
                    _2604 = _2489;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    for (;;)
                    {
                        uint _2608 = uint(findLSB(_2604)) + (_2480 << 5u);
                        uint _2605 = (_2604 + 4294967295u) & _2604;
                        uint _2610 = _2608 * 48u;
                        vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2630 = (_2608 * 48u) + 4u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2630)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2630 + 3u)).x));
                        uint _2649 = (_2608 * 48u) + 8u;
                        vec3 _2660 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x));
                        float _2664 = _2624.x - _2181;
                        float _2665 = _2624.y - _2182;
                        float _2666 = _2624.z - _2183;
                        float _2667 = dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666));
                        float _2670 = inversesqrt(_2667);
                        float _2671 = _2670 * _2664;
                        float _2672 = _2670 * _2665;
                        float _2673 = _2670 * _2666;
                        float _2674 = dot(vec3(_426, _429, _432), vec3(_2671, _2672, _2673));
                        float _2679 = 1.0 - (_2667 * _2624.w);
                        float _3994 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2680 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2681 = sqrt(_2667) * _2643.w;
                        float _2684 = 1.39999997615814208984375 / (_2681 + 1.39999997615814208984375);
                        float _2685 = _2684 * _2684;
                        float _2688 = ((1.0 - _2685) * _2674) + _2685;
                        float _2691 = _2681 * _2681;
                        float _2695 = ((isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))) * _2680) / ((_2691 * 0.699999988079071044921875) + 1.0);
                        float _2699 = (-0.0) - _2181;
                        float _2700 = (-0.0) - _2182;
                        float _2701 = (-0.0) - _2183;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2706 = _2705 * _2699;
                        float _2707 = _2705 * _2700;
                        float _2708 = _2705 * _2701;
                        float _2716 = exp2(log2(1.0 / ((_2691 * 3.5) + 5.0)) * 0.25);
                        float _2717 = 1.0 - _487;
                        float _2724 = sqrt(1.0 - ((1.0 - (_2717 * _2717)) * (1.0 - (_2716 * _2716))));
                        float _2725 = _2724 * _2724;
                        float _2726 = _2725 * _2725;
                        float _2727 = _2706 + _2671;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
                        float _2737 = dot(vec3(_426, _429, _432), vec3(_2706, _2707, _2708));
                        float _4010 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2740 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2741 = dot(vec3(_426, _429, _432), vec3(_2733 * _2727, _2733 * _2728, _2733 * _2729));
                        float _4021 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2744 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2748 = ((_2744 * _2744) * (_2726 + (-1.0))) + 1.0;
                        float _2749 = _2684 * _2725;
                        float _2750 = _2749 * _2749;
                        float _2753 = ((1.0 - _2750) * _2674) + _2750;
                        float _4032 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2755 = 1.0 - _2725;
                        float _2765 = (0.5 / (((_2754 * ((_2740 * _2755) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2754 * _2755) + _2725) * _2740))) * _2754;
                        float _4043 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2776 = (((_2726 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_2748 * _2748) * ((_2691 * 2.1991131305694580078125) + 3.141590118408203125))) * _2680;
                        _2533 = (_2695 * _2643.x) + _2601;
                        _2534 = (_2695 * _2643.y) + _2602;
                        _2535 = (_2695 * _2643.z) + _2603;
                        _2530 = (_2776 * _2660.x) + _2598;
                        _2531 = (_2776 * _2660.y) + _2599;
                        _2532 = (_2776 * _2660.z) + _2600;
                        if (_2605 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2534;
                            _2603 = _2535;
                            _2604 = _2605;
                        }
                    }
                    frontier_phi_61_pred = _2530;
                    frontier_phi_61_pred_1 = _2535;
                    frontier_phi_61_pred_2 = _2534;
                    frontier_phi_61_pred_3 = _2533;
                    frontier_phi_61_pred_4 = _2532;
                    frontier_phi_61_pred_5 = _2531;
                }
                _2331 = frontier_phi_61_pred;
                _2341 = frontier_phi_61_pred_1;
                _2339 = frontier_phi_61_pred_2;
                _2337 = frontier_phi_61_pred_3;
                _2335 = frontier_phi_61_pred_4;
                _2333 = frontier_phi_61_pred_5;
                uint _2481 = _2480 + 1u;
                if (_2481 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2474 = _2331;
                    _2475 = _2333;
                    _2476 = _2335;
                    _2477 = _2337;
                    _2478 = _2339;
                    _2479 = _2341;
                    _2480 = _2481;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
        }
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.z;
        uint _2347 = (_2345 >> 8u) & 15u;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        if (((4294967295u << _2347) & _2227) == 0u)
        {
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
            _2452 = _2340;
        }
        else
        {
            float _2467 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
            float _2468 = _2467 * _2181;
            float _2469 = _2467 * _2182;
            float _2470 = _2467 * _2183;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2347 < ((_2345 >> 12u) & 15u))
            {
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2581 = _2330;
                float _2582 = _2332;
                float _2583 = _2334;
                float _2584 = _2336;
                float _2585 = _2338;
                float _2586 = _2340;
                uint _2587 = _2347;
                uint _2596;
                bool _2597;
                for (;;)
                {
                    _2596 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                    _2597 = _2596 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2597)
                    {
                        frontier_phi_67_pred = _2584;
                        frontier_phi_67_pred_1 = _2585;
                        frontier_phi_67_pred_2 = _2586;
                        frontier_phi_67_pred_3 = _2583;
                        frontier_phi_67_pred_4 = _2582;
                        frontier_phi_67_pred_5 = _2581;
                    }
                    else
                    {
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        float _2798 = _2585;
                        float _2799 = _2586;
                        uint _2800 = _2596;
                        uint _2801;
                        vec4 _2826;
                        float _2827;
                        vec4 _2842;
                        vec3 _2854;
                        vec4 _2870;
                        vec4 _2886;
                        float _2933;
                        bool _2934;
                        for (;;)
                        {
                            uint _2811 = ((_2587 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2800));
                            _2801 = (_2800 + 4294967295u) & _2800;
                            uint _2813 = _2811 * 40u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            _2827 = _2826.w;
                            uint _2829 = (_2811 * 40u) + 4u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2844 = (_2811 * 40u) + 8u;
                            _2854 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x));
                            uint _2857 = (_2811 * 40u) + 16u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2873 = (_2811 * 40u) + 20u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2889 = (_2811 * 40u) + 24u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2908 = (_2811 * 40u) + 28u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            _2933 = fma(_2183, _2921.z, fma(_2182, _2921.y, _2921.x * _2181)) + _2921.w;
                            _2934 = !((fma(_2183, _2902.z, fma(_2182, _2902.y, _2902.x * _2181)) + _2902.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2934)
                            {
                                float _2961 = _2826.x - _2181;
                                float _2962 = _2826.y - _2182;
                                float _2963 = _2826.z - _2183;
                                float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                                float _2967 = inversesqrt(_2964);
                                float _2968 = _2967 * _2961;
                                float _2969 = _2967 * _2962;
                                float _2970 = _2967 * _2963;
                                float _2974 = 1.0 - (_2964 / (_2827 * _2827));
                                float _4054 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2975 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _2979 = sqrt(_2964) * _2842.w;
                                float _2981 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                                float _2982 = _2981 * _2981;
                                float _2985 = ((1.0 - _2982) * dot(vec3(_2968, _2969, _2970), vec3(_426, _429, _432))) + _2982;
                                float _2988 = _2979 * _2979;
                                float _2992 = (fma(_2183, _2870.z, fma(_2182, _2870.y, _2870.x * _2181)) + _2870.w) / _2933;
                                float _2993 = (fma(_2183, _2886.z, fma(_2182, _2886.y, _2886.x * _2181)) + _2886.w) / _2933;
                                float _2997 = 1.0 - dot(vec2(_2992, _2993), vec2(_2992, _2993));
                                float _4070 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _2999 = _2998 * (((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2975) / ((_2988 * 0.699999988079071044921875) + 1.0));
                                float _3011 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                                float _3012 = 1.0 - _487;
                                float _3019 = sqrt(1.0 - ((1.0 - (_3012 * _3012)) * (1.0 - (_3011 * _3011))));
                                float _3020 = _3019 * _3019;
                                float _3021 = _3020 * _3020;
                                float _3022 = _2968 - _2468;
                                float _3023 = _2969 - _2469;
                                float _3024 = _2970 - _2470;
                                float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                                float _3032 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2468, (-0.0) - _2469, (-0.0) - _2470));
                                float _4081 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3035 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3036 = dot(vec3(_426, _429, _432), vec3(_3028 * _3022, _3028 * _3023, _3028 * _3024));
                                float _4092 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3043 = ((_3039 * _3039) * (_3021 + (-1.0))) + 1.0;
                                float _3044 = _2981 * _3020;
                                float _3045 = _3044 * _3044;
                                float _3051 = ((1.0 - _3045) * dot(vec3(_426, _429, _432), vec3(_2968, _2969, _2970))) + _3045;
                                float _4103 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3053 = 1.0 - _3020;
                                float _3063 = (0.5 / (((_3052 * ((_3035 * _3053) + _3020)) + 9.9999999392252902907785028219223e-09) + (((_3052 * _3053) + _3020) * _3035))) * _3052;
                                float _4114 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3073 = (_2998 * _2975) * (((_3021 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_3043 * _3043) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3073 * _2854.x;
                                frontier_phi_73_pred_1 = _3073 * _2854.y;
                                frontier_phi_73_pred_2 = _2999 * _2842.z;
                                frontier_phi_73_pred_3 = _2999 * _2842.y;
                                frontier_phi_73_pred_4 = _2999 * _2842.x;
                                frontier_phi_73_pred_5 = _3073 * _2854.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3077 = frontier_phi_73_pred;
                            _3078 = frontier_phi_73_pred_1;
                            _3082 = frontier_phi_73_pred_2;
                            _3081 = frontier_phi_73_pred_3;
                            _3080 = frontier_phi_73_pred_4;
                            _3079 = frontier_phi_73_pred_5;
                            _2784 = _3080 + _2797;
                            _2785 = _3081 + _2798;
                            _2786 = _3082 + _2799;
                            _2781 = _3077 + _2794;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            if (_2801 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2801;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    _2449 = frontier_phi_67_pred;
                    _2451 = frontier_phi_67_pred_1;
                    _2453 = frontier_phi_67_pred_2;
                    _2447 = frontier_phi_67_pred_3;
                    _2445 = frontier_phi_67_pred_4;
                    _2443 = frontier_phi_67_pred_5;
                    uint _2588 = _2587 + 1u;
                    if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2581 = _2443;
                        _2582 = _2445;
                        _2583 = _2447;
                        _2584 = _2449;
                        _2585 = _2451;
                        _2586 = _2453;
                        _2587 = _2588;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2451;
                frontier_phi_55_56_ladder_1 = _2453;
                frontier_phi_55_56_ladder_2 = _2449;
                frontier_phi_55_56_ladder_3 = _2447;
                frontier_phi_55_56_ladder_4 = _2445;
                frontier_phi_55_56_ladder_5 = _2443;
            }
            else
            {
                frontier_phi_55_56_ladder = _2338;
                frontier_phi_55_56_ladder_1 = _2340;
                frontier_phi_55_56_ladder_2 = _2336;
                frontier_phi_55_56_ladder_3 = _2334;
                frontier_phi_55_56_ladder_4 = _2332;
                frontier_phi_55_56_ladder_5 = _2330;
            }
            _2442 = frontier_phi_55_56_ladder_5;
            _2444 = frontier_phi_55_56_ladder_4;
            _2446 = frontier_phi_55_56_ladder_3;
            _2448 = frontier_phi_55_56_ladder_2;
            _2450 = frontier_phi_55_56_ladder;
            _2452 = frontier_phi_55_56_ladder_1;
        }
        float _2457 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2240 = (_2457 * _2448) + _1692;
        _2242 = (_2457 * _2450) + _1694;
        _2244 = (_2457 * _2452) + _1696;
        _2246 = ((_2442 * 0.039999999105930328369140625) * _2457) + _2025;
        _2248 = ((_2444 * 0.039999999105930328369140625) * _2457) + _2027;
        _2250 = ((_2446 * 0.039999999105930328369140625) * _2457) + _2029;
    }
    else
    {
        _2240 = _1692;
        _2242 = _1694;
        _2244 = _1696;
        _2246 = _2025;
        _2248 = _2027;
        _2250 = _2029;
    }
    float _4130 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4141 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4152 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4163 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _2275 = cbInstanceData._m0[_445 + 6u].w * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)));
    float _2280 = _404 / cbSceneParam._m0[86u].x;
    float _2281 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2295 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2297 = _2295.x;
    float _2298 = _2295.y;
    float _2299 = _2295.z;
    float _2300 = _2295.w;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2355 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2356 = _2355 / _339;
        float _2367 = _2356 * _390;
        float _2368 = _391 * _2356;
        float _2369 = (-0.0) - _2368;
        float _2370 = _2356 * _392;
        float _2372 = (cbSceneParam._m0[77u].w * _2369) / _2355;
        float _2373 = _2372 + cbSceneParam._m0[79u].w;
        float _2374 = cbSceneParam._m0[79u].w - _2368;
        float _2380 = sqrt(((_2367 * _2367) + (_2368 * _2368)) + (_2370 * _2370));
        float _2383 = (1.0 - (cbSceneParam._m0[77u].w / _2355)) * _2380;
        float _2388 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2390 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2543;
        if (abs((_2369 - _2372) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2543 = ((((_2373 > 0.0) ? exp2(_2388 * _2373) : (2.0 - exp2(_2390 * _2373))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2383;
        }
        else
        {
            float _2503 = 1.0 / cbSceneParam._m0[80u].x;
            float _2504 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : max(_2373, _2374));
            float _2505 = isnan(_2374) ? _2373 : (isnan(_2373) ? _2374 : min(_2373, _2374));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            float _2515 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : min(_2505, 0.0));
            _2543 = ((abs(_2380 / _2369) * cbSceneParam._m0[80u].y) * ((((_2514 - _2515) * 2.0) - ((exp2(_2388 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0)))) - exp2(_2388 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0))))) * _2503)) - ((exp2(_2390 * _2514) - exp2(_2390 * _2515)) * _2503))) + (_2383 * cbSceneParam._m0[80u].z);
        }
        vec4 _2545 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2280, _2281, 1.0), 0.0);
        float _2554 = exp2((_2543 * (-1.44269502162933349609375)) * (1.0 - _2545.w));
        float _2555 = log2(_2554);
        float _2571 = log2(_2300);
        _2392 = (exp2(_2571 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].x)) * _2545.x) / cbSceneParam._m0[78u].x)) + _2297;
        _2394 = (exp2(_2571 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].y)) * _2545.y) / cbSceneParam._m0[78u].y)) + _2298;
        _2396 = (exp2(_2571 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2555 * cbSceneParam._m0[78u].z)) * _2545.z) / cbSceneParam._m0[78u].z)) + _2299;
        _2398 = _2554 * _2300;
    }
    else
    {
        _2392 = _2297;
        _2394 = _2298;
        _2396 = _2299;
        _2398 = _2300;
    }
    float _2410 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2411 = _2410 == 3.0;
    float _2412 = log2(_2398);
    float _2419 = exp2(_2412 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2240 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _471))) + ((_2246 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2420 = exp2(_2412 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2242 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _471))) + ((_2248 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2421 = exp2(_2412 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2244 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _471))) + ((_2250 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1277)) * cbPerFrame._m0[3u].x));
    float _2430 = (_2410 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2430 * (_2411 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.y = _2430 * (_2411 ? _2420 : (_2420 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.z = _2430 * (_2411 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.w = _2275;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2275;
}


