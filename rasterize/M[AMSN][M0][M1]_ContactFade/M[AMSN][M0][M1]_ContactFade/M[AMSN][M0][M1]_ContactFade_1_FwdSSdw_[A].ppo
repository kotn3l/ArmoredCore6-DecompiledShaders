#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _889;
float _3353;
float _3354;
float _3355;
float _3356;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = _226.w;
    float _239 = cbMtdParam._m0[9u].x * _226.x;
    float _240 = cbMtdParam._m0[9u].y * _226.y;
    float _241 = cbMtdParam._m0[9u].z * _226.z;
    vec4 _254 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _256 = _254.x;
    bool _263 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _280 = ((_263 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _256)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _256))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3365 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _283 = 1.0 - (isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0)));
    float _3376 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _284 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
    float _292 = _232 - (((_284 * _284) * _232) * (3.0 - (_284 * 2.0)));
    vec4 _304 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _304.z;
    float _311 = (_304.x * 2.0) + (-1.0);
    float _313 = (_304.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3387 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _319 = sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))));
    float _322 = fma(_319, _202 * NORMAL.x, fma(_313, _209 * TANGENT.x, (_195 * _188) * _311));
    float _325 = fma(_319, _202 * NORMAL.y, fma(_313, _209 * TANGENT.y, (_195 * _189) * _311));
    float _328 = fma(_319, _202 * NORMAL.z, fma(_313, _209 * TANGENT.z, (_195 * _190) * _311));
    float _332 = inversesqrt(dot(vec3(_322, _325, _328), vec3(_322, _325, _328)));
    float _333 = _332 * _322;
    float _334 = _332 * _325;
    float _335 = _332 * _328;
    float _3398 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _336 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _337 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3431 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3442 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _345 = _263 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _386);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _386);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _386);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    vec4 _410 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _412 = _410.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _568 = sqrt(((_396 * _396) + (_397 * _397)) + (_398 * _398));
        float _574 = (cbMatDynParam._m0[5u].x * _568) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _579 = (cbMatDynParam._m0[5u].z * _568) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _575)) + _575) < ((_412 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_335, cbSceneParam._m0[5u].z, fma(_334, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _333));
    float _447 = fma(_335, cbSceneParam._m0[6u].z, fma(_334, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _333));
    float _450 = fma(_335, cbSceneParam._m0[7u].z, fma(_334, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _333));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3475 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _489 = _486.x * TEXCOORD.z;
    float _490 = dot(vec3(_333, _334, _335), vec3(_403, _404, _405));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _333) - _403;
    float _498 = (_493 * _334) - _404;
    float _499 = (_493 * _335) - _405;
    float _503 = abs(dot(vec3(_403, _404, _405), vec3(_333, _334, _335)));
    float _3508 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_337);
    float _517 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _617 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _621 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _646 = _549 + _333;
        float _647 = _553 + _334;
        float _648 = _557 + _335;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_333, _334, _335), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3556 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_333, _334, _335), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3589 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_333, _334, _335), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3622 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _936 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _940 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _963 = _549 + _333;
        float _964 = _553 + _334;
        float _965 = _557 + _335;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_333, _334, _335), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3685 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_333, _334, _335), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3718 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_333, _334, _335), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3751 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = _889;
        _1211 = _889;
        _1212 = _889;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _497 * 0.5;
    float _1270 = _498 * 0.5;
    float _1271 = _499 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_888, _892, _895, _898));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_890, _893, _896, _899));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _894, _897, _900));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _337);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1387 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1391 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1395 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1398 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1401 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1404 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1432;
        if (_1398 > 0.0)
        {
            _1432 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1432 = frontier_phi_17_15_ladder;
        }
        float _1728;
        if (_1401 > 0.0)
        {
            _1728 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1728 = frontier_phi_26_22_ladder;
        }
        float _1974;
        if (_1404 > 0.0)
        {
            _1974 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1974 = frontier_phi_38_33_ladder;
        }
        float _1976 = isnan(_1728) ? _1432 : (isnan(_1432) ? _1728 : min(_1432, _1728));
        float _1977 = isnan(_1974) ? _1976 : (isnan(_1976) ? _1974 : min(_1976, _1974));
        float _1981 = (_1977 * _1398) + _1387;
        float _1982 = (_1977 * _1401) + _1391;
        float _1983 = (_1977 * _1404) + _1395;
        float _1984 = _1977 * 9.9999997473787516355514526367188e-05;
        float _1986 = (-1.0) - _1984;
        float _1988 = _1984 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1983 > _1988) || ((_1983 < _1986) || ((_1982 > _1988) || ((_1982 < _1986) || ((_1981 < _1986) || (_1981 > _1988))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1983, cbModelParam._m0[9u].z, fma(_1982, cbModelParam._m0[9u].y, _1981 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1983, cbModelParam._m0[10u].z, fma(_1982, cbModelParam._m0[10u].y, _1981 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1983, cbModelParam._m0[11u].z, fma(_1982, cbModelParam._m0[11u].y, _1981 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1420 = frontier_phi_16_38_ladder_2;
        _1422 = frontier_phi_16_38_ladder_1;
        _1424 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1338);
        _1420 = _1408.x * cbModelParam._m0[1u].y;
        _1422 = _1408.y * cbModelParam._m0[1u].y;
        _1424 = _1408.z * cbModelParam._m0[1u].y;
    }
    float _1428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _337);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1428 : min(cbModelParam._m0[25u].w, _1428));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1500 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1503 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1733;
        if (_1497 > 0.0)
        {
            _1733 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1733 = frontier_phi_28_24_ladder;
        }
        float _2001;
        if (_1500 > 0.0)
        {
            _2001 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2001 = frontier_phi_40_35_ladder;
        }
        float _2206;
        if (_1503 > 0.0)
        {
            _2206 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2206 = frontier_phi_49_46_ladder;
        }
        float _2208 = isnan(_2001) ? _1733 : (isnan(_1733) ? _2001 : min(_1733, _2001));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1497) + _1486;
        float _2214 = (_2209 * _1500) + _1490;
        float _2215 = (_2209 * _1503) + _1494;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2216;
        float _2219 = _2216 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2215 > _2219) || ((_2215 < _2217) || ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 < _2217) || (_2213 > _2219))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2215, cbModelParam._m0[17u].z, fma(_2214, cbModelParam._m0[17u].y, _2213 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2215, cbModelParam._m0[18u].z, fma(_2214, cbModelParam._m0[18u].y, _2213 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2215, cbModelParam._m0[19u].z, fma(_2214, cbModelParam._m0[19u].y, _2213 * cbModelParam._m0[19u].x))), _1429);
            frontier_phi_25_49_ladder = _2416.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2416.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2416.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_25_49_ladder_2;
        _1524 = frontier_phi_25_49_ladder_1;
        _1526 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1429);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1538 = ((((1.0 - _517) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_517 * _505)) * _489;
    float _1539 = _1538 * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1540 = _1538 * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1541 = _1538 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    vec4 _1558 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1560 = _1558.w;
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1633 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1590), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1594))).x));
    float _3877 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1638 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1590), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1594))).x));
    float _3888 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1640 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)));
    float _1641 = _1640 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1560));
    float _1642 = _1640 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1560));
    float _1643 = _1640 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1560));
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1657 = _489 + (-1.0);
    float _1662 = (cbLight._m0[_1650].x * _1657) + 1.0;
    float _1663 = (cbLight._m0[_1650].y * _1657) + 1.0;
    float _1664 = (cbLight._m0[_1650].z * _1657) + 1.0;
    float _1665 = (cbLight._m0[_1650].w * _1657) + 1.0;
    uint _1666 = _1649 + 5u;
    float _1672 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1676 = _1649 + 4u;
    float _1686 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1690 = _1649 | 1u;
    float _1701 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_333, _334, _335));
    float _1704 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_333, _334, _335));
    float _3909 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _3920 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1709 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1711 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1718 = ((cbLight._m0[_1666].x * _1672) * _1711) + (((cbLight._m0[_1676].x * _1641) * _1686) * _1709);
    float _1719 = ((_1672 * cbLight._m0[_1666].y) * _1711) + (((cbLight._m0[_1676].y * _1642) * _1686) * _1709);
    float _1720 = ((_1672 * cbLight._m0[_1666].z) * _1711) + (((cbLight._m0[_1676].z * _1643) * _1686) * _1709);
    uvec4 _1725 = floatBitsToUint(cbLight._m0[_1649 + 12u]);
    bool _1727 = _1725.x == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1727)
    {
        _1738 = _1718;
        _1740 = _1719;
        _1742 = _1720;
    }
    else
    {
        uint _1746 = _1649 + 6u;
        float _1762 = (dot(vec3(cbLight._m0[_1649 + 2u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1763 = _1762 * _1762;
        float _3931 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1765 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1738 = (((cbLight._m0[_1746].x * 0.3183098733425140380859375) * _1764) * _1765) + _1718;
        _1740 = (((cbLight._m0[_1746].y * 0.3183098733425140380859375) * _1764) * _1765) + _1719;
        _1742 = (((cbLight._m0[_1746].z * 0.3183098733425140380859375) * _1764) * _1765) + _1720;
    }
    bool _1745 = _1725.y == 0u;
    float _1783;
    float _1785;
    float _1787;
    if (_1745)
    {
        _1783 = _1738;
        _1785 = _1740;
        _1787 = _1742;
    }
    else
    {
        uint _1945 = _1649 + 7u;
        float _1961 = (dot(vec3(cbLight._m0[_1649 + 3u].xyz), vec3(_333, _334, _335)) * 0.5) + 0.5;
        float _1962 = _1961 * _1961;
        float _3947 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1964 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _1783 = (((cbLight._m0[_1945].x * 0.3183098733425140380859375) * _1963) * _1964) + _1738;
        _1785 = (((cbLight._m0[_1945].y * 0.3183098733425140380859375) * _1963) * _1964) + _1740;
        _1787 = (((cbLight._m0[_1945].z * 0.3183098733425140380859375) * _1963) * _1964) + _1742;
    }
    uint _1790 = _1649 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1649].w)) * _337) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1649].x + _403;
    float _1806 = cbLight._m0[_1649].y + _404;
    float _1807 = cbLight._m0[_1649].z + _405;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1649].xyz));
    float _3963 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _1819 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1820 = dot(vec3(_333, _334, _335), vec3(_1812, _1813, _1814));
    float _3985 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1812, _1813, _1814));
    float _3996 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1844 = 1.0 - _1804;
    float _1855 = (0.5 / (((_1819 * ((_1818 * _1844) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1844) + _1804) * _1818))) * _1818;
    float _4007 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1871 = _1649 + 9u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _337) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1690].x + _403;
    float _1885 = cbLight._m0[_1690].y + _404;
    float _1886 = cbLight._m0[_1690].z + _405;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_1690].xyz));
    float _4018 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1898 = dot(vec3(_333, _334, _335), vec3(_1891, _1892, _1893));
    float _4029 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1891, _1892, _1893));
    float _4040 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1883 * _1883;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1920 = 1.0 - _1883;
    float _1930 = (0.5 / (((_1819 * ((_1897 * _1920) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1920) + _1883) * _1897))) * _1897;
    float _4051 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    float _1942 = (((_1919 * cbLight._m0[_1871].x) * _1932) * _1672) + ((((cbLight._m0[_1790].x * _1641) * _1843) * _1857) * _1686);
    float _1943 = (((_1919 * cbLight._m0[_1871].y) * _1932) * _1672) + ((((cbLight._m0[_1790].y * _1642) * _1843) * _1857) * _1686);
    float _1944 = (((_1919 * cbLight._m0[_1871].z) * _1932) * _1672) + ((((cbLight._m0[_1790].z * _1643) * _1843) * _1857) * _1686);
    float _2006;
    float _2008;
    float _2010;
    if (_1727)
    {
        _2006 = _1942;
        _2008 = _1943;
        _2010 = _1944;
    }
    else
    {
        uint _2012 = _1649 + 2u;
        uint _2016 = _1649 + 10u;
        float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _337) * 0.949999988079071044921875);
        float _2031 = _2030 * _2030;
        float _2032 = cbLight._m0[_2012].x + _403;
        float _2033 = cbLight._m0[_2012].y + _404;
        float _2034 = cbLight._m0[_2012].z + _405;
        float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
        float _2039 = _2038 * _2032;
        float _2040 = _2038 * _2033;
        float _2041 = _2038 * _2034;
        float _2042 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2012].xyz));
        float _4062 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2045 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2046 = dot(vec3(_333, _334, _335), vec3(_2039, _2040, _2041));
        float _4073 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2050 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2039, _2040, _2041));
        float _4084 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2054 = _2031 * _2031;
        float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
        float _2067 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2068 = 1.0 - _2031;
        float _2078 = (0.5 / (((_1819 * ((_2045 * _2068) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2068) + _2031) * _2045))) * _2045;
        float _4095 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2080 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
        float _2081 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2006 = (((_2067 * cbLight._m0[_2016].x) * _2080) * _2081) + _1942;
        _2008 = (((_2067 * cbLight._m0[_2016].y) * _2080) * _2081) + _1943;
        _2010 = (((_2067 * cbLight._m0[_2016].z) * _2080) * _2081) + _1944;
    }
    float _2116;
    float _2118;
    float _2120;
    if (_1745)
    {
        _2116 = _2006;
        _2118 = _2008;
        _2120 = _2010;
    }
    else
    {
        uint _2127 = _1649 + 3u;
        uint _2131 = _1649 + 11u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _337) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _403;
        float _2148 = cbLight._m0[_2127].y + _404;
        float _2149 = cbLight._m0[_2127].z + _405;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_333, _334, _335), vec3(cbLight._m0[_2127].xyz));
        float _4111 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2161 = dot(vec3(_333, _334, _335), vec3(_2154, _2155, _2156));
        float _4122 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4133 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2183 = 1.0 - _2146;
        float _2193 = (0.5 / (((_1819 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _2183) + _2146) * _2160))) * _2160;
        float _4144 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0));
        _2116 = (((_2182 * cbLight._m0[_2131].x) * _2195) * _2196) + _2006;
        _2118 = (((_2182 * cbLight._m0[_2131].y) * _2195) * _2196) + _2008;
        _2120 = (((_2182 * cbLight._m0[_2131].z) * _2195) * _2196) + _2010;
    }
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    if (_1647.y == 0u)
    {
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2271;
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2271;
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2271;
        uvec4 _2286 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2287 = _2286.x;
        uint _2298 = uint((float(_2286.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2287))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2287)));
        float _2308 = (log2(_2274 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2309 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        uint _2312 = uint(isnan(14.0) ? _2309 : (isnan(_2309) ? 14.0 : min(_2309, 14.0)));
        uvec4 _2317 = texelFetch(g_lightClusterGridBuffer, int(((_2312 << 2u) + (_2298 << 6u)) >> 2u));
        uint _2318 = _2317.x;
        uint _2319 = _2286.z;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        if (((((1u << ((_2319 >> 4u) & 15u)) + 4294967295u) & _2318) == 0u) || ((_2319 & 240u) == 0u))
        {
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
        }
        else
        {
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2430;
            float _2432;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            uint _2579 = 0u;
            uint _2588;
            bool _2589;
            for (;;)
            {
                _2588 = texelFetch(g_lightClassification, int((((_2312 << 5u) + (_2298 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                _2589 = _2588 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2589)
                {
                    frontier_phi_66_pred = _2573;
                    frontier_phi_66_pred_1 = _2578;
                    frontier_phi_66_pred_2 = _2577;
                    frontier_phi_66_pred_3 = _2576;
                    frontier_phi_66_pred_4 = _2575;
                    frontier_phi_66_pred_5 = _2574;
                }
                else
                {
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    uint _2724;
                    _2718 = _2573;
                    _2719 = _2574;
                    _2720 = _2575;
                    _2721 = _2576;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2588;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    for (;;)
                    {
                        uint _2728 = uint(findLSB(_2724)) + (_2579 << 5u);
                        uint _2725 = (_2724 + 4294967295u) & _2724;
                        uint _2730 = _2728 * 48u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2750 = (_2728 * 48u) + 4u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2769 = (_2728 * 48u) + 8u;
                        vec3 _2780 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x));
                        float _2784 = _2744.x - _2272;
                        float _2785 = _2744.y - _2273;
                        float _2786 = _2744.z - _2274;
                        float _2787 = dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786));
                        float _2790 = inversesqrt(_2787);
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2794 = dot(vec3(_444, _447, _450), vec3(_2791, _2792, _2793));
                        float _2799 = 1.0 - (_2787 * _2744.w);
                        float _4170 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2800 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2801 = sqrt(_2787) * _2763.w;
                        float _2804 = 1.39999997615814208984375 / (_2801 + 1.39999997615814208984375);
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2794) + _2805;
                        float _2811 = _2801 * _2801;
                        float _2815 = ((isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))) * _2800) / ((_2811 * 0.699999988079071044921875) + 1.0);
                        float _2819 = (-0.0) - _2272;
                        float _2820 = (-0.0) - _2273;
                        float _2821 = (-0.0) - _2274;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2836 = exp2(log2(1.0 / ((_2811 * 3.5) + 5.0)) * 0.25);
                        float _2837 = 1.0 - _505;
                        float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                        float _2845 = _2844 * _2844;
                        float _2846 = _2845 * _2845;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2857 = dot(vec3(_444, _447, _450), vec3(_2826, _2827, _2828));
                        float _4186 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2861 = dot(vec3(_444, _447, _450), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                        float _4197 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                        float _2869 = _2804 * _2845;
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2794) + _2870;
                        float _4208 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2875 = 1.0 - _2845;
                        float _2885 = (0.5 / (((_2874 * ((_2860 * _2875) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2874 * _2875) + _2845) * _2860))) * _2874;
                        float _4219 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2896 = (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2868 * _2868) * ((_2811 * 2.1991131305694580078125) + 3.141590118408203125))) * _2800;
                        _2648 = (_2815 * _2763.x) + _2721;
                        _2649 = (_2815 * _2763.y) + _2722;
                        _2650 = (_2815 * _2763.z) + _2723;
                        _2645 = (_2896 * _2780.x) + _2718;
                        _2646 = (_2896 * _2780.y) + _2719;
                        _2647 = (_2896 * _2780.z) + _2720;
                        if (_2725 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2648;
                            _2722 = _2649;
                            _2723 = _2650;
                            _2724 = _2725;
                        }
                    }
                    frontier_phi_66_pred = _2645;
                    frontier_phi_66_pred_1 = _2650;
                    frontier_phi_66_pred_2 = _2649;
                    frontier_phi_66_pred_3 = _2648;
                    frontier_phi_66_pred_4 = _2647;
                    frontier_phi_66_pred_5 = _2646;
                }
                _2422 = frontier_phi_66_pred;
                _2432 = frontier_phi_66_pred_1;
                _2430 = frontier_phi_66_pred_2;
                _2428 = frontier_phi_66_pred_3;
                _2426 = frontier_phi_66_pred_4;
                _2424 = frontier_phi_66_pred_5;
                uint _2580 = _2579 + 1u;
                if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2573 = _2422;
                    _2574 = _2424;
                    _2575 = _2426;
                    _2576 = _2428;
                    _2577 = _2430;
                    _2578 = _2432;
                    _2579 = _2580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
        }
        uvec4 _2435 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2436 = _2435.z;
        uint _2438 = (_2436 >> 8u) & 15u;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((4294967295u << _2438) & _2318) == 0u)
        {
            _2541 = _2421;
            _2543 = _2423;
            _2545 = _2425;
            _2547 = _2427;
            _2549 = _2429;
            _2551 = _2431;
        }
        else
        {
            float _2566 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
            float _2567 = _2566 * _2272;
            float _2568 = _2566 * _2273;
            float _2569 = _2566 * _2274;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2438 < ((_2436 >> 12u) & 15u))
            {
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2701 = _2421;
                float _2702 = _2423;
                float _2703 = _2425;
                float _2704 = _2427;
                float _2705 = _2429;
                float _2706 = _2431;
                uint _2707 = _2438;
                uint _2716;
                bool _2717;
                for (;;)
                {
                    _2716 = texelFetch(g_lightClassification, int((((_2312 << 5u) + (_2298 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                    _2717 = _2716 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2717)
                    {
                        frontier_phi_77_pred = _2706;
                        frontier_phi_77_pred_1 = _2705;
                        frontier_phi_77_pred_2 = _2704;
                        frontier_phi_77_pred_3 = _2703;
                        frontier_phi_77_pred_4 = _2702;
                        frontier_phi_77_pred_5 = _2701;
                    }
                    else
                    {
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2915;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _2923 = _2701;
                        float _2924 = _2702;
                        float _2925 = _2703;
                        float _2926 = _2704;
                        float _2927 = _2705;
                        float _2928 = _2706;
                        uint _2929 = _2716;
                        uint _2930;
                        vec4 _2955;
                        float _2956;
                        vec4 _2971;
                        vec3 _2983;
                        vec4 _2999;
                        vec4 _3015;
                        float _3062;
                        bool _3063;
                        for (;;)
                        {
                            uint _2940 = ((_2707 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2929));
                            _2930 = (_2929 + 4294967295u) & _2929;
                            uint _2942 = _2940 * 40u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            _2956 = _2955.w;
                            uint _2958 = (_2940 * 40u) + 4u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2973 = (_2940 * 40u) + 8u;
                            _2983 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x));
                            uint _2986 = (_2940 * 40u) + 16u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3002 = (_2940 * 40u) + 20u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2940 * 40u) + 24u;
                            vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3037 = (_2940 * 40u) + 28u;
                            vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3062 = fma(_2274, _3050.z, fma(_2273, _3050.y, _3050.x * _2272)) + _3050.w;
                            _3063 = !((fma(_2274, _3031.z, fma(_2273, _3031.y, _3031.x * _2272)) + _3031.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3063)
                            {
                                float _3090 = _2955.x - _2272;
                                float _3091 = _2955.y - _2273;
                                float _3092 = _2955.z - _2274;
                                float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                                float _3096 = inversesqrt(_3093);
                                float _3097 = _3096 * _3090;
                                float _3098 = _3096 * _3091;
                                float _3099 = _3096 * _3092;
                                float _3103 = 1.0 - (_3093 / (_2956 * _2956));
                                float _4230 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3104 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3108 = sqrt(_3093) * _2971.w;
                                float _3110 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                                float _3111 = _3110 * _3110;
                                float _3114 = ((1.0 - _3111) * dot(vec3(_3097, _3098, _3099), vec3(_444, _447, _450))) + _3111;
                                float _3117 = _3108 * _3108;
                                float _3121 = (fma(_2274, _2999.z, fma(_2273, _2999.y, _2999.x * _2272)) + _2999.w) / _3062;
                                float _3122 = (fma(_2274, _3015.z, fma(_2273, _3015.y, _3015.x * _2272)) + _3015.w) / _3062;
                                float _3126 = 1.0 - dot(vec2(_3121, _3122), vec2(_3121, _3122));
                                float _4246 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3128 = _3127 * (((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3104) / ((_3117 * 0.699999988079071044921875) + 1.0));
                                float _3140 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                                float _3141 = 1.0 - _505;
                                float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                                float _3149 = _3148 * _3148;
                                float _3150 = _3149 * _3149;
                                float _3151 = _3097 - _2567;
                                float _3152 = _3098 - _2568;
                                float _3153 = _3099 - _2569;
                                float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                                float _3161 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2567, (-0.0) - _2568, (-0.0) - _2569));
                                float _4257 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3165 = dot(vec3(_444, _447, _450), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                                float _4268 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3168 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                                float _3173 = _3110 * _3149;
                                float _3174 = _3173 * _3173;
                                float _3180 = ((1.0 - _3174) * dot(vec3(_444, _447, _450), vec3(_3097, _3098, _3099))) + _3174;
                                float _4279 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3182 = 1.0 - _3149;
                                float _3192 = (0.5 / (((_3181 * ((_3164 * _3182) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3149) * _3164))) * _3181;
                                float _4290 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3202 = (_3127 * _3104) * (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3172 * _3172) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3128 * _2971.y;
                                frontier_phi_83_pred_1 = _3128 * _2971.x;
                                frontier_phi_83_pred_2 = _3202 * _2983.z;
                                frontier_phi_83_pred_3 = _3202 * _2983.y;
                                frontier_phi_83_pred_4 = _3202 * _2983.x;
                                frontier_phi_83_pred_5 = _3128 * _2971.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3210 = frontier_phi_83_pred;
                            _3209 = frontier_phi_83_pred_1;
                            _3208 = frontier_phi_83_pred_2;
                            _3207 = frontier_phi_83_pred_3;
                            _3206 = frontier_phi_83_pred_4;
                            _3211 = frontier_phi_83_pred_5;
                            _2913 = _3209 + _2926;
                            _2914 = _3210 + _2927;
                            _2915 = _3211 + _2928;
                            _2910 = _3206 + _2923;
                            _2911 = _3207 + _2924;
                            _2912 = _3208 + _2925;
                            if (_2930 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2930;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2915;
                        frontier_phi_77_pred_1 = _2914;
                        frontier_phi_77_pred_2 = _2913;
                        frontier_phi_77_pred_3 = _2912;
                        frontier_phi_77_pred_4 = _2911;
                        frontier_phi_77_pred_5 = _2910;
                    }
                    _2552 = frontier_phi_77_pred;
                    _2550 = frontier_phi_77_pred_1;
                    _2548 = frontier_phi_77_pred_2;
                    _2546 = frontier_phi_77_pred_3;
                    _2544 = frontier_phi_77_pred_4;
                    _2542 = frontier_phi_77_pred_5;
                    uint _2708 = _2707 + 1u;
                    if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2701 = _2542;
                        _2702 = _2544;
                        _2703 = _2546;
                        _2704 = _2548;
                        _2705 = _2550;
                        _2706 = _2552;
                        _2707 = _2708;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2546;
                frontier_phi_58_59_ladder_1 = _2552;
                frontier_phi_58_59_ladder_2 = _2550;
                frontier_phi_58_59_ladder_3 = _2548;
                frontier_phi_58_59_ladder_4 = _2544;
                frontier_phi_58_59_ladder_5 = _2542;
            }
            else
            {
                frontier_phi_58_59_ladder = _2425;
                frontier_phi_58_59_ladder_1 = _2431;
                frontier_phi_58_59_ladder_2 = _2429;
                frontier_phi_58_59_ladder_3 = _2427;
                frontier_phi_58_59_ladder_4 = _2423;
                frontier_phi_58_59_ladder_5 = _2421;
            }
            _2541 = frontier_phi_58_59_ladder_5;
            _2543 = frontier_phi_58_59_ladder_4;
            _2545 = frontier_phi_58_59_ladder;
            _2547 = frontier_phi_58_59_ladder_3;
            _2549 = frontier_phi_58_59_ladder_2;
            _2551 = frontier_phi_58_59_ladder_1;
        }
        float _2556 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2331 = (_2556 * _2547) + _1783;
        _2333 = (_2556 * _2549) + _1785;
        _2335 = (_2556 * _2551) + _1787;
        _2337 = ((_2541 * 0.039999999105930328369140625) * _2556) + _2116;
        _2339 = ((_2543 * 0.039999999105930328369140625) * _2556) + _2118;
        _2341 = ((_2545 * 0.039999999105930328369140625) * _2556) + _2120;
    }
    else
    {
        _2331 = _1783;
        _2333 = _1785;
        _2335 = _1787;
        _2337 = _2116;
        _2339 = _2118;
        _2341 = _2120;
    }
    float _4306 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4317 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _4328 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4339 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _2359 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2331 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _489))) + ((_2337 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2360 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2333 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _489))) + ((_2339 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2361 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2335 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _489))) + ((_2341 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1327)) * cbPerFrame._m0[3u].x);
    float _2366 = cbInstanceData._m0[_463 + 6u].w * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)));
    float _2371 = _423 / cbSceneParam._m0[86u].x;
    float _2372 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2386 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2388 = _2386.x;
    float _2389 = _2386.y;
    float _2390 = _2386.z;
    float _2391 = _2386.w;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _2446 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _2447 = _2446 / _345;
        float _2458 = _2447 * _396;
        float _2459 = _397 * _2447;
        float _2460 = (-0.0) - _2459;
        float _2461 = _2447 * _398;
        float _2463 = (cbSceneParam._m0[77u].w * _2460) / _2446;
        float _2464 = _2463 + cbSceneParam._m0[79u].w;
        float _2465 = cbSceneParam._m0[79u].w - _2459;
        float _2471 = sqrt(((_2458 * _2458) + (_2459 * _2459)) + (_2461 * _2461));
        float _2474 = (1.0 - (cbSceneParam._m0[77u].w / _2446)) * _2471;
        float _2479 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2481 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2658;
        if (abs((_2460 - _2463) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2658 = ((((_2464 > 0.0) ? exp2(_2479 * _2464) : (2.0 - exp2(_2481 * _2464))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2474;
        }
        else
        {
            float _2602 = 1.0 / cbSceneParam._m0[80u].x;
            float _2603 = isnan(_2465) ? _2464 : (isnan(_2464) ? _2465 : max(_2464, _2465));
            float _2604 = isnan(_2465) ? _2464 : (isnan(_2464) ? _2465 : min(_2464, _2465));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            _2658 = ((abs(_2471 / _2460) * cbSceneParam._m0[80u].y) * ((((_2613 - _2614) * 2.0) - ((exp2(_2479 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)))) - exp2(_2479 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))))) * _2602)) - ((exp2(_2481 * _2613) - exp2(_2481 * _2614)) * _2602))) + (_2474 * cbSceneParam._m0[80u].z);
        }
        vec4 _2660 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, 1.0), 0.0);
        float _2669 = exp2((_2658 * (-1.44269502162933349609375)) * (1.0 - _2660.w));
        float _2670 = log2(_2669);
        float _2686 = log2(_2391);
        _2483 = (exp2(_2686 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].x)) * _2660.x) / cbSceneParam._m0[78u].x)) + _2388;
        _2485 = (exp2(_2686 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].y)) * _2660.y) / cbSceneParam._m0[78u].y)) + _2389;
        _2487 = (exp2(_2686 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2670 * cbSceneParam._m0[78u].z)) * _2660.z) / cbSceneParam._m0[78u].z)) + _2390;
        _2489 = _2669 * _2391;
    }
    else
    {
        _2483 = _2388;
        _2485 = _2389;
        _2487 = _2390;
        _2489 = _2391;
    }
    bool _2696;
    vec4 _2499;
    vec4 _2521;
    float _2523;
    float _2527;
    float _2528;
    float _2529;
    float _2530;
    bool _2540;
    for (;;)
    {
        _2499 = cbMatDynParam._m0[0u];
        float _2501 = roundEven(_2499.y);
        bool _2502 = _2501 == 3.0;
        float _2503 = log2(_2489);
        float _2510 = exp2(_2503 * cbSceneParam._m0[78u].x) * _2359;
        float _2511 = exp2(_2503 * cbSceneParam._m0[78u].y) * _2360;
        float _2512 = exp2(_2503 * cbSceneParam._m0[78u].z) * _2361;
        float _2519 = _412 + (-0.5);
        _2521 = cbMtdParam._m0[1u];
        _2523 = _2521.y * _2519;
        float _2526 = (_2501 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2527 = _2526 * (_2502 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2483)));
        _2528 = _2526 * (_2502 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2485)));
        _2529 = _2526 * (_2502 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2487)));
        _2530 = _2519 * 0.999000012874603271484375;
        _2540 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2540)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2530) < 0.5)
            {
                _2696 = true;
                break;
            }
        }
        uint _2637 = _465 + uint(_2499.w);
        if ((cbInstanceData._m0[_2637].w < 1.0) && ((cbInstanceData._m0[_2637].w + _2530) < 0.5))
        {
            _2696 = true;
            break;
        }
        if ((_2523 + 1.0) < _2521.x)
        {
            _2696 = true;
            break;
        }
        _2696 = false;
        break;
    }
    float _2901;
    if (_2696)
    {
        discard_state = true;
        _2901 = 0.0;
    }
    else
    {
        _2901 = _2366;
    }
    SV_Target.x = _2527;
    SV_Target.y = _2528;
    SV_Target.z = _2529;
    SV_Target.w = _2901;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2366;
    discard_exit();
}


