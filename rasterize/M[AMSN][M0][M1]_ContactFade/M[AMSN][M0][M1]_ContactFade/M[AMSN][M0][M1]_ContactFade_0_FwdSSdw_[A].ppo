#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _926;
float _3411;
float _3412;
float _3413;
float _3414;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _236 = _230.w;
    float _243 = cbMtdParam._m0[9u].x * _230.x;
    float _244 = cbMtdParam._m0[9u].y * _230.y;
    float _245 = cbMtdParam._m0[9u].z * _230.z;
    vec4 _258 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _260 = _258.x;
    bool _267 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _284 = ((_267 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _260)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _260))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3423 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _287 = 1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)));
    float _3434 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _296 = _236 - (((_288 * _288) * _236) * (3.0 - (_288 * 2.0)));
    vec4 _308 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _310 = _308.x;
    vec4 _322 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _326 = _322.z;
    float _329 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3445 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    float _340 = fma(_337, _206 * NORMAL.x, fma(_331, _213 * TANGENT.x, (_199 * _192) * _329));
    float _343 = fma(_337, _206 * NORMAL.y, fma(_331, _213 * TANGENT.y, (_199 * _193) * _329));
    float _346 = fma(_337, _206 * NORMAL.z, fma(_331, _213 * TANGENT.z, (_199 * _194) * _329));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    float _351 = _350 * _340;
    float _352 = _350 * _343;
    float _353 = _350 * _346;
    float _3456 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _354 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _355 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3489 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3500 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3511 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _359 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _364 = _267 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _415 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _405);
    float _416 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _405);
    float _417 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _405);
    float _421 = inversesqrt(dot(vec3(_415, _416, _417), vec3(_415, _416, _417)));
    float _422 = _415 * _421;
    float _423 = _416 * _421;
    float _424 = _417 * _421;
    vec4 _429 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _431 = _429.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _605 = sqrt(((_415 * _415) + (_416 * _416)) + (_417 * _417));
        float _611 = (cbMatDynParam._m0[5u].x * _605) + cbMatDynParam._m0[5u].y;
        float _3522 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _612 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _616 = (cbMatDynParam._m0[5u].z * _605) + cbMatDynParam._m0[5u].w;
        float _3533 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) - _612)) + _612) < ((_431 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_353, cbSceneParam._m0[5u].z, fma(_352, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _351));
    float _466 = fma(_353, cbSceneParam._m0[6u].z, fma(_352, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _351));
    float _469 = fma(_353, cbSceneParam._m0[7u].z, fma(_352, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _351));
    uint _482 = uint(roundEven(NORMAL.w)) * 13u;
    uint _484 = _482 + 9u;
    uint _485 = _484 + uint(cbMatDynParam._m0[0u].w);
    float _491 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_485].x;
    float _492 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_485].y;
    float _493 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_485].z;
    float _3544 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _495 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _497 = 1.0 - _359;
    float _498 = _494 * _497;
    float _499 = _495 * _497;
    float _500 = _496 * _497;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _359;
    float _506 = (_495 + (-0.039999999105930328369140625)) * _359;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _359;
    float _508 = _505 + 0.039999999105930328369140625;
    float _510 = _506 + 0.039999999105930328369140625;
    float _511 = _507 + 0.039999999105930328369140625;
    vec4 _520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _523 = _520.x * TEXCOORD.z;
    float _524 = dot(vec3(_351, _352, _353), vec3(_422, _423, _424));
    float _527 = _524 * 2.0;
    float _531 = (_527 * _351) - _422;
    float _532 = (_527 * _352) - _423;
    float _533 = (_527 * _353) - _424;
    float _537 = abs(dot(vec3(_422, _423, _424), vec3(_351, _352, _353)));
    float _3577 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _539 = sqrt(_355);
    float _551 = exp2((_539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _557 = (1.0 - _551) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _558 = _551 * _539;
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _925;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _650 = fma(_594, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586));
        float _654 = fma(_594, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586));
        float _658 = fma(_594, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586));
        float _683 = _586 + _351;
        float _684 = _590 + _352;
        float _685 = _594 + _353;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _650;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _654;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _658;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_650 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_654 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_658 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_719.x + (-0.5));
        float _755 = _753 * (_719.y + (-0.5));
        float _756 = _753 * (_719.z + (-0.5));
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_726.x + (-0.5));
        float _765 = _763 * (_726.y + (-0.5));
        float _766 = _763 * (_726.z + (-0.5));
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_733.x + (-0.5));
        float _775 = _773 * (_733.y + (-0.5));
        float _776 = _773 * (_733.z + (-0.5));
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = _754 * 0.5;
        float _791 = _764 * 0.5;
        float _792 = _774 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _807 = (dot(vec3(_351, _352, _353), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _817 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _819 = _818 * 2.0;
        float _823 = (1.0 - _818) / (_818 + 1.0);
        float _3625 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _833 = ((((1.0 - _824) * (_819 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_819 + 1.0))) + _824) * _787;
        float _834 = _755 * 0.5;
        float _835 = _765 * 0.5;
        float _836 = _775 * 0.5;
        float _837 = dot(vec3(_834, _835, _836), vec3(_834, _835, _836));
        float _842 = (_837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_837);
        float _850 = (dot(vec3(_351, _352, _353), vec3(_842 * _834, _842 * _835, _842 * _836)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _859 = sqrt(((_835 * _835) + (_834 * _834)) + (_836 * _836)) / (_788 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _861 = _860 * 2.0;
        float _865 = (1.0 - _860) / (_860 + 1.0);
        float _3658 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _875 = ((((1.0 - _866) * (_861 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_861 + 1.0))) + _866) * _788;
        float _876 = _756 * 0.5;
        float _877 = _766 * 0.5;
        float _878 = _776 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _892 = (dot(vec3(_351, _352, _353), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _901 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3691 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_903 + 1.0))) + _908) * _789;
        _925 = _756;
        _927 = _755;
        _928 = _754;
        _929 = _766;
        _930 = _765;
        _931 = _764;
        _932 = _776;
        _933 = _775;
        _934 = _774;
        _935 = _789;
        _936 = _788;
        _937 = _787;
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0)));
        _939 = cbModelParam._m0[36u].z * (isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0)));
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
    }
    else
    {
        _925 = _926;
        _927 = _926;
        _928 = _926;
        _929 = _926;
        _930 = _926;
        _931 = _926;
        _932 = _926;
        _933 = _926;
        _934 = _926;
        _935 = _926;
        _936 = _926;
        _937 = _926;
        _938 = 0.0;
        _939 = 0.0;
        _940 = 0.0;
    }
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _969 = fma(_594, cbModelParam._m0[30u].z, fma(_590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _586));
        float _973 = fma(_594, cbModelParam._m0[31u].z, fma(_590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _586));
        float _977 = fma(_594, cbModelParam._m0[32u].z, fma(_590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _586));
        float _1000 = _586 + _351;
        float _1001 = _590 + _352;
        float _1002 = _594 + _353;
        float _1012 = fma(_1002, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1000)) - _969;
        float _1013 = fma(_1002, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1000)) - _973;
        float _1014 = fma(_1002, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1000)) - _977;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_969 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_973 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[35u].z) + ((((((_977 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1068 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1035.x + (-0.5));
        float _1070 = _1068 * (_1035.y + (-0.5));
        float _1071 = _1068 * (_1035.z + (-0.5));
        float _1078 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1042.x + (-0.5));
        float _1080 = _1078 * (_1042.y + (-0.5));
        float _1081 = _1078 * (_1042.z + (-0.5));
        float _1088 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1049.x + (-0.5));
        float _1090 = _1088 * (_1049.y + (-0.5));
        float _1091 = _1088 * (_1049.z + (-0.5));
        float _1098 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1056.x + (-0.5));
        float _1100 = _1098 * (_1056.y + (-0.5));
        float _1101 = _1098 * (_1056.z + (-0.5));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = _1069 * 0.5;
        float _1106 = _1079 * 0.5;
        float _1107 = _1089 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_351, _352, _353), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3754 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1132 + 1.0))) + _1137) * _1102;
        float _1147 = _1070 * 0.5;
        float _1148 = _1080 * 0.5;
        float _1149 = _1090 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_351, _352, _353), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3787 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1174 + 1.0))) + _1179) * _1103;
        float _1189 = _1071 * 0.5;
        float _1190 = _1081 * 0.5;
        float _1191 = _1091 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_351, _352, _353), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3820 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1216 + 1.0))) + _1221) * _1104;
        _1238 = _1071;
        _1239 = _1070;
        _1240 = _1069;
        _1241 = _1081;
        _1242 = _1080;
        _1243 = _1079;
        _1244 = _1091;
        _1245 = _1090;
        _1246 = _1089;
        _1247 = _1104;
        _1248 = _1103;
        _1249 = _1102;
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _926;
        _1239 = _926;
        _1240 = _926;
        _1241 = _926;
        _1242 = _926;
        _1243 = _926;
        _1244 = _926;
        _1245 = _926;
        _1246 = _926;
        _1247 = _926;
        _1248 = _926;
        _1249 = _926;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _939)) + _939;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1285 = fma(_1264, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1262 * cbSceneParam._m0[89u].x));
    float _1288 = fma(_1264, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1262 * cbSceneParam._m0[90u].x));
    float _1291 = fma(_1264, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1262));
    float _1306 = _531 * 0.5;
    float _1307 = _532 * 0.5;
    float _1308 = _533 * 0.5;
    float _1309 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1312 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1315 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1349;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1322 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_925, _929, _932, _935));
        float _1326 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_927, _930, _933, _936));
        float _1330 = dot(vec4(_1306, _1307, _1308, 1.0), vec4(_928, _931, _934, _937));
        float _1337 = dot(vec4(cbModelParam._m0[39u]), vec4(_1306, _1307, _1308, 1.0));
        _1349 = dot(vec3(isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1349 = 1.0;
    }
    float _1360;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1351 = dot(vec4(cbModelParam._m0[40u]), vec4(_1306, _1307, _1308, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1351) ? 0.0 : (isnan(0.0) ? _1351 : max(0.0, _1351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1364 = (_1360 * cbModelParam._m0[1u].x) + (_1349 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _355);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1374 : min(cbModelParam._m0[25u].z, _1374));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_594, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _586)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_594, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _586)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_594, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _586)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_533, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531));
        float _1438 = fma(_533, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531));
        float _1441 = fma(_533, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531));
        float _1469;
        if (_1435 > 0.0)
        {
            _1469 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1469 = frontier_phi_17_15_ladder;
        }
        float _1767;
        if (_1438 > 0.0)
        {
            _1767 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1767 = frontier_phi_26_22_ladder;
        }
        float _2024;
        if (_1441 > 0.0)
        {
            _2024 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2024 = frontier_phi_38_33_ladder;
        }
        float _2026 = isnan(_1767) ? _1469 : (isnan(_1469) ? _1767 : min(_1469, _1767));
        float _2027 = isnan(_2024) ? _2026 : (isnan(_2026) ? _2024 : min(_2026, _2024));
        float _2031 = (_2027 * _1435) + _1424;
        float _2032 = (_2027 * _1438) + _1428;
        float _2033 = (_2027 * _1441) + _1432;
        float _2034 = _2027 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2034;
        float _2038 = _2034 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 > _2038) || ((_2032 < _2036) || ((_2031 < _2036) || (_2031 > _2038))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2033, cbModelParam._m0[9u].z, fma(_2032, cbModelParam._m0[9u].y, _2031 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2033, cbModelParam._m0[10u].z, fma(_2032, cbModelParam._m0[10u].y, _2031 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2033, cbModelParam._m0[11u].z, fma(_2032, cbModelParam._m0[11u].y, _2031 * cbModelParam._m0[11u].x))), _1375);
            frontier_phi_16_38_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_16_38_ladder_2;
        _1459 = frontier_phi_16_38_ladder_1;
        _1461 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_531, _532, _533), _1375);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1465 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _355);
    float _1466 = isnan(_1465) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1465 : min(cbModelParam._m0[25u].w, _1465));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1523 = fma(_594, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _586)) + cbModelParam._m0[21u].w;
        float _1527 = fma(_594, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _586)) + cbModelParam._m0[22u].w;
        float _1531 = fma(_594, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _586)) + cbModelParam._m0[23u].w;
        float _1534 = fma(_533, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531));
        float _1537 = fma(_533, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531));
        float _1540 = fma(_533, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531));
        float _1772;
        if (_1534 > 0.0)
        {
            _1772 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1772 = frontier_phi_28_24_ladder;
        }
        float _2051;
        if (_1537 > 0.0)
        {
            _2051 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2051 = frontier_phi_40_35_ladder;
        }
        float _2264;
        if (_1540 > 0.0)
        {
            _2264 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2264 = frontier_phi_49_46_ladder;
        }
        float _2266 = isnan(_2051) ? _1772 : (isnan(_1772) ? _2051 : min(_1772, _2051));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1534) + _1523;
        float _2272 = (_2267 * _1537) + _1527;
        float _2273 = (_2267 * _1540) + _1531;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2275 = (-1.0) - _2274;
        float _2277 = _2274 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2273 > _2277) || ((_2273 < _2275) || ((_2272 > _2277) || ((_2272 < _2275) || ((_2271 < _2275) || (_2271 > _2277))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2273, cbModelParam._m0[17u].z, fma(_2272, cbModelParam._m0[17u].y, _2271 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2273, cbModelParam._m0[18u].z, fma(_2272, cbModelParam._m0[18u].y, _2271 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2273, cbModelParam._m0[19u].z, fma(_2272, cbModelParam._m0[19u].y, _2271 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_25_49_ladder = _2474.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2474.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2474.x * cbModelParam._m0[1u].z;
        }
        _1559 = frontier_phi_25_49_ladder_2;
        _1561 = frontier_phi_25_49_ladder_1;
        _1563 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_531, _532, _533), _1466);
        _1559 = _1543.x * cbModelParam._m0[1u].z;
        _1561 = _1543.y * cbModelParam._m0[1u].z;
        _1563 = _1543.z * cbModelParam._m0[1u].z;
    }
    float _1576 = (((_557 * _508) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1578 = (((_557 * _510) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1580 = (((_557 * _511) + _558) * _523) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1583 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1576 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1576 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, _1576 * cbSceneParam._m0[91u].x));
    vec4 _1597 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_442, _443));
    float _1599 = _1597.w;
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1672 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _1629), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _1633))).x));
    float _3946 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1677 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _1629), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _1633))).x));
    float _3957 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1679 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)));
    float _1680 = _1679 * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1599));
    float _1681 = _1679 * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1599));
    float _1682 = _1679 * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1599));
    uvec4 _1686 = floatBitsToUint(cbInstanceData._m0[_482 + 5u]);
    uint _1688 = _1686.x * 14u;
    uint _1689 = _1688 + 13u;
    float _1696 = _523 + (-1.0);
    float _1701 = (cbLight._m0[_1689].x * _1696) + 1.0;
    float _1702 = (cbLight._m0[_1689].y * _1696) + 1.0;
    float _1703 = (cbLight._m0[_1689].z * _1696) + 1.0;
    float _1704 = (cbLight._m0[_1689].w * _1696) + 1.0;
    uint _1705 = _1688 + 5u;
    float _1711 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1715 = _1688 + 4u;
    float _1725 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
    uint _1729 = _1688 | 1u;
    float _1740 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_351, _352, _353));
    float _1743 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_351, _352, _353));
    float _3978 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _3989 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1748 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _1750 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.3183098733425140380859375;
    float _1757 = ((cbLight._m0[_1705].x * _1711) * _1750) + (((cbLight._m0[_1715].x * _1680) * _1725) * _1748);
    float _1758 = ((_1711 * cbLight._m0[_1705].y) * _1750) + (((cbLight._m0[_1715].y * _1681) * _1725) * _1748);
    float _1759 = ((_1711 * cbLight._m0[_1705].z) * _1750) + (((cbLight._m0[_1715].z * _1682) * _1725) * _1748);
    uvec4 _1764 = floatBitsToUint(cbLight._m0[_1688 + 12u]);
    bool _1766 = _1764.x == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1766)
    {
        _1777 = _1757;
        _1779 = _1758;
        _1781 = _1759;
    }
    else
    {
        uint _1785 = _1688 + 6u;
        float _1801 = (dot(vec3(cbLight._m0[_1688 + 2u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1802 = _1801 * _1801;
        float _4000 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1804 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _1777 = (((cbLight._m0[_1785].x * 0.3183098733425140380859375) * _1803) * _1804) + _1757;
        _1779 = (((cbLight._m0[_1785].y * 0.3183098733425140380859375) * _1803) * _1804) + _1758;
        _1781 = (((cbLight._m0[_1785].z * 0.3183098733425140380859375) * _1803) * _1804) + _1759;
    }
    bool _1784 = _1764.y == 0u;
    float _1822;
    float _1824;
    float _1826;
    if (_1784)
    {
        _1822 = _1777;
        _1824 = _1779;
        _1826 = _1781;
    }
    else
    {
        uint _1995 = _1688 + 7u;
        float _2011 = (dot(vec3(cbLight._m0[_1688 + 3u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4016 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2014 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1822 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1777;
        _1824 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1779;
        _1826 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1781;
    }
    uint _1829 = _1688 + 8u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _355) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1688].x + _422;
    float _1845 = cbLight._m0[_1688].y + _423;
    float _1846 = cbLight._m0[_1688].z + _424;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1688].xyz));
    float _4032 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _1858 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1859 = dot(vec3(_351, _352, _353), vec3(_1851, _1852, _1853));
    float _4054 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1862 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1863 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1851, _1852, _1853));
    float _4065 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1867 = _1843 * _1843;
    float _1871 = ((_1862 * _1862) * (_1867 + (-1.0))) + 1.0;
    float _1879 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _1880 = 0.959999978542327880859375 - _505;
    float _1882 = 0.959999978542327880859375 - _506;
    float _1883 = 0.959999978542327880859375 - _507;
    float _1890 = 1.0 - _1843;
    float _1901 = (0.5 / (((_1858 * ((_1857 * _1890) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1890) + _1843) * _1857))) * _1857;
    float _4076 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1867 / ((_1871 * _1871) * 3.141590118408203125));
    uint _1917 = _1688 + 9u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1729].w)) * _355) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1729].x + _422;
    float _1931 = cbLight._m0[_1729].y + _423;
    float _1932 = cbLight._m0[_1729].z + _424;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1729].xyz));
    float _4087 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1944 = dot(vec3(_351, _352, _353), vec3(_1937, _1938, _1939));
    float _4098 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1937, _1938, _1939));
    float _4109 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1929 * _1929;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
    float _1970 = 1.0 - _1929;
    float _1980 = (0.5 / (((_1858 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _1970) + _1929) * _1943))) * _1943;
    float _4120 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    float _1992 = (((((_1963 * _1880) + _508) * cbLight._m0[_1917].x) * _1982) * _1711) + ((((cbLight._m0[_1829].x * _1680) * ((_1879 * _1880) + _508)) * _1903) * _1725);
    float _1993 = (((((_1963 * _1882) + _510) * cbLight._m0[_1917].y) * _1982) * _1711) + ((((cbLight._m0[_1829].y * _1681) * ((_1879 * _1882) + _510)) * _1903) * _1725);
    float _1994 = (((((_1963 * _1883) + _511) * cbLight._m0[_1917].z) * _1982) * _1711) + ((((cbLight._m0[_1829].z * _1682) * ((_1879 * _1883) + _511)) * _1903) * _1725);
    float _2056;
    float _2058;
    float _2060;
    if (_1766)
    {
        _2056 = _1992;
        _2058 = _1993;
        _2060 = _1994;
    }
    else
    {
        uint _2062 = _1688 + 2u;
        uint _2066 = _1688 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _355) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _422;
        float _2083 = cbLight._m0[_2062].y + _423;
        float _2084 = cbLight._m0[_2062].z + _424;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2062].xyz));
        float _4131 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2096 = dot(vec3(_351, _352, _353), vec3(_2089, _2090, _2091));
        float _4142 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4153 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1858 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _2122) + _2081) * _2095))) * _2095;
        float _4164 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
        _2056 = (((((_2115 * _1880) + _508) * cbLight._m0[_2066].x) * _2134) * _2135) + _1992;
        _2058 = (((((_2115 * _1882) + _510) * cbLight._m0[_2066].y) * _2134) * _2135) + _1993;
        _2060 = (((((_2115 * _1883) + _511) * cbLight._m0[_2066].z) * _2134) * _2135) + _1994;
    }
    float _2170;
    float _2172;
    float _2174;
    if (_1784)
    {
        _2170 = _2056;
        _2172 = _2058;
        _2174 = _2060;
    }
    else
    {
        uint _2181 = _1688 + 3u;
        uint _2185 = _1688 + 11u;
        float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _355) * 0.949999988079071044921875);
        float _2200 = _2199 * _2199;
        float _2201 = cbLight._m0[_2181].x + _422;
        float _2202 = cbLight._m0[_2181].y + _423;
        float _2203 = cbLight._m0[_2181].z + _424;
        float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
        float _2208 = _2207 * _2201;
        float _2209 = _2207 * _2202;
        float _2210 = _2207 * _2203;
        float _2211 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2181].xyz));
        float _4180 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2215 = dot(vec3(_351, _352, _353), vec3(_2208, _2209, _2210));
        float _4191 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2219 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2208, _2209, _2210));
        float _4202 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2223 = _2200 * _2200;
        float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
        float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0);
        float _2241 = 1.0 - _2200;
        float _2251 = (0.5 / (((_1858 * ((_2214 * _2241) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_1858 * _2241) + _2200) * _2214))) * _2214;
        float _4213 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2170 = (((((_2234 * _1880) + _508) * cbLight._m0[_2185].x) * _2253) * _2254) + _2056;
        _2172 = (((((_2234 * _1882) + _510) * cbLight._m0[_2185].y) * _2253) * _2254) + _2058;
        _2174 = (((((_2234 * _1883) + _511) * cbLight._m0[_2185].z) * _2253) * _2254) + _2060;
    }
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    if (_1686.y == 0u)
    {
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2329;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2329;
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2329;
        uvec4 _2344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2345 = _2344.x;
        uint _2356 = uint((float(_2344.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _2345))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _2345)));
        float _2366 = (log2(_2332 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2367 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        uint _2370 = uint(isnan(14.0) ? _2367 : (isnan(_2367) ? 14.0 : min(_2367, 14.0)));
        uvec4 _2375 = texelFetch(g_lightClusterGridBuffer, int(((_2370 << 2u) + (_2356 << 6u)) >> 2u));
        uint _2376 = _2375.x;
        uint _2377 = _2344.z;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((((1u << ((_2377 >> 4u) & 15u)) + 4294967295u) & _2376) == 0u) || ((_2377 & 240u) == 0u))
        {
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
        }
        else
        {
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            uint _2637 = 0u;
            uint _2646;
            bool _2647;
            for (;;)
            {
                _2646 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2637 << 2u)) >> 2u)).x;
                _2647 = _2646 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2647)
                {
                    frontier_phi_66_pred = _2631;
                    frontier_phi_66_pred_1 = _2636;
                    frontier_phi_66_pred_2 = _2635;
                    frontier_phi_66_pred_3 = _2634;
                    frontier_phi_66_pred_4 = _2633;
                    frontier_phi_66_pred_5 = _2632;
                }
                else
                {
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    uint _2782;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2646;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    for (;;)
                    {
                        uint _2786 = uint(findLSB(_2782)) + (_2637 << 5u);
                        uint _2783 = (_2782 + 4294967295u) & _2782;
                        uint _2788 = _2786 * 48u;
                        vec4 _2802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2808 = (_2786 * 48u) + 4u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2827 = (_2786 * 48u) + 8u;
                        vec3 _2838 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x));
                        float _2842 = _2802.x - _2330;
                        float _2843 = _2802.y - _2331;
                        float _2844 = _2802.z - _2332;
                        float _2845 = dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844));
                        float _2848 = inversesqrt(_2845);
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2852 = dot(vec3(_463, _466, _469), vec3(_2849, _2850, _2851));
                        float _2857 = 1.0 - (_2845 * _2802.w);
                        float _4239 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2859 = sqrt(_2845) * _2821.w;
                        float _2862 = 1.39999997615814208984375 / (_2859 + 1.39999997615814208984375);
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2852) + _2863;
                        float _2869 = _2859 * _2859;
                        float _2873 = ((isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0))) * _2858) / ((_2869 * 0.699999988079071044921875) + 1.0);
                        float _2877 = (-0.0) - _2330;
                        float _2878 = (-0.0) - _2331;
                        float _2879 = (-0.0) - _2332;
                        float _2883 = inversesqrt(dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879)));
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2894 = exp2(log2(1.0 / ((_2869 * 3.5) + 5.0)) * 0.25);
                        float _2895 = 1.0 - _539;
                        float _2902 = sqrt(1.0 - ((1.0 - (_2895 * _2895)) * (1.0 - (_2894 * _2894))));
                        float _2903 = _2902 * _2902;
                        float _2904 = _2903 * _2903;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2915 = dot(vec3(_463, _466, _469), vec3(_2884, _2885, _2886));
                        float _4255 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2919 = dot(vec3(_463, _466, _469), vec3(_2911 * _2905, _2911 * _2906, _2911 * _2907));
                        float _4266 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _2926 = ((_2922 * _2922) * (_2904 + (-1.0))) + 1.0;
                        float _2927 = _2862 * _2903;
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2852) + _2928;
                        float _4277 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2933 = 1.0 - _2903;
                        float _2943 = (0.5 / (((_2932 * ((_2918 * _2933) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2932 * _2933) + _2903) * _2918))) * _2932;
                        float _4288 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2954 = (((_2904 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_2926 * _2926) * ((_2869 * 2.1991131305694580078125) + 3.141590118408203125))) * _2858;
                        _2706 = (_2873 * _2821.x) + _2779;
                        _2707 = (_2873 * _2821.y) + _2780;
                        _2708 = (_2873 * _2821.z) + _2781;
                        _2703 = (_2954 * _2838.x) + _2776;
                        _2704 = (_2954 * _2838.y) + _2777;
                        _2705 = (_2954 * _2838.z) + _2778;
                        if (_2783 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2783;
                        }
                    }
                    frontier_phi_66_pred = _2703;
                    frontier_phi_66_pred_1 = _2708;
                    frontier_phi_66_pred_2 = _2707;
                    frontier_phi_66_pred_3 = _2706;
                    frontier_phi_66_pred_4 = _2705;
                    frontier_phi_66_pred_5 = _2704;
                }
                _2480 = frontier_phi_66_pred;
                _2490 = frontier_phi_66_pred_1;
                _2488 = frontier_phi_66_pred_2;
                _2486 = frontier_phi_66_pred_3;
                _2484 = frontier_phi_66_pred_4;
                _2482 = frontier_phi_66_pred_5;
                uint _2638 = _2637 + 1u;
                if (_2638 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2631 = _2480;
                    _2632 = _2482;
                    _2633 = _2484;
                    _2634 = _2486;
                    _2635 = _2488;
                    _2636 = _2490;
                    _2637 = _2638;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
        }
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.z;
        uint _2496 = (_2494 >> 8u) & 15u;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((4294967295u << _2496) & _2376) == 0u)
        {
            _2599 = _2479;
            _2601 = _2481;
            _2603 = _2483;
            _2605 = _2485;
            _2607 = _2487;
            _2609 = _2489;
        }
        else
        {
            float _2624 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
            float _2625 = _2624 * _2330;
            float _2626 = _2624 * _2331;
            float _2627 = _2624 * _2332;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2496 < ((_2494 >> 12u) & 15u))
            {
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2759 = _2479;
                float _2760 = _2481;
                float _2761 = _2483;
                float _2762 = _2485;
                float _2763 = _2487;
                float _2764 = _2489;
                uint _2765 = _2496;
                uint _2774;
                bool _2775;
                for (;;)
                {
                    _2774 = texelFetch(g_lightClassification, int((((_2370 << 5u) + (_2356 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                    _2775 = _2774 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2775)
                    {
                        frontier_phi_77_pred = _2764;
                        frontier_phi_77_pred_1 = _2763;
                        frontier_phi_77_pred_2 = _2762;
                        frontier_phi_77_pred_3 = _2761;
                        frontier_phi_77_pred_4 = _2760;
                        frontier_phi_77_pred_5 = _2759;
                    }
                    else
                    {
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        uint _2987 = _2774;
                        uint _2988;
                        vec4 _3013;
                        float _3014;
                        vec4 _3029;
                        vec3 _3041;
                        vec4 _3057;
                        vec4 _3073;
                        float _3120;
                        bool _3121;
                        for (;;)
                        {
                            uint _2998 = ((_2765 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2987));
                            _2988 = (_2987 + 4294967295u) & _2987;
                            uint _3000 = _2998 * 40u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            _3014 = _3013.w;
                            uint _3016 = (_2998 * 40u) + 4u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2998 * 40u) + 8u;
                            _3041 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x));
                            uint _3044 = (_2998 * 40u) + 16u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3060 = (_2998 * 40u) + 20u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3076 = (_2998 * 40u) + 24u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3095 = (_2998 * 40u) + 28u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3120 = fma(_2332, _3108.z, fma(_2331, _3108.y, _3108.x * _2330)) + _3108.w;
                            _3121 = !((fma(_2332, _3089.z, fma(_2331, _3089.y, _3089.x * _2330)) + _3089.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3121)
                            {
                                float _3148 = _3013.x - _2330;
                                float _3149 = _3013.y - _2331;
                                float _3150 = _3013.z - _2332;
                                float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                                float _3154 = inversesqrt(_3151);
                                float _3155 = _3154 * _3148;
                                float _3156 = _3154 * _3149;
                                float _3157 = _3154 * _3150;
                                float _3161 = 1.0 - (_3151 / (_3014 * _3014));
                                float _4299 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3166 = sqrt(_3151) * _3029.w;
                                float _3168 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                                float _3169 = _3168 * _3168;
                                float _3172 = ((1.0 - _3169) * dot(vec3(_3155, _3156, _3157), vec3(_463, _466, _469))) + _3169;
                                float _3175 = _3166 * _3166;
                                float _3179 = (fma(_2332, _3057.z, fma(_2331, _3057.y, _3057.x * _2330)) + _3057.w) / _3120;
                                float _3180 = (fma(_2332, _3073.z, fma(_2331, _3073.y, _3073.x * _2330)) + _3073.w) / _3120;
                                float _3184 = 1.0 - dot(vec2(_3179, _3180), vec2(_3179, _3180));
                                float _4315 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3186 = _3185 * (((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3162) / ((_3175 * 0.699999988079071044921875) + 1.0));
                                float _3198 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                                float _3199 = 1.0 - _539;
                                float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                                float _3207 = _3206 * _3206;
                                float _3208 = _3207 * _3207;
                                float _3209 = _3155 - _2625;
                                float _3210 = _3156 - _2626;
                                float _3211 = _3157 - _2627;
                                float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                                float _3219 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2625, (-0.0) - _2626, (-0.0) - _2627));
                                float _4326 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3223 = dot(vec3(_463, _466, _469), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                                float _4337 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                                float _3231 = _3168 * _3207;
                                float _3232 = _3231 * _3231;
                                float _3238 = ((1.0 - _3232) * dot(vec3(_463, _466, _469), vec3(_3155, _3156, _3157))) + _3232;
                                float _4348 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3240 = 1.0 - _3207;
                                float _3250 = (0.5 / (((_3239 * ((_3222 * _3240) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3207) * _3222))) * _3239;
                                float _4359 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3260 = (_3185 * _3162) * (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3230 * _3230) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3186 * _3029.y;
                                frontier_phi_83_pred_1 = _3186 * _3029.x;
                                frontier_phi_83_pred_2 = _3260 * _3041.z;
                                frontier_phi_83_pred_3 = _3260 * _3041.y;
                                frontier_phi_83_pred_4 = _3260 * _3041.x;
                                frontier_phi_83_pred_5 = _3186 * _3029.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3268 = frontier_phi_83_pred;
                            _3267 = frontier_phi_83_pred_1;
                            _3266 = frontier_phi_83_pred_2;
                            _3265 = frontier_phi_83_pred_3;
                            _3264 = frontier_phi_83_pred_4;
                            _3269 = frontier_phi_83_pred_5;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            _2968 = _3264 + _2981;
                            _2969 = _3265 + _2982;
                            _2970 = _3266 + _2983;
                            if (_2988 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2988;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2973;
                        frontier_phi_77_pred_1 = _2972;
                        frontier_phi_77_pred_2 = _2971;
                        frontier_phi_77_pred_3 = _2970;
                        frontier_phi_77_pred_4 = _2969;
                        frontier_phi_77_pred_5 = _2968;
                    }
                    _2610 = frontier_phi_77_pred;
                    _2608 = frontier_phi_77_pred_1;
                    _2606 = frontier_phi_77_pred_2;
                    _2604 = frontier_phi_77_pred_3;
                    _2602 = frontier_phi_77_pred_4;
                    _2600 = frontier_phi_77_pred_5;
                    uint _2766 = _2765 + 1u;
                    if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2759 = _2600;
                        _2760 = _2602;
                        _2761 = _2604;
                        _2762 = _2606;
                        _2763 = _2608;
                        _2764 = _2610;
                        _2765 = _2766;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2604;
                frontier_phi_58_59_ladder_1 = _2610;
                frontier_phi_58_59_ladder_2 = _2608;
                frontier_phi_58_59_ladder_3 = _2606;
                frontier_phi_58_59_ladder_4 = _2602;
                frontier_phi_58_59_ladder_5 = _2600;
            }
            else
            {
                frontier_phi_58_59_ladder = _2483;
                frontier_phi_58_59_ladder_1 = _2489;
                frontier_phi_58_59_ladder_2 = _2487;
                frontier_phi_58_59_ladder_3 = _2485;
                frontier_phi_58_59_ladder_4 = _2481;
                frontier_phi_58_59_ladder_5 = _2479;
            }
            _2599 = frontier_phi_58_59_ladder_5;
            _2601 = frontier_phi_58_59_ladder_4;
            _2603 = frontier_phi_58_59_ladder;
            _2605 = frontier_phi_58_59_ladder_3;
            _2607 = frontier_phi_58_59_ladder_2;
            _2609 = frontier_phi_58_59_ladder_1;
        }
        float _2614 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
        _2389 = (_2614 * _2605) + _1822;
        _2391 = (_2614 * _2607) + _1824;
        _2393 = (_2614 * _2609) + _1826;
        _2395 = ((_2599 * _508) * _2614) + _2170;
        _2397 = ((_2601 * _510) * _2614) + _2172;
        _2399 = ((_2603 * _511) * _2614) + _2174;
    }
    else
    {
        _2389 = _1822;
        _2391 = _1824;
        _2393 = _1826;
        _2395 = _2170;
        _2397 = _2172;
        _2399 = _2174;
    }
    float _4375 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4386 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4397 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4408 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _2417 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2389 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _523))) + ((_2395 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2418 = ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2391 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _523))) + ((_2397 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2419 = ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2393 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _523))) + ((_2399 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1364)) * cbPerFrame._m0[3u].x);
    float _2424 = cbInstanceData._m0[_482 + 6u].w * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)));
    float _2429 = _442 / cbSceneParam._m0[86u].x;
    float _2430 = _443 / cbSceneParam._m0[86u].y;
    vec4 _2444 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, (log2((isnan(cbSceneParam._m0[77u].w) ? _364 : (isnan(_364) ? cbSceneParam._m0[77u].w : min(_364, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2446 = _2444.x;
    float _2447 = _2444.y;
    float _2448 = _2444.z;
    float _2449 = _2444.w;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_364 > cbSceneParam._m0[78u].w)
    {
        float _2504 = isnan(_364) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _364 : min(cbSceneParam._m0[80u].w, _364));
        float _2505 = _2504 / _364;
        float _2516 = _2505 * _415;
        float _2517 = _416 * _2505;
        float _2518 = (-0.0) - _2517;
        float _2519 = _2505 * _417;
        float _2521 = (cbSceneParam._m0[77u].w * _2518) / _2504;
        float _2522 = _2521 + cbSceneParam._m0[79u].w;
        float _2523 = cbSceneParam._m0[79u].w - _2517;
        float _2529 = sqrt(((_2516 * _2516) + (_2517 * _2517)) + (_2519 * _2519));
        float _2532 = (1.0 - (cbSceneParam._m0[77u].w / _2504)) * _2529;
        float _2537 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2539 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2716;
        if (abs((_2518 - _2521) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2716 = ((((_2522 > 0.0) ? exp2(_2537 * _2522) : (2.0 - exp2(_2539 * _2522))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2532;
        }
        else
        {
            float _2660 = 1.0 / cbSceneParam._m0[80u].x;
            float _2661 = isnan(_2523) ? _2522 : (isnan(_2522) ? _2523 : max(_2522, _2523));
            float _2662 = isnan(_2523) ? _2522 : (isnan(_2522) ? _2523 : min(_2522, _2523));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            _2716 = ((abs(_2529 / _2518) * cbSceneParam._m0[80u].y) * ((((_2671 - _2672) * 2.0) - ((exp2(_2537 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0)))) - exp2(_2537 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))))) * _2660)) - ((exp2(_2539 * _2671) - exp2(_2539 * _2672)) * _2660))) + (_2532 * cbSceneParam._m0[80u].z);
        }
        vec4 _2718 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, 1.0), 0.0);
        float _2727 = exp2((_2716 * (-1.44269502162933349609375)) * (1.0 - _2718.w));
        float _2728 = log2(_2727);
        float _2744 = log2(_2449);
        _2541 = (exp2(_2744 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].x)) * _2718.x) / cbSceneParam._m0[78u].x)) + _2446;
        _2543 = (exp2(_2744 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].y)) * _2718.y) / cbSceneParam._m0[78u].y)) + _2447;
        _2545 = (exp2(_2744 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].z)) * _2718.z) / cbSceneParam._m0[78u].z)) + _2448;
        _2547 = _2727 * _2449;
    }
    else
    {
        _2541 = _2446;
        _2543 = _2447;
        _2545 = _2448;
        _2547 = _2449;
    }
    bool _2754;
    vec4 _2557;
    vec4 _2579;
    float _2581;
    float _2585;
    float _2586;
    float _2587;
    float _2588;
    bool _2598;
    for (;;)
    {
        _2557 = cbMatDynParam._m0[0u];
        float _2559 = roundEven(_2557.y);
        bool _2560 = _2559 == 3.0;
        float _2561 = log2(_2547);
        float _2568 = exp2(_2561 * cbSceneParam._m0[78u].x) * _2417;
        float _2569 = exp2(_2561 * cbSceneParam._m0[78u].y) * _2418;
        float _2570 = exp2(_2561 * cbSceneParam._m0[78u].z) * _2419;
        float _2577 = _431 + (-0.5);
        _2579 = cbMtdParam._m0[1u];
        _2581 = _2579.y * _2577;
        float _2584 = (_2559 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2585 = _2584 * (_2560 ? _2568 : (_2568 + (cbSceneParam._m0[72u].w * _2541)));
        _2586 = _2584 * (_2560 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2543)));
        _2587 = _2584 * (_2560 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2545)));
        _2588 = _2577 * 0.999000012874603271484375;
        _2598 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2598)
        {
            if ((cbInstanceData._m0[_482 + 7u].x + _2588) < 0.5)
            {
                _2754 = true;
                break;
            }
        }
        uint _2695 = _484 + uint(_2557.w);
        if ((cbInstanceData._m0[_2695].w < 1.0) && ((cbInstanceData._m0[_2695].w + _2588) < 0.5))
        {
            _2754 = true;
            break;
        }
        if ((_2581 + 1.0) < _2579.x)
        {
            _2754 = true;
            break;
        }
        _2754 = false;
        break;
    }
    float _2959;
    if (_2754)
    {
        discard_state = true;
        _2959 = 0.0;
    }
    else
    {
        _2959 = _2424;
    }
    SV_Target.x = _2585;
    SV_Target.y = _2586;
    SV_Target.z = _2587;
    SV_Target.w = _2959;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2424;
    discard_exit();
}


