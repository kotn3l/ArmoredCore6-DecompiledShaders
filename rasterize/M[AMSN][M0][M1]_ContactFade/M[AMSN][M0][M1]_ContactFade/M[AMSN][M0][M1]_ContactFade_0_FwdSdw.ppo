#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _883;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = _228.w;
    float _241 = cbMtdParam._m0[9u].x * _228.x;
    float _242 = cbMtdParam._m0[9u].y * _228.y;
    float _243 = cbMtdParam._m0[9u].z * _228.z;
    vec4 _256 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _258 = _256.x;
    bool _265 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _282 = ((_265 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _258)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _258))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3596 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _285 = 1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)));
    float _3607 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _294 = _234 - (((_286 * _286) * _234) * (3.0 - (_286 * 2.0)));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _306.x;
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3618 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _338 = fma(_335, _204 * NORMAL.x, fma(_329, _211 * TANGENT.x, (_197 * _190) * _327));
    float _341 = fma(_335, _204 * NORMAL.y, fma(_329, _211 * TANGENT.y, (_197 * _191) * _327));
    float _344 = fma(_335, _204 * NORMAL.z, fma(_329, _211 * TANGENT.z, (_197 * _192) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3629 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _352 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3662 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3673 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3684 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _362 = _265 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _449 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _452 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _455 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _468 = uint(roundEven(NORMAL.w)) * 13u;
    uint _471 = (_468 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_471].z;
    float _3695 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _483 = 1.0 - _357;
    float _484 = _480 * _483;
    float _485 = _481 * _483;
    float _486 = _482 * _483;
    float _491 = (_480 + (-0.039999999105930328369140625)) * _357;
    float _492 = (_481 + (-0.039999999105930328369140625)) * _357;
    float _493 = (_482 + (-0.039999999105930328369140625)) * _357;
    float _494 = _491 + 0.039999999105930328369140625;
    float _496 = _492 + 0.039999999105930328369140625;
    float _497 = _493 + 0.039999999105930328369140625;
    vec4 _506 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _509 = _506.x * TEXCOORD.z;
    float _510 = dot(vec3(_349, _350, _351), vec3(_420, _421, _422));
    float _513 = _510 * 2.0;
    float _517 = (_513 * _349) - _420;
    float _518 = (_513 * _350) - _421;
    float _519 = (_513 * _351) - _422;
    float _523 = abs(dot(vec3(_420, _421, _422), vec3(_349, _350, _351)));
    float _3728 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _525 = sqrt(_353);
    float _537 = exp2((_525 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_525 * 3.0));
    float _543 = (1.0 - _537) * ((_525 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _544 = _537 * _525;
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_580, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572));
        float _611 = fma(_580, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572));
        float _615 = fma(_580, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572));
        float _640 = _572 + _349;
        float _641 = _576 + _350;
        float _642 = _580 + _351;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_349, _350, _351), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3776 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_349, _350, _351), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3809 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_349, _350, _351), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3842 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_580, cbModelParam._m0[30u].z, fma(_576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _572));
        float _927 = fma(_580, cbModelParam._m0[31u].z, fma(_576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _572));
        float _931 = fma(_580, cbModelParam._m0[32u].z, fma(_576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _572));
        float _954 = _572 + _349;
        float _955 = _576 + _350;
        float _956 = _580 + _351;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_349, _350, _351), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3905 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_349, _350, _351), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3938 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_349, _350, _351), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3971 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _883;
        _1193 = _883;
        _1194 = _883;
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _895)) + _895;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _896)) + _896;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _897)) + _897;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _517 * 0.5;
    float _1261 = _518 * 0.5;
    float _1262 = _519 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _886, _889, _892));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_884, _887, _890, _893));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_885, _888, _891, _894));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_580, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_580, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_580, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_519, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _517));
        float _1392 = fma(_519, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _517));
        float _1395 = fma(_519, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _517));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1423 = frontier_phi_14_12_ladder;
        }
        float _1599;
        if (_1392 > 0.0)
        {
            _1599 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1599 = frontier_phi_23_19_ladder;
        }
        float _1944;
        if (_1395 > 0.0)
        {
            _1944 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1944 = frontier_phi_35_30_ladder;
        }
        float _1946 = isnan(_1599) ? _1423 : (isnan(_1423) ? _1599 : min(_1423, _1599));
        float _1947 = isnan(_1944) ? _1946 : (isnan(_1946) ? _1944 : min(_1946, _1944));
        float _1951 = (_1947 * _1389) + _1378;
        float _1952 = (_1947 * _1392) + _1382;
        float _1953 = (_1947 * _1395) + _1386;
        float _1954 = _1947 * 9.9999997473787516355514526367188e-05;
        float _1956 = (-1.0) - _1954;
        float _1958 = _1954 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1953 > _1958) || ((_1953 < _1956) || ((_1952 > _1958) || ((_1952 < _1956) || ((_1951 < _1956) || (_1951 > _1958))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2098 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1953, cbModelParam._m0[9u].z, fma(_1952, cbModelParam._m0[9u].y, _1951 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1953, cbModelParam._m0[10u].z, fma(_1952, cbModelParam._m0[10u].y, _1951 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1953, cbModelParam._m0[11u].z, fma(_1952, cbModelParam._m0[11u].y, _1951 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_13_35_ladder = _2098.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2098.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2098.x * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_13_35_ladder_2;
        _1413 = frontier_phi_13_35_ladder_1;
        _1415 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_517, _518, _519), _1329);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1513;
    float _1515;
    float _1517;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1477 = fma(_580, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572)) + cbModelParam._m0[21u].w;
        float _1481 = fma(_580, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572)) + cbModelParam._m0[22u].w;
        float _1485 = fma(_580, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572)) + cbModelParam._m0[23u].w;
        float _1488 = fma(_519, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _517));
        float _1491 = fma(_519, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _517));
        float _1494 = fma(_519, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _517));
        float _1604;
        if (_1488 > 0.0)
        {
            _1604 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1604 = frontier_phi_25_21_ladder;
        }
        float _1971;
        if (_1491 > 0.0)
        {
            _1971 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1971 = frontier_phi_37_32_ladder;
        }
        float _2309;
        if (_1494 > 0.0)
        {
            _2309 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2309 = frontier_phi_47_44_ladder;
        }
        float _2311 = isnan(_1971) ? _1604 : (isnan(_1604) ? _1971 : min(_1604, _1971));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1488) + _1477;
        float _2317 = (_2312 * _1491) + _1481;
        float _2318 = (_2312 * _1494) + _1485;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2319;
        float _2322 = _2319 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2318 > _2322) || ((_2318 < _2320) || ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 < _2320) || (_2316 > _2322))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2318, cbModelParam._m0[17u].z, fma(_2317, cbModelParam._m0[17u].y, _2316 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2318, cbModelParam._m0[18u].z, fma(_2317, cbModelParam._m0[18u].y, _2316 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2318, cbModelParam._m0[19u].z, fma(_2317, cbModelParam._m0[19u].y, _2316 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_22_47_ladder = _2440.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2440.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2440.x * cbModelParam._m0[1u].z;
        }
        _1513 = frontier_phi_22_47_ladder_2;
        _1515 = frontier_phi_22_47_ladder_1;
        _1517 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_517, _518, _519), _1420);
        _1513 = _1497.x * cbModelParam._m0[1u].z;
        _1515 = _1497.y * cbModelParam._m0[1u].z;
        _1517 = _1497.z * cbModelParam._m0[1u].z;
    }
    float _1530 = (((_543 * _494) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1513 - _1411)) + _1411);
    float _1532 = (((_543 * _496) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1515 - _1413)) + _1413);
    float _1534 = (((_543 * _497) + _544) * _509) * ((cbModelParam._m0[1u].w * (_1517 - _1415)) + _1415);
    float _1537 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1530 * cbSceneParam._m0[91u].x));
    float _1578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1582 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1586 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1591 = _1578 / _1590;
    float _1592 = _1582 / _1590;
    float _1593 = _1586 / _1590;
    float _1740;
    float _1741;
    float _1742;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1620 = ((uint(_1593 > cbSceneParam._m0[59u].y) + uint(_1593 > cbSceneParam._m0[59u].x)) + uint(_1593 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1621 = _1620 + 43u;
        uint _1629 = _1620 + 44u;
        uint _1637 = _1620 + 45u;
        uint _1645 = _1620 + 46u;
        float _1656 = fma(_1590, cbSceneParam._m0[_1621].w, fma(_1586, cbSceneParam._m0[_1621].z, fma(_1582, cbSceneParam._m0[_1621].y, _1578 * cbSceneParam._m0[_1621].x)));
        float _1660 = fma(_1590, cbSceneParam._m0[_1629].w, fma(_1586, cbSceneParam._m0[_1629].z, fma(_1582, cbSceneParam._m0[_1629].y, _1578 * cbSceneParam._m0[_1629].x)));
        float _1668 = fma(_1590, cbSceneParam._m0[_1645].w, fma(_1586, cbSceneParam._m0[_1645].z, fma(_1582, cbSceneParam._m0[_1645].y, _1578 * cbSceneParam._m0[_1645].x)));
        float _1673 = cbSceneParam._m0[33u].z * _1668;
        float _1675 = cbSceneParam._m0[33u].w * _1668;
        float _1678 = fma(_1590, cbSceneParam._m0[_1637].w, fma(_1586, cbSceneParam._m0[_1637].z, fma(_1582, cbSceneParam._m0[_1637].y, _1578 * cbSceneParam._m0[_1637].x))) / _1668;
        float _1726 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
        float _4097 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1733 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1673 + _1656) / _1668, (_1675 + _1660) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1675 + _1656) / _1668, (_1660 - _1673) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1673) / _1668, (_1660 - _1675) / _1668), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1656 - _1675) / _1668, (_1673 + _1660) / _1668), _1678), 0.0)).x), vec4(0.25)));
        _1740 = 1.0 - (_1733 * cbSceneParam._m0[34u].x);
        _1741 = 1.0 - (_1733 * cbSceneParam._m0[34u].y);
        _1742 = 1.0 - (_1733 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1740 = 1.0;
        _1741 = 1.0;
        _1742 = 1.0;
    }
    float _1806;
    float _1808;
    float _1810;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1794 = fma(_1590, cbSceneParam._m0[63u].w, fma(_1586, cbSceneParam._m0[63u].z, fma(_1582, cbSceneParam._m0[63u].y, _1578 * cbSceneParam._m0[63u].x)));
        float _1795 = fma(_1590, cbSceneParam._m0[60u].w, fma(_1586, cbSceneParam._m0[60u].z, fma(_1582, cbSceneParam._m0[60u].y, _1578 * cbSceneParam._m0[60u].x))) / _1794;
        float _1796 = fma(_1590, cbSceneParam._m0[61u].w, fma(_1586, cbSceneParam._m0[61u].z, fma(_1582, cbSceneParam._m0[61u].y, _1578 * cbSceneParam._m0[61u].x))) / _1794;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1795 >= cbSceneParam._m0[64u].x) && (_1796 >= cbSceneParam._m0[64u].y)) && (_1795 <= cbSceneParam._m0[64u].z)) && (_1796 <= cbSceneParam._m0[64u].w))
        {
            float _1984 = fma(_1590, cbSceneParam._m0[62u].w, fma(_1586, cbSceneParam._m0[62u].z, fma(_1582, cbSceneParam._m0[62u].y, _1578 * cbSceneParam._m0[62u].x))) / _1794;
            float _1988 = isnan(cbSceneParam._m0[41u].w) ? _1984 : (isnan(_1984) ? cbSceneParam._m0[41u].w : max(_1984, cbSceneParam._m0[41u].w));
            float _2031 = (cbSceneParam._m0[33u].x - sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593))) * cbSceneParam._m0[33u].y;
            float _4113 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
            float _2038 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1795, cbSceneParam._m0[33u].w + _1796), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1795, _1796 - cbSceneParam._m0[33u].z), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].z, _1796 - cbSceneParam._m0[33u].w), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1795 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1796), _1988), 0.0)).x), vec4(0.25)));
            float _2042 = 1.0 - (_2038 * cbSceneParam._m0[34u].x);
            float _2043 = 1.0 - (_2038 * cbSceneParam._m0[34u].y);
            float _2044 = 1.0 - (_2038 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2044) ? _1742 : (isnan(_1742) ? _2044 : min(_1742, _2044));
            frontier_phi_34_33_ladder_1 = isnan(_2043) ? _1741 : (isnan(_1741) ? _2043 : min(_1741, _2043));
            frontier_phi_34_33_ladder_2 = isnan(_2042) ? _1740 : (isnan(_1740) ? _2042 : min(_1740, _2042));
        }
        else
        {
            frontier_phi_34_33_ladder = _1742;
            frontier_phi_34_33_ladder_1 = _1741;
            frontier_phi_34_33_ladder_2 = _1740;
        }
        _1806 = frontier_phi_34_33_ladder_2;
        _1808 = frontier_phi_34_33_ladder_1;
        _1810 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1806 = _1740;
        _1808 = _1741;
        _1810 = _1742;
    }
    float _1850 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _572), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _580))).x));
    float _4139 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _572), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _580))).x));
    float _4150 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1857 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)));
    float _1858 = _1857 * _1806;
    float _1859 = _1857 * _1808;
    float _1860 = _1857 * _1810;
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_468 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1874 = _509 + (-1.0);
    float _1879 = (cbLight._m0[_1867].x * _1874) + 1.0;
    float _1880 = (cbLight._m0[_1867].y * _1874) + 1.0;
    float _1881 = (cbLight._m0[_1867].z * _1874) + 1.0;
    float _1882 = (cbLight._m0[_1867].w * _1874) + 1.0;
    uint _1883 = _1866 + 5u;
    float _1889 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1893 = _1866 + 4u;
    float _1903 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1907 = _1866 | 1u;
    float _1918 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_349, _350, _351));
    float _1921 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_349, _350, _351));
    float _4171 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _4182 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1926 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _1928 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1935 = ((cbLight._m0[_1883].x * _1889) * _1928) + (((cbLight._m0[_1893].x * _1858) * _1903) * _1926);
    float _1936 = ((_1889 * cbLight._m0[_1883].y) * _1928) + (((cbLight._m0[_1893].y * _1859) * _1903) * _1926);
    float _1937 = ((_1889 * cbLight._m0[_1883].z) * _1928) + (((cbLight._m0[_1893].z * _1860) * _1903) * _1926);
    uvec4 _1941 = floatBitsToUint(cbLight._m0[_1866 + 12u]);
    bool _1943 = _1941.x == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_1943)
    {
        _2045 = _1935;
        _2047 = _1936;
        _2049 = _1937;
    }
    else
    {
        uint _2053 = _1866 + 6u;
        float _2069 = (dot(vec3(cbLight._m0[_1866 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _4193 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2072 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2045 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _1935;
        _2047 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _1936;
        _2049 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _1937;
    }
    bool _2052 = _1941.y == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2052)
    {
        _2107 = _2045;
        _2109 = _2047;
        _2111 = _2049;
    }
    else
    {
        uint _2280 = _1866 + 7u;
        float _2296 = (dot(vec3(cbLight._m0[_1866 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _2297 = _2296 * _2296;
        float _4209 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2298 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2299 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2107 = (((cbLight._m0[_2280].x * 0.3183098733425140380859375) * _2298) * _2299) + _2045;
        _2109 = (((cbLight._m0[_2280].y * 0.3183098733425140380859375) * _2298) * _2299) + _2047;
        _2111 = (((cbLight._m0[_2280].z * 0.3183098733425140380859375) * _2298) * _2299) + _2049;
    }
    uint _2114 = _1866 + 8u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _353) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1866].x + _420;
    float _2130 = cbLight._m0[_1866].y + _421;
    float _2131 = cbLight._m0[_1866].z + _422;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1866].xyz));
    float _4225 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2143 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2144 = dot(vec3(_349, _350, _351), vec3(_2136, _2137, _2138));
    float _4247 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2136, _2137, _2138));
    float _4258 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2128 * _2128;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2165 = 0.959999978542327880859375 - _491;
    float _2167 = 0.959999978542327880859375 - _492;
    float _2168 = 0.959999978542327880859375 - _493;
    float _2175 = 1.0 - _2128;
    float _2186 = (0.5 / (((_2143 * ((_2142 * _2175) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2175) + _2128) * _2142))) * _2142;
    float _4269 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    uint _2202 = _1866 + 9u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _353) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_1907].x + _420;
    float _2216 = cbLight._m0[_1907].y + _421;
    float _2217 = cbLight._m0[_1907].z + _422;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1907].xyz));
    float _4280 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2229 = dot(vec3(_349, _350, _351), vec3(_2222, _2223, _2224));
    float _4291 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2222, _2223, _2224));
    float _4302 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2214 * _2214;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2255 = 1.0 - _2214;
    float _2265 = (0.5 / (((_2143 * ((_2228 * _2255) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2255) + _2214) * _2228))) * _2228;
    float _4313 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    float _2277 = (((((_2248 * _2165) + _494) * cbLight._m0[_2202].x) * _2267) * _1889) + ((((cbLight._m0[_2114].x * _1858) * ((_2164 * _2165) + _494)) * _2188) * _1903);
    float _2278 = (((((_2248 * _2167) + _496) * cbLight._m0[_2202].y) * _2267) * _1889) + ((((cbLight._m0[_2114].y * _1859) * ((_2164 * _2167) + _496)) * _2188) * _1903);
    float _2279 = (((((_2248 * _2168) + _497) * cbLight._m0[_2202].z) * _2267) * _1889) + ((((cbLight._m0[_2114].z * _1860) * ((_2164 * _2168) + _497)) * _2188) * _1903);
    float _2335;
    float _2337;
    float _2339;
    if (_1943)
    {
        _2335 = _2277;
        _2337 = _2278;
        _2339 = _2279;
    }
    else
    {
        uint _2341 = _1866 + 2u;
        uint _2345 = _1866 + 10u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _353) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _420;
        float _2362 = cbLight._m0[_2341].y + _421;
        float _2363 = cbLight._m0[_2341].z + _422;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2341].xyz));
        float _4324 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2375 = dot(vec3(_349, _350, _351), vec3(_2368, _2369, _2370));
        float _4335 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4346 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2401 = 1.0 - _2360;
        float _2411 = (0.5 / (((_2143 * ((_2374 * _2401) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2401) + _2360) * _2374))) * _2374;
        float _4357 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2335 = (((((_2394 * _2165) + _494) * cbLight._m0[_2345].x) * _2413) * _2414) + _2277;
        _2337 = (((((_2394 * _2167) + _496) * cbLight._m0[_2345].y) * _2413) * _2414) + _2278;
        _2339 = (((((_2394 * _2168) + _497) * cbLight._m0[_2345].z) * _2413) * _2414) + _2279;
    }
    float _2445;
    float _2447;
    float _2449;
    if (_2052)
    {
        _2445 = _2335;
        _2447 = _2337;
        _2449 = _2339;
    }
    else
    {
        uint _2456 = _1866 + 3u;
        uint _2460 = _1866 + 11u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _353) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _420;
        float _2477 = cbLight._m0[_2456].y + _421;
        float _2478 = cbLight._m0[_2456].z + _422;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2456].xyz));
        float _4373 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2490 = dot(vec3(_349, _350, _351), vec3(_2483, _2484, _2485));
        float _4384 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4395 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2143 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2516) + _2475) * _2489))) * _2489;
        float _4406 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2445 = (((((_2509 * _2165) + _494) * cbLight._m0[_2460].x) * _2528) * _2529) + _2335;
        _2447 = (((((_2509 * _2167) + _496) * cbLight._m0[_2460].y) * _2528) * _2529) + _2337;
        _2449 = (((((_2509 * _2168) + _497) * cbLight._m0[_2460].z) * _2528) * _2529) + _2339;
    }
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_1864.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2867)
                {
                    frontier_phi_66_pred = _2856;
                    frontier_phi_66_pred_1 = _2855;
                    frontier_phi_66_pred_2 = _2854;
                    frontier_phi_66_pred_3 = _2853;
                    frontier_phi_66_pred_4 = _2852;
                    frontier_phi_66_pred_5 = _2851;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2866;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2857 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _2579;
                        float _3042 = _3001.y - _2580;
                        float _3043 = _3001.z - _2581;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_449, _452, _455), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4432 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _2579;
                        float _3077 = (-0.0) - _2580;
                        float _3078 = (-0.0) - _2581;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3092 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _525;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3083 + _3048;
                        float _3104 = _3084 + _3049;
                        float _3105 = _3085 + _3050;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_449, _452, _455), vec3(_3083, _3084, _3085));
                        float _4448 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3117 = dot(vec3(_449, _452, _455), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4459 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3061 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3051) + _3126;
                        float _4470 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4481 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3124 * _3124) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2910 = (_3072 * _3020.x) + _2978;
                        _2911 = (_3072 * _3020.y) + _2979;
                        _2912 = (_3072 * _3020.z) + _2980;
                        _2907 = (_3152 * _3037.x) + _2975;
                        _2908 = (_3152 * _3037.y) + _2976;
                        _2909 = (_3152 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_66_pred = _2912;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                _2718 = frontier_phi_66_pred;
                _2716 = frontier_phi_66_pred_1;
                _2714 = frontier_phi_66_pred_2;
                _2712 = frontier_phi_66_pred_3;
                _2710 = frontier_phi_66_pred_4;
                _2708 = frontier_phi_66_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2708;
                    _2852 = _2710;
                    _2853 = _2712;
                    _2854 = _2714;
                    _2855 = _2716;
                    _2856 = _2718;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2724) & _2625) == 0u)
        {
            _2819 = _2707;
            _2821 = _2709;
            _2823 = _2711;
            _2825 = _2713;
            _2827 = _2715;
            _2829 = _2717;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2845 = _2844 * _2579;
            float _2846 = _2844 * _2580;
            float _2847 = _2844 * _2581;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2958 = _2707;
                float _2959 = _2709;
                float _2960 = _2711;
                float _2961 = _2713;
                float _2962 = _2715;
                float _2963 = _2717;
                uint _2964 = _2724;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2974)
                    {
                        frontier_phi_72_pred = _2963;
                        frontier_phi_72_pred_1 = _2962;
                        frontier_phi_72_pred_2 = _2961;
                        frontier_phi_72_pred_3 = _2960;
                        frontier_phi_72_pred_4 = _2959;
                        frontier_phi_72_pred_5 = _2958;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        uint _3176 = _2973;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3187 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3233 = (_3187 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3187 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3187 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3187 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_2581, _3297.z, fma(_2580, _3297.y, _3297.x * _2579)) + _3297.w;
                            _3310 = !((fma(_2581, _3278.z, fma(_2580, _3278.y, _3278.x * _2579)) + _3278.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3202.x - _2579;
                                float _3338 = _3202.y - _2580;
                                float _3339 = _3202.z - _2581;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3203 * _3203));
                                float _4492 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3355 = sqrt(_3340) * _3218.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_449, _452, _455))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_2581, _3246.z, fma(_2580, _3246.y, _3246.x * _2579)) + _3246.w) / _3309;
                                float _3369 = (fma(_2581, _3262.z, fma(_2580, _3262.y, _3262.x * _2579)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4508 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _525;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2845;
                                float _3399 = _3345 - _2846;
                                float _3400 = _3346 - _2847;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_449, _452, _455), vec3((-0.0) - _2845, (-0.0) - _2846, (-0.0) - _2847));
                                float _4519 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3412 = dot(vec3(_449, _452, _455), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4530 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_449, _452, _455), vec3(_3344, _3345, _3346))) + _3421;
                                float _4541 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4552 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3375 * _3218.y;
                                frontier_phi_78_pred_1 = _3375 * _3218.x;
                                frontier_phi_78_pred_2 = _3449 * _3230.z;
                                frontier_phi_78_pred_3 = _3449 * _3230.y;
                                frontier_phi_78_pred_4 = _3449 * _3230.x;
                                frontier_phi_78_pred_5 = _3375 * _3218.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_78_pred;
                            _3456 = frontier_phi_78_pred_1;
                            _3455 = frontier_phi_78_pred_2;
                            _3454 = frontier_phi_78_pred_3;
                            _3453 = frontier_phi_78_pred_4;
                            _3458 = frontier_phi_78_pred_5;
                            _3160 = _3456 + _3173;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3162;
                        frontier_phi_72_pred_1 = _3161;
                        frontier_phi_72_pred_2 = _3160;
                        frontier_phi_72_pred_3 = _3159;
                        frontier_phi_72_pred_4 = _3158;
                        frontier_phi_72_pred_5 = _3157;
                    }
                    _2830 = frontier_phi_72_pred;
                    _2828 = frontier_phi_72_pred_1;
                    _2826 = frontier_phi_72_pred_2;
                    _2824 = frontier_phi_72_pred_3;
                    _2822 = frontier_phi_72_pred_4;
                    _2820 = frontier_phi_72_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2820;
                        _2959 = _2822;
                        _2960 = _2824;
                        _2961 = _2826;
                        _2962 = _2828;
                        _2963 = _2830;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2830;
                frontier_phi_60_61_ladder_1 = _2828;
                frontier_phi_60_61_ladder_2 = _2824;
                frontier_phi_60_61_ladder_3 = _2822;
                frontier_phi_60_61_ladder_4 = _2820;
                frontier_phi_60_61_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_60_61_ladder = _2717;
                frontier_phi_60_61_ladder_1 = _2715;
                frontier_phi_60_61_ladder_2 = _2711;
                frontier_phi_60_61_ladder_3 = _2709;
                frontier_phi_60_61_ladder_4 = _2707;
                frontier_phi_60_61_ladder_5 = _2713;
            }
            _2819 = frontier_phi_60_61_ladder_4;
            _2821 = frontier_phi_60_61_ladder_3;
            _2823 = frontier_phi_60_61_ladder_2;
            _2825 = frontier_phi_60_61_ladder_5;
            _2827 = frontier_phi_60_61_ladder_1;
            _2829 = frontier_phi_60_61_ladder;
        }
        float _2834 = isnan(1.0) ? _509 : (isnan(_509) ? 1.0 : min(_509, 1.0));
        _2638 = (_2834 * _2825) + _2107;
        _2640 = (_2834 * _2827) + _2109;
        _2642 = (_2834 * _2829) + _2111;
        _2644 = ((_2819 * _494) * _2834) + _2445;
        _2646 = ((_2821 * _496) * _2834) + _2447;
        _2648 = ((_2823 * _497) * _2834) + _2449;
    }
    else
    {
        _2638 = _2107;
        _2640 = _2109;
        _2642 = _2111;
        _2644 = _2445;
        _2646 = _2447;
        _2648 = _2449;
    }
    float _4568 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _4579 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4590 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4601 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2673 = cbInstanceData._m0[_468 + 6u].w * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)));
    float _2678 = _427 / cbSceneParam._m0[86u].x;
    float _2679 = _428 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2733 = _2732 / _362;
        float _2744 = _2733 * _413;
        float _2745 = _414 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2747 = _2733 * _415;
        float _2749 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2745;
        float _2757 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2746 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2882 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2920 = ((abs(_2757 / _2746) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2767 * _2891) - exp2(_2767 * _2892)) * _2880))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2698);
        _2769 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2771 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2773 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2775 = _2931 * _2698;
    }
    else
    {
        _2769 = _2695;
        _2771 = _2696;
        _2773 = _2697;
        _2775 = _2698;
    }
    float _2787 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2788 = _2787 == 3.0;
    float _2789 = log2(_2775);
    float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2638 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _509))) + ((_2644 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1318)) * cbPerFrame._m0[3u].x));
    float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2640 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _509))) + ((_2646 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1318)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2642 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _509))) + ((_2648 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1318)) * cbPerFrame._m0[3u].x));
    float _2807 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2807 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.y = _2807 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.z = _2807 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.w = _2673;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2673;
}


