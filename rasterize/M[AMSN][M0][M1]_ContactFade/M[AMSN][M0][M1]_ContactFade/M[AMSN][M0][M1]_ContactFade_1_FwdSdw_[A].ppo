#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3637;
float _3638;
float _3639;
float _3640;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = _228.w;
    float _241 = cbMtdParam._m0[9u].x * _228.x;
    float _242 = cbMtdParam._m0[9u].y * _228.y;
    float _243 = cbMtdParam._m0[9u].z * _228.z;
    vec4 _256 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _258 = _256.x;
    bool _265 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _282 = ((_265 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _258)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _258))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3649 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _285 = 1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)));
    float _3660 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _294 = _234 - (((_286 * _286) * _234) * (3.0 - (_286 * 2.0)));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _310 = _306.z;
    float _313 = (_306.x * 2.0) + (-1.0);
    float _315 = (_306.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3671 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _321 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    float _324 = fma(_321, _204 * NORMAL.x, fma(_315, _211 * TANGENT.x, (_197 * _190) * _313));
    float _327 = fma(_321, _204 * NORMAL.y, fma(_315, _211 * TANGENT.y, (_197 * _191) * _313));
    float _330 = fma(_321, _204 * NORMAL.z, fma(_315, _211 * TANGENT.z, (_197 * _192) * _313));
    float _334 = inversesqrt(dot(vec3(_324, _327, _330), vec3(_324, _327, _330)));
    float _335 = _334 * _324;
    float _336 = _334 * _327;
    float _337 = _334 * _330;
    float _3682 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _338 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _339 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3715 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3726 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _347 = _265 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _388 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _398 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _388);
    float _399 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _388);
    float _400 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _388);
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _405 = _398 * _404;
    float _406 = _399 * _404;
    float _407 = _400 * _404;
    vec4 _412 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _414 = _412.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_398 * _398) + (_399 * _399)) + (_400 * _400));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3737 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3748 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) - _577)) + _577) < ((_414 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_337, cbSceneParam._m0[5u].z, fma(_336, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _335));
    float _449 = fma(_337, cbSceneParam._m0[6u].z, fma(_336, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _335));
    float _452 = fma(_337, cbSceneParam._m0[7u].z, fma(_336, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _335));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3759 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _488 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _491 = _488.x * TEXCOORD.z;
    float _492 = dot(vec3(_335, _336, _337), vec3(_405, _406, _407));
    float _495 = _492 * 2.0;
    float _499 = (_495 * _335) - _405;
    float _500 = (_495 * _336) - _406;
    float _501 = (_495 * _337) - _407;
    float _505 = abs(dot(vec3(_405, _406, _407), vec3(_335, _336, _337)));
    float _3792 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _507 = sqrt(_339);
    float _519 = exp2((_507 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_507 * 3.0));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _335;
        float _649 = _555 + _336;
        float _650 = _559 + _337;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_335, _336, _337), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3840 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_335, _336, _337), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3873 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_335, _336, _337), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3906 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _335;
        float _966 = _555 + _336;
        float _967 = _559 + _337;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_335, _336, _337), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3969 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_335, _336, _337), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _4002 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_335, _336, _337), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _4035 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _499 * 0.5;
    float _1272 = _500 * 0.5;
    float _1273 = _501 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _339);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_501, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499));
        float _1403 = fma(_501, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499));
        float _1406 = fma(_501, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1434 = frontier_phi_17_15_ladder;
        }
        float _1608;
        if (_1403 > 0.0)
        {
            _1608 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1608 = frontier_phi_26_22_ladder;
        }
        float _1953;
        if (_1406 > 0.0)
        {
            _1953 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1953 = frontier_phi_38_33_ladder;
        }
        float _1955 = isnan(_1608) ? _1434 : (isnan(_1434) ? _1608 : min(_1434, _1608));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1400) + _1389;
        float _1961 = (_1956 * _1403) + _1393;
        float _1962 = (_1956 * _1406) + _1397;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_16_38_ladder_2;
        _1424 = frontier_phi_16_38_ladder_1;
        _1426 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_499, _500, _501), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _339);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_501, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499));
        float _1502 = fma(_501, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499));
        float _1505 = fma(_501, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499));
        float _1613;
        if (_1499 > 0.0)
        {
            _1613 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1613 = frontier_phi_28_24_ladder;
        }
        float _1980;
        if (_1502 > 0.0)
        {
            _1980 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1980 = frontier_phi_40_35_ladder;
        }
        float _2307;
        if (_1505 > 0.0)
        {
            _2307 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2307 = frontier_phi_50_47_ladder;
        }
        float _2309 = isnan(_1980) ? _1613 : (isnan(_1613) ? _1980 : min(_1613, _1980));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1499) + _1488;
        float _2315 = (_2310 * _1502) + _1492;
        float _2316 = (_2310 * _1505) + _1496;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_25_50_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_25_50_ladder_2;
        _1526 = frontier_phi_25_50_ladder_1;
        _1528 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_499, _500, _501), _1431);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1540 = ((((1.0 - _519) * ((_507 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_519 * _507)) * _491;
    float _1541 = _1540 * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1542 = _1540 * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1543 = _1540 * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    float _1587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1600 = _1587 / _1599;
    float _1601 = _1591 / _1599;
    float _1602 = _1595 / _1599;
    float _1749;
    float _1750;
    float _1751;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1629 = ((uint(_1602 > cbSceneParam._m0[59u].y) + uint(_1602 > cbSceneParam._m0[59u].x)) + uint(_1602 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1630 = _1629 + 43u;
        uint _1638 = _1629 + 44u;
        uint _1646 = _1629 + 45u;
        uint _1654 = _1629 + 46u;
        float _1665 = fma(_1599, cbSceneParam._m0[_1630].w, fma(_1595, cbSceneParam._m0[_1630].z, fma(_1591, cbSceneParam._m0[_1630].y, _1587 * cbSceneParam._m0[_1630].x)));
        float _1669 = fma(_1599, cbSceneParam._m0[_1638].w, fma(_1595, cbSceneParam._m0[_1638].z, fma(_1591, cbSceneParam._m0[_1638].y, _1587 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1599, cbSceneParam._m0[_1654].w, fma(_1595, cbSceneParam._m0[_1654].z, fma(_1591, cbSceneParam._m0[_1654].y, _1587 * cbSceneParam._m0[_1654].x)));
        float _1682 = cbSceneParam._m0[33u].z * _1677;
        float _1684 = cbSceneParam._m0[33u].w * _1677;
        float _1687 = fma(_1599, cbSceneParam._m0[_1646].w, fma(_1595, cbSceneParam._m0[_1646].z, fma(_1591, cbSceneParam._m0[_1646].y, _1587 * cbSceneParam._m0[_1646].x))) / _1677;
        float _1735 = (cbSceneParam._m0[33u].x - sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602))) * cbSceneParam._m0[33u].y;
        float _4161 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1742 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1682 + _1665) / _1677, (_1684 + _1669) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 + _1665) / _1677, (_1669 - _1682) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 - _1682) / _1677, (_1669 - _1684) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 - _1684) / _1677, (_1682 + _1669) / _1677), _1687), 0.0)).x), vec4(0.25)));
        _1749 = 1.0 - (_1742 * cbSceneParam._m0[34u].x);
        _1750 = 1.0 - (_1742 * cbSceneParam._m0[34u].y);
        _1751 = 1.0 - (_1742 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1749 = 1.0;
        _1750 = 1.0;
        _1751 = 1.0;
    }
    float _1815;
    float _1817;
    float _1819;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1803 = fma(_1599, cbSceneParam._m0[63u].w, fma(_1595, cbSceneParam._m0[63u].z, fma(_1591, cbSceneParam._m0[63u].y, _1587 * cbSceneParam._m0[63u].x)));
        float _1804 = fma(_1599, cbSceneParam._m0[60u].w, fma(_1595, cbSceneParam._m0[60u].z, fma(_1591, cbSceneParam._m0[60u].y, _1587 * cbSceneParam._m0[60u].x))) / _1803;
        float _1805 = fma(_1599, cbSceneParam._m0[61u].w, fma(_1595, cbSceneParam._m0[61u].z, fma(_1591, cbSceneParam._m0[61u].y, _1587 * cbSceneParam._m0[61u].x))) / _1803;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1804 >= cbSceneParam._m0[64u].x) && (_1805 >= cbSceneParam._m0[64u].y)) && (_1804 <= cbSceneParam._m0[64u].z)) && (_1805 <= cbSceneParam._m0[64u].w))
        {
            float _1993 = fma(_1599, cbSceneParam._m0[62u].w, fma(_1595, cbSceneParam._m0[62u].z, fma(_1591, cbSceneParam._m0[62u].y, _1587 * cbSceneParam._m0[62u].x))) / _1803;
            float _1997 = isnan(cbSceneParam._m0[41u].w) ? _1993 : (isnan(_1993) ? cbSceneParam._m0[41u].w : max(_1993, cbSceneParam._m0[41u].w));
            float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602))) * cbSceneParam._m0[33u].y;
            float _4177 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
            float _2047 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1804, cbSceneParam._m0[33u].w + _1805), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1804, _1805 - cbSceneParam._m0[33u].z), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1804 - cbSceneParam._m0[33u].z, _1805 - cbSceneParam._m0[33u].w), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1804 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1805), _1997), 0.0)).x), vec4(0.25)));
            float _2051 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
            float _2052 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
            float _2053 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2053) ? _1751 : (isnan(_1751) ? _2053 : min(_1751, _2053));
            frontier_phi_37_36_ladder_1 = isnan(_2052) ? _1750 : (isnan(_1750) ? _2052 : min(_1750, _2052));
            frontier_phi_37_36_ladder_2 = isnan(_2051) ? _1749 : (isnan(_1749) ? _2051 : min(_1749, _2051));
        }
        else
        {
            frontier_phi_37_36_ladder = _1751;
            frontier_phi_37_36_ladder_1 = _1750;
            frontier_phi_37_36_ladder_2 = _1749;
        }
        _1815 = frontier_phi_37_36_ladder_2;
        _1817 = frontier_phi_37_36_ladder_1;
        _1819 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1815 = _1749;
        _1817 = _1750;
        _1819 = _1751;
    }
    float _1859 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _551), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _559))).x));
    float _4203 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1864 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _551), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _559))).x));
    float _4214 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)));
    float _1867 = _1866 * _1815;
    float _1868 = _1866 * _1817;
    float _1869 = _1866 * _1819;
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _491 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1912 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1916 = _1875 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_335, _336, _337));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_335, _336, _337));
    float _4235 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4246 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1892].x * _1898) * _1937) + (((cbLight._m0[_1902].x * _1867) * _1912) * _1935);
    float _1945 = ((_1898 * cbLight._m0[_1892].y) * _1937) + (((cbLight._m0[_1902].y * _1868) * _1912) * _1935);
    float _1946 = ((_1898 * cbLight._m0[_1892].z) * _1937) + (((cbLight._m0[_1902].z * _1869) * _1912) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_1952)
    {
        _2054 = _1944;
        _2056 = _1945;
        _2058 = _1946;
    }
    else
    {
        uint _2062 = _1875 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4257 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2081 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1944;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1945;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1946;
    }
    bool _2061 = _1950.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2061)
    {
        _2116 = _2054;
        _2118 = _2056;
        _2120 = _2058;
    }
    else
    {
        uint _2278 = _1875 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_335, _336, _337)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4273 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2297 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2116 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2054;
        _2118 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2056;
        _2120 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2058;
    }
    uint _2123 = _1875 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _339) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1875].x + _405;
    float _2139 = cbLight._m0[_1875].y + _406;
    float _2140 = cbLight._m0[_1875].z + _407;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1875].xyz));
    float _4289 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _4300 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _2152 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2153 = dot(vec3(_335, _336, _337), vec3(_2145, _2146, _2147));
    float _4311 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2145, _2146, _2147));
    float _4322 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2177 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2152 * ((_2151 * _2177) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2177) + _2137) * _2151))) * _2151;
    float _4333 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2204 = _1875 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _339) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_1916].x + _405;
    float _2218 = cbLight._m0[_1916].y + _406;
    float _2219 = cbLight._m0[_1916].z + _407;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_1916].xyz));
    float _4344 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2231 = dot(vec3(_335, _336, _337), vec3(_2224, _2225, _2226));
    float _4355 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2224, _2225, _2226));
    float _4366 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2216;
    float _2263 = (0.5 / (((_2152 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2253) + _2216) * _2230))) * _2230;
    float _4377 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2275 = (((_2252 * cbLight._m0[_2204].x) * _2265) * _1898) + ((((cbLight._m0[_2123].x * _1867) * _2176) * _2190) * _1912);
    float _2276 = (((_2252 * cbLight._m0[_2204].y) * _2265) * _1898) + ((((cbLight._m0[_2123].y * _1868) * _2176) * _2190) * _1912);
    float _2277 = (((_2252 * cbLight._m0[_2204].z) * _2265) * _1898) + ((((cbLight._m0[_2123].z * _1869) * _2176) * _2190) * _1912);
    float _2333;
    float _2335;
    float _2337;
    if (_1952)
    {
        _2333 = _2275;
        _2335 = _2276;
        _2337 = _2277;
    }
    else
    {
        uint _2339 = _1875 + 2u;
        uint _2343 = _1875 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _339) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _405;
        float _2360 = cbLight._m0[_2339].y + _406;
        float _2361 = cbLight._m0[_2339].z + _407;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_2339].xyz));
        float _4388 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2373 = dot(vec3(_335, _336, _337), vec3(_2366, _2367, _2368));
        float _4399 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4410 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2395 = 1.0 - _2358;
        float _2405 = (0.5 / (((_2152 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2395) + _2358) * _2372))) * _2372;
        float _4421 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2333 = (((_2394 * cbLight._m0[_2343].x) * _2407) * _2408) + _2275;
        _2335 = (((_2394 * cbLight._m0[_2343].y) * _2407) * _2408) + _2276;
        _2337 = (((_2394 * cbLight._m0[_2343].z) * _2407) * _2408) + _2277;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2061)
    {
        _2439 = _2333;
        _2441 = _2335;
        _2443 = _2337;
    }
    else
    {
        uint _2450 = _1875 + 3u;
        uint _2454 = _1875 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _339) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _405;
        float _2471 = cbLight._m0[_2450].y + _406;
        float _2472 = cbLight._m0[_2450].z + _407;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_335, _336, _337), vec3(cbLight._m0[_2450].xyz));
        float _4437 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2484 = dot(vec3(_335, _336, _337), vec3(_2477, _2478, _2479));
        float _4448 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4459 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2152 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2506) + _2469) * _2483))) * _2483;
        float _4470 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2439 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2333;
        _2441 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2335;
        _2443 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2337;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1873.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
        }
        else
        {
            float _2698;
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2865)
                {
                    frontier_phi_71_pred = _2854;
                    frontier_phi_71_pred_1 = _2853;
                    frontier_phi_71_pred_2 = _2852;
                    frontier_phi_71_pred_3 = _2851;
                    frontier_phi_71_pred_4 = _2850;
                    frontier_phi_71_pred_5 = _2849;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2864;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2855 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _2569;
                        float _3061 = _3020.y - _2570;
                        float _3062 = _3020.z - _2571;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_446, _449, _452), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4496 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _2569;
                        float _3096 = (-0.0) - _2570;
                        float _3097 = (-0.0) - _2571;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3111 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _507;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3102 + _3067;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_446, _449, _452), vec3(_3102, _3103, _3104));
                        float _4512 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3136 = dot(vec3(_446, _449, _452), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4523 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3080 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3070) + _3145;
                        float _4534 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4545 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3143 * _3143) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2924 = (_3091 * _3039.x) + _2997;
                        _2925 = (_3091 * _3039.y) + _2998;
                        _2926 = (_3091 * _3039.z) + _2999;
                        _2921 = (_3171 * _3056.x) + _2994;
                        _2922 = (_3171 * _3056.y) + _2995;
                        _2923 = (_3171 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2923;
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_71_pred = _2926;
                    frontier_phi_71_pred_1 = _2925;
                    frontier_phi_71_pred_2 = _2924;
                    frontier_phi_71_pred_3 = _2923;
                    frontier_phi_71_pred_4 = _2922;
                    frontier_phi_71_pred_5 = _2921;
                }
                _2708 = frontier_phi_71_pred;
                _2706 = frontier_phi_71_pred_1;
                _2704 = frontier_phi_71_pred_2;
                _2702 = frontier_phi_71_pred_3;
                _2700 = frontier_phi_71_pred_4;
                _2698 = frontier_phi_71_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2698;
                    _2850 = _2700;
                    _2851 = _2702;
                    _2852 = _2704;
                    _2853 = _2706;
                    _2854 = _2708;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
        }
        uvec4 _2711 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2712 = _2711.z;
        uint _2714 = (_2712 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2714) & _2615) == 0u)
        {
            _2817 = _2697;
            _2819 = _2699;
            _2821 = _2701;
            _2823 = _2703;
            _2825 = _2705;
            _2827 = _2707;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2843 = _2842 * _2569;
            float _2844 = _2842 * _2570;
            float _2845 = _2842 * _2571;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2714 < ((_2712 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2977 = _2697;
                float _2978 = _2699;
                float _2979 = _2701;
                float _2980 = _2703;
                float _2981 = _2705;
                float _2982 = _2707;
                uint _2983 = _2714;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2993)
                    {
                        frontier_phi_82_pred = _2982;
                        frontier_phi_82_pred_1 = _2981;
                        frontier_phi_82_pred_2 = _2980;
                        frontier_phi_82_pred_3 = _2979;
                        frontier_phi_82_pred_4 = _2978;
                        frontier_phi_82_pred_5 = _2977;
                    }
                    else
                    {
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3198 = _2977;
                        float _3199 = _2978;
                        float _3200 = _2979;
                        float _3201 = _2980;
                        float _3202 = _2981;
                        float _3203 = _2982;
                        uint _3204 = _2992;
                        uint _3205;
                        vec4 _3230;
                        float _3231;
                        vec4 _3246;
                        vec3 _3258;
                        vec4 _3274;
                        vec4 _3290;
                        float _3337;
                        bool _3338;
                        for (;;)
                        {
                            uint _3215 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3204));
                            _3205 = (_3204 + 4294967295u) & _3204;
                            uint _3217 = _3215 * 40u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3231 = _3230.w;
                            uint _3233 = (_3215 * 40u) + 4u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3215 * 40u) + 8u;
                            _3258 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x));
                            uint _3261 = (_3215 * 40u) + 16u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3277 = (_3215 * 40u) + 20u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3293 = (_3215 * 40u) + 24u;
                            vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3312 = (_3215 * 40u) + 28u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3337 = fma(_2571, _3325.z, fma(_2570, _3325.y, _3325.x * _2569)) + _3325.w;
                            _3338 = !((fma(_2571, _3306.z, fma(_2570, _3306.y, _3306.x * _2569)) + _3306.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3338)
                            {
                                float _3365 = _3230.x - _2569;
                                float _3366 = _3230.y - _2570;
                                float _3367 = _3230.z - _2571;
                                float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                                float _3371 = inversesqrt(_3368);
                                float _3372 = _3371 * _3365;
                                float _3373 = _3371 * _3366;
                                float _3374 = _3371 * _3367;
                                float _3378 = 1.0 - (_3368 / (_3231 * _3231));
                                float _4556 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3383 = sqrt(_3368) * _3246.w;
                                float _3385 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                                float _3386 = _3385 * _3385;
                                float _3389 = ((1.0 - _3386) * dot(vec3(_3372, _3373, _3374), vec3(_446, _449, _452))) + _3386;
                                float _3392 = _3383 * _3383;
                                float _3396 = (fma(_2571, _3274.z, fma(_2570, _3274.y, _3274.x * _2569)) + _3274.w) / _3337;
                                float _3397 = (fma(_2571, _3290.z, fma(_2570, _3290.y, _3290.x * _2569)) + _3290.w) / _3337;
                                float _3401 = 1.0 - dot(vec2(_3396, _3397), vec2(_3396, _3397));
                                float _4572 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3403 = _3402 * (((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3379) / ((_3392 * 0.699999988079071044921875) + 1.0));
                                float _3415 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                                float _3416 = 1.0 - _507;
                                float _3423 = sqrt(1.0 - ((1.0 - (_3416 * _3416)) * (1.0 - (_3415 * _3415))));
                                float _3424 = _3423 * _3423;
                                float _3425 = _3424 * _3424;
                                float _3426 = _3372 - _2843;
                                float _3427 = _3373 - _2844;
                                float _3428 = _3374 - _2845;
                                float _3432 = inversesqrt(dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428)));
                                float _3436 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4583 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3439 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3440 = dot(vec3(_446, _449, _452), vec3(_3432 * _3426, _3432 * _3427, _3432 * _3428));
                                float _4594 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3447 = ((_3443 * _3443) * (_3425 + (-1.0))) + 1.0;
                                float _3448 = _3385 * _3424;
                                float _3449 = _3448 * _3448;
                                float _3455 = ((1.0 - _3449) * dot(vec3(_446, _449, _452), vec3(_3372, _3373, _3374))) + _3449;
                                float _4605 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3457 = 1.0 - _3424;
                                float _3467 = (0.5 / (((_3456 * ((_3439 * _3457) + _3424)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3424) * _3439))) * _3456;
                                float _4616 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3477 = (_3402 * _3379) * (((_3425 * 3.1415927410125732421875) * (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) / ((_3447 * _3447) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3403 * _3246.z;
                                frontier_phi_88_pred_1 = _3403 * _3246.y;
                                frontier_phi_88_pred_2 = _3403 * _3246.x;
                                frontier_phi_88_pred_3 = _3477 * _3258.z;
                                frontier_phi_88_pred_4 = _3477 * _3258.y;
                                frontier_phi_88_pred_5 = _3477 * _3258.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_88_pred;
                            _3485 = frontier_phi_88_pred_1;
                            _3484 = frontier_phi_88_pred_2;
                            _3483 = frontier_phi_88_pred_3;
                            _3482 = frontier_phi_88_pred_4;
                            _3481 = frontier_phi_88_pred_5;
                            _3188 = _3484 + _3201;
                            _3189 = _3485 + _3202;
                            _3190 = _3486 + _3203;
                            _3185 = _3481 + _3198;
                            _3186 = _3482 + _3199;
                            _3187 = _3483 + _3200;
                            if (_3205 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3205;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3190;
                        frontier_phi_82_pred_1 = _3189;
                        frontier_phi_82_pred_2 = _3188;
                        frontier_phi_82_pred_3 = _3187;
                        frontier_phi_82_pred_4 = _3186;
                        frontier_phi_82_pred_5 = _3185;
                    }
                    _2828 = frontier_phi_82_pred;
                    _2826 = frontier_phi_82_pred_1;
                    _2824 = frontier_phi_82_pred_2;
                    _2822 = frontier_phi_82_pred_3;
                    _2820 = frontier_phi_82_pred_4;
                    _2818 = frontier_phi_82_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2818;
                        _2978 = _2820;
                        _2979 = _2822;
                        _2980 = _2824;
                        _2981 = _2826;
                        _2982 = _2828;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2824;
                frontier_phi_63_64_ladder_1 = _2828;
                frontier_phi_63_64_ladder_2 = _2826;
                frontier_phi_63_64_ladder_3 = _2822;
                frontier_phi_63_64_ladder_4 = _2820;
                frontier_phi_63_64_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_63_64_ladder = _2703;
                frontier_phi_63_64_ladder_1 = _2707;
                frontier_phi_63_64_ladder_2 = _2705;
                frontier_phi_63_64_ladder_3 = _2701;
                frontier_phi_63_64_ladder_4 = _2699;
                frontier_phi_63_64_ladder_5 = _2697;
            }
            _2817 = frontier_phi_63_64_ladder_5;
            _2819 = frontier_phi_63_64_ladder_4;
            _2821 = frontier_phi_63_64_ladder_3;
            _2823 = frontier_phi_63_64_ladder;
            _2825 = frontier_phi_63_64_ladder_2;
            _2827 = frontier_phi_63_64_ladder_1;
        }
        float _2832 = isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0));
        _2628 = (_2832 * _2823) + _2116;
        _2630 = (_2832 * _2825) + _2118;
        _2632 = (_2832 * _2827) + _2120;
        _2634 = ((_2817 * 0.039999999105930328369140625) * _2832) + _2439;
        _2636 = ((_2819 * 0.039999999105930328369140625) * _2832) + _2441;
        _2638 = ((_2821 * 0.039999999105930328369140625) * _2832) + _2443;
    }
    else
    {
        _2628 = _2116;
        _2630 = _2118;
        _2632 = _2120;
        _2634 = _2439;
        _2636 = _2441;
        _2638 = _2443;
    }
    float _4632 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4643 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4654 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4665 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _2656 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2628 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _491))) + ((_2634 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2657 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2630 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _491))) + ((_2636 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2658 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2632 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _491))) + ((_2638 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2663 = cbInstanceData._m0[_465 + 6u].w * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)));
    float _2668 = _425 / cbSceneParam._m0[86u].x;
    float _2669 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2685 = _2683.x;
    float _2686 = _2683.y;
    float _2687 = _2683.z;
    float _2688 = _2683.w;
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _2722 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _2723 = _2722 / _347;
        float _2734 = _2723 * _398;
        float _2735 = _399 * _2723;
        float _2736 = (-0.0) - _2735;
        float _2737 = _2723 * _400;
        float _2739 = (cbSceneParam._m0[77u].w * _2736) / _2722;
        float _2740 = _2739 + cbSceneParam._m0[79u].w;
        float _2741 = cbSceneParam._m0[79u].w - _2735;
        float _2747 = sqrt(((_2734 * _2734) + (_2735 * _2735)) + (_2737 * _2737));
        float _2750 = (1.0 - (cbSceneParam._m0[77u].w / _2722)) * _2747;
        float _2755 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2757 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2934;
        if (abs((_2736 - _2739) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2934 = ((((_2740 > 0.0) ? exp2(_2755 * _2740) : (2.0 - exp2(_2757 * _2740))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2750;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : max(_2740, _2741));
            float _2880 = isnan(_2741) ? _2740 : (isnan(_2740) ? _2741 : min(_2740, _2741));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2934 = ((abs(_2747 / _2736) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2755 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2755 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2757 * _2889) - exp2(_2757 * _2890)) * _2878))) + (_2750 * cbSceneParam._m0[80u].z);
        }
        vec4 _2936 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, 1.0), 0.0);
        float _2945 = exp2((_2934 * (-1.44269502162933349609375)) * (1.0 - _2936.w));
        float _2946 = log2(_2945);
        float _2962 = log2(_2688);
        _2759 = (exp2(_2962 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].x)) * _2936.x) / cbSceneParam._m0[78u].x)) + _2685;
        _2761 = (exp2(_2962 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].y)) * _2936.y) / cbSceneParam._m0[78u].y)) + _2686;
        _2763 = (exp2(_2962 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].z)) * _2936.z) / cbSceneParam._m0[78u].z)) + _2687;
        _2765 = _2945 * _2688;
    }
    else
    {
        _2759 = _2685;
        _2761 = _2686;
        _2763 = _2687;
        _2765 = _2688;
    }
    bool _2972;
    vec4 _2775;
    vec4 _2797;
    float _2799;
    float _2803;
    float _2804;
    float _2805;
    float _2806;
    bool _2816;
    for (;;)
    {
        _2775 = cbMatDynParam._m0[0u];
        float _2777 = roundEven(_2775.y);
        bool _2778 = _2777 == 3.0;
        float _2779 = log2(_2765);
        float _2786 = exp2(_2779 * cbSceneParam._m0[78u].x) * _2656;
        float _2787 = exp2(_2779 * cbSceneParam._m0[78u].y) * _2657;
        float _2788 = exp2(_2779 * cbSceneParam._m0[78u].z) * _2658;
        float _2795 = _414 + (-0.5);
        _2797 = cbMtdParam._m0[1u];
        _2799 = _2797.y * _2795;
        float _2802 = (_2777 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2803 = _2802 * (_2778 ? _2786 : (_2786 + (cbSceneParam._m0[72u].w * _2759)));
        _2804 = _2802 * (_2778 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2761)));
        _2805 = _2802 * (_2778 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2763)));
        _2806 = _2795 * 0.999000012874603271484375;
        _2816 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2816)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2806) < 0.5)
            {
                _2972 = true;
                break;
            }
        }
        uint _2913 = _467 + uint(_2775.w);
        if ((cbInstanceData._m0[_2913].w < 1.0) && ((cbInstanceData._m0[_2913].w + _2806) < 0.5))
        {
            _2972 = true;
            break;
        }
        if ((_2799 + 1.0) < _2797.x)
        {
            _2972 = true;
            break;
        }
        _2972 = false;
        break;
    }
    float _3176;
    if (_2972)
    {
        discard_state = true;
        _3176 = 0.0;
    }
    else
    {
        _3176 = _2663;
    }
    SV_Target.x = _2803;
    SV_Target.y = _2804;
    SV_Target.z = _2805;
    SV_Target.w = _3176;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2663;
    discard_exit();
}


