#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _928;
float _3695;
float _3696;
float _3697;
float _3698;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _238 = _232.w;
    float _245 = cbMtdParam._m0[9u].x * _232.x;
    float _246 = cbMtdParam._m0[9u].y * _232.y;
    float _247 = cbMtdParam._m0[9u].z * _232.z;
    vec4 _260 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _262 = _260.x;
    bool _269 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _286 = ((_269 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _262)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _262))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3707 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _289 = 1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)));
    float _3718 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _290 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _298 = _238 - (((_290 * _290) * _238) * (3.0 - (_290 * 2.0)));
    vec4 _310 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _310.x;
    vec4 _324 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _328 = _324.z;
    float _331 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_331, _333), vec2(_331, _333));
    float _3729 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _342 = fma(_339, _208 * NORMAL.x, fma(_333, _215 * TANGENT.x, (_201 * _194) * _331));
    float _345 = fma(_339, _208 * NORMAL.y, fma(_333, _215 * TANGENT.y, (_201 * _195) * _331));
    float _348 = fma(_339, _208 * NORMAL.z, fma(_333, _215 * TANGENT.z, (_201 * _196) * _331));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3740 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _356 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _357 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3773 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3784 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3795 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _361 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _366 = _269 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _407 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _417 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _407);
    float _418 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _407);
    float _419 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _407);
    float _423 = inversesqrt(dot(vec3(_417, _418, _419), vec3(_417, _418, _419)));
    float _424 = _417 * _423;
    float _425 = _418 * _423;
    float _426 = _419 * _423;
    vec4 _431 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _433 = _431.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _607 = sqrt(((_417 * _417) + (_418 * _418)) + (_419 * _419));
        float _613 = (cbMatDynParam._m0[5u].x * _607) + cbMatDynParam._m0[5u].y;
        float _3806 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _614 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _618 = (cbMatDynParam._m0[5u].z * _607) + cbMatDynParam._m0[5u].w;
        float _3817 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _614)) + _614) < ((_433 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _465 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _468 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _471 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _484 = uint(roundEven(NORMAL.w)) * 13u;
    uint _486 = _484 + 9u;
    uint _487 = _486 + uint(cbMatDynParam._m0[0u].w);
    float _493 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_487].x;
    float _494 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_487].y;
    float _495 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_487].z;
    float _3828 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _496 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _499 = 1.0 - _361;
    float _500 = _496 * _499;
    float _501 = _497 * _499;
    float _502 = _498 * _499;
    float _507 = (_496 + (-0.039999999105930328369140625)) * _361;
    float _508 = (_497 + (-0.039999999105930328369140625)) * _361;
    float _509 = (_498 + (-0.039999999105930328369140625)) * _361;
    float _510 = _507 + 0.039999999105930328369140625;
    float _512 = _508 + 0.039999999105930328369140625;
    float _513 = _509 + 0.039999999105930328369140625;
    vec4 _522 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _525 = _522.x * TEXCOORD.z;
    float _526 = dot(vec3(_353, _354, _355), vec3(_424, _425, _426));
    float _529 = _526 * 2.0;
    float _533 = (_529 * _353) - _424;
    float _534 = (_529 * _354) - _425;
    float _535 = (_529 * _355) - _426;
    float _539 = abs(dot(vec3(_424, _425, _426), vec3(_353, _354, _355)));
    float _3861 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _541 = sqrt(_357);
    float _553 = exp2((_541 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_541 * 3.0));
    float _559 = (1.0 - _553) * ((_541 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _560 = _553 * _541;
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_596, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588));
        float _656 = fma(_596, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588));
        float _660 = fma(_596, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588));
        float _685 = _588 + _353;
        float _686 = _592 + _354;
        float _687 = _596 + _355;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_353, _354, _355), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3909 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_353, _354, _355), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3942 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_353, _354, _355), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3975 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _971 = fma(_596, cbModelParam._m0[30u].z, fma(_592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _588));
        float _975 = fma(_596, cbModelParam._m0[31u].z, fma(_592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _588));
        float _979 = fma(_596, cbModelParam._m0[32u].z, fma(_592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _588));
        float _1002 = _588 + _353;
        float _1003 = _592 + _354;
        float _1004 = _596 + _355;
        float _1014 = fma(_1004, cbModelParam._m0[30u].z, fma(_1003, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002)) - _971;
        float _1015 = fma(_1004, cbModelParam._m0[31u].z, fma(_1003, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002)) - _975;
        float _1016 = fma(_1004, cbModelParam._m0[32u].z, fma(_1003, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002)) - _979;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_971 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_975 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[35u].z) + ((((((_979 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1070 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1037.x + (-0.5));
        float _1072 = _1070 * (_1037.y + (-0.5));
        float _1073 = _1070 * (_1037.z + (-0.5));
        float _1080 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1044.x + (-0.5));
        float _1082 = _1080 * (_1044.y + (-0.5));
        float _1083 = _1080 * (_1044.z + (-0.5));
        float _1090 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1051.x + (-0.5));
        float _1092 = _1090 * (_1051.y + (-0.5));
        float _1093 = _1090 * (_1051.z + (-0.5));
        float _1100 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1058.x + (-0.5));
        float _1102 = _1100 * (_1058.y + (-0.5));
        float _1103 = _1100 * (_1058.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_353, _354, _355), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4038 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1134 + 1.0))) + _1139) * _1104;
        float _1149 = _1072 * 0.5;
        float _1150 = _1082 * 0.5;
        float _1151 = _1092 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_353, _354, _355), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4071 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1176 + 1.0))) + _1181) * _1105;
        float _1191 = _1073 * 0.5;
        float _1192 = _1083 * 0.5;
        float _1193 = _1093 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_353, _354, _355), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4104 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1218 + 1.0))) + _1223) * _1106;
        _1240 = _1073;
        _1241 = _1072;
        _1242 = _1071;
        _1243 = _1083;
        _1244 = _1082;
        _1245 = _1081;
        _1246 = _1093;
        _1247 = _1092;
        _1248 = _1091;
        _1249 = _1106;
        _1250 = _1105;
        _1251 = _1104;
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
    }
    else
    {
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = _928;
        _1250 = _928;
        _1251 = _928;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _940)) + _940;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _941)) + _941;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _942)) + _942;
    float _1287 = fma(_1266, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1264 * cbSceneParam._m0[89u].x));
    float _1290 = fma(_1266, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1264 * cbSceneParam._m0[90u].x));
    float _1293 = fma(_1266, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1264));
    float _1308 = _533 * 0.5;
    float _1309 = _534 * 0.5;
    float _1310 = _535 * 0.5;
    float _1311 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1314 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1317 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1351;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1324 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_927, _931, _934, _937));
        float _1328 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_929, _932, _935, _938));
        float _1332 = dot(vec4(_1308, _1309, _1310, 1.0), vec4(_930, _933, _936, _939));
        float _1339 = dot(vec4(cbModelParam._m0[39u]), vec4(_1308, _1309, _1310, 1.0));
        _1351 = dot(vec3(isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1351 = 1.0;
    }
    float _1362;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1353 = dot(vec4(cbModelParam._m0[40u]), vec4(_1308, _1309, _1310, 1.0));
        _1362 = dot(vec3(isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1353) ? 0.0 : (isnan(0.0) ? _1353 : max(0.0, _1353))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1362 = 1.0;
    }
    float _1366 = (_1362 * cbModelParam._m0[1u].x) + (_1351 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _357);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1376 : min(cbModelParam._m0[25u].z, _1376));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_596, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _588)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_596, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _588)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_596, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _588)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_535, cbModelParam._m0[13u].z, fma(_534, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533));
        float _1440 = fma(_535, cbModelParam._m0[14u].z, fma(_534, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533));
        float _1443 = fma(_535, cbModelParam._m0[15u].z, fma(_534, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533));
        float _1471;
        if (_1437 > 0.0)
        {
            _1471 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1471 = frontier_phi_17_15_ladder;
        }
        float _1647;
        if (_1440 > 0.0)
        {
            _1647 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1647 = frontier_phi_26_22_ladder;
        }
        float _1992;
        if (_1443 > 0.0)
        {
            _1992 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1992 = frontier_phi_38_33_ladder;
        }
        float _1994 = isnan(_1647) ? _1471 : (isnan(_1471) ? _1647 : min(_1471, _1647));
        float _1995 = isnan(_1992) ? _1994 : (isnan(_1994) ? _1992 : min(_1994, _1992));
        float _1999 = (_1995 * _1437) + _1426;
        float _2000 = (_1995 * _1440) + _1430;
        float _2001 = (_1995 * _1443) + _1434;
        float _2002 = _1995 * 9.9999997473787516355514526367188e-05;
        float _2004 = (-1.0) - _2002;
        float _2006 = _2002 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2001 > _2006) || ((_2001 < _2004) || ((_2000 > _2006) || ((_2000 < _2004) || ((_1999 < _2004) || (_1999 > _2006))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2146 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2001, cbModelParam._m0[9u].z, fma(_2000, cbModelParam._m0[9u].y, _1999 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2001, cbModelParam._m0[10u].z, fma(_2000, cbModelParam._m0[10u].y, _1999 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2001, cbModelParam._m0[11u].z, fma(_2000, cbModelParam._m0[11u].y, _1999 * cbModelParam._m0[11u].x))), _1377);
            frontier_phi_16_38_ladder = _2146.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2146.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2146.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_16_38_ladder_2;
        _1461 = frontier_phi_16_38_ladder_1;
        _1463 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_533, _534, _535), _1377);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1467 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _357);
    float _1468 = isnan(_1467) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1467 : min(cbModelParam._m0[25u].w, _1467));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1525 = fma(_596, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _588)) + cbModelParam._m0[21u].w;
        float _1529 = fma(_596, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _588)) + cbModelParam._m0[22u].w;
        float _1533 = fma(_596, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _588)) + cbModelParam._m0[23u].w;
        float _1536 = fma(_535, cbModelParam._m0[21u].z, fma(_534, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533));
        float _1539 = fma(_535, cbModelParam._m0[22u].z, fma(_534, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533));
        float _1542 = fma(_535, cbModelParam._m0[23u].z, fma(_534, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533));
        float _1652;
        if (_1536 > 0.0)
        {
            _1652 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _2019;
        if (_1539 > 0.0)
        {
            _2019 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2019 = frontier_phi_40_35_ladder;
        }
        float _2357;
        if (_1542 > 0.0)
        {
            _2357 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2357 = frontier_phi_50_47_ladder;
        }
        float _2359 = isnan(_2019) ? _1652 : (isnan(_1652) ? _2019 : min(_1652, _2019));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1536) + _1525;
        float _2365 = (_2360 * _1539) + _1529;
        float _2366 = (_2360 * _1542) + _1533;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1468);
            frontier_phi_25_50_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1561 = frontier_phi_25_50_ladder_2;
        _1563 = frontier_phi_25_50_ladder_1;
        _1565 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_533, _534, _535), _1468);
        _1561 = _1545.x * cbModelParam._m0[1u].z;
        _1563 = _1545.y * cbModelParam._m0[1u].z;
        _1565 = _1545.z * cbModelParam._m0[1u].z;
    }
    float _1578 = (((_559 * _510) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1580 = (((_559 * _512) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1563 - _1461)) + _1461);
    float _1582 = (((_559 * _513) + _560) * _525) * ((cbModelParam._m0[1u].w * (_1565 - _1463)) + _1463);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1578 * cbSceneParam._m0[91u].x));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1639 = _1626 / _1638;
    float _1640 = _1630 / _1638;
    float _1641 = _1634 / _1638;
    float _1788;
    float _1789;
    float _1790;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1668 = ((uint(_1641 > cbSceneParam._m0[59u].y) + uint(_1641 > cbSceneParam._m0[59u].x)) + uint(_1641 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1669 = _1668 + 43u;
        uint _1677 = _1668 + 44u;
        uint _1685 = _1668 + 45u;
        uint _1693 = _1668 + 46u;
        float _1704 = fma(_1638, cbSceneParam._m0[_1669].w, fma(_1634, cbSceneParam._m0[_1669].z, fma(_1630, cbSceneParam._m0[_1669].y, _1626 * cbSceneParam._m0[_1669].x)));
        float _1708 = fma(_1638, cbSceneParam._m0[_1677].w, fma(_1634, cbSceneParam._m0[_1677].z, fma(_1630, cbSceneParam._m0[_1677].y, _1626 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1638, cbSceneParam._m0[_1693].w, fma(_1634, cbSceneParam._m0[_1693].z, fma(_1630, cbSceneParam._m0[_1693].y, _1626 * cbSceneParam._m0[_1693].x)));
        float _1721 = cbSceneParam._m0[33u].z * _1716;
        float _1723 = cbSceneParam._m0[33u].w * _1716;
        float _1726 = fma(_1638, cbSceneParam._m0[_1685].w, fma(_1634, cbSceneParam._m0[_1685].z, fma(_1630, cbSceneParam._m0[_1685].y, _1626 * cbSceneParam._m0[_1685].x))) / _1716;
        float _1774 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
        float _4230 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1781 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1721 + _1704) / _1716, (_1723 + _1708) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1704) / _1716, (_1708 - _1721) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1721) / _1716, (_1708 - _1723) / _1716), _1726), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 - _1723) / _1716, (_1721 + _1708) / _1716), _1726), 0.0)).x), vec4(0.25)));
        _1788 = 1.0 - (_1781 * cbSceneParam._m0[34u].x);
        _1789 = 1.0 - (_1781 * cbSceneParam._m0[34u].y);
        _1790 = 1.0 - (_1781 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1788 = 1.0;
        _1789 = 1.0;
        _1790 = 1.0;
    }
    float _1854;
    float _1856;
    float _1858;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1842 = fma(_1638, cbSceneParam._m0[63u].w, fma(_1634, cbSceneParam._m0[63u].z, fma(_1630, cbSceneParam._m0[63u].y, _1626 * cbSceneParam._m0[63u].x)));
        float _1843 = fma(_1638, cbSceneParam._m0[60u].w, fma(_1634, cbSceneParam._m0[60u].z, fma(_1630, cbSceneParam._m0[60u].y, _1626 * cbSceneParam._m0[60u].x))) / _1842;
        float _1844 = fma(_1638, cbSceneParam._m0[61u].w, fma(_1634, cbSceneParam._m0[61u].z, fma(_1630, cbSceneParam._m0[61u].y, _1626 * cbSceneParam._m0[61u].x))) / _1842;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1843 >= cbSceneParam._m0[64u].x) && (_1844 >= cbSceneParam._m0[64u].y)) && (_1843 <= cbSceneParam._m0[64u].z)) && (_1844 <= cbSceneParam._m0[64u].w))
        {
            float _2032 = fma(_1638, cbSceneParam._m0[62u].w, fma(_1634, cbSceneParam._m0[62u].z, fma(_1630, cbSceneParam._m0[62u].y, _1626 * cbSceneParam._m0[62u].x))) / _1842;
            float _2036 = isnan(cbSceneParam._m0[41u].w) ? _2032 : (isnan(_2032) ? cbSceneParam._m0[41u].w : max(_2032, cbSceneParam._m0[41u].w));
            float _2079 = (cbSceneParam._m0[33u].x - sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641))) * cbSceneParam._m0[33u].y;
            float _4246 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
            float _2086 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1843, cbSceneParam._m0[33u].w + _1844), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1843, _1844 - cbSceneParam._m0[33u].z), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].z, _1844 - cbSceneParam._m0[33u].w), _2036), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1843 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1844), _2036), 0.0)).x), vec4(0.25)));
            float _2090 = 1.0 - (_2086 * cbSceneParam._m0[34u].x);
            float _2091 = 1.0 - (_2086 * cbSceneParam._m0[34u].y);
            float _2092 = 1.0 - (_2086 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2092) ? _1790 : (isnan(_1790) ? _2092 : min(_1790, _2092));
            frontier_phi_37_36_ladder_1 = isnan(_2091) ? _1789 : (isnan(_1789) ? _2091 : min(_1789, _2091));
            frontier_phi_37_36_ladder_2 = isnan(_2090) ? _1788 : (isnan(_1788) ? _2090 : min(_1788, _2090));
        }
        else
        {
            frontier_phi_37_36_ladder = _1790;
            frontier_phi_37_36_ladder_1 = _1789;
            frontier_phi_37_36_ladder_2 = _1788;
        }
        _1854 = frontier_phi_37_36_ladder_2;
        _1856 = frontier_phi_37_36_ladder_1;
        _1858 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1854 = _1788;
        _1856 = _1789;
        _1858 = _1790;
    }
    float _1898 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _588), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _596))).x));
    float _4272 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1903 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _588), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _596))).x));
    float _4283 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)));
    float _1906 = _1905 * _1854;
    float _1907 = _1905 * _1856;
    float _1908 = _1905 * _1858;
    uvec4 _1912 = floatBitsToUint(cbInstanceData._m0[_484 + 5u]);
    uint _1914 = _1912.x * 14u;
    uint _1915 = _1914 + 13u;
    float _1922 = _525 + (-1.0);
    float _1927 = (cbLight._m0[_1915].x * _1922) + 1.0;
    float _1928 = (cbLight._m0[_1915].y * _1922) + 1.0;
    float _1929 = (cbLight._m0[_1915].z * _1922) + 1.0;
    float _1930 = (cbLight._m0[_1915].w * _1922) + 1.0;
    uint _1931 = _1914 + 5u;
    float _1937 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1941 = _1914 + 4u;
    float _1951 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1955 = _1914 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_353, _354, _355));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_353, _354, _355));
    float _4304 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4315 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1931].x * _1937) * _1976) + (((cbLight._m0[_1941].x * _1906) * _1951) * _1974);
    float _1984 = ((_1937 * cbLight._m0[_1931].y) * _1976) + (((cbLight._m0[_1941].y * _1907) * _1951) * _1974);
    float _1985 = ((_1937 * cbLight._m0[_1931].z) * _1976) + (((cbLight._m0[_1941].z * _1908) * _1951) * _1974);
    uvec4 _1989 = floatBitsToUint(cbLight._m0[_1914 + 12u]);
    bool _1991 = _1989.x == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_1991)
    {
        _2093 = _1983;
        _2095 = _1984;
        _2097 = _1985;
    }
    else
    {
        uint _2101 = _1914 + 6u;
        float _2117 = (dot(vec3(cbLight._m0[_1914 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4326 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2120 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2093 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _1983;
        _2095 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _1984;
        _2097 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _1985;
    }
    bool _2100 = _1989.y == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2100)
    {
        _2155 = _2093;
        _2157 = _2095;
        _2159 = _2097;
    }
    else
    {
        uint _2328 = _1914 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_1914 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4342 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2347 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2155 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2093;
        _2157 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2095;
        _2159 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2097;
    }
    uint _2162 = _1914 + 8u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _357) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1914].x + _424;
    float _2178 = cbLight._m0[_1914].y + _425;
    float _2179 = cbLight._m0[_1914].z + _426;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1914].xyz));
    float _4358 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _2191 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2192 = dot(vec3(_353, _354, _355), vec3(_2184, _2185, _2186));
    float _4380 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2184, _2185, _2186));
    float _4391 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2176 * _2176;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0);
    float _2213 = 0.959999978542327880859375 - _507;
    float _2215 = 0.959999978542327880859375 - _508;
    float _2216 = 0.959999978542327880859375 - _509;
    float _2223 = 1.0 - _2176;
    float _2234 = (0.5 / (((_2191 * ((_2190 * _2223) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2223) + _2176) * _2190))) * _2190;
    float _4402 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    uint _2250 = _1914 + 9u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _357) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_1955].x + _424;
    float _2264 = cbLight._m0[_1955].y + _425;
    float _2265 = cbLight._m0[_1955].z + _426;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1955].xyz));
    float _4413 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2277 = dot(vec3(_353, _354, _355), vec3(_2270, _2271, _2272));
    float _4424 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2270, _2271, _2272));
    float _4435 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2262 * _2262;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
    float _2303 = 1.0 - _2262;
    float _2313 = (0.5 / (((_2191 * ((_2276 * _2303) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2303) + _2262) * _2276))) * _2276;
    float _4446 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    float _2325 = (((((_2296 * _2213) + _510) * cbLight._m0[_2250].x) * _2315) * _1937) + ((((cbLight._m0[_2162].x * _1906) * ((_2212 * _2213) + _510)) * _2236) * _1951);
    float _2326 = (((((_2296 * _2215) + _512) * cbLight._m0[_2250].y) * _2315) * _1937) + ((((cbLight._m0[_2162].y * _1907) * ((_2212 * _2215) + _512)) * _2236) * _1951);
    float _2327 = (((((_2296 * _2216) + _513) * cbLight._m0[_2250].z) * _2315) * _1937) + ((((cbLight._m0[_2162].z * _1908) * ((_2212 * _2216) + _513)) * _2236) * _1951);
    float _2383;
    float _2385;
    float _2387;
    if (_1991)
    {
        _2383 = _2325;
        _2385 = _2326;
        _2387 = _2327;
    }
    else
    {
        uint _2389 = _1914 + 2u;
        uint _2393 = _1914 + 10u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _357) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _424;
        float _2410 = cbLight._m0[_2389].y + _425;
        float _2411 = cbLight._m0[_2389].z + _426;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2389].xyz));
        float _4457 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2423 = dot(vec3(_353, _354, _355), vec3(_2416, _2417, _2418));
        float _4468 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4479 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2191 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2449) + _2408) * _2422))) * _2422;
        float _4490 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2383 = (((((_2442 * _2213) + _510) * cbLight._m0[_2393].x) * _2461) * _2462) + _2325;
        _2385 = (((((_2442 * _2215) + _512) * cbLight._m0[_2393].y) * _2461) * _2462) + _2326;
        _2387 = (((((_2442 * _2216) + _513) * cbLight._m0[_2393].z) * _2461) * _2462) + _2327;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2100)
    {
        _2493 = _2383;
        _2495 = _2385;
        _2497 = _2387;
    }
    else
    {
        uint _2504 = _1914 + 3u;
        uint _2508 = _1914 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _357) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _424;
        float _2525 = cbLight._m0[_2504].y + _425;
        float _2526 = cbLight._m0[_2504].z + _426;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2504].xyz));
        float _4506 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2538 = dot(vec3(_353, _354, _355), vec3(_2531, _2532, _2533));
        float _4517 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4528 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2191 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2564) + _2523) * _2537))) * _2537;
        float _4539 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2493 = (((((_2557 * _2213) + _510) * cbLight._m0[_2508].x) * _2576) * _2577) + _2383;
        _2495 = (((((_2557 * _2215) + _512) * cbLight._m0[_2508].y) * _2576) * _2577) + _2385;
        _2497 = (((((_2557 * _2216) + _513) * cbLight._m0[_2508].z) * _2576) * _2577) + _2387;
    }
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_1912.y == 0u)
    {
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2626;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2626;
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2626;
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _2642)));
        float _2663 = (log2(_2629 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            uint _2913 = 0u;
            uint _2922;
            bool _2923;
            for (;;)
            {
                _2922 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                _2923 = _2922 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2923)
                {
                    frontier_phi_71_pred = _2912;
                    frontier_phi_71_pred_1 = _2911;
                    frontier_phi_71_pred_2 = _2910;
                    frontier_phi_71_pred_3 = _2909;
                    frontier_phi_71_pred_4 = _2908;
                    frontier_phi_71_pred_5 = _2907;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2922;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2913 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2627;
                        float _3119 = _3078.y - _2628;
                        float _3120 = _3078.z - _2629;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_465, _468, _471), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4565 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2627;
                        float _3154 = (-0.0) - _2628;
                        float _3155 = (-0.0) - _2629;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3169 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _541;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3160 + _3125;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_465, _468, _471), vec3(_3160, _3161, _3162));
                        float _4581 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3194 = dot(vec3(_465, _468, _471), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4592 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3138 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3128) + _3203;
                        float _4603 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4614 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3201 * _3201) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2982 = (_3149 * _3097.x) + _3055;
                        _2983 = (_3149 * _3097.y) + _3056;
                        _2984 = (_3149 * _3097.z) + _3057;
                        _2979 = (_3229 * _3114.x) + _3052;
                        _2980 = (_3229 * _3114.y) + _3053;
                        _2981 = (_3229 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_71_pred = _2984;
                    frontier_phi_71_pred_1 = _2983;
                    frontier_phi_71_pred_2 = _2982;
                    frontier_phi_71_pred_3 = _2981;
                    frontier_phi_71_pred_4 = _2980;
                    frontier_phi_71_pred_5 = _2979;
                }
                _2766 = frontier_phi_71_pred;
                _2764 = frontier_phi_71_pred_1;
                _2762 = frontier_phi_71_pred_2;
                _2760 = frontier_phi_71_pred_3;
                _2758 = frontier_phi_71_pred_4;
                _2756 = frontier_phi_71_pred_5;
                uint _2914 = _2913 + 1u;
                if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2907 = _2756;
                    _2908 = _2758;
                    _2909 = _2760;
                    _2910 = _2762;
                    _2911 = _2764;
                    _2912 = _2766;
                    _2913 = _2914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((4294967295u << _2772) & _2673) == 0u)
        {
            _2875 = _2755;
            _2877 = _2757;
            _2879 = _2759;
            _2881 = _2761;
            _2883 = _2763;
            _2885 = _2765;
        }
        else
        {
            float _2900 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
            float _2901 = _2900 * _2627;
            float _2902 = _2900 * _2628;
            float _2903 = _2900 * _2629;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _3035 = _2755;
                float _3036 = _2757;
                float _3037 = _2759;
                float _3038 = _2761;
                float _3039 = _2763;
                float _3040 = _2765;
                uint _3041 = _2772;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3051)
                    {
                        frontier_phi_82_pred = _3040;
                        frontier_phi_82_pred_1 = _3039;
                        frontier_phi_82_pred_2 = _3038;
                        frontier_phi_82_pred_3 = _3037;
                        frontier_phi_82_pred_4 = _3036;
                        frontier_phi_82_pred_5 = _3035;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        float _3259 = _3038;
                        float _3260 = _3039;
                        float _3261 = _3040;
                        uint _3262 = _3050;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3332;
                        vec4 _3348;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3273 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3319 = (_3273 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3335 = (_3273 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3351 = (_3273 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3273 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_2629, _3383.z, fma(_2628, _3383.y, _3383.x * _2627)) + _3383.w;
                            _3396 = !((fma(_2629, _3364.z, fma(_2628, _3364.y, _3364.x * _2627)) + _3364.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3288.x - _2627;
                                float _3424 = _3288.y - _2628;
                                float _3425 = _3288.z - _2629;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3289 * _3289));
                                float _4625 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3441 = sqrt(_3426) * _3304.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_465, _468, _471))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_2629, _3332.z, fma(_2628, _3332.y, _3332.x * _2627)) + _3332.w) / _3395;
                                float _3455 = (fma(_2629, _3348.z, fma(_2628, _3348.y, _3348.x * _2627)) + _3348.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4641 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _541;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2901;
                                float _3485 = _3431 - _2902;
                                float _3486 = _3432 - _2903;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_465, _468, _471), vec3((-0.0) - _2901, (-0.0) - _2902, (-0.0) - _2903));
                                float _4652 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3498 = dot(vec3(_465, _468, _471), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4663 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_465, _468, _471), vec3(_3430, _3431, _3432))) + _3507;
                                float _4674 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4685 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3461 * _3304.z;
                                frontier_phi_88_pred_1 = _3461 * _3304.y;
                                frontier_phi_88_pred_2 = _3461 * _3304.x;
                                frontier_phi_88_pred_3 = _3535 * _3316.z;
                                frontier_phi_88_pred_4 = _3535 * _3316.y;
                                frontier_phi_88_pred_5 = _3535 * _3316.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3544 = frontier_phi_88_pred;
                            _3543 = frontier_phi_88_pred_1;
                            _3542 = frontier_phi_88_pred_2;
                            _3541 = frontier_phi_88_pred_3;
                            _3540 = frontier_phi_88_pred_4;
                            _3539 = frontier_phi_88_pred_5;
                            _3246 = _3542 + _3259;
                            _3247 = _3543 + _3260;
                            _3248 = _3544 + _3261;
                            _3243 = _3539 + _3256;
                            _3244 = _3540 + _3257;
                            _3245 = _3541 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3248;
                        frontier_phi_82_pred_1 = _3247;
                        frontier_phi_82_pred_2 = _3246;
                        frontier_phi_82_pred_3 = _3245;
                        frontier_phi_82_pred_4 = _3244;
                        frontier_phi_82_pred_5 = _3243;
                    }
                    _2886 = frontier_phi_82_pred;
                    _2884 = frontier_phi_82_pred_1;
                    _2882 = frontier_phi_82_pred_2;
                    _2880 = frontier_phi_82_pred_3;
                    _2878 = frontier_phi_82_pred_4;
                    _2876 = frontier_phi_82_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2876;
                        _3036 = _2878;
                        _3037 = _2880;
                        _3038 = _2882;
                        _3039 = _2884;
                        _3040 = _2886;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2882;
                frontier_phi_63_64_ladder_1 = _2886;
                frontier_phi_63_64_ladder_2 = _2884;
                frontier_phi_63_64_ladder_3 = _2880;
                frontier_phi_63_64_ladder_4 = _2878;
                frontier_phi_63_64_ladder_5 = _2876;
            }
            else
            {
                frontier_phi_63_64_ladder = _2761;
                frontier_phi_63_64_ladder_1 = _2765;
                frontier_phi_63_64_ladder_2 = _2763;
                frontier_phi_63_64_ladder_3 = _2759;
                frontier_phi_63_64_ladder_4 = _2757;
                frontier_phi_63_64_ladder_5 = _2755;
            }
            _2875 = frontier_phi_63_64_ladder_5;
            _2877 = frontier_phi_63_64_ladder_4;
            _2879 = frontier_phi_63_64_ladder_3;
            _2881 = frontier_phi_63_64_ladder;
            _2883 = frontier_phi_63_64_ladder_2;
            _2885 = frontier_phi_63_64_ladder_1;
        }
        float _2890 = isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0));
        _2686 = (_2890 * _2881) + _2155;
        _2688 = (_2890 * _2883) + _2157;
        _2690 = (_2890 * _2885) + _2159;
        _2692 = ((_2875 * _510) * _2890) + _2493;
        _2694 = ((_2877 * _512) * _2890) + _2495;
        _2696 = ((_2879 * _513) * _2890) + _2497;
    }
    else
    {
        _2686 = _2155;
        _2688 = _2157;
        _2690 = _2159;
        _2692 = _2493;
        _2694 = _2495;
        _2696 = _2497;
    }
    float _4701 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4712 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _4723 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _4734 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _2714 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2686 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _525))) + ((_2692 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2688 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _525))) + ((_2694 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2716 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2690 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _525))) + ((_2696 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1366)) * cbPerFrame._m0[3u].x);
    float _2721 = cbInstanceData._m0[_484 + 6u].w * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)));
    float _2726 = _444 / cbSceneParam._m0[86u].x;
    float _2727 = _445 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _366 : (isnan(_366) ? cbSceneParam._m0[77u].w : min(_366, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_366 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_366) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _366 : min(cbSceneParam._m0[80u].w, _366));
        float _2781 = _2780 / _366;
        float _2792 = _2781 * _417;
        float _2793 = _418 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2795 = _2781 * _419;
        float _2797 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2793;
        float _2805 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2794 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2936 = 1.0 / cbSceneParam._m0[80u].x;
            float _2937 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2938 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            _2992 = ((abs(_2805 / _2794) * cbSceneParam._m0[80u].y) * ((((_2947 - _2948) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))))) * _2936)) - ((exp2(_2815 * _2947) - exp2(_2815 * _2948)) * _2936))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2746);
        _2817 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2819 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2821 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2823 = _3003 * _2746;
    }
    else
    {
        _2817 = _2743;
        _2819 = _2744;
        _2821 = _2745;
        _2823 = _2746;
    }
    bool _3030;
    vec4 _2833;
    vec4 _2855;
    float _2857;
    float _2861;
    float _2862;
    float _2863;
    float _2864;
    bool _2874;
    for (;;)
    {
        _2833 = cbMatDynParam._m0[0u];
        float _2835 = roundEven(_2833.y);
        bool _2836 = _2835 == 3.0;
        float _2837 = log2(_2823);
        float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * _2714;
        float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * _2715;
        float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * _2716;
        float _2853 = _433 + (-0.5);
        _2855 = cbMtdParam._m0[1u];
        _2857 = _2855.y * _2853;
        float _2860 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2861 = _2860 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
        _2862 = _2860 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
        _2863 = _2860 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
        _2864 = _2853 * 0.999000012874603271484375;
        _2874 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2874)
        {
            if ((cbInstanceData._m0[_484 + 7u].x + _2864) < 0.5)
            {
                _3030 = true;
                break;
            }
        }
        uint _2971 = _486 + uint(_2833.w);
        if ((cbInstanceData._m0[_2971].w < 1.0) && ((cbInstanceData._m0[_2971].w + _2864) < 0.5))
        {
            _3030 = true;
            break;
        }
        if ((_2857 + 1.0) < _2855.x)
        {
            _3030 = true;
            break;
        }
        _3030 = false;
        break;
    }
    float _3234;
    if (_3030)
    {
        discard_state = true;
        _3234 = 0.0;
    }
    else
    {
        _3234 = _2721;
    }
    SV_Target.x = _2861;
    SV_Target.y = _2862;
    SV_Target.z = _2863;
    SV_Target.w = _3234;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2721;
    discard_exit();
}


