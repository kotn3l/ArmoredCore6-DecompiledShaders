#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _924;
float _3368;
float _3369;
float _3370;
float _3371;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _234 = _228.w;
    float _241 = cbMtdParam._m0[9u].x * _228.x;
    float _242 = cbMtdParam._m0[9u].y * _228.y;
    float _243 = cbMtdParam._m0[9u].z * _228.z;
    vec4 _256 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _258 = _256.x;
    bool _265 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _282 = ((_265 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _258)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _258))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3380 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _285 = 1.0 - (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)));
    float _3391 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _286 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _294 = _234 - (((_286 * _286) * _234) * (3.0 - (_286 * 2.0)));
    vec4 _306 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_0, SS_SpecularMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _308 = _306.x;
    vec4 _320 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _324 = _320.z;
    float _327 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_327, _329), vec2(_327, _329));
    float _3402 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))));
    float _338 = fma(_335, _204 * NORMAL.x, fma(_329, _211 * TANGENT.x, (_197 * _190) * _327));
    float _341 = fma(_335, _204 * NORMAL.y, fma(_329, _211 * TANGENT.y, (_197 * _191) * _327));
    float _344 = fma(_335, _204 * NORMAL.z, fma(_329, _211 * TANGENT.z, (_197 * _192) * _327));
    float _348 = inversesqrt(dot(vec3(_338, _341, _344), vec3(_338, _341, _344)));
    float _349 = _348 * _338;
    float _350 = _348 * _341;
    float _351 = _348 * _344;
    float _3413 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _352 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _353 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3446 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3457 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3468 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _357 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _362 = _265 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _403 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _413 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _403);
    float _414 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _403);
    float _415 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _403);
    float _419 = inversesqrt(dot(vec3(_413, _414, _415), vec3(_413, _414, _415)));
    float _420 = _413 * _419;
    float _421 = _414 * _419;
    float _422 = _415 * _419;
    vec4 _427 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _429 = _427.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _603 = sqrt(((_413 * _413) + (_414 * _414)) + (_415 * _415));
        float _609 = (cbMatDynParam._m0[5u].x * _603) + cbMatDynParam._m0[5u].y;
        float _3479 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _614 = (cbMatDynParam._m0[5u].z * _603) + cbMatDynParam._m0[5u].w;
        float _3490 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) - _610)) + _610) < ((_429 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_351, cbSceneParam._m0[5u].z, fma(_350, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _349));
    float _464 = fma(_351, cbSceneParam._m0[6u].z, fma(_350, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _349));
    float _467 = fma(_351, cbSceneParam._m0[7u].z, fma(_350, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _349));
    uint _480 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = _480 + 9u;
    uint _483 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3501 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _495 = 1.0 - _357;
    float _496 = _492 * _495;
    float _497 = _493 * _495;
    float _498 = _494 * _495;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _357;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _357;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _357;
    float _506 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    vec4 _518 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _521 = _518.x * TEXCOORD.z;
    float _522 = dot(vec3(_349, _350, _351), vec3(_420, _421, _422));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _349) - _420;
    float _530 = (_525 * _350) - _421;
    float _531 = (_525 * _351) - _422;
    float _535 = abs(dot(vec3(_420, _421, _422), vec3(_349, _350, _351)));
    float _3534 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_353);
    float _549 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _555 = (1.0 - _549) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _537;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _652 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _656 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _681 = _584 + _349;
        float _682 = _588 + _350;
        float _683 = _592 + _351;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_349, _350, _351), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3582 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_349, _350, _351), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3615 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_349, _350, _351), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3648 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _967 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _971 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _975 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _998 = _584 + _349;
        float _999 = _588 + _350;
        float _1000 = _592 + _351;
        float _1010 = fma(_1000, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998)) - _967;
        float _1011 = fma(_1000, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998)) - _971;
        float _1012 = fma(_1000, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998)) - _975;
        float _1016 = inversesqrt(dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012)));
        float _1029 = ((_1016 * _1010) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_967 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1016 * _1011) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_971 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1016 * _1012) / cbModelParam._m0[35u].z) + ((((((_975 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1029, _1030, _1031), 0.0);
        float _1066 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1033.x + (-0.5));
        float _1068 = _1066 * (_1033.y + (-0.5));
        float _1069 = _1066 * (_1033.z + (-0.5));
        float _1076 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1040.x + (-0.5));
        float _1078 = _1076 * (_1040.y + (-0.5));
        float _1079 = _1076 * (_1040.z + (-0.5));
        float _1086 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1047.x + (-0.5));
        float _1088 = _1086 * (_1047.y + (-0.5));
        float _1089 = _1086 * (_1047.z + (-0.5));
        float _1096 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1054.x + (-0.5));
        float _1098 = _1096 * (_1054.y + (-0.5));
        float _1099 = _1096 * (_1054.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_349, _350, _351), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3711 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1130 + 1.0))) + _1135) * _1100;
        float _1145 = _1068 * 0.5;
        float _1146 = _1078 * 0.5;
        float _1147 = _1088 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_349, _350, _351), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3744 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1172 + 1.0))) + _1177) * _1101;
        float _1187 = _1069 * 0.5;
        float _1188 = _1079 * 0.5;
        float _1189 = _1089 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_349, _350, _351), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3777 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1214 + 1.0))) + _1219) * _1102;
        _1236 = _1069;
        _1237 = _1068;
        _1238 = _1067;
        _1239 = _1079;
        _1240 = _1078;
        _1241 = _1077;
        _1242 = _1089;
        _1243 = _1088;
        _1244 = _1087;
        _1245 = _1102;
        _1246 = _1101;
        _1247 = _1100;
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = _924;
        _1246 = _924;
        _1247 = _924;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _936)) + _936;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _937)) + _937;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _938)) + _938;
    float _1283 = fma(_1262, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1260 * cbSceneParam._m0[89u].x));
    float _1286 = fma(_1262, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1260 * cbSceneParam._m0[90u].x));
    float _1289 = fma(_1262, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1260));
    float _1304 = _529 * 0.5;
    float _1305 = _530 * 0.5;
    float _1306 = _531 * 0.5;
    float _1307 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1310 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1313 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1347;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1320 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_923, _927, _930, _933));
        float _1324 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_925, _928, _931, _934));
        float _1328 = dot(vec4(_1304, _1305, _1306, 1.0), vec4(_926, _929, _932, _935));
        float _1335 = dot(vec4(cbModelParam._m0[39u]), vec4(_1304, _1305, _1306, 1.0));
        _1347 = dot(vec3(isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)), isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1347 = 1.0;
    }
    float _1358;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1349 = dot(vec4(cbModelParam._m0[40u]), vec4(_1304, _1305, _1306, 1.0));
        _1358 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1349) ? 0.0 : (isnan(0.0) ? _1349 : max(0.0, _1349))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1358 = 1.0;
    }
    float _1362 = (_1358 * cbModelParam._m0[1u].x) + (_1347 * (1.0 - cbModelParam._m0[1u].x));
    float _1372 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _353);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1372 : min(cbModelParam._m0[25u].z, _1372));
    float _1455;
    float _1457;
    float _1459;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1422 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1426 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1430 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1433 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1436 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1439 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1467;
        if (_1433 > 0.0)
        {
            _1467 = abs((1.0 - _1422) / _1433);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1422 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1467 = frontier_phi_17_15_ladder;
        }
        float _1724;
        if (_1436 > 0.0)
        {
            _1724 = abs((1.0 - _1426) / _1436);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1426 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1724 = frontier_phi_26_22_ladder;
        }
        float _1981;
        if (_1439 > 0.0)
        {
            _1981 = abs((1.0 - _1430) / _1439);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1430 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1981 = frontier_phi_38_33_ladder;
        }
        float _1983 = isnan(_1724) ? _1467 : (isnan(_1467) ? _1724 : min(_1467, _1724));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1433) + _1422;
        float _1989 = (_1984 * _1436) + _1426;
        float _1990 = (_1984 * _1439) + _1430;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1373);
            frontier_phi_16_38_ladder = _2118.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2118.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2118.x * cbModelParam._m0[1u].y;
        }
        _1455 = frontier_phi_16_38_ladder_2;
        _1457 = frontier_phi_16_38_ladder_1;
        _1459 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1373);
        _1455 = _1443.x * cbModelParam._m0[1u].y;
        _1457 = _1443.y * cbModelParam._m0[1u].y;
        _1459 = _1443.z * cbModelParam._m0[1u].y;
    }
    float _1463 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _353);
    float _1464 = isnan(_1463) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1463 : min(cbModelParam._m0[25u].w, _1463));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1521 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1525 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1529 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1532 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1535 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1538 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1729;
        if (_1532 > 0.0)
        {
            _1729 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1729 = frontier_phi_28_24_ladder;
        }
        float _2008;
        if (_1535 > 0.0)
        {
            _2008 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2008 = frontier_phi_40_35_ladder;
        }
        float _2221;
        if (_1538 > 0.0)
        {
            _2221 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2221 = frontier_phi_49_46_ladder;
        }
        float _2223 = isnan(_2008) ? _1729 : (isnan(_1729) ? _2008 : min(_1729, _2008));
        float _2224 = isnan(_2221) ? _2223 : (isnan(_2223) ? _2221 : min(_2223, _2221));
        float _2228 = (_2224 * _1532) + _1521;
        float _2229 = (_2224 * _1535) + _1525;
        float _2230 = (_2224 * _1538) + _1529;
        float _2231 = _2224 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2231;
        float _2234 = _2231 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2230 > _2234) || ((_2230 < _2232) || ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 < _2232) || (_2228 > _2234))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2230, cbModelParam._m0[17u].z, fma(_2229, cbModelParam._m0[17u].y, _2228 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2230, cbModelParam._m0[18u].z, fma(_2229, cbModelParam._m0[18u].y, _2228 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2230, cbModelParam._m0[19u].z, fma(_2229, cbModelParam._m0[19u].y, _2228 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_25_49_ladder = _2431.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2431.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2431.x * cbModelParam._m0[1u].z;
        }
        _1557 = frontier_phi_25_49_ladder_2;
        _1559 = frontier_phi_25_49_ladder_1;
        _1561 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1464);
        _1557 = _1541.x * cbModelParam._m0[1u].z;
        _1559 = _1541.y * cbModelParam._m0[1u].z;
        _1561 = _1541.z * cbModelParam._m0[1u].z;
    }
    float _1574 = (((_555 * _506) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1557 - _1455)) + _1455);
    float _1576 = (((_555 * _508) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1559 - _1457)) + _1457);
    float _1578 = (((_555 * _509) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1561 - _1459)) + _1459);
    float _1581 = fma(_1578, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1574 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1578, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1574 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1578, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, _1574 * cbSceneParam._m0[91u].x));
    vec4 _1613 = texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _584), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _592)));
    vec4 _1623 = texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _584), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _592)));
    float _1632 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - _1613.x));
    float _3903 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1637 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - _1623.x));
    float _3914 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1639 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)));
    uvec4 _1643 = floatBitsToUint(cbInstanceData._m0[_480 + 5u]);
    uint _1645 = _1643.x * 14u;
    uint _1646 = _1645 + 13u;
    float _1653 = _521 + (-1.0);
    float _1658 = (cbLight._m0[_1646].x * _1653) + 1.0;
    float _1659 = (cbLight._m0[_1646].y * _1653) + 1.0;
    float _1660 = (cbLight._m0[_1646].z * _1653) + 1.0;
    float _1661 = (cbLight._m0[_1646].w * _1653) + 1.0;
    uint _1662 = _1645 + 5u;
    float _1668 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1672 = _1645 + 4u;
    float _1682 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1686 = _1645 | 1u;
    float _1697 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_349, _350, _351));
    float _1700 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_349, _350, _351));
    float _3935 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _3946 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1705 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.3183098733425140380859375;
    float _1707 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1714 = ((cbLight._m0[_1662].x * _1668) * _1707) + (((cbLight._m0[_1672].x * _1639) * _1682) * _1705);
    float _1715 = ((_1668 * cbLight._m0[_1662].y) * _1707) + (((cbLight._m0[_1672].y * _1639) * _1682) * _1705);
    float _1716 = ((_1668 * cbLight._m0[_1662].z) * _1707) + (((cbLight._m0[_1672].z * _1639) * _1682) * _1705);
    uvec4 _1721 = floatBitsToUint(cbLight._m0[_1645 + 12u]);
    bool _1723 = _1721.x == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1723)
    {
        _1734 = _1714;
        _1736 = _1715;
        _1738 = _1716;
    }
    else
    {
        uint _1742 = _1645 + 6u;
        float _1758 = (dot(vec3(cbLight._m0[_1645 + 2u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1759 = _1758 * _1758;
        float _3957 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1761 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1734 = (((cbLight._m0[_1742].x * 0.3183098733425140380859375) * _1760) * _1761) + _1714;
        _1736 = (((cbLight._m0[_1742].y * 0.3183098733425140380859375) * _1760) * _1761) + _1715;
        _1738 = (((cbLight._m0[_1742].z * 0.3183098733425140380859375) * _1760) * _1761) + _1716;
    }
    bool _1741 = _1721.y == 0u;
    float _1779;
    float _1781;
    float _1783;
    if (_1741)
    {
        _1779 = _1734;
        _1781 = _1736;
        _1783 = _1738;
    }
    else
    {
        uint _1952 = _1645 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1645 + 3u].xyz), vec3(_349, _350, _351)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3973 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1971 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _1779 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1734;
        _1781 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1736;
        _1783 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1738;
    }
    uint _1786 = _1645 + 8u;
    float _1799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _353) * 0.949999988079071044921875);
    float _1800 = _1799 * _1799;
    float _1801 = cbLight._m0[_1645].x + _420;
    float _1802 = cbLight._m0[_1645].y + _421;
    float _1803 = cbLight._m0[_1645].z + _422;
    float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
    float _1808 = _1807 * _1801;
    float _1809 = _1807 * _1802;
    float _1810 = _1807 * _1803;
    float _1811 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1645].xyz));
    float _3989 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _1815 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1816 = dot(vec3(_349, _350, _351), vec3(_1808, _1809, _1810));
    float _4011 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1808, _1809, _1810));
    float _4022 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1800 * _1800;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1836 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
    float _1837 = 0.959999978542327880859375 - _503;
    float _1839 = 0.959999978542327880859375 - _504;
    float _1840 = 0.959999978542327880859375 - _505;
    float _1847 = 1.0 - _1800;
    float _1858 = (0.5 / (((_1815 * ((_1814 * _1847) + _1800)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1847) + _1800) * _1814))) * _1814;
    float _4033 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1860 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    uint _1874 = _1645 + 9u;
    float _1885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1686].w)) * _353) * 0.949999988079071044921875);
    float _1886 = _1885 * _1885;
    float _1887 = cbLight._m0[_1686].x + _420;
    float _1888 = cbLight._m0[_1686].y + _421;
    float _1889 = cbLight._m0[_1686].z + _422;
    float _1893 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
    float _1894 = _1893 * _1887;
    float _1895 = _1893 * _1888;
    float _1896 = _1893 * _1889;
    float _1897 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_1686].xyz));
    float _4044 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1901 = dot(vec3(_349, _350, _351), vec3(_1894, _1895, _1896));
    float _4055 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1686].xyz), vec3(_1894, _1895, _1896));
    float _4066 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1886 * _1886;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1920 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
    float _1927 = 1.0 - _1886;
    float _1937 = (0.5 / (((_1815 * ((_1900 * _1927) + _1886)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _1927) + _1886) * _1900))) * _1900;
    float _4077 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1939 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    float _1949 = (((((_1920 * _1837) + _506) * cbLight._m0[_1874].x) * _1939) * _1668) + ((((cbLight._m0[_1786].x * _1639) * ((_1836 * _1837) + _506)) * _1860) * _1682);
    float _1950 = (((((_1920 * _1839) + _508) * cbLight._m0[_1874].y) * _1939) * _1668) + ((((cbLight._m0[_1786].y * _1639) * ((_1836 * _1839) + _508)) * _1860) * _1682);
    float _1951 = (((((_1920 * _1840) + _509) * cbLight._m0[_1874].z) * _1939) * _1668) + ((((cbLight._m0[_1786].z * _1639) * ((_1836 * _1840) + _509)) * _1860) * _1682);
    float _2013;
    float _2015;
    float _2017;
    if (_1723)
    {
        _2013 = _1949;
        _2015 = _1950;
        _2017 = _1951;
    }
    else
    {
        uint _2019 = _1645 + 2u;
        uint _2023 = _1645 + 10u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _353) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _420;
        float _2040 = cbLight._m0[_2019].y + _421;
        float _2041 = cbLight._m0[_2019].z + _422;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2019].xyz));
        float _4088 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2053 = dot(vec3(_349, _350, _351), vec3(_2046, _2047, _2048));
        float _4099 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _4110 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1815 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2079) + _2038) * _2052))) * _2052;
        float _4121 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2013 = (((((_2072 * _1837) + _506) * cbLight._m0[_2023].x) * _2091) * _2092) + _1949;
        _2015 = (((((_2072 * _1839) + _508) * cbLight._m0[_2023].y) * _2091) * _2092) + _1950;
        _2017 = (((((_2072 * _1840) + _509) * cbLight._m0[_2023].z) * _2091) * _2092) + _1951;
    }
    float _2127;
    float _2129;
    float _2131;
    if (_1741)
    {
        _2127 = _2013;
        _2129 = _2015;
        _2131 = _2017;
    }
    else
    {
        uint _2138 = _1645 + 3u;
        uint _2142 = _1645 + 11u;
        float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _353) * 0.949999988079071044921875);
        float _2157 = _2156 * _2156;
        float _2158 = cbLight._m0[_2138].x + _420;
        float _2159 = cbLight._m0[_2138].y + _421;
        float _2160 = cbLight._m0[_2138].z + _422;
        float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
        float _2165 = _2164 * _2158;
        float _2166 = _2164 * _2159;
        float _2167 = _2164 * _2160;
        float _2168 = dot(vec3(_349, _350, _351), vec3(cbLight._m0[_2138].xyz));
        float _4137 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2172 = dot(vec3(_349, _350, _351), vec3(_2165, _2166, _2167));
        float _4148 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2176 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2165, _2166, _2167));
        float _4159 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2180 = _2157 * _2157;
        float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
        float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0);
        float _2198 = 1.0 - _2157;
        float _2208 = (0.5 / (((_1815 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_1815 * _2198) + _2157) * _2171))) * _2171;
        float _4170 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
        _2127 = (((((_2191 * _1837) + _506) * cbLight._m0[_2142].x) * _2210) * _2211) + _2013;
        _2129 = (((((_2191 * _1839) + _508) * cbLight._m0[_2142].y) * _2210) * _2211) + _2015;
        _2131 = (((((_2191 * _1840) + _509) * cbLight._m0[_2142].z) * _2210) * _2211) + _2017;
    }
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    float _2354;
    float _2356;
    if (_1643.y == 0u)
    {
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2286;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2286;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2286;
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.x;
        uint _2313 = uint((float(_2301.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _2302))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _2302)));
        float _2323 = (log2(_2289 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2324 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        uint _2327 = uint(isnan(14.0) ? _2324 : (isnan(_2324) ? 14.0 : min(_2324, 14.0)));
        uvec4 _2332 = texelFetch(g_lightClusterGridBuffer, int(((_2327 << 2u) + (_2313 << 6u)) >> 2u));
        uint _2333 = _2332.x;
        uint _2334 = _2301.z;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((((1u << ((_2334 >> 4u) & 15u)) + 4294967295u) & _2333) == 0u) || ((_2334 & 240u) == 0u))
        {
            _2436 = 0.0;
            _2438 = 0.0;
            _2440 = 0.0;
            _2442 = 0.0;
            _2444 = 0.0;
            _2446 = 0.0;
        }
        else
        {
            float _2437;
            float _2439;
            float _2441;
            float _2443;
            float _2445;
            float _2447;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2604)
                {
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2603;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2594 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _2287;
                        float _2800 = _2759.y - _2288;
                        float _2801 = _2759.z - _2289;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2809 = dot(vec3(_461, _464, _467), vec3(_2806, _2807, _2808));
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4196 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2809) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _2287;
                        float _2835 = (-0.0) - _2288;
                        float _2836 = (-0.0) - _2289;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2851 = exp2(log2(1.0 / ((_2826 * 3.5) + 5.0)) * 0.25);
                        float _2852 = 1.0 - _537;
                        float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                        float _2860 = _2859 * _2859;
                        float _2861 = _2860 * _2860;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2872 = dot(vec3(_461, _464, _467), vec3(_2841, _2842, _2843));
                        float _4212 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2876 = dot(vec3(_461, _464, _467), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                        float _4223 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                        float _2884 = _2819 * _2860;
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2809) + _2885;
                        float _4234 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2890 = 1.0 - _2860;
                        float _2900 = (0.5 / (((_2889 * ((_2875 * _2890) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2889 * _2890) + _2860) * _2875))) * _2889;
                        float _4245 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2911 = (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_2883 * _2883) * ((_2826 * 2.1991131305694580078125) + 3.141590118408203125))) * _2815;
                        _2663 = (_2830 * _2778.x) + _2736;
                        _2664 = (_2830 * _2778.y) + _2737;
                        _2665 = (_2830 * _2778.z) + _2738;
                        _2660 = (_2911 * _2795.x) + _2733;
                        _2661 = (_2911 * _2795.y) + _2734;
                        _2662 = (_2911 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2665;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                _2437 = frontier_phi_66_pred;
                _2447 = frontier_phi_66_pred_1;
                _2445 = frontier_phi_66_pred_2;
                _2443 = frontier_phi_66_pred_3;
                _2441 = frontier_phi_66_pred_4;
                _2439 = frontier_phi_66_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2437;
                    _2589 = _2439;
                    _2590 = _2441;
                    _2591 = _2443;
                    _2592 = _2445;
                    _2593 = _2447;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2436 = _2437;
            _2438 = _2439;
            _2440 = _2441;
            _2442 = _2443;
            _2444 = _2445;
            _2446 = _2447;
        }
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.z;
        uint _2453 = (_2451 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2453) & _2333) == 0u)
        {
            _2556 = _2436;
            _2558 = _2438;
            _2560 = _2440;
            _2562 = _2442;
            _2564 = _2444;
            _2566 = _2446;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
            float _2582 = _2581 * _2287;
            float _2583 = _2581 * _2288;
            float _2584 = _2581 * _2289;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2453 < ((_2451 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2716 = _2436;
                float _2717 = _2438;
                float _2718 = _2440;
                float _2719 = _2442;
                float _2720 = _2444;
                float _2721 = _2446;
                uint _2722 = _2453;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2327 << 5u) + (_2313 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2732)
                    {
                        frontier_phi_77_pred = _2721;
                        frontier_phi_77_pred_1 = _2720;
                        frontier_phi_77_pred_2 = _2719;
                        frontier_phi_77_pred_3 = _2718;
                        frontier_phi_77_pred_4 = _2717;
                        frontier_phi_77_pred_5 = _2716;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        uint _2944 = _2731;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3014;
                        vec4 _3030;
                        float _3077;
                        bool _3078;
                        for (;;)
                        {
                            uint _2955 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3001 = (_2955 * 40u) + 16u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2955 * 40u) + 20u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2955 * 40u) + 24u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3052 = (_2955 * 40u) + 28u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3077 = fma(_2289, _3065.z, fma(_2288, _3065.y, _3065.x * _2287)) + _3065.w;
                            _3078 = !((fma(_2289, _3046.z, fma(_2288, _3046.y, _3046.x * _2287)) + _3046.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3078)
                            {
                                float _3105 = _2970.x - _2287;
                                float _3106 = _2970.y - _2288;
                                float _3107 = _2970.z - _2289;
                                float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                                float _3111 = inversesqrt(_3108);
                                float _3112 = _3111 * _3105;
                                float _3113 = _3111 * _3106;
                                float _3114 = _3111 * _3107;
                                float _3118 = 1.0 - (_3108 / (_2971 * _2971));
                                float _4256 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3123 = sqrt(_3108) * _2986.w;
                                float _3125 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                                float _3126 = _3125 * _3125;
                                float _3129 = ((1.0 - _3126) * dot(vec3(_3112, _3113, _3114), vec3(_461, _464, _467))) + _3126;
                                float _3132 = _3123 * _3123;
                                float _3136 = (fma(_2289, _3014.z, fma(_2288, _3014.y, _3014.x * _2287)) + _3014.w) / _3077;
                                float _3137 = (fma(_2289, _3030.z, fma(_2288, _3030.y, _3030.x * _2287)) + _3030.w) / _3077;
                                float _3141 = 1.0 - dot(vec2(_3136, _3137), vec2(_3136, _3137));
                                float _4272 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3143 = _3142 * (((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3119) / ((_3132 * 0.699999988079071044921875) + 1.0));
                                float _3155 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                                float _3156 = 1.0 - _537;
                                float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                                float _3164 = _3163 * _3163;
                                float _3165 = _3164 * _3164;
                                float _3166 = _3112 - _2582;
                                float _3167 = _3113 - _2583;
                                float _3168 = _3114 - _2584;
                                float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                                float _3176 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4283 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3180 = dot(vec3(_461, _464, _467), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                                float _4294 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                                float _3188 = _3125 * _3164;
                                float _3189 = _3188 * _3188;
                                float _3195 = ((1.0 - _3189) * dot(vec3(_461, _464, _467), vec3(_3112, _3113, _3114))) + _3189;
                                float _4305 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3197 = 1.0 - _3164;
                                float _3207 = (0.5 / (((_3196 * ((_3179 * _3197) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3164) * _3179))) * _3196;
                                float _4316 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3217 = (_3142 * _3119) * (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_3187 * _3187) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3143 * _2986.y;
                                frontier_phi_83_pred_1 = _3143 * _2986.x;
                                frontier_phi_83_pred_2 = _3217 * _2998.z;
                                frontier_phi_83_pred_3 = _3217 * _2998.y;
                                frontier_phi_83_pred_4 = _3217 * _2998.x;
                                frontier_phi_83_pred_5 = _3143 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3225 = frontier_phi_83_pred;
                            _3224 = frontier_phi_83_pred_1;
                            _3223 = frontier_phi_83_pred_2;
                            _3222 = frontier_phi_83_pred_3;
                            _3221 = frontier_phi_83_pred_4;
                            _3226 = frontier_phi_83_pred_5;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            _2930 = _3226 + _2943;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2930;
                        frontier_phi_77_pred_1 = _2929;
                        frontier_phi_77_pred_2 = _2928;
                        frontier_phi_77_pred_3 = _2927;
                        frontier_phi_77_pred_4 = _2926;
                        frontier_phi_77_pred_5 = _2925;
                    }
                    _2567 = frontier_phi_77_pred;
                    _2565 = frontier_phi_77_pred_1;
                    _2563 = frontier_phi_77_pred_2;
                    _2561 = frontier_phi_77_pred_3;
                    _2559 = frontier_phi_77_pred_4;
                    _2557 = frontier_phi_77_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2557;
                        _2717 = _2559;
                        _2718 = _2561;
                        _2719 = _2563;
                        _2720 = _2565;
                        _2721 = _2567;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2561;
                frontier_phi_58_59_ladder_1 = _2567;
                frontier_phi_58_59_ladder_2 = _2565;
                frontier_phi_58_59_ladder_3 = _2563;
                frontier_phi_58_59_ladder_4 = _2559;
                frontier_phi_58_59_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_58_59_ladder = _2440;
                frontier_phi_58_59_ladder_1 = _2446;
                frontier_phi_58_59_ladder_2 = _2444;
                frontier_phi_58_59_ladder_3 = _2442;
                frontier_phi_58_59_ladder_4 = _2438;
                frontier_phi_58_59_ladder_5 = _2436;
            }
            _2556 = frontier_phi_58_59_ladder_5;
            _2558 = frontier_phi_58_59_ladder_4;
            _2560 = frontier_phi_58_59_ladder;
            _2562 = frontier_phi_58_59_ladder_3;
            _2564 = frontier_phi_58_59_ladder_2;
            _2566 = frontier_phi_58_59_ladder_1;
        }
        float _2571 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2346 = (_2571 * _2562) + _1779;
        _2348 = (_2571 * _2564) + _1781;
        _2350 = (_2571 * _2566) + _1783;
        _2352 = ((_2556 * _506) * _2571) + _2127;
        _2354 = ((_2558 * _508) * _2571) + _2129;
        _2356 = ((_2560 * _509) * _2571) + _2131;
    }
    else
    {
        _2346 = _1779;
        _2348 = _1781;
        _2350 = _1783;
        _2352 = _2127;
        _2354 = _2129;
        _2356 = _2131;
    }
    float _4332 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4343 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4354 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4365 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _2374 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2346 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _521))) + ((_2352 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2375 = ((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2348 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _521))) + ((_2354 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2376 = ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2350 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _521))) + ((_2356 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1362)) * cbPerFrame._m0[3u].x);
    float _2381 = cbInstanceData._m0[_480 + 6u].w * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)));
    float _2386 = _440 / cbSceneParam._m0[86u].x;
    float _2387 = _441 / cbSceneParam._m0[86u].y;
    vec4 _2401 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, (log2((isnan(cbSceneParam._m0[77u].w) ? _362 : (isnan(_362) ? cbSceneParam._m0[77u].w : min(_362, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2403 = _2401.x;
    float _2404 = _2401.y;
    float _2405 = _2401.z;
    float _2406 = _2401.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_362 > cbSceneParam._m0[78u].w)
    {
        float _2461 = isnan(_362) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _362 : min(cbSceneParam._m0[80u].w, _362));
        float _2462 = _2461 / _362;
        float _2473 = _2462 * _413;
        float _2474 = _414 * _2462;
        float _2475 = (-0.0) - _2474;
        float _2476 = _2462 * _415;
        float _2478 = (cbSceneParam._m0[77u].w * _2475) / _2461;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2474;
        float _2486 = sqrt(((_2473 * _2473) + (_2474 * _2474)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2461)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2475 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2619 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2673 = ((abs(_2486 / _2475) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2496 * _2628) - exp2(_2496 * _2629)) * _2617))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2386, _2387, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2406);
        _2498 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2403;
        _2500 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2404;
        _2502 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2405;
        _2504 = _2684 * _2406;
    }
    else
    {
        _2498 = _2403;
        _2500 = _2404;
        _2502 = _2405;
        _2504 = _2406;
    }
    bool _2711;
    vec4 _2514;
    vec4 _2536;
    float _2538;
    float _2542;
    float _2543;
    float _2544;
    float _2545;
    bool _2555;
    for (;;)
    {
        _2514 = cbMatDynParam._m0[0u];
        float _2516 = roundEven(_2514.y);
        bool _2517 = _2516 == 3.0;
        float _2518 = log2(_2504);
        float _2525 = exp2(_2518 * cbSceneParam._m0[78u].x) * _2374;
        float _2526 = exp2(_2518 * cbSceneParam._m0[78u].y) * _2375;
        float _2527 = exp2(_2518 * cbSceneParam._m0[78u].z) * _2376;
        float _2534 = _429 + (-0.5);
        _2536 = cbMtdParam._m0[1u];
        _2538 = _2536.y * _2534;
        float _2541 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2542 = _2541 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
        _2543 = _2541 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
        _2544 = _2541 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
        _2545 = _2534 * 0.999000012874603271484375;
        _2555 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2555)
        {
            if ((cbInstanceData._m0[_480 + 7u].x + _2545) < 0.5)
            {
                _2711 = true;
                break;
            }
        }
        uint _2652 = _482 + uint(_2514.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2545) < 0.5))
        {
            _2711 = true;
            break;
        }
        if ((_2538 + 1.0) < _2536.x)
        {
            _2711 = true;
            break;
        }
        _2711 = false;
        break;
    }
    float _2916;
    if (_2711)
    {
        discard_state = true;
        _2916 = 0.0;
    }
    else
    {
        _2916 = _2381;
    }
    SV_Target.x = _2542;
    SV_Target.y = _2543;
    SV_Target.z = _2544;
    SV_Target.w = _2916;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2381;
    discard_exit();
}


