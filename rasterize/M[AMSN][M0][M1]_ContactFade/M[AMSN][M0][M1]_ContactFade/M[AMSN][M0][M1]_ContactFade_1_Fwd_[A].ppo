#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 64) uniform texture2D g_CloudShadowTexture0;
layout(set = 0, binding = 65) uniform texture2D g_CloudShadowTexture1;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _887;
float _3310;
float _3311;
float _3312;
float _3313;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _230 = _224.w;
    float _237 = cbMtdParam._m0[9u].x * _224.x;
    float _238 = cbMtdParam._m0[9u].y * _224.y;
    float _239 = cbMtdParam._m0[9u].z * _224.z;
    vec4 _252 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _254 = _252.x;
    bool _261 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _278 = ((_261 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _254)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _254))) - POSITION_1.w) / cbMtdParam._m0[10u].x;
    float _3322 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _281 = 1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)));
    float _3333 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _282 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _290 = _230 - (((_282 * _282) * _230) * (3.0 - (_282 * 2.0)));
    vec4 _302 = texture(sampler2D(M_AMSN_M0_M1_ContactFade_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _306 = _302.z;
    float _309 = (_302.x * 2.0) + (-1.0);
    float _311 = (_302.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3344 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _317 = sqrt(1.0 - (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))));
    float _320 = fma(_317, _200 * NORMAL.x, fma(_311, _207 * TANGENT.x, (_193 * _186) * _309));
    float _323 = fma(_317, _200 * NORMAL.y, fma(_311, _207 * TANGENT.y, (_193 * _187) * _309));
    float _326 = fma(_317, _200 * NORMAL.z, fma(_311, _207 * TANGENT.z, (_193 * _188) * _309));
    float _330 = inversesqrt(dot(vec3(_320, _323, _326), vec3(_320, _323, _326)));
    float _331 = _330 * _320;
    float _332 = _330 * _323;
    float _333 = _330 * _326;
    float _3355 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _334 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _3366 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _335 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3388 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3399 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _343 = _261 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _384 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _394 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _384);
    float _395 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _384);
    float _396 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _384);
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _401 = _394 * _400;
    float _402 = _395 * _400;
    float _403 = _396 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _566 = sqrt(((_394 * _394) + (_395 * _395)) + (_396 * _396));
        float _572 = (cbMatDynParam._m0[5u].x * _566) + cbMatDynParam._m0[5u].y;
        float _3410 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        float _573 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _577 = (cbMatDynParam._m0[5u].z * _566) + cbMatDynParam._m0[5u].w;
        float _3421 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) - _573)) + _573) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_333, cbSceneParam._m0[5u].z, fma(_332, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _331));
    float _445 = fma(_333, cbSceneParam._m0[6u].z, fma(_332, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _331));
    float _448 = fma(_333, cbSceneParam._m0[7u].z, fma(_332, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _331));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3432 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _487 = _484.x * TEXCOORD.z;
    float _488 = dot(vec3(_331, _332, _333), vec3(_401, _402, _403));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _331) - _401;
    float _496 = (_491 * _332) - _402;
    float _497 = (_491 * _333) - _403;
    float _501 = abs(dot(vec3(_401, _402, _403), vec3(_331, _332, _333)));
    float _3465 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_335);
    float _515 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _611 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _615 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _619 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _644 = _547 + _331;
        float _645 = _551 + _332;
        float _646 = _555 + _333;
        float _656 = fma(_646, cbModelParam._m0[26u].z, fma(_645, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) - _611;
        float _657 = fma(_646, cbModelParam._m0[27u].z, fma(_645, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) - _615;
        float _658 = fma(_646, cbModelParam._m0[28u].z, fma(_645, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) - _619;
        float _662 = inversesqrt(dot(vec3(_656, _657, _658), vec3(_656, _657, _658)));
        float _675 = ((_662 * _656) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_611 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _676 = ((_662 * _657) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_615 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _677 = ((_662 * _658) / cbModelParam._m0[34u].z) + ((((((_619 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _676, _677), 0.0);
        float _714 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_680.x + (-0.5));
        float _716 = _714 * (_680.y + (-0.5));
        float _717 = _714 * (_680.z + (-0.5));
        float _724 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_687.x + (-0.5));
        float _726 = _724 * (_687.y + (-0.5));
        float _727 = _724 * (_687.z + (-0.5));
        float _734 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_694.x + (-0.5));
        float _736 = _734 * (_694.y + (-0.5));
        float _737 = _734 * (_694.z + (-0.5));
        float _744 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_701.x + (-0.5));
        float _746 = _744 * (_701.y + (-0.5));
        float _747 = _744 * (_701.z + (-0.5));
        float _748 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _749 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = _715 * 0.5;
        float _752 = _725 * 0.5;
        float _753 = _735 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _768 = (dot(vec3(_331, _332, _333), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _778 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_748 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3513 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_780 + 1.0))) + _785) * _748;
        float _795 = _716 * 0.5;
        float _796 = _726 * 0.5;
        float _797 = _736 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_331, _332, _333), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3524 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_749 + 9.9999997473787516355514526367188e-06);
        float _3535 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3546 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * (_822 + 1.0))) + _827) * _749;
        float _837 = _717 * 0.5;
        float _838 = _727 * 0.5;
        float _839 = _737 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _853 = (dot(vec3(_331, _332, _333), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3557 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _862 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3568 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3579 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (_864 + 1.0))) + _869) * _750;
        _886 = _717;
        _888 = _716;
        _889 = _715;
        _890 = _727;
        _891 = _726;
        _892 = _725;
        _893 = _737;
        _894 = _736;
        _895 = _735;
        _896 = _750;
        _897 = _749;
        _898 = _748;
        _899 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _900 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
        _899 = 0.0;
        _900 = 0.0;
        _901 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _934 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _938 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _961 = _547 + _331;
        float _962 = _551 + _332;
        float _963 = _555 + _333;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_331, _332, _333), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3642 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_331, _332, _333), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3675 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_331, _332, _333), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3708 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _887;
        _1200 = _887;
        _1201 = _887;
        _1202 = _887;
        _1203 = _887;
        _1204 = _887;
        _1205 = _887;
        _1206 = _887;
        _1207 = _887;
        _1208 = _887;
        _1209 = _887;
        _1210 = _887;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _899)) + _899;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _900)) + _900;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _495 * 0.5;
    float _1268 = _496 * 0.5;
    float _1269 = _497 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_886, _890, _893, _896));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_888, _891, _894, _897));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _892, _895, _898));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _335);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1385 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1389 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1393 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1396 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1399 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1402 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1430;
        if (_1396 > 0.0)
        {
            _1430 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1430 = frontier_phi_17_15_ladder;
        }
        float _1685;
        if (_1399 > 0.0)
        {
            _1685 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1685 = frontier_phi_26_22_ladder;
        }
        float _1931;
        if (_1402 > 0.0)
        {
            _1931 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1931 = frontier_phi_38_33_ladder;
        }
        float _1933 = isnan(_1685) ? _1430 : (isnan(_1430) ? _1685 : min(_1430, _1685));
        float _1934 = isnan(_1931) ? _1933 : (isnan(_1933) ? _1931 : min(_1933, _1931));
        float _1938 = (_1934 * _1396) + _1385;
        float _1939 = (_1934 * _1399) + _1389;
        float _1940 = (_1934 * _1402) + _1393;
        float _1941 = _1934 * 9.9999997473787516355514526367188e-05;
        float _1943 = (-1.0) - _1941;
        float _1945 = _1941 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1940 > _1945) || ((_1940 < _1943) || ((_1939 > _1945) || ((_1939 < _1943) || ((_1938 < _1943) || (_1938 > _1945))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1940, cbModelParam._m0[9u].z, fma(_1939, cbModelParam._m0[9u].y, _1938 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1940, cbModelParam._m0[10u].z, fma(_1939, cbModelParam._m0[10u].y, _1938 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1940, cbModelParam._m0[11u].z, fma(_1939, cbModelParam._m0[11u].y, _1938 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_16_38_ladder = _2064.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2064.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2064.x * cbModelParam._m0[1u].y;
        }
        _1418 = frontier_phi_16_38_ladder_2;
        _1420 = frontier_phi_16_38_ladder_1;
        _1422 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1336);
        _1418 = _1406.x * cbModelParam._m0[1u].y;
        _1420 = _1406.y * cbModelParam._m0[1u].y;
        _1422 = _1406.z * cbModelParam._m0[1u].y;
    }
    float _1426 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _335);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1426 : min(cbModelParam._m0[25u].w, _1426));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1498 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1501 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1690;
        if (_1495 > 0.0)
        {
            _1690 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1690 = frontier_phi_28_24_ladder;
        }
        float _1958;
        if (_1498 > 0.0)
        {
            _1958 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1958 = frontier_phi_40_35_ladder;
        }
        float _2163;
        if (_1501 > 0.0)
        {
            _2163 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2163 = frontier_phi_49_46_ladder;
        }
        float _2165 = isnan(_1958) ? _1690 : (isnan(_1690) ? _1958 : min(_1690, _1958));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1495) + _1484;
        float _2171 = (_2166 * _1498) + _1488;
        float _2172 = (_2166 * _1501) + _1492;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1427);
            frontier_phi_25_49_ladder = _2373.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2373.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2373.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_25_49_ladder_2;
        _1522 = frontier_phi_25_49_ladder_1;
        _1524 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1427);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1536 = ((((1.0 - _515) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_515 * _503)) * _487;
    float _1537 = _1536 * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1538 = _1536 * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1539 = _1536 * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1542 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    vec4 _1574 = texture(sampler2D(g_CloudShadowTexture0, SS_WrapLinear), vec2(cbSceneParam._m0[67u].x + (cbSceneParam._m0[67u].z * _547), cbSceneParam._m0[67u].y - (cbSceneParam._m0[67u].w * _555)));
    vec4 _1584 = texture(sampler2D(g_CloudShadowTexture1, SS_WrapLinear), vec2(cbSceneParam._m0[68u].x + (cbSceneParam._m0[68u].z * _547), cbSceneParam._m0[68u].y - (cbSceneParam._m0[68u].w * _555)));
    float _1593 = 1.0 - (cbSceneParam._m0[69u].x * (1.0 - _1574.x));
    float _3834 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1598 = 1.0 - (cbSceneParam._m0[69u].y * (1.0 - _1584.x));
    float _3845 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1600 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)));
    uvec4 _1604 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1606 = _1604.x * 14u;
    uint _1607 = _1606 + 13u;
    float _1614 = _487 + (-1.0);
    float _1619 = (cbLight._m0[_1607].x * _1614) + 1.0;
    float _1620 = (cbLight._m0[_1607].y * _1614) + 1.0;
    float _1621 = (cbLight._m0[_1607].z * _1614) + 1.0;
    float _1622 = (cbLight._m0[_1607].w * _1614) + 1.0;
    uint _1623 = _1606 + 5u;
    float _1629 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1633 = _1606 + 4u;
    float _1643 = isnan(1.0) ? _1619 : (isnan(_1619) ? 1.0 : min(_1619, 1.0));
    uint _1647 = _1606 | 1u;
    float _1658 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_331, _332, _333));
    float _1661 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_331, _332, _333));
    float _3866 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _3877 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1666 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1668 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1675 = ((cbLight._m0[_1623].x * _1629) * _1668) + (((cbLight._m0[_1633].x * _1600) * _1643) * _1666);
    float _1676 = ((_1629 * cbLight._m0[_1623].y) * _1668) + (((cbLight._m0[_1633].y * _1600) * _1643) * _1666);
    float _1677 = ((_1629 * cbLight._m0[_1623].z) * _1668) + (((cbLight._m0[_1633].z * _1600) * _1643) * _1666);
    uvec4 _1682 = floatBitsToUint(cbLight._m0[_1606 + 12u]);
    bool _1684 = _1682.x == 0u;
    float _1695;
    float _1697;
    float _1699;
    if (_1684)
    {
        _1695 = _1675;
        _1697 = _1676;
        _1699 = _1677;
    }
    else
    {
        uint _1703 = _1606 + 6u;
        float _1719 = (dot(vec3(cbLight._m0[_1606 + 2u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _1720 = _1719 * _1719;
        float _3888 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1722 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1695 = (((cbLight._m0[_1703].x * 0.3183098733425140380859375) * _1721) * _1722) + _1675;
        _1697 = (((cbLight._m0[_1703].y * 0.3183098733425140380859375) * _1721) * _1722) + _1676;
        _1699 = (((cbLight._m0[_1703].z * 0.3183098733425140380859375) * _1721) * _1722) + _1677;
    }
    bool _1702 = _1682.y == 0u;
    float _1740;
    float _1742;
    float _1744;
    if (_1702)
    {
        _1740 = _1695;
        _1742 = _1697;
        _1744 = _1699;
    }
    else
    {
        uint _1902 = _1606 + 7u;
        float _1918 = (dot(vec3(cbLight._m0[_1606 + 3u].xyz), vec3(_331, _332, _333)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _3904 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1921 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1740 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1695;
        _1742 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1697;
        _1744 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1699;
    }
    uint _1747 = _1606 + 8u;
    float _1760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _335) * 0.949999988079071044921875);
    float _1761 = _1760 * _1760;
    float _1762 = cbLight._m0[_1606].x + _401;
    float _1763 = cbLight._m0[_1606].y + _402;
    float _1764 = cbLight._m0[_1606].z + _403;
    float _1768 = inversesqrt(dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764)));
    float _1769 = _1768 * _1762;
    float _1770 = _1768 * _1763;
    float _1771 = _1768 * _1764;
    float _1772 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1606].xyz));
    float _3920 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1775 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1776 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1777 = dot(vec3(_331, _332, _333), vec3(_1769, _1770, _1771));
    float _3942 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1780 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1781 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1769, _1770, _1771));
    float _3953 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1785 = _1761 * _1761;
    float _1789 = ((_1780 * _1780) * (_1785 + (-1.0))) + 1.0;
    float _1800 = (exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1801 = 1.0 - _1761;
    float _1812 = (0.5 / (((_1776 * ((_1775 * _1801) + _1761)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1801) + _1761) * _1775))) * _1775;
    float _3964 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1814 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1785 / ((_1789 * _1789) * 3.141590118408203125));
    uint _1828 = _1606 + 9u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1647].w)) * _335) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1647].x + _401;
    float _1842 = cbLight._m0[_1647].y + _402;
    float _1843 = cbLight._m0[_1647].z + _403;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1647].xyz));
    float _3975 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1855 = dot(vec3(_331, _332, _333), vec3(_1848, _1849, _1850));
    float _3986 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1859 = dot(vec3(cbLight._m0[_1647].xyz), vec3(_1848, _1849, _1850));
    float _3997 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1863 = _1840 * _1840;
    float _1867 = ((_1858 * _1858) * (_1863 + (-1.0))) + 1.0;
    float _1876 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1877 = 1.0 - _1840;
    float _1887 = (0.5 / (((_1776 * ((_1854 * _1877) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _1877) + _1840) * _1854))) * _1854;
    float _4008 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1863 / ((_1867 * _1867) * 3.141590118408203125));
    float _1899 = (((_1876 * cbLight._m0[_1828].x) * _1889) * _1629) + ((((cbLight._m0[_1747].x * _1600) * _1800) * _1814) * _1643);
    float _1900 = (((_1876 * cbLight._m0[_1828].y) * _1889) * _1629) + ((((cbLight._m0[_1747].y * _1600) * _1800) * _1814) * _1643);
    float _1901 = (((_1876 * cbLight._m0[_1828].z) * _1889) * _1629) + ((((cbLight._m0[_1747].z * _1600) * _1800) * _1814) * _1643);
    float _1963;
    float _1965;
    float _1967;
    if (_1684)
    {
        _1963 = _1899;
        _1965 = _1900;
        _1967 = _1901;
    }
    else
    {
        uint _1969 = _1606 + 2u;
        uint _1973 = _1606 + 10u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _335) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _401;
        float _1990 = cbLight._m0[_1969].y + _402;
        float _1991 = cbLight._m0[_1969].z + _403;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_1969].xyz));
        float _4019 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2003 = dot(vec3(_331, _332, _333), vec3(_1996, _1997, _1998));
        float _4030 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _4041 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1776 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2025) + _1988) * _2002))) * _2002;
        float _4052 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
        _1963 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1899;
        _1965 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1900;
        _1967 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1901;
    }
    float _2073;
    float _2075;
    float _2077;
    if (_1702)
    {
        _2073 = _1963;
        _2075 = _1965;
        _2077 = _1967;
    }
    else
    {
        uint _2084 = _1606 + 3u;
        uint _2088 = _1606 + 11u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _335) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _401;
        float _2105 = cbLight._m0[_2084].y + _402;
        float _2106 = cbLight._m0[_2084].z + _403;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_331, _332, _333), vec3(cbLight._m0[_2084].xyz));
        float _4068 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2118 = dot(vec3(_331, _332, _333), vec3(_2111, _2112, _2113));
        float _4079 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4090 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2140 = 1.0 - _2103;
        float _2150 = (0.5 / (((_1776 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1776 * _2140) + _2103) * _2117))) * _2117;
        float _4101 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _2073 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _2153) + _1963;
        _2075 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _2153) + _1965;
        _2077 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _2153) + _1967;
    }
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    float _2298;
    if (_1604.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
        }
        else
        {
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2546)
                {
                    frontier_phi_66_pred = _2530;
                    frontier_phi_66_pred_1 = _2535;
                    frontier_phi_66_pred_2 = _2534;
                    frontier_phi_66_pred_3 = _2533;
                    frontier_phi_66_pred_4 = _2532;
                    frontier_phi_66_pred_5 = _2531;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2534;
                    _2680 = _2535;
                    _2681 = _2545;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2536 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2229;
                        float _2742 = _2701.y - _2230;
                        float _2743 = _2701.z - _2231;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_442, _445, _448), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4127 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2229;
                        float _2777 = (-0.0) - _2230;
                        float _2778 = (-0.0) - _2231;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _503;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_442, _445, _448), vec3(_2783, _2784, _2785));
                        float _4143 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2818 = dot(vec3(_442, _445, _448), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4154 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4165 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4176 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2605 = (_2772 * _2720.x) + _2678;
                        _2606 = (_2772 * _2720.y) + _2679;
                        _2607 = (_2772 * _2720.z) + _2680;
                        _2602 = (_2853 * _2737.x) + _2675;
                        _2603 = (_2853 * _2737.y) + _2676;
                        _2604 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2606;
                            _2680 = _2607;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_66_pred = _2602;
                    frontier_phi_66_pred_1 = _2607;
                    frontier_phi_66_pred_2 = _2606;
                    frontier_phi_66_pred_3 = _2605;
                    frontier_phi_66_pred_4 = _2604;
                    frontier_phi_66_pred_5 = _2603;
                }
                _2379 = frontier_phi_66_pred;
                _2389 = frontier_phi_66_pred_1;
                _2387 = frontier_phi_66_pred_2;
                _2385 = frontier_phi_66_pred_3;
                _2383 = frontier_phi_66_pred_4;
                _2381 = frontier_phi_66_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2379;
                    _2531 = _2381;
                    _2532 = _2383;
                    _2533 = _2385;
                    _2534 = _2387;
                    _2535 = _2389;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
        }
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.z;
        uint _2395 = (_2393 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2395) & _2275) == 0u)
        {
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
            _2508 = _2388;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2524 = _2523 * _2229;
            float _2525 = _2523 * _2230;
            float _2526 = _2523 * _2231;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2395 < ((_2393 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2658 = _2378;
                float _2659 = _2380;
                float _2660 = _2382;
                float _2661 = _2384;
                float _2662 = _2386;
                float _2663 = _2388;
                uint _2664 = _2395;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2674)
                    {
                        frontier_phi_77_pred = _2663;
                        frontier_phi_77_pred_1 = _2662;
                        frontier_phi_77_pred_2 = _2661;
                        frontier_phi_77_pred_3 = _2660;
                        frontier_phi_77_pred_4 = _2659;
                        frontier_phi_77_pred_5 = _2658;
                    }
                    else
                    {
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        float _2884 = _2662;
                        float _2885 = _2663;
                        uint _2886 = _2673;
                        uint _2887;
                        vec4 _2912;
                        float _2913;
                        vec4 _2928;
                        vec3 _2940;
                        vec4 _2956;
                        vec4 _2972;
                        float _3019;
                        bool _3020;
                        for (;;)
                        {
                            uint _2897 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2886));
                            _2887 = (_2886 + 4294967295u) & _2886;
                            uint _2899 = _2897 * 40u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            _2913 = _2912.w;
                            uint _2915 = (_2897 * 40u) + 4u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2930 = (_2897 * 40u) + 8u;
                            _2940 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x));
                            uint _2943 = (_2897 * 40u) + 16u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2897 * 40u) + 20u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2975 = (_2897 * 40u) + 24u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2994 = (_2897 * 40u) + 28u;
                            vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3019 = fma(_2231, _3007.z, fma(_2230, _3007.y, _3007.x * _2229)) + _3007.w;
                            _3020 = !((fma(_2231, _2988.z, fma(_2230, _2988.y, _2988.x * _2229)) + _2988.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3020)
                            {
                                float _3047 = _2912.x - _2229;
                                float _3048 = _2912.y - _2230;
                                float _3049 = _2912.z - _2231;
                                float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                                float _3053 = inversesqrt(_3050);
                                float _3054 = _3053 * _3047;
                                float _3055 = _3053 * _3048;
                                float _3056 = _3053 * _3049;
                                float _3060 = 1.0 - (_3050 / (_2913 * _2913));
                                float _4187 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3065 = sqrt(_3050) * _2928.w;
                                float _3067 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                                float _3068 = _3067 * _3067;
                                float _3071 = ((1.0 - _3068) * dot(vec3(_3054, _3055, _3056), vec3(_442, _445, _448))) + _3068;
                                float _3074 = _3065 * _3065;
                                float _3078 = (fma(_2231, _2956.z, fma(_2230, _2956.y, _2956.x * _2229)) + _2956.w) / _3019;
                                float _3079 = (fma(_2231, _2972.z, fma(_2230, _2972.y, _2972.x * _2229)) + _2972.w) / _3019;
                                float _3083 = 1.0 - dot(vec2(_3078, _3079), vec2(_3078, _3079));
                                float _4203 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3085 = _3084 * (((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3061) / ((_3074 * 0.699999988079071044921875) + 1.0));
                                float _3097 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                                float _3098 = 1.0 - _503;
                                float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                                float _3106 = _3105 * _3105;
                                float _3107 = _3106 * _3106;
                                float _3108 = _3054 - _2524;
                                float _3109 = _3055 - _2525;
                                float _3110 = _3056 - _2526;
                                float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                                float _3118 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4214 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3121 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3122 = dot(vec3(_442, _445, _448), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                                float _4225 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                                float _3130 = _3067 * _3106;
                                float _3131 = _3130 * _3130;
                                float _3137 = ((1.0 - _3131) * dot(vec3(_442, _445, _448), vec3(_3054, _3055, _3056))) + _3131;
                                float _4236 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3139 = 1.0 - _3106;
                                float _3149 = (0.5 / (((_3138 * ((_3121 * _3139) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3106) * _3121))) * _3138;
                                float _4247 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3159 = (_3084 * _3061) * (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_3129 * _3129) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3085 * _2928.y;
                                frontier_phi_83_pred_1 = _3085 * _2928.x;
                                frontier_phi_83_pred_2 = _3159 * _2940.z;
                                frontier_phi_83_pred_3 = _3159 * _2940.y;
                                frontier_phi_83_pred_4 = _3159 * _2940.x;
                                frontier_phi_83_pred_5 = _3085 * _2928.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_83_pred;
                            _3166 = frontier_phi_83_pred_1;
                            _3165 = frontier_phi_83_pred_2;
                            _3164 = frontier_phi_83_pred_3;
                            _3163 = frontier_phi_83_pred_4;
                            _3168 = frontier_phi_83_pred_5;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            if (_2887 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2887;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2872;
                        frontier_phi_77_pred_1 = _2871;
                        frontier_phi_77_pred_2 = _2870;
                        frontier_phi_77_pred_3 = _2869;
                        frontier_phi_77_pred_4 = _2868;
                        frontier_phi_77_pred_5 = _2867;
                    }
                    _2509 = frontier_phi_77_pred;
                    _2507 = frontier_phi_77_pred_1;
                    _2505 = frontier_phi_77_pred_2;
                    _2503 = frontier_phi_77_pred_3;
                    _2501 = frontier_phi_77_pred_4;
                    _2499 = frontier_phi_77_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2499;
                        _2659 = _2501;
                        _2660 = _2503;
                        _2661 = _2505;
                        _2662 = _2507;
                        _2663 = _2509;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2503;
                frontier_phi_58_59_ladder_1 = _2509;
                frontier_phi_58_59_ladder_2 = _2507;
                frontier_phi_58_59_ladder_3 = _2505;
                frontier_phi_58_59_ladder_4 = _2501;
                frontier_phi_58_59_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_58_59_ladder = _2382;
                frontier_phi_58_59_ladder_1 = _2388;
                frontier_phi_58_59_ladder_2 = _2386;
                frontier_phi_58_59_ladder_3 = _2384;
                frontier_phi_58_59_ladder_4 = _2380;
                frontier_phi_58_59_ladder_5 = _2378;
            }
            _2498 = frontier_phi_58_59_ladder_5;
            _2500 = frontier_phi_58_59_ladder_4;
            _2502 = frontier_phi_58_59_ladder;
            _2504 = frontier_phi_58_59_ladder_3;
            _2506 = frontier_phi_58_59_ladder_2;
            _2508 = frontier_phi_58_59_ladder_1;
        }
        float _2513 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2288 = (_2513 * _2504) + _1740;
        _2290 = (_2513 * _2506) + _1742;
        _2292 = (_2513 * _2508) + _1744;
        _2294 = ((_2498 * 0.039999999105930328369140625) * _2513) + _2073;
        _2296 = ((_2500 * 0.039999999105930328369140625) * _2513) + _2075;
        _2298 = ((_2502 * 0.039999999105930328369140625) * _2513) + _2077;
    }
    else
    {
        _2288 = _1740;
        _2290 = _1742;
        _2292 = _1744;
        _2294 = _2073;
        _2296 = _2075;
        _2298 = _2077;
    }
    float _4263 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4274 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4285 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4296 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _2316 = ((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2288 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _487))) + ((_2294 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2290 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _487))) + ((_2296 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2318 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2292 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _487))) + ((_2298 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1325)) * cbPerFrame._m0[3u].x);
    float _2323 = cbInstanceData._m0[_461 + 6u].w * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)));
    float _2328 = _421 / cbSceneParam._m0[86u].x;
    float _2329 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2343 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, (log2((isnan(cbSceneParam._m0[77u].w) ? _343 : (isnan(_343) ? cbSceneParam._m0[77u].w : min(_343, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2345 = _2343.x;
    float _2346 = _2343.y;
    float _2347 = _2343.z;
    float _2348 = _2343.w;
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    if (_343 > cbSceneParam._m0[78u].w)
    {
        float _2403 = isnan(_343) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _343 : min(cbSceneParam._m0[80u].w, _343));
        float _2404 = _2403 / _343;
        float _2415 = _2404 * _394;
        float _2416 = _395 * _2404;
        float _2417 = (-0.0) - _2416;
        float _2418 = _2404 * _396;
        float _2420 = (cbSceneParam._m0[77u].w * _2417) / _2403;
        float _2421 = _2420 + cbSceneParam._m0[79u].w;
        float _2422 = cbSceneParam._m0[79u].w - _2416;
        float _2428 = sqrt(((_2415 * _2415) + (_2416 * _2416)) + (_2418 * _2418));
        float _2431 = (1.0 - (cbSceneParam._m0[77u].w / _2403)) * _2428;
        float _2436 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2438 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2615;
        if (abs((_2417 - _2420) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2615 = ((((_2421 > 0.0) ? exp2(_2436 * _2421) : (2.0 - exp2(_2438 * _2421))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2431;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : max(_2421, _2422));
            float _2561 = isnan(_2422) ? _2421 : (isnan(_2421) ? _2422 : min(_2421, _2422));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2615 = ((abs(_2428 / _2417) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2436 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2436 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2438 * _2570) - exp2(_2438 * _2571)) * _2559))) + (_2431 * cbSceneParam._m0[80u].z);
        }
        vec4 _2617 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2328, _2329, 1.0), 0.0);
        float _2626 = exp2((_2615 * (-1.44269502162933349609375)) * (1.0 - _2617.w));
        float _2627 = log2(_2626);
        float _2643 = log2(_2348);
        _2440 = (exp2(_2643 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].x)) * _2617.x) / cbSceneParam._m0[78u].x)) + _2345;
        _2442 = (exp2(_2643 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].y)) * _2617.y) / cbSceneParam._m0[78u].y)) + _2346;
        _2444 = (exp2(_2643 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2627 * cbSceneParam._m0[78u].z)) * _2617.z) / cbSceneParam._m0[78u].z)) + _2347;
        _2446 = _2626 * _2348;
    }
    else
    {
        _2440 = _2345;
        _2442 = _2346;
        _2444 = _2347;
        _2446 = _2348;
    }
    bool _2653;
    vec4 _2456;
    vec4 _2478;
    float _2480;
    float _2484;
    float _2485;
    float _2486;
    float _2487;
    bool _2497;
    for (;;)
    {
        _2456 = cbMatDynParam._m0[0u];
        float _2458 = roundEven(_2456.y);
        bool _2459 = _2458 == 3.0;
        float _2460 = log2(_2446);
        float _2467 = exp2(_2460 * cbSceneParam._m0[78u].x) * _2316;
        float _2468 = exp2(_2460 * cbSceneParam._m0[78u].y) * _2317;
        float _2469 = exp2(_2460 * cbSceneParam._m0[78u].z) * _2318;
        float _2476 = _410 + (-0.5);
        _2478 = cbMtdParam._m0[1u];
        _2480 = _2478.y * _2476;
        float _2483 = (_2458 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2484 = _2483 * (_2459 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2440)));
        _2485 = _2483 * (_2459 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2442)));
        _2486 = _2483 * (_2459 ? _2469 : (_2469 + (cbSceneParam._m0[72u].w * _2444)));
        _2487 = _2476 * 0.999000012874603271484375;
        _2497 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2497)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2487) < 0.5)
            {
                _2653 = true;
                break;
            }
        }
        uint _2594 = _463 + uint(_2456.w);
        if ((cbInstanceData._m0[_2594].w < 1.0) && ((cbInstanceData._m0[_2594].w + _2487) < 0.5))
        {
            _2653 = true;
            break;
        }
        if ((_2480 + 1.0) < _2478.x)
        {
            _2653 = true;
            break;
        }
        _2653 = false;
        break;
    }
    float _2858;
    if (_2653)
    {
        discard_state = true;
        _2858 = 0.0;
    }
    else
    {
        _2858 = _2323;
    }
    SV_Target.x = _2484;
    SV_Target.y = _2485;
    SV_Target.z = _2486;
    SV_Target.w = _2858;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2323;
    discard_exit();
}


