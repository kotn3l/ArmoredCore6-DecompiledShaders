#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D OverlayBlend_snp_0_Texture2D_7;
layout(set = 0, binding = 1) uniform texture2D OverlayBlend_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D OverlayBlend_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D OverlayBlend_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D OverlayBlend_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1099;
float _3768;
float _3769;
float _3770;
float _3771;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.w;
    vec4 _264 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _278 = ((_246.x * 4.55000019073486328125) * _264.x) * cbMtdParam._m0[9u].x;
    float _281 = ((_246.y * 4.55000019073486328125) * _264.y) * cbMtdParam._m0[9u].y;
    float _284 = ((_246.z * 4.55000019073486328125) * _264.z) * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _303 = cbMtdParam._m0[10u].y + _296.x;
    vec4 _315 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _332 = texture(sampler2D(OverlayBlend_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _341 = (_315.z * 2.0) * (cbMtdParam._m0[10u].x + _332.z);
    float _350 = (_332.x * 2.0) + (-1.0);
    float _351 = (_332.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_350, _351), vec2(_350, _351));
    float _3780 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _358 = sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))));
    float _361 = (cbMtdParam._m0[10u].z * ((_315.x * 2.0) + (-1.0))) + _350;
    float _362 = (cbMtdParam._m0[10u].z * ((_315.y * 2.0) + (-1.0))) + _351;
    float _365 = fma(_358, _230, fma(_362, _222 * TANGENT.x, (_208 * _200) * _361));
    float _368 = fma(_358, _231, fma(_362, _222 * TANGENT.y, (_208 * _201) * _361));
    float _371 = fma(_358, _232, fma(_362, _222 * TANGENT.z, (_208 * _202) * _361));
    float _375 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    float _376 = _375 * _365;
    float _377 = _375 * _368;
    float _378 = _375 * _371;
    float _3791 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _379 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _380 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _381 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _382 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _383 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _384 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _400 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _451 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _441);
    float _452 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _441);
    float _453 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _441);
    float _457 = inversesqrt(dot(vec3(_451, _452, _453), vec3(_451, _452, _453)));
    float _458 = _451 * _457;
    float _459 = _452 * _457;
    float _460 = _453 * _457;
    vec4 _465 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _467 = _465.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _778 = sqrt(((_451 * _451) + (_452 * _452)) + (_453 * _453));
        float _784 = (cbMatDynParam._m0[5u].x * _778) + cbMatDynParam._m0[5u].y;
        float _3857 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _789 = (cbMatDynParam._m0[5u].z * _778) + cbMatDynParam._m0[5u].w;
        float _3868 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) - _785)) + _785) < ((_467 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _479 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _480 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _482 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _484 = _482.w;
    float _504 = fma(_378, cbSceneParam._m0[5u].z, fma(_377, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _376));
    float _507 = fma(_378, cbSceneParam._m0[6u].z, fma(_377, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _376));
    float _510 = fma(_378, cbSceneParam._m0[7u].z, fma(_377, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _376));
    vec4 _512 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _514 = _512.x;
    float _526 = (((_512.y - _380) + (_512.w * _380)) * cbMtdParam._m0[3u].x) + _380;
    float _544 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_514 * _514)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _553 = (((cbMatDynParam._m0[15u].x - _384) * cbMatDynParam._m0[15u].w) * _544) + _384;
    float _562 = ((_544 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _526)) + _526;
    uint _586 = uint(roundEven(NORMAL.w)) * 13u;
    uint _588 = _586 + 9u;
    uint _589 = _588 + uint(cbMatDynParam._m0[0u].w);
    float _595 = (cbMtdParam._m0[0u].x * _381) * cbInstanceData._m0[_589].x;
    float _596 = (cbMtdParam._m0[0u].y * _382) * cbInstanceData._m0[_589].y;
    float _597 = (cbMtdParam._m0[0u].z * _383) * cbInstanceData._m0[_589].z;
    float _3879 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    vec4 _601 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _606 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _617 = (((_606.x - _553) + (_606.w * _553)) * cbMtdParam._m0[3u].x) + _553;
    float _630 = (cbMtdParam._m0[3u].x * (((_598 * _484) - _598) + _601.x)) + _598;
    float _631 = (cbMtdParam._m0[3u].x * (((_599 * _484) - _599) + _601.y)) + _599;
    float _632 = (cbMtdParam._m0[3u].x * (((_600 * _484) - _600) + _601.z)) + _600;
    vec4 _633 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _646 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_553 * (_381 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_553 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_553 * (_383 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _633.z;
    float _650 = _646 * cbMatDynParam._m0[13u].w;
    float _660 = (_650 * (cbMatDynParam._m0[13u].x - _630)) + _630;
    float _661 = (_650 * (cbMatDynParam._m0[13u].y - _631)) + _631;
    float _662 = (_650 * (cbMatDynParam._m0[13u].z - _632)) + _632;
    float _670 = ((_646 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _617)) + _617;
    float _671 = 1.0 - _670;
    float _672 = _671 * _660;
    float _673 = _671 * _661;
    float _674 = _671 * _662;
    float _678 = (_660 + (-0.039999999105930328369140625)) * _670;
    float _679 = (_661 + (-0.039999999105930328369140625)) * _670;
    float _680 = (_662 + (-0.039999999105930328369140625)) * _670;
    float _681 = _678 + 0.039999999105930328369140625;
    float _682 = _679 + 0.039999999105930328369140625;
    float _683 = _680 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _479, cbSceneParam._m0[86u].y * _480));
    float _695 = _692.x * TEXCOORD_4;
    float _696 = dot(vec3(_376, _377, _378), vec3(_458, _459, _460));
    float _699 = _696 * 2.0;
    float _703 = (_699 * _376) - _458;
    float _704 = (_699 * _377) - _459;
    float _705 = (_699 * _378) - _460;
    float _709 = abs(dot(vec3(_458, _459, _460), vec3(_376, _377, _378)));
    float _3912 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _711 = sqrt(_562);
    float _724 = exp2((_711 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_711 * 3.0));
    float _730 = (1.0 - _724) * ((_711 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _731 = _724 * _711;
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1098;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _823 = fma(_767, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759));
        float _827 = fma(_767, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759));
        float _831 = fma(_767, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759));
        float _856 = _759 + _376;
        float _857 = _763 + _377;
        float _858 = _767 + _378;
        float _868 = fma(_858, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856)) - _823;
        float _869 = fma(_858, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856)) - _827;
        float _870 = fma(_858, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856)) - _831;
        float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
        float _887 = ((_874 * _868) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_823 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_874 * _869) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_827 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_874 * _870) / cbModelParam._m0[34u].z) + ((((((_831 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        float _926 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_892.x + (-0.5));
        float _928 = _926 * (_892.y + (-0.5));
        float _929 = _926 * (_892.z + (-0.5));
        float _936 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_899.x + (-0.5));
        float _938 = _936 * (_899.y + (-0.5));
        float _939 = _936 * (_899.z + (-0.5));
        float _946 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_906.x + (-0.5));
        float _948 = _946 * (_906.y + (-0.5));
        float _949 = _946 * (_906.z + (-0.5));
        float _956 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_913.x + (-0.5));
        float _958 = _956 * (_913.y + (-0.5));
        float _959 = _956 * (_913.z + (-0.5));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = _927 * 0.5;
        float _964 = _937 * 0.5;
        float _965 = _947 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _980 = (dot(vec3(_376, _377, _378), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _990 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3960 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_992 + 1.0))) + _997) * _960;
        float _1007 = _928 * 0.5;
        float _1008 = _938 * 0.5;
        float _1009 = _948 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_376, _377, _378), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3993 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1034 + 1.0))) + _1039) * _961;
        float _1049 = _929 * 0.5;
        float _1050 = _939 * 0.5;
        float _1051 = _949 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_376, _377, _378), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _4026 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1076 + 1.0))) + _1081) * _962;
        _1098 = _929;
        _1100 = _928;
        _1101 = _927;
        _1102 = _939;
        _1103 = _938;
        _1104 = _937;
        _1105 = _949;
        _1106 = _948;
        _1107 = _947;
        _1108 = _962;
        _1109 = _961;
        _1110 = _960;
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
    }
    else
    {
        _1098 = _1099;
        _1100 = _1099;
        _1101 = _1099;
        _1102 = _1099;
        _1103 = _1099;
        _1104 = _1099;
        _1105 = _1099;
        _1106 = _1099;
        _1107 = _1099;
        _1108 = _1099;
        _1109 = _1099;
        _1110 = _1099;
        _1111 = 0.0;
        _1112 = 0.0;
        _1113 = 0.0;
    }
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1142 = fma(_767, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _759));
        float _1146 = fma(_767, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _759));
        float _1150 = fma(_767, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _759));
        float _1173 = _759 + _376;
        float _1174 = _763 + _377;
        float _1175 = _767 + _378;
        float _1185 = fma(_1175, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173)) - _1142;
        float _1186 = fma(_1175, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173)) - _1146;
        float _1187 = fma(_1175, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173)) - _1150;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1142 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1146 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[35u].z) + ((((((_1150 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1241 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1208.x + (-0.5));
        float _1243 = _1241 * (_1208.y + (-0.5));
        float _1244 = _1241 * (_1208.z + (-0.5));
        float _1251 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1215.x + (-0.5));
        float _1253 = _1251 * (_1215.y + (-0.5));
        float _1254 = _1251 * (_1215.z + (-0.5));
        float _1261 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1222.x + (-0.5));
        float _1263 = _1261 * (_1222.y + (-0.5));
        float _1264 = _1261 * (_1222.z + (-0.5));
        float _1271 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1229.x + (-0.5));
        float _1273 = _1271 * (_1229.y + (-0.5));
        float _1274 = _1271 * (_1229.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_376, _377, _378), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4089 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1305 + 1.0))) + _1310) * _1275;
        float _1320 = _1243 * 0.5;
        float _1321 = _1253 * 0.5;
        float _1322 = _1263 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_376, _377, _378), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4122 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1347 + 1.0))) + _1352) * _1276;
        float _1362 = _1244 * 0.5;
        float _1363 = _1254 * 0.5;
        float _1364 = _1264 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_376, _377, _378), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4155 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1389 + 1.0))) + _1394) * _1277;
        _1411 = _1244;
        _1412 = _1243;
        _1413 = _1242;
        _1414 = _1254;
        _1415 = _1253;
        _1416 = _1252;
        _1417 = _1264;
        _1418 = _1263;
        _1419 = _1262;
        _1420 = _1277;
        _1421 = _1276;
        _1422 = _1275;
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1099;
        _1412 = _1099;
        _1413 = _1099;
        _1414 = _1099;
        _1415 = _1099;
        _1416 = _1099;
        _1417 = _1099;
        _1418 = _1099;
        _1419 = _1099;
        _1420 = _1099;
        _1421 = _1099;
        _1422 = _1099;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1113)) + _1113;
    float _1458 = fma(_1437, cbSceneParam._m0[89u].z, fma(_1436, cbSceneParam._m0[89u].y, _1435 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1437, cbSceneParam._m0[90u].z, fma(_1436, cbSceneParam._m0[90u].y, _1435 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1437, cbSceneParam._m0[91u].z, fma(_1436, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1435));
    float _1479 = _703 * 0.5;
    float _1480 = _704 * 0.5;
    float _1481 = _705 * 0.5;
    float _1482 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1485 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1488 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1519;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1495 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1098, _1102, _1105, _1108));
        float _1499 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1503 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1510 = dot(vec4(cbModelParam._m0[39u]), vec4(_1479, _1480, _1481, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1530;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1521 = dot(vec4(cbModelParam._m0[40u]), vec4(_1479, _1480, _1481, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1534 = (_1530 * cbModelParam._m0[1u].x) + (_1519 * (1.0 - cbModelParam._m0[1u].x));
    float _1544 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1545 = isnan(_1544) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1544 : min(cbModelParam._m0[25u].z, _1544));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_767, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_767, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_767, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_705, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703));
        float _1606 = fma(_705, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703));
        float _1609 = fma(_705, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1637 = frontier_phi_19_17_ladder;
        }
        float _1813;
        if (_1606 > 0.0)
        {
            _1813 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1813 = frontier_phi_28_24_ladder;
        }
        float _2108;
        if (_1609 > 0.0)
        {
            _2108 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2108 = frontier_phi_40_35_ladder;
        }
        float _2110 = isnan(_1813) ? _1637 : (isnan(_1637) ? _1813 : min(_1637, _1813));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1603) + _1592;
        float _2116 = (_2111 * _1606) + _1596;
        float _2117 = (_2111 * _1609) + _1600;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2118;
        float _2122 = _2118 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 > _2122) || ((_2116 < _2120) || ((_2115 < _2120) || (_2115 > _2122))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2117, cbModelParam._m0[9u].z, fma(_2116, cbModelParam._m0[9u].y, _2115 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2117, cbModelParam._m0[10u].z, fma(_2116, cbModelParam._m0[10u].y, _2115 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2117, cbModelParam._m0[11u].z, fma(_2116, cbModelParam._m0[11u].y, _2115 * cbModelParam._m0[11u].x))), _1545);
            frontier_phi_18_40_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_18_40_ladder_2;
        _1627 = frontier_phi_18_40_ladder_1;
        _1629 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_703, _704, _705), _1545);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1691 = fma(_767, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759)) + cbModelParam._m0[21u].w;
        float _1695 = fma(_767, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759)) + cbModelParam._m0[22u].w;
        float _1699 = fma(_767, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759)) + cbModelParam._m0[23u].w;
        float _1702 = fma(_705, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703));
        float _1705 = fma(_705, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703));
        float _1708 = fma(_705, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703));
        float _1818;
        if (_1702 > 0.0)
        {
            _1818 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1818 = frontier_phi_30_26_ladder;
        }
        float _2135;
        if (_1705 > 0.0)
        {
            _2135 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2135 = frontier_phi_42_37_ladder;
        }
        float _2473;
        if (_1708 > 0.0)
        {
            _2473 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2473 = frontier_phi_52_49_ladder;
        }
        float _2475 = isnan(_2135) ? _1818 : (isnan(_1818) ? _2135 : min(_1818, _2135));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1702) + _1691;
        float _2481 = (_2476 * _1705) + _1695;
        float _2482 = (_2476 * _1708) + _1699;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_27_52_ladder = _2604.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2604.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2604.x * cbModelParam._m0[1u].z;
        }
        _1727 = frontier_phi_27_52_ladder_2;
        _1729 = frontier_phi_27_52_ladder_1;
        _1731 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_703, _704, _705), _1634);
        _1727 = _1711.x * cbModelParam._m0[1u].z;
        _1729 = _1711.y * cbModelParam._m0[1u].z;
        _1731 = _1711.z * cbModelParam._m0[1u].z;
    }
    float _1744 = (((_730 * _681) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1727 - _1625)) + _1625);
    float _1746 = (((_730 * _682) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1729 - _1627)) + _1627);
    float _1748 = (((_730 * _683) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1731 - _1629)) + _1629);
    float _1751 = fma(_1748, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1748, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1748, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1744 * cbSceneParam._m0[91u].x));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1805 = _1792 / _1804;
    float _1806 = _1796 / _1804;
    float _1807 = _1800 / _1804;
    float _1954;
    float _1955;
    float _1956;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1834 = ((uint(_1807 > cbSceneParam._m0[59u].y) + uint(_1807 > cbSceneParam._m0[59u].x)) + uint(_1807 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1835 = _1834 + 43u;
        uint _1843 = _1834 + 44u;
        uint _1851 = _1834 + 45u;
        uint _1859 = _1834 + 46u;
        float _1870 = fma(_1804, cbSceneParam._m0[_1835].w, fma(_1800, cbSceneParam._m0[_1835].z, fma(_1796, cbSceneParam._m0[_1835].y, _1792 * cbSceneParam._m0[_1835].x)));
        float _1874 = fma(_1804, cbSceneParam._m0[_1843].w, fma(_1800, cbSceneParam._m0[_1843].z, fma(_1796, cbSceneParam._m0[_1843].y, _1792 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1804, cbSceneParam._m0[_1859].w, fma(_1800, cbSceneParam._m0[_1859].z, fma(_1796, cbSceneParam._m0[_1859].y, _1792 * cbSceneParam._m0[_1859].x)));
        float _1887 = cbSceneParam._m0[33u].z * _1882;
        float _1889 = cbSceneParam._m0[33u].w * _1882;
        float _1892 = fma(_1804, cbSceneParam._m0[_1851].w, fma(_1800, cbSceneParam._m0[_1851].z, fma(_1796, cbSceneParam._m0[_1851].y, _1792 * cbSceneParam._m0[_1851].x))) / _1882;
        float _1940 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
        float _4281 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1947 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 + _1870) / _1882, (_1889 + _1874) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1889 + _1870) / _1882, (_1874 - _1887) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1887) / _1882, (_1874 - _1889) / _1882), _1892), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1870 - _1889) / _1882, (_1887 + _1874) / _1882), _1892), 0.0)).x), vec4(0.25)));
        _1954 = 1.0 - (_1947 * cbSceneParam._m0[34u].x);
        _1955 = 1.0 - (_1947 * cbSceneParam._m0[34u].y);
        _1956 = 1.0 - (_1947 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1954 = 1.0;
        _1955 = 1.0;
        _1956 = 1.0;
    }
    float _2020;
    float _2022;
    float _2024;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2008 = fma(_1804, cbSceneParam._m0[63u].w, fma(_1800, cbSceneParam._m0[63u].z, fma(_1796, cbSceneParam._m0[63u].y, _1792 * cbSceneParam._m0[63u].x)));
        float _2009 = fma(_1804, cbSceneParam._m0[60u].w, fma(_1800, cbSceneParam._m0[60u].z, fma(_1796, cbSceneParam._m0[60u].y, _1792 * cbSceneParam._m0[60u].x))) / _2008;
        float _2010 = fma(_1804, cbSceneParam._m0[61u].w, fma(_1800, cbSceneParam._m0[61u].z, fma(_1796, cbSceneParam._m0[61u].y, _1792 * cbSceneParam._m0[61u].x))) / _2008;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2009 >= cbSceneParam._m0[64u].x) && (_2010 >= cbSceneParam._m0[64u].y)) && (_2009 <= cbSceneParam._m0[64u].z)) && (_2010 <= cbSceneParam._m0[64u].w))
        {
            float _2148 = fma(_1804, cbSceneParam._m0[62u].w, fma(_1800, cbSceneParam._m0[62u].z, fma(_1796, cbSceneParam._m0[62u].y, _1792 * cbSceneParam._m0[62u].x))) / _2008;
            float _2152 = isnan(cbSceneParam._m0[41u].w) ? _2148 : (isnan(_2148) ? cbSceneParam._m0[41u].w : max(_2148, cbSceneParam._m0[41u].w));
            float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_1806 * _1806) + (_1805 * _1805)) + (_1807 * _1807))) * cbSceneParam._m0[33u].y;
            float _4297 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
            float _2202 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2009, cbSceneParam._m0[33u].w + _2010), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2009, _2010 - cbSceneParam._m0[33u].z), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].z, _2010 - cbSceneParam._m0[33u].w), _2152), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2009 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2010), _2152), 0.0)).x), vec4(0.25)));
            float _2206 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
            float _2207 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
            float _2208 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2207) ? _1955 : (isnan(_1955) ? _2207 : min(_1955, _2207));
            frontier_phi_39_38_ladder_1 = isnan(_2206) ? _1954 : (isnan(_1954) ? _2206 : min(_1954, _2206));
            frontier_phi_39_38_ladder_2 = isnan(_2208) ? _1956 : (isnan(_1956) ? _2208 : min(_1956, _2208));
        }
        else
        {
            frontier_phi_39_38_ladder = _1955;
            frontier_phi_39_38_ladder_1 = _1954;
            frontier_phi_39_38_ladder_2 = _1956;
        }
        _2020 = frontier_phi_39_38_ladder_1;
        _2022 = frontier_phi_39_38_ladder;
        _2024 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2020 = _1954;
        _2022 = _1955;
        _2024 = _1956;
    }
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_586 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _695 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2067 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2071 = _2031 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_376, _377, _378));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_376, _377, _378));
    float _4333 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4344 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2048].x * _2054) * _2092) + (((cbLight._m0[_2058].x * _2020) * _2067) * _2090);
    float _2100 = ((_2054 * cbLight._m0[_2048].y) * _2092) + (((cbLight._m0[_2058].y * _2022) * _2067) * _2090);
    float _2101 = ((_2054 * cbLight._m0[_2048].z) * _2092) + (((cbLight._m0[_2058].z * _2024) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2209;
    float _2211;
    float _2213;
    if (_2107)
    {
        _2209 = _2099;
        _2211 = _2100;
        _2213 = _2101;
    }
    else
    {
        uint _2217 = _2031 + 6u;
        float _2233 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2234 = _2233 * _2233;
        float _4355 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2235 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2236 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2209 = (((cbLight._m0[_2217].x * 0.3183098733425140380859375) * _2235) * _2236) + _2099;
        _2211 = (((cbLight._m0[_2217].y * 0.3183098733425140380859375) * _2235) * _2236) + _2100;
        _2213 = (((cbLight._m0[_2217].z * 0.3183098733425140380859375) * _2235) * _2236) + _2101;
    }
    bool _2216 = _2105.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2216)
    {
        _2271 = _2209;
        _2273 = _2211;
        _2275 = _2213;
    }
    else
    {
        uint _2444 = _2031 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_376, _377, _378)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4371 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2463 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2209;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2211;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2213;
    }
    uint _2278 = _2031 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _562) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2031].x + _458;
    float _2294 = cbLight._m0[_2031].y + _459;
    float _2295 = cbLight._m0[_2031].z + _460;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2031].xyz));
    float _4387 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _2307 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2308 = dot(vec3(_376, _377, _378), vec3(_2300, _2301, _2302));
    float _4409 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2300, _2301, _2302));
    float _4420 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _678;
    float _2331 = 0.959999978542327880859375 - _679;
    float _2332 = 0.959999978542327880859375 - _680;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4431 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2031 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _562) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2071].x + _458;
    float _2380 = cbLight._m0[_2071].y + _459;
    float _2381 = cbLight._m0[_2071].z + _460;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2071].xyz));
    float _4442 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2393 = dot(vec3(_376, _377, _378), vec3(_2386, _2387, _2388));
    float _4453 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2386, _2387, _2388));
    float _4464 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4475 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _681) * cbLight._m0[_2366].x) * _2431) * _2054) + ((((cbLight._m0[_2278].x * _2020) * ((_2328 * _2329) + _681)) * _2352) * _2067);
    float _2442 = (((((_2412 * _2331) + _682) * cbLight._m0[_2366].y) * _2431) * _2054) + ((((cbLight._m0[_2278].y * _2022) * ((_2328 * _2331) + _682)) * _2352) * _2067);
    float _2443 = (((((_2412 * _2332) + _683) * cbLight._m0[_2366].z) * _2431) * _2054) + ((((cbLight._m0[_2278].z * _2024) * ((_2328 * _2332) + _683)) * _2352) * _2067);
    float _2499;
    float _2501;
    float _2503;
    if (_2107)
    {
        _2499 = _2441;
        _2501 = _2442;
        _2503 = _2443;
    }
    else
    {
        uint _2505 = _2031 + 2u;
        uint _2509 = _2031 + 10u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _562) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _458;
        float _2526 = cbLight._m0[_2505].y + _459;
        float _2527 = cbLight._m0[_2505].z + _460;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2505].xyz));
        float _4486 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2539 = dot(vec3(_376, _377, _378), vec3(_2532, _2533, _2534));
        float _4497 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4508 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0);
        float _2565 = 1.0 - _2524;
        float _2575 = (0.5 / (((_2307 * ((_2538 * _2565) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2565) + _2524) * _2538))) * _2538;
        float _4519 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2577 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2578 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2499 = (((((_2558 * _2329) + _681) * cbLight._m0[_2509].x) * _2577) * _2578) + _2441;
        _2501 = (((((_2558 * _2331) + _682) * cbLight._m0[_2509].y) * _2577) * _2578) + _2442;
        _2503 = (((((_2558 * _2332) + _683) * cbLight._m0[_2509].z) * _2577) * _2578) + _2443;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2216)
    {
        _2609 = _2499;
        _2611 = _2501;
        _2613 = _2503;
    }
    else
    {
        uint _2620 = _2031 + 3u;
        uint _2624 = _2031 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _562) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _458;
        float _2641 = cbLight._m0[_2620].y + _459;
        float _2642 = cbLight._m0[_2620].z + _460;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_376, _377, _378), vec3(cbLight._m0[_2620].xyz));
        float _4535 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2654 = dot(vec3(_376, _377, _378), vec3(_2647, _2648, _2649));
        float _4546 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4557 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2307 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2680) + _2639) * _2653))) * _2653;
        float _4568 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2609 = (((((_2673 * _2329) + _681) * cbLight._m0[_2624].x) * _2692) * _2693) + _2499;
        _2611 = (((((_2673 * _2331) + _682) * cbLight._m0[_2624].y) * _2692) * _2693) + _2501;
        _2613 = (((((_2673 * _2332) + _683) * cbLight._m0[_2624].z) * _2692) * _2693) + _2503;
    }
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_2029.y == 0u)
    {
        uvec4 _2714 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2715 = _2714.x;
        uint _2726 = uint((float(_2714.y) * floor(float(uint(cbSceneParam._m0[85u].y * _480) / _2715))) + floor(float(uint(cbSceneParam._m0[85u].x * _479) / _2715)));
        float _2736 = (log2(_1807 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2737 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        uint _2740 = uint(isnan(14.0) ? _2737 : (isnan(_2737) ? 14.0 : min(_2737, 14.0)));
        uvec4 _2745 = texelFetch(g_lightClusterGridBuffer, int(((_2740 << 2u) + (_2726 << 6u)) >> 2u));
        uint _2746 = _2745.x;
        uint _2747 = _2714.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2747 >> 4u) & 15u)) + 4294967295u) & _2746) == 0u) || ((_2747 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2995)
                {
                    frontier_phi_73_pred = _2984;
                    frontier_phi_73_pred_1 = _2983;
                    frontier_phi_73_pred_2 = _2982;
                    frontier_phi_73_pred_3 = _2981;
                    frontier_phi_73_pred_4 = _2980;
                    frontier_phi_73_pred_5 = _2979;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _1805;
                        float _3191 = _3150.y - _1806;
                        float _3192 = _3150.z - _1807;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_504, _507, _510), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4594 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _1805;
                        float _3226 = (-0.0) - _1806;
                        float _3227 = (-0.0) - _1807;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3241 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3242 = 1.0 - _711;
                        float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                        float _3250 = _3249 * _3249;
                        float _3251 = _3250 * _3250;
                        float _3252 = _3232 + _3197;
                        float _3253 = _3233 + _3198;
                        float _3254 = _3234 + _3199;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3262 = dot(vec3(_504, _507, _510), vec3(_3232, _3233, _3234));
                        float _4610 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3266 = dot(vec3(_504, _507, _510), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                        float _4621 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                        float _3274 = _3210 * _3250;
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3200) + _3275;
                        float _4632 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3280 = 1.0 - _3250;
                        float _3290 = (0.5 / (((_3279 * ((_3265 * _3280) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3250) * _3265))) * _3279;
                        float _4643 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3301 = (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3273 * _3273) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3301 * _3186.x) + _3124;
                        _3052 = (_3301 * _3186.y) + _3125;
                        _3053 = (_3301 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_73_pred = _3056;
                    frontier_phi_73_pred_1 = _3055;
                    frontier_phi_73_pred_2 = _3054;
                    frontier_phi_73_pred_3 = _3053;
                    frontier_phi_73_pred_4 = _3052;
                    frontier_phi_73_pred_5 = _3051;
                }
                _2838 = frontier_phi_73_pred;
                _2836 = frontier_phi_73_pred_1;
                _2834 = frontier_phi_73_pred_2;
                _2832 = frontier_phi_73_pred_3;
                _2830 = frontier_phi_73_pred_4;
                _2828 = frontier_phi_73_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2828;
                    _2980 = _2830;
                    _2981 = _2832;
                    _2982 = _2834;
                    _2983 = _2836;
                    _2984 = _2838;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2844) & _2746) == 0u)
        {
            _2947 = _2827;
            _2949 = _2829;
            _2951 = _2831;
            _2953 = _2833;
            _2955 = _2835;
            _2957 = _2837;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
            float _2973 = _2972 * _1805;
            float _2974 = _2972 * _1806;
            float _2975 = _2972 * _1807;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2827;
                float _3108 = _2829;
                float _3109 = _2831;
                float _3110 = _2833;
                float _3111 = _2835;
                float _3112 = _2837;
                uint _3113 = _2844;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2740 << 5u) + (_2726 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3123)
                    {
                        frontier_phi_84_pred = _3111;
                        frontier_phi_84_pred_1 = _3110;
                        frontier_phi_84_pred_2 = _3109;
                        frontier_phi_84_pred_3 = _3108;
                        frontier_phi_84_pred_4 = _3107;
                        frontier_phi_84_pred_5 = _3112;
                    }
                    else
                    {
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3328 = _3107;
                        float _3329 = _3108;
                        float _3330 = _3109;
                        float _3331 = _3110;
                        float _3332 = _3111;
                        float _3333 = _3112;
                        uint _3334 = _3122;
                        uint _3335;
                        vec4 _3360;
                        float _3361;
                        vec4 _3376;
                        vec3 _3388;
                        vec4 _3403;
                        vec4 _3419;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3345 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3334));
                            _3335 = (_3334 + 4294967295u) & _3334;
                            uint _3347 = _3345 * 40u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3361 = _3360.w;
                            uint _3363 = (_3345 * 40u) + 4u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3345 * 40u) + 8u;
                            _3388 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x));
                            uint _3390 = (_3345 * 40u) + 16u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3406 = (_3345 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3422 = (_3345 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3345 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_1807, _3454.z, fma(_1806, _3454.y, _3454.x * _1805)) + _3454.w;
                            _3467 = !((fma(_1807, _3435.z, fma(_1806, _3435.y, _3435.x * _1805)) + _3435.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3360.x - _1805;
                                float _3495 = _3360.y - _1806;
                                float _3496 = _3360.z - _1807;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3361 * _3361));
                                float _4654 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3512 = sqrt(_3497) * _3376.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_504, _507, _510))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_1807, _3403.z, fma(_1806, _3403.y, _3403.x * _1805)) + _3403.w) / _3466;
                                float _3526 = (fma(_1807, _3419.z, fma(_1806, _3419.y, _3419.x * _1805)) + _3419.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4670 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _711;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _2973;
                                float _3556 = _3502 - _2974;
                                float _3557 = _3503 - _2975;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_504, _507, _510), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4681 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3569 = dot(vec3(_504, _507, _510), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4692 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_504, _507, _510), vec3(_3501, _3502, _3503))) + _3578;
                                float _4703 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4714 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3532 * _3376.y;
                                frontier_phi_90_pred_1 = _3532 * _3376.x;
                                frontier_phi_90_pred_2 = _3606 * _3388.z;
                                frontier_phi_90_pred_3 = _3606 * _3388.y;
                                frontier_phi_90_pred_4 = _3606 * _3388.x;
                                frontier_phi_90_pred_5 = _3532 * _3376.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_90_pred;
                            _3613 = frontier_phi_90_pred_1;
                            _3612 = frontier_phi_90_pred_2;
                            _3611 = frontier_phi_90_pred_3;
                            _3610 = frontier_phi_90_pred_4;
                            _3615 = frontier_phi_90_pred_5;
                            _3318 = _3613 + _3331;
                            _3319 = _3614 + _3332;
                            _3320 = _3615 + _3333;
                            _3315 = _3610 + _3328;
                            _3316 = _3611 + _3329;
                            _3317 = _3612 + _3330;
                            if (_3335 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3335;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3319;
                        frontier_phi_84_pred_1 = _3318;
                        frontier_phi_84_pred_2 = _3317;
                        frontier_phi_84_pred_3 = _3316;
                        frontier_phi_84_pred_4 = _3315;
                        frontier_phi_84_pred_5 = _3320;
                    }
                    _2956 = frontier_phi_84_pred;
                    _2954 = frontier_phi_84_pred_1;
                    _2952 = frontier_phi_84_pred_2;
                    _2950 = frontier_phi_84_pred_3;
                    _2948 = frontier_phi_84_pred_4;
                    _2958 = frontier_phi_84_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2958;
                frontier_phi_65_66_ladder_1 = _2954;
                frontier_phi_65_66_ladder_2 = _2956;
                frontier_phi_65_66_ladder_3 = _2950;
                frontier_phi_65_66_ladder_4 = _2948;
                frontier_phi_65_66_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_65_66_ladder = _2837;
                frontier_phi_65_66_ladder_1 = _2833;
                frontier_phi_65_66_ladder_2 = _2835;
                frontier_phi_65_66_ladder_3 = _2829;
                frontier_phi_65_66_ladder_4 = _2827;
                frontier_phi_65_66_ladder_5 = _2831;
            }
            _2947 = frontier_phi_65_66_ladder_4;
            _2949 = frontier_phi_65_66_ladder_3;
            _2951 = frontier_phi_65_66_ladder_5;
            _2953 = frontier_phi_65_66_ladder_1;
            _2955 = frontier_phi_65_66_ladder_2;
            _2957 = frontier_phi_65_66_ladder;
        }
        float _2962 = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
        _2758 = (_2962 * _2953) + _2271;
        _2760 = (_2962 * _2955) + _2273;
        _2762 = (_2962 * _2957) + _2275;
        _2764 = ((_2947 * _681) * _2962) + _2609;
        _2766 = ((_2949 * _682) * _2962) + _2611;
        _2768 = ((_2951 * _683) * _2962) + _2613;
    }
    else
    {
        _2758 = _2271;
        _2760 = _2273;
        _2762 = _2275;
        _2764 = _2609;
        _2766 = _2611;
        _2768 = _2613;
    }
    float _4730 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4741 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4752 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4763 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _2786 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2758 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _695))) + ((_2764 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1534)) * cbPerFrame._m0[3u].x);
    float _2787 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2760 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _695))) + ((_2766 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1534)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2762 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _695))) + ((_2768 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1534)) * cbPerFrame._m0[3u].x);
    float _2793 = cbInstanceData._m0[_586 + 6u].w * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)));
    float _2798 = _479 / cbSceneParam._m0[86u].x;
    float _2799 = _480 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _400 : (isnan(_400) ? cbSceneParam._m0[77u].w : min(_400, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_400 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_400) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _400 : min(cbSceneParam._m0[80u].w, _400));
        float _2853 = _2852 / _400;
        float _2864 = _2853 * _451;
        float _2865 = _452 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2867 = _2853 * _453;
        float _2869 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2865;
        float _2877 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2866 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3010 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2877 / _2866) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2887 * _3019) - exp2(_2887 * _3020)) * _3008))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2818);
        _2889 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2891 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2893 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2895 = _3075 * _2818;
    }
    else
    {
        _2889 = _2815;
        _2891 = _2816;
        _2893 = _2817;
        _2895 = _2818;
    }
    bool _3102;
    vec4 _2905;
    vec4 _2927;
    float _2929;
    float _2933;
    float _2934;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2905 = cbMatDynParam._m0[0u];
        float _2907 = roundEven(_2905.y);
        bool _2908 = _2907 == 3.0;
        float _2909 = log2(_2895);
        float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * _2786;
        float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * _2787;
        float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * _2788;
        float _2925 = _467 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        float _2932 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2933 = _2932 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = _2932 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
        _2935 = _2932 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
        _2936 = _2925 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_586 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _588 + uint(_2905.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2929 + _252) < _2927.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3306;
    if (_3102)
    {
        discard_state = true;
        _3306 = 0.0;
    }
    else
    {
        _3306 = _2793;
    }
    SV_Target.x = _2933;
    SV_Target.y = _2934;
    SV_Target.z = _2935;
    SV_Target.w = _3306;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2793;
    discard_exit();
}


