#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _746;
float _3195;
float _3196;
float _3197;
float _3198;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(M_A_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    float _199 = _193.w;
    float _203 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _204 = _203 * _177;
    float _205 = _203 * _178;
    float _206 = _203 * _179;
    float _3207 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3218 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3229 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _226 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    float _285 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _286 = _279 * _285;
    float _287 = _280 * _285;
    float _288 = _281 * _285;
    vec4 _293 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _295 = _293.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _425 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _431 = (cbMatDynParam._m0[5u].x * _425) + cbMatDynParam._m0[5u].y;
        float _3240 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
        float _432 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _436 = (cbMatDynParam._m0[5u].z * _425) + cbMatDynParam._m0[5u].w;
        float _3251 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) - _432)) + _432) < ((_295 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _307 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _308 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _328 = fma(_206, cbSceneParam._m0[5u].z, fma(_205, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _204));
    float _331 = fma(_206, cbSceneParam._m0[6u].z, fma(_205, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _204));
    float _334 = fma(_206, cbSceneParam._m0[7u].z, fma(_205, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _204));
    uint _347 = uint(roundEven(NORMAL.w)) * 13u;
    uint _349 = _347 + 9u;
    uint _350 = _349 + uint(cbMatDynParam._m0[0u].w);
    float _356 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0)))) * cbInstanceData._m0[_350].x;
    float _357 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * cbInstanceData._m0[_350].y;
    float _358 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_350].z;
    float _3262 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _359 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _360 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _361 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    vec4 _370 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _307, cbSceneParam._m0[86u].y * _308));
    float _373 = _370.x * TEXCOORD.z;
    float _374 = dot(vec3(_204, _205, _206), vec3(_286, _287, _288));
    float _377 = _374 * 2.0;
    float _382 = (_377 * _204) - _286;
    float _383 = (_377 * _205) - _287;
    float _384 = (_377 * _206) - _288;
    float _406 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _410 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _745;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _470 = fma(_414, cbModelParam._m0[26u].z, fma(_410, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _406));
        float _474 = fma(_414, cbModelParam._m0[27u].z, fma(_410, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _406));
        float _478 = fma(_414, cbModelParam._m0[28u].z, fma(_410, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _406));
        float _503 = _406 + _204;
        float _504 = _410 + _205;
        float _505 = _414 + _206;
        float _515 = fma(_505, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _503)) - _470;
        float _516 = fma(_505, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _503)) - _474;
        float _517 = fma(_505, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _503)) - _478;
        float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
        float _534 = ((_521 * _515) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_470 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _535 = ((_521 * _516) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_474 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _536 = ((_521 * _517) / cbModelParam._m0[34u].z) + ((((((_478 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _539 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _546 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _553 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_534, _535, _536), 0.0);
        float _573 = exp2((_539.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_539.x + (-0.5));
        float _575 = _573 * (_539.y + (-0.5));
        float _576 = _573 * (_539.z + (-0.5));
        float _583 = exp2((_546.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_546.x + (-0.5));
        float _585 = _583 * (_546.y + (-0.5));
        float _586 = _583 * (_546.z + (-0.5));
        float _593 = exp2((_553.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_553.x + (-0.5));
        float _595 = _593 * (_553.y + (-0.5));
        float _596 = _593 * (_553.z + (-0.5));
        float _603 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_560.x + (-0.5));
        float _605 = _603 * (_560.y + (-0.5));
        float _606 = _603 * (_560.z + (-0.5));
        float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
        float _608 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _609 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
        float _610 = _574 * 0.5;
        float _611 = _584 * 0.5;
        float _612 = _594 * 0.5;
        float _613 = dot(vec3(_610, _611, _612), vec3(_610, _611, _612));
        float _618 = (_613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_613);
        float _627 = (dot(vec3(_204, _205, _206), vec3(_618 * _610, _618 * _611, _618 * _612)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _637 = sqrt(((_611 * _611) + (_610 * _610)) + (_612 * _612)) / (_607 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _638 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _639 = _638 * 2.0;
        float _643 = (1.0 - _638) / (_638 + 1.0);
        float _3332 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
        float _644 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _653 = ((((1.0 - _644) * (_639 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_639 + 1.0))) + _644) * _607;
        float _654 = _575 * 0.5;
        float _655 = _585 * 0.5;
        float _656 = _595 * 0.5;
        float _657 = dot(vec3(_654, _655, _656), vec3(_654, _655, _656));
        float _662 = (_657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_657);
        float _670 = (dot(vec3(_204, _205, _206), vec3(_662 * _654, _662 * _655, _662 * _656)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _679 = sqrt(((_655 * _655) + (_654 * _654)) + (_656 * _656)) / (_608 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3365 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_681 + 1.0))) + _686) * _608;
        float _696 = _576 * 0.5;
        float _697 = _586 * 0.5;
        float _698 = _596 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(_204, _205, _206), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_609 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3398 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_723 + 1.0))) + _728) * _609;
        _745 = _576;
        _747 = _575;
        _748 = _574;
        _749 = _586;
        _750 = _585;
        _751 = _584;
        _752 = _596;
        _753 = _595;
        _754 = _594;
        _755 = _609;
        _756 = _608;
        _757 = _607;
        _758 = cbModelParam._m0[36u].z * (isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0)));
        _759 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
    }
    else
    {
        _745 = _746;
        _747 = _746;
        _748 = _746;
        _749 = _746;
        _750 = _746;
        _751 = _746;
        _752 = _746;
        _753 = _746;
        _754 = _746;
        _755 = _746;
        _756 = _746;
        _757 = _746;
        _758 = 0.0;
        _759 = 0.0;
        _760 = 0.0;
    }
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _789 = fma(_414, cbModelParam._m0[30u].z, fma(_410, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _406));
        float _793 = fma(_414, cbModelParam._m0[31u].z, fma(_410, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _406));
        float _797 = fma(_414, cbModelParam._m0[32u].z, fma(_410, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _406));
        float _820 = _406 + _204;
        float _821 = _410 + _205;
        float _822 = _414 + _206;
        float _832 = fma(_822, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820)) - _789;
        float _833 = fma(_822, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820)) - _793;
        float _834 = fma(_822, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820)) - _797;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_789 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_793 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[35u].z) + ((((((_797 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _888 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_855.x + (-0.5));
        float _890 = _888 * (_855.y + (-0.5));
        float _891 = _888 * (_855.z + (-0.5));
        float _898 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_862.x + (-0.5));
        float _900 = _898 * (_862.y + (-0.5));
        float _901 = _898 * (_862.z + (-0.5));
        float _908 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_869.x + (-0.5));
        float _910 = _908 * (_869.y + (-0.5));
        float _911 = _908 * (_869.z + (-0.5));
        float _918 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_876.x + (-0.5));
        float _920 = _918 * (_876.y + (-0.5));
        float _921 = _918 * (_876.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_204, _205, _206), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3461 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_952 + 1.0))) + _957) * _922;
        float _967 = _890 * 0.5;
        float _968 = _900 * 0.5;
        float _969 = _910 * 0.5;
        float _970 = dot(vec3(_967, _968, _969), vec3(_967, _968, _969));
        float _975 = (_970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_970);
        float _983 = (dot(vec3(_204, _205, _206), vec3(_975 * _967, _975 * _968, _975 * _969)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _992 = sqrt(((_968 * _968) + (_967 * _967)) + (_969 * _969)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3494 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_994 + 1.0))) + _999) * _923;
        float _1009 = _891 * 0.5;
        float _1010 = _901 * 0.5;
        float _1011 = _911 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_204, _205, _206), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3527 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1036 + 1.0))) + _1041) * _924;
        _1058 = _891;
        _1059 = _890;
        _1060 = _889;
        _1061 = _901;
        _1062 = _900;
        _1063 = _899;
        _1064 = _911;
        _1065 = _910;
        _1066 = _909;
        _1067 = _924;
        _1068 = _923;
        _1069 = _922;
        _1070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
        _1071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
    }
    else
    {
        _1058 = _746;
        _1059 = _746;
        _1060 = _746;
        _1061 = _746;
        _1062 = _746;
        _1063 = _746;
        _1064 = _746;
        _1065 = _746;
        _1066 = _746;
        _1067 = _746;
        _1068 = _746;
        _1069 = _746;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1082 = (cbModelParam._m0[1u].x * (_1070 - _758)) + _758;
    float _1083 = (cbModelParam._m0[1u].x * (_1071 - _759)) + _759;
    float _1084 = (cbModelParam._m0[1u].x * (_1072 - _760)) + _760;
    float _1105 = fma(_1084, cbSceneParam._m0[89u].z, fma(_1083, cbSceneParam._m0[89u].y, _1082 * cbSceneParam._m0[89u].x));
    float _1108 = fma(_1084, cbSceneParam._m0[90u].z, fma(_1083, cbSceneParam._m0[90u].y, _1082 * cbSceneParam._m0[90u].x));
    float _1111 = fma(_1084, cbSceneParam._m0[91u].z, fma(_1083, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1082));
    float _1126 = _382 * 0.5;
    float _1127 = _383 * 0.5;
    float _1128 = _384 * 0.5;
    float _1129 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1060, _1063, _1066, _1069));
    float _1132 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1059, _1062, _1065, _1068));
    float _1135 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_1058, _1061, _1064, _1067));
    float _1169;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1142 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_745, _749, _752, _755));
        float _1146 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_747, _750, _753, _756));
        float _1150 = dot(vec4(_1126, _1127, _1128, 1.0), vec4(_748, _751, _754, _757));
        float _1157 = dot(vec4(cbModelParam._m0[39u]), vec4(_1126, _1127, _1128, 1.0));
        _1169 = dot(vec3(isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)), isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)), isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1157) ? 0.0 : (isnan(0.0) ? _1157 : max(0.0, _1157))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1169 = 1.0;
    }
    float _1180;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1171 = dot(vec4(cbModelParam._m0[40u]), vec4(_1126, _1127, _1128, 1.0));
        _1180 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)), isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1171) ? 0.0 : (isnan(0.0) ? _1171 : max(0.0, _1171))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1180 = 1.0;
    }
    float _1184 = (_1180 * cbModelParam._m0[1u].x) + (_1169 * (1.0 - cbModelParam._m0[1u].x));
    float _1193 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1275;
    float _1277;
    float _1279;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1242 = fma(_414, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _406)) + cbModelParam._m0[13u].w;
        float _1246 = fma(_414, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _406)) + cbModelParam._m0[14u].w;
        float _1250 = fma(_414, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _406)) + cbModelParam._m0[15u].w;
        float _1253 = fma(_384, cbModelParam._m0[13u].z, fma(_383, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _382));
        float _1256 = fma(_384, cbModelParam._m0[14u].z, fma(_383, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _382));
        float _1259 = fma(_384, cbModelParam._m0[15u].z, fma(_383, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _382));
        float _1285;
        if (_1253 > 0.0)
        {
            _1285 = abs((1.0 - _1242) / _1253);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1253 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1242 + 1.0) / _1253);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1285 = frontier_phi_19_17_ladder;
        }
        float _1460;
        if (_1256 > 0.0)
        {
            _1460 = abs((1.0 - _1246) / _1256);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1256 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1246 + 1.0) / _1256);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1460 = frontier_phi_28_24_ladder;
        }
        float _1757;
        if (_1259 > 0.0)
        {
            _1757 = abs((1.0 - _1250) / _1259);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1250 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1757 = frontier_phi_40_35_ladder;
        }
        float _1759 = isnan(_1460) ? _1285 : (isnan(_1285) ? _1460 : min(_1285, _1460));
        float _1760 = isnan(_1757) ? _1759 : (isnan(_1759) ? _1757 : min(_1759, _1757));
        float _1764 = (_1760 * _1253) + _1242;
        float _1765 = (_1760 * _1256) + _1246;
        float _1766 = (_1760 * _1259) + _1250;
        float _1767 = _1760 * 9.9999997473787516355514526367188e-05;
        float _1769 = (-1.0) - _1767;
        float _1771 = _1767 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1766 > _1771) || ((_1766 < _1769) || ((_1765 > _1771) || ((_1765 < _1769) || ((_1764 < _1769) || (_1764 > _1771))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1766, cbModelParam._m0[9u].z, fma(_1765, cbModelParam._m0[9u].y, _1764 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1766, cbModelParam._m0[10u].z, fma(_1765, cbModelParam._m0[10u].y, _1764 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1766, cbModelParam._m0[11u].z, fma(_1765, cbModelParam._m0[11u].y, _1764 * cbModelParam._m0[11u].x))), _1193);
            frontier_phi_18_40_ladder = _1911.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1911.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1911.x * cbModelParam._m0[1u].y;
        }
        _1275 = frontier_phi_18_40_ladder_2;
        _1277 = frontier_phi_18_40_ladder_1;
        _1279 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_382, _383, _384), _1193);
        _1275 = _1263.x * cbModelParam._m0[1u].y;
        _1277 = _1263.y * cbModelParam._m0[1u].y;
        _1279 = _1263.z * cbModelParam._m0[1u].y;
    }
    float _1282 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1339 = fma(_414, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _406)) + cbModelParam._m0[21u].w;
        float _1343 = fma(_414, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _406)) + cbModelParam._m0[22u].w;
        float _1347 = fma(_414, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _406)) + cbModelParam._m0[23u].w;
        float _1350 = fma(_384, cbModelParam._m0[21u].z, fma(_383, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _382));
        float _1353 = fma(_384, cbModelParam._m0[22u].z, fma(_383, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _382));
        float _1356 = fma(_384, cbModelParam._m0[23u].z, fma(_383, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _382));
        float _1465;
        if (_1350 > 0.0)
        {
            _1465 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1465 = frontier_phi_30_26_ladder;
        }
        float _1784;
        if (_1353 > 0.0)
        {
            _1784 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1784 = frontier_phi_42_37_ladder;
        }
        float _2057;
        if (_1356 > 0.0)
        {
            _2057 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2057 = frontier_phi_52_49_ladder;
        }
        float _2059 = isnan(_1784) ? _1465 : (isnan(_1465) ? _1784 : min(_1465, _1784));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1350) + _1339;
        float _2065 = (_2060 * _1353) + _1343;
        float _2066 = (_2060 * _1356) + _1347;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2067;
        float _2070 = _2067 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2066 > _2070) || ((_2066 < _2068) || ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 < _2068) || (_2064 > _2070))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2066, cbModelParam._m0[17u].z, fma(_2065, cbModelParam._m0[17u].y, _2064 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2066, cbModelParam._m0[18u].z, fma(_2065, cbModelParam._m0[18u].y, _2064 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2066, cbModelParam._m0[19u].z, fma(_2065, cbModelParam._m0[19u].y, _2064 * cbModelParam._m0[19u].x))), _1282);
            frontier_phi_27_52_ladder = _2157.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2157.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2157.x * cbModelParam._m0[1u].z;
        }
        _1375 = frontier_phi_27_52_ladder_2;
        _1377 = frontier_phi_27_52_ladder_1;
        _1379 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_382, _383, _384), _1282);
        _1375 = _1359.x * cbModelParam._m0[1u].z;
        _1377 = _1359.y * cbModelParam._m0[1u].z;
        _1379 = _1359.z * cbModelParam._m0[1u].z;
    }
    float _1391 = _373 * 0.01200000010430812835693359375;
    float _1393 = _1391 * ((cbModelParam._m0[1u].w * (_1375 - _1275)) + _1275);
    float _1394 = _1391 * ((cbModelParam._m0[1u].w * (_1377 - _1277)) + _1277);
    float _1395 = _1391 * ((cbModelParam._m0[1u].w * (_1379 - _1279)) + _1279);
    float _1398 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, _1393 * cbSceneParam._m0[91u].x));
    float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1452 = _1439 / _1451;
    float _1453 = _1443 / _1451;
    float _1454 = _1447 / _1451;
    float _1601;
    float _1602;
    float _1603;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1481 = ((uint(_1454 > cbSceneParam._m0[59u].y) + uint(_1454 > cbSceneParam._m0[59u].x)) + uint(_1454 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1482 = _1481 + 43u;
        uint _1490 = _1481 + 44u;
        uint _1498 = _1481 + 45u;
        uint _1506 = _1481 + 46u;
        float _1517 = fma(_1451, cbSceneParam._m0[_1482].w, fma(_1447, cbSceneParam._m0[_1482].z, fma(_1443, cbSceneParam._m0[_1482].y, _1439 * cbSceneParam._m0[_1482].x)));
        float _1521 = fma(_1451, cbSceneParam._m0[_1490].w, fma(_1447, cbSceneParam._m0[_1490].z, fma(_1443, cbSceneParam._m0[_1490].y, _1439 * cbSceneParam._m0[_1490].x)));
        float _1529 = fma(_1451, cbSceneParam._m0[_1506].w, fma(_1447, cbSceneParam._m0[_1506].z, fma(_1443, cbSceneParam._m0[_1506].y, _1439 * cbSceneParam._m0[_1506].x)));
        float _1534 = cbSceneParam._m0[33u].z * _1529;
        float _1536 = cbSceneParam._m0[33u].w * _1529;
        float _1539 = fma(_1451, cbSceneParam._m0[_1498].w, fma(_1447, cbSceneParam._m0[_1498].z, fma(_1443, cbSceneParam._m0[_1498].y, _1439 * cbSceneParam._m0[_1498].x))) / _1529;
        float _1587 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
        float _3653 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1594 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1534 + _1517) / _1529, (_1536 + _1521) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1536 + _1517) / _1529, (_1521 - _1534) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1534) / _1529, (_1521 - _1536) / _1529), _1539), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 - _1536) / _1529, (_1534 + _1521) / _1529), _1539), 0.0)).x), vec4(0.25)));
        _1601 = 1.0 - (_1594 * cbSceneParam._m0[34u].x);
        _1602 = 1.0 - (_1594 * cbSceneParam._m0[34u].y);
        _1603 = 1.0 - (_1594 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1601 = 1.0;
        _1602 = 1.0;
        _1603 = 1.0;
    }
    float _1667;
    float _1669;
    float _1671;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1655 = fma(_1451, cbSceneParam._m0[63u].w, fma(_1447, cbSceneParam._m0[63u].z, fma(_1443, cbSceneParam._m0[63u].y, _1439 * cbSceneParam._m0[63u].x)));
        float _1656 = fma(_1451, cbSceneParam._m0[60u].w, fma(_1447, cbSceneParam._m0[60u].z, fma(_1443, cbSceneParam._m0[60u].y, _1439 * cbSceneParam._m0[60u].x))) / _1655;
        float _1657 = fma(_1451, cbSceneParam._m0[61u].w, fma(_1447, cbSceneParam._m0[61u].z, fma(_1443, cbSceneParam._m0[61u].y, _1439 * cbSceneParam._m0[61u].x))) / _1655;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1656 >= cbSceneParam._m0[64u].x) && (_1657 >= cbSceneParam._m0[64u].y)) && (_1656 <= cbSceneParam._m0[64u].z)) && (_1657 <= cbSceneParam._m0[64u].w))
        {
            float _1797 = fma(_1451, cbSceneParam._m0[62u].w, fma(_1447, cbSceneParam._m0[62u].z, fma(_1443, cbSceneParam._m0[62u].y, _1439 * cbSceneParam._m0[62u].x))) / _1655;
            float _1801 = isnan(cbSceneParam._m0[41u].w) ? _1797 : (isnan(_1797) ? cbSceneParam._m0[41u].w : max(_1797, cbSceneParam._m0[41u].w));
            float _1844 = (cbSceneParam._m0[33u].x - sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454))) * cbSceneParam._m0[33u].y;
            float _3669 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
            float _1851 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1656, cbSceneParam._m0[33u].w + _1657), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1656, _1657 - cbSceneParam._m0[33u].z), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].z, _1657 - cbSceneParam._m0[33u].w), _1801), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1656 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1657), _1801), 0.0)).x), vec4(0.25)));
            float _1855 = 1.0 - (_1851 * cbSceneParam._m0[34u].x);
            float _1856 = 1.0 - (_1851 * cbSceneParam._m0[34u].y);
            float _1857 = 1.0 - (_1851 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1856) ? _1602 : (isnan(_1602) ? _1856 : min(_1602, _1856));
            frontier_phi_39_38_ladder_1 = isnan(_1855) ? _1601 : (isnan(_1601) ? _1855 : min(_1601, _1855));
            frontier_phi_39_38_ladder_2 = isnan(_1857) ? _1603 : (isnan(_1603) ? _1857 : min(_1603, _1857));
        }
        else
        {
            frontier_phi_39_38_ladder = _1602;
            frontier_phi_39_38_ladder_1 = _1601;
            frontier_phi_39_38_ladder_2 = _1603;
        }
        _1667 = frontier_phi_39_38_ladder_1;
        _1669 = frontier_phi_39_38_ladder;
        _1671 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1667 = _1601;
        _1669 = _1602;
        _1671 = _1603;
    }
    uvec4 _1676 = floatBitsToUint(cbInstanceData._m0[_347 + 5u]);
    uint _1678 = _1676.x * 14u;
    uint _1679 = _1678 + 13u;
    float _1686 = _373 + (-1.0);
    float _1692 = (cbLight._m0[_1679].x * _1686) + 1.0;
    float _1693 = (cbLight._m0[_1679].y * _1686) + 1.0;
    float _1694 = (cbLight._m0[_1679].z * _1686) + 1.0;
    float _1695 = (cbLight._m0[_1679].w * _1686) + 1.0;
    uint _1696 = _1678 + 5u;
    float _1702 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
    uint _1706 = _1678 + 4u;
    float _1716 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1720 = _1678 | 1u;
    float _1731 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_204, _205, _206));
    float _1734 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_204, _205, _206));
    float _3705 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _3716 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1739 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.3183098733425140380859375;
    float _1741 = (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.3183098733425140380859375;
    float _1748 = ((cbLight._m0[_1696].x * _1702) * _1741) + (((cbLight._m0[_1706].x * _1667) * _1716) * _1739);
    float _1749 = ((_1702 * cbLight._m0[_1696].y) * _1741) + (((cbLight._m0[_1706].y * _1669) * _1716) * _1739);
    float _1750 = ((_1702 * cbLight._m0[_1696].z) * _1741) + (((cbLight._m0[_1706].z * _1671) * _1716) * _1739);
    uvec4 _1754 = floatBitsToUint(cbLight._m0[_1678 + 12u]);
    bool _1756 = _1754.x == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1756)
    {
        _1858 = _1748;
        _1860 = _1749;
        _1862 = _1750;
    }
    else
    {
        uint _1866 = _1678 + 6u;
        float _1882 = (dot(vec3(cbLight._m0[_1678 + 2u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _3727 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1885 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1858 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1748;
        _1860 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1749;
        _1862 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1750;
    }
    bool _1865 = _1754.y == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1865)
    {
        _1920 = _1858;
        _1922 = _1860;
        _1924 = _1862;
    }
    else
    {
        uint _2028 = _1678 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1678 + 3u].xyz), vec3(_204, _205, _206)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3743 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _2047 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _1920 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1858;
        _1922 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1860;
        _1924 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1862;
    }
    uint _1926 = _1678 + 8u;
    float _1932 = cbLight._m0[_1678].x + _286;
    float _1933 = cbLight._m0[_1678].y + _287;
    float _1934 = cbLight._m0[_1678].z + _288;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1942 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1678].xyz));
    float _3759 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _1946 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1678].xyz), vec3(_1932 * _1938, _1933 * _1938, _1934 * _1938));
    float _3781 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = (0.5 / ((_1945 + 9.9999999392252902907785028219223e-09) + _1946)) * _1945;
    float _3792 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.31831014156341552734375;
    uint _1980 = _1678 + 9u;
    float _1986 = cbLight._m0[_1720].x + _286;
    float _1987 = cbLight._m0[_1720].y + _287;
    float _1988 = cbLight._m0[_1720].z + _288;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1996 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_1720].xyz));
    float _3803 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1986 * _1992, _1987 * _1992, _1988 * _1992));
    float _3814 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2013 = (0.5 / ((_1999 + 9.9999999392252902907785028219223e-09) + _1946)) * _1999;
    float _3825 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.31831014156341552734375;
    float _2025 = (((_2009 * cbLight._m0[_1980].x) * _2015) * _1702) + ((((cbLight._m0[_1926].x * _1667) * _1958) * _1966) * _1716);
    float _2026 = (((_2009 * cbLight._m0[_1980].y) * _2015) * _1702) + ((((cbLight._m0[_1926].y * _1669) * _1958) * _1966) * _1716);
    float _2027 = (((_2009 * cbLight._m0[_1980].z) * _2015) * _1702) + ((((cbLight._m0[_1926].z * _1671) * _1958) * _1966) * _1716);
    float _2083;
    float _2085;
    float _2087;
    if (_1756)
    {
        _2083 = _2025;
        _2085 = _2026;
        _2087 = _2027;
    }
    else
    {
        uint _2089 = _1678 + 10u;
        uint _2095 = _1678 + 2u;
        float _2101 = cbLight._m0[_2095].x + _286;
        float _2102 = cbLight._m0[_2095].y + _287;
        float _2103 = cbLight._m0[_2095].z + _288;
        float _2107 = inversesqrt(dot(vec3(_2101, _2102, _2103), vec3(_2101, _2102, _2103)));
        float _2111 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_2095].xyz));
        float _3836 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2101 * _2107, _2102 * _2107, _2103 * _2107));
        float _3847 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2128 = (0.5 / ((_2114 + 9.9999999392252902907785028219223e-09) + _1946)) * _2114;
        float _3858 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.31831014156341552734375;
        float _2131 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2083 = (((_2124 * cbLight._m0[_2089].x) * _2130) * _2131) + _2025;
        _2085 = (((_2124 * cbLight._m0[_2089].y) * _2130) * _2131) + _2026;
        _2087 = (((_2124 * cbLight._m0[_2089].z) * _2130) * _2131) + _2027;
    }
    float _2162;
    float _2164;
    float _2166;
    if (_1865)
    {
        _2162 = _2083;
        _2164 = _2085;
        _2166 = _2087;
    }
    else
    {
        uint _2173 = _1678 + 11u;
        uint _2179 = _1678 + 3u;
        float _2185 = cbLight._m0[_2179].x + _286;
        float _2186 = cbLight._m0[_2179].y + _287;
        float _2187 = cbLight._m0[_2179].z + _288;
        float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
        float _2195 = dot(vec3(_204, _205, _206), vec3(cbLight._m0[_2179].xyz));
        float _3874 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2185 * _2191, _2186 * _2191, _2187 * _2191));
        float _3885 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = (0.5 / ((_2198 + 9.9999999392252902907785028219223e-09) + _1946)) * _2198;
        float _3896 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2214 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.31831014156341552734375;
        float _2215 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _2162 = (((_2208 * cbLight._m0[_2173].x) * _2214) * _2215) + _2083;
        _2164 = (((_2208 * cbLight._m0[_2173].y) * _2214) * _2215) + _2085;
        _2166 = (((_2208 * cbLight._m0[_2173].z) * _2214) * _2215) + _2087;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1676.y == 0u)
    {
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.x;
        uint _2248 = uint((float(_2236.y) * floor(float(uint(cbSceneParam._m0[85u].y * _308) / _2237))) + floor(float(uint(cbSceneParam._m0[85u].x * _307) / _2237)));
        float _2258 = (log2(_1454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2259 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        uint _2262 = uint(isnan(14.0) ? _2259 : (isnan(_2259) ? 14.0 : min(_2259, 14.0)));
        uvec4 _2267 = texelFetch(g_lightClusterGridBuffer, int(((_2262 << 2u) + (_2248 << 6u)) >> 2u));
        uint _2268 = _2267.x;
        uint _2269 = _2236.z;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        if (((((1u << ((_2269 >> 4u) & 15u)) + 4294967295u) & _2268) == 0u) || ((_2269 & 240u) == 0u))
        {
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
        }
        else
        {
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            uint _2504 = 0u;
            uint _2513;
            bool _2514;
            for (;;)
            {
                _2513 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                _2514 = _2513 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2514)
                {
                    frontier_phi_73_pred = _2503;
                    frontier_phi_73_pred_1 = _2502;
                    frontier_phi_73_pred_2 = _2501;
                    frontier_phi_73_pred_3 = _2500;
                    frontier_phi_73_pred_4 = _2499;
                    frontier_phi_73_pred_5 = _2498;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2513;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2504 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _1452;
                        float _2710 = _2669.y - _1453;
                        float _2711 = _2669.z - _1454;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _3922 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * dot(vec3(_328, _331, _334), vec3(_2715 * _2709, _2715 * _2710, _2715 * _2711))) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _1452;
                        float _2745 = (-0.0) - _1453;
                        float _2746 = (-0.0) - _1454;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2754 = dot(vec3(_328, _331, _334), vec3(_2750 * _2744, _2750 * _2745, _2750 * _2746));
                        float _3938 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _3949 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2758 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2762 = (0.5 / (((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) + 9.9999999392252902907785028219223e-09) + _2758)) * _2758;
                        float _3960 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2771 = (((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 3.1415927410125732421875) / ((_2736 * 2.1991131305694580078125) + 3.141590118408203125)) * _2725;
                        _2573 = (_2740 * _2688.x) + _2646;
                        _2574 = (_2740 * _2688.y) + _2647;
                        _2575 = (_2740 * _2688.z) + _2648;
                        _2570 = (_2771 * _2705.x) + _2643;
                        _2571 = (_2771 * _2705.y) + _2644;
                        _2572 = (_2771 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_73_pred = _2575;
                    frontier_phi_73_pred_1 = _2574;
                    frontier_phi_73_pred_2 = _2573;
                    frontier_phi_73_pred_3 = _2572;
                    frontier_phi_73_pred_4 = _2571;
                    frontier_phi_73_pred_5 = _2570;
                }
                _2358 = frontier_phi_73_pred;
                _2356 = frontier_phi_73_pred_1;
                _2354 = frontier_phi_73_pred_2;
                _2352 = frontier_phi_73_pred_3;
                _2350 = frontier_phi_73_pred_4;
                _2348 = frontier_phi_73_pred_5;
                uint _2505 = _2504 + 1u;
                if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2498 = _2348;
                    _2499 = _2350;
                    _2500 = _2352;
                    _2501 = _2354;
                    _2502 = _2356;
                    _2503 = _2358;
                    _2504 = _2505;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
        }
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.z;
        uint _2364 = (_2362 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2364) & _2268) == 0u)
        {
            _2469 = _2347;
            _2471 = _2349;
            _2473 = _2351;
            _2475 = _2353;
            _2477 = _2355;
            _2479 = _2357;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2364 < ((_2362 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2626 = _2347;
                float _2627 = _2349;
                float _2628 = _2351;
                float _2629 = _2353;
                float _2630 = _2355;
                float _2631 = _2357;
                uint _2632 = _2364;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2642)
                    {
                        frontier_phi_84_pred = _2630;
                        frontier_phi_84_pred_1 = _2629;
                        frontier_phi_84_pred_2 = _2628;
                        frontier_phi_84_pred_3 = _2627;
                        frontier_phi_84_pred_4 = _2626;
                        frontier_phi_84_pred_5 = _2631;
                    }
                    else
                    {
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _2798 = _2626;
                        float _2799 = _2627;
                        float _2800 = _2628;
                        float _2801 = _2629;
                        float _2802 = _2630;
                        float _2803 = _2631;
                        uint _2804 = _2641;
                        uint _2805;
                        vec4 _2830;
                        float _2831;
                        vec4 _2846;
                        vec3 _2858;
                        vec4 _2874;
                        vec4 _2890;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2815 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2804));
                            _2805 = (_2804 + 4294967295u) & _2804;
                            uint _2817 = _2815 * 40u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2831 = _2830.w;
                            uint _2833 = (_2815 * 40u) + 4u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2815 * 40u) + 8u;
                            _2858 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x));
                            uint _2861 = (_2815 * 40u) + 16u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2877 = (_2815 * 40u) + 20u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2893 = (_2815 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2815 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_1454, _2925.z, fma(_1453, _2925.y, _2925.x * _1452)) + _2925.w;
                            _2938 = !((fma(_1454, _2906.z, fma(_1453, _2906.y, _2906.x * _1452)) + _2906.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2830.x - _1452;
                                float _2966 = _2830.y - _1453;
                                float _2967 = _2830.z - _1454;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2831 * _2831));
                                float _3971 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2983 = sqrt(_2968) * _2846.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2987 = 1.0 - _2986;
                                float _2989 = (_2987 * dot(vec3(_2972, _2973, _2974), vec3(_328, _331, _334))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_1454, _2874.z, fma(_1453, _2874.y, _2874.x * _1452)) + _2874.w) / _2937;
                                float _2997 = (fma(_1454, _2890.z, fma(_1453, _2890.y, _2890.x * _1452)) + _2890.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _3987 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3013 = dot(vec3(_328, _331, _334), vec3((-0.0) - (_1452 * _2494), (-0.0) - (_1453 * _2494), (-0.0) - (_1454 * _2494)));
                                float _3998 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3021 = (_2987 * dot(vec3(_328, _331, _334), vec3(_2972, _2973, _2974))) + _2986;
                                float _4009 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3026 = (0.5 / (((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) + 9.9999999392252902907785028219223e-09) + _3022)) * _3022;
                                float _4020 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3033 = (_3002 * _2979) * (((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 3.1415927410125732421875) / ((_2992 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3003 * _2846.y;
                                frontier_phi_90_pred_1 = _3003 * _2846.x;
                                frontier_phi_90_pred_2 = _3033 * _2858.z;
                                frontier_phi_90_pred_3 = _3033 * _2858.y;
                                frontier_phi_90_pred_4 = _3033 * _2858.x;
                                frontier_phi_90_pred_5 = _3003 * _2846.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3041 = frontier_phi_90_pred;
                            _3040 = frontier_phi_90_pred_1;
                            _3039 = frontier_phi_90_pred_2;
                            _3038 = frontier_phi_90_pred_3;
                            _3037 = frontier_phi_90_pred_4;
                            _3042 = frontier_phi_90_pred_5;
                            _2788 = _3040 + _2801;
                            _2789 = _3041 + _2802;
                            _2790 = _3042 + _2803;
                            _2785 = _3037 + _2798;
                            _2786 = _3038 + _2799;
                            _2787 = _3039 + _2800;
                            if (_2805 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2798 = _2785;
                                _2799 = _2786;
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2805;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2789;
                        frontier_phi_84_pred_1 = _2788;
                        frontier_phi_84_pred_2 = _2787;
                        frontier_phi_84_pred_3 = _2786;
                        frontier_phi_84_pred_4 = _2785;
                        frontier_phi_84_pred_5 = _2790;
                    }
                    _2478 = frontier_phi_84_pred;
                    _2476 = frontier_phi_84_pred_1;
                    _2474 = frontier_phi_84_pred_2;
                    _2472 = frontier_phi_84_pred_3;
                    _2470 = frontier_phi_84_pred_4;
                    _2480 = frontier_phi_84_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2470;
                        _2627 = _2472;
                        _2628 = _2474;
                        _2629 = _2476;
                        _2630 = _2478;
                        _2631 = _2480;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2480;
                frontier_phi_65_66_ladder_1 = _2476;
                frontier_phi_65_66_ladder_2 = _2478;
                frontier_phi_65_66_ladder_3 = _2472;
                frontier_phi_65_66_ladder_4 = _2470;
                frontier_phi_65_66_ladder_5 = _2474;
            }
            else
            {
                frontier_phi_65_66_ladder = _2357;
                frontier_phi_65_66_ladder_1 = _2353;
                frontier_phi_65_66_ladder_2 = _2355;
                frontier_phi_65_66_ladder_3 = _2349;
                frontier_phi_65_66_ladder_4 = _2347;
                frontier_phi_65_66_ladder_5 = _2351;
            }
            _2469 = frontier_phi_65_66_ladder_4;
            _2471 = frontier_phi_65_66_ladder_3;
            _2473 = frontier_phi_65_66_ladder_5;
            _2475 = frontier_phi_65_66_ladder_1;
            _2477 = frontier_phi_65_66_ladder_2;
            _2479 = frontier_phi_65_66_ladder;
        }
        float _2484 = isnan(1.0) ? _373 : (isnan(_373) ? 1.0 : min(_373, 1.0));
        _2280 = (_2484 * _2475) + _1920;
        _2282 = (_2484 * _2477) + _1922;
        _2284 = (_2484 * _2479) + _1924;
        _2286 = ((_2469 * 0.039999999105930328369140625) * _2484) + _2162;
        _2288 = ((_2471 * 0.039999999105930328369140625) * _2484) + _2164;
        _2290 = ((_2473 * 0.039999999105930328369140625) * _2484) + _2166;
    }
    else
    {
        _2280 = _1920;
        _2282 = _1922;
        _2284 = _1924;
        _2286 = _2162;
        _2288 = _2164;
        _2290 = _2166;
    }
    float _4036 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _4047 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _4058 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _2307 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2280 + ((isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))) * _373))) + ((_2286 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2308 = ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2282 + ((isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0))) * _373))) + ((_2288 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    float _2309 = ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2284 + ((isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0))) * _373))) + ((_2290 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1184)) * cbPerFrame._m0[3u].x);
    uint _2310 = _347 + 6u;
    float _2318 = _307 / cbSceneParam._m0[86u].x;
    float _2319 = _308 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _226 : (isnan(_226) ? cbSceneParam._m0[77u].w : min(_226, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_226 > cbSceneParam._m0[78u].w)
    {
        float _2372 = isnan(_226) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _226 : min(cbSceneParam._m0[80u].w, _226));
        float _2373 = _2372 / _226;
        float _2384 = _2373 * _279;
        float _2385 = _280 * _2373;
        float _2386 = (-0.0) - _2385;
        float _2387 = _2373 * _281;
        float _2389 = (cbSceneParam._m0[77u].w * _2386) / _2372;
        float _2390 = _2389 + cbSceneParam._m0[79u].w;
        float _2391 = cbSceneParam._m0[79u].w - _2385;
        float _2397 = sqrt(((_2384 * _2384) + (_2385 * _2385)) + (_2387 * _2387));
        float _2400 = (1.0 - (cbSceneParam._m0[77u].w / _2372)) * _2397;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2386 - _2389) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2390 > 0.0) ? exp2(_2405 * _2390) : (2.0 - exp2(_2407 * _2390))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2400;
        }
        else
        {
            float _2527 = 1.0 / cbSceneParam._m0[80u].x;
            float _2528 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : max(_2390, _2391));
            float _2529 = isnan(_2391) ? _2390 : (isnan(_2390) ? _2391 : min(_2390, _2391));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            float _2539 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : min(_2529, 0.0));
            _2583 = ((abs(_2397 / _2386) * cbSceneParam._m0[80u].y) * ((((_2538 - _2539) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0))))) * _2527)) - ((exp2(_2407 * _2538) - exp2(_2407 * _2539)) * _2527))) + (_2400 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2338);
        _2409 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2411 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2413 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2415 = _2594 * _2338;
    }
    else
    {
        _2409 = _2335;
        _2411 = _2336;
        _2413 = _2337;
        _2415 = _2338;
    }
    bool _2621;
    vec4 _2425;
    vec4 _2448;
    float _2450;
    float _2454;
    float _2455;
    float _2456;
    float _2457;
    bool _2468;
    for (;;)
    {
        _2425 = cbMatDynParam._m0[0u];
        float _2427 = roundEven(_2425.y);
        bool _2428 = _2427 == 3.0;
        float _2430 = log2(_2415);
        float _2437 = exp2(_2430 * cbSceneParam._m0[78u].x) * _2307;
        float _2438 = exp2(_2430 * cbSceneParam._m0[78u].y) * _2308;
        float _2439 = exp2(_2430 * cbSceneParam._m0[78u].z) * _2309;
        float _2446 = _295 + (-0.5);
        _2448 = cbMtdParam._m0[1u];
        _2450 = _2448.y * _2446;
        float _2453 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2454 = _2453 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2409)));
        _2455 = _2453 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
        _2456 = _2453 * (_2428 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
        _2457 = _2446 * 0.999000012874603271484375;
        _2468 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2468)
        {
            if ((cbInstanceData._m0[_347 + 7u].x + _2457) < 0.5)
            {
                _2621 = true;
                break;
            }
        }
        uint _2562 = _349 + uint(_2425.w);
        if ((cbInstanceData._m0[_2562].w < 1.0) && ((cbInstanceData._m0[_2562].w + _2457) < 0.5))
        {
            _2621 = true;
            break;
        }
        if ((_2450 + _199) < _2448.x)
        {
            _2621 = true;
            break;
        }
        _2621 = false;
        break;
    }
    float _2776;
    if (_2621)
    {
        discard_state = true;
        _2776 = 0.0;
    }
    else
    {
        _2776 = cbInstanceData._m0[_2310].w;
    }
    SV_Target.x = _2454;
    SV_Target.y = _2455;
    SV_Target.z = _2456;
    SV_Target.w = _2776;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2310].w;
    discard_exit();
}


