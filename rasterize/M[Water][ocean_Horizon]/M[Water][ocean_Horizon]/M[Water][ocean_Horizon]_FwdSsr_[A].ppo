#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_Horizon_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _133 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _134 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _135 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _140 = inversesqrt(dot(vec3(_133, _134, _135), vec3(_133, _134, _135)));
    float _147 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _148 = _147 * NORMAL.x;
    float _149 = _147 * NORMAL.y;
    float _150 = _147 * NORMAL.z;
    float _154 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _148;
        _163 = (-0.0) - _149;
        _164 = (-0.0) - _150;
    }
    else
    {
        _162 = _148;
        _163 = _149;
        _164 = _150;
    }
    float _210 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _220 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _210);
    float _221 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _210);
    float _222 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _210);
    bool _246 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _255 = cbSceneParam._m0[3u].y - cbInstanceData._m0[(uint(roundEven(NORMAL.w)) * 13u) + 1u].w;
    float _256 = _220 / _221;
    float _258 = (-0.0) - (_222 / _221);
    vec4 _279 = texture(sampler2D(M_Water_ocean_Horizon_snp_0_Texture2D_1, SS_BumpMap), vec2(((((_246 ? (_255 * _256) : _256) * cbMtdParam._m0[12u].w) + ((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_246 ? (_255 * _258) : _258) * cbMtdParam._m0[13u].x) + ((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _914 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0))));
    float _299 = fma(_296, _162, fma(_289, _154 * TANGENT.x, (_140 * _133) * _287));
    float _302 = fma(_296, _163, fma(_289, _154 * TANGENT.y, (_140 * _134) * _287));
    float _305 = fma(_296, _164, fma(_289, _154 * TANGENT.z, (_140 * _135) * _287));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _925 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _313 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _356 = sqrt(((_220 * _220) + (_221 * _221)) + (_222 * _222));
        float _363 = (cbMatDynParam._m0[5u].x * _356) + cbMatDynParam._m0[5u].y;
        float _936 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
        float _364 = isnan(1.0) ? _936 : (isnan(_936) ? 1.0 : min(_936, 1.0));
        float _368 = (cbMatDynParam._m0[5u].z * _356) + cbMatDynParam._m0[5u].w;
        float _947 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0))) - _364)) + _364) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _336 = POSITION_1.x / POSITION_1.w;
    float _337 = POSITION_1.y / POSITION_1.w;
    float _341 = (_336 * 0.5) + 0.5;
    float _342 = 0.5 - (_337 * 0.5);
    float _381;
    float _383;
    float _385;
    float _387;
    if (_313 < cbPerScene._m0[22u].z)
    {
        _381 = 0.0;
        _383 = 0.0;
        _385 = 0.0;
        _387 = 0.0;
    }
    else
    {
        float _393 = 1.0 / _326;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _393))
        {
            float _419 = fma(_312, cbPerScene._m0[8u].z, fma(_311, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _310));
            float _422 = fma(_312, cbPerScene._m0[9u].z, fma(_311, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _310));
            float _425 = fma(_312, cbPerScene._m0[10u].z, fma(_311, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _310));
            float _432 = (_336 * _326) * cbPerScene._m0[28u].x;
            float _434 = (_337 * _326) * cbPerScene._m0[28u].y;
            float _438 = inversesqrt(dot(vec3(_432, _434, _326), vec3(_432, _434, _326)));
            float _439 = _432 * _438;
            float _440 = _434 * _438;
            float _441 = _438 * _326;
            float _445 = dot(vec3(_439, _440, _441), vec3(_419, _422, _425)) * 2.0;
            float _449 = _439 - (_445 * _419);
            float _450 = _440 - (_445 * _422);
            float _451 = _441 - (_445 * _425);
            float _455 = inversesqrt(dot(vec3(_449, _450, _451), vec3(_449, _450, _451)));
            float _458 = _451 * _455;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_458 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _469 = abs(dot(vec3((-0.0) - _439, (-0.0) - _440, (-0.0) - _441), vec3(_419, _422, _425)));
                float _958 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
                float _480 = (((_313 * _313) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _958 : (isnan(_958) ? 1.0 : min(_958, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _489 = (cbPerScene._m0[29u].x * (1.0 - _313)) + cbPerScene._m0[29u].y;
                float _969 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
                float _497 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_480 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _500 = _458 - cbPerScene._m0[16u].x;
                    float _980 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
                    float _501 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
                    float _502 = _501 * _501;
                    float _504 = (_480 - cbPerScene._m0[22u].x) * 10.0;
                    float _991 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
                    float _506 = isnan(1.0) ? _991 : (isnan(_991) ? 1.0 : min(_991, 1.0));
                    float _507 = isnan(_506) ? _502 : (isnan(_502) ? _506 : min(_502, _506));
                    float _511 = (cbPerScene._m0[21u].x - _326) * cbPerScene._m0[21u].z;
                    float _1007 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
                    float _512 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
                    float _513 = isnan(_512) ? _507 : (isnan(_507) ? _512 : min(_507, _512));
                    float _514 = (_449 * _455) + _432;
                    float _515 = (_450 * _455) + _434;
                    float _516 = _458 + _326;
                    float _548 = fma(_516, cbPerScene._m0[7u].z, fma(_515, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _514)) + cbPerScene._m0[7u].w;
                    float _552 = ((fma(_516, cbPerScene._m0[4u].z, fma(_515, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _514)) + cbPerScene._m0[4u].w) / _548) - _341;
                    float _553 = ((fma(_516, cbPerScene._m0[5u].z, fma(_515, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _514)) + cbPerScene._m0[5u].w) / _548) - _342;
                    float _560 = cbPerScene._m0[18u].x * _552;
                    float _561 = cbPerScene._m0[18u].y * _553;
                    float _566 = sqrt((_560 * _560) + (_561 * _561)) + 9.9999997473787516355514526367188e-06;
                    float _571 = (_552 / _566) * _497;
                    float _572 = (_553 / _566) * _497;
                    float _573 = (((1.0 / _516) - _393) / _566) * _497;
                    float _602 = abs(float(_571 > 0.0) - _341) / (abs(_571) + 1.0000000116860974230803549289703e-07);
                    float _603 = abs(float(_572 > 0.0) - _342) / (abs(_572) + 1.0000000116860974230803549289703e-07);
                    float _605 = (abs(((_573 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _393) / (abs(_573) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _606 = isnan(_603) ? _602 : (isnan(_602) ? _603 : min(_602, _603));
                    float _607 = isnan(_605) ? _606 : (isnan(_606) ? _605 : min(_606, _605));
                    uint _610 = uint(int(isnan(cbPerScene._m0[23u].y) ? _607 : (isnan(_607) ? cbPerScene._m0[23u].y : min(_607, cbPerScene._m0[23u].y))));
                    float _388;
                    float _615;
                    float _617;
                    float _619;
                    if (int(_610) > int(0u))
                    {
                        float _612 = _573 + _393;
                        float _613 = _572 + _342;
                        float _614 = _571 + _341;
                        float _616;
                        float _618;
                        float _620;
                        float _621;
                        uint _632;
                        float _634;
                        float _636;
                        float _638;
                        float _640;
                        float _642;
                        float _644;
                        float _646;
                        uint _648;
                        float _650;
                        float _652;
                        float _654;
                        float _627 = 0.0;
                        float _628 = 0.0;
                        float _629 = 0.0;
                        float _630 = 0.0;
                        uint _631 = 0u;
                        float _633 = _393;
                        float _635 = _614;
                        float _637 = _613;
                        float _639 = _612;
                        float _641 = _341;
                        float _643 = _342;
                        float _645 = _393;
                        uint _647 = 1u;
                        float _649 = 0.0;
                        float _651 = 0.0;
                        float _653 = 0.0;
                        float _665;
                        float _671;
                        float _672;
                        float _673;
                        float _674;
                        float _675;
                        float _676;
                        uint _677;
                        float _678;
                        bool _684;
                        for (;;)
                        {
                            _665 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _637), 0.0).x;
                            bool _670 = _631 == (_610 + 4294967295u);
                            _671 = _670 ? _649 : _635;
                            _672 = _670 ? _651 : _637;
                            _673 = _670 ? _653 : _639;
                            _674 = _670 ? _649 : _641;
                            _675 = _670 ? _651 : _643;
                            _676 = _670 ? _653 : _645;
                            _677 = _670 ? 1u : _647;
                            _678 = _670 ? (-1.0) : (_639 - _665);
                            _684 = (_677 != 0u) && ((_678 <= 0.0) && ((_670 ? (-1.0) : (_665 - (_633 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_684)
                            {
                                uint _694 = uint(int(log2(_497) + 0.999000012874603271484375));
                                float _705;
                                float _707;
                                float _709;
                                float _711;
                                float _713;
                                float _715;
                                float _717;
                                if (int(_694) > int(0u))
                                {
                                    uint _815;
                                    float _817;
                                    float _818;
                                    float _819;
                                    float _820;
                                    float _821;
                                    float _822;
                                    float _823;
                                    _815 = 0u;
                                    _817 = _671;
                                    _818 = _672;
                                    _819 = _673;
                                    _820 = _674;
                                    _821 = _675;
                                    _822 = _676;
                                    _823 = _665;
                                    float _706;
                                    float _708;
                                    float _710;
                                    float _712;
                                    float _714;
                                    float _716;
                                    float _718;
                                    for (;;)
                                    {
                                        float _827 = (_820 + _817) * 0.5;
                                        float _828 = (_821 + _818) * 0.5;
                                        float _829 = (_822 + _819) * 0.5;
                                        vec4 _837 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _827, cbSceneParam._m0[86u].y * _828), 0.0);
                                        float _839 = _837.x;
                                        bool _841 = (_829 - _839) < 0.0;
                                        _706 = _841 ? _827 : _817;
                                        _708 = _841 ? _828 : _818;
                                        _710 = _841 ? _829 : _819;
                                        _712 = _841 ? _820 : _827;
                                        _714 = _841 ? _821 : _828;
                                        _716 = _841 ? _822 : _829;
                                        _718 = _841 ? _839 : _823;
                                        uint _816 = _815 + 1u;
                                        if (_816 == _694)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _815 = _816;
                                            _817 = _706;
                                            _818 = _708;
                                            _819 = _710;
                                            _820 = _712;
                                            _821 = _714;
                                            _822 = _716;
                                            _823 = _718;
                                        }
                                    }
                                    _705 = _706;
                                    _707 = _708;
                                    _709 = _710;
                                    _711 = _712;
                                    _713 = _714;
                                    _715 = _716;
                                    _717 = _718;
                                }
                                else
                                {
                                    _705 = _671;
                                    _707 = _672;
                                    _709 = _673;
                                    _711 = _674;
                                    _713 = _675;
                                    _715 = _676;
                                    _717 = _665;
                                }
                                float _727 = cbPerScene._m0[28u].x * ((_705 * 2.0) + (-1.0));
                                float _728 = cbPerScene._m0[28u].y * (1.0 - (_707 * 2.0));
                                float _760 = fma(_717, cbPerScene._m0[27u].w, fma(_728, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _727) + cbPerScene._m0[27u].z);
                                float _761 = fma(_717, cbPerScene._m0[24u].w, fma(_728, cbPerScene._m0[24u].y, _727 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _760;
                                float _762 = fma(_717, cbPerScene._m0[25u].w, fma(_728, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _727) + cbPerScene._m0[25u].z) / _760;
                                vec4 _771 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _761, cbSceneParam._m0[87u].w * _762), 0.0);
                                float _776 = isnan(_513) ? 1.0 : (isnan(1.0) ? _513 : min(1.0, _513));
                                float _777 = 0.5 - _761;
                                float _778 = 0.5 - _762;
                                float _779 = _777 * 2.0;
                                float _780 = _778 * 2.0;
                                float _781 = _779 * _779;
                                float _782 = _780 * _780;
                                float _1043 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
                                float _1054 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
                                float _791 = inversesqrt(dot(vec2(_571, _572), vec2(_571, _572)));
                                float _797 = inversesqrt(dot(vec2(_779, _780), vec2(_779, _780)));
                                float _803 = dot(vec2((_777 * (-2.0)) * _797, (_778 * (-2.0)) * _797), vec2(_791 * _571, _791 * _572));
                                float _1065 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
                                float _810 = ((1.0 - (isnan(1.0) ? _1054 : (isnan(_1054) ? 1.0 : min(_1054, 1.0)))) * (1.0 - (isnan(1.0) ? _1043 : (isnan(_1043) ? 1.0 : min(_1043, 1.0))))) * (4.0 - ((isnan(1.0) ? _1065 : (isnan(_1065) ? 1.0 : min(_1065, 1.0))) * 2.0));
                                float _1076 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
                                float _811 = isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0));
                                float _812 = _811 * _811;
                                frontier_phi_19_pred = _715;
                                frontier_phi_19_pred_1 = _713;
                                frontier_phi_19_pred_2 = _651;
                                frontier_phi_19_pred_3 = _711;
                                frontier_phi_19_pred_4 = _709;
                                frontier_phi_19_pred_5 = _707;
                                frontier_phi_19_pred_6 = _633;
                                frontier_phi_19_pred_7 = _610;
                                frontier_phi_19_pred_8 = isnan(_812) ? _776 : (isnan(_776) ? _812 : min(_776, _812));
                                frontier_phi_19_pred_9 = _771.z;
                                frontier_phi_19_pred_10 = _771.y;
                                frontier_phi_19_pred_11 = _771.x;
                                frontier_phi_19_pred_12 = _705;
                                frontier_phi_19_pred_13 = _653;
                                frontier_phi_19_pred_14 = _649;
                                frontier_phi_19_pred_15 = _677;
                            }
                            else
                            {
                                bool _696 = _678 > 0.0;
                                frontier_phi_19_pred = _673;
                                frontier_phi_19_pred_1 = _672;
                                frontier_phi_19_pred_2 = _696 ? _672 : _651;
                                frontier_phi_19_pred_3 = _671;
                                frontier_phi_19_pred_4 = _673 + _573;
                                frontier_phi_19_pred_5 = _672 + _572;
                                frontier_phi_19_pred_6 = _665;
                                frontier_phi_19_pred_7 = _631 + 1u;
                                frontier_phi_19_pred_8 = _630;
                                frontier_phi_19_pred_9 = _629;
                                frontier_phi_19_pred_10 = _628;
                                frontier_phi_19_pred_11 = _627;
                                frontier_phi_19_pred_12 = _671 + _571;
                                frontier_phi_19_pred_13 = _696 ? _673 : _653;
                                frontier_phi_19_pred_14 = _696 ? _671 : _649;
                                frontier_phi_19_pred_15 = uint(_696);
                            }
                            _646 = frontier_phi_19_pred;
                            _644 = frontier_phi_19_pred_1;
                            _652 = frontier_phi_19_pred_2;
                            _642 = frontier_phi_19_pred_3;
                            _640 = frontier_phi_19_pred_4;
                            _638 = frontier_phi_19_pred_5;
                            _634 = frontier_phi_19_pred_6;
                            _632 = frontier_phi_19_pred_7;
                            _621 = frontier_phi_19_pred_8;
                            _620 = frontier_phi_19_pred_9;
                            _618 = frontier_phi_19_pred_10;
                            _616 = frontier_phi_19_pred_11;
                            _636 = frontier_phi_19_pred_12;
                            _654 = frontier_phi_19_pred_13;
                            _650 = frontier_phi_19_pred_14;
                            _648 = frontier_phi_19_pred_15;
                            if (int(_632) < int(_610))
                            {
                                _627 = _616;
                                _628 = _618;
                                _629 = _620;
                                _630 = _621;
                                _631 = _632;
                                _633 = _634;
                                _635 = _636;
                                _637 = _638;
                                _639 = _640;
                                _641 = _642;
                                _643 = _644;
                                _645 = _646;
                                _647 = _648;
                                _649 = _650;
                                _651 = _652;
                                _653 = _654;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _615 = _616;
                        _617 = _618;
                        _619 = _620;
                        _388 = _621;
                    }
                    else
                    {
                        _615 = 0.0;
                        _617 = 0.0;
                        _619 = 0.0;
                        _388 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_615) || isnan(_617)) || isnan(_619))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_388 * _615) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _388;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_388 * _619) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_388 * _617) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _381 = frontier_phi_5_6_ladder;
        _383 = frontier_phi_5_6_ladder_3;
        _385 = frontier_phi_5_6_ladder_2;
        _387 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _381;
    SV_Target.y = _383;
    SV_Target.z = _385;
    SV_Target.w = _387;
    discard_exit();
}


