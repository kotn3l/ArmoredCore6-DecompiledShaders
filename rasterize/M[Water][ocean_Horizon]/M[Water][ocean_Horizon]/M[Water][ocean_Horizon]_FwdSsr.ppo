#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_ocean_Horizon_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _120 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _121 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _122 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _127 = inversesqrt(dot(vec3(_120, _121, _122), vec3(_120, _121, _122)));
    float _134 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _135 = _134 * NORMAL.x;
    float _136 = _134 * NORMAL.y;
    float _137 = _134 * NORMAL.z;
    float _141 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _149;
    float _150;
    float _151;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _149 = (-0.0) - _135;
        _150 = (-0.0) - _136;
        _151 = (-0.0) - _137;
    }
    else
    {
        _149 = _135;
        _150 = _136;
        _151 = _137;
    }
    float _197 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _208 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _197);
    bool _233 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _242 = cbSceneParam._m0[3u].y - cbInstanceData._m0[(uint(roundEven(NORMAL.w)) * 13u) + 1u].w;
    float _243 = (cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _197)) / _208;
    float _245 = (-0.0) - ((cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _197)) / _208);
    vec4 _266 = texture(sampler2D(M_Water_ocean_Horizon_snp_0_Texture2D_1, SS_BumpMap), vec2(((((_233 ? (_242 * _243) : _243) * cbMtdParam._m0[12u].w) + ((cbMtdParam._m0[13u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((_233 ? (_242 * _245) : _245) * cbMtdParam._m0[13u].x) + ((cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[10u].w)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _844 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0))));
    float _286 = fma(_283, _149, fma(_276, _141 * TANGENT.x, (_127 * _120) * _274));
    float _289 = fma(_283, _150, fma(_276, _141 * TANGENT.y, (_127 * _121) * _274));
    float _292 = fma(_283, _151, fma(_276, _141 * TANGENT.z, (_127 * _122) * _274));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _855 = isnan(0.0) ? cbMtdParam._m0[10u].z : (isnan(cbMtdParam._m0[10u].z) ? 0.0 : max(cbMtdParam._m0[10u].z, 0.0));
    float _300 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _314 = POSITION_1.x / POSITION_1.w;
    float _315 = POSITION_1.y / POSITION_1.w;
    float _319 = (_314 * 0.5) + 0.5;
    float _320 = 0.5 - (_315 * 0.5);
    float _325;
    float _327;
    float _329;
    float _331;
    if (_300 < cbPerScene._m0[22u].z)
    {
        _325 = 0.0;
        _327 = 0.0;
        _329 = 0.0;
        _331 = 0.0;
    }
    else
    {
        float _337 = 1.0 / _313;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _337))
        {
            float _360 = fma(_299, cbPerScene._m0[8u].z, fma(_298, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _297));
            float _363 = fma(_299, cbPerScene._m0[9u].z, fma(_298, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _297));
            float _366 = fma(_299, cbPerScene._m0[10u].z, fma(_298, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _297));
            float _373 = (_313 * _314) * cbPerScene._m0[28u].x;
            float _375 = (_313 * _315) * cbPerScene._m0[28u].y;
            float _379 = inversesqrt(dot(vec3(_373, _375, _313), vec3(_373, _375, _313)));
            float _380 = _373 * _379;
            float _381 = _375 * _379;
            float _382 = _379 * _313;
            float _386 = dot(vec3(_380, _381, _382), vec3(_360, _363, _366)) * 2.0;
            float _390 = _380 - (_386 * _360);
            float _391 = _381 - (_386 * _363);
            float _392 = _382 - (_386 * _366);
            float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
            float _399 = _392 * _396;
            float frontier_phi_3_4_ladder_5_ladder;
            float frontier_phi_3_4_ladder_5_ladder_1;
            float frontier_phi_3_4_ladder_5_ladder_2;
            float frontier_phi_3_4_ladder_5_ladder_3;
            if (_399 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_5_ladder = 0.0;
                frontier_phi_3_4_ladder_5_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_3 = 0.0;
            }
            else
            {
                float _410 = abs(dot(vec3((-0.0) - _380, (-0.0) - _381, (-0.0) - _382), vec3(_360, _363, _366)));
                float _866 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
                float _421 = (((_300 * _300) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _430 = (cbPerScene._m0[29u].x * (1.0 - _300)) + cbPerScene._m0[29u].y;
                float _877 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
                float _438 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _877 : (isnan(_877) ? 1.0 : min(_877, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
                if (_421 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = 0.0;
                }
                else
                {
                    float _441 = _399 - cbPerScene._m0[16u].x;
                    float _888 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
                    float _442 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
                    float _443 = _442 * _442;
                    float _445 = (_421 - cbPerScene._m0[22u].x) * 10.0;
                    float _899 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
                    float _447 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
                    float _448 = isnan(_447) ? _443 : (isnan(_443) ? _447 : min(_443, _447));
                    float _452 = (cbPerScene._m0[21u].x - _313) * cbPerScene._m0[21u].z;
                    float _915 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
                    float _453 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
                    float _454 = isnan(_453) ? _448 : (isnan(_448) ? _453 : min(_448, _453));
                    float _455 = (_390 * _396) + _373;
                    float _456 = (_391 * _396) + _375;
                    float _457 = _399 + _313;
                    float _490 = fma(_457, cbPerScene._m0[7u].z, fma(_456, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _455)) + cbPerScene._m0[7u].w;
                    float _494 = ((fma(_457, cbPerScene._m0[4u].z, fma(_456, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _455)) + cbPerScene._m0[4u].w) / _490) - _319;
                    float _495 = ((fma(_457, cbPerScene._m0[5u].z, fma(_456, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _455)) + cbPerScene._m0[5u].w) / _490) - _320;
                    float _502 = cbPerScene._m0[18u].x * _494;
                    float _503 = cbPerScene._m0[18u].y * _495;
                    float _508 = sqrt((_502 * _502) + (_503 * _503)) + 9.9999997473787516355514526367188e-06;
                    float _513 = (_494 / _508) * _438;
                    float _514 = (_495 / _508) * _438;
                    float _515 = (((1.0 / _457) - _337) / _508) * _438;
                    float _544 = abs(float(_513 > 0.0) - _319) / (abs(_513) + 1.0000000116860974230803549289703e-07);
                    float _545 = abs(float(_514 > 0.0) - _320) / (abs(_514) + 1.0000000116860974230803549289703e-07);
                    float _547 = (abs(((_515 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _337) / (abs(_515) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _548 = isnan(_545) ? _544 : (isnan(_544) ? _545 : min(_544, _545));
                    float _549 = isnan(_547) ? _548 : (isnan(_548) ? _547 : min(_548, _547));
                    uint _552 = uint(int(isnan(cbPerScene._m0[23u].y) ? _549 : (isnan(_549) ? cbPerScene._m0[23u].y : min(_549, cbPerScene._m0[23u].y))));
                    float _332;
                    float _557;
                    float _559;
                    float _561;
                    if (int(_552) > int(0u))
                    {
                        float _554 = _515 + _337;
                        float _555 = _514 + _320;
                        float _556 = _513 + _319;
                        float _558;
                        float _560;
                        float _562;
                        float _563;
                        uint _574;
                        float _576;
                        float _578;
                        float _580;
                        float _582;
                        float _584;
                        float _586;
                        float _588;
                        uint _590;
                        float _592;
                        float _594;
                        float _596;
                        float _569 = 0.0;
                        float _570 = 0.0;
                        float _571 = 0.0;
                        float _572 = 0.0;
                        uint _573 = 0u;
                        float _575 = _337;
                        float _577 = _556;
                        float _579 = _555;
                        float _581 = _554;
                        float _583 = _319;
                        float _585 = _320;
                        float _587 = _337;
                        uint _589 = 1u;
                        float _591 = 0.0;
                        float _593 = 0.0;
                        float _595 = 0.0;
                        float _607;
                        float _613;
                        float _614;
                        float _615;
                        float _616;
                        float _617;
                        float _618;
                        uint _619;
                        float _620;
                        bool _626;
                        for (;;)
                        {
                            _607 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _579), 0.0).x;
                            bool _612 = _573 == (_552 + 4294967295u);
                            _613 = _612 ? _591 : _577;
                            _614 = _612 ? _593 : _579;
                            _615 = _612 ? _595 : _581;
                            _616 = _612 ? _591 : _583;
                            _617 = _612 ? _593 : _585;
                            _618 = _612 ? _595 : _587;
                            _619 = _612 ? 1u : _589;
                            _620 = _612 ? (-1.0) : (_581 - _607);
                            _626 = (_619 != 0u) && ((_620 <= 0.0) && ((_612 ? (-1.0) : (_607 - (_575 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_16_pred;
                            float frontier_phi_16_pred_1;
                            float frontier_phi_16_pred_2;
                            float frontier_phi_16_pred_3;
                            float frontier_phi_16_pred_4;
                            float frontier_phi_16_pred_5;
                            float frontier_phi_16_pred_6;
                            uint frontier_phi_16_pred_7;
                            float frontier_phi_16_pred_8;
                            float frontier_phi_16_pred_9;
                            float frontier_phi_16_pred_10;
                            float frontier_phi_16_pred_11;
                            float frontier_phi_16_pred_12;
                            float frontier_phi_16_pred_13;
                            float frontier_phi_16_pred_14;
                            uint frontier_phi_16_pred_15;
                            if (_626)
                            {
                                uint _636 = uint(int(log2(_438) + 0.999000012874603271484375));
                                float _647;
                                float _649;
                                float _651;
                                float _653;
                                float _655;
                                float _657;
                                float _659;
                                if (int(_636) > int(0u))
                                {
                                    uint _757;
                                    float _759;
                                    float _760;
                                    float _761;
                                    float _762;
                                    float _763;
                                    float _764;
                                    float _765;
                                    _757 = 0u;
                                    _759 = _613;
                                    _760 = _614;
                                    _761 = _615;
                                    _762 = _616;
                                    _763 = _617;
                                    _764 = _618;
                                    _765 = _607;
                                    float _648;
                                    float _650;
                                    float _652;
                                    float _654;
                                    float _656;
                                    float _658;
                                    float _660;
                                    for (;;)
                                    {
                                        float _769 = (_762 + _759) * 0.5;
                                        float _770 = (_763 + _760) * 0.5;
                                        float _771 = (_764 + _761) * 0.5;
                                        vec4 _779 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _769, cbSceneParam._m0[86u].y * _770), 0.0);
                                        float _781 = _779.x;
                                        bool _783 = (_771 - _781) < 0.0;
                                        _648 = _783 ? _769 : _759;
                                        _650 = _783 ? _770 : _760;
                                        _652 = _783 ? _771 : _761;
                                        _654 = _783 ? _762 : _769;
                                        _656 = _783 ? _763 : _770;
                                        _658 = _783 ? _764 : _771;
                                        _660 = _783 ? _781 : _765;
                                        uint _758 = _757 + 1u;
                                        if (_758 == _636)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _757 = _758;
                                            _759 = _648;
                                            _760 = _650;
                                            _761 = _652;
                                            _762 = _654;
                                            _763 = _656;
                                            _764 = _658;
                                            _765 = _660;
                                        }
                                    }
                                    _647 = _648;
                                    _649 = _650;
                                    _651 = _652;
                                    _653 = _654;
                                    _655 = _656;
                                    _657 = _658;
                                    _659 = _660;
                                }
                                else
                                {
                                    _647 = _613;
                                    _649 = _614;
                                    _651 = _615;
                                    _653 = _616;
                                    _655 = _617;
                                    _657 = _618;
                                    _659 = _607;
                                }
                                float _669 = cbPerScene._m0[28u].x * ((_647 * 2.0) + (-1.0));
                                float _670 = cbPerScene._m0[28u].y * (1.0 - (_649 * 2.0));
                                float _702 = fma(_659, cbPerScene._m0[27u].w, fma(_670, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _669) + cbPerScene._m0[27u].z);
                                float _703 = fma(_659, cbPerScene._m0[24u].w, fma(_670, cbPerScene._m0[24u].y, _669 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _702;
                                float _704 = fma(_659, cbPerScene._m0[25u].w, fma(_670, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _669) + cbPerScene._m0[25u].z) / _702;
                                vec4 _713 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _703, cbSceneParam._m0[87u].w * _704), 0.0);
                                float _718 = isnan(_454) ? 1.0 : (isnan(1.0) ? _454 : min(1.0, _454));
                                float _719 = 0.5 - _703;
                                float _720 = 0.5 - _704;
                                float _721 = _719 * 2.0;
                                float _722 = _720 * 2.0;
                                float _723 = _721 * _721;
                                float _724 = _722 * _722;
                                float _951 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
                                float _962 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
                                float _733 = inversesqrt(dot(vec2(_513, _514), vec2(_513, _514)));
                                float _739 = inversesqrt(dot(vec2(_721, _722), vec2(_721, _722)));
                                float _745 = dot(vec2((_719 * (-2.0)) * _739, (_720 * (-2.0)) * _739), vec2(_733 * _513, _733 * _514));
                                float _973 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
                                float _752 = ((1.0 - (isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0)))) * (1.0 - (isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0))))) * (4.0 - ((isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0))) * 2.0));
                                float _984 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
                                float _753 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
                                float _754 = _753 * _753;
                                frontier_phi_16_pred = _657;
                                frontier_phi_16_pred_1 = _655;
                                frontier_phi_16_pred_2 = _593;
                                frontier_phi_16_pred_3 = _653;
                                frontier_phi_16_pred_4 = _651;
                                frontier_phi_16_pred_5 = _649;
                                frontier_phi_16_pred_6 = _575;
                                frontier_phi_16_pred_7 = _552;
                                frontier_phi_16_pred_8 = isnan(_754) ? _718 : (isnan(_718) ? _754 : min(_718, _754));
                                frontier_phi_16_pred_9 = _713.z;
                                frontier_phi_16_pred_10 = _713.y;
                                frontier_phi_16_pred_11 = _713.x;
                                frontier_phi_16_pred_12 = _647;
                                frontier_phi_16_pred_13 = _595;
                                frontier_phi_16_pred_14 = _591;
                                frontier_phi_16_pred_15 = _619;
                            }
                            else
                            {
                                bool _638 = _620 > 0.0;
                                frontier_phi_16_pred = _615;
                                frontier_phi_16_pred_1 = _614;
                                frontier_phi_16_pred_2 = _638 ? _614 : _593;
                                frontier_phi_16_pred_3 = _613;
                                frontier_phi_16_pred_4 = _615 + _515;
                                frontier_phi_16_pred_5 = _614 + _514;
                                frontier_phi_16_pred_6 = _607;
                                frontier_phi_16_pred_7 = _573 + 1u;
                                frontier_phi_16_pred_8 = _572;
                                frontier_phi_16_pred_9 = _571;
                                frontier_phi_16_pred_10 = _570;
                                frontier_phi_16_pred_11 = _569;
                                frontier_phi_16_pred_12 = _613 + _513;
                                frontier_phi_16_pred_13 = _638 ? _615 : _595;
                                frontier_phi_16_pred_14 = _638 ? _613 : _591;
                                frontier_phi_16_pred_15 = uint(_638);
                            }
                            _588 = frontier_phi_16_pred;
                            _586 = frontier_phi_16_pred_1;
                            _594 = frontier_phi_16_pred_2;
                            _584 = frontier_phi_16_pred_3;
                            _582 = frontier_phi_16_pred_4;
                            _580 = frontier_phi_16_pred_5;
                            _576 = frontier_phi_16_pred_6;
                            _574 = frontier_phi_16_pred_7;
                            _563 = frontier_phi_16_pred_8;
                            _562 = frontier_phi_16_pred_9;
                            _560 = frontier_phi_16_pred_10;
                            _558 = frontier_phi_16_pred_11;
                            _578 = frontier_phi_16_pred_12;
                            _596 = frontier_phi_16_pred_13;
                            _592 = frontier_phi_16_pred_14;
                            _590 = frontier_phi_16_pred_15;
                            if (int(_574) < int(_552))
                            {
                                _569 = _558;
                                _570 = _560;
                                _571 = _562;
                                _572 = _563;
                                _573 = _574;
                                _575 = _576;
                                _577 = _578;
                                _579 = _580;
                                _581 = _582;
                                _583 = _584;
                                _585 = _586;
                                _587 = _588;
                                _589 = _590;
                                _591 = _592;
                                _593 = _594;
                                _595 = _596;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _557 = _558;
                        _559 = _560;
                        _561 = _562;
                        _332 = _563;
                    }
                    else
                    {
                        _557 = 0.0;
                        _559 = 0.0;
                        _561 = 0.0;
                        _332 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                    if ((isnan(_557) || isnan(_559)) || isnan(_561))
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = (_332 * _557) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = _332;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = (_332 * _561) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = (_332 * _559) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                }
                frontier_phi_3_4_ladder_5_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder;
                frontier_phi_3_4_ladder_5_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                frontier_phi_3_4_ladder_5_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                frontier_phi_3_4_ladder_5_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_5_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_5_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_5_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_5_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _325 = frontier_phi_3_4_ladder;
        _327 = frontier_phi_3_4_ladder_3;
        _329 = frontier_phi_3_4_ladder_2;
        _331 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _325;
    SV_Target.y = _327;
    SV_Target.z = _329;
    SV_Target.w = _331;
}


