#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 4, component = 3) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _866;
float _3278;
float _3279;
float _3280;
float _3281;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _233 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = 1.0 / _239;
    float _242 = _233.x * _240;
    float _243 = _240 * _233.y;
    float _244 = _240 * _233.z;
    vec4 _256 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _256.x * _240;
    vec4 _271 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3290 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))));
    float _288 = _271.z * _240;
    float _291 = fma(_287, _217, fma(_281, _209 * TANGENT.x, (_195 * _188) * _279));
    float _294 = fma(_287, _218, fma(_281, _209 * TANGENT.y, (_195 * _189) * _279));
    float _297 = fma(_287, _219, fma(_281, _209 * TANGENT.z, (_195 * _190) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3301 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _305 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _306 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3334 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3345 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3356 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _310 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _313 = gl_FragCoord.x * 0.125;
    float _315 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_313, _315)).w > TEXCOORD_9)))
    {
        discard_state = true;
    }
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    vec4 _398 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_313, _315));
    float _400 = _398.w;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _434 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3367 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _462 = 1.0 - _310;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _310;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _310;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _310;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_302, _303, _304), vec3(_394, _395, _396));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _302) - _394;
    float _497 = (_492 * _303) - _395;
    float _498 = (_492 * _304) - _396;
    float _502 = abs(dot(vec3(_394, _395, _396), vec3(_302, _303, _304)));
    float _3400 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_306);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _865;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _590 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _594 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _598 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _623 = _552 + _302;
        float _624 = _556 + _303;
        float _625 = _560 + _304;
        float _635 = fma(_625, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _623)) - _590;
        float _636 = fma(_625, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _623)) - _594;
        float _637 = fma(_625, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _623)) - _598;
        float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
        float _654 = ((_641 * _635) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_590 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_641 * _636) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_594 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _656 = ((_641 * _637) / cbModelParam._m0[34u].z) + ((((((_598 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_654, _655, _656), 0.0);
        float _693 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_659.x + (-0.5));
        float _695 = _693 * (_659.y + (-0.5));
        float _696 = _693 * (_659.z + (-0.5));
        float _703 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_666.x + (-0.5));
        float _705 = _703 * (_666.y + (-0.5));
        float _706 = _703 * (_666.z + (-0.5));
        float _713 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_673.x + (-0.5));
        float _715 = _713 * (_673.y + (-0.5));
        float _716 = _713 * (_673.z + (-0.5));
        float _723 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _724 = _723 * (_680.x + (-0.5));
        float _725 = _723 * (_680.y + (-0.5));
        float _726 = _723 * (_680.z + (-0.5));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = _694 * 0.5;
        float _731 = _704 * 0.5;
        float _732 = _714 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _747 = (dot(vec3(_302, _303, _304), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _757 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _759 = _758 * 2.0;
        float _763 = (1.0 - _758) / (_758 + 1.0);
        float _3448 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _773 = ((((1.0 - _764) * (_759 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_759 + 1.0))) + _764) * _727;
        float _774 = _695 * 0.5;
        float _775 = _705 * 0.5;
        float _776 = _715 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _790 = (dot(vec3(_302, _303, _304), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _799 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3481 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_801 + 1.0))) + _806) * _728;
        float _816 = _696 * 0.5;
        float _817 = _706 * 0.5;
        float _818 = _716 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_302, _303, _304), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3514 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_843 + 1.0))) + _848) * _729;
        _865 = _696;
        _867 = _695;
        _868 = _694;
        _869 = _706;
        _870 = _705;
        _871 = _704;
        _872 = _716;
        _873 = _715;
        _874 = _714;
        _875 = _729;
        _876 = _728;
        _877 = _727;
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
    }
    else
    {
        _865 = _866;
        _867 = _866;
        _868 = _866;
        _869 = _866;
        _870 = _866;
        _871 = _866;
        _872 = _866;
        _873 = _866;
        _874 = _866;
        _875 = _866;
        _876 = _866;
        _877 = _866;
        _878 = 0.0;
        _879 = 0.0;
        _880 = 0.0;
    }
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _906 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _910 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _914 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _937 = _552 + _302;
        float _938 = _556 + _303;
        float _939 = _560 + _304;
        float _949 = fma(_939, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937)) - _906;
        float _950 = fma(_939, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937)) - _910;
        float _951 = fma(_939, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937)) - _914;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_906 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_910 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[35u].z) + ((((((_914 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1005 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_972.x + (-0.5));
        float _1007 = _1005 * (_972.y + (-0.5));
        float _1008 = _1005 * (_972.z + (-0.5));
        float _1015 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_979.x + (-0.5));
        float _1017 = _1015 * (_979.y + (-0.5));
        float _1018 = _1015 * (_979.z + (-0.5));
        float _1025 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_986.x + (-0.5));
        float _1027 = _1025 * (_986.y + (-0.5));
        float _1028 = _1025 * (_986.z + (-0.5));
        float _1035 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_993.x + (-0.5));
        float _1037 = _1035 * (_993.y + (-0.5));
        float _1038 = _1035 * (_993.z + (-0.5));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = _1006 * 0.5;
        float _1043 = _1016 * 0.5;
        float _1044 = _1026 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_302, _303, _304), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3577 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1069 + 1.0))) + _1074) * _1039;
        float _1084 = _1007 * 0.5;
        float _1085 = _1017 * 0.5;
        float _1086 = _1027 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_302, _303, _304), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3610 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1111 + 1.0))) + _1116) * _1040;
        float _1126 = _1008 * 0.5;
        float _1127 = _1018 * 0.5;
        float _1128 = _1028 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_302, _303, _304), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3643 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1153 + 1.0))) + _1158) * _1041;
        _1175 = _1008;
        _1176 = _1007;
        _1177 = _1006;
        _1178 = _1018;
        _1179 = _1017;
        _1180 = _1016;
        _1181 = _1028;
        _1182 = _1027;
        _1183 = _1026;
        _1184 = _1041;
        _1185 = _1040;
        _1186 = _1039;
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _866;
        _1176 = _866;
        _1177 = _866;
        _1178 = _866;
        _1179 = _866;
        _1180 = _866;
        _1181 = _866;
        _1182 = _866;
        _1183 = _866;
        _1184 = _866;
        _1185 = _866;
        _1186 = _866;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1222 = fma(_1201, cbSceneParam._m0[89u].z, fma(_1200, cbSceneParam._m0[89u].y, _1199 * cbSceneParam._m0[89u].x));
    float _1225 = fma(_1201, cbSceneParam._m0[90u].z, fma(_1200, cbSceneParam._m0[90u].y, _1199 * cbSceneParam._m0[90u].x));
    float _1228 = fma(_1201, cbSceneParam._m0[91u].z, fma(_1200, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1199));
    float _1243 = _496 * 0.5;
    float _1244 = _497 * 0.5;
    float _1245 = _498 * 0.5;
    float _1246 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1249 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1252 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1286;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1259 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_865, _869, _872, _875));
        float _1263 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_867, _870, _873, _876));
        float _1267 = dot(vec4(_1243, _1244, _1245, 1.0), vec4(_868, _871, _874, _877));
        float _1274 = dot(vec4(cbModelParam._m0[39u]), vec4(_1243, _1244, _1245, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1297;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1288 = dot(vec4(cbModelParam._m0[40u]), vec4(_1243, _1244, _1245, 1.0));
        _1297 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1288) ? 0.0 : (isnan(0.0) ? _1288 : max(0.0, _1288))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1297 = 1.0;
    }
    float _1301 = (_1297 * cbModelParam._m0[1u].x) + (_1286 * (1.0 - cbModelParam._m0[1u].x));
    float _1311 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1312 = isnan(_1311) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1311 : min(cbModelParam._m0[25u].z, _1311));
    float _1394;
    float _1396;
    float _1398;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1361 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1365 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1369 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1372 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1375 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1378 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1406;
        if (_1372 > 0.0)
        {
            _1406 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1406 = frontier_phi_18_16_ladder;
        }
        float _1635;
        if (_1375 > 0.0)
        {
            _1635 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1635 = frontier_phi_27_23_ladder;
        }
        float _1892;
        if (_1378 > 0.0)
        {
            _1892 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1892 = frontier_phi_39_34_ladder;
        }
        float _1894 = isnan(_1635) ? _1406 : (isnan(_1406) ? _1635 : min(_1406, _1635));
        float _1895 = isnan(_1892) ? _1894 : (isnan(_1894) ? _1892 : min(_1894, _1892));
        float _1899 = (_1895 * _1372) + _1361;
        float _1900 = (_1895 * _1375) + _1365;
        float _1901 = (_1895 * _1378) + _1369;
        float _1902 = _1895 * 9.9999997473787516355514526367188e-05;
        float _1904 = (-1.0) - _1902;
        float _1906 = _1902 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1901 > _1906) || ((_1901 < _1904) || ((_1900 > _1906) || ((_1900 < _1904) || ((_1899 < _1904) || (_1899 > _1906))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1901, cbModelParam._m0[9u].z, fma(_1900, cbModelParam._m0[9u].y, _1899 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1901, cbModelParam._m0[10u].z, fma(_1900, cbModelParam._m0[10u].y, _1899 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1901, cbModelParam._m0[11u].z, fma(_1900, cbModelParam._m0[11u].y, _1899 * cbModelParam._m0[11u].x))), _1312);
            frontier_phi_17_39_ladder = _2029.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2029.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2029.x * cbModelParam._m0[1u].y;
        }
        _1394 = frontier_phi_17_39_ladder_2;
        _1396 = frontier_phi_17_39_ladder_1;
        _1398 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1312);
        _1394 = _1382.x * cbModelParam._m0[1u].y;
        _1396 = _1382.y * cbModelParam._m0[1u].y;
        _1398 = _1382.z * cbModelParam._m0[1u].y;
    }
    float _1402 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1402 : min(cbModelParam._m0[25u].w, _1402));
    float _1496;
    float _1498;
    float _1500;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1460 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1464 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1468 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1471 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1474 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1477 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1640;
        if (_1471 > 0.0)
        {
            _1640 = abs((1.0 - _1460) / _1471);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1460 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1640 = frontier_phi_29_25_ladder;
        }
        float _1919;
        if (_1474 > 0.0)
        {
            _1919 = abs((1.0 - _1464) / _1474);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1464 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1919 = frontier_phi_41_36_ladder;
        }
        float _2132;
        if (_1477 > 0.0)
        {
            _2132 = abs((1.0 - _1468) / _1477);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1468 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2132 = frontier_phi_50_47_ladder;
        }
        float _2134 = isnan(_1919) ? _1640 : (isnan(_1640) ? _1919 : min(_1640, _1919));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1471) + _1460;
        float _2140 = (_2135 * _1474) + _1464;
        float _2141 = (_2135 * _1477) + _1468;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2142;
        float _2145 = _2142 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2141 > _2145) || ((_2141 < _2143) || ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 < _2143) || (_2139 > _2145))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2141, cbModelParam._m0[17u].z, fma(_2140, cbModelParam._m0[17u].y, _2139 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2141, cbModelParam._m0[18u].z, fma(_2140, cbModelParam._m0[18u].y, _2139 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2141, cbModelParam._m0[19u].z, fma(_2140, cbModelParam._m0[19u].y, _2139 * cbModelParam._m0[19u].x))), _1403);
            frontier_phi_26_50_ladder = _2341.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2341.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2341.x * cbModelParam._m0[1u].z;
        }
        _1496 = frontier_phi_26_50_ladder_2;
        _1498 = frontier_phi_26_50_ladder_1;
        _1500 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1403);
        _1496 = _1480.x * cbModelParam._m0[1u].z;
        _1498 = _1480.y * cbModelParam._m0[1u].z;
        _1500 = _1480.z * cbModelParam._m0[1u].z;
    }
    float _1513 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1515 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1517 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1500 - _1398)) + _1398);
    float _1520 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1523 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1526 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, _1513 * cbSceneParam._m0[91u].x));
    vec4 _1534 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1536 = _1534.w;
    float _1548 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1536);
    float _1549 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1536);
    float _1550 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1536);
    uvec4 _1554 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1556 = _1554.x * 14u;
    uint _1557 = _1556 + 13u;
    float _1564 = _488 + (-1.0);
    float _1569 = (cbLight._m0[_1557].x * _1564) + 1.0;
    float _1570 = (cbLight._m0[_1557].y * _1564) + 1.0;
    float _1571 = (cbLight._m0[_1557].z * _1564) + 1.0;
    float _1572 = (cbLight._m0[_1557].w * _1564) + 1.0;
    uint _1573 = _1556 + 5u;
    float _1579 = isnan(1.0) ? _1570 : (isnan(_1570) ? 1.0 : min(_1570, 1.0));
    uint _1583 = _1556 + 4u;
    float _1593 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
    uint _1597 = _1556 | 1u;
    float _1608 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_302, _303, _304));
    float _1611 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_302, _303, _304));
    float _3779 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _3790 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1616 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.3183098733425140380859375;
    float _1618 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1625 = ((cbLight._m0[_1573].x * _1579) * _1618) + (((cbLight._m0[_1583].x * _1548) * _1593) * _1616);
    float _1626 = ((_1579 * cbLight._m0[_1573].y) * _1618) + (((cbLight._m0[_1583].y * _1549) * _1593) * _1616);
    float _1627 = ((_1579 * cbLight._m0[_1573].z) * _1618) + (((cbLight._m0[_1583].z * _1550) * _1593) * _1616);
    uvec4 _1632 = floatBitsToUint(cbLight._m0[_1556 + 12u]);
    bool _1634 = _1632.x == 0u;
    float _1645;
    float _1647;
    float _1649;
    if (_1634)
    {
        _1645 = _1625;
        _1647 = _1626;
        _1649 = _1627;
    }
    else
    {
        uint _1653 = _1556 + 6u;
        float _1669 = (dot(vec3(cbLight._m0[_1556 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1670 = _1669 * _1669;
        float _3801 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1672 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1645 = (((cbLight._m0[_1653].x * 0.3183098733425140380859375) * _1671) * _1672) + _1625;
        _1647 = (((cbLight._m0[_1653].y * 0.3183098733425140380859375) * _1671) * _1672) + _1626;
        _1649 = (((cbLight._m0[_1653].z * 0.3183098733425140380859375) * _1671) * _1672) + _1627;
    }
    bool _1652 = _1632.y == 0u;
    float _1690;
    float _1692;
    float _1694;
    if (_1652)
    {
        _1690 = _1645;
        _1692 = _1647;
        _1694 = _1649;
    }
    else
    {
        uint _1863 = _1556 + 7u;
        float _1879 = (dot(vec3(cbLight._m0[_1556 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _3817 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1882 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _1690 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1645;
        _1692 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1647;
        _1694 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1649;
    }
    uint _1697 = _1556 + 8u;
    float _1710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1556].w)) * _306) * 0.949999988079071044921875);
    float _1711 = _1710 * _1710;
    float _1712 = cbLight._m0[_1556].x + _394;
    float _1713 = cbLight._m0[_1556].y + _395;
    float _1714 = cbLight._m0[_1556].z + _396;
    float _1718 = inversesqrt(dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714)));
    float _1719 = _1718 * _1712;
    float _1720 = _1718 * _1713;
    float _1721 = _1718 * _1714;
    float _1722 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1556].xyz));
    float _3833 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1725 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1726 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1727 = dot(vec3(_302, _303, _304), vec3(_1719, _1720, _1721));
    float _3855 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1731 = dot(vec3(cbLight._m0[_1556].xyz), vec3(_1719, _1720, _1721));
    float _3866 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1735 = _1711 * _1711;
    float _1739 = ((_1730 * _1730) * (_1735 + (-1.0))) + 1.0;
    float _1747 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1748 = 0.959999978542327880859375 - _470;
    float _1750 = 0.959999978542327880859375 - _471;
    float _1751 = 0.959999978542327880859375 - _472;
    float _1758 = 1.0 - _1711;
    float _1769 = (0.5 / (((_1726 * ((_1725 * _1758) + _1711)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1758) + _1711) * _1725))) * _1725;
    float _3877 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1771 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1735 / ((_1739 * _1739) * 3.141590118408203125));
    uint _1785 = _1556 + 9u;
    float _1796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1597].w)) * _306) * 0.949999988079071044921875);
    float _1797 = _1796 * _1796;
    float _1798 = cbLight._m0[_1597].x + _394;
    float _1799 = cbLight._m0[_1597].y + _395;
    float _1800 = cbLight._m0[_1597].z + _396;
    float _1804 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
    float _1805 = _1804 * _1798;
    float _1806 = _1804 * _1799;
    float _1807 = _1804 * _1800;
    float _1808 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1597].xyz));
    float _3888 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1812 = dot(vec3(_302, _303, _304), vec3(_1805, _1806, _1807));
    float _3899 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1816 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_1805, _1806, _1807));
    float _3910 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = _1797 * _1797;
    float _1824 = ((_1815 * _1815) * (_1820 + (-1.0))) + 1.0;
    float _1831 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1838 = 1.0 - _1797;
    float _1848 = (0.5 / (((_1726 * ((_1811 * _1838) + _1797)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1838) + _1797) * _1811))) * _1811;
    float _3921 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1850 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1820 / ((_1824 * _1824) * 3.141590118408203125));
    float _1860 = (((((_1831 * _1748) + _473) * cbLight._m0[_1785].x) * _1850) * _1579) + ((((cbLight._m0[_1697].x * _1548) * ((_1747 * _1748) + _473)) * _1771) * _1593);
    float _1861 = (((((_1831 * _1750) + _475) * cbLight._m0[_1785].y) * _1850) * _1579) + ((((cbLight._m0[_1697].y * _1549) * ((_1747 * _1750) + _475)) * _1771) * _1593);
    float _1862 = (((((_1831 * _1751) + _476) * cbLight._m0[_1785].z) * _1850) * _1579) + ((((cbLight._m0[_1697].z * _1550) * ((_1747 * _1751) + _476)) * _1771) * _1593);
    float _1924;
    float _1926;
    float _1928;
    if (_1634)
    {
        _1924 = _1860;
        _1926 = _1861;
        _1928 = _1862;
    }
    else
    {
        uint _1930 = _1556 + 2u;
        uint _1934 = _1556 + 10u;
        float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _306) * 0.949999988079071044921875);
        float _1949 = _1948 * _1948;
        float _1950 = cbLight._m0[_1930].x + _394;
        float _1951 = cbLight._m0[_1930].y + _395;
        float _1952 = cbLight._m0[_1930].z + _396;
        float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
        float _1957 = _1956 * _1950;
        float _1958 = _1956 * _1951;
        float _1959 = _1956 * _1952;
        float _1960 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1930].xyz));
        float _3932 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1964 = dot(vec3(_302, _303, _304), vec3(_1957, _1958, _1959));
        float _3943 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1967 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1968 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_1957, _1958, _1959));
        float _3954 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1972 = _1949 * _1949;
        float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
        float _1983 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
        float _1990 = 1.0 - _1949;
        float _2000 = (0.5 / (((_1726 * ((_1963 * _1990) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _1990) + _1949) * _1963))) * _1963;
        float _3965 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2002 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
        float _2003 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
        _1924 = (((((_1983 * _1748) + _473) * cbLight._m0[_1934].x) * _2002) * _2003) + _1860;
        _1926 = (((((_1983 * _1750) + _475) * cbLight._m0[_1934].y) * _2002) * _2003) + _1861;
        _1928 = (((((_1983 * _1751) + _476) * cbLight._m0[_1934].z) * _2002) * _2003) + _1862;
    }
    float _2038;
    float _2040;
    float _2042;
    if (_1652)
    {
        _2038 = _1924;
        _2040 = _1926;
        _2042 = _1928;
    }
    else
    {
        uint _2049 = _1556 + 3u;
        uint _2053 = _1556 + 11u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _306) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _394;
        float _2070 = cbLight._m0[_2049].y + _395;
        float _2071 = cbLight._m0[_2049].z + _396;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2049].xyz));
        float _3981 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2083 = dot(vec3(_302, _303, _304), vec3(_2076, _2077, _2078));
        float _3992 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _4003 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * 5.0);
        float _2109 = 1.0 - _2068;
        float _2119 = (0.5 / (((_1726 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1726 * _2109) + _2068) * _2082))) * _2082;
        float _4014 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
        _2038 = (((((_2102 * _1748) + _473) * cbLight._m0[_2053].x) * _2121) * _2122) + _1924;
        _2040 = (((((_2102 * _1750) + _475) * cbLight._m0[_2053].y) * _2121) * _2122) + _1926;
        _2042 = (((((_2102 * _1751) + _476) * cbLight._m0[_2053].z) * _2121) * _2122) + _1928;
    }
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    if (_1554.y == 0u)
    {
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2197;
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2197;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2197;
        uvec4 _2212 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2213 = _2212.x;
        uint _2224 = uint((float(_2212.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2213))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2213)));
        float _2234 = (log2(_2200 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2235 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        uint _2238 = uint(isnan(14.0) ? _2235 : (isnan(_2235) ? 14.0 : min(_2235, 14.0)));
        uvec4 _2243 = texelFetch(g_lightClusterGridBuffer, int(((_2238 << 2u) + (_2224 << 6u)) >> 2u));
        uint _2244 = _2243.x;
        uint _2245 = _2212.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2245 >> 4u) & 15u)) + 4294967295u) & _2244) == 0u) || ((_2245 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            uint _2504 = 0u;
            uint _2513;
            bool _2514;
            for (;;)
            {
                _2513 = texelFetch(g_lightClassification, int((((_2238 << 5u) + (_2224 << 9u)) + (_2504 << 2u)) >> 2u)).x;
                _2514 = _2513 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2514)
                {
                    frontier_phi_67_pred = _2500;
                    frontier_phi_67_pred_1 = _2503;
                    frontier_phi_67_pred_2 = _2502;
                    frontier_phi_67_pred_3 = _2501;
                    frontier_phi_67_pred_4 = _2499;
                    frontier_phi_67_pred_5 = _2498;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2498;
                    _2644 = _2499;
                    _2645 = _2500;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2513;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2504 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _2198;
                        float _2710 = _2669.y - _2199;
                        float _2711 = _2669.z - _2200;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2719 = dot(vec3(_428, _431, _434), vec3(_2716, _2717, _2718));
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _4040 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2719) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _2198;
                        float _2745 = (-0.0) - _2199;
                        float _2746 = (-0.0) - _2200;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2761 = exp2(log2(1.0 / ((_2736 * 3.5) + 5.0)) * 0.25);
                        float _2762 = 1.0 - _504;
                        float _2769 = sqrt(1.0 - ((1.0 - (_2762 * _2762)) * (1.0 - (_2761 * _2761))));
                        float _2770 = _2769 * _2769;
                        float _2771 = _2770 * _2770;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_428, _431, _434), vec3(_2751, _2752, _2753));
                        float _4056 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2786 = dot(vec3(_428, _431, _434), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _4067 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2793 = ((_2789 * _2789) * (_2771 + (-1.0))) + 1.0;
                        float _2794 = _2729 * _2770;
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2719) + _2795;
                        float _4078 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2800 = 1.0 - _2770;
                        float _2810 = (0.5 / (((_2799 * ((_2785 * _2800) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2799 * _2800) + _2770) * _2785))) * _2799;
                        float _4089 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2821 = (((_2771 * 3.1415927410125732421875) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) / ((_2793 * _2793) * ((_2736 * 2.1991131305694580078125) + 3.141590118408203125))) * _2725;
                        _2573 = (_2740 * _2688.x) + _2646;
                        _2574 = (_2740 * _2688.y) + _2647;
                        _2575 = (_2740 * _2688.z) + _2648;
                        _2570 = (_2821 * _2705.x) + _2643;
                        _2571 = (_2821 * _2705.y) + _2644;
                        _2572 = (_2821 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2570;
                            _2644 = _2571;
                            _2645 = _2572;
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_67_pred = _2572;
                    frontier_phi_67_pred_1 = _2575;
                    frontier_phi_67_pred_2 = _2574;
                    frontier_phi_67_pred_3 = _2573;
                    frontier_phi_67_pred_4 = _2571;
                    frontier_phi_67_pred_5 = _2570;
                }
                _2351 = frontier_phi_67_pred;
                _2357 = frontier_phi_67_pred_1;
                _2355 = frontier_phi_67_pred_2;
                _2353 = frontier_phi_67_pred_3;
                _2349 = frontier_phi_67_pred_4;
                _2347 = frontier_phi_67_pred_5;
                uint _2505 = _2504 + 1u;
                if (_2505 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2498 = _2347;
                    _2499 = _2349;
                    _2500 = _2351;
                    _2501 = _2353;
                    _2502 = _2355;
                    _2503 = _2357;
                    _2504 = _2505;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        float _2476;
        if (((4294967295u << _2363) & _2244) == 0u)
        {
            _2466 = _2346;
            _2468 = _2348;
            _2470 = _2350;
            _2472 = _2352;
            _2474 = _2354;
            _2476 = _2356;
        }
        else
        {
            float _2491 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
            float _2492 = _2491 * _2198;
            float _2493 = _2491 * _2199;
            float _2494 = _2491 * _2200;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2467;
                float _2469;
                float _2471;
                float _2473;
                float _2475;
                float _2477;
                float _2626 = _2346;
                float _2627 = _2348;
                float _2628 = _2350;
                float _2629 = _2352;
                float _2630 = _2354;
                float _2631 = _2356;
                uint _2632 = _2363;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2238 << 5u) + (_2224 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2642)
                    {
                        frontier_phi_78_pred = _2631;
                        frontier_phi_78_pred_1 = _2630;
                        frontier_phi_78_pred_2 = _2629;
                        frontier_phi_78_pred_3 = _2628;
                        frontier_phi_78_pred_4 = _2627;
                        frontier_phi_78_pred_5 = _2626;
                    }
                    else
                    {
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _2848 = _2626;
                        float _2849 = _2627;
                        float _2850 = _2628;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        uint _2854 = _2641;
                        uint _2855;
                        vec4 _2880;
                        float _2881;
                        vec4 _2896;
                        vec3 _2908;
                        vec4 _2924;
                        vec4 _2940;
                        float _2987;
                        bool _2988;
                        for (;;)
                        {
                            uint _2865 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2854));
                            _2855 = (_2854 + 4294967295u) & _2854;
                            uint _2867 = _2865 * 40u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2881 = _2880.w;
                            uint _2883 = (_2865 * 40u) + 4u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2865 * 40u) + 8u;
                            _2908 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x));
                            uint _2911 = (_2865 * 40u) + 16u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2865 * 40u) + 20u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2865 * 40u) + 24u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2962 = (_2865 * 40u) + 28u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2987 = fma(_2200, _2975.z, fma(_2199, _2975.y, _2975.x * _2198)) + _2975.w;
                            _2988 = !((fma(_2200, _2956.z, fma(_2199, _2956.y, _2956.x * _2198)) + _2956.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2988)
                            {
                                float _3015 = _2880.x - _2198;
                                float _3016 = _2880.y - _2199;
                                float _3017 = _2880.z - _2200;
                                float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                                float _3021 = inversesqrt(_3018);
                                float _3022 = _3021 * _3015;
                                float _3023 = _3021 * _3016;
                                float _3024 = _3021 * _3017;
                                float _3028 = 1.0 - (_3018 / (_2881 * _2881));
                                float _4100 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                                float _3033 = sqrt(_3018) * _2896.w;
                                float _3035 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                                float _3036 = _3035 * _3035;
                                float _3039 = ((1.0 - _3036) * dot(vec3(_3022, _3023, _3024), vec3(_428, _431, _434))) + _3036;
                                float _3042 = _3033 * _3033;
                                float _3046 = (fma(_2200, _2924.z, fma(_2199, _2924.y, _2924.x * _2198)) + _2924.w) / _2987;
                                float _3047 = (fma(_2200, _2940.z, fma(_2199, _2940.y, _2940.x * _2198)) + _2940.w) / _2987;
                                float _3051 = 1.0 - dot(vec2(_3046, _3047), vec2(_3046, _3047));
                                float _4116 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3053 = _3052 * (((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3029) / ((_3042 * 0.699999988079071044921875) + 1.0));
                                float _3065 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                                float _3066 = 1.0 - _504;
                                float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                                float _3074 = _3073 * _3073;
                                float _3075 = _3074 * _3074;
                                float _3076 = _3022 - _2492;
                                float _3077 = _3023 - _2493;
                                float _3078 = _3024 - _2494;
                                float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                                float _3086 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2492, (-0.0) - _2493, (-0.0) - _2494));
                                float _4127 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3090 = dot(vec3(_428, _431, _434), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                                float _4138 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                                float _3098 = _3035 * _3074;
                                float _3099 = _3098 * _3098;
                                float _3105 = ((1.0 - _3099) * dot(vec3(_428, _431, _434), vec3(_3022, _3023, _3024))) + _3099;
                                float _4149 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3107 = 1.0 - _3074;
                                float _3117 = (0.5 / (((_3106 * ((_3089 * _3107) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3074) * _3089))) * _3106;
                                float _4160 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3127 = (_3052 * _3029) * (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) / ((_3097 * _3097) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3053 * _2896.z;
                                frontier_phi_84_pred_1 = _3053 * _2896.y;
                                frontier_phi_84_pred_2 = _3053 * _2896.x;
                                frontier_phi_84_pred_3 = _3127 * _2908.z;
                                frontier_phi_84_pred_4 = _3127 * _2908.y;
                                frontier_phi_84_pred_5 = _3127 * _2908.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3136 = frontier_phi_84_pred;
                            _3135 = frontier_phi_84_pred_1;
                            _3134 = frontier_phi_84_pred_2;
                            _3133 = frontier_phi_84_pred_3;
                            _3132 = frontier_phi_84_pred_4;
                            _3131 = frontier_phi_84_pred_5;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            if (_2855 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2855;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2840;
                        frontier_phi_78_pred_1 = _2839;
                        frontier_phi_78_pred_2 = _2838;
                        frontier_phi_78_pred_3 = _2837;
                        frontier_phi_78_pred_4 = _2836;
                        frontier_phi_78_pred_5 = _2835;
                    }
                    _2477 = frontier_phi_78_pred;
                    _2475 = frontier_phi_78_pred_1;
                    _2473 = frontier_phi_78_pred_2;
                    _2471 = frontier_phi_78_pred_3;
                    _2469 = frontier_phi_78_pred_4;
                    _2467 = frontier_phi_78_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2467;
                        _2627 = _2469;
                        _2628 = _2471;
                        _2629 = _2473;
                        _2630 = _2475;
                        _2631 = _2477;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2473;
                frontier_phi_59_60_ladder_1 = _2477;
                frontier_phi_59_60_ladder_2 = _2475;
                frontier_phi_59_60_ladder_3 = _2471;
                frontier_phi_59_60_ladder_4 = _2469;
                frontier_phi_59_60_ladder_5 = _2467;
            }
            else
            {
                frontier_phi_59_60_ladder = _2352;
                frontier_phi_59_60_ladder_1 = _2356;
                frontier_phi_59_60_ladder_2 = _2354;
                frontier_phi_59_60_ladder_3 = _2350;
                frontier_phi_59_60_ladder_4 = _2348;
                frontier_phi_59_60_ladder_5 = _2346;
            }
            _2466 = frontier_phi_59_60_ladder_5;
            _2468 = frontier_phi_59_60_ladder_4;
            _2470 = frontier_phi_59_60_ladder_3;
            _2472 = frontier_phi_59_60_ladder;
            _2474 = frontier_phi_59_60_ladder_2;
            _2476 = frontier_phi_59_60_ladder_1;
        }
        float _2481 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2256 = (_2481 * _2472) + _1690;
        _2258 = (_2481 * _2474) + _1692;
        _2260 = (_2481 * _2476) + _1694;
        _2262 = ((_2466 * _473) * _2481) + _2038;
        _2264 = ((_2468 * _475) * _2481) + _2040;
        _2266 = ((_2470 * _476) * _2481) + _2042;
    }
    else
    {
        _2256 = _1690;
        _2258 = _1692;
        _2260 = _1694;
        _2262 = _2038;
        _2264 = _2040;
        _2266 = _2042;
    }
    float _4176 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4187 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4198 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4209 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _2284 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2256 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _488))) + ((_2262 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1301)) * cbPerFrame._m0[3u].x);
    float _2285 = ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2258 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _488))) + ((_2264 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1301)) * cbPerFrame._m0[3u].x);
    float _2286 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2260 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _488))) + ((_2266 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1301)) * cbPerFrame._m0[3u].x);
    float _2291 = cbInstanceData._m0[_447 + 6u].w * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)));
    float _2296 = _406 / cbSceneParam._m0[86u].x;
    float _2297 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2311 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2313 = _2311.x;
    float _2314 = _2311.y;
    float _2315 = _2311.z;
    float _2316 = _2311.w;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2372 = _2371 / _334;
        float _2383 = _2372 * _387;
        float _2384 = _388 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2386 = _2372 * _389;
        float _2388 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2389 = _2388 + cbSceneParam._m0[79u].w;
        float _2390 = cbSceneParam._m0[79u].w - _2384;
        float _2396 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2386 * _2386));
        float _2399 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2396;
        float _2404 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2406 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2385 - _2388) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2389 > 0.0) ? exp2(_2404 * _2389) : (2.0 - exp2(_2406 * _2389))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2399;
        }
        else
        {
            float _2527 = 1.0 / cbSceneParam._m0[80u].x;
            float _2528 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : max(_2389, _2390));
            float _2529 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : min(_2389, _2390));
            float _2538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : min(_2528, 0.0));
            float _2539 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : min(_2529, 0.0));
            _2583 = ((abs(_2396 / _2385) * cbSceneParam._m0[80u].y) * ((((_2538 - _2539) * 2.0) - ((exp2(_2404 * (isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0)))) - exp2(_2404 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0))))) * _2527)) - ((exp2(_2406 * _2538) - exp2(_2406 * _2539)) * _2527))) + (_2399 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2296, _2297, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2316);
        _2408 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2313;
        _2410 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2314;
        _2412 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2315;
        _2414 = _2594 * _2316;
    }
    else
    {
        _2408 = _2313;
        _2410 = _2314;
        _2412 = _2315;
        _2414 = _2316;
    }
    bool _2621;
    vec4 _2424;
    vec4 _2446;
    float _2448;
    float _2452;
    float _2453;
    float _2454;
    float _2455;
    bool _2465;
    for (;;)
    {
        _2424 = cbMatDynParam._m0[0u];
        float _2426 = roundEven(_2424.y);
        bool _2427 = _2426 == 3.0;
        float _2428 = log2(_2414);
        float _2435 = exp2(_2428 * cbSceneParam._m0[78u].x) * _2284;
        float _2436 = exp2(_2428 * cbSceneParam._m0[78u].y) * _2285;
        float _2437 = exp2(_2428 * cbSceneParam._m0[78u].z) * _2286;
        float _2444 = _400 + (-0.5);
        _2446 = cbMtdParam._m0[1u];
        _2448 = _2446.y * _2444;
        float _2451 = (_2426 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2452 = _2451 * (_2427 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2408)));
        _2453 = _2451 * (_2427 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2410)));
        _2454 = _2451 * (_2427 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2412)));
        _2455 = _2444 * 0.999000012874603271484375;
        _2465 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2465)
        {
            if ((cbInstanceData._m0[_447 + 7u].x + _2455) < 0.5)
            {
                _2621 = true;
                break;
            }
        }
        uint _2562 = _449 + uint(_2424.w);
        if ((cbInstanceData._m0[_2562].w < 1.0) && ((cbInstanceData._m0[_2562].w + _2455) < 0.5))
        {
            _2621 = true;
            break;
        }
        if ((_2448 + _239) < _2446.x)
        {
            _2621 = true;
            break;
        }
        _2621 = false;
        break;
    }
    float _2826;
    if (_2621)
    {
        discard_state = true;
        _2826 = 0.0;
    }
    else
    {
        _2826 = _2291;
    }
    SV_Target.x = _2452;
    SV_Target.y = _2453;
    SV_Target.z = _2454;
    SV_Target.w = _2826;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2291;
    discard_exit();
}


