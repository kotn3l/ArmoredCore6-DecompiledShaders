#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 4, component = 3) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _868;
float _3539;
float _3540;
float _3541;
float _3542;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _235 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = 1.0 / _241;
    float _244 = _235.x * _242;
    float _245 = _242 * _235.y;
    float _246 = _242 * _235.z;
    vec4 _258 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _258.x * _242;
    vec4 _273 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3551 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _290 = _273.z * _242;
    float _293 = fma(_289, _219, fma(_283, _211 * TANGENT.x, (_197 * _190) * _281));
    float _296 = fma(_289, _220, fma(_283, _211 * TANGENT.y, (_197 * _191) * _281));
    float _299 = fma(_289, _221, fma(_283, _211 * TANGENT.z, (_197 * _192) * _281));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3562 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _307 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _308 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3595 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3606 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3617 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _312 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _315 = gl_FragCoord.x * 0.125;
    float _317 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_315, _317)).w > TEXCOORD_9)))
    {
        discard_state = true;
    }
    float _336 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    vec4 _400 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_315, _317));
    float _402 = _400.w;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _433 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _436 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3628 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _464 = 1.0 - _312;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _312;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _312;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _312;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD.z;
    float _491 = dot(vec3(_304, _305, _306), vec3(_396, _397, _398));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _304) - _396;
    float _499 = (_494 * _305) - _397;
    float _500 = (_494 * _306) - _398;
    float _504 = abs(dot(vec3(_396, _397, _398), vec3(_304, _305, _306)));
    float _3661 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_308);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _596 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _600 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _625 = _554 + _304;
        float _626 = _558 + _305;
        float _627 = _562 + _306;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(_304, _305, _306), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3709 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_304, _305, _306), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3742 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_304, _305, _306), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3775 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _869 = _697;
        _870 = _696;
        _871 = _708;
        _872 = _707;
        _873 = _706;
        _874 = _718;
        _875 = _717;
        _876 = _716;
        _877 = _731;
        _878 = _730;
        _879 = _729;
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _868;
        _869 = _868;
        _870 = _868;
        _871 = _868;
        _872 = _868;
        _873 = _868;
        _874 = _868;
        _875 = _868;
        _876 = _868;
        _877 = _868;
        _878 = _868;
        _879 = _868;
        _880 = 0.0;
        _881 = 0.0;
        _882 = 0.0;
    }
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _908 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _912 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _916 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _939 = _554 + _304;
        float _940 = _558 + _305;
        float _941 = _562 + _306;
        float _951 = fma(_941, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939)) - _908;
        float _952 = fma(_941, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939)) - _912;
        float _953 = fma(_941, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939)) - _916;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_908 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_912 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[35u].z) + ((((((_916 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1007 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_974.x + (-0.5));
        float _1009 = _1007 * (_974.y + (-0.5));
        float _1010 = _1007 * (_974.z + (-0.5));
        float _1017 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_981.x + (-0.5));
        float _1019 = _1017 * (_981.y + (-0.5));
        float _1020 = _1017 * (_981.z + (-0.5));
        float _1027 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_988.x + (-0.5));
        float _1029 = _1027 * (_988.y + (-0.5));
        float _1030 = _1027 * (_988.z + (-0.5));
        float _1037 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_995.x + (-0.5));
        float _1039 = _1037 * (_995.y + (-0.5));
        float _1040 = _1037 * (_995.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_304, _305, _306), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3838 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1071 + 1.0))) + _1076) * _1041;
        float _1086 = _1009 * 0.5;
        float _1087 = _1019 * 0.5;
        float _1088 = _1029 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_304, _305, _306), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3871 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1113 + 1.0))) + _1118) * _1042;
        float _1128 = _1010 * 0.5;
        float _1129 = _1020 * 0.5;
        float _1130 = _1030 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_304, _305, _306), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3904 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1155 + 1.0))) + _1160) * _1043;
        _1177 = _1010;
        _1178 = _1009;
        _1179 = _1008;
        _1180 = _1020;
        _1181 = _1019;
        _1182 = _1018;
        _1183 = _1030;
        _1184 = _1029;
        _1185 = _1028;
        _1186 = _1043;
        _1187 = _1042;
        _1188 = _1041;
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _868;
        _1178 = _868;
        _1179 = _868;
        _1180 = _868;
        _1181 = _868;
        _1182 = _868;
        _1183 = _868;
        _1184 = _868;
        _1185 = _868;
        _1186 = _868;
        _1187 = _868;
        _1188 = _868;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _880)) + _880;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1224 = fma(_1203, cbSceneParam._m0[89u].z, fma(_1202, cbSceneParam._m0[89u].y, _1201 * cbSceneParam._m0[89u].x));
    float _1227 = fma(_1203, cbSceneParam._m0[90u].z, fma(_1202, cbSceneParam._m0[90u].y, _1201 * cbSceneParam._m0[90u].x));
    float _1230 = fma(_1203, cbSceneParam._m0[91u].z, fma(_1202, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1201));
    float _1245 = _498 * 0.5;
    float _1246 = _499 * 0.5;
    float _1247 = _500 * 0.5;
    float _1248 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1251 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1254 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1288;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1261 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_867, _871, _874, _877));
        float _1265 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_869, _872, _875, _878));
        float _1269 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_870, _873, _876, _879));
        float _1276 = dot(vec4(cbModelParam._m0[39u]), vec4(_1245, _1246, _1247, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1299;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1290 = dot(vec4(cbModelParam._m0[40u]), vec4(_1245, _1246, _1247, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1303 = (_1299 * cbModelParam._m0[1u].x) + (_1288 * (1.0 - cbModelParam._m0[1u].x));
    float _1313 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1314 = isnan(_1313) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1313 : min(cbModelParam._m0[25u].z, _1313));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1363 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1367 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1371 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1374 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1380 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1408;
        if (_1374 > 0.0)
        {
            _1408 = abs((1.0 - _1363) / _1374);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1363 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1408 = frontier_phi_18_16_ladder;
        }
        float _1584;
        if (_1377 > 0.0)
        {
            _1584 = abs((1.0 - _1367) / _1377);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1367 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1584 = frontier_phi_27_23_ladder;
        }
        float _1880;
        if (_1380 > 0.0)
        {
            _1880 = abs((1.0 - _1371) / _1380);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1371 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1880 = frontier_phi_39_34_ladder;
        }
        float _1882 = isnan(_1584) ? _1408 : (isnan(_1408) ? _1584 : min(_1408, _1584));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1374) + _1363;
        float _1888 = (_1883 * _1377) + _1367;
        float _1889 = (_1883 * _1380) + _1371;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1890;
        float _1894 = _1890 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 > _1894) || ((_1888 < _1892) || ((_1887 < _1892) || (_1887 > _1894))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2034 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1889, cbModelParam._m0[9u].z, fma(_1888, cbModelParam._m0[9u].y, _1887 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1889, cbModelParam._m0[10u].z, fma(_1888, cbModelParam._m0[10u].y, _1887 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1889, cbModelParam._m0[11u].z, fma(_1888, cbModelParam._m0[11u].y, _1887 * cbModelParam._m0[11u].x))), _1314);
            frontier_phi_17_39_ladder = _2034.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2034.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2034.x * cbModelParam._m0[1u].y;
        }
        _1396 = frontier_phi_17_39_ladder_2;
        _1398 = frontier_phi_17_39_ladder_1;
        _1400 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1314);
        _1396 = _1384.x * cbModelParam._m0[1u].y;
        _1398 = _1384.y * cbModelParam._m0[1u].y;
        _1400 = _1384.z * cbModelParam._m0[1u].y;
    }
    float _1404 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1405 = isnan(_1404) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1404 : min(cbModelParam._m0[25u].w, _1404));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1462 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1466 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1470 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1473 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1479 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1589;
        if (_1473 > 0.0)
        {
            _1589 = abs((1.0 - _1462) / _1473);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1462 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1589 = frontier_phi_29_25_ladder;
        }
        float _1907;
        if (_1476 > 0.0)
        {
            _1907 = abs((1.0 - _1466) / _1476);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1466 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1907 = frontier_phi_41_36_ladder;
        }
        float _2245;
        if (_1479 > 0.0)
        {
            _2245 = abs((1.0 - _1470) / _1479);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1470 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2245 = frontier_phi_51_48_ladder;
        }
        float _2247 = isnan(_1907) ? _1589 : (isnan(_1589) ? _1907 : min(_1589, _1907));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1473) + _1462;
        float _2253 = (_2248 * _1476) + _1466;
        float _2254 = (_2248 * _1479) + _1470;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_26_51_ladder;
        float frontier_phi_26_51_ladder_1;
        float frontier_phi_26_51_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_26_51_ladder = 0.0;
            frontier_phi_26_51_ladder_1 = 0.0;
            frontier_phi_26_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2254, cbModelParam._m0[17u].z, fma(_2253, cbModelParam._m0[17u].y, _2252 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2254, cbModelParam._m0[18u].z, fma(_2253, cbModelParam._m0[18u].y, _2252 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2254, cbModelParam._m0[19u].z, fma(_2253, cbModelParam._m0[19u].y, _2252 * cbModelParam._m0[19u].x))), _1405);
            frontier_phi_26_51_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_26_51_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1498 = frontier_phi_26_51_ladder_2;
        _1500 = frontier_phi_26_51_ladder_1;
        _1502 = frontier_phi_26_51_ladder;
    }
    else
    {
        vec4 _1482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1405);
        _1498 = _1482.x * cbModelParam._m0[1u].z;
        _1500 = _1482.y * cbModelParam._m0[1u].z;
        _1502 = _1482.z * cbModelParam._m0[1u].z;
    }
    float _1515 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1517 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1500 - _1398)) + _1398);
    float _1519 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1502 - _1400)) + _1400);
    float _1522 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, _1515 * cbSceneParam._m0[91u].x));
    float _1563 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1575 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1576 = _1563 / _1575;
    float _1577 = _1567 / _1575;
    float _1578 = _1571 / _1575;
    float _1725;
    float _1726;
    float _1727;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1605 = ((uint(_1578 > cbSceneParam._m0[59u].y) + uint(_1578 > cbSceneParam._m0[59u].x)) + uint(_1578 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1606 = _1605 + 43u;
        uint _1614 = _1605 + 44u;
        uint _1622 = _1605 + 45u;
        uint _1630 = _1605 + 46u;
        float _1641 = fma(_1575, cbSceneParam._m0[_1606].w, fma(_1571, cbSceneParam._m0[_1606].z, fma(_1567, cbSceneParam._m0[_1606].y, _1563 * cbSceneParam._m0[_1606].x)));
        float _1645 = fma(_1575, cbSceneParam._m0[_1614].w, fma(_1571, cbSceneParam._m0[_1614].z, fma(_1567, cbSceneParam._m0[_1614].y, _1563 * cbSceneParam._m0[_1614].x)));
        float _1653 = fma(_1575, cbSceneParam._m0[_1630].w, fma(_1571, cbSceneParam._m0[_1630].z, fma(_1567, cbSceneParam._m0[_1630].y, _1563 * cbSceneParam._m0[_1630].x)));
        float _1658 = cbSceneParam._m0[33u].z * _1653;
        float _1660 = cbSceneParam._m0[33u].w * _1653;
        float _1663 = fma(_1575, cbSceneParam._m0[_1622].w, fma(_1571, cbSceneParam._m0[_1622].z, fma(_1567, cbSceneParam._m0[_1622].y, _1563 * cbSceneParam._m0[_1622].x))) / _1653;
        float _1711 = (cbSceneParam._m0[33u].x - sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578))) * cbSceneParam._m0[33u].y;
        float _4030 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1718 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1658 + _1641) / _1653, (_1660 + _1645) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1660 + _1641) / _1653, (_1645 - _1658) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 - _1658) / _1653, (_1645 - _1660) / _1653), _1663), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 - _1660) / _1653, (_1658 + _1645) / _1653), _1663), 0.0)).x), vec4(0.25)));
        _1725 = 1.0 - (_1718 * cbSceneParam._m0[34u].x);
        _1726 = 1.0 - (_1718 * cbSceneParam._m0[34u].y);
        _1727 = 1.0 - (_1718 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1725 = 1.0;
        _1726 = 1.0;
        _1727 = 1.0;
    }
    float _1791;
    float _1793;
    float _1795;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1779 = fma(_1575, cbSceneParam._m0[63u].w, fma(_1571, cbSceneParam._m0[63u].z, fma(_1567, cbSceneParam._m0[63u].y, _1563 * cbSceneParam._m0[63u].x)));
        float _1780 = fma(_1575, cbSceneParam._m0[60u].w, fma(_1571, cbSceneParam._m0[60u].z, fma(_1567, cbSceneParam._m0[60u].y, _1563 * cbSceneParam._m0[60u].x))) / _1779;
        float _1781 = fma(_1575, cbSceneParam._m0[61u].w, fma(_1571, cbSceneParam._m0[61u].z, fma(_1567, cbSceneParam._m0[61u].y, _1563 * cbSceneParam._m0[61u].x))) / _1779;
        float frontier_phi_38_37_ladder;
        float frontier_phi_38_37_ladder_1;
        float frontier_phi_38_37_ladder_2;
        if ((((_1780 >= cbSceneParam._m0[64u].x) && (_1781 >= cbSceneParam._m0[64u].y)) && (_1780 <= cbSceneParam._m0[64u].z)) && (_1781 <= cbSceneParam._m0[64u].w))
        {
            float _1920 = fma(_1575, cbSceneParam._m0[62u].w, fma(_1571, cbSceneParam._m0[62u].z, fma(_1567, cbSceneParam._m0[62u].y, _1563 * cbSceneParam._m0[62u].x))) / _1779;
            float _1924 = isnan(cbSceneParam._m0[41u].w) ? _1920 : (isnan(_1920) ? cbSceneParam._m0[41u].w : max(_1920, cbSceneParam._m0[41u].w));
            float _1967 = (cbSceneParam._m0[33u].x - sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578))) * cbSceneParam._m0[33u].y;
            float _4046 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
            float _1974 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1780, cbSceneParam._m0[33u].w + _1781), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1780, _1781 - cbSceneParam._m0[33u].z), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1780 - cbSceneParam._m0[33u].z, _1781 - cbSceneParam._m0[33u].w), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1780 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1781), _1924), 0.0)).x), vec4(0.25)));
            float _1978 = 1.0 - (_1974 * cbSceneParam._m0[34u].x);
            float _1979 = 1.0 - (_1974 * cbSceneParam._m0[34u].y);
            float _1980 = 1.0 - (_1974 * cbSceneParam._m0[34u].z);
            frontier_phi_38_37_ladder = isnan(_1979) ? _1726 : (isnan(_1726) ? _1979 : min(_1726, _1979));
            frontier_phi_38_37_ladder_1 = isnan(_1978) ? _1725 : (isnan(_1725) ? _1978 : min(_1725, _1978));
            frontier_phi_38_37_ladder_2 = isnan(_1980) ? _1727 : (isnan(_1727) ? _1980 : min(_1727, _1980));
        }
        else
        {
            frontier_phi_38_37_ladder = _1726;
            frontier_phi_38_37_ladder_1 = _1725;
            frontier_phi_38_37_ladder_2 = _1727;
        }
        _1791 = frontier_phi_38_37_ladder_1;
        _1793 = frontier_phi_38_37_ladder;
        _1795 = frontier_phi_38_37_ladder_2;
    }
    else
    {
        _1791 = _1725;
        _1793 = _1726;
        _1795 = _1727;
    }
    uvec4 _1800 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1802 = _1800.x * 14u;
    uint _1803 = _1802 + 13u;
    float _1810 = _490 + (-1.0);
    float _1815 = (cbLight._m0[_1803].x * _1810) + 1.0;
    float _1816 = (cbLight._m0[_1803].y * _1810) + 1.0;
    float _1817 = (cbLight._m0[_1803].z * _1810) + 1.0;
    float _1818 = (cbLight._m0[_1803].w * _1810) + 1.0;
    uint _1819 = _1802 + 5u;
    float _1825 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1829 = _1802 + 4u;
    float _1839 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1843 = _1802 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_304, _305, _306));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_304, _305, _306));
    float _4082 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _4093 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1819].x * _1825) * _1864) + (((cbLight._m0[_1829].x * _1791) * _1839) * _1862);
    float _1872 = ((_1825 * cbLight._m0[_1819].y) * _1864) + (((cbLight._m0[_1829].y * _1793) * _1839) * _1862);
    float _1873 = ((_1825 * cbLight._m0[_1819].z) * _1864) + (((cbLight._m0[_1829].z * _1795) * _1839) * _1862);
    uvec4 _1877 = floatBitsToUint(cbLight._m0[_1802 + 12u]);
    bool _1879 = _1877.x == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1879)
    {
        _1981 = _1871;
        _1983 = _1872;
        _1985 = _1873;
    }
    else
    {
        uint _1989 = _1802 + 6u;
        float _2005 = (dot(vec3(cbLight._m0[_1802 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _4104 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2008 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1981 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1871;
        _1983 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1872;
        _1985 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1873;
    }
    bool _1988 = _1877.y == 0u;
    float _2043;
    float _2045;
    float _2047;
    if (_1988)
    {
        _2043 = _1981;
        _2045 = _1983;
        _2047 = _1985;
    }
    else
    {
        uint _2216 = _1802 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1802 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4120 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2235 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2043 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _1981;
        _2045 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _1983;
        _2047 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _1985;
    }
    uint _2050 = _1802 + 8u;
    float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _308) * 0.949999988079071044921875);
    float _2064 = _2063 * _2063;
    float _2065 = cbLight._m0[_1802].x + _396;
    float _2066 = cbLight._m0[_1802].y + _397;
    float _2067 = cbLight._m0[_1802].z + _398;
    float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
    float _2072 = _2071 * _2065;
    float _2073 = _2071 * _2066;
    float _2074 = _2071 * _2067;
    float _2075 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1802].xyz));
    float _4136 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2079 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2080 = dot(vec3(_304, _305, _306), vec3(_2072, _2073, _2074));
    float _4158 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_2072, _2073, _2074));
    float _4169 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2064 * _2064;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0);
    float _2101 = 0.959999978542327880859375 - _472;
    float _2103 = 0.959999978542327880859375 - _473;
    float _2104 = 0.959999978542327880859375 - _474;
    float _2111 = 1.0 - _2064;
    float _2122 = (0.5 / (((_2079 * ((_2078 * _2111) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2111) + _2064) * _2078))) * _2078;
    float _4180 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    uint _2138 = _1802 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _308) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1843].x + _396;
    float _2152 = cbLight._m0[_1843].y + _397;
    float _2153 = cbLight._m0[_1843].z + _398;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1843].xyz));
    float _4191 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2165 = dot(vec3(_304, _305, _306), vec3(_2158, _2159, _2160));
    float _4202 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2158, _2159, _2160));
    float _4213 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0);
    float _2191 = 1.0 - _2150;
    float _2201 = (0.5 / (((_2079 * ((_2164 * _2191) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2191) + _2150) * _2164))) * _2164;
    float _4224 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2213 = (((((_2184 * _2101) + _475) * cbLight._m0[_2138].x) * _2203) * _1825) + ((((cbLight._m0[_2050].x * _1791) * ((_2100 * _2101) + _475)) * _2124) * _1839);
    float _2214 = (((((_2184 * _2103) + _477) * cbLight._m0[_2138].y) * _2203) * _1825) + ((((cbLight._m0[_2050].y * _1793) * ((_2100 * _2103) + _477)) * _2124) * _1839);
    float _2215 = (((((_2184 * _2104) + _478) * cbLight._m0[_2138].z) * _2203) * _1825) + ((((cbLight._m0[_2050].z * _1795) * ((_2100 * _2104) + _478)) * _2124) * _1839);
    float _2271;
    float _2273;
    float _2275;
    if (_1879)
    {
        _2271 = _2213;
        _2273 = _2214;
        _2275 = _2215;
    }
    else
    {
        uint _2277 = _1802 + 2u;
        uint _2281 = _1802 + 10u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _308) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _396;
        float _2298 = cbLight._m0[_2277].y + _397;
        float _2299 = cbLight._m0[_2277].z + _398;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2277].xyz));
        float _4235 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2311 = dot(vec3(_304, _305, _306), vec3(_2304, _2305, _2306));
        float _4246 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4257 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
        float _2337 = 1.0 - _2296;
        float _2347 = (0.5 / (((_2079 * ((_2310 * _2337) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2337) + _2296) * _2310))) * _2310;
        float _4268 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2271 = (((((_2330 * _2101) + _475) * cbLight._m0[_2281].x) * _2349) * _2350) + _2213;
        _2273 = (((((_2330 * _2103) + _477) * cbLight._m0[_2281].y) * _2349) * _2350) + _2214;
        _2275 = (((((_2330 * _2104) + _478) * cbLight._m0[_2281].z) * _2349) * _2350) + _2215;
    }
    float _2381;
    float _2383;
    float _2385;
    if (_1988)
    {
        _2381 = _2271;
        _2383 = _2273;
        _2385 = _2275;
    }
    else
    {
        uint _2392 = _1802 + 3u;
        uint _2396 = _1802 + 11u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _308) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _396;
        float _2413 = cbLight._m0[_2392].y + _397;
        float _2414 = cbLight._m0[_2392].z + _398;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2392].xyz));
        float _4284 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2426 = dot(vec3(_304, _305, _306), vec3(_2419, _2420, _2421));
        float _4295 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4306 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2079 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2079 * _2452) + _2411) * _2425))) * _2425;
        float _4317 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2381 = (((((_2445 * _2101) + _475) * cbLight._m0[_2396].x) * _2464) * _2465) + _2271;
        _2383 = (((((_2445 * _2103) + _477) * cbLight._m0[_2396].y) * _2464) * _2465) + _2273;
        _2385 = (((((_2445 * _2104) + _478) * cbLight._m0[_2396].z) * _2464) * _2465) + _2275;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1800.y == 0u)
    {
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.x;
        uint _2498 = uint((float(_2486.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2487))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2487)));
        float _2508 = (log2(_1578 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2509 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        uint _2512 = uint(isnan(14.0) ? _2509 : (isnan(_2509) ? 14.0 : min(_2509, 14.0)));
        uvec4 _2517 = texelFetch(g_lightClusterGridBuffer, int(((_2512 << 2u) + (_2498 << 6u)) >> 2u));
        uint _2518 = _2517.x;
        uint _2519 = _2486.z;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((((1u << ((_2519 >> 4u) & 15u)) + 4294967295u) & _2518) == 0u) || ((_2519 & 240u) == 0u))
        {
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
        }
        else
        {
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2767)
                {
                    frontier_phi_72_pred = _2756;
                    frontier_phi_72_pred_1 = _2755;
                    frontier_phi_72_pred_2 = _2754;
                    frontier_phi_72_pred_3 = _2753;
                    frontier_phi_72_pred_4 = _2752;
                    frontier_phi_72_pred_5 = _2751;
                }
                else
                {
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    uint _2902;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2766;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2906 = uint(findLSB(_2902)) + (_2757 << 5u);
                        uint _2903 = (_2902 + 4294967295u) & _2902;
                        uint _2908 = _2906 * 48u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2928 = (_2906 * 48u) + 4u;
                        vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2947 = (_2906 * 48u) + 8u;
                        vec3 _2958 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x));
                        float _2962 = _2922.x - _1576;
                        float _2963 = _2922.y - _1577;
                        float _2964 = _2922.z - _1578;
                        float _2965 = dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964));
                        float _2968 = inversesqrt(_2965);
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2972 = dot(vec3(_430, _433, _436), vec3(_2969, _2970, _2971));
                        float _2977 = 1.0 - (_2965 * _2922.w);
                        float _4343 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _2979 = sqrt(_2965) * _2941.w;
                        float _2982 = 1.39999997615814208984375 / (_2979 + 1.39999997615814208984375);
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2972) + _2983;
                        float _2989 = _2979 * _2979;
                        float _2993 = ((isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))) * _2978) / ((_2989 * 0.699999988079071044921875) + 1.0);
                        float _2997 = (-0.0) - _1576;
                        float _2998 = (-0.0) - _1577;
                        float _2999 = (-0.0) - _1578;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3013 = exp2(log2(1.0 / ((_2989 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _506;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3004 + _2969;
                        float _3025 = _3005 + _2970;
                        float _3026 = _3006 + _2971;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_430, _433, _436), vec3(_3004, _3005, _3006));
                        float _4359 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3038 = dot(vec3(_430, _433, _436), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4370 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2982 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2972) + _3047;
                        float _4381 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4392 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3045 * _3045) * ((_2989 * 2.1991131305694580078125) + 3.141590118408203125))) * _2978;
                        _2826 = (_2993 * _2941.x) + _2899;
                        _2827 = (_2993 * _2941.y) + _2900;
                        _2828 = (_2993 * _2941.z) + _2901;
                        _2823 = (_3073 * _2958.x) + _2896;
                        _2824 = (_3073 * _2958.y) + _2897;
                        _2825 = (_3073 * _2958.z) + _2898;
                        if (_2903 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2903;
                        }
                    }
                    frontier_phi_72_pred = _2828;
                    frontier_phi_72_pred_1 = _2827;
                    frontier_phi_72_pred_2 = _2826;
                    frontier_phi_72_pred_3 = _2825;
                    frontier_phi_72_pred_4 = _2824;
                    frontier_phi_72_pred_5 = _2823;
                }
                _2610 = frontier_phi_72_pred;
                _2608 = frontier_phi_72_pred_1;
                _2606 = frontier_phi_72_pred_2;
                _2604 = frontier_phi_72_pred_3;
                _2602 = frontier_phi_72_pred_4;
                _2600 = frontier_phi_72_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2600;
                    _2752 = _2602;
                    _2753 = _2604;
                    _2754 = _2606;
                    _2755 = _2608;
                    _2756 = _2610;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
        }
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.z;
        uint _2616 = (_2614 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2616) & _2518) == 0u)
        {
            _2719 = _2599;
            _2721 = _2601;
            _2723 = _2603;
            _2725 = _2605;
            _2727 = _2607;
            _2729 = _2609;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578)));
            float _2745 = _2744 * _1576;
            float _2746 = _2744 * _1577;
            float _2747 = _2744 * _1578;
            float frontier_phi_64_65_ladder;
            float frontier_phi_64_65_ladder_1;
            float frontier_phi_64_65_ladder_2;
            float frontier_phi_64_65_ladder_3;
            float frontier_phi_64_65_ladder_4;
            float frontier_phi_64_65_ladder_5;
            if (_2616 < ((_2614 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2879 = _2599;
                float _2880 = _2601;
                float _2881 = _2603;
                float _2882 = _2605;
                float _2883 = _2607;
                float _2884 = _2609;
                uint _2885 = _2616;
                uint _2894;
                bool _2895;
                for (;;)
                {
                    _2894 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                    _2895 = _2894 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2895)
                    {
                        frontier_phi_83_pred = _2883;
                        frontier_phi_83_pred_1 = _2882;
                        frontier_phi_83_pred_2 = _2881;
                        frontier_phi_83_pred_3 = _2880;
                        frontier_phi_83_pred_4 = _2879;
                        frontier_phi_83_pred_5 = _2884;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3100 = _2879;
                        float _3101 = _2880;
                        float _3102 = _2881;
                        float _3103 = _2882;
                        float _3104 = _2883;
                        float _3105 = _2884;
                        uint _3106 = _2894;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3176;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3117 = ((_2885 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3163 = (_3117 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3117 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3117 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3117 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_1578, _3227.z, fma(_1577, _3227.y, _3227.x * _1576)) + _3227.w;
                            _3240 = !((fma(_1578, _3208.z, fma(_1577, _3208.y, _3208.x * _1576)) + _3208.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3132.x - _1576;
                                float _3268 = _3132.y - _1577;
                                float _3269 = _3132.z - _1578;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3133 * _3133));
                                float _4403 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3285 = sqrt(_3270) * _3148.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_430, _433, _436))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_1578, _3176.z, fma(_1577, _3176.y, _3176.x * _1576)) + _3176.w) / _3239;
                                float _3299 = (fma(_1578, _3192.z, fma(_1577, _3192.y, _3192.x * _1576)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4419 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _506;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2745;
                                float _3329 = _3275 - _2746;
                                float _3330 = _3276 - _2747;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4430 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3342 = dot(vec3(_430, _433, _436), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4441 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_430, _433, _436), vec3(_3274, _3275, _3276))) + _3351;
                                float _4452 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4463 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3305 * _3148.y;
                                frontier_phi_89_pred_1 = _3305 * _3148.x;
                                frontier_phi_89_pred_2 = _3379 * _3160.z;
                                frontier_phi_89_pred_3 = _3379 * _3160.y;
                                frontier_phi_89_pred_4 = _3379 * _3160.x;
                                frontier_phi_89_pred_5 = _3305 * _3148.z;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3387 = frontier_phi_89_pred;
                            _3386 = frontier_phi_89_pred_1;
                            _3385 = frontier_phi_89_pred_2;
                            _3384 = frontier_phi_89_pred_3;
                            _3383 = frontier_phi_89_pred_4;
                            _3388 = frontier_phi_89_pred_5;
                            _3090 = _3386 + _3103;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3087 = _3383 + _3100;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _3091;
                        frontier_phi_83_pred_1 = _3090;
                        frontier_phi_83_pred_2 = _3089;
                        frontier_phi_83_pred_3 = _3088;
                        frontier_phi_83_pred_4 = _3087;
                        frontier_phi_83_pred_5 = _3092;
                    }
                    _2728 = frontier_phi_83_pred;
                    _2726 = frontier_phi_83_pred_1;
                    _2724 = frontier_phi_83_pred_2;
                    _2722 = frontier_phi_83_pred_3;
                    _2720 = frontier_phi_83_pred_4;
                    _2730 = frontier_phi_83_pred_5;
                    uint _2886 = _2885 + 1u;
                    if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2879 = _2720;
                        _2880 = _2722;
                        _2881 = _2724;
                        _2882 = _2726;
                        _2883 = _2728;
                        _2884 = _2730;
                        _2885 = _2886;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_64_65_ladder = _2730;
                frontier_phi_64_65_ladder_1 = _2726;
                frontier_phi_64_65_ladder_2 = _2728;
                frontier_phi_64_65_ladder_3 = _2722;
                frontier_phi_64_65_ladder_4 = _2720;
                frontier_phi_64_65_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_64_65_ladder = _2609;
                frontier_phi_64_65_ladder_1 = _2605;
                frontier_phi_64_65_ladder_2 = _2607;
                frontier_phi_64_65_ladder_3 = _2601;
                frontier_phi_64_65_ladder_4 = _2599;
                frontier_phi_64_65_ladder_5 = _2603;
            }
            _2719 = frontier_phi_64_65_ladder_4;
            _2721 = frontier_phi_64_65_ladder_3;
            _2723 = frontier_phi_64_65_ladder_5;
            _2725 = frontier_phi_64_65_ladder_1;
            _2727 = frontier_phi_64_65_ladder_2;
            _2729 = frontier_phi_64_65_ladder;
        }
        float _2734 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2530 = (_2734 * _2725) + _2043;
        _2532 = (_2734 * _2727) + _2045;
        _2534 = (_2734 * _2729) + _2047;
        _2536 = ((_2719 * _475) * _2734) + _2381;
        _2538 = ((_2721 * _477) * _2734) + _2383;
        _2540 = ((_2723 * _478) * _2734) + _2385;
    }
    else
    {
        _2530 = _2043;
        _2532 = _2045;
        _2534 = _2047;
        _2536 = _2381;
        _2538 = _2383;
        _2540 = _2385;
    }
    float _4479 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4490 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4501 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4512 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _2558 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2530 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490))) + ((_2536 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2559 = ((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2532 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490))) + ((_2538 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2560 = ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2534 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _490))) + ((_2540 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _2565 = cbInstanceData._m0[_449 + 6u].w * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)));
    float _2570 = _408 / cbSceneParam._m0[86u].x;
    float _2571 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2585 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, (log2((isnan(cbSceneParam._m0[77u].w) ? _336 : (isnan(_336) ? cbSceneParam._m0[77u].w : min(_336, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2587 = _2585.x;
    float _2588 = _2585.y;
    float _2589 = _2585.z;
    float _2590 = _2585.w;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_336 > cbSceneParam._m0[78u].w)
    {
        float _2624 = isnan(_336) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _336 : min(cbSceneParam._m0[80u].w, _336));
        float _2625 = _2624 / _336;
        float _2636 = _2625 * _389;
        float _2637 = _390 * _2625;
        float _2638 = (-0.0) - _2637;
        float _2639 = _2625 * _391;
        float _2641 = (cbSceneParam._m0[77u].w * _2638) / _2624;
        float _2642 = _2641 + cbSceneParam._m0[79u].w;
        float _2643 = cbSceneParam._m0[79u].w - _2637;
        float _2649 = sqrt(((_2636 * _2636) + (_2637 * _2637)) + (_2639 * _2639));
        float _2652 = (1.0 - (cbSceneParam._m0[77u].w / _2624)) * _2649;
        float _2657 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2659 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2638 - _2641) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2642 > 0.0) ? exp2(_2657 * _2642) : (2.0 - exp2(_2659 * _2642))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2652;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : max(_2642, _2643));
            float _2782 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : min(_2642, _2643));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2836 = ((abs(_2649 / _2638) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2657 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2657 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2659 * _2791) - exp2(_2659 * _2792)) * _2780))) + (_2652 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2570, _2571, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2590);
        _2661 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2587;
        _2663 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2588;
        _2665 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2589;
        _2667 = _2847 * _2590;
    }
    else
    {
        _2661 = _2587;
        _2663 = _2588;
        _2665 = _2589;
        _2667 = _2590;
    }
    bool _2874;
    vec4 _2677;
    vec4 _2699;
    float _2701;
    float _2705;
    float _2706;
    float _2707;
    float _2708;
    bool _2718;
    for (;;)
    {
        _2677 = cbMatDynParam._m0[0u];
        float _2679 = roundEven(_2677.y);
        bool _2680 = _2679 == 3.0;
        float _2681 = log2(_2667);
        float _2688 = exp2(_2681 * cbSceneParam._m0[78u].x) * _2558;
        float _2689 = exp2(_2681 * cbSceneParam._m0[78u].y) * _2559;
        float _2690 = exp2(_2681 * cbSceneParam._m0[78u].z) * _2560;
        float _2697 = _402 + (-0.5);
        _2699 = cbMtdParam._m0[1u];
        _2701 = _2699.y * _2697;
        float _2704 = (_2679 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2705 = _2704 * (_2680 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2661)));
        _2706 = _2704 * (_2680 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2663)));
        _2707 = _2704 * (_2680 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2665)));
        _2708 = _2697 * 0.999000012874603271484375;
        _2718 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2718)
        {
            if ((cbInstanceData._m0[_449 + 7u].x + _2708) < 0.5)
            {
                _2874 = true;
                break;
            }
        }
        uint _2815 = _451 + uint(_2677.w);
        if ((cbInstanceData._m0[_2815].w < 1.0) && ((cbInstanceData._m0[_2815].w + _2708) < 0.5))
        {
            _2874 = true;
            break;
        }
        if ((_2701 + _241) < _2699.x)
        {
            _2874 = true;
            break;
        }
        _2874 = false;
        break;
    }
    float _3078;
    if (_2874)
    {
        discard_state = true;
        _3078 = 0.0;
    }
    else
    {
        _3078 = _2565;
    }
    SV_Target.x = _2705;
    SV_Target.y = _2706;
    SV_Target.z = _2707;
    SV_Target.w = _3078;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2565;
    discard_exit();
}


