#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 4, component = 3) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _862;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _233 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = 1.0 / _239;
    float _242 = _233.x * _240;
    float _243 = _240 * _233.y;
    float _244 = _240 * _233.z;
    vec4 _256 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _256.x * _240;
    vec4 _271 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _279 = (_271.x * 2.0) + (-1.0);
    float _281 = (_271.y * 2.0) + (-1.0);
    float _282 = dot(vec2(_279, _281), vec2(_279, _281));
    float _3235 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))));
    float _288 = _271.z * _240;
    float _291 = fma(_287, _217, fma(_281, _209 * TANGENT.x, (_195 * _188) * _279));
    float _294 = fma(_287, _218, fma(_281, _209 * TANGENT.y, (_195 * _189) * _279));
    float _297 = fma(_287, _219, fma(_281, _209 * TANGENT.z, (_195 * _190) * _279));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3246 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _305 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _3257 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _306 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3279 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3290 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3301 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _310 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w > TEXCOORD_9)))
    {
        discard_state = true;
    }
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _377 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _387 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _377);
    float _388 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _377);
    float _389 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _377);
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _387 * _393;
    float _395 = _388 * _393;
    float _396 = _389 * _393;
    float _402 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _403 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _424 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _427 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _430 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _443 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = (_443 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _452 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_446].x;
    float _453 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_446].y;
    float _454 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_446].z;
    float _3312 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _458 = 1.0 - _310;
    float _459 = _455 * _458;
    float _460 = _456 * _458;
    float _461 = _457 * _458;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _310;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _310;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _310;
    float _469 = _466 + 0.039999999105930328369140625;
    float _471 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    vec4 _481 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _402, cbSceneParam._m0[86u].y * _403));
    float _484 = _481.x * TEXCOORD.z;
    float _485 = dot(vec3(_302, _303, _304), vec3(_394, _395, _396));
    float _488 = _485 * 2.0;
    float _492 = (_488 * _302) - _394;
    float _493 = (_488 * _303) - _395;
    float _494 = (_488 * _304) - _396;
    float _498 = abs(dot(vec3(_394, _395, _396), vec3(_302, _303, _304)));
    float _3345 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _500 = sqrt(_306);
    float _513 = exp2((_500 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _519 = (1.0 - _513) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _520 = _513 * _500;
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _861;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = fma(_556, cbModelParam._m0[26u].z, fma(_552, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _548));
        float _590 = fma(_556, cbModelParam._m0[27u].z, fma(_552, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _548));
        float _594 = fma(_556, cbModelParam._m0[28u].z, fma(_552, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _548));
        float _619 = _548 + _302;
        float _620 = _552 + _303;
        float _621 = _556 + _304;
        float _631 = fma(_621, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) - _586;
        float _632 = fma(_621, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) - _590;
        float _633 = fma(_621, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) - _594;
        float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
        float _650 = ((_637 * _631) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_586 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_637 * _632) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_590 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_637 * _633) / cbModelParam._m0[34u].z) + ((((((_594 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        float _689 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_655.x + (-0.5));
        float _691 = _689 * (_655.y + (-0.5));
        float _692 = _689 * (_655.z + (-0.5));
        float _699 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_662.x + (-0.5));
        float _701 = _699 * (_662.y + (-0.5));
        float _702 = _699 * (_662.z + (-0.5));
        float _709 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_669.x + (-0.5));
        float _711 = _709 * (_669.y + (-0.5));
        float _712 = _709 * (_669.z + (-0.5));
        float _719 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_676.x + (-0.5));
        float _721 = _719 * (_676.y + (-0.5));
        float _722 = _719 * (_676.z + (-0.5));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = _690 * 0.5;
        float _727 = _700 * 0.5;
        float _728 = _710 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _743 = (dot(vec3(_302, _303, _304), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3371 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _753 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3382 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3393 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0))) * (_755 + 1.0))) + _760) * _723;
        float _770 = _691 * 0.5;
        float _771 = _701 * 0.5;
        float _772 = _711 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_302, _303, _304), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3426 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_797 + 1.0))) + _802) * _724;
        float _812 = _692 * 0.5;
        float _813 = _702 * 0.5;
        float _814 = _712 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_302, _303, _304), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3459 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_839 + 1.0))) + _844) * _725;
        _861 = _692;
        _863 = _691;
        _864 = _690;
        _865 = _702;
        _866 = _701;
        _867 = _700;
        _868 = _712;
        _869 = _711;
        _870 = _710;
        _871 = _725;
        _872 = _724;
        _873 = _723;
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
    }
    else
    {
        _861 = _862;
        _863 = _862;
        _864 = _862;
        _865 = _862;
        _866 = _862;
        _867 = _862;
        _868 = _862;
        _869 = _862;
        _870 = _862;
        _871 = _862;
        _872 = _862;
        _873 = _862;
        _874 = 0.0;
        _875 = 0.0;
        _876 = 0.0;
    }
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = fma(_556, cbModelParam._m0[30u].z, fma(_552, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _548));
        float _906 = fma(_556, cbModelParam._m0[31u].z, fma(_552, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _548));
        float _910 = fma(_556, cbModelParam._m0[32u].z, fma(_552, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _548));
        float _933 = _548 + _302;
        float _934 = _552 + _303;
        float _935 = _556 + _304;
        float _945 = fma(_935, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _933)) - _902;
        float _946 = fma(_935, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _933)) - _906;
        float _947 = fma(_935, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _933)) - _910;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_902 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_906 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[35u].z) + ((((((_910 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1001 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_968.x + (-0.5));
        float _1003 = _1001 * (_968.y + (-0.5));
        float _1004 = _1001 * (_968.z + (-0.5));
        float _1011 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_975.x + (-0.5));
        float _1013 = _1011 * (_975.y + (-0.5));
        float _1014 = _1011 * (_975.z + (-0.5));
        float _1021 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_982.x + (-0.5));
        float _1023 = _1021 * (_982.y + (-0.5));
        float _1024 = _1021 * (_982.z + (-0.5));
        float _1031 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_989.x + (-0.5));
        float _1033 = _1031 * (_989.y + (-0.5));
        float _1034 = _1031 * (_989.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_302, _303, _304), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3522 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1065 + 1.0))) + _1070) * _1035;
        float _1080 = _1003 * 0.5;
        float _1081 = _1013 * 0.5;
        float _1082 = _1023 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_302, _303, _304), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3555 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1107 + 1.0))) + _1112) * _1036;
        float _1122 = _1004 * 0.5;
        float _1123 = _1014 * 0.5;
        float _1124 = _1024 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_302, _303, _304), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3588 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1149 + 1.0))) + _1154) * _1037;
        _1171 = _1004;
        _1172 = _1003;
        _1173 = _1002;
        _1174 = _1014;
        _1175 = _1013;
        _1176 = _1012;
        _1177 = _1024;
        _1178 = _1023;
        _1179 = _1022;
        _1180 = _1037;
        _1181 = _1036;
        _1182 = _1035;
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _862;
        _1172 = _862;
        _1173 = _862;
        _1174 = _862;
        _1175 = _862;
        _1176 = _862;
        _1177 = _862;
        _1178 = _862;
        _1179 = _862;
        _1180 = _862;
        _1181 = _862;
        _1182 = _862;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1218 = fma(_1197, cbSceneParam._m0[89u].z, fma(_1196, cbSceneParam._m0[89u].y, _1195 * cbSceneParam._m0[89u].x));
    float _1221 = fma(_1197, cbSceneParam._m0[90u].z, fma(_1196, cbSceneParam._m0[90u].y, _1195 * cbSceneParam._m0[90u].x));
    float _1224 = fma(_1197, cbSceneParam._m0[91u].z, fma(_1196, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1195));
    float _1239 = _492 * 0.5;
    float _1240 = _493 * 0.5;
    float _1241 = _494 * 0.5;
    float _1242 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1245 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1248 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1282;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1255 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_861, _865, _868, _871));
        float _1259 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_863, _866, _869, _872));
        float _1263 = dot(vec4(_1239, _1240, _1241, 1.0), vec4(_864, _867, _870, _873));
        float _1270 = dot(vec4(cbModelParam._m0[39u]), vec4(_1239, _1240, _1241, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1293;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1284 = dot(vec4(cbModelParam._m0[40u]), vec4(_1239, _1240, _1241, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1297 = (_1293 * cbModelParam._m0[1u].x) + (_1282 * (1.0 - cbModelParam._m0[1u].x));
    float _1307 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1308 = isnan(_1307) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1307 : min(cbModelParam._m0[25u].z, _1307));
    float _1390;
    float _1392;
    float _1394;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1357 = fma(_556, cbModelParam._m0[13u].z, fma(_552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _548)) + cbModelParam._m0[13u].w;
        float _1361 = fma(_556, cbModelParam._m0[14u].z, fma(_552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _548)) + cbModelParam._m0[14u].w;
        float _1365 = fma(_556, cbModelParam._m0[15u].z, fma(_552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _548)) + cbModelParam._m0[15u].w;
        float _1368 = fma(_494, cbModelParam._m0[13u].z, fma(_493, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492));
        float _1371 = fma(_494, cbModelParam._m0[14u].z, fma(_493, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492));
        float _1374 = fma(_494, cbModelParam._m0[15u].z, fma(_493, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492));
        float _1402;
        if (_1368 > 0.0)
        {
            _1402 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1402 = frontier_phi_18_16_ladder;
        }
        float _1631;
        if (_1371 > 0.0)
        {
            _1631 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_27_23_ladder;
        }
        float _1888;
        if (_1374 > 0.0)
        {
            _1888 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1888 = frontier_phi_39_34_ladder;
        }
        float _1890 = isnan(_1631) ? _1402 : (isnan(_1402) ? _1631 : min(_1402, _1631));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1368) + _1357;
        float _1896 = (_1891 * _1371) + _1361;
        float _1897 = (_1891 * _1374) + _1365;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1898;
        float _1902 = _1898 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 > _1902) || ((_1896 < _1900) || ((_1895 < _1900) || (_1895 > _1902))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1897, cbModelParam._m0[9u].z, fma(_1896, cbModelParam._m0[9u].y, _1895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1897, cbModelParam._m0[10u].z, fma(_1896, cbModelParam._m0[10u].y, _1895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1897, cbModelParam._m0[11u].z, fma(_1896, cbModelParam._m0[11u].y, _1895 * cbModelParam._m0[11u].x))), _1308);
            frontier_phi_17_39_ladder = _2025.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2025.x * cbModelParam._m0[1u].y;
        }
        _1390 = frontier_phi_17_39_ladder_2;
        _1392 = frontier_phi_17_39_ladder_1;
        _1394 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_492, _493, _494), _1308);
        _1390 = _1378.x * cbModelParam._m0[1u].y;
        _1392 = _1378.y * cbModelParam._m0[1u].y;
        _1394 = _1378.z * cbModelParam._m0[1u].y;
    }
    float _1398 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1398 : min(cbModelParam._m0[25u].w, _1398));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1456 = fma(_556, cbModelParam._m0[21u].z, fma(_552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _548)) + cbModelParam._m0[21u].w;
        float _1460 = fma(_556, cbModelParam._m0[22u].z, fma(_552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _548)) + cbModelParam._m0[22u].w;
        float _1464 = fma(_556, cbModelParam._m0[23u].z, fma(_552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _548)) + cbModelParam._m0[23u].w;
        float _1467 = fma(_494, cbModelParam._m0[21u].z, fma(_493, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492));
        float _1470 = fma(_494, cbModelParam._m0[22u].z, fma(_493, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492));
        float _1473 = fma(_494, cbModelParam._m0[23u].z, fma(_493, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492));
        float _1636;
        if (_1467 > 0.0)
        {
            _1636 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1636 = frontier_phi_29_25_ladder;
        }
        float _1915;
        if (_1470 > 0.0)
        {
            _1915 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1915 = frontier_phi_41_36_ladder;
        }
        float _2128;
        if (_1473 > 0.0)
        {
            _2128 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2128 = frontier_phi_50_47_ladder;
        }
        float _2130 = isnan(_1915) ? _1636 : (isnan(_1636) ? _1915 : min(_1636, _1915));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1467) + _1456;
        float _2136 = (_2131 * _1470) + _1460;
        float _2137 = (_2131 * _1473) + _1464;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2138;
        float _2141 = _2138 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2137 > _2141) || ((_2137 < _2139) || ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 < _2139) || (_2135 > _2141))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2137, cbModelParam._m0[17u].z, fma(_2136, cbModelParam._m0[17u].y, _2135 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2137, cbModelParam._m0[18u].z, fma(_2136, cbModelParam._m0[18u].y, _2135 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2137, cbModelParam._m0[19u].z, fma(_2136, cbModelParam._m0[19u].y, _2135 * cbModelParam._m0[19u].x))), _1399);
            frontier_phi_26_50_ladder = _2337.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2337.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2337.x * cbModelParam._m0[1u].z;
        }
        _1492 = frontier_phi_26_50_ladder_2;
        _1494 = frontier_phi_26_50_ladder_1;
        _1496 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_492, _493, _494), _1399);
        _1492 = _1476.x * cbModelParam._m0[1u].z;
        _1494 = _1476.y * cbModelParam._m0[1u].z;
        _1496 = _1476.z * cbModelParam._m0[1u].z;
    }
    float _1509 = (((_519 * _469) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1511 = (((_519 * _471) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1513 = (((_519 * _472) + _520) * _484) * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1516 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1509 * cbSceneParam._m0[91u].x));
    vec4 _1530 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_402, _403));
    float _1532 = _1530.w;
    float _1544 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1532);
    float _1545 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1532);
    float _1546 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1532);
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_443 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _484 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1589 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1593 = _1552 | 1u;
    float _1604 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_302, _303, _304));
    float _1607 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_302, _303, _304));
    float _3724 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _3735 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1612 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1614 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1621 = ((cbLight._m0[_1569].x * _1575) * _1614) + (((cbLight._m0[_1579].x * _1544) * _1589) * _1612);
    float _1622 = ((_1575 * cbLight._m0[_1569].y) * _1614) + (((cbLight._m0[_1579].y * _1545) * _1589) * _1612);
    float _1623 = ((_1575 * cbLight._m0[_1569].z) * _1614) + (((cbLight._m0[_1579].z * _1546) * _1589) * _1612);
    uvec4 _1628 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1630 = _1628.x == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1630)
    {
        _1641 = _1621;
        _1643 = _1622;
        _1645 = _1623;
    }
    else
    {
        uint _1649 = _1552 + 6u;
        float _1665 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3746 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1668 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1641 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1621;
        _1643 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1622;
        _1645 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1623;
    }
    bool _1648 = _1628.y == 0u;
    float _1686;
    float _1688;
    float _1690;
    if (_1648)
    {
        _1686 = _1641;
        _1688 = _1643;
        _1690 = _1645;
    }
    else
    {
        uint _1859 = _1552 + 7u;
        float _1875 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3762 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1878 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1686 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1641;
        _1688 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1643;
        _1690 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1645;
    }
    uint _1693 = _1552 + 8u;
    float _1706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _306) * 0.949999988079071044921875);
    float _1707 = _1706 * _1706;
    float _1708 = cbLight._m0[_1552].x + _394;
    float _1709 = cbLight._m0[_1552].y + _395;
    float _1710 = cbLight._m0[_1552].z + _396;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1715 = _1714 * _1708;
    float _1716 = _1714 * _1709;
    float _1717 = _1714 * _1710;
    float _1718 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1552].xyz));
    float _3778 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _1722 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1723 = dot(vec3(_302, _303, _304), vec3(_1715, _1716, _1717));
    float _3800 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1727 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1715, _1716, _1717));
    float _3811 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1731 = _1707 * _1707;
    float _1735 = ((_1726 * _1726) * (_1731 + (-1.0))) + 1.0;
    float _1743 = exp2(log2(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * 5.0);
    float _1744 = 0.959999978542327880859375 - _466;
    float _1746 = 0.959999978542327880859375 - _467;
    float _1747 = 0.959999978542327880859375 - _468;
    float _1754 = 1.0 - _1707;
    float _1765 = (0.5 / (((_1722 * ((_1721 * _1754) + _1707)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1754) + _1707) * _1721))) * _1721;
    float _3822 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1731 / ((_1735 * _1735) * 3.141590118408203125));
    uint _1781 = _1552 + 9u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _306) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1593].x + _394;
    float _1795 = cbLight._m0[_1593].y + _395;
    float _1796 = cbLight._m0[_1593].z + _396;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1593].xyz));
    float _3833 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1808 = dot(vec3(_302, _303, _304), vec3(_1801, _1802, _1803));
    float _3844 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1801, _1802, _1803));
    float _3855 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1793 * _1793;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1827 = exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0);
    float _1834 = 1.0 - _1793;
    float _1844 = (0.5 / (((_1722 * ((_1807 * _1834) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1834) + _1793) * _1807))) * _1807;
    float _3866 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1856 = (((((_1827 * _1744) + _469) * cbLight._m0[_1781].x) * _1846) * _1575) + ((((cbLight._m0[_1693].x * _1544) * ((_1743 * _1744) + _469)) * _1767) * _1589);
    float _1857 = (((((_1827 * _1746) + _471) * cbLight._m0[_1781].y) * _1846) * _1575) + ((((cbLight._m0[_1693].y * _1545) * ((_1743 * _1746) + _471)) * _1767) * _1589);
    float _1858 = (((((_1827 * _1747) + _472) * cbLight._m0[_1781].z) * _1846) * _1575) + ((((cbLight._m0[_1693].z * _1546) * ((_1743 * _1747) + _472)) * _1767) * _1589);
    float _1920;
    float _1922;
    float _1924;
    if (_1630)
    {
        _1920 = _1856;
        _1922 = _1857;
        _1924 = _1858;
    }
    else
    {
        uint _1926 = _1552 + 2u;
        uint _1930 = _1552 + 10u;
        float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _306) * 0.949999988079071044921875);
        float _1945 = _1944 * _1944;
        float _1946 = cbLight._m0[_1926].x + _394;
        float _1947 = cbLight._m0[_1926].y + _395;
        float _1948 = cbLight._m0[_1926].z + _396;
        float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
        float _1953 = _1952 * _1946;
        float _1954 = _1952 * _1947;
        float _1955 = _1952 * _1948;
        float _1956 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1926].xyz));
        float _3877 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1960 = dot(vec3(_302, _303, _304), vec3(_1953, _1954, _1955));
        float _3888 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1953, _1954, _1955));
        float _3899 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1968 = _1945 * _1945;
        float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
        float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * 5.0);
        float _1986 = 1.0 - _1945;
        float _1996 = (0.5 / (((_1722 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1986) + _1945) * _1959))) * _1959;
        float _3910 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1998 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
        float _1999 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1920 = (((((_1979 * _1744) + _469) * cbLight._m0[_1930].x) * _1998) * _1999) + _1856;
        _1922 = (((((_1979 * _1746) + _471) * cbLight._m0[_1930].y) * _1998) * _1999) + _1857;
        _1924 = (((((_1979 * _1747) + _472) * cbLight._m0[_1930].z) * _1998) * _1999) + _1858;
    }
    float _2034;
    float _2036;
    float _2038;
    if (_1648)
    {
        _2034 = _1920;
        _2036 = _1922;
        _2038 = _1924;
    }
    else
    {
        uint _2045 = _1552 + 3u;
        uint _2049 = _1552 + 11u;
        float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _306) * 0.949999988079071044921875);
        float _2064 = _2063 * _2063;
        float _2065 = cbLight._m0[_2045].x + _394;
        float _2066 = cbLight._m0[_2045].y + _395;
        float _2067 = cbLight._m0[_2045].z + _396;
        float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
        float _2072 = _2071 * _2065;
        float _2073 = _2071 * _2066;
        float _2074 = _2071 * _2067;
        float _2075 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2045].xyz));
        float _3926 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2079 = dot(vec3(_302, _303, _304), vec3(_2072, _2073, _2074));
        float _3937 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2083 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2072, _2073, _2074));
        float _3948 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = _2064 * _2064;
        float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
        float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0);
        float _2105 = 1.0 - _2064;
        float _2115 = (0.5 / (((_1722 * ((_2078 * _2105) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _2105) + _2064) * _2078))) * _2078;
        float _3959 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _2034 = (((((_2098 * _1744) + _469) * cbLight._m0[_2049].x) * _2117) * _2118) + _1920;
        _2036 = (((((_2098 * _1746) + _471) * cbLight._m0[_2049].y) * _2117) * _2118) + _1922;
        _2038 = (((((_2098 * _1747) + _472) * cbLight._m0[_2049].z) * _2117) * _2118) + _1924;
    }
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_1550.y == 0u)
    {
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2193;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2193;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2193;
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.x;
        uint _2220 = uint((float(_2208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _403) / _2209))) + floor(float(uint(cbSceneParam._m0[85u].x * _402) / _2209)));
        float _2230 = (log2(_2196 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2231 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        uint _2234 = uint(isnan(14.0) ? _2231 : (isnan(_2231) ? 14.0 : min(_2231, 14.0)));
        uvec4 _2239 = texelFetch(g_lightClusterGridBuffer, int(((_2234 << 2u) + (_2220 << 6u)) >> 2u));
        uint _2240 = _2239.x;
        uint _2241 = _2208.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2241 >> 4u) & 15u)) + 4294967295u) & _2240) == 0u) || ((_2241 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            uint _2492 = 0u;
            uint _2501;
            bool _2502;
            for (;;)
            {
                _2501 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                _2502 = _2501 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2502)
                {
                    frontier_phi_65_pred = _2491;
                    frontier_phi_65_pred_1 = _2490;
                    frontier_phi_65_pred_2 = _2489;
                    frontier_phi_65_pred_3 = _2488;
                    frontier_phi_65_pred_4 = _2487;
                    frontier_phi_65_pred_5 = _2486;
                }
                else
                {
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    uint _2616;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2501;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    for (;;)
                    {
                        uint _2620 = uint(findLSB(_2616)) + (_2492 << 5u);
                        uint _2617 = (_2616 + 4294967295u) & _2616;
                        uint _2622 = _2620 * 48u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2642 = (_2620 * 48u) + 4u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2661 = (_2620 * 48u) + 8u;
                        vec3 _2672 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x));
                        float _2676 = _2636.x - _2194;
                        float _2677 = _2636.y - _2195;
                        float _2678 = _2636.z - _2196;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_424, _427, _430), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2636.w);
                        float _3985 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2693 = sqrt(_2679) * _2655.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2686) + _2697;
                        float _2703 = _2693 * _2693;
                        float _2707 = ((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2692) / ((_2703 * 0.699999988079071044921875) + 1.0);
                        float _2711 = (-0.0) - _2194;
                        float _2712 = (-0.0) - _2195;
                        float _2713 = (-0.0) - _2196;
                        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2728 = exp2(log2(1.0 / ((_2703 * 3.5) + 5.0)) * 0.25);
                        float _2729 = 1.0 - _500;
                        float _2736 = sqrt(1.0 - ((1.0 - (_2729 * _2729)) * (1.0 - (_2728 * _2728))));
                        float _2737 = _2736 * _2736;
                        float _2738 = _2737 * _2737;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2749 = dot(vec3(_424, _427, _430), vec3(_2718, _2719, _2720));
                        float _4001 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2753 = dot(vec3(_424, _427, _430), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741));
                        float _4012 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2760 = ((_2756 * _2756) * (_2738 + (-1.0))) + 1.0;
                        float _2761 = _2696 * _2737;
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2686) + _2762;
                        float _4023 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2767 = 1.0 - _2737;
                        float _2777 = (0.5 / (((_2766 * ((_2752 * _2767) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2766 * _2767) + _2737) * _2752))) * _2766;
                        float _4034 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2788 = (((_2738 * 3.1415927410125732421875) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) / ((_2760 * _2760) * ((_2703 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2545 = (_2707 * _2655.x) + _2613;
                        _2546 = (_2707 * _2655.y) + _2614;
                        _2547 = (_2707 * _2655.z) + _2615;
                        _2542 = (_2788 * _2672.x) + _2610;
                        _2543 = (_2788 * _2672.y) + _2611;
                        _2544 = (_2788 * _2672.z) + _2612;
                        if (_2617 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2617;
                        }
                    }
                    frontier_phi_65_pred = _2547;
                    frontier_phi_65_pred_1 = _2546;
                    frontier_phi_65_pred_2 = _2545;
                    frontier_phi_65_pred_3 = _2544;
                    frontier_phi_65_pred_4 = _2543;
                    frontier_phi_65_pred_5 = _2542;
                }
                _2353 = frontier_phi_65_pred;
                _2351 = frontier_phi_65_pred_1;
                _2349 = frontier_phi_65_pred_2;
                _2347 = frontier_phi_65_pred_3;
                _2345 = frontier_phi_65_pred_4;
                _2343 = frontier_phi_65_pred_5;
                uint _2493 = _2492 + 1u;
                if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2486 = _2343;
                    _2487 = _2345;
                    _2488 = _2347;
                    _2489 = _2349;
                    _2490 = _2351;
                    _2491 = _2353;
                    _2492 = _2493;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((4294967295u << _2359) & _2240) == 0u)
        {
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
            _2464 = _2352;
        }
        else
        {
            float _2479 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
            float _2480 = _2479 * _2194;
            float _2481 = _2479 * _2195;
            float _2482 = _2479 * _2196;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2593 = _2342;
                float _2594 = _2344;
                float _2595 = _2346;
                float _2596 = _2348;
                float _2597 = _2350;
                float _2598 = _2352;
                uint _2599 = _2359;
                uint _2608;
                bool _2609;
                for (;;)
                {
                    _2608 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                    _2609 = _2608 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2609)
                    {
                        frontier_phi_71_pred = _2598;
                        frontier_phi_71_pred_1 = _2597;
                        frontier_phi_71_pred_2 = _2596;
                        frontier_phi_71_pred_3 = _2595;
                        frontier_phi_71_pred_4 = _2594;
                        frontier_phi_71_pred_5 = _2593;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        uint _2812 = _2608;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2599 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2196, _2933.z, fma(_2195, _2933.y, _2933.x * _2194)) + _2933.w;
                            _2946 = !((fma(_2196, _2914.z, fma(_2195, _2914.y, _2914.x * _2194)) + _2914.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _2194;
                                float _2974 = _2838.y - _2195;
                                float _2975 = _2838.z - _2196;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _4045 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_424, _427, _430))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2196, _2882.z, fma(_2195, _2882.y, _2882.x * _2194)) + _2882.w) / _2945;
                                float _3005 = (fma(_2196, _2898.z, fma(_2195, _2898.y, _2898.x * _2194)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _4061 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _500;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2480;
                                float _3035 = _2981 - _2481;
                                float _3036 = _2982 - _2482;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2480, (-0.0) - _2481, (-0.0) - _2482));
                                float _4072 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3048 = dot(vec3(_424, _427, _430), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _4083 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_424, _427, _430), vec3(_2980, _2981, _2982))) + _3057;
                                float _4094 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4105 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3011 * _2854.z;
                                frontier_phi_77_pred_1 = _3011 * _2854.y;
                                frontier_phi_77_pred_2 = _3011 * _2854.x;
                                frontier_phi_77_pred_3 = _3085 * _2866.z;
                                frontier_phi_77_pred_4 = _3085 * _2866.y;
                                frontier_phi_77_pred_5 = _3085 * _2866.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_77_pred;
                            _3093 = frontier_phi_77_pred_1;
                            _3092 = frontier_phi_77_pred_2;
                            _3091 = frontier_phi_77_pred_3;
                            _3090 = frontier_phi_77_pred_4;
                            _3089 = frontier_phi_77_pred_5;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2798;
                        frontier_phi_71_pred_1 = _2797;
                        frontier_phi_71_pred_2 = _2796;
                        frontier_phi_71_pred_3 = _2795;
                        frontier_phi_71_pred_4 = _2794;
                        frontier_phi_71_pred_5 = _2793;
                    }
                    _2465 = frontier_phi_71_pred;
                    _2463 = frontier_phi_71_pred_1;
                    _2461 = frontier_phi_71_pred_2;
                    _2459 = frontier_phi_71_pred_3;
                    _2457 = frontier_phi_71_pred_4;
                    _2455 = frontier_phi_71_pred_5;
                    uint _2600 = _2599 + 1u;
                    if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2593 = _2455;
                        _2594 = _2457;
                        _2595 = _2459;
                        _2596 = _2461;
                        _2597 = _2463;
                        _2598 = _2465;
                        _2599 = _2600;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2465;
                frontier_phi_59_60_ladder_1 = _2463;
                frontier_phi_59_60_ladder_2 = _2461;
                frontier_phi_59_60_ladder_3 = _2459;
                frontier_phi_59_60_ladder_4 = _2457;
                frontier_phi_59_60_ladder_5 = _2455;
            }
            else
            {
                frontier_phi_59_60_ladder = _2352;
                frontier_phi_59_60_ladder_1 = _2350;
                frontier_phi_59_60_ladder_2 = _2348;
                frontier_phi_59_60_ladder_3 = _2346;
                frontier_phi_59_60_ladder_4 = _2344;
                frontier_phi_59_60_ladder_5 = _2342;
            }
            _2454 = frontier_phi_59_60_ladder_5;
            _2456 = frontier_phi_59_60_ladder_4;
            _2458 = frontier_phi_59_60_ladder_3;
            _2460 = frontier_phi_59_60_ladder_2;
            _2462 = frontier_phi_59_60_ladder_1;
            _2464 = frontier_phi_59_60_ladder;
        }
        float _2469 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
        _2252 = (_2469 * _2460) + _1686;
        _2254 = (_2469 * _2462) + _1688;
        _2256 = (_2469 * _2464) + _1690;
        _2258 = ((_2454 * _469) * _2469) + _2034;
        _2260 = ((_2456 * _471) * _2469) + _2036;
        _2262 = ((_2458 * _472) * _2469) + _2038;
    }
    else
    {
        _2252 = _1686;
        _2254 = _1688;
        _2256 = _1690;
        _2258 = _2034;
        _2260 = _2036;
        _2262 = _2038;
    }
    float _4121 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4132 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4143 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4154 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _2287 = cbInstanceData._m0[_443 + 6u].w * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)));
    float _2292 = _402 / cbSceneParam._m0[86u].x;
    float _2293 = _403 / cbSceneParam._m0[86u].y;
    vec4 _2307 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2309 = _2307.x;
    float _2310 = _2307.y;
    float _2311 = _2307.z;
    float _2312 = _2307.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2368 = _2367 / _334;
        float _2379 = _2368 * _387;
        float _2380 = _388 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2382 = _2368 * _389;
        float _2384 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2380;
        float _2392 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2555;
        if (abs((_2381 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2555 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2515 = 1.0 / cbSceneParam._m0[80u].x;
            float _2516 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2517 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            _2555 = ((abs(_2392 / _2381) * cbSceneParam._m0[80u].y) * ((((_2526 - _2527) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))))) * _2515)) - ((exp2(_2402 * _2526) - exp2(_2402 * _2527)) * _2515))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, 1.0), 0.0);
        float _2566 = exp2((_2555 * (-1.44269502162933349609375)) * (1.0 - _2557.w));
        float _2567 = log2(_2566);
        float _2583 = log2(_2312);
        _2404 = (exp2(_2583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].x)) * _2557.x) / cbSceneParam._m0[78u].x)) + _2309;
        _2406 = (exp2(_2583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].y)) * _2557.y) / cbSceneParam._m0[78u].y)) + _2310;
        _2408 = (exp2(_2583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].z)) * _2557.z) / cbSceneParam._m0[78u].z)) + _2311;
        _2410 = _2566 * _2312;
    }
    else
    {
        _2404 = _2309;
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2252 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _484))) + ((_2258 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1297)) * cbPerFrame._m0[3u].x));
    float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2254 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _484))) + ((_2260 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1297)) * cbPerFrame._m0[3u].x));
    float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2256 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _484))) + ((_2262 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1297)) * cbPerFrame._m0[3u].x));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = _2287;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2287;
    discard_exit();
}


