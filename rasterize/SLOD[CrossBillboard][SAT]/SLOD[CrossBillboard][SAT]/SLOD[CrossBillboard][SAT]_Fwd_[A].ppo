#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 4, component = 3) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _864;
float _3252;
float _3253;
float _3254;
float _3255;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.w;
    float _238 = 1.0 / _237;
    float _240 = _231.x * _238;
    float _241 = _238 * _231.y;
    float _242 = _238 * _231.z;
    vec4 _254 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _254.x * _238;
    vec4 _269 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3264 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))));
    float _286 = _269.z * _238;
    float _289 = fma(_285, _215, fma(_279, _207 * TANGENT.x, (_193 * _186) * _277));
    float _292 = fma(_285, _216, fma(_279, _207 * TANGENT.y, (_193 * _187) * _277));
    float _295 = fma(_285, _217, fma(_279, _207 * TANGENT.z, (_193 * _188) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3275 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _303 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _304 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3308 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3319 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3330 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _308 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _311 = gl_FragCoord.x * 0.125;
    float _313 = gl_FragCoord.y * 0.125;
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_311, _313)).w > TEXCOORD_9)))
    {
        discard_state = true;
    }
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    vec4 _396 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_311, _313));
    float _398 = _396.w;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _429 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _432 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3341 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _460 = 1.0 - _308;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _308;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _308;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _308;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_300, _301, _302), vec3(_392, _393, _394));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _300) - _392;
    float _495 = (_490 * _301) - _393;
    float _496 = (_490 * _302) - _394;
    float _500 = abs(dot(vec3(_392, _393, _394), vec3(_300, _301, _302)));
    float _3374 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_304);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _592 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _596 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _621 = _550 + _300;
        float _622 = _554 + _301;
        float _623 = _558 + _302;
        float _633 = fma(_623, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) - _588;
        float _634 = fma(_623, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) - _592;
        float _635 = fma(_623, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) - _596;
        float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
        float _652 = ((_639 * _633) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_588 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_639 * _634) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_592 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_639 * _635) / cbModelParam._m0[34u].z) + ((((((_596 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(_300, _301, _302), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3422 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_300, _301, _302), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3455 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_300, _301, _302), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3488 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _865 = _693;
        _866 = _692;
        _867 = _704;
        _868 = _703;
        _869 = _702;
        _870 = _714;
        _871 = _713;
        _872 = _712;
        _873 = _727;
        _874 = _726;
        _875 = _725;
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _864;
        _865 = _864;
        _866 = _864;
        _867 = _864;
        _868 = _864;
        _869 = _864;
        _870 = _864;
        _871 = _864;
        _872 = _864;
        _873 = _864;
        _874 = _864;
        _875 = _864;
        _876 = 0.0;
        _877 = 0.0;
        _878 = 0.0;
    }
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _908 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _912 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _935 = _550 + _300;
        float _936 = _554 + _301;
        float _937 = _558 + _302;
        float _947 = fma(_937, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935)) - _904;
        float _948 = fma(_937, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935)) - _908;
        float _949 = fma(_937, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935)) - _912;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_904 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_908 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[35u].z) + ((((((_912 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1003 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_970.x + (-0.5));
        float _1005 = _1003 * (_970.y + (-0.5));
        float _1006 = _1003 * (_970.z + (-0.5));
        float _1013 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_977.x + (-0.5));
        float _1015 = _1013 * (_977.y + (-0.5));
        float _1016 = _1013 * (_977.z + (-0.5));
        float _1023 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_984.x + (-0.5));
        float _1025 = _1023 * (_984.y + (-0.5));
        float _1026 = _1023 * (_984.z + (-0.5));
        float _1033 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_991.x + (-0.5));
        float _1035 = _1033 * (_991.y + (-0.5));
        float _1036 = _1033 * (_991.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_300, _301, _302), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3551 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1067 + 1.0))) + _1072) * _1037;
        float _1082 = _1005 * 0.5;
        float _1083 = _1015 * 0.5;
        float _1084 = _1025 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_300, _301, _302), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3584 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1109 + 1.0))) + _1114) * _1038;
        float _1124 = _1006 * 0.5;
        float _1125 = _1016 * 0.5;
        float _1126 = _1026 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_300, _301, _302), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3617 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1151 + 1.0))) + _1156) * _1039;
        _1173 = _1006;
        _1174 = _1005;
        _1175 = _1004;
        _1176 = _1016;
        _1177 = _1015;
        _1178 = _1014;
        _1179 = _1026;
        _1180 = _1025;
        _1181 = _1024;
        _1182 = _1039;
        _1183 = _1038;
        _1184 = _1037;
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _864;
        _1174 = _864;
        _1175 = _864;
        _1176 = _864;
        _1177 = _864;
        _1178 = _864;
        _1179 = _864;
        _1180 = _864;
        _1181 = _864;
        _1182 = _864;
        _1183 = _864;
        _1184 = _864;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1220 = fma(_1199, cbSceneParam._m0[89u].z, fma(_1198, cbSceneParam._m0[89u].y, _1197 * cbSceneParam._m0[89u].x));
    float _1223 = fma(_1199, cbSceneParam._m0[90u].z, fma(_1198, cbSceneParam._m0[90u].y, _1197 * cbSceneParam._m0[90u].x));
    float _1226 = fma(_1199, cbSceneParam._m0[91u].z, fma(_1198, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1197));
    float _1241 = _494 * 0.5;
    float _1242 = _495 * 0.5;
    float _1243 = _496 * 0.5;
    float _1244 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1247 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1250 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1284;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1257 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_863, _867, _870, _873));
        float _1261 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_865, _868, _871, _874));
        float _1265 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_866, _869, _872, _875));
        float _1272 = dot(vec4(cbModelParam._m0[39u]), vec4(_1241, _1242, _1243, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1295;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1286 = dot(vec4(cbModelParam._m0[40u]), vec4(_1241, _1242, _1243, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1299 = (_1295 * cbModelParam._m0[1u].x) + (_1284 * (1.0 - cbModelParam._m0[1u].x));
    float _1309 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1310 = isnan(_1309) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1309 : min(cbModelParam._m0[25u].z, _1309));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1359 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1363 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1367 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1370 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1373 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1376 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1404;
        if (_1370 > 0.0)
        {
            _1404 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1404 = frontier_phi_18_16_ladder;
        }
        float _1612;
        if (_1373 > 0.0)
        {
            _1612 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1612 = frontier_phi_27_23_ladder;
        }
        float _1866;
        if (_1376 > 0.0)
        {
            _1866 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1866 = frontier_phi_39_34_ladder;
        }
        float _1868 = isnan(_1612) ? _1404 : (isnan(_1404) ? _1612 : min(_1404, _1612));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1370) + _1359;
        float _1874 = (_1869 * _1373) + _1363;
        float _1875 = (_1869 * _1376) + _1367;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1878 = (-1.0) - _1876;
        float _1880 = _1876 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1875 > _1880) || ((_1875 < _1878) || ((_1874 > _1880) || ((_1874 < _1878) || ((_1873 < _1878) || (_1873 > _1880))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1875, cbModelParam._m0[9u].z, fma(_1874, cbModelParam._m0[9u].y, _1873 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1875, cbModelParam._m0[10u].z, fma(_1874, cbModelParam._m0[10u].y, _1873 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1875, cbModelParam._m0[11u].z, fma(_1874, cbModelParam._m0[11u].y, _1873 * cbModelParam._m0[11u].x))), _1310);
            frontier_phi_17_39_ladder = _2003.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _2003.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _2003.x * cbModelParam._m0[1u].y;
        }
        _1392 = frontier_phi_17_39_ladder_2;
        _1394 = frontier_phi_17_39_ladder_1;
        _1396 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1310);
        _1392 = _1380.x * cbModelParam._m0[1u].y;
        _1394 = _1380.y * cbModelParam._m0[1u].y;
        _1396 = _1380.z * cbModelParam._m0[1u].y;
    }
    float _1400 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1400 : min(cbModelParam._m0[25u].w, _1400));
    float _1494;
    float _1496;
    float _1498;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1458 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1462 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1466 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1469 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1472 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1475 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1617;
        if (_1469 > 0.0)
        {
            _1617 = abs((1.0 - _1458) / _1469);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1458 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1617 = frontier_phi_29_25_ladder;
        }
        float _1893;
        if (_1472 > 0.0)
        {
            _1893 = abs((1.0 - _1462) / _1472);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1462 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1893 = frontier_phi_41_36_ladder;
        }
        float _2106;
        if (_1475 > 0.0)
        {
            _2106 = abs((1.0 - _1466) / _1475);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1466 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2106 = frontier_phi_50_47_ladder;
        }
        float _2108 = isnan(_1893) ? _1617 : (isnan(_1617) ? _1893 : min(_1617, _1893));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1469) + _1458;
        float _2114 = (_2109 * _1472) + _1462;
        float _2115 = (_2109 * _1475) + _1466;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_26_50_ladder = _2315.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2315.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2315.x * cbModelParam._m0[1u].z;
        }
        _1494 = frontier_phi_26_50_ladder_2;
        _1496 = frontier_phi_26_50_ladder_1;
        _1498 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1478 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1401);
        _1494 = _1478.x * cbModelParam._m0[1u].z;
        _1496 = _1478.y * cbModelParam._m0[1u].z;
        _1498 = _1478.z * cbModelParam._m0[1u].z;
    }
    float _1511 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1513 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1496 - _1394)) + _1394);
    float _1515 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1498 - _1396)) + _1396);
    float _1518 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1521 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1524 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, _1511 * cbSceneParam._m0[91u].x));
    uvec4 _1534 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1536 = _1534.x * 14u;
    uint _1537 = _1536 + 13u;
    float _1544 = _486 + (-1.0);
    float _1549 = (cbLight._m0[_1537].x * _1544) + 1.0;
    float _1550 = (cbLight._m0[_1537].y * _1544) + 1.0;
    float _1551 = (cbLight._m0[_1537].z * _1544) + 1.0;
    float _1552 = (cbLight._m0[_1537].w * _1544) + 1.0;
    uint _1553 = _1536 + 5u;
    float _1559 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1563 = _1536 + 4u;
    float _1570 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1574 = _1536 | 1u;
    float _1585 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_300, _301, _302));
    float _1588 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_300, _301, _302));
    float _3753 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _3764 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1593 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.3183098733425140380859375;
    float _1595 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.3183098733425140380859375;
    float _1602 = ((cbLight._m0[_1553].x * _1559) * _1595) + ((cbLight._m0[_1563].x * _1570) * _1593);
    float _1603 = ((_1559 * cbLight._m0[_1553].y) * _1595) + ((_1570 * cbLight._m0[_1563].y) * _1593);
    float _1604 = ((_1559 * cbLight._m0[_1553].z) * _1595) + ((_1570 * cbLight._m0[_1563].z) * _1593);
    uvec4 _1609 = floatBitsToUint(cbLight._m0[_1536 + 12u]);
    bool _1611 = _1609.x == 0u;
    float _1622;
    float _1624;
    float _1626;
    if (_1611)
    {
        _1622 = _1602;
        _1624 = _1603;
        _1626 = _1604;
    }
    else
    {
        uint _1630 = _1536 + 6u;
        float _1646 = (dot(vec3(cbLight._m0[_1536 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3775 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1649 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1622 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1602;
        _1624 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1603;
        _1626 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1604;
    }
    bool _1629 = _1609.y == 0u;
    float _1667;
    float _1669;
    float _1671;
    if (_1629)
    {
        _1667 = _1622;
        _1669 = _1624;
        _1671 = _1626;
    }
    else
    {
        uint _1837 = _1536 + 7u;
        float _1853 = (dot(vec3(cbLight._m0[_1536 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3791 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1856 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1667 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1622;
        _1669 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1624;
        _1671 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1626;
    }
    uint _1674 = _1536 + 8u;
    float _1687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _304) * 0.949999988079071044921875);
    float _1688 = _1687 * _1687;
    float _1689 = cbLight._m0[_1536].x + _392;
    float _1690 = cbLight._m0[_1536].y + _393;
    float _1691 = cbLight._m0[_1536].z + _394;
    float _1695 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
    float _1696 = _1695 * _1689;
    float _1697 = _1695 * _1690;
    float _1698 = _1695 * _1691;
    float _1699 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1536].xyz));
    float _3807 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1702 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1703 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1704 = dot(vec3(_300, _301, _302), vec3(_1696, _1697, _1698));
    float _3829 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1707 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1708 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1696, _1697, _1698));
    float _3840 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1712 = _1688 * _1688;
    float _1716 = ((_1707 * _1707) * (_1712 + (-1.0))) + 1.0;
    float _1724 = exp2(log2(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * 5.0);
    float _1725 = 0.959999978542327880859375 - _468;
    float _1727 = 0.959999978542327880859375 - _469;
    float _1728 = 0.959999978542327880859375 - _470;
    float _1735 = 1.0 - _1688;
    float _1746 = (0.5 / (((_1703 * ((_1702 * _1735) + _1688)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1735) + _1688) * _1702))) * _1702;
    float _3851 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1748 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1712 / ((_1716 * _1716) * 3.141590118408203125));
    uint _1759 = _1536 + 9u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1574].w)) * _304) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1574].x + _392;
    float _1773 = cbLight._m0[_1574].y + _393;
    float _1774 = cbLight._m0[_1574].z + _394;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1574].xyz));
    float _3862 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _1786 = dot(vec3(_300, _301, _302), vec3(_1779, _1780, _1781));
    float _3873 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1574].xyz), vec3(_1779, _1780, _1781));
    float _3884 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1771 * _1771;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1805 = exp2(log2(1.0 - (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * 5.0);
    float _1812 = 1.0 - _1771;
    float _1822 = (0.5 / (((_1703 * ((_1785 * _1812) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1812) + _1771) * _1785))) * _1785;
    float _3895 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1824 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    float _1834 = (((((_1805 * _1725) + _471) * cbLight._m0[_1759].x) * _1824) * _1559) + (((((_1724 * _1725) + _471) * cbLight._m0[_1674].x) * _1748) * _1570);
    float _1835 = (((((_1805 * _1727) + _473) * cbLight._m0[_1759].y) * _1824) * _1559) + (((((_1724 * _1727) + _473) * cbLight._m0[_1674].y) * _1748) * _1570);
    float _1836 = (((((_1805 * _1728) + _474) * cbLight._m0[_1759].z) * _1824) * _1559) + (((((_1724 * _1728) + _474) * cbLight._m0[_1674].z) * _1748) * _1570);
    float _1898;
    float _1900;
    float _1902;
    if (_1611)
    {
        _1898 = _1834;
        _1900 = _1835;
        _1902 = _1836;
    }
    else
    {
        uint _1904 = _1536 + 2u;
        uint _1908 = _1536 + 10u;
        float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _304) * 0.949999988079071044921875);
        float _1923 = _1922 * _1922;
        float _1924 = cbLight._m0[_1904].x + _392;
        float _1925 = cbLight._m0[_1904].y + _393;
        float _1926 = cbLight._m0[_1904].z + _394;
        float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
        float _1931 = _1930 * _1924;
        float _1932 = _1930 * _1925;
        float _1933 = _1930 * _1926;
        float _1934 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1904].xyz));
        float _3906 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1938 = dot(vec3(_300, _301, _302), vec3(_1931, _1932, _1933));
        float _3917 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1941 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1942 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_1931, _1932, _1933));
        float _3928 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1946 = _1923 * _1923;
        float _1950 = ((_1941 * _1941) * (_1946 + (-1.0))) + 1.0;
        float _1957 = exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0);
        float _1964 = 1.0 - _1923;
        float _1974 = (0.5 / (((_1703 * ((_1937 * _1964) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _1964) + _1923) * _1937))) * _1937;
        float _3939 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1976 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1946 / ((_1950 * _1950) * 3.141590118408203125));
        float _1977 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1898 = (((((_1957 * _1725) + _471) * cbLight._m0[_1908].x) * _1976) * _1977) + _1834;
        _1900 = (((((_1957 * _1727) + _473) * cbLight._m0[_1908].y) * _1976) * _1977) + _1835;
        _1902 = (((((_1957 * _1728) + _474) * cbLight._m0[_1908].z) * _1976) * _1977) + _1836;
    }
    float _2012;
    float _2014;
    float _2016;
    if (_1629)
    {
        _2012 = _1898;
        _2014 = _1900;
        _2016 = _1902;
    }
    else
    {
        uint _2023 = _1536 + 3u;
        uint _2027 = _1536 + 11u;
        float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _304) * 0.949999988079071044921875);
        float _2042 = _2041 * _2041;
        float _2043 = cbLight._m0[_2023].x + _392;
        float _2044 = cbLight._m0[_2023].y + _393;
        float _2045 = cbLight._m0[_2023].z + _394;
        float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
        float _2050 = _2049 * _2043;
        float _2051 = _2049 * _2044;
        float _2052 = _2049 * _2045;
        float _2053 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2023].xyz));
        float _3955 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _2057 = dot(vec3(_300, _301, _302), vec3(_2050, _2051, _2052));
        float _3966 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2061 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2050, _2051, _2052));
        float _3977 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2065 = _2042 * _2042;
        float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
        float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * 5.0);
        float _2083 = 1.0 - _2042;
        float _2093 = (0.5 / (((_1703 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1703 * _2083) + _2042) * _2056))) * _2056;
        float _3988 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2095 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
        float _2096 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _2012 = (((((_2076 * _1725) + _471) * cbLight._m0[_2027].x) * _2095) * _2096) + _1898;
        _2014 = (((((_2076 * _1727) + _473) * cbLight._m0[_2027].y) * _2095) * _2096) + _1900;
        _2016 = (((((_2076 * _1728) + _474) * cbLight._m0[_2027].z) * _2095) * _2096) + _1902;
    }
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    if (_1534.y == 0u)
    {
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2171;
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2171;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2171;
        uvec4 _2186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2187 = _2186.x;
        uint _2198 = uint((float(_2186.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2187))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2187)));
        float _2208 = (log2(_2174 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2209 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        uint _2212 = uint(isnan(14.0) ? _2209 : (isnan(_2209) ? 14.0 : min(_2209, 14.0)));
        uvec4 _2217 = texelFetch(g_lightClusterGridBuffer, int(((_2212 << 2u) + (_2198 << 6u)) >> 2u));
        uint _2218 = _2217.x;
        uint _2219 = _2186.z;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        if (((((1u << ((_2219 >> 4u) & 15u)) + 4294967295u) & _2218) == 0u) || ((_2219 & 240u) == 0u))
        {
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
        }
        else
        {
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2329;
            float _2331;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2488)
                {
                    frontier_phi_67_pred = _2474;
                    frontier_phi_67_pred_1 = _2477;
                    frontier_phi_67_pred_2 = _2476;
                    frontier_phi_67_pred_3 = _2475;
                    frontier_phi_67_pred_4 = _2473;
                    frontier_phi_67_pred_5 = _2472;
                }
                else
                {
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    uint _2623;
                    _2617 = _2472;
                    _2618 = _2473;
                    _2619 = _2474;
                    _2620 = _2475;
                    _2621 = _2476;
                    _2622 = _2477;
                    _2623 = _2487;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2627 = uint(findLSB(_2623)) + (_2478 << 5u);
                        uint _2624 = (_2623 + 4294967295u) & _2623;
                        uint _2629 = _2627 * 48u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        uint _2649 = (_2627 * 48u) + 4u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2668 = (_2627 * 48u) + 8u;
                        vec3 _2679 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x));
                        float _2683 = _2643.x - _2172;
                        float _2684 = _2643.y - _2173;
                        float _2685 = _2643.z - _2174;
                        float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                        float _2689 = inversesqrt(_2686);
                        float _2690 = _2689 * _2683;
                        float _2691 = _2689 * _2684;
                        float _2692 = _2689 * _2685;
                        float _2693 = dot(vec3(_426, _429, _432), vec3(_2690, _2691, _2692));
                        float _2698 = 1.0 - (_2686 * _2643.w);
                        float _4014 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _2700 = sqrt(_2686) * _2662.w;
                        float _2703 = 1.39999997615814208984375 / (_2700 + 1.39999997615814208984375);
                        float _2704 = _2703 * _2703;
                        float _2707 = ((1.0 - _2704) * _2693) + _2704;
                        float _2710 = _2700 * _2700;
                        float _2714 = ((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2699) / ((_2710 * 0.699999988079071044921875) + 1.0);
                        float _2718 = (-0.0) - _2172;
                        float _2719 = (-0.0) - _2173;
                        float _2720 = (-0.0) - _2174;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2735 = exp2(log2(1.0 / ((_2710 * 3.5) + 5.0)) * 0.25);
                        float _2736 = 1.0 - _502;
                        float _2743 = sqrt(1.0 - ((1.0 - (_2736 * _2736)) * (1.0 - (_2735 * _2735))));
                        float _2744 = _2743 * _2743;
                        float _2745 = _2744 * _2744;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2756 = dot(vec3(_426, _429, _432), vec3(_2725, _2726, _2727));
                        float _4030 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2760 = dot(vec3(_426, _429, _432), vec3(_2752 * _2746, _2752 * _2747, _2752 * _2748));
                        float _4041 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2767 = ((_2763 * _2763) * (_2745 + (-1.0))) + 1.0;
                        float _2768 = _2703 * _2744;
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2693) + _2769;
                        float _4052 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2774 = 1.0 - _2744;
                        float _2784 = (0.5 / (((_2773 * ((_2759 * _2774) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2773 * _2774) + _2744) * _2759))) * _2773;
                        float _4063 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2795 = (((_2745 * 3.1415927410125732421875) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) / ((_2767 * _2767) * ((_2710 * 2.1991131305694580078125) + 3.141590118408203125))) * _2699;
                        _2547 = (_2714 * _2662.x) + _2620;
                        _2548 = (_2714 * _2662.y) + _2621;
                        _2549 = (_2714 * _2662.z) + _2622;
                        _2544 = (_2795 * _2679.x) + _2617;
                        _2545 = (_2795 * _2679.y) + _2618;
                        _2546 = (_2795 * _2679.z) + _2619;
                        if (_2624 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2617 = _2544;
                            _2618 = _2545;
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2548;
                            _2622 = _2549;
                            _2623 = _2624;
                        }
                    }
                    frontier_phi_67_pred = _2546;
                    frontier_phi_67_pred_1 = _2549;
                    frontier_phi_67_pred_2 = _2548;
                    frontier_phi_67_pred_3 = _2547;
                    frontier_phi_67_pred_4 = _2545;
                    frontier_phi_67_pred_5 = _2544;
                }
                _2325 = frontier_phi_67_pred;
                _2331 = frontier_phi_67_pred_1;
                _2329 = frontier_phi_67_pred_2;
                _2327 = frontier_phi_67_pred_3;
                _2323 = frontier_phi_67_pred_4;
                _2321 = frontier_phi_67_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2321;
                    _2473 = _2323;
                    _2474 = _2325;
                    _2475 = _2327;
                    _2476 = _2329;
                    _2477 = _2331;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
        }
        uvec4 _2334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2335 = _2334.z;
        uint _2337 = (_2335 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2337) & _2218) == 0u)
        {
            _2440 = _2320;
            _2442 = _2322;
            _2444 = _2324;
            _2446 = _2326;
            _2448 = _2328;
            _2450 = _2330;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
            float _2466 = _2465 * _2172;
            float _2467 = _2465 * _2173;
            float _2468 = _2465 * _2174;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2337 < ((_2335 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2600 = _2320;
                float _2601 = _2322;
                float _2602 = _2324;
                float _2603 = _2326;
                float _2604 = _2328;
                float _2605 = _2330;
                uint _2606 = _2337;
                uint _2615;
                bool _2616;
                for (;;)
                {
                    _2615 = texelFetch(g_lightClassification, int((((_2212 << 5u) + (_2198 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                    _2616 = _2615 == 0u;
                    float frontier_phi_78_pred;
                    float frontier_phi_78_pred_1;
                    float frontier_phi_78_pred_2;
                    float frontier_phi_78_pred_3;
                    float frontier_phi_78_pred_4;
                    float frontier_phi_78_pred_5;
                    if (_2616)
                    {
                        frontier_phi_78_pred = _2605;
                        frontier_phi_78_pred_1 = _2604;
                        frontier_phi_78_pred_2 = _2603;
                        frontier_phi_78_pred_3 = _2602;
                        frontier_phi_78_pred_4 = _2601;
                        frontier_phi_78_pred_5 = _2600;
                    }
                    else
                    {
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _2822 = _2600;
                        float _2823 = _2601;
                        float _2824 = _2602;
                        float _2825 = _2603;
                        float _2826 = _2604;
                        float _2827 = _2605;
                        uint _2828 = _2615;
                        uint _2829;
                        vec4 _2854;
                        float _2855;
                        vec4 _2870;
                        vec3 _2882;
                        vec4 _2898;
                        vec4 _2914;
                        float _2961;
                        bool _2962;
                        for (;;)
                        {
                            uint _2839 = ((_2606 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2828));
                            _2829 = (_2828 + 4294967295u) & _2828;
                            uint _2841 = _2839 * 40u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2855 = _2854.w;
                            uint _2857 = (_2839 * 40u) + 4u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2872 = (_2839 * 40u) + 8u;
                            _2882 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x));
                            uint _2885 = (_2839 * 40u) + 16u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2839 * 40u) + 20u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2917 = (_2839 * 40u) + 24u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2936 = (_2839 * 40u) + 28u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2961 = fma(_2174, _2949.z, fma(_2173, _2949.y, _2949.x * _2172)) + _2949.w;
                            _2962 = !((fma(_2174, _2930.z, fma(_2173, _2930.y, _2930.x * _2172)) + _2930.w) <= 0.0);
                            float frontier_phi_84_pred;
                            float frontier_phi_84_pred_1;
                            float frontier_phi_84_pred_2;
                            float frontier_phi_84_pred_3;
                            float frontier_phi_84_pred_4;
                            float frontier_phi_84_pred_5;
                            if (_2962)
                            {
                                float _2989 = _2854.x - _2172;
                                float _2990 = _2854.y - _2173;
                                float _2991 = _2854.z - _2174;
                                float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                                float _2995 = inversesqrt(_2992);
                                float _2996 = _2995 * _2989;
                                float _2997 = _2995 * _2990;
                                float _2998 = _2995 * _2991;
                                float _3002 = 1.0 - (_2992 / (_2855 * _2855));
                                float _4074 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                                float _3007 = sqrt(_2992) * _2870.w;
                                float _3009 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                                float _3010 = _3009 * _3009;
                                float _3013 = ((1.0 - _3010) * dot(vec3(_2996, _2997, _2998), vec3(_426, _429, _432))) + _3010;
                                float _3016 = _3007 * _3007;
                                float _3020 = (fma(_2174, _2898.z, fma(_2173, _2898.y, _2898.x * _2172)) + _2898.w) / _2961;
                                float _3021 = (fma(_2174, _2914.z, fma(_2173, _2914.y, _2914.x * _2172)) + _2914.w) / _2961;
                                float _3025 = 1.0 - dot(vec2(_3020, _3021), vec2(_3020, _3021));
                                float _4090 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3027 = _3026 * (((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3003) / ((_3016 * 0.699999988079071044921875) + 1.0));
                                float _3039 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                                float _3040 = 1.0 - _502;
                                float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                                float _3048 = _3047 * _3047;
                                float _3049 = _3048 * _3048;
                                float _3050 = _2996 - _2466;
                                float _3051 = _2997 - _2467;
                                float _3052 = _2998 - _2468;
                                float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                                float _3060 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4101 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3064 = dot(vec3(_426, _429, _432), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                                float _4112 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                                float _3072 = _3009 * _3048;
                                float _3073 = _3072 * _3072;
                                float _3079 = ((1.0 - _3073) * dot(vec3(_426, _429, _432), vec3(_2996, _2997, _2998))) + _3073;
                                float _4123 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3081 = 1.0 - _3048;
                                float _3091 = (0.5 / (((_3080 * ((_3063 * _3081) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3048) * _3063))) * _3080;
                                float _4134 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3101 = (_3026 * _3003) * (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) / ((_3071 * _3071) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_84_pred = _3027 * _2870.z;
                                frontier_phi_84_pred_1 = _3027 * _2870.y;
                                frontier_phi_84_pred_2 = _3027 * _2870.x;
                                frontier_phi_84_pred_3 = _3101 * _2882.z;
                                frontier_phi_84_pred_4 = _3101 * _2882.y;
                                frontier_phi_84_pred_5 = _3101 * _2882.x;
                            }
                            else
                            {
                                frontier_phi_84_pred = 0.0;
                                frontier_phi_84_pred_1 = 0.0;
                                frontier_phi_84_pred_2 = 0.0;
                                frontier_phi_84_pred_3 = 0.0;
                                frontier_phi_84_pred_4 = 0.0;
                                frontier_phi_84_pred_5 = 0.0;
                            }
                            _3110 = frontier_phi_84_pred;
                            _3109 = frontier_phi_84_pred_1;
                            _3108 = frontier_phi_84_pred_2;
                            _3107 = frontier_phi_84_pred_3;
                            _3106 = frontier_phi_84_pred_4;
                            _3105 = frontier_phi_84_pred_5;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2809 = _3105 + _2822;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            if (_2829 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2829;
                                continue;
                            }
                        }
                        frontier_phi_78_pred = _2814;
                        frontier_phi_78_pred_1 = _2813;
                        frontier_phi_78_pred_2 = _2812;
                        frontier_phi_78_pred_3 = _2811;
                        frontier_phi_78_pred_4 = _2810;
                        frontier_phi_78_pred_5 = _2809;
                    }
                    _2451 = frontier_phi_78_pred;
                    _2449 = frontier_phi_78_pred_1;
                    _2447 = frontier_phi_78_pred_2;
                    _2445 = frontier_phi_78_pred_3;
                    _2443 = frontier_phi_78_pred_4;
                    _2441 = frontier_phi_78_pred_5;
                    uint _2607 = _2606 + 1u;
                    if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2600 = _2441;
                        _2601 = _2443;
                        _2602 = _2445;
                        _2603 = _2447;
                        _2604 = _2449;
                        _2605 = _2451;
                        _2606 = _2607;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2447;
                frontier_phi_59_60_ladder_1 = _2451;
                frontier_phi_59_60_ladder_2 = _2449;
                frontier_phi_59_60_ladder_3 = _2445;
                frontier_phi_59_60_ladder_4 = _2443;
                frontier_phi_59_60_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_59_60_ladder = _2326;
                frontier_phi_59_60_ladder_1 = _2330;
                frontier_phi_59_60_ladder_2 = _2328;
                frontier_phi_59_60_ladder_3 = _2324;
                frontier_phi_59_60_ladder_4 = _2322;
                frontier_phi_59_60_ladder_5 = _2320;
            }
            _2440 = frontier_phi_59_60_ladder_5;
            _2442 = frontier_phi_59_60_ladder_4;
            _2444 = frontier_phi_59_60_ladder_3;
            _2446 = frontier_phi_59_60_ladder;
            _2448 = frontier_phi_59_60_ladder_2;
            _2450 = frontier_phi_59_60_ladder_1;
        }
        float _2455 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2230 = (_2455 * _2446) + _1667;
        _2232 = (_2455 * _2448) + _1669;
        _2234 = (_2455 * _2450) + _1671;
        _2236 = ((_2440 * _471) * _2455) + _2012;
        _2238 = ((_2442 * _473) * _2455) + _2014;
        _2240 = ((_2444 * _474) * _2455) + _2016;
    }
    else
    {
        _2230 = _1667;
        _2232 = _1669;
        _2234 = _1671;
        _2236 = _2012;
        _2238 = _2014;
        _2240 = _2016;
    }
    float _4150 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4161 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4172 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4183 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _2258 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2230 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486))) + ((_2236 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2259 = ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2232 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486))) + ((_2238 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2260 = ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2234 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _486))) + ((_2240 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2265 = cbInstanceData._m0[_445 + 6u].w * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)));
    float _2270 = _404 / cbSceneParam._m0[86u].x;
    float _2271 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2285 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2287 = _2285.x;
    float _2288 = _2285.y;
    float _2289 = _2285.z;
    float _2290 = _2285.w;
    float _2382;
    float _2384;
    float _2386;
    float _2388;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2345 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2346 = _2345 / _332;
        float _2357 = _2346 * _385;
        float _2358 = _386 * _2346;
        float _2359 = (-0.0) - _2358;
        float _2360 = _2346 * _387;
        float _2362 = (cbSceneParam._m0[77u].w * _2359) / _2345;
        float _2363 = _2362 + cbSceneParam._m0[79u].w;
        float _2364 = cbSceneParam._m0[79u].w - _2358;
        float _2370 = sqrt(((_2357 * _2357) + (_2358 * _2358)) + (_2360 * _2360));
        float _2373 = (1.0 - (cbSceneParam._m0[77u].w / _2345)) * _2370;
        float _2378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2359 - _2362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2363 > 0.0) ? exp2(_2378 * _2363) : (2.0 - exp2(_2380 * _2363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2373;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : max(_2363, _2364));
            float _2503 = isnan(_2364) ? _2363 : (isnan(_2363) ? _2364 : min(_2363, _2364));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2557 = ((abs(_2370 / _2359) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2378 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2378 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2380 * _2512) - exp2(_2380 * _2513)) * _2501))) + (_2373 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2270, _2271, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2290);
        _2382 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2287;
        _2384 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2288;
        _2386 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2289;
        _2388 = _2568 * _2290;
    }
    else
    {
        _2382 = _2287;
        _2384 = _2288;
        _2386 = _2289;
        _2388 = _2290;
    }
    bool _2595;
    vec4 _2398;
    vec4 _2420;
    float _2422;
    float _2426;
    float _2427;
    float _2428;
    float _2429;
    bool _2439;
    for (;;)
    {
        _2398 = cbMatDynParam._m0[0u];
        float _2400 = roundEven(_2398.y);
        bool _2401 = _2400 == 3.0;
        float _2402 = log2(_2388);
        float _2409 = exp2(_2402 * cbSceneParam._m0[78u].x) * _2258;
        float _2410 = exp2(_2402 * cbSceneParam._m0[78u].y) * _2259;
        float _2411 = exp2(_2402 * cbSceneParam._m0[78u].z) * _2260;
        float _2418 = _398 + (-0.5);
        _2420 = cbMtdParam._m0[1u];
        _2422 = _2420.y * _2418;
        float _2425 = (_2400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2426 = _2425 * (_2401 ? _2409 : (_2409 + (cbSceneParam._m0[72u].w * _2382)));
        _2427 = _2425 * (_2401 ? _2410 : (_2410 + (cbSceneParam._m0[72u].w * _2384)));
        _2428 = _2425 * (_2401 ? _2411 : (_2411 + (cbSceneParam._m0[72u].w * _2386)));
        _2429 = _2418 * 0.999000012874603271484375;
        _2439 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2439)
        {
            if ((cbInstanceData._m0[_445 + 7u].x + _2429) < 0.5)
            {
                _2595 = true;
                break;
            }
        }
        uint _2536 = _447 + uint(_2398.w);
        if ((cbInstanceData._m0[_2536].w < 1.0) && ((cbInstanceData._m0[_2536].w + _2429) < 0.5))
        {
            _2595 = true;
            break;
        }
        if ((_2422 + _237) < _2420.x)
        {
            _2595 = true;
            break;
        }
        _2595 = false;
        break;
    }
    float _2800;
    if (_2595)
    {
        discard_state = true;
        _2800 = 0.0;
    }
    else
    {
        _2800 = _2265;
    }
    SV_Target.x = _2426;
    SV_Target.y = _2427;
    SV_Target.z = _2428;
    SV_Target.w = _2800;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2265;
    discard_exit();
}


