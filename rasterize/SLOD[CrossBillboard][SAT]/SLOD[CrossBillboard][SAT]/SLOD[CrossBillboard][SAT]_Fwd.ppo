#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_17;
layout(set = 0, binding = 1) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_18;
layout(set = 0, binding = 2) uniform texture2D SLOD_CrossBillboard_SAT_snp_0_Texture2D_19;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 4, component = 3) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _860;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.w;
    float _238 = 1.0 / _237;
    float _240 = _231.x * _238;
    float _241 = _238 * _231.y;
    float _242 = _238 * _231.z;
    vec4 _254 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _254.x * _238;
    vec4 _269 = texture(sampler2D(SLOD_CrossBillboard_SAT_snp_0_Texture2D_19, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _277 = (_269.x * 2.0) + (-1.0);
    float _279 = (_269.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3209 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    float _286 = _269.z * _238;
    float _289 = fma(_285, _215, fma(_279, _207 * TANGENT.x, (_193 * _186) * _277));
    float _292 = fma(_285, _216, fma(_279, _207 * TANGENT.y, (_193 * _187) * _277));
    float _295 = fma(_285, _217, fma(_279, _207 * TANGENT.z, (_193 * _188) * _277));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3220 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _303 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _304 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _3242 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3253 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3264 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3275 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _308 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    if (!(!(texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w > TEXCOORD_9)))
    {
        discard_state = true;
    }
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _425 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _428 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = (_441 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3286 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _456 = 1.0 - _308;
    float _457 = _453 * _456;
    float _458 = _454 * _456;
    float _459 = _455 * _456;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _308;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _308;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _308;
    float _467 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _482 = _479.x * TEXCOORD.z;
    float _483 = dot(vec3(_300, _301, _302), vec3(_392, _393, _394));
    float _486 = _483 * 2.0;
    float _490 = (_486 * _300) - _392;
    float _491 = (_486 * _301) - _393;
    float _492 = (_486 * _302) - _394;
    float _496 = abs(dot(vec3(_392, _393, _394), vec3(_300, _301, _302)));
    float _3319 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = sqrt(_304);
    float _511 = exp2((_498 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_498 * 3.0));
    float _517 = (1.0 - _511) * ((_498 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _518 = _511 * _498;
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _859;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _584 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _588 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _592 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _617 = _546 + _300;
        float _618 = _550 + _301;
        float _619 = _554 + _302;
        float _629 = fma(_619, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617)) - _584;
        float _630 = fma(_619, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617)) - _588;
        float _631 = fma(_619, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617)) - _592;
        float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
        float _648 = ((_635 * _629) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_584 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _649 = ((_635 * _630) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_588 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_635 * _631) / cbModelParam._m0[34u].z) + ((((((_592 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_648, _649, _650), 0.0);
        float _687 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_653.x + (-0.5));
        float _689 = _687 * (_653.y + (-0.5));
        float _690 = _687 * (_653.z + (-0.5));
        float _697 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_660.x + (-0.5));
        float _699 = _697 * (_660.y + (-0.5));
        float _700 = _697 * (_660.z + (-0.5));
        float _707 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_667.x + (-0.5));
        float _709 = _707 * (_667.y + (-0.5));
        float _710 = _707 * (_667.z + (-0.5));
        float _717 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_674.x + (-0.5));
        float _719 = _717 * (_674.y + (-0.5));
        float _720 = _717 * (_674.z + (-0.5));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = _688 * 0.5;
        float _725 = _698 * 0.5;
        float _726 = _708 * 0.5;
        float _727 = dot(vec3(_724, _725, _726), vec3(_724, _725, _726));
        float _732 = (_727 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_727);
        float _741 = (dot(vec3(_300, _301, _302), vec3(_732 * _724, _732 * _725, _732 * _726)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _751 = sqrt(((_725 * _725) + (_724 * _724)) + (_726 * _726)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3367 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_753 + 1.0))) + _758) * _721;
        float _768 = _689 * 0.5;
        float _769 = _699 * 0.5;
        float _770 = _709 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_300, _301, _302), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3400 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_795 + 1.0))) + _800) * _722;
        float _810 = _690 * 0.5;
        float _811 = _700 * 0.5;
        float _812 = _710 * 0.5;
        float _813 = dot(vec3(_810, _811, _812), vec3(_810, _811, _812));
        float _818 = (_813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_813);
        float _826 = (dot(vec3(_300, _301, _302), vec3(_818 * _810, _818 * _811, _818 * _812)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _835 = sqrt(((_811 * _811) + (_810 * _810)) + (_812 * _812)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _837 = _836 * 2.0;
        float _841 = (1.0 - _836) / (_836 + 1.0);
        float _3433 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _851 = ((((1.0 - _842) * (_837 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_837 + 1.0))) + _842) * _723;
        _859 = _690;
        _861 = _689;
        _862 = _688;
        _863 = _700;
        _864 = _699;
        _865 = _698;
        _866 = _710;
        _867 = _709;
        _868 = _708;
        _869 = _723;
        _870 = _722;
        _871 = _721;
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0)));
    }
    else
    {
        _859 = _860;
        _861 = _860;
        _862 = _860;
        _863 = _860;
        _864 = _860;
        _865 = _860;
        _866 = _860;
        _867 = _860;
        _868 = _860;
        _869 = _860;
        _870 = _860;
        _871 = _860;
        _872 = 0.0;
        _873 = 0.0;
        _874 = 0.0;
    }
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _904 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _908 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _931 = _546 + _300;
        float _932 = _550 + _301;
        float _933 = _554 + _302;
        float _943 = fma(_933, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931)) - _900;
        float _944 = fma(_933, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931)) - _904;
        float _945 = fma(_933, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931)) - _908;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_900 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_904 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[35u].z) + ((((((_908 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _999 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_966.x + (-0.5));
        float _1001 = _999 * (_966.y + (-0.5));
        float _1002 = _999 * (_966.z + (-0.5));
        float _1009 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_973.x + (-0.5));
        float _1011 = _1009 * (_973.y + (-0.5));
        float _1012 = _1009 * (_973.z + (-0.5));
        float _1019 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_980.x + (-0.5));
        float _1021 = _1019 * (_980.y + (-0.5));
        float _1022 = _1019 * (_980.z + (-0.5));
        float _1029 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_987.x + (-0.5));
        float _1031 = _1029 * (_987.y + (-0.5));
        float _1032 = _1029 * (_987.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_300, _301, _302), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3496 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_1063 + 1.0))) + _1068) * _1033;
        float _1078 = _1001 * 0.5;
        float _1079 = _1011 * 0.5;
        float _1080 = _1021 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_300, _301, _302), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3529 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1105 + 1.0))) + _1110) * _1034;
        float _1120 = _1002 * 0.5;
        float _1121 = _1012 * 0.5;
        float _1122 = _1022 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_300, _301, _302), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3562 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1147 + 1.0))) + _1152) * _1035;
        _1169 = _1002;
        _1170 = _1001;
        _1171 = _1000;
        _1172 = _1012;
        _1173 = _1011;
        _1174 = _1010;
        _1175 = _1022;
        _1176 = _1021;
        _1177 = _1020;
        _1178 = _1035;
        _1179 = _1034;
        _1180 = _1033;
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _860;
        _1170 = _860;
        _1171 = _860;
        _1172 = _860;
        _1173 = _860;
        _1174 = _860;
        _1175 = _860;
        _1176 = _860;
        _1177 = _860;
        _1178 = _860;
        _1179 = _860;
        _1180 = _860;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _872)) + _872;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1216 = fma(_1195, cbSceneParam._m0[89u].z, fma(_1194, cbSceneParam._m0[89u].y, _1193 * cbSceneParam._m0[89u].x));
    float _1219 = fma(_1195, cbSceneParam._m0[90u].z, fma(_1194, cbSceneParam._m0[90u].y, _1193 * cbSceneParam._m0[90u].x));
    float _1222 = fma(_1195, cbSceneParam._m0[91u].z, fma(_1194, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1193));
    float _1237 = _490 * 0.5;
    float _1238 = _491 * 0.5;
    float _1239 = _492 * 0.5;
    float _1240 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1243 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1246 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1280;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1253 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_859, _863, _866, _869));
        float _1257 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_861, _864, _867, _870));
        float _1261 = dot(vec4(_1237, _1238, _1239, 1.0), vec4(_862, _865, _868, _871));
        float _1268 = dot(vec4(cbModelParam._m0[39u]), vec4(_1237, _1238, _1239, 1.0));
        _1280 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1280 = 1.0;
    }
    float _1291;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1282 = dot(vec4(cbModelParam._m0[40u]), vec4(_1237, _1238, _1239, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1282) ? 0.0 : (isnan(0.0) ? _1282 : max(0.0, _1282))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1295 = (_1291 * cbModelParam._m0[1u].x) + (_1280 * (1.0 - cbModelParam._m0[1u].x));
    float _1305 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1306 = isnan(_1305) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1305 : min(cbModelParam._m0[25u].z, _1305));
    float _1388;
    float _1390;
    float _1392;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1355 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1359 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1363 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1366 = fma(_492, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490));
        float _1369 = fma(_492, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490));
        float _1372 = fma(_492, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490));
        float _1400;
        if (_1366 > 0.0)
        {
            _1400 = abs((1.0 - _1355) / _1366);
        }
        else
        {
            float frontier_phi_18_16_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_18_16_ladder = abs((_1355 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_18_16_ladder = 5000.0;
            }
            _1400 = frontier_phi_18_16_ladder;
        }
        float _1608;
        if (_1369 > 0.0)
        {
            _1608 = abs((1.0 - _1359) / _1369);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1359 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1608 = frontier_phi_27_23_ladder;
        }
        float _1862;
        if (_1372 > 0.0)
        {
            _1862 = abs((1.0 - _1363) / _1372);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1363 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1862 = frontier_phi_39_34_ladder;
        }
        float _1864 = isnan(_1608) ? _1400 : (isnan(_1400) ? _1608 : min(_1400, _1608));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1366) + _1355;
        float _1870 = (_1865 * _1369) + _1359;
        float _1871 = (_1865 * _1372) + _1363;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_17_39_ladder;
        float frontier_phi_17_39_ladder_1;
        float frontier_phi_17_39_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_17_39_ladder = 0.0;
            frontier_phi_17_39_ladder_1 = 0.0;
            frontier_phi_17_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1306);
            frontier_phi_17_39_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_17_39_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1388 = frontier_phi_17_39_ladder_2;
        _1390 = frontier_phi_17_39_ladder_1;
        _1392 = frontier_phi_17_39_ladder;
    }
    else
    {
        vec4 _1376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_490, _491, _492), _1306);
        _1388 = _1376.x * cbModelParam._m0[1u].y;
        _1390 = _1376.y * cbModelParam._m0[1u].y;
        _1392 = _1376.z * cbModelParam._m0[1u].y;
    }
    float _1396 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1397 = isnan(_1396) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1396 : min(cbModelParam._m0[25u].w, _1396));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_492, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490));
        float _1468 = fma(_492, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490));
        float _1471 = fma(_492, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490));
        float _1613;
        if (_1465 > 0.0)
        {
            _1613 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_29_25_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_29_25_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_29_25_ladder = 5000.0;
            }
            _1613 = frontier_phi_29_25_ladder;
        }
        float _1889;
        if (_1468 > 0.0)
        {
            _1889 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_41_36_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_41_36_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_41_36_ladder = 5000.0;
            }
            _1889 = frontier_phi_41_36_ladder;
        }
        float _2102;
        if (_1471 > 0.0)
        {
            _2102 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2102 = frontier_phi_50_47_ladder;
        }
        float _2104 = isnan(_1889) ? _1613 : (isnan(_1613) ? _1889 : min(_1613, _1889));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1465) + _1454;
        float _2110 = (_2105 * _1468) + _1458;
        float _2111 = (_2105 * _1471) + _1462;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2112;
        float _2115 = _2112 + 1.0;
        float frontier_phi_26_50_ladder;
        float frontier_phi_26_50_ladder_1;
        float frontier_phi_26_50_ladder_2;
        if ((_2111 > _2115) || ((_2111 < _2113) || ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 < _2113) || (_2109 > _2115))))))
        {
            frontier_phi_26_50_ladder = 0.0;
            frontier_phi_26_50_ladder_1 = 0.0;
            frontier_phi_26_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2111, cbModelParam._m0[17u].z, fma(_2110, cbModelParam._m0[17u].y, _2109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2111, cbModelParam._m0[18u].z, fma(_2110, cbModelParam._m0[18u].y, _2109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2111, cbModelParam._m0[19u].z, fma(_2110, cbModelParam._m0[19u].y, _2109 * cbModelParam._m0[19u].x))), _1397);
            frontier_phi_26_50_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_26_50_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_26_50_ladder_2;
        _1492 = frontier_phi_26_50_ladder_1;
        _1494 = frontier_phi_26_50_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_490, _491, _492), _1397);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1507 = (((_517 * _467) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1490 - _1388)) + _1388);
    float _1509 = (((_517 * _469) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1492 - _1390)) + _1390);
    float _1511 = (((_517 * _470) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1494 - _1392)) + _1392);
    float _1514 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1507 * cbSceneParam._m0[91u].x));
    uvec4 _1530 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1532 = _1530.x * 14u;
    uint _1533 = _1532 + 13u;
    float _1540 = _482 + (-1.0);
    float _1545 = (cbLight._m0[_1533].x * _1540) + 1.0;
    float _1546 = (cbLight._m0[_1533].y * _1540) + 1.0;
    float _1547 = (cbLight._m0[_1533].z * _1540) + 1.0;
    float _1548 = (cbLight._m0[_1533].w * _1540) + 1.0;
    uint _1549 = _1532 + 5u;
    float _1555 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1559 = _1532 + 4u;
    float _1566 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
    uint _1570 = _1532 | 1u;
    float _1581 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_300, _301, _302));
    float _1584 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_300, _301, _302));
    float _3698 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _3709 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
    float _1589 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1591 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1598 = ((cbLight._m0[_1549].x * _1555) * _1591) + ((cbLight._m0[_1559].x * _1566) * _1589);
    float _1599 = ((_1555 * cbLight._m0[_1549].y) * _1591) + ((_1566 * cbLight._m0[_1559].y) * _1589);
    float _1600 = ((_1555 * cbLight._m0[_1549].z) * _1591) + ((_1566 * cbLight._m0[_1559].z) * _1589);
    uvec4 _1605 = floatBitsToUint(cbLight._m0[_1532 + 12u]);
    bool _1607 = _1605.x == 0u;
    float _1618;
    float _1620;
    float _1622;
    if (_1607)
    {
        _1618 = _1598;
        _1620 = _1599;
        _1622 = _1600;
    }
    else
    {
        uint _1626 = _1532 + 6u;
        float _1642 = (dot(vec3(cbLight._m0[_1532 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3720 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1645 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1618 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1598;
        _1620 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1599;
        _1622 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1600;
    }
    bool _1625 = _1605.y == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1625)
    {
        _1663 = _1618;
        _1665 = _1620;
        _1667 = _1622;
    }
    else
    {
        uint _1833 = _1532 + 7u;
        float _1849 = (dot(vec3(cbLight._m0[_1532 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3736 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1852 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1663 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1618;
        _1665 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1620;
        _1667 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1622;
    }
    uint _1670 = _1532 + 8u;
    float _1683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _304) * 0.949999988079071044921875);
    float _1684 = _1683 * _1683;
    float _1685 = cbLight._m0[_1532].x + _392;
    float _1686 = cbLight._m0[_1532].y + _393;
    float _1687 = cbLight._m0[_1532].z + _394;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1692 = _1691 * _1685;
    float _1693 = _1691 * _1686;
    float _1694 = _1691 * _1687;
    float _1695 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1532].xyz));
    float _3752 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _1699 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1700 = dot(vec3(_300, _301, _302), vec3(_1692, _1693, _1694));
    float _3774 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1692, _1693, _1694));
    float _3785 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1708 = _1684 * _1684;
    float _1712 = ((_1703 * _1703) * (_1708 + (-1.0))) + 1.0;
    float _1720 = exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0);
    float _1721 = 0.959999978542327880859375 - _464;
    float _1723 = 0.959999978542327880859375 - _465;
    float _1724 = 0.959999978542327880859375 - _466;
    float _1731 = 1.0 - _1684;
    float _1742 = (0.5 / (((_1699 * ((_1698 * _1731) + _1684)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1731) + _1684) * _1698))) * _1698;
    float _3796 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1708 / ((_1712 * _1712) * 3.141590118408203125));
    uint _1755 = _1532 + 9u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1570].w)) * _304) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1570].x + _392;
    float _1769 = cbLight._m0[_1570].y + _393;
    float _1770 = cbLight._m0[_1570].z + _394;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1570].xyz));
    float _3807 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1782 = dot(vec3(_300, _301, _302), vec3(_1775, _1776, _1777));
    float _3818 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1570].xyz), vec3(_1775, _1776, _1777));
    float _3829 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1767 * _1767;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1801 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
    float _1808 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1699 * ((_1781 * _1808) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1808) + _1767) * _1781))) * _1781;
    float _3840 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    float _1830 = (((((_1801 * _1721) + _467) * cbLight._m0[_1755].x) * _1820) * _1555) + (((((_1720 * _1721) + _467) * cbLight._m0[_1670].x) * _1744) * _1566);
    float _1831 = (((((_1801 * _1723) + _469) * cbLight._m0[_1755].y) * _1820) * _1555) + (((((_1720 * _1723) + _469) * cbLight._m0[_1670].y) * _1744) * _1566);
    float _1832 = (((((_1801 * _1724) + _470) * cbLight._m0[_1755].z) * _1820) * _1555) + (((((_1720 * _1724) + _470) * cbLight._m0[_1670].z) * _1744) * _1566);
    float _1894;
    float _1896;
    float _1898;
    if (_1607)
    {
        _1894 = _1830;
        _1896 = _1831;
        _1898 = _1832;
    }
    else
    {
        uint _1900 = _1532 + 2u;
        uint _1904 = _1532 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _304) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _392;
        float _1921 = cbLight._m0[_1900].y + _393;
        float _1922 = cbLight._m0[_1900].z + _394;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1900].xyz));
        float _3851 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1934 = dot(vec3(_300, _301, _302), vec3(_1927, _1928, _1929));
        float _3862 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3873 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * 5.0);
        float _1960 = 1.0 - _1919;
        float _1970 = (0.5 / (((_1699 * ((_1933 * _1960) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1960) + _1919) * _1933))) * _1933;
        float _3884 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1972 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1973 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
        _1894 = (((((_1953 * _1721) + _467) * cbLight._m0[_1904].x) * _1972) * _1973) + _1830;
        _1896 = (((((_1953 * _1723) + _469) * cbLight._m0[_1904].y) * _1972) * _1973) + _1831;
        _1898 = (((((_1953 * _1724) + _470) * cbLight._m0[_1904].z) * _1972) * _1973) + _1832;
    }
    float _2008;
    float _2010;
    float _2012;
    if (_1625)
    {
        _2008 = _1894;
        _2010 = _1896;
        _2012 = _1898;
    }
    else
    {
        uint _2019 = _1532 + 3u;
        uint _2023 = _1532 + 11u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _304) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _392;
        float _2040 = cbLight._m0[_2019].y + _393;
        float _2041 = cbLight._m0[_2019].z + _394;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2019].xyz));
        float _3900 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2053 = dot(vec3(_300, _301, _302), vec3(_2046, _2047, _2048));
        float _3911 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3922 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1699 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _2079) + _2038) * _2052))) * _2052;
        float _3933 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _2008 = (((((_2072 * _1721) + _467) * cbLight._m0[_2023].x) * _2091) * _2092) + _1894;
        _2010 = (((((_2072 * _1723) + _469) * cbLight._m0[_2023].y) * _2091) * _2092) + _1896;
        _2012 = (((((_2072 * _1724) + _470) * cbLight._m0[_2023].z) * _2091) * _2092) + _1898;
    }
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    if (_1530.y == 0u)
    {
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2167;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2167;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2167;
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.x;
        uint _2194 = uint((float(_2182.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2183))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2183)));
        float _2204 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2205 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        uint _2208 = uint(isnan(14.0) ? _2205 : (isnan(_2205) ? 14.0 : min(_2205, 14.0)));
        uvec4 _2213 = texelFetch(g_lightClusterGridBuffer, int(((_2208 << 2u) + (_2194 << 6u)) >> 2u));
        uint _2214 = _2213.x;
        uint _2215 = _2182.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2215 >> 4u) & 15u)) + 4294967295u) & _2214) == 0u) || ((_2215 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            uint _2466 = 0u;
            uint _2475;
            bool _2476;
            for (;;)
            {
                _2475 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                _2476 = _2475 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2476)
                {
                    frontier_phi_65_pred = _2465;
                    frontier_phi_65_pred_1 = _2464;
                    frontier_phi_65_pred_2 = _2463;
                    frontier_phi_65_pred_3 = _2462;
                    frontier_phi_65_pred_4 = _2461;
                    frontier_phi_65_pred_5 = _2460;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2475;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2466 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2168;
                        float _2651 = _2610.y - _2169;
                        float _2652 = _2610.z - _2170;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_422, _425, _428), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3959 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2168;
                        float _2686 = (-0.0) - _2169;
                        float _2687 = (-0.0) - _2170;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _498;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_422, _425, _428), vec3(_2692, _2693, _2694));
                        float _3975 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2727 = dot(vec3(_422, _425, _428), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _3986 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _3997 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _4008 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2519 = (_2681 * _2629.x) + _2587;
                        _2520 = (_2681 * _2629.y) + _2588;
                        _2521 = (_2681 * _2629.z) + _2589;
                        _2516 = (_2762 * _2646.x) + _2584;
                        _2517 = (_2762 * _2646.y) + _2585;
                        _2518 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_65_pred = _2521;
                    frontier_phi_65_pred_1 = _2520;
                    frontier_phi_65_pred_2 = _2519;
                    frontier_phi_65_pred_3 = _2518;
                    frontier_phi_65_pred_4 = _2517;
                    frontier_phi_65_pred_5 = _2516;
                }
                _2327 = frontier_phi_65_pred;
                _2325 = frontier_phi_65_pred_1;
                _2323 = frontier_phi_65_pred_2;
                _2321 = frontier_phi_65_pred_3;
                _2319 = frontier_phi_65_pred_4;
                _2317 = frontier_phi_65_pred_5;
                uint _2467 = _2466 + 1u;
                if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2460 = _2317;
                    _2461 = _2319;
                    _2462 = _2321;
                    _2463 = _2323;
                    _2464 = _2325;
                    _2465 = _2327;
                    _2466 = _2467;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((4294967295u << _2333) & _2214) == 0u)
        {
            _2428 = _2316;
            _2430 = _2318;
            _2432 = _2320;
            _2434 = _2322;
            _2436 = _2324;
            _2438 = _2326;
        }
        else
        {
            float _2453 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _2454 = _2453 * _2168;
            float _2455 = _2453 * _2169;
            float _2456 = _2453 * _2170;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2429;
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2567 = _2316;
                float _2568 = _2318;
                float _2569 = _2320;
                float _2570 = _2322;
                float _2571 = _2324;
                float _2572 = _2326;
                uint _2573 = _2333;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2583)
                    {
                        frontier_phi_71_pred = _2572;
                        frontier_phi_71_pred_1 = _2571;
                        frontier_phi_71_pred_2 = _2570;
                        frontier_phi_71_pred_3 = _2569;
                        frontier_phi_71_pred_4 = _2568;
                        frontier_phi_71_pred_5 = _2567;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        uint _2786 = _2582;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2856;
                        vec4 _2872;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2797 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2843 = (_2797 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2797 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2797 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2797 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_2170, _2907.z, fma(_2169, _2907.y, _2907.x * _2168)) + _2907.w;
                            _2920 = !((fma(_2170, _2888.z, fma(_2169, _2888.y, _2888.x * _2168)) + _2888.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2812.x - _2168;
                                float _2948 = _2812.y - _2169;
                                float _2949 = _2812.z - _2170;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2813 * _2813));
                                float _4019 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _2965 = sqrt(_2950) * _2828.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2971 = ((1.0 - _2968) * dot(vec3(_2954, _2955, _2956), vec3(_422, _425, _428))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_2170, _2856.z, fma(_2169, _2856.y, _2856.x * _2168)) + _2856.w) / _2919;
                                float _2979 = (fma(_2170, _2872.z, fma(_2169, _2872.y, _2872.x * _2168)) + _2872.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _4035 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2997 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                                float _2998 = 1.0 - _498;
                                float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                                float _3006 = _3005 * _3005;
                                float _3007 = _3006 * _3006;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3010 = _2956 - _2456;
                                float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                                float _3018 = dot(vec3(_422, _425, _428), vec3((-0.0) - _2454, (-0.0) - _2455, (-0.0) - _2456));
                                float _4046 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                                float _3022 = dot(vec3(_422, _425, _428), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                                float _4057 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                                float _3030 = _2967 * _3006;
                                float _3031 = _3030 * _3030;
                                float _3037 = ((1.0 - _3031) * dot(vec3(_422, _425, _428), vec3(_2954, _2955, _2956))) + _3031;
                                float _4068 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3039 = 1.0 - _3006;
                                float _3049 = (0.5 / (((_3038 * ((_3021 * _3039) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3006) * _3021))) * _3038;
                                float _4079 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3059 = (_2984 * _2961) * (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) / ((_3029 * _3029) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2985 * _2828.z;
                                frontier_phi_77_pred_1 = _2985 * _2828.y;
                                frontier_phi_77_pred_2 = _2985 * _2828.x;
                                frontier_phi_77_pred_3 = _3059 * _2840.z;
                                frontier_phi_77_pred_4 = _3059 * _2840.y;
                                frontier_phi_77_pred_5 = _3059 * _2840.x;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3068 = frontier_phi_77_pred;
                            _3067 = frontier_phi_77_pred_1;
                            _3066 = frontier_phi_77_pred_2;
                            _3065 = frontier_phi_77_pred_3;
                            _3064 = frontier_phi_77_pred_4;
                            _3063 = frontier_phi_77_pred_5;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2772;
                        frontier_phi_71_pred_1 = _2771;
                        frontier_phi_71_pred_2 = _2770;
                        frontier_phi_71_pred_3 = _2769;
                        frontier_phi_71_pred_4 = _2768;
                        frontier_phi_71_pred_5 = _2767;
                    }
                    _2439 = frontier_phi_71_pred;
                    _2437 = frontier_phi_71_pred_1;
                    _2435 = frontier_phi_71_pred_2;
                    _2433 = frontier_phi_71_pred_3;
                    _2431 = frontier_phi_71_pred_4;
                    _2429 = frontier_phi_71_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2429;
                        _2568 = _2431;
                        _2569 = _2433;
                        _2570 = _2435;
                        _2571 = _2437;
                        _2572 = _2439;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2439;
                frontier_phi_59_60_ladder_1 = _2437;
                frontier_phi_59_60_ladder_2 = _2435;
                frontier_phi_59_60_ladder_3 = _2433;
                frontier_phi_59_60_ladder_4 = _2431;
                frontier_phi_59_60_ladder_5 = _2429;
            }
            else
            {
                frontier_phi_59_60_ladder = _2326;
                frontier_phi_59_60_ladder_1 = _2324;
                frontier_phi_59_60_ladder_2 = _2322;
                frontier_phi_59_60_ladder_3 = _2320;
                frontier_phi_59_60_ladder_4 = _2318;
                frontier_phi_59_60_ladder_5 = _2316;
            }
            _2428 = frontier_phi_59_60_ladder_5;
            _2430 = frontier_phi_59_60_ladder_4;
            _2432 = frontier_phi_59_60_ladder_3;
            _2434 = frontier_phi_59_60_ladder_2;
            _2436 = frontier_phi_59_60_ladder_1;
            _2438 = frontier_phi_59_60_ladder;
        }
        float _2443 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2226 = (_2443 * _2434) + _1663;
        _2228 = (_2443 * _2436) + _1665;
        _2230 = (_2443 * _2438) + _1667;
        _2232 = ((_2428 * _467) * _2443) + _2008;
        _2234 = ((_2430 * _469) * _2443) + _2010;
        _2236 = ((_2432 * _470) * _2443) + _2012;
    }
    else
    {
        _2226 = _1663;
        _2228 = _1665;
        _2230 = _1667;
        _2232 = _2008;
        _2234 = _2010;
        _2236 = _2012;
    }
    float _4095 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4106 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4117 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4128 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _2261 = cbInstanceData._m0[_441 + 6u].w * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)));
    float _2266 = _400 / cbSceneParam._m0[86u].x;
    float _2267 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2283 = _2281.x;
    float _2284 = _2281.y;
    float _2285 = _2281.z;
    float _2286 = _2281.w;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2342 = _2341 / _332;
        float _2353 = _2342 * _385;
        float _2354 = _386 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2356 = _2342 * _387;
        float _2358 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2359 = _2358 + cbSceneParam._m0[79u].w;
        float _2360 = cbSceneParam._m0[79u].w - _2354;
        float _2366 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2356 * _2356));
        float _2369 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2366;
        float _2374 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2376 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2529;
        if (abs((_2355 - _2358) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2529 = ((((_2359 > 0.0) ? exp2(_2374 * _2359) : (2.0 - exp2(_2376 * _2359))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2369;
        }
        else
        {
            float _2489 = 1.0 / cbSceneParam._m0[80u].x;
            float _2490 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : max(_2359, _2360));
            float _2491 = isnan(_2360) ? _2359 : (isnan(_2359) ? _2360 : min(_2359, _2360));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            _2529 = ((abs(_2366 / _2355) * cbSceneParam._m0[80u].y) * ((((_2500 - _2501) * 2.0) - ((exp2(_2374 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)))) - exp2(_2374 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0))))) * _2489)) - ((exp2(_2376 * _2500) - exp2(_2376 * _2501)) * _2489))) + (_2369 * cbSceneParam._m0[80u].z);
        }
        vec4 _2531 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2266, _2267, 1.0), 0.0);
        float _2540 = exp2((_2529 * (-1.44269502162933349609375)) * (1.0 - _2531.w));
        float _2541 = log2(_2540);
        float _2557 = log2(_2286);
        _2378 = (exp2(_2557 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].x)) * _2531.x) / cbSceneParam._m0[78u].x)) + _2283;
        _2380 = (exp2(_2557 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].y)) * _2531.y) / cbSceneParam._m0[78u].y)) + _2284;
        _2382 = (exp2(_2557 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].z)) * _2531.z) / cbSceneParam._m0[78u].z)) + _2285;
        _2384 = _2540 * _2286;
    }
    else
    {
        _2378 = _2283;
        _2380 = _2284;
        _2382 = _2285;
        _2384 = _2286;
    }
    float _2396 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2397 = _2396 == 3.0;
    float _2398 = log2(_2384);
    float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2226 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _482))) + ((_2232 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1295)) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2228 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _482))) + ((_2234 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1295)) * cbPerFrame._m0[3u].x));
    float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2230 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _482))) + ((_2236 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1295)) * cbPerFrame._m0[3u].x));
    float _2416 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2416 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2378)));
    SV_Target.y = _2416 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2380)));
    SV_Target.z = _2416 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2382)));
    SV_Target.w = _2261;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2261;
    discard_exit();
}


