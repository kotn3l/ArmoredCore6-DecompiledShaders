#version 460

out float gl_CullDistance[1];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 12, std140) uniform cbInstanceSlodDataUBO
{
    vec4 _m0[52];
} cbInstanceSlodData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in vec4 COLOR_1;
layout(location = 4) in ivec2 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec3 TEXCOORD_1;
layout(location = 4) out vec2 TEXCOORD_4;
layout(location = 3, component = 3) out float TEXCOORD_9;

void main()
{
    uint _74 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_9 = 0.0;
    gl_CullDistance[0u] = 0.0;
    float _152 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _154 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _155 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _165 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _166 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _167 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _173 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _74;
    uvec4 _175 = texelFetch(g_InstanceIndexBuffer, int(_173));
    uint _176 = _175.x;
    uint _186 = (floatBitsToUint(cbInstanceData._m0[(_176 * 13u) + 4u]).x + uint(float(NORMAL.w))) * 3u;
    uint _193 = _186 + 1u;
    uint _200 = _186 + 2u;
    precise float _207 = POSITION.x * cbObjMatrix._m0[_186].x;
    precise float _208 = POSITION.y * cbObjMatrix._m0[_186].y;
    precise float _209 = _208 + _207;
    precise float _210 = POSITION.z * cbObjMatrix._m0[_186].z;
    precise float _211 = _210 + _209;
    precise float _212 = 1.0 * cbObjMatrix._m0[_186].w;
    precise float _214 = _212 + _211;
    precise float _215 = POSITION.x * cbObjMatrix._m0[_193].x;
    precise float _216 = POSITION.y * cbObjMatrix._m0[_193].y;
    precise float _217 = _216 + _215;
    precise float _218 = POSITION.z * cbObjMatrix._m0[_193].z;
    precise float _219 = _218 + _217;
    precise float _220 = 1.0 * cbObjMatrix._m0[_193].w;
    precise float _221 = _220 + _219;
    precise float _222 = POSITION.x * cbObjMatrix._m0[_200].x;
    precise float _223 = POSITION.y * cbObjMatrix._m0[_200].y;
    precise float _224 = _223 + _222;
    precise float _225 = POSITION.z * cbObjMatrix._m0[_200].z;
    precise float _226 = _225 + _224;
    precise float _227 = 1.0 * cbObjMatrix._m0[_200].w;
    precise float _228 = _227 + _226;
    float _232 = fma(_155, cbObjMatrix._m0[_186].z, fma(_154, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _152));
    float _235 = fma(_155, cbObjMatrix._m0[_193].z, fma(_154, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_193].x * _152));
    float _238 = fma(_155, cbObjMatrix._m0[_200].z, fma(_154, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * _152));
    float _244 = cbSceneParam._m0[3u].x - cbObjMatrix._m0[_186].w;
    float _245 = cbSceneParam._m0[3u].y - cbObjMatrix._m0[_193].w;
    float _246 = cbSceneParam._m0[3u].z - cbObjMatrix._m0[_200].w;
    float _250 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _251 = _244 * _250;
    float _252 = _245 * _250;
    float _253 = _246 * _250;
    uint _254 = _74 * 26u;
    uint _255 = _254 + 24u;
    uint _263 = _254 + 25u;
    float _270 = dot(vec3(cbObjMatrix._m0[_186].x, cbObjMatrix._m0[_193].x, cbObjMatrix._m0[_200].x), vec3(_251, _252, _253));
    float _276 = dot(vec3(cbObjMatrix._m0[_186].z, cbObjMatrix._m0[_193].z, cbObjMatrix._m0[_200].z), vec3(_251, _252, _253));
    float _282 = (_276 * cbObjMatrix._m0[_186].z) + (_270 * cbObjMatrix._m0[_186].x);
    float _283 = (_276 * cbObjMatrix._m0[_193].z) + (_270 * cbObjMatrix._m0[_193].x);
    float _284 = (_276 * cbObjMatrix._m0[_200].z) + (_270 * cbObjMatrix._m0[_200].x);
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _292 = dot(vec3(_282 * _288, _283 * _288, _284 * _288), vec3(_232, _235, _238));
    bool _297 = abs(_154) > 0.999000012874603271484375;
    bool _299 = !_297;
    float _302;
    if ((_292 <= cbInstanceSlodData._m0[_255].x) && _299)
    {
        _302 = -1.0;
    }
    else
    {
        float _394 = inversesqrt(dot(vec3(cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_200].y), vec3(cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_200].y)));
        float _401 = abs(dot(vec3(_251, _252, _253), vec3(_394 * cbObjMatrix._m0[_186].y, _394 * cbObjMatrix._m0[_193].y, _394 * cbObjMatrix._m0[_200].y)));
        bool _402 = _401 > 0.707106769084930419921875;
        float _417;
        if (_297 && _402)
        {
            float _405 = cbInstanceSlodData._m0[_255].w - cbInstanceSlodData._m0[_255].z;
            float _411 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _405 : (isnan(_405) ? 9.9999997473787516355514526367188e-05 : max(_405, 9.9999997473787516355514526367188e-05)))) * (_401 - cbInstanceSlodData._m0[_255].w)) + 1.0;
            float _412 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
            _417 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
        }
        else
        {
            float frontier_phi_5_4_ladder;
            if ((_401 <= cbInstanceSlodData._m0[_263].z) && (_402 && _299))
            {
                float _423 = cbInstanceSlodData._m0[_263].y - cbInstanceSlodData._m0[_263].x;
                float _428 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _423 : (isnan(_423) ? 9.9999997473787516355514526367188e-05 : max(_423, 9.9999997473787516355514526367188e-05)))) * (_401 - cbInstanceSlodData._m0[_263].y)) + 1.0;
                float _429 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
                float _431 = 1.0 - (isnan(1.0) ? _429 : (isnan(_429) ? 1.0 : min(_429, 1.0)));
                float _432 = cbInstanceSlodData._m0[_255].y - cbInstanceSlodData._m0[_255].x;
                float _437 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _432 : (isnan(_432) ? 9.9999997473787516355514526367188e-05 : max(_432, 9.9999997473787516355514526367188e-05)))) * (_292 - cbInstanceSlodData._m0[_255].y)) + 1.0;
                float _438 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
                float _439 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
                frontier_phi_5_4_ladder = isnan(_431) ? _439 : (isnan(_439) ? _431 : min(_439, _431));
            }
            else
            {
                float frontier_phi_5_4_ladder_7_ladder;
                if (_297 || _402)
                {
                    frontier_phi_5_4_ladder_7_ladder = -1.0;
                }
                else
                {
                    float _441 = cbInstanceSlodData._m0[_255].y - cbInstanceSlodData._m0[_255].x;
                    float _446 = ((1.0 / (isnan(9.9999997473787516355514526367188e-05) ? _441 : (isnan(_441) ? 9.9999997473787516355514526367188e-05 : max(_441, 9.9999997473787516355514526367188e-05)))) * (_292 - cbInstanceSlodData._m0[_255].y)) + 1.0;
                    float _447 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
                    frontier_phi_5_4_ladder_7_ladder = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
                }
                frontier_phi_5_4_ladder = frontier_phi_5_4_ladder_7_ladder;
            }
            _417 = frontier_phi_5_4_ladder;
        }
        float _420 = isnan(-1.0) ? _417 : (isnan(_417) ? (-1.0) : max(_417, -1.0));
        _302 = (isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0))) + 0.0625;
    }
    precise float _317 = _214 - cbSceneParam._m0[3u].x;
    precise float _318 = _221 - cbSceneParam._m0[3u].y;
    precise float _319 = _228 - cbSceneParam._m0[3u].z;
    precise float _345 = _317 * cbSceneParam._m0[24u].x;
    precise float _346 = _318 * cbSceneParam._m0[24u].y;
    precise float _347 = _346 + _345;
    precise float _348 = _319 * cbSceneParam._m0[24u].z;
    precise float _349 = _348 + _347;
    precise float _350 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _351 = _350 + _349;
    precise float _352 = _317 * cbSceneParam._m0[25u].x;
    precise float _353 = _318 * cbSceneParam._m0[25u].y;
    precise float _354 = _353 + _352;
    precise float _355 = _319 * cbSceneParam._m0[25u].z;
    precise float _356 = _355 + _354;
    precise float _357 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _358 = _357 + _356;
    precise float _359 = _317 * cbSceneParam._m0[26u].x;
    precise float _360 = _318 * cbSceneParam._m0[26u].y;
    precise float _361 = _360 + _359;
    precise float _362 = _319 * cbSceneParam._m0[26u].z;
    precise float _363 = _362 + _361;
    precise float _364 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _365 = _364 + _363;
    precise float _366 = _317 * cbSceneParam._m0[27u].x;
    precise float _367 = _318 * cbSceneParam._m0[27u].y;
    precise float _368 = _367 + _366;
    precise float _369 = _319 * cbSceneParam._m0[27u].z;
    precise float _370 = _369 + _368;
    precise float _371 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _372 = _371 + _370;
    gl_Position.x = _351;
    gl_Position.y = _358;
    gl_Position.z = _365;
    gl_Position.w = _372;
    NORMAL_1.x = _232;
    NORMAL_1.y = _235;
    NORMAL_1.z = _238;
    NORMAL_1.w = float(_176);
    TANGENT_1.x = fma(_167, cbObjMatrix._m0[_186].z, fma(_166, cbObjMatrix._m0[_186].y, cbObjMatrix._m0[_186].x * _165));
    TANGENT_1.y = fma(_167, cbObjMatrix._m0[_193].z, fma(_166, cbObjMatrix._m0[_193].y, cbObjMatrix._m0[_193].x * _165));
    TANGENT_1.z = fma(_167, cbObjMatrix._m0[_200].z, fma(_166, cbObjMatrix._m0[_200].y, cbObjMatrix._m0[_200].x * _165));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.x;
    TEXCOORD_4.x = _365;
    TEXCOORD_4.y = _372;
    TEXCOORD_9 = _302;
    gl_CullDistance[0u] = (_302 < 0.0) ? (-1.0) : 0.0;
}


