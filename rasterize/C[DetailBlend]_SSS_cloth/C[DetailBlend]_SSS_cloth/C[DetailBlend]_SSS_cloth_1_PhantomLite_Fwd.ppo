#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1236;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    vec4 _298 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _303 = _298.z;
    float _309 = exp2(log2(_303 * 22.0) * 260.0);
    float _310 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _311 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _325 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _335 = cbMtdParam._m0[10u].x * _325.x;
    float _336 = cbMtdParam._m0[10u].y * _325.y;
    float _337 = cbMtdParam._m0[10u].z * _325.z;
    vec4 _349 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _391 = (((((cbMtdParam._m0[9u].x * _349.x) - _335) * _311) + _335) * 4.55000019073486328125) * _383.x;
    float _393 = (((((cbMtdParam._m0[9u].y * _349.y) - _336) * _311) + _336) * 4.55000019073486328125) * _383.y;
    float _395 = (((((cbMtdParam._m0[9u].z * _349.z) - _337) * _311) + _337) * 4.55000019073486328125) * _383.z;
    float _396 = _383.w * _349.w;
    float _423 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _311) + cbMtdParam._m0[15u].y;
    vec4 _435 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _444 = cbMtdParam._m0[13u].y + _435.z;
    vec4 _456 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _473 = (((_311 * (_303 + (-0.5))) + 0.5) * 2.0) * ((((_456.z - _444) + cbMtdParam._m0[13u].x) * _311) + _444);
    float _477 = (_298.x * 2.0) + (-1.0);
    float _479 = (_298.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_477, _479), vec2(_477, _479));
    float _3610 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))));
    float _498 = ((((((_456.x - _437) * _311) + _437) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _477;
    float _499 = ((((((_456.y - _438) * _311) + _438) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _479;
    float _502 = fma(_485, _226, fma(_499, _218 * TANGENT.x, (_204 * _196) * _498));
    float _505 = fma(_485, _227, fma(_499, _218 * TANGENT.y, (_204 * _197) * _498));
    float _508 = fma(_485, _228, fma(_499, _218 * TANGENT.z, (_204 * _198) * _498));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    float _513 = _512 * _502;
    float _514 = _512 * _505;
    float _515 = _512 * _508;
    float _3621 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _516 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _517 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _518 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _519 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _520 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _521 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _529 = cbMatDynParam._m0[9u].x * _518;
    float _530 = cbMatDynParam._m0[9u].y * _519;
    float _531 = cbMatDynParam._m0[9u].z * _520;
    float _539 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _540 = _539 * _283;
    float _541 = _539 * _284;
    float _542 = _539 * _285;
    float _543 = dot(vec3(_513, _514, _515), vec3(_540, _541, _542));
    float _549 = abs(exp2(log2(_543) * cbMatDynParam._m0[12u].x));
    float _550 = isnan(0.100000001490116119384765625) ? _549 : (isnan(_549) ? 0.100000001490116119384765625 : max(_549, 0.100000001490116119384765625));
    float _556 = ((isnan(0.699999988079071044921875) ? _550 : (isnan(_550) ? 0.699999988079071044921875 : min(_550, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _579 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3697 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3708 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _587 = dot(vec3(_513, _514, _515), vec3(0.0, -1.0, 0.0));
    float _3719 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _597 = (_590 * _518) * cbMatDynParam._m0[11u].x;
    float _599 = (_590 * _519) * cbMatDynParam._m0[11u].y;
    float _601 = (_590 * _520) * cbMatDynParam._m0[11u].z;
    float _608 = dot(vec3(_540, _541, _542), vec3(_513, _514, _515));
    float _611 = _608 * 2.0;
    float _621 = dot(vec3((-0.0) - (_540 - (_611 * _513)), (-0.0) - (_541 - (_611 * _514)), (-0.0) - (_542 - (_611 * _515))), vec3(0.0, -1.0, 0.0));
    float _3730 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _628 = exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 4.0);
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _663 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _665 = _663.w;
    float _683 = fma(_515, cbSceneParam._m0[5u].z, fma(_514, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _513));
    float _686 = fma(_515, cbSceneParam._m0[6u].z, fma(_514, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _513));
    float _689 = fma(_515, cbSceneParam._m0[7u].z, fma(_514, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _513));
    vec4 _691 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _693 = _691.x;
    float _705 = (((_691.y - _517) + (_691.w * _517)) * cbMtdParam._m0[3u].x) + _517;
    float _722 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_693 * _693)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _730 = (((cbMatDynParam._m0[15u].x - _521) * cbMatDynParam._m0[15u].w) * _722) + _521;
    float _738 = ((_722 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _705)) + _705;
    uint _762 = uint(roundEven(NORMAL.w)) * 13u;
    uint _763 = _762 + 9u;
    uint _764 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * _529) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * _530) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * _531) * cbInstanceData._m0[_764].z;
    float _3741 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    vec4 _776 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((_781.x - _730) + (_781.w * _730)) * cbMtdParam._m0[3u].x) + _730;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _665) - _773) + _776.x)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _665) - _774) + _776.y)) + _774;
    float _807 = (cbMtdParam._m0[3u].x * (((_775 * _665) - _775) + _776.z)) + _775;
    vec4 _808 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _821 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_730 * (_529 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_730 * (_530 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_730 * (_531 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _808.z;
    float _825 = _821 * cbMatDynParam._m0[13u].w;
    float _835 = (_825 * (cbMatDynParam._m0[13u].x - _805)) + _805;
    float _836 = (_825 * (cbMatDynParam._m0[13u].y - _806)) + _806;
    float _837 = (_825 * (cbMatDynParam._m0[13u].z - _807)) + _807;
    float _845 = ((_821 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _792)) + _792;
    float _846 = 1.0 - _845;
    float _847 = _846 * _835;
    float _848 = _846 * _836;
    float _849 = _846 * _837;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _845;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _845;
    float _855 = (_837 + (-0.039999999105930328369140625)) * _845;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    float _858 = _855 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _870 = _867.x * TEXCOORD_4;
    float _871 = _543 * 2.0;
    float _875 = (_871 * _513) - _540;
    float _876 = (_871 * _514) - _541;
    float _877 = (_871 * _515) - _542;
    float _878 = abs(_608);
    float _3774 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_738);
    float _892 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _898 = (1.0 - _892) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _899 = _892 * _880;
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_935, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927));
        float _966 = fma(_935, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927));
        float _970 = fma(_935, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927));
        float _993 = _927 + _513;
        float _994 = _931 + _514;
        float _995 = _935 + _515;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _962;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _966;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _970;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_513, _514, _515), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3822 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_513, _514, _515), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3855 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_513, _514, _515), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3888 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1276 = fma(_935, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927));
        float _1280 = fma(_935, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927));
        float _1284 = fma(_935, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927));
        float _1307 = _927 + _513;
        float _1308 = _931 + _514;
        float _1309 = _935 + _515;
        float _1319 = fma(_1309, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307)) - _1276;
        float _1320 = fma(_1309, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307)) - _1280;
        float _1321 = fma(_1309, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307)) - _1284;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1276 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1280 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[35u].z) + ((((((_1284 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1375 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1342.x + (-0.5));
        float _1377 = _1375 * (_1342.y + (-0.5));
        float _1378 = _1375 * (_1342.z + (-0.5));
        float _1385 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1349.x + (-0.5));
        float _1387 = _1385 * (_1349.y + (-0.5));
        float _1388 = _1385 * (_1349.z + (-0.5));
        float _1395 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1356.x + (-0.5));
        float _1397 = _1395 * (_1356.y + (-0.5));
        float _1398 = _1395 * (_1356.z + (-0.5));
        float _1405 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1363.x + (-0.5));
        float _1407 = _1405 * (_1363.y + (-0.5));
        float _1408 = _1405 * (_1363.z + (-0.5));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = _1376 * 0.5;
        float _1413 = _1386 * 0.5;
        float _1414 = _1396 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_513, _514, _515), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3951 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1439 + 1.0))) + _1444) * _1409;
        float _1454 = _1377 * 0.5;
        float _1455 = _1387 * 0.5;
        float _1456 = _1397 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_513, _514, _515), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3984 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1481 + 1.0))) + _1486) * _1410;
        float _1496 = _1378 * 0.5;
        float _1497 = _1388 * 0.5;
        float _1498 = _1398 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_513, _514, _515), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4017 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1523 + 1.0))) + _1528) * _1411;
        _1545 = _1378;
        _1546 = _1377;
        _1547 = _1376;
        _1548 = _1388;
        _1549 = _1387;
        _1550 = _1386;
        _1551 = _1398;
        _1552 = _1397;
        _1553 = _1396;
        _1554 = _1411;
        _1555 = _1410;
        _1556 = _1409;
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
    }
    else
    {
        _1545 = _1236;
        _1546 = _1236;
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = _1236;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1248)) + _1248;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1249)) + _1249;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1592 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1569));
    float _1613 = _875 * 0.5;
    float _1614 = _876 * 0.5;
    float _1615 = _877 * 0.5;
    float _1616 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1619 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1622 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1629 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1633 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1637 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1644 = dot(vec4(cbModelParam._m0[39u]), vec4(_1613, _1614, _1615, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1613, _1614, _1615, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_935, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_935, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_935, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1740 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1743 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1771 = frontier_phi_16_14_ladder;
        }
        float _1978;
        if (_1740 > 0.0)
        {
            _1978 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1978 = frontier_phi_25_21_ladder;
        }
        float _2232;
        if (_1743 > 0.0)
        {
            _2232 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2232 = frontier_phi_37_32_ladder;
        }
        float _2234 = isnan(_1978) ? _1771 : (isnan(_1771) ? _1978 : min(_1771, _1978));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1737) + _1726;
        float _2240 = (_2235 * _1740) + _1730;
        float _2241 = (_2235 * _1743) + _1734;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_15_37_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_15_37_ladder_2;
        _1761 = frontier_phi_15_37_ladder_1;
        _1763 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_935, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_935, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_935, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1839 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1842 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _1983;
        if (_1836 > 0.0)
        {
            _1983 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1983 = frontier_phi_27_23_ladder;
        }
        float _2259;
        if (_1839 > 0.0)
        {
            _2259 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2259 = frontier_phi_39_34_ladder;
        }
        float _2472;
        if (_1842 > 0.0)
        {
            _2472 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2472 = frontier_phi_48_45_ladder;
        }
        float _2474 = isnan(_2259) ? _1983 : (isnan(_1983) ? _2259 : min(_1983, _2259));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1836) + _1825;
        float _2480 = (_2475 * _1839) + _1829;
        float _2481 = (_2475 * _1842) + _1833;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_24_48_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_24_48_ladder_2;
        _1863 = frontier_phi_24_48_ladder_1;
        _1865 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1768);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1878 = (((_898 * _856) + _899) * _870) * ((cbModelParam._m0[1u].w * (_1861 - _1759)) + _1759);
    float _1880 = (((_898 * _857) + _899) * _870) * ((cbModelParam._m0[1u].w * (_1863 - _1761)) + _1761);
    float _1882 = (((_898 * _858) + _899) * _870) * ((cbModelParam._m0[1u].w * (_1865 - _1763)) + _1763);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_762 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _870 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1937 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1941 = _1903 | 1u;
    float _1952 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_513, _514, _515));
    float _1955 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_513, _514, _515));
    float _4153 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _4164 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1960 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _1962 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1969 = ((cbLight._m0[_1920].x * _1926) * _1962) + ((cbLight._m0[_1930].x * _1937) * _1960);
    float _1970 = ((_1926 * cbLight._m0[_1920].y) * _1962) + ((_1937 * cbLight._m0[_1930].y) * _1960);
    float _1971 = ((_1926 * cbLight._m0[_1920].z) * _1962) + ((_1937 * cbLight._m0[_1930].z) * _1960);
    uvec4 _1975 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1977 = _1975.x == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1977)
    {
        _1988 = _1969;
        _1990 = _1970;
        _1992 = _1971;
    }
    else
    {
        uint _1996 = _1903 + 6u;
        float _2012 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _4175 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2015 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1988 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1969;
        _1990 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1970;
        _1992 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1971;
    }
    bool _1995 = _1975.y == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_1995)
    {
        _2033 = _1988;
        _2035 = _1990;
        _2037 = _1992;
    }
    else
    {
        uint _2203 = _1903 + 7u;
        float _2219 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_513, _514, _515)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4191 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2222 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2033 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _1988;
        _2035 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _1990;
        _2037 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _1992;
    }
    uint _2040 = _1903 + 8u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _738) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1903].x + _540;
    float _2056 = cbLight._m0[_1903].y + _541;
    float _2057 = cbLight._m0[_1903].z + _542;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1903].xyz));
    float _4207 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _2069 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2070 = dot(vec3(_513, _514, _515), vec3(_2062, _2063, _2064));
    float _4229 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2062, _2063, _2064));
    float _4240 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2054 * _2054;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
    float _2091 = 0.959999978542327880859375 - _853;
    float _2093 = 0.959999978542327880859375 - _854;
    float _2094 = 0.959999978542327880859375 - _855;
    float _2101 = 1.0 - _2054;
    float _2112 = (0.5 / (((_2069 * ((_2068 * _2101) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2101) + _2054) * _2068))) * _2068;
    float _4251 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    uint _2125 = _1903 + 9u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1941].w)) * _738) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1941].x + _540;
    float _2139 = cbLight._m0[_1941].y + _541;
    float _2140 = cbLight._m0[_1941].z + _542;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_1941].xyz));
    float _4262 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2152 = dot(vec3(_513, _514, _515), vec3(_2145, _2146, _2147));
    float _4273 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1941].xyz), vec3(_2145, _2146, _2147));
    float _4284 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2137 * _2137;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2178 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2069 * ((_2151 * _2178) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2178) + _2137) * _2151))) * _2151;
    float _4295 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2200 = (((((_2171 * _2091) + _856) * cbLight._m0[_2125].x) * _2190) * _1926) + (((((_2090 * _2091) + _856) * cbLight._m0[_2040].x) * _2114) * _1937);
    float _2201 = (((((_2171 * _2093) + _857) * cbLight._m0[_2125].y) * _2190) * _1926) + (((((_2090 * _2093) + _857) * cbLight._m0[_2040].y) * _2114) * _1937);
    float _2202 = (((((_2171 * _2094) + _858) * cbLight._m0[_2125].z) * _2190) * _1926) + (((((_2090 * _2094) + _858) * cbLight._m0[_2040].z) * _2114) * _1937);
    float _2264;
    float _2266;
    float _2268;
    if (_1977)
    {
        _2264 = _2200;
        _2266 = _2201;
        _2268 = _2202;
    }
    else
    {
        uint _2270 = _1903 + 2u;
        uint _2274 = _1903 + 10u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _738) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _540;
        float _2291 = cbLight._m0[_2270].y + _541;
        float _2292 = cbLight._m0[_2270].z + _542;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2270].xyz));
        float _4306 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2304 = dot(vec3(_513, _514, _515), vec3(_2297, _2298, _2299));
        float _4317 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4328 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
        float _2330 = 1.0 - _2289;
        float _2340 = (0.5 / (((_2069 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2330) + _2289) * _2303))) * _2303;
        float _4339 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2264 = (((((_2323 * _2091) + _856) * cbLight._m0[_2274].x) * _2342) * _2343) + _2200;
        _2266 = (((((_2323 * _2093) + _857) * cbLight._m0[_2274].y) * _2342) * _2343) + _2201;
        _2268 = (((((_2323 * _2094) + _858) * cbLight._m0[_2274].z) * _2342) * _2343) + _2202;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_1995)
    {
        _2378 = _2264;
        _2380 = _2266;
        _2382 = _2268;
    }
    else
    {
        uint _2389 = _1903 + 3u;
        uint _2393 = _1903 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _738) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _540;
        float _2410 = cbLight._m0[_2389].y + _541;
        float _2411 = cbLight._m0[_2389].z + _542;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_513, _514, _515), vec3(cbLight._m0[_2389].xyz));
        float _4355 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2423 = dot(vec3(_513, _514, _515), vec3(_2416, _2417, _2418));
        float _4366 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4377 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2069 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2069 * _2449) + _2408) * _2422))) * _2422;
        float _4388 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2378 = (((((_2442 * _2091) + _856) * cbLight._m0[_2393].x) * _2461) * _2462) + _2264;
        _2380 = (((((_2442 * _2093) + _857) * cbLight._m0[_2393].y) * _2461) * _2462) + _2266;
        _2382 = (((((_2442 * _2094) + _858) * cbLight._m0[_2393].z) * _2461) * _2462) + _2268;
    }
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_1901.y == 0u)
    {
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2537;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2537;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2537;
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.x;
        uint _2564 = uint((float(_2552.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2553))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2553)));
        float _2574 = (log2(_2540 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2575 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        uint _2578 = uint(isnan(14.0) ? _2575 : (isnan(_2575) ? 14.0 : min(_2575, 14.0)));
        uvec4 _2583 = texelFetch(g_lightClusterGridBuffer, int(((_2578 << 2u) + (_2564 << 6u)) >> 2u));
        uint _2584 = _2583.x;
        uint _2585 = _2552.z;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((((1u << ((_2585 >> 4u) & 15u)) + 4294967295u) & _2584) == 0u) || ((_2585 & 240u) == 0u))
        {
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
        }
        else
        {
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            uint _2869 = 0u;
            uint _2878;
            bool _2879;
            for (;;)
            {
                _2878 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2869 << 2u)) >> 2u)).x;
                _2879 = _2878 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2879)
                {
                    frontier_phi_63_pred = _2868;
                    frontier_phi_63_pred_1 = _2867;
                    frontier_phi_63_pred_2 = _2866;
                    frontier_phi_63_pred_3 = _2865;
                    frontier_phi_63_pred_4 = _2864;
                    frontier_phi_63_pred_5 = _2863;
                }
                else
                {
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    uint _2993;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2878;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    for (;;)
                    {
                        uint _2997 = uint(findLSB(_2993)) + (_2869 << 5u);
                        uint _2994 = (_2993 + 4294967295u) & _2993;
                        uint _2999 = _2997 * 48u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3019 = (_2997 * 48u) + 4u;
                        vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 3u)).x));
                        uint _3038 = (_2997 * 48u) + 8u;
                        vec3 _3049 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3038)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3038 + 2u)).x));
                        float _3053 = _3013.x - _2538;
                        float _3054 = _3013.y - _2539;
                        float _3055 = _3013.z - _2540;
                        float _3056 = dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055));
                        float _3059 = inversesqrt(_3056);
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3063 = dot(vec3(_683, _686, _689), vec3(_3060, _3061, _3062));
                        float _3068 = 1.0 - (_3056 * _3013.w);
                        float _4414 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3070 = sqrt(_3056) * _3032.w;
                        float _3073 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _3063) + _3074;
                        float _3080 = _3070 * _3070;
                        float _3083 = ((isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0))) * _3069) / ((_3080 * 0.699999988079071044921875) + 1.0);
                        float _3087 = (-0.0) - _2538;
                        float _3088 = (-0.0) - _2539;
                        float _3089 = (-0.0) - _2540;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3094 = _3093 * _3087;
                        float _3095 = _3093 * _3088;
                        float _3096 = _3093 * _3089;
                        float _3104 = exp2(log2(1.0 / ((_3080 * 3.5) + 5.0)) * 0.25);
                        float _3105 = 1.0 - _880;
                        float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                        float _3113 = _3112 * _3112;
                        float _3114 = _3113 * _3113;
                        float _3115 = _3094 + _3060;
                        float _3116 = _3095 + _3061;
                        float _3117 = _3096 + _3062;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3125 = dot(vec3(_683, _686, _689), vec3(_3094, _3095, _3096));
                        float _4430 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3129 = dot(vec3(_683, _686, _689), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                        float _4441 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3132 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                        float _3137 = _3073 * _3113;
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3063) + _3138;
                        float _4452 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3142 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3143 = 1.0 - _3113;
                        float _3153 = (0.5 / (((_3142 * ((_3128 * _3143) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3113) * _3128))) * _3142;
                        float _4463 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3164 = (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3136 * _3136) * ((_3080 * 2.1991131305694580078125) + 3.141590118408203125))) * _3069;
                        _2922 = (_3083 * _3032.x) + _2990;
                        _2923 = (_3083 * _3032.y) + _2991;
                        _2924 = (_3083 * _3032.z) + _2992;
                        _2919 = (_3164 * _3049.x) + _2987;
                        _2920 = (_3164 * _3049.y) + _2988;
                        _2921 = (_3164 * _3049.z) + _2989;
                        if (_2994 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2994;
                        }
                    }
                    frontier_phi_63_pred = _2924;
                    frontier_phi_63_pred_1 = _2923;
                    frontier_phi_63_pred_2 = _2922;
                    frontier_phi_63_pred_3 = _2921;
                    frontier_phi_63_pred_4 = _2920;
                    frontier_phi_63_pred_5 = _2919;
                }
                _2721 = frontier_phi_63_pred;
                _2719 = frontier_phi_63_pred_1;
                _2717 = frontier_phi_63_pred_2;
                _2715 = frontier_phi_63_pred_3;
                _2713 = frontier_phi_63_pred_4;
                _2711 = frontier_phi_63_pred_5;
                uint _2870 = _2869 + 1u;
                if (_2870 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2863 = _2711;
                    _2864 = _2713;
                    _2865 = _2715;
                    _2866 = _2717;
                    _2867 = _2719;
                    _2868 = _2721;
                    _2869 = _2870;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
        }
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.z;
        uint _2727 = (_2725 >> 8u) & 15u;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        if (((4294967295u << _2727) & _2584) == 0u)
        {
            _2831 = _2710;
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
        }
        else
        {
            float _2856 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
            float _2857 = _2856 * _2538;
            float _2858 = _2856 * _2539;
            float _2859 = _2856 * _2540;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2727 < ((_2725 >> 12u) & 15u))
            {
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2970 = _2710;
                float _2971 = _2712;
                float _2972 = _2714;
                float _2973 = _2716;
                float _2974 = _2718;
                float _2975 = _2720;
                uint _2976 = _2727;
                uint _2985;
                bool _2986;
                for (;;)
                {
                    _2985 = texelFetch(g_lightClassification, int((((_2578 << 5u) + (_2564 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                    _2986 = _2985 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2986)
                    {
                        frontier_phi_69_pred = _2975;
                        frontier_phi_69_pred_1 = _2974;
                        frontier_phi_69_pred_2 = _2973;
                        frontier_phi_69_pred_3 = _2972;
                        frontier_phi_69_pred_4 = _2971;
                        frontier_phi_69_pred_5 = _2970;
                    }
                    else
                    {
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3182 = _2970;
                        float _3183 = _2971;
                        float _3184 = _2972;
                        float _3185 = _2973;
                        float _3186 = _2974;
                        float _3187 = _2975;
                        uint _3188 = _2985;
                        uint _3189;
                        vec4 _3214;
                        float _3215;
                        vec4 _3230;
                        vec3 _3242;
                        vec4 _3257;
                        vec4 _3273;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3199 = ((_2976 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3188));
                            _3189 = (_3188 + 4294967295u) & _3188;
                            uint _3201 = _3199 * 40u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            _3215 = _3214.w;
                            uint _3217 = (_3199 * 40u) + 4u;
                            _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3232 = (_3199 * 40u) + 8u;
                            _3242 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x));
                            uint _3244 = (_3199 * 40u) + 16u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3260 = (_3199 * 40u) + 20u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3276 = (_3199 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3199 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_2540, _3308.z, fma(_2539, _3308.y, _3308.x * _2538)) + _3308.w;
                            _3321 = !((fma(_2540, _3289.z, fma(_2539, _3289.y, _3289.x * _2538)) + _3289.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3214.x - _2538;
                                float _3349 = _3214.y - _2539;
                                float _3350 = _3214.z - _2540;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3215 * _3215));
                                float _4474 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3366 = sqrt(_3351) * _3230.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_683, _686, _689))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_2540, _3257.z, fma(_2539, _3257.y, _3257.x * _2538)) + _3257.w) / _3320;
                                float _3380 = (fma(_2540, _3273.z, fma(_2539, _3273.y, _3273.x * _2538)) + _3273.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4490 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _880;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2857;
                                float _3410 = _3356 - _2858;
                                float _3411 = _3357 - _2859;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2857, (-0.0) - _2858, (-0.0) - _2859));
                                float _4501 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3423 = dot(vec3(_683, _686, _689), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4512 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_683, _686, _689), vec3(_3355, _3356, _3357))) + _3432;
                                float _4523 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4534 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3386 * _3230.z;
                                frontier_phi_75_pred_1 = _3386 * _3230.y;
                                frontier_phi_75_pred_2 = _3386 * _3230.x;
                                frontier_phi_75_pred_3 = _3460 * _3242.z;
                                frontier_phi_75_pred_4 = _3460 * _3242.y;
                                frontier_phi_75_pred_5 = _3460 * _3242.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_75_pred;
                            _3468 = frontier_phi_75_pred_1;
                            _3467 = frontier_phi_75_pred_2;
                            _3466 = frontier_phi_75_pred_3;
                            _3465 = frontier_phi_75_pred_4;
                            _3464 = frontier_phi_75_pred_5;
                            _3172 = _3467 + _3185;
                            _3173 = _3468 + _3186;
                            _3174 = _3469 + _3187;
                            _3169 = _3464 + _3182;
                            _3170 = _3465 + _3183;
                            _3171 = _3466 + _3184;
                            if (_3189 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3189;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3174;
                        frontier_phi_69_pred_1 = _3173;
                        frontier_phi_69_pred_2 = _3172;
                        frontier_phi_69_pred_3 = _3171;
                        frontier_phi_69_pred_4 = _3170;
                        frontier_phi_69_pred_5 = _3169;
                    }
                    _2842 = frontier_phi_69_pred;
                    _2840 = frontier_phi_69_pred_1;
                    _2838 = frontier_phi_69_pred_2;
                    _2836 = frontier_phi_69_pred_3;
                    _2834 = frontier_phi_69_pred_4;
                    _2832 = frontier_phi_69_pred_5;
                    uint _2977 = _2976 + 1u;
                    if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2970 = _2832;
                        _2971 = _2834;
                        _2972 = _2836;
                        _2973 = _2838;
                        _2974 = _2840;
                        _2975 = _2842;
                        _2976 = _2977;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2842;
                frontier_phi_57_58_ladder_1 = _2840;
                frontier_phi_57_58_ladder_2 = _2838;
                frontier_phi_57_58_ladder_3 = _2836;
                frontier_phi_57_58_ladder_4 = _2834;
                frontier_phi_57_58_ladder_5 = _2832;
            }
            else
            {
                frontier_phi_57_58_ladder = _2720;
                frontier_phi_57_58_ladder_1 = _2718;
                frontier_phi_57_58_ladder_2 = _2716;
                frontier_phi_57_58_ladder_3 = _2714;
                frontier_phi_57_58_ladder_4 = _2712;
                frontier_phi_57_58_ladder_5 = _2710;
            }
            _2831 = frontier_phi_57_58_ladder_5;
            _2833 = frontier_phi_57_58_ladder_4;
            _2835 = frontier_phi_57_58_ladder_3;
            _2837 = frontier_phi_57_58_ladder_2;
            _2839 = frontier_phi_57_58_ladder_1;
            _2841 = frontier_phi_57_58_ladder;
        }
        float _2846 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2596 = (_2846 * _2837) + _2033;
        _2598 = (_2846 * _2839) + _2035;
        _2600 = (_2846 * _2841) + _2037;
        _2602 = ((_2831 * _856) * _2846) + _2378;
        _2604 = ((_2833 * _857) * _2846) + _2380;
        _2606 = ((_2835 * _858) * _2846) + _2382;
    }
    else
    {
        _2596 = _2033;
        _2598 = _2035;
        _2600 = _2037;
        _2602 = _2378;
        _2604 = _2380;
        _2606 = _2382;
    }
    uint _2612 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _2618 = cbInstanceData._m0[_2612].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _556) + cbMatDynParam._m0[7u].x) + (((_597 - (_597 * _521)) + (cbMatDynParam._m0[11u].x * _628)) * cbMatDynParam._m0[9u].x));
    float _2619 = cbInstanceData._m0[_2612].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _556) + cbMatDynParam._m0[7u].y) + (((_599 - (_599 * _521)) + (cbMatDynParam._m0[11u].y * _628)) * cbMatDynParam._m0[9u].y));
    float _2620 = cbInstanceData._m0[_2612].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _556) + cbMatDynParam._m0[7u].z) + (((_601 - (_601 * _521)) + (cbMatDynParam._m0[11u].z * _628)) * cbMatDynParam._m0[9u].z));
    float _4550 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4561 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4572 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4583 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _2638 = (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2596 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _870))) + ((_2602 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + _2618;
    float _2640 = (_2619 + ((_2604 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2598 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _870)));
    float _2642 = (_2620 + ((_2606 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1668)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2600 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _870)));
    float _2650 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) - _583) * _556) + _583));
    float _2655 = cbInstanceData._m0[_762 + 6u].w * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)));
    float _2660 = _660 / cbSceneParam._m0[86u].x;
    float _2661 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2735 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2736 = _2735 / _654;
        float _2747 = _2736 * _283;
        float _2748 = _284 * _2736;
        float _2749 = (-0.0) - _2748;
        float _2750 = _2736 * _285;
        float _2752 = (cbSceneParam._m0[77u].w * _2749) / _2735;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2748;
        float _2760 = sqrt(((_2747 * _2747) + (_2748 * _2748)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2735)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2932;
        if (abs((_2749 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2932 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2894 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _2932 = ((abs(_2760 / _2749) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2770 * _2903) - exp2(_2770 * _2904)) * _2892))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _2934 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2943 = exp2((_2932 * (-1.44269502162933349609375)) * (1.0 - _2934.w));
        float _2944 = log2(_2943);
        float _2960 = log2(_2680);
        _2772 = (exp2(_2960 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].x)) * _2934.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2774 = (exp2(_2960 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].y)) * _2934.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2776 = (exp2(_2960 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2944 * cbSceneParam._m0[78u].z)) * _2934.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2778 = _2943 * _2680;
    }
    else
    {
        _2772 = _2677;
        _2774 = _2678;
        _2776 = _2679;
        _2778 = _2680;
    }
    float _2790 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2791 = _2790 == 3.0;
    float _2792 = log2(_2778);
    float _2796 = exp2(_2792 * cbSceneParam._m0[78u].x);
    float _2797 = exp2(_2792 * cbSceneParam._m0[78u].y);
    float _2798 = exp2(_2792 * cbSceneParam._m0[78u].z);
    float _2799 = _2796 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)));
    float _2800 = _2797 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0)));
    float _2801 = _2798 * (isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0)));
    float _2810 = (_2790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2810 * (_2791 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.y = _2810 * (_2791 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.z = _2810 * (_2791 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.w = _2655;
    SV_Target_1.x = ((_2650 * _2618) * _2796) * _2810;
    SV_Target_1.y = ((_2650 * _2619) * _2797) * _2810;
    SV_Target_1.z = ((_2650 * _2620) * _2798) * _2810;
    SV_Target_1.w = _2655;
}


