#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1204;
float _3905;
float _3906;
float _3907;
float _3908;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _319 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _341 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _350 = ((_319.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _341.x;
    float _353 = ((_319.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _341.y;
    float _356 = ((_319.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _341.z;
    float _357 = _341.w * _319.w;
    vec4 _370 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = cbMtdParam._m0[14u].z + _370.x;
    vec4 _389 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _401 = (_302.z * 2.0) * (cbMtdParam._m0[13u].x + _389.z);
    float _405 = (_302.x * 2.0) + (-1.0);
    float _407 = (_302.y * 2.0) + (-1.0);
    float _408 = dot(vec2(_405, _407), vec2(_405, _407));
    float _3917 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))));
    float _421 = (((_389.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _405;
    float _422 = (((_389.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _407;
    float _425 = fma(_414, _230, fma(_422, _222 * TANGENT.x, (_208 * _200) * _421));
    float _428 = fma(_414, _231, fma(_422, _222 * TANGENT.y, (_208 * _201) * _421));
    float _431 = fma(_414, _232, fma(_422, _222 * TANGENT.z, (_208 * _202) * _421));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _3928 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _439 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _440 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _441 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _442 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _443 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _444 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _452 = cbMatDynParam._m0[9u].x * _441;
    float _453 = cbMatDynParam._m0[9u].y * _442;
    float _454 = cbMatDynParam._m0[9u].z * _443;
    float _462 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _463 = _462 * _287;
    float _464 = _462 * _288;
    float _465 = _462 * _289;
    float _466 = dot(vec3(_436, _437, _438), vec3(_463, _464, _465));
    float _472 = abs(exp2(log2(_466) * cbMatDynParam._m0[12u].x));
    float _473 = isnan(0.100000001490116119384765625) ? _472 : (isnan(_472) ? 0.100000001490116119384765625 : max(_472, 0.100000001490116119384765625));
    float _479 = ((isnan(0.699999988079071044921875) ? _473 : (isnan(_473) ? 0.699999988079071044921875 : min(_473, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _502 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4004 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4015 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _510 = dot(vec3(_436, _437, _438), vec3(0.0, -1.0, 0.0));
    float _4026 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _513 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _520 = (_513 * _441) * cbMatDynParam._m0[11u].x;
    float _522 = (_513 * _442) * cbMatDynParam._m0[11u].y;
    float _524 = (_513 * _443) * cbMatDynParam._m0[11u].z;
    float _531 = dot(vec3(_463, _464, _465), vec3(_436, _437, _438));
    float _534 = _531 * 2.0;
    float _544 = dot(vec3((-0.0) - (_463 - (_534 * _436)), (-0.0) - (_464 - (_534 * _437)), (-0.0) - (_465 - (_534 * _438))), vec3(0.0, -1.0, 0.0));
    float _4037 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _551 = exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 4.0);
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _582 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _584 = _582.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _883 = sqrt(((_287 * _287) + (_288 * _288)) + (_289 * _289));
        float _889 = (cbMatDynParam._m0[5u].x * _883) + cbMatDynParam._m0[5u].y;
        float _4048 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _894 = (cbMatDynParam._m0[5u].z * _883) + cbMatDynParam._m0[5u].w;
        float _4059 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) - _890)) + _890) < ((_584 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _598 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _600 = _598.w;
    float _619 = fma(_438, cbSceneParam._m0[5u].z, fma(_437, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _436));
    float _622 = fma(_438, cbSceneParam._m0[6u].z, fma(_437, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _436));
    float _625 = fma(_438, cbSceneParam._m0[7u].z, fma(_437, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _436));
    vec4 _627 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _629 = _627.x;
    float _641 = (((_627.y - _440) + (_627.w * _440)) * cbMtdParam._m0[3u].x) + _440;
    float _658 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_629 * _629)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _667 = (((cbMatDynParam._m0[15u].x - _444) * cbMatDynParam._m0[15u].w) * _658) + _444;
    float _675 = ((_658 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _641)) + _641;
    uint _699 = uint(roundEven(NORMAL.w)) * 13u;
    uint _700 = _699 + 9u;
    uint _701 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * _452) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * _453) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * _454) * cbInstanceData._m0[_701].z;
    float _4070 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    vec4 _713 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _718 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _729 = (((_718.x - _667) + (_718.w * _667)) * cbMtdParam._m0[3u].x) + _667;
    float _742 = (cbMtdParam._m0[3u].x * (((_710 * _600) - _710) + _713.x)) + _710;
    float _743 = (cbMtdParam._m0[3u].x * (((_711 * _600) - _711) + _713.y)) + _711;
    float _744 = (cbMtdParam._m0[3u].x * (((_712 * _600) - _712) + _713.z)) + _712;
    vec4 _745 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _758 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_667 * (_452 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_667 * (_453 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_667 * (_454 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _745.z;
    float _762 = _758 * cbMatDynParam._m0[13u].w;
    float _772 = (_762 * (cbMatDynParam._m0[13u].x - _742)) + _742;
    float _773 = (_762 * (cbMatDynParam._m0[13u].y - _743)) + _743;
    float _774 = (_762 * (cbMatDynParam._m0[13u].z - _744)) + _744;
    float _782 = ((_758 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _729)) + _729;
    float _783 = 1.0 - _782;
    float _784 = _783 * _772;
    float _785 = _783 * _773;
    float _786 = _783 * _774;
    float _790 = (_772 + (-0.039999999105930328369140625)) * _782;
    float _791 = (_773 + (-0.039999999105930328369140625)) * _782;
    float _792 = (_774 + (-0.039999999105930328369140625)) * _782;
    float _793 = _790 + 0.039999999105930328369140625;
    float _794 = _791 + 0.039999999105930328369140625;
    float _795 = _792 + 0.039999999105930328369140625;
    vec4 _804 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _807 = _804.x * TEXCOORD_4;
    float _808 = _466 * 2.0;
    float _812 = (_808 * _436) - _463;
    float _813 = (_808 * _437) - _464;
    float _814 = (_808 * _438) - _465;
    float _815 = abs(_531);
    float _4103 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_675);
    float _829 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _835 = (1.0 - _829) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _836 = _829 * _817;
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1203;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _928 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _932 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _936 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _961 = _864 + _436;
        float _962 = _868 + _437;
        float _963 = _872 + _438;
        float _973 = fma(_963, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961)) - _928;
        float _974 = fma(_963, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961)) - _932;
        float _975 = fma(_963, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961)) - _936;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_928 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_932 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[34u].z) + ((((((_936 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1031 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_997.x + (-0.5));
        float _1033 = _1031 * (_997.y + (-0.5));
        float _1034 = _1031 * (_997.z + (-0.5));
        float _1041 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1004.x + (-0.5));
        float _1043 = _1041 * (_1004.y + (-0.5));
        float _1044 = _1041 * (_1004.z + (-0.5));
        float _1051 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1011.x + (-0.5));
        float _1053 = _1051 * (_1011.y + (-0.5));
        float _1054 = _1051 * (_1011.z + (-0.5));
        float _1061 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1018.x + (-0.5));
        float _1063 = _1061 * (_1018.y + (-0.5));
        float _1064 = _1061 * (_1018.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1085 = (dot(vec3(_436, _437, _438), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1095 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _4151 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1097 + 1.0))) + _1102) * _1065;
        float _1112 = _1033 * 0.5;
        float _1113 = _1043 * 0.5;
        float _1114 = _1053 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_436, _437, _438), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _4184 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1139 + 1.0))) + _1144) * _1066;
        float _1154 = _1034 * 0.5;
        float _1155 = _1044 * 0.5;
        float _1156 = _1054 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_436, _437, _438), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _4217 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1181 + 1.0))) + _1186) * _1067;
        _1203 = _1034;
        _1205 = _1033;
        _1206 = _1032;
        _1207 = _1044;
        _1208 = _1043;
        _1209 = _1042;
        _1210 = _1054;
        _1211 = _1053;
        _1212 = _1052;
        _1213 = _1067;
        _1214 = _1066;
        _1215 = _1065;
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _1204;
        _1205 = _1204;
        _1206 = _1204;
        _1207 = _1204;
        _1208 = _1204;
        _1209 = _1204;
        _1210 = _1204;
        _1211 = _1204;
        _1212 = _1204;
        _1213 = _1204;
        _1214 = _1204;
        _1215 = _1204;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1247 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1251 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1255 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1278 = _864 + _436;
        float _1279 = _868 + _437;
        float _1280 = _872 + _438;
        float _1290 = fma(_1280, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1278)) - _1247;
        float _1291 = fma(_1280, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1278)) - _1251;
        float _1292 = fma(_1280, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1278)) - _1255;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1247 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1251 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[35u].z) + ((((((_1255 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_436, _437, _438), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4280 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_436, _437, _438), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4313 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_436, _437, _438), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4346 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1204;
        _1517 = _1204;
        _1518 = _1204;
        _1519 = _1204;
        _1520 = _1204;
        _1521 = _1204;
        _1522 = _1204;
        _1523 = _1204;
        _1524 = _1204;
        _1525 = _1204;
        _1526 = _1204;
        _1527 = _1204;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1216)) + _1216;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1217)) + _1217;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1218)) + _1218;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _812 * 0.5;
    float _1585 = _813 * 0.5;
    float _1586 = _814 * 0.5;
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1203, _1207, _1210, _1213));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1711 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1714 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1742 = frontier_phi_19_17_ladder;
        }
        float _1917;
        if (_1711 > 0.0)
        {
            _1917 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1917 = frontier_phi_28_24_ladder;
        }
        float _2213;
        if (_1714 > 0.0)
        {
            _2213 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2213 = frontier_phi_40_35_ladder;
        }
        float _2215 = isnan(_1917) ? _1742 : (isnan(_1742) ? _1917 : min(_1742, _1917));
        float _2216 = isnan(_2213) ? _2215 : (isnan(_2215) ? _2213 : min(_2215, _2213));
        float _2220 = (_2216 * _1708) + _1697;
        float _2221 = (_2216 * _1711) + _1701;
        float _2222 = (_2216 * _1714) + _1705;
        float _2223 = _2216 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2223;
        float _2227 = _2223 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 > _2227) || ((_2221 < _2225) || ((_2220 < _2225) || (_2220 > _2227))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2222, cbModelParam._m0[9u].z, fma(_2221, cbModelParam._m0[9u].y, _2220 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2222, cbModelParam._m0[10u].z, fma(_2221, cbModelParam._m0[10u].y, _2220 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2222, cbModelParam._m0[11u].z, fma(_2221, cbModelParam._m0[11u].y, _2220 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_18_40_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_18_40_ladder_2;
        _1732 = frontier_phi_18_40_ladder_1;
        _1734 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1650);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1810 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1813 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1922;
        if (_1807 > 0.0)
        {
            _1922 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1922 = frontier_phi_30_26_ladder;
        }
        float _2240;
        if (_1810 > 0.0)
        {
            _2240 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2240 = frontier_phi_42_37_ladder;
        }
        float _2578;
        if (_1813 > 0.0)
        {
            _2578 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2578 = frontier_phi_52_49_ladder;
        }
        float _2580 = isnan(_2240) ? _1922 : (isnan(_1922) ? _2240 : min(_1922, _2240));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1807) + _1796;
        float _2586 = (_2581 * _1810) + _1800;
        float _2587 = (_2581 * _1813) + _1804;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_27_52_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_27_52_ladder_2;
        _1834 = frontier_phi_27_52_ladder_1;
        _1836 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1739);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1849 = (((_835 * _793) + _836) * _807) * ((cbModelParam._m0[1u].w * (_1832 - _1730)) + _1730);
    float _1851 = (((_835 * _794) + _836) * _807) * ((cbModelParam._m0[1u].w * (_1834 - _1732)) + _1732);
    float _1853 = (((_835 * _795) + _836) * _807) * ((cbModelParam._m0[1u].w * (_1836 - _1734)) + _1734);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1909 = _1896 / _1908;
    float _1910 = _1900 / _1908;
    float _1911 = _1904 / _1908;
    float _2058;
    float _2059;
    float _2060;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1938 = ((uint(_1911 > cbSceneParam._m0[59u].y) + uint(_1911 > cbSceneParam._m0[59u].x)) + uint(_1911 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1939 = _1938 + 43u;
        uint _1947 = _1938 + 44u;
        uint _1955 = _1938 + 45u;
        uint _1963 = _1938 + 46u;
        float _1974 = fma(_1908, cbSceneParam._m0[_1939].w, fma(_1904, cbSceneParam._m0[_1939].z, fma(_1900, cbSceneParam._m0[_1939].y, _1896 * cbSceneParam._m0[_1939].x)));
        float _1978 = fma(_1908, cbSceneParam._m0[_1947].w, fma(_1904, cbSceneParam._m0[_1947].z, fma(_1900, cbSceneParam._m0[_1947].y, _1896 * cbSceneParam._m0[_1947].x)));
        float _1986 = fma(_1908, cbSceneParam._m0[_1963].w, fma(_1904, cbSceneParam._m0[_1963].z, fma(_1900, cbSceneParam._m0[_1963].y, _1896 * cbSceneParam._m0[_1963].x)));
        float _1991 = cbSceneParam._m0[33u].z * _1986;
        float _1993 = cbSceneParam._m0[33u].w * _1986;
        float _1996 = fma(_1908, cbSceneParam._m0[_1955].w, fma(_1904, cbSceneParam._m0[_1955].z, fma(_1900, cbSceneParam._m0[_1955].y, _1896 * cbSceneParam._m0[_1955].x))) / _1986;
        float _2044 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
        float _4472 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2051 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 + _1974) / _1986, (_1993 + _1978) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 + _1974) / _1986, (_1978 - _1991) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1991) / _1986, (_1978 - _1993) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1993) / _1986, (_1991 + _1978) / _1986), _1996), 0.0)).x), vec4(0.25)));
        _2058 = 1.0 - (_2051 * cbSceneParam._m0[34u].x);
        _2059 = 1.0 - (_2051 * cbSceneParam._m0[34u].y);
        _2060 = 1.0 - (_2051 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2058 = 1.0;
        _2059 = 1.0;
        _2060 = 1.0;
    }
    float _2124;
    float _2126;
    float _2128;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2112 = fma(_1908, cbSceneParam._m0[63u].w, fma(_1904, cbSceneParam._m0[63u].z, fma(_1900, cbSceneParam._m0[63u].y, _1896 * cbSceneParam._m0[63u].x)));
        float _2113 = fma(_1908, cbSceneParam._m0[60u].w, fma(_1904, cbSceneParam._m0[60u].z, fma(_1900, cbSceneParam._m0[60u].y, _1896 * cbSceneParam._m0[60u].x))) / _2112;
        float _2114 = fma(_1908, cbSceneParam._m0[61u].w, fma(_1904, cbSceneParam._m0[61u].z, fma(_1900, cbSceneParam._m0[61u].y, _1896 * cbSceneParam._m0[61u].x))) / _2112;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2113 >= cbSceneParam._m0[64u].x) && (_2114 >= cbSceneParam._m0[64u].y)) && (_2113 <= cbSceneParam._m0[64u].z)) && (_2114 <= cbSceneParam._m0[64u].w))
        {
            float _2253 = fma(_1908, cbSceneParam._m0[62u].w, fma(_1904, cbSceneParam._m0[62u].z, fma(_1900, cbSceneParam._m0[62u].y, _1896 * cbSceneParam._m0[62u].x))) / _2112;
            float _2257 = isnan(cbSceneParam._m0[41u].w) ? _2253 : (isnan(_2253) ? cbSceneParam._m0[41u].w : max(_2253, cbSceneParam._m0[41u].w));
            float _2300 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
            float _4488 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
            float _2307 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2113, cbSceneParam._m0[33u].w + _2114), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2113, _2114 - cbSceneParam._m0[33u].z), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].z, _2114 - cbSceneParam._m0[33u].w), _2257), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2114), _2257), 0.0)).x), vec4(0.25)));
            float _2311 = 1.0 - (_2307 * cbSceneParam._m0[34u].x);
            float _2312 = 1.0 - (_2307 * cbSceneParam._m0[34u].y);
            float _2313 = 1.0 - (_2307 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2312) ? _2059 : (isnan(_2059) ? _2312 : min(_2059, _2312));
            frontier_phi_39_38_ladder_1 = isnan(_2311) ? _2058 : (isnan(_2058) ? _2311 : min(_2058, _2311));
            frontier_phi_39_38_ladder_2 = isnan(_2313) ? _2060 : (isnan(_2060) ? _2313 : min(_2060, _2313));
        }
        else
        {
            frontier_phi_39_38_ladder = _2059;
            frontier_phi_39_38_ladder_1 = _2058;
            frontier_phi_39_38_ladder_2 = _2060;
        }
        _2124 = frontier_phi_39_38_ladder_1;
        _2126 = frontier_phi_39_38_ladder;
        _2128 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2124 = _2058;
        _2126 = _2059;
        _2128 = _2060;
    }
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_699 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _807 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2172 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2176 = _2135 | 1u;
    float _2187 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_436, _437, _438));
    float _2190 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_436, _437, _438));
    float _4524 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _4535 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2195 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2197 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2204 = ((cbLight._m0[_2152].x * _2158) * _2197) + (((cbLight._m0[_2162].x * _2124) * _2172) * _2195);
    float _2205 = ((_2158 * cbLight._m0[_2152].y) * _2197) + (((cbLight._m0[_2162].y * _2126) * _2172) * _2195);
    float _2206 = ((_2158 * cbLight._m0[_2152].z) * _2197) + (((cbLight._m0[_2162].z * _2128) * _2172) * _2195);
    uvec4 _2210 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2212 = _2210.x == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2212)
    {
        _2314 = _2204;
        _2316 = _2205;
        _2318 = _2206;
    }
    else
    {
        uint _2322 = _2135 + 6u;
        float _2338 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4546 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2341 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2314 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2204;
        _2316 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2205;
        _2318 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2206;
    }
    bool _2321 = _2210.y == 0u;
    float _2376;
    float _2378;
    float _2380;
    if (_2321)
    {
        _2376 = _2314;
        _2378 = _2316;
        _2380 = _2318;
    }
    else
    {
        uint _2549 = _2135 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4562 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2568 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2376 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2314;
        _2378 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2316;
        _2380 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2318;
    }
    uint _2383 = _2135 + 8u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _675) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2135].x + _463;
    float _2399 = cbLight._m0[_2135].y + _464;
    float _2400 = cbLight._m0[_2135].z + _465;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2135].xyz));
    float _4578 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2412 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2413 = dot(vec3(_436, _437, _438), vec3(_2405, _2406, _2407));
    float _4600 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2405, _2406, _2407));
    float _4611 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2397 * _2397;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0);
    float _2434 = 0.959999978542327880859375 - _790;
    float _2436 = 0.959999978542327880859375 - _791;
    float _2437 = 0.959999978542327880859375 - _792;
    float _2444 = 1.0 - _2397;
    float _2455 = (0.5 / (((_2412 * ((_2411 * _2444) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2444) + _2397) * _2411))) * _2411;
    float _4622 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2457 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    uint _2471 = _2135 + 9u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2176].w)) * _675) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2176].x + _463;
    float _2485 = cbLight._m0[_2176].y + _464;
    float _2486 = cbLight._m0[_2176].z + _465;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2176].xyz));
    float _4633 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2498 = dot(vec3(_436, _437, _438), vec3(_2491, _2492, _2493));
    float _4644 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2502 = dot(vec3(cbLight._m0[_2176].xyz), vec3(_2491, _2492, _2493));
    float _4655 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2506 = _2483 * _2483;
    float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2524 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2412 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2524) + _2483) * _2497))) * _2497;
    float _4666 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
    float _2546 = (((((_2517 * _2434) + _793) * cbLight._m0[_2471].x) * _2536) * _2158) + ((((cbLight._m0[_2383].x * _2124) * ((_2433 * _2434) + _793)) * _2457) * _2172);
    float _2547 = (((((_2517 * _2436) + _794) * cbLight._m0[_2471].y) * _2536) * _2158) + ((((cbLight._m0[_2383].y * _2126) * ((_2433 * _2436) + _794)) * _2457) * _2172);
    float _2548 = (((((_2517 * _2437) + _795) * cbLight._m0[_2471].z) * _2536) * _2158) + ((((cbLight._m0[_2383].z * _2128) * ((_2433 * _2437) + _795)) * _2457) * _2172);
    float _2604;
    float _2606;
    float _2608;
    if (_2212)
    {
        _2604 = _2546;
        _2606 = _2547;
        _2608 = _2548;
    }
    else
    {
        uint _2610 = _2135 + 2u;
        uint _2614 = _2135 + 10u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _675) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _463;
        float _2631 = cbLight._m0[_2610].y + _464;
        float _2632 = cbLight._m0[_2610].z + _465;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2610].xyz));
        float _4677 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2644 = dot(vec3(_436, _437, _438), vec3(_2637, _2638, _2639));
        float _4688 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4699 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2663 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2670 = 1.0 - _2629;
        float _2680 = (0.5 / (((_2412 * ((_2643 * _2670) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2670) + _2629) * _2643))) * _2643;
        float _4710 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2604 = (((((_2663 * _2434) + _793) * cbLight._m0[_2614].x) * _2682) * _2683) + _2546;
        _2606 = (((((_2663 * _2436) + _794) * cbLight._m0[_2614].y) * _2682) * _2683) + _2547;
        _2608 = (((((_2663 * _2437) + _795) * cbLight._m0[_2614].z) * _2682) * _2683) + _2548;
    }
    float _2714;
    float _2716;
    float _2718;
    if (_2321)
    {
        _2714 = _2604;
        _2716 = _2606;
        _2718 = _2608;
    }
    else
    {
        uint _2725 = _2135 + 3u;
        uint _2729 = _2135 + 11u;
        float _2743 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2725].w)) * _675) * 0.949999988079071044921875);
        float _2744 = _2743 * _2743;
        float _2745 = cbLight._m0[_2725].x + _463;
        float _2746 = cbLight._m0[_2725].y + _464;
        float _2747 = cbLight._m0[_2725].z + _465;
        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
        float _2752 = _2751 * _2745;
        float _2753 = _2751 * _2746;
        float _2754 = _2751 * _2747;
        float _2755 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2725].xyz));
        float _4726 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2759 = dot(vec3(_436, _437, _438), vec3(_2752, _2753, _2754));
        float _4737 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2763 = dot(vec3(cbLight._m0[_2725].xyz), vec3(_2752, _2753, _2754));
        float _4748 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2767 = _2744 * _2744;
        float _2771 = ((_2762 * _2762) * (_2767 + (-1.0))) + 1.0;
        float _2778 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
        float _2785 = 1.0 - _2744;
        float _2795 = (0.5 / (((_2412 * ((_2758 * _2785) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2412 * _2785) + _2744) * _2758))) * _2758;
        float _4759 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2767 / ((_2771 * _2771) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2714 = (((((_2778 * _2434) + _793) * cbLight._m0[_2729].x) * _2797) * _2798) + _2604;
        _2716 = (((((_2778 * _2436) + _794) * cbLight._m0[_2729].y) * _2797) * _2798) + _2606;
        _2718 = (((((_2778 * _2437) + _795) * cbLight._m0[_2729].z) * _2797) * _2798) + _2608;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2133.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2820)));
        float _2841 = (log2(_1911 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
        }
        else
        {
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3133)
                {
                    frontier_phi_73_pred = _3122;
                    frontier_phi_73_pred_1 = _3121;
                    frontier_phi_73_pred_2 = _3120;
                    frontier_phi_73_pred_3 = _3119;
                    frontier_phi_73_pred_4 = _3118;
                    frontier_phi_73_pred_5 = _3117;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3132;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3123 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _1909;
                        float _3329 = _3288.y - _1910;
                        float _3330 = _3288.z - _1911;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_619, _622, _625), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4785 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3358 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3362 = (-0.0) - _1909;
                        float _3363 = (-0.0) - _1910;
                        float _3364 = (-0.0) - _1911;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3369 = _3368 * _3362;
                        float _3370 = _3368 * _3363;
                        float _3371 = _3368 * _3364;
                        float _3378 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3379 = 1.0 - _817;
                        float _3386 = sqrt(1.0 - ((1.0 - (_3379 * _3379)) * (1.0 - (_3378 * _3378))));
                        float _3387 = _3386 * _3386;
                        float _3388 = _3387 * _3387;
                        float _3389 = _3369 + _3335;
                        float _3390 = _3370 + _3336;
                        float _3391 = _3371 + _3337;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3399 = dot(vec3(_619, _622, _625), vec3(_3369, _3370, _3371));
                        float _4801 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3403 = dot(vec3(_619, _622, _625), vec3(_3395 * _3389, _3395 * _3390, _3395 * _3391));
                        float _4812 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3410 = ((_3406 * _3406) * (_3388 + (-1.0))) + 1.0;
                        float _3411 = _3348 * _3387;
                        float _3412 = _3411 * _3411;
                        float _3415 = ((1.0 - _3412) * _3338) + _3412;
                        float _4823 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3416 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3417 = 1.0 - _3387;
                        float _3427 = (0.5 / (((_3416 * ((_3402 * _3417) + _3387)) + 9.9999999392252902907785028219223e-09) + (((_3416 * _3417) + _3387) * _3402))) * _3416;
                        float _4834 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3438 = (((_3388 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3410 * _3410) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3192 = (_3358 * _3307.x) + _3265;
                        _3193 = (_3358 * _3307.y) + _3266;
                        _3194 = (_3358 * _3307.z) + _3267;
                        _3189 = (_3438 * _3324.x) + _3262;
                        _3190 = (_3438 * _3324.y) + _3263;
                        _3191 = (_3438 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_73_pred = _3194;
                    frontier_phi_73_pred_1 = _3193;
                    frontier_phi_73_pred_2 = _3192;
                    frontier_phi_73_pred_3 = _3191;
                    frontier_phi_73_pred_4 = _3190;
                    frontier_phi_73_pred_5 = _3189;
                }
                _2967 = frontier_phi_73_pred;
                _2965 = frontier_phi_73_pred_1;
                _2963 = frontier_phi_73_pred_2;
                _2961 = frontier_phi_73_pred_3;
                _2959 = frontier_phi_73_pred_4;
                _2957 = frontier_phi_73_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2957;
                    _3118 = _2959;
                    _3119 = _2961;
                    _3120 = _2963;
                    _3121 = _2965;
                    _3122 = _2967;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
        }
        uvec4 _2970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2971 = _2970.z;
        uint _2973 = (_2971 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2973) & _2851) == 0u)
        {
            _3085 = _2956;
            _3087 = _2958;
            _3089 = _2960;
            _3091 = _2962;
            _3093 = _2964;
            _3095 = _2966;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
            float _3111 = _3110 * _1909;
            float _3112 = _3110 * _1910;
            float _3113 = _3110 * _1911;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2973 < ((_2971 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3245 = _2956;
                float _3246 = _2958;
                float _3247 = _2960;
                float _3248 = _2962;
                float _3249 = _2964;
                float _3250 = _2966;
                uint _3251 = _2973;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3261)
                    {
                        frontier_phi_84_pred = _3249;
                        frontier_phi_84_pred_1 = _3248;
                        frontier_phi_84_pred_2 = _3247;
                        frontier_phi_84_pred_3 = _3246;
                        frontier_phi_84_pred_4 = _3245;
                        frontier_phi_84_pred_5 = _3250;
                    }
                    else
                    {
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3465 = _3245;
                        float _3466 = _3246;
                        float _3467 = _3247;
                        float _3468 = _3248;
                        float _3469 = _3249;
                        float _3470 = _3250;
                        uint _3471 = _3260;
                        uint _3472;
                        vec4 _3497;
                        float _3498;
                        vec4 _3513;
                        vec3 _3525;
                        vec4 _3540;
                        vec4 _3556;
                        float _3603;
                        bool _3604;
                        for (;;)
                        {
                            uint _3482 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 4u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            uint _3515 = (_3482 * 40u) + 8u;
                            _3525 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x));
                            uint _3527 = (_3482 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3543 = (_3482 * 40u) + 20u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3559 = (_3482 * 40u) + 24u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3578 = (_3482 * 40u) + 28u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3603 = fma(_1911, _3591.z, fma(_1910, _3591.y, _3591.x * _1909)) + _3591.w;
                            _3604 = !((fma(_1911, _3572.z, fma(_1910, _3572.y, _3572.x * _1909)) + _3572.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3604)
                            {
                                float _3631 = _3497.x - _1909;
                                float _3632 = _3497.y - _1910;
                                float _3633 = _3497.z - _1911;
                                float _3634 = dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633));
                                float _3637 = inversesqrt(_3634);
                                float _3638 = _3637 * _3631;
                                float _3639 = _3637 * _3632;
                                float _3640 = _3637 * _3633;
                                float _3644 = 1.0 - (_3634 / (_3498 * _3498));
                                float _4845 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3649 = sqrt(_3634) * _3513.w;
                                float _3651 = 1.39999997615814208984375 / (_3649 + 1.39999997615814208984375);
                                float _3652 = _3651 * _3651;
                                float _3655 = ((1.0 - _3652) * dot(vec3(_3638, _3639, _3640), vec3(_619, _622, _625))) + _3652;
                                float _3658 = _3649 * _3649;
                                float _3662 = (fma(_1911, _3540.z, fma(_1910, _3540.y, _3540.x * _1909)) + _3540.w) / _3603;
                                float _3663 = (fma(_1911, _3556.z, fma(_1910, _3556.y, _3556.x * _1909)) + _3556.w) / _3603;
                                float _3667 = 1.0 - dot(vec2(_3662, _3663), vec2(_3662, _3663));
                                float _4861 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3668 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3669 = _3668 * (((isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0))) * _3645) / ((_3658 * 0.699999988079071044921875) + 1.0));
                                float _3681 = exp2(log2(1.0 / ((_3658 * 3.5) + 5.0)) * 0.25);
                                float _3682 = 1.0 - _817;
                                float _3689 = sqrt(1.0 - ((1.0 - (_3682 * _3682)) * (1.0 - (_3681 * _3681))));
                                float _3690 = _3689 * _3689;
                                float _3691 = _3690 * _3690;
                                float _3692 = _3638 - _3111;
                                float _3693 = _3639 - _3112;
                                float _3694 = _3640 - _3113;
                                float _3698 = inversesqrt(dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694)));
                                float _3702 = dot(vec3(_619, _622, _625), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4872 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3705 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3706 = dot(vec3(_619, _622, _625), vec3(_3698 * _3692, _3698 * _3693, _3698 * _3694));
                                float _4883 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3709 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3713 = ((_3709 * _3709) * (_3691 + (-1.0))) + 1.0;
                                float _3714 = _3651 * _3690;
                                float _3715 = _3714 * _3714;
                                float _3721 = ((1.0 - _3715) * dot(vec3(_619, _622, _625), vec3(_3638, _3639, _3640))) + _3715;
                                float _4894 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3723 = 1.0 - _3690;
                                float _3733 = (0.5 / (((_3722 * ((_3705 * _3723) + _3690)) + 9.9999999392252902907785028219223e-09) + (((_3722 * _3723) + _3690) * _3705))) * _3722;
                                float _4905 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3743 = (_3668 * _3645) * (((_3691 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3713 * _3713) * ((_3658 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3669 * _3513.y;
                                frontier_phi_90_pred_1 = _3669 * _3513.x;
                                frontier_phi_90_pred_2 = _3743 * _3525.z;
                                frontier_phi_90_pred_3 = _3743 * _3525.y;
                                frontier_phi_90_pred_4 = _3743 * _3525.x;
                                frontier_phi_90_pred_5 = _3669 * _3513.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_90_pred;
                            _3750 = frontier_phi_90_pred_1;
                            _3749 = frontier_phi_90_pred_2;
                            _3748 = frontier_phi_90_pred_3;
                            _3747 = frontier_phi_90_pred_4;
                            _3752 = frontier_phi_90_pred_5;
                            _3455 = _3750 + _3468;
                            _3456 = _3751 + _3469;
                            _3457 = _3752 + _3470;
                            _3452 = _3747 + _3465;
                            _3453 = _3748 + _3466;
                            _3454 = _3749 + _3467;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3456;
                        frontier_phi_84_pred_1 = _3455;
                        frontier_phi_84_pred_2 = _3454;
                        frontier_phi_84_pred_3 = _3453;
                        frontier_phi_84_pred_4 = _3452;
                        frontier_phi_84_pred_5 = _3457;
                    }
                    _3094 = frontier_phi_84_pred;
                    _3092 = frontier_phi_84_pred_1;
                    _3090 = frontier_phi_84_pred_2;
                    _3088 = frontier_phi_84_pred_3;
                    _3086 = frontier_phi_84_pred_4;
                    _3096 = frontier_phi_84_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3086;
                        _3246 = _3088;
                        _3247 = _3090;
                        _3248 = _3092;
                        _3249 = _3094;
                        _3250 = _3096;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3096;
                frontier_phi_65_66_ladder_1 = _3092;
                frontier_phi_65_66_ladder_2 = _3094;
                frontier_phi_65_66_ladder_3 = _3088;
                frontier_phi_65_66_ladder_4 = _3086;
                frontier_phi_65_66_ladder_5 = _3090;
            }
            else
            {
                frontier_phi_65_66_ladder = _2966;
                frontier_phi_65_66_ladder_1 = _2962;
                frontier_phi_65_66_ladder_2 = _2964;
                frontier_phi_65_66_ladder_3 = _2958;
                frontier_phi_65_66_ladder_4 = _2956;
                frontier_phi_65_66_ladder_5 = _2960;
            }
            _3085 = frontier_phi_65_66_ladder_4;
            _3087 = frontier_phi_65_66_ladder_3;
            _3089 = frontier_phi_65_66_ladder_5;
            _3091 = frontier_phi_65_66_ladder_1;
            _3093 = frontier_phi_65_66_ladder_2;
            _3095 = frontier_phi_65_66_ladder;
        }
        float _3100 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2863 = (_3100 * _3091) + _2376;
        _2865 = (_3100 * _3093) + _2378;
        _2867 = (_3100 * _3095) + _2380;
        _2869 = ((_3085 * _793) * _3100) + _2714;
        _2871 = ((_3087 * _794) * _3100) + _2716;
        _2873 = ((_3089 * _795) * _3100) + _2718;
    }
    else
    {
        _2863 = _2376;
        _2865 = _2378;
        _2867 = _2380;
        _2869 = _2714;
        _2871 = _2716;
        _2873 = _2718;
    }
    uint _2879 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _2885 = cbInstanceData._m0[_2879].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _479) + cbMatDynParam._m0[7u].x) + (((_520 - (_520 * _444)) + (cbMatDynParam._m0[11u].x * _551)) * cbMatDynParam._m0[9u].x));
    float _2886 = cbInstanceData._m0[_2879].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _479) + cbMatDynParam._m0[7u].y) + (((_522 - (_522 * _444)) + (cbMatDynParam._m0[11u].y * _551)) * cbMatDynParam._m0[9u].y));
    float _2887 = cbInstanceData._m0[_2879].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _479) + cbMatDynParam._m0[7u].z) + (((_524 - (_524 * _444)) + (cbMatDynParam._m0[11u].z * _551)) * cbMatDynParam._m0[9u].z));
    float _4921 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4932 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4943 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4954 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2905 = (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2863 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _807))) + ((_2869 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + _2885;
    float _2907 = (_2886 + ((_2871 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2865 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _807)));
    float _2909 = (_2887 + ((_2873 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1639)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2867 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _807)));
    float _2910 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2911 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2912 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
    float _2917 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) - _506) * _479) + _506));
    float _2922 = cbInstanceData._m0[_699 + 6u].w * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)));
    float _2927 = _595 / cbSceneParam._m0[86u].x;
    float _2928 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2981 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2982 = _2981 / _577;
        float _2993 = _2982 * _287;
        float _2994 = _288 * _2982;
        float _2995 = (-0.0) - _2994;
        float _2996 = _2982 * _289;
        float _2998 = (cbSceneParam._m0[77u].w * _2995) / _2981;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2994;
        float _3006 = sqrt(((_2993 * _2993) + (_2994 * _2994)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2981)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3202;
        if (abs((_2995 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3202 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3148 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3202 = ((abs(_3006 / _2995) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3016 * _3157) - exp2(_3016 * _3158)) * _3146))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3204 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3213 = exp2((_3202 * (-1.44269502162933349609375)) * (1.0 - _3204.w));
        float _3214 = log2(_3213);
        float _3230 = log2(_2947);
        _3018 = (exp2(_3230 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].x)) * _3204.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3020 = (exp2(_3230 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].y)) * _3204.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3022 = (exp2(_3230 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3214 * cbSceneParam._m0[78u].z)) * _3204.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3024 = _3213 * _2947;
    }
    else
    {
        _3018 = _2944;
        _3020 = _2945;
        _3022 = _2946;
        _3024 = _2947;
    }
    bool _3240;
    vec4 _3034;
    vec4 _3056;
    float _3058;
    float _3062;
    float _3063;
    float _3064;
    float _3067;
    float _3070;
    float _3073;
    float _3074;
    bool _3084;
    for (;;)
    {
        _3034 = cbMatDynParam._m0[0u];
        float _3036 = roundEven(_3034.y);
        bool _3037 = _3036 == 3.0;
        float _3038 = log2(_3024);
        float _3042 = exp2(_3038 * cbSceneParam._m0[78u].x);
        float _3043 = exp2(_3038 * cbSceneParam._m0[78u].y);
        float _3044 = exp2(_3038 * cbSceneParam._m0[78u].z);
        float _3045 = _3042 * _2910;
        float _3046 = _3043 * _2911;
        float _3047 = _3044 * _2912;
        float _3054 = _584 + (-0.5);
        _3056 = cbMtdParam._m0[1u];
        _3058 = _3056.y * _3054;
        float _3061 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3062 = _3061 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
        _3063 = _3061 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
        _3064 = _3061 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
        _3067 = ((_2917 * _2885) * _3042) * _3061;
        _3070 = ((_2917 * _2886) * _3043) * _3061;
        _3073 = ((_2917 * _2887) * _3044) * _3061;
        _3074 = _3054 * 0.999000012874603271484375;
        _3084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3084)
        {
            if ((cbInstanceData._m0[_699 + 7u].x + _3074) < 0.5)
            {
                _3240 = true;
                break;
            }
        }
        uint _3181 = _700 + uint(_3034.w);
        if ((cbInstanceData._m0[_3181].w < 1.0) && ((cbInstanceData._m0[_3181].w + _3074) < 0.5))
        {
            _3240 = true;
            break;
        }
        if ((_3058 + _357) < _3056.x)
        {
            _3240 = true;
            break;
        }
        _3240 = false;
        break;
    }
    float _3443;
    if (_3240)
    {
        discard_state = true;
        _3443 = 0.0;
    }
    else
    {
        _3443 = _2922;
    }
    SV_Target.x = _3062;
    SV_Target.y = _3063;
    SV_Target.z = _3064;
    SV_Target.w = _3443;
    SV_Target_1.x = _3067;
    SV_Target_1.y = _3070;
    SV_Target_1.z = _3073;
    SV_Target_1.w = _2922;
    discard_exit();
}


