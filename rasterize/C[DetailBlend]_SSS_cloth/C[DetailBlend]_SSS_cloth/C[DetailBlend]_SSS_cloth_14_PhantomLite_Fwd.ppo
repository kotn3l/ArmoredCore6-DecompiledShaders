#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1230;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    vec4 _298 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _316 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = exp2(log2(1.0 - _298.w) * 8.0);
    vec4 _344 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _369 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _378 = ((_316.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _369.x;
    float _381 = ((_316.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _369.y;
    float _384 = ((_316.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _369.z;
    float _391 = (((cbMtdParam._m0[12u].x * _344.x) - _378) * _332) + _378;
    float _392 = (((cbMtdParam._m0[12u].y * _344.y) - _381) * _332) + _381;
    float _393 = (((cbMtdParam._m0[12u].z * _344.z) - _384) * _332) + _384;
    float _394 = _369.w * _316.w;
    float _415 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _418 = ((cbMtdParam._m0[14u].y - _415) * _332) + _415;
    vec4 _430 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    vec4 _452 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _460 = (_298.z * 2.0) * (cbMtdParam._m0[13u].x + _430.z);
    float _464 = (((_452.z - _460) + cbMtdParam._m0[14u].x) * _332) + _460;
    float _468 = (_298.x * 2.0) + (-1.0);
    float _470 = (_298.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_468, _470), vec2(_468, _470));
    float _3593 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    float _489 = ((((((_452.x - _432) * _332) + _432) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _468;
    float _490 = ((((((_452.y - _433) * _332) + _433) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _470;
    float _493 = fma(_476, _226, fma(_490, _218 * TANGENT.x, (_204 * _196) * _489));
    float _496 = fma(_476, _227, fma(_490, _218 * TANGENT.y, (_204 * _197) * _489));
    float _499 = fma(_476, _228, fma(_490, _218 * TANGENT.z, (_204 * _198) * _489));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3604 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _507 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _508 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _509 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _3637 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _510 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _511 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _512 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _520 = cbMatDynParam._m0[9u].x * _509;
    float _521 = cbMatDynParam._m0[9u].y * _510;
    float _522 = cbMatDynParam._m0[9u].z * _511;
    float _529 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _530 = _529 * _283;
    float _531 = _529 * _284;
    float _532 = _529 * _285;
    float _533 = dot(vec3(_504, _505, _506), vec3(_530, _531, _532));
    float _539 = abs(exp2(log2(_533) * cbMatDynParam._m0[12u].x));
    float _540 = isnan(0.100000001490116119384765625) ? _539 : (isnan(_539) ? 0.100000001490116119384765625 : max(_539, 0.100000001490116119384765625));
    float _546 = ((isnan(0.699999988079071044921875) ? _540 : (isnan(_540) ? 0.699999988079071044921875 : min(_540, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _569 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3680 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3691 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _577 = dot(vec3(_504, _505, _506), vec3(0.0, -1.0, 0.0));
    float _3702 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _587 = (_580 * _509) * cbMatDynParam._m0[11u].x;
    float _589 = (_580 * _510) * cbMatDynParam._m0[11u].y;
    float _591 = (_580 * _511) * cbMatDynParam._m0[11u].z;
    float _598 = dot(vec3(_530, _531, _532), vec3(_504, _505, _506));
    float _601 = _598 * 2.0;
    float _611 = dot(vec3((-0.0) - (_530 - (_601 * _504)), (-0.0) - (_531 - (_601 * _505)), (-0.0) - (_532 - (_601 * _506))), vec3(0.0, -1.0, 0.0));
    float _3713 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _618 = exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 4.0);
    float _644 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _651 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _653 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _655 = _653.w;
    float _674 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _677 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _680 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    vec4 _682 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _684 = _682.x;
    float _696 = (((_682.y - _508) + (_682.w * _508)) * cbMtdParam._m0[3u].x) + _508;
    vec4 _697 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _713 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_684 * _684)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _697.z;
    float _722 = (((cbMatDynParam._m0[15u].x - _512) * cbMatDynParam._m0[15u].w) * _713) + _512;
    float _730 = ((_713 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _696)) + _696;
    uint _754 = uint(roundEven(NORMAL.w)) * 13u;
    uint _755 = _754 + 9u;
    uint _756 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * _520) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * _521) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * _522) * cbInstanceData._m0[_756].z;
    float _3724 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    vec4 _768 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _773 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _784 = (((_773.x - _722) + (_773.w * _722)) * cbMtdParam._m0[3u].x) + _722;
    float _797 = (cbMtdParam._m0[3u].x * (((_765 * _655) - _765) + _768.x)) + _765;
    float _798 = (cbMtdParam._m0[3u].x * (((_766 * _655) - _766) + _768.y)) + _766;
    float _799 = (cbMtdParam._m0[3u].x * (((_767 * _655) - _767) + _768.z)) + _767;
    float _813 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_722 * (_520 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_722 * (_521 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_722 * (_522 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _817 = _813 * cbMatDynParam._m0[13u].w;
    float _827 = (_817 * (cbMatDynParam._m0[13u].x - _797)) + _797;
    float _828 = (_817 * (cbMatDynParam._m0[13u].y - _798)) + _798;
    float _829 = (_817 * (cbMatDynParam._m0[13u].z - _799)) + _799;
    float _837 = ((_813 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _784)) + _784;
    float _838 = 1.0 - _837;
    float _839 = _838 * _827;
    float _840 = _838 * _828;
    float _841 = _838 * _829;
    float _845 = (_827 + (-0.039999999105930328369140625)) * _837;
    float _846 = (_828 + (-0.039999999105930328369140625)) * _837;
    float _847 = (_829 + (-0.039999999105930328369140625)) * _837;
    float _848 = _845 + 0.039999999105930328369140625;
    float _849 = _846 + 0.039999999105930328369140625;
    float _850 = _847 + 0.039999999105930328369140625;
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _650, cbSceneParam._m0[86u].y * _651));
    float _862 = _859.x * TEXCOORD_4;
    float _863 = _533 * 2.0;
    float _867 = (_863 * _504) - _530;
    float _868 = (_863 * _505) - _531;
    float _869 = (_863 * _506) - _532;
    float _870 = abs(_598);
    float _3757 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_730);
    float _884 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _890 = (1.0 - _884) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _891 = _884 * _872;
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _958 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _962 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _987 = _919 + _504;
        float _988 = _923 + _505;
        float _989 = _927 + _506;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_504, _505, _506), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3805 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_504, _505, _506), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3838 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_504, _505, _506), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3871 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1274 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1278 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1301 = _919 + _504;
        float _1302 = _923 + _505;
        float _1303 = _927 + _506;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_504, _505, _506), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3934 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_504, _505, _506), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3967 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_504, _505, _506), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4000 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1230;
        _1540 = _1230;
        _1541 = _1230;
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1242)) + _1242;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1243)) + _1243;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1244)) + _1244;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _867 * 0.5;
    float _1608 = _868 * 0.5;
    float _1609 = _869 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _730);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1734 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1737 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1765 = frontier_phi_16_14_ladder;
        }
        float _1971;
        if (_1734 > 0.0)
        {
            _1971 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1971 = frontier_phi_25_21_ladder;
        }
        float _2225;
        if (_1737 > 0.0)
        {
            _2225 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2225 = frontier_phi_37_32_ladder;
        }
        float _2227 = isnan(_1971) ? _1765 : (isnan(_1765) ? _1971 : min(_1765, _1971));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1731) + _1720;
        float _2233 = (_2228 * _1734) + _1724;
        float _2234 = (_2228 * _1737) + _1728;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_15_37_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_15_37_ladder_2;
        _1755 = frontier_phi_15_37_ladder_1;
        _1757 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1673);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _730);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1855;
    float _1857;
    float _1859;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1819 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1823 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1827 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1830 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1833 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1836 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1976;
        if (_1830 > 0.0)
        {
            _1976 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1976 = frontier_phi_27_23_ladder;
        }
        float _2252;
        if (_1833 > 0.0)
        {
            _2252 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2252 = frontier_phi_39_34_ladder;
        }
        float _2465;
        if (_1836 > 0.0)
        {
            _2465 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2465 = frontier_phi_48_45_ladder;
        }
        float _2467 = isnan(_2252) ? _1976 : (isnan(_1976) ? _2252 : min(_1976, _2252));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1830) + _1819;
        float _2473 = (_2468 * _1833) + _1823;
        float _2474 = (_2468 * _1836) + _1827;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_24_48_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1855 = frontier_phi_24_48_ladder_2;
        _1857 = frontier_phi_24_48_ladder_1;
        _1859 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1762);
        _1855 = _1839.x * cbModelParam._m0[1u].z;
        _1857 = _1839.y * cbModelParam._m0[1u].z;
        _1859 = _1839.z * cbModelParam._m0[1u].z;
    }
    float _1872 = (((_890 * _848) + _891) * _862) * ((cbModelParam._m0[1u].w * (_1855 - _1753)) + _1753);
    float _1874 = (((_890 * _849) + _891) * _862) * ((cbModelParam._m0[1u].w * (_1857 - _1755)) + _1755);
    float _1876 = (((_890 * _850) + _891) * _862) * ((cbModelParam._m0[1u].w * (_1859 - _1757)) + _1757);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1872 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1872 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1872 * cbSceneParam._m0[91u].x));
    uvec4 _1895 = floatBitsToUint(cbInstanceData._m0[_754 + 5u]);
    uint _1897 = _1895.x * 14u;
    uint _1898 = _1897 + 13u;
    float _1905 = _862 + (-1.0);
    float _1910 = (cbLight._m0[_1898].x * _1905) + 1.0;
    float _1911 = (cbLight._m0[_1898].y * _1905) + 1.0;
    float _1912 = (cbLight._m0[_1898].z * _1905) + 1.0;
    float _1913 = (cbLight._m0[_1898].w * _1905) + 1.0;
    uint _1914 = _1897 + 5u;
    float _1920 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1924 = _1897 + 4u;
    float _1930 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1934 = _1897 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_504, _505, _506));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_504, _505, _506));
    float _4136 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4147 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1914].x * _1920) * _1955) + ((cbLight._m0[_1924].x * _1930) * _1953);
    float _1963 = ((_1920 * cbLight._m0[_1914].y) * _1955) + ((_1930 * cbLight._m0[_1924].y) * _1953);
    float _1964 = ((_1920 * cbLight._m0[_1914].z) * _1955) + ((_1930 * cbLight._m0[_1924].z) * _1953);
    uvec4 _1968 = floatBitsToUint(cbLight._m0[_1897 + 12u]);
    bool _1970 = _1968.x == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1970)
    {
        _1981 = _1962;
        _1983 = _1963;
        _1985 = _1964;
    }
    else
    {
        uint _1989 = _1897 + 6u;
        float _2005 = (dot(vec3(cbLight._m0[_1897 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _4158 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2008 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _1981 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1962;
        _1983 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1963;
        _1985 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1964;
    }
    bool _1988 = _1968.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1988)
    {
        _2026 = _1981;
        _2028 = _1983;
        _2030 = _1985;
    }
    else
    {
        uint _2196 = _1897 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1897 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4174 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2215 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2026 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1981;
        _2028 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1983;
        _2030 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1985;
    }
    uint _2033 = _1897 + 8u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _730) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1897].x + _530;
    float _2049 = cbLight._m0[_1897].y + _531;
    float _2050 = cbLight._m0[_1897].z + _532;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1897].xyz));
    float _4190 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _2062 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2063 = dot(vec3(_504, _505, _506), vec3(_2055, _2056, _2057));
    float _4212 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2055, _2056, _2057));
    float _4223 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2047 * _2047;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0);
    float _2084 = 0.959999978542327880859375 - _845;
    float _2086 = 0.959999978542327880859375 - _846;
    float _2087 = 0.959999978542327880859375 - _847;
    float _2094 = 1.0 - _2047;
    float _2105 = (0.5 / (((_2062 * ((_2061 * _2094) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2094) + _2047) * _2061))) * _2061;
    float _4234 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    uint _2118 = _1897 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _730) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1934].x + _530;
    float _2132 = cbLight._m0[_1934].y + _531;
    float _2133 = cbLight._m0[_1934].z + _532;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1934].xyz));
    float _4245 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2145 = dot(vec3(_504, _505, _506), vec3(_2138, _2139, _2140));
    float _4256 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2138, _2139, _2140));
    float _4267 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) * 5.0);
    float _2171 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2062 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2171) + _2130) * _2144))) * _2144;
    float _4278 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2193 = (((((_2164 * _2084) + _848) * cbLight._m0[_2118].x) * _2183) * _1920) + (((((_2083 * _2084) + _848) * cbLight._m0[_2033].x) * _2107) * _1930);
    float _2194 = (((((_2164 * _2086) + _849) * cbLight._m0[_2118].y) * _2183) * _1920) + (((((_2083 * _2086) + _849) * cbLight._m0[_2033].y) * _2107) * _1930);
    float _2195 = (((((_2164 * _2087) + _850) * cbLight._m0[_2118].z) * _2183) * _1920) + (((((_2083 * _2087) + _850) * cbLight._m0[_2033].z) * _2107) * _1930);
    float _2257;
    float _2259;
    float _2261;
    if (_1970)
    {
        _2257 = _2193;
        _2259 = _2194;
        _2261 = _2195;
    }
    else
    {
        uint _2263 = _1897 + 2u;
        uint _2267 = _1897 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _730) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _530;
        float _2284 = cbLight._m0[_2263].y + _531;
        float _2285 = cbLight._m0[_2263].z + _532;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2263].xyz));
        float _4289 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2297 = dot(vec3(_504, _505, _506), vec3(_2290, _2291, _2292));
        float _4300 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4311 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
        float _2323 = 1.0 - _2282;
        float _2333 = (0.5 / (((_2062 * ((_2296 * _2323) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2323) + _2282) * _2296))) * _2296;
        float _4322 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2335 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2336 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2257 = (((((_2316 * _2084) + _848) * cbLight._m0[_2267].x) * _2335) * _2336) + _2193;
        _2259 = (((((_2316 * _2086) + _849) * cbLight._m0[_2267].y) * _2335) * _2336) + _2194;
        _2261 = (((((_2316 * _2087) + _850) * cbLight._m0[_2267].z) * _2335) * _2336) + _2195;
    }
    float _2371;
    float _2373;
    float _2375;
    if (_1988)
    {
        _2371 = _2257;
        _2373 = _2259;
        _2375 = _2261;
    }
    else
    {
        uint _2382 = _1897 + 3u;
        uint _2386 = _1897 + 11u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _730) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _530;
        float _2403 = cbLight._m0[_2382].y + _531;
        float _2404 = cbLight._m0[_2382].z + _532;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2382].xyz));
        float _4338 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2416 = dot(vec3(_504, _505, _506), vec3(_2409, _2410, _2411));
        float _4349 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4360 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2062 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2442) + _2401) * _2415))) * _2415;
        float _4371 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2371 = (((((_2435 * _2084) + _848) * cbLight._m0[_2386].x) * _2454) * _2455) + _2257;
        _2373 = (((((_2435 * _2086) + _849) * cbLight._m0[_2386].y) * _2454) * _2455) + _2259;
        _2375 = (((((_2435 * _2087) + _850) * cbLight._m0[_2386].z) * _2454) * _2455) + _2261;
    }
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    if (_1895.y == 0u)
    {
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2530;
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2530;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2530;
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.x;
        uint _2557 = uint((float(_2545.y) * floor(float(uint(cbSceneParam._m0[85u].y * _651) / _2546))) + floor(float(uint(cbSceneParam._m0[85u].x * _650) / _2546)));
        float _2567 = (log2(_2533 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2568 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        uint _2571 = uint(isnan(14.0) ? _2568 : (isnan(_2568) ? 14.0 : min(_2568, 14.0)));
        uvec4 _2576 = texelFetch(g_lightClusterGridBuffer, int(((_2571 << 2u) + (_2557 << 6u)) >> 2u));
        uint _2577 = _2576.x;
        uint _2578 = _2545.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2578 >> 4u) & 15u)) + 4294967295u) & _2577) == 0u) || ((_2578 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2872)
                {
                    frontier_phi_63_pred = _2861;
                    frontier_phi_63_pred_1 = _2860;
                    frontier_phi_63_pred_2 = _2859;
                    frontier_phi_63_pred_3 = _2858;
                    frontier_phi_63_pred_4 = _2857;
                    frontier_phi_63_pred_5 = _2856;
                }
                else
                {
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    uint _2986;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2871;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    for (;;)
                    {
                        uint _2990 = uint(findLSB(_2986)) + (_2862 << 5u);
                        uint _2987 = (_2986 + 4294967295u) & _2986;
                        uint _2992 = _2990 * 48u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3012 = (_2990 * 48u) + 4u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3031 = (_2990 * 48u) + 8u;
                        vec3 _3042 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x));
                        float _3046 = _3006.x - _2531;
                        float _3047 = _3006.y - _2532;
                        float _3048 = _3006.z - _2533;
                        float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                        float _3052 = inversesqrt(_3049);
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3056 = dot(vec3(_674, _677, _680), vec3(_3053, _3054, _3055));
                        float _3061 = 1.0 - (_3049 * _3006.w);
                        float _4397 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3063 = sqrt(_3049) * _3025.w;
                        float _3066 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _3056) + _3067;
                        float _3073 = _3063 * _3063;
                        float _3076 = ((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3062) / ((_3073 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2531;
                        float _3081 = (-0.0) - _2532;
                        float _3082 = (-0.0) - _2533;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _872;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3053;
                        float _3109 = _3088 + _3054;
                        float _3110 = _3089 + _3055;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_674, _677, _680), vec3(_3087, _3088, _3089));
                        float _4413 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3122 = dot(vec3(_674, _677, _680), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4424 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3066 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3056) + _3131;
                        float _4435 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4446 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3129 * _3129) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * _3062;
                        _2915 = (_3076 * _3025.x) + _2983;
                        _2916 = (_3076 * _3025.y) + _2984;
                        _2917 = (_3076 * _3025.z) + _2985;
                        _2912 = (_3157 * _3042.x) + _2980;
                        _2913 = (_3157 * _3042.y) + _2981;
                        _2914 = (_3157 * _3042.z) + _2982;
                        if (_2987 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2987;
                        }
                    }
                    frontier_phi_63_pred = _2917;
                    frontier_phi_63_pred_1 = _2916;
                    frontier_phi_63_pred_2 = _2915;
                    frontier_phi_63_pred_3 = _2914;
                    frontier_phi_63_pred_4 = _2913;
                    frontier_phi_63_pred_5 = _2912;
                }
                _2714 = frontier_phi_63_pred;
                _2712 = frontier_phi_63_pred_1;
                _2710 = frontier_phi_63_pred_2;
                _2708 = frontier_phi_63_pred_3;
                _2706 = frontier_phi_63_pred_4;
                _2704 = frontier_phi_63_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2704;
                    _2857 = _2706;
                    _2858 = _2708;
                    _2859 = _2710;
                    _2860 = _2712;
                    _2861 = _2714;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2720) & _2577) == 0u)
        {
            _2824 = _2703;
            _2826 = _2705;
            _2828 = _2707;
            _2830 = _2709;
            _2832 = _2711;
            _2834 = _2713;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
            float _2850 = _2849 * _2531;
            float _2851 = _2849 * _2532;
            float _2852 = _2849 * _2533;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2963 = _2703;
                float _2964 = _2705;
                float _2965 = _2707;
                float _2966 = _2709;
                float _2967 = _2711;
                float _2968 = _2713;
                uint _2969 = _2720;
                uint _2978;
                bool _2979;
                for (;;)
                {
                    _2978 = texelFetch(g_lightClassification, int((((_2571 << 5u) + (_2557 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                    _2979 = _2978 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2979)
                    {
                        frontier_phi_69_pred = _2968;
                        frontier_phi_69_pred_1 = _2967;
                        frontier_phi_69_pred_2 = _2966;
                        frontier_phi_69_pred_3 = _2965;
                        frontier_phi_69_pred_4 = _2964;
                        frontier_phi_69_pred_5 = _2963;
                    }
                    else
                    {
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        float _3177 = _2965;
                        float _3178 = _2966;
                        float _3179 = _2967;
                        float _3180 = _2968;
                        uint _3181 = _2978;
                        uint _3182;
                        vec4 _3207;
                        float _3208;
                        vec4 _3223;
                        vec3 _3235;
                        vec4 _3250;
                        vec4 _3266;
                        float _3313;
                        bool _3314;
                        for (;;)
                        {
                            uint _3192 = ((_2969 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3181));
                            _3182 = (_3181 + 4294967295u) & _3181;
                            uint _3194 = _3192 * 40u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3208 = _3207.w;
                            uint _3210 = (_3192 * 40u) + 4u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3225 = (_3192 * 40u) + 8u;
                            _3235 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x));
                            uint _3237 = (_3192 * 40u) + 16u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3253 = (_3192 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3269 = (_3192 * 40u) + 24u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3288 = (_3192 * 40u) + 28u;
                            vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3313 = fma(_2533, _3301.z, fma(_2532, _3301.y, _3301.x * _2531)) + _3301.w;
                            _3314 = !((fma(_2533, _3282.z, fma(_2532, _3282.y, _3282.x * _2531)) + _3282.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3314)
                            {
                                float _3341 = _3207.x - _2531;
                                float _3342 = _3207.y - _2532;
                                float _3343 = _3207.z - _2533;
                                float _3344 = dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343));
                                float _3347 = inversesqrt(_3344);
                                float _3348 = _3347 * _3341;
                                float _3349 = _3347 * _3342;
                                float _3350 = _3347 * _3343;
                                float _3354 = 1.0 - (_3344 / (_3208 * _3208));
                                float _4457 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3359 = sqrt(_3344) * _3223.w;
                                float _3361 = 1.39999997615814208984375 / (_3359 + 1.39999997615814208984375);
                                float _3362 = _3361 * _3361;
                                float _3365 = ((1.0 - _3362) * dot(vec3(_3348, _3349, _3350), vec3(_674, _677, _680))) + _3362;
                                float _3368 = _3359 * _3359;
                                float _3372 = (fma(_2533, _3250.z, fma(_2532, _3250.y, _3250.x * _2531)) + _3250.w) / _3313;
                                float _3373 = (fma(_2533, _3266.z, fma(_2532, _3266.y, _3266.x * _2531)) + _3266.w) / _3313;
                                float _3377 = 1.0 - dot(vec2(_3372, _3373), vec2(_3372, _3373));
                                float _4473 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3379 = _3378 * (((isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0))) * _3355) / ((_3368 * 0.699999988079071044921875) + 1.0));
                                float _3391 = exp2(log2(1.0 / ((_3368 * 3.5) + 5.0)) * 0.25);
                                float _3392 = 1.0 - _872;
                                float _3399 = sqrt(1.0 - ((1.0 - (_3392 * _3392)) * (1.0 - (_3391 * _3391))));
                                float _3400 = _3399 * _3399;
                                float _3401 = _3400 * _3400;
                                float _3402 = _3348 - _2850;
                                float _3403 = _3349 - _2851;
                                float _3404 = _3350 - _2852;
                                float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                                float _3412 = dot(vec3(_674, _677, _680), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4484 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3416 = dot(vec3(_674, _677, _680), vec3(_3408 * _3402, _3408 * _3403, _3408 * _3404));
                                float _4495 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3423 = ((_3419 * _3419) * (_3401 + (-1.0))) + 1.0;
                                float _3424 = _3361 * _3400;
                                float _3425 = _3424 * _3424;
                                float _3431 = ((1.0 - _3425) * dot(vec3(_674, _677, _680), vec3(_3348, _3349, _3350))) + _3425;
                                float _4506 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3433 = 1.0 - _3400;
                                float _3443 = (0.5 / (((_3432 * ((_3415 * _3433) + _3400)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3400) * _3415))) * _3432;
                                float _4517 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3453 = (_3378 * _3355) * (((_3401 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3423 * _3423) * ((_3368 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3379 * _3223.z;
                                frontier_phi_75_pred_1 = _3379 * _3223.y;
                                frontier_phi_75_pred_2 = _3379 * _3223.x;
                                frontier_phi_75_pred_3 = _3453 * _3235.z;
                                frontier_phi_75_pred_4 = _3453 * _3235.y;
                                frontier_phi_75_pred_5 = _3453 * _3235.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3462 = frontier_phi_75_pred;
                            _3461 = frontier_phi_75_pred_1;
                            _3460 = frontier_phi_75_pred_2;
                            _3459 = frontier_phi_75_pred_3;
                            _3458 = frontier_phi_75_pred_4;
                            _3457 = frontier_phi_75_pred_5;
                            _3165 = _3460 + _3178;
                            _3166 = _3461 + _3179;
                            _3167 = _3462 + _3180;
                            _3162 = _3457 + _3175;
                            _3163 = _3458 + _3176;
                            _3164 = _3459 + _3177;
                            if (_3182 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3182;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3167;
                        frontier_phi_69_pred_1 = _3166;
                        frontier_phi_69_pred_2 = _3165;
                        frontier_phi_69_pred_3 = _3164;
                        frontier_phi_69_pred_4 = _3163;
                        frontier_phi_69_pred_5 = _3162;
                    }
                    _2835 = frontier_phi_69_pred;
                    _2833 = frontier_phi_69_pred_1;
                    _2831 = frontier_phi_69_pred_2;
                    _2829 = frontier_phi_69_pred_3;
                    _2827 = frontier_phi_69_pred_4;
                    _2825 = frontier_phi_69_pred_5;
                    uint _2970 = _2969 + 1u;
                    if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2963 = _2825;
                        _2964 = _2827;
                        _2965 = _2829;
                        _2966 = _2831;
                        _2967 = _2833;
                        _2968 = _2835;
                        _2969 = _2970;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2835;
                frontier_phi_57_58_ladder_1 = _2833;
                frontier_phi_57_58_ladder_2 = _2831;
                frontier_phi_57_58_ladder_3 = _2829;
                frontier_phi_57_58_ladder_4 = _2827;
                frontier_phi_57_58_ladder_5 = _2825;
            }
            else
            {
                frontier_phi_57_58_ladder = _2713;
                frontier_phi_57_58_ladder_1 = _2711;
                frontier_phi_57_58_ladder_2 = _2709;
                frontier_phi_57_58_ladder_3 = _2707;
                frontier_phi_57_58_ladder_4 = _2705;
                frontier_phi_57_58_ladder_5 = _2703;
            }
            _2824 = frontier_phi_57_58_ladder_5;
            _2826 = frontier_phi_57_58_ladder_4;
            _2828 = frontier_phi_57_58_ladder_3;
            _2830 = frontier_phi_57_58_ladder_2;
            _2832 = frontier_phi_57_58_ladder_1;
            _2834 = frontier_phi_57_58_ladder;
        }
        float _2839 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2589 = (_2839 * _2830) + _2026;
        _2591 = (_2839 * _2832) + _2028;
        _2593 = (_2839 * _2834) + _2030;
        _2595 = ((_2824 * _848) * _2839) + _2371;
        _2597 = ((_2826 * _849) * _2839) + _2373;
        _2599 = ((_2828 * _850) * _2839) + _2375;
    }
    else
    {
        _2589 = _2026;
        _2591 = _2028;
        _2593 = _2030;
        _2595 = _2371;
        _2597 = _2373;
        _2599 = _2375;
    }
    uint _2605 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _2611 = cbInstanceData._m0[_2605].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _546) + cbMatDynParam._m0[7u].x) + (((_587 - (_587 * _512)) + (cbMatDynParam._m0[11u].x * _618)) * cbMatDynParam._m0[9u].x));
    float _2612 = cbInstanceData._m0[_2605].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _546) + cbMatDynParam._m0[7u].y) + (((_589 - (_589 * _512)) + (cbMatDynParam._m0[11u].y * _618)) * cbMatDynParam._m0[9u].y));
    float _2613 = cbInstanceData._m0[_2605].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _546) + cbMatDynParam._m0[7u].z) + (((_591 - (_591 * _512)) + (cbMatDynParam._m0[11u].z * _618)) * cbMatDynParam._m0[9u].z));
    float _4533 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4544 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4555 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4566 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2631 = (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2589 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _862))) + ((_2595 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + _2611;
    float _2633 = (_2612 + ((_2597 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2591 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _862)));
    float _2635 = (_2613 + ((_2599 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1662)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2593 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _862)));
    float _2643 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) - _573) * _546) + _573));
    float _2648 = cbInstanceData._m0[_754 + 6u].w * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)));
    float _2653 = _650 / cbSceneParam._m0[86u].x;
    float _2654 = _651 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _644 : (isnan(_644) ? cbSceneParam._m0[77u].w : min(_644, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_644 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_644) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _644 : min(cbSceneParam._m0[80u].w, _644));
        float _2729 = _2728 / _644;
        float _2740 = _2729 * _283;
        float _2741 = _284 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2743 = _2729 * _285;
        float _2745 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2746 = _2745 + cbSceneParam._m0[79u].w;
        float _2747 = cbSceneParam._m0[79u].w - _2741;
        float _2753 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2743 * _2743));
        float _2756 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2753;
        float _2761 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2763 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2925;
        if (abs((_2742 - _2745) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2925 = ((((_2746 > 0.0) ? exp2(_2761 * _2746) : (2.0 - exp2(_2763 * _2746))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2756;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : max(_2746, _2747));
            float _2887 = isnan(_2747) ? _2746 : (isnan(_2746) ? _2747 : min(_2746, _2747));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2925 = ((abs(_2753 / _2742) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2761 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2761 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2763 * _2896) - exp2(_2763 * _2897)) * _2885))) + (_2756 * cbSceneParam._m0[80u].z);
        }
        vec4 _2927 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2936 = exp2((_2925 * (-1.44269502162933349609375)) * (1.0 - _2927.w));
        float _2937 = log2(_2936);
        float _2953 = log2(_2673);
        _2765 = (exp2(_2953 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].x)) * _2927.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2767 = (exp2(_2953 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].y)) * _2927.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2769 = (exp2(_2953 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].z)) * _2927.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2771 = _2936 * _2673;
    }
    else
    {
        _2765 = _2670;
        _2767 = _2671;
        _2769 = _2672;
        _2771 = _2673;
    }
    float _2783 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2784 = _2783 == 3.0;
    float _2785 = log2(_2771);
    float _2789 = exp2(_2785 * cbSceneParam._m0[78u].x);
    float _2790 = exp2(_2785 * cbSceneParam._m0[78u].y);
    float _2791 = exp2(_2785 * cbSceneParam._m0[78u].z);
    float _2792 = _2789 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)));
    float _2793 = _2790 * (isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0)));
    float _2794 = _2791 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0)));
    float _2803 = (_2783 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2803 * (_2784 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2765)));
    SV_Target.y = _2803 * (_2784 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.z = _2803 * (_2784 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.w = _2648;
    SV_Target_1.x = ((_2643 * _2611) * _2789) * _2803;
    SV_Target_1.y = ((_2643 * _2612) * _2790) * _2803;
    SV_Target_1.z = ((_2643 * _2613) * _2791) * _2803;
    SV_Target_1.w = _2648;
}


