#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _240 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _257 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _280 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _289 = ((_257.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _280.x;
    float _292 = ((_257.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _280.y;
    float _295 = ((_257.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _280.z;
    float _296 = _280.w * _257.w;
    float _316 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    vec4 _328 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _340 = (_240.z * 2.0) * (cbMtdParam._m0[13u].x + _328.z);
    float _344 = (_240.x * 2.0) + (-1.0);
    float _346 = (_240.y * 2.0) + (-1.0);
    float _347 = dot(vec2(_344, _346), vec2(_344, _346));
    float _3415 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _353 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    float _360 = (((_328.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _344;
    float _361 = (((_328.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _346;
    float _364 = fma(_353, _224, fma(_361, _216 * TANGENT.x, (_202 * _194) * _360));
    float _367 = fma(_353, _225, fma(_361, _216 * TANGENT.y, (_202 * _195) * _360));
    float _370 = fma(_353, _226, fma(_361, _216 * TANGENT.z, (_202 * _196) * _360));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    float _375 = _374 * _364;
    float _376 = _374 * _367;
    float _377 = _374 * _370;
    float _3426 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _378 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _379 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _380 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _3459 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _381 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _382 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _383 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _399 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _442 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _452 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _442);
    float _453 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _442);
    float _454 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _442);
    float _458 = inversesqrt(dot(vec3(_452, _453, _454), vec3(_452, _453, _454)));
    float _459 = _452 * _458;
    float _460 = _453 * _458;
    float _461 = _454 * _458;
    float _467 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _468 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _470 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _472 = _470.w;
    float _492 = fma(_377, cbSceneParam._m0[5u].z, fma(_376, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _375));
    float _495 = fma(_377, cbSceneParam._m0[6u].z, fma(_376, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _375));
    float _498 = fma(_377, cbSceneParam._m0[7u].z, fma(_376, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _375));
    vec4 _500 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _502 = _500.x;
    float _514 = (((_500.y - _379) + (_500.w * _379)) * cbMtdParam._m0[3u].x) + _379;
    float _531 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_502 * _502)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _540 = (((cbMatDynParam._m0[15u].x - _383) * cbMatDynParam._m0[15u].w) * _531) + _383;
    float _548 = ((_531 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _514)) + _514;
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = (_572 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * _380) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * _381) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * _382) * cbInstanceData._m0[_574].z;
    float _3492 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    vec4 _586 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _591 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _602 = (((_591.x - _540) + (_591.w * _540)) * cbMtdParam._m0[3u].x) + _540;
    float _615 = (cbMtdParam._m0[3u].x * (((_583 * _472) - _583) + _586.x)) + _583;
    float _616 = (cbMtdParam._m0[3u].x * (((_584 * _472) - _584) + _586.y)) + _584;
    float _617 = (cbMtdParam._m0[3u].x * (((_585 * _472) - _585) + _586.z)) + _585;
    vec4 _618 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _631 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_540 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_540 * (_381 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_540 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _618.z;
    float _635 = _631 * cbMatDynParam._m0[13u].w;
    float _645 = (_635 * (cbMatDynParam._m0[13u].x - _615)) + _615;
    float _646 = (_635 * (cbMatDynParam._m0[13u].y - _616)) + _616;
    float _647 = (_635 * (cbMatDynParam._m0[13u].z - _617)) + _617;
    float _655 = ((_631 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _602)) + _602;
    float _656 = 1.0 - _655;
    float _657 = _656 * _645;
    float _658 = _656 * _646;
    float _659 = _656 * _647;
    float _663 = (_645 + (-0.039999999105930328369140625)) * _655;
    float _664 = (_646 + (-0.039999999105930328369140625)) * _655;
    float _665 = (_647 + (-0.039999999105930328369140625)) * _655;
    float _666 = _663 + 0.039999999105930328369140625;
    float _667 = _664 + 0.039999999105930328369140625;
    float _668 = _665 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _467, cbSceneParam._m0[86u].y * _468));
    float _680 = _677.x * TEXCOORD_4;
    float _681 = dot(vec3(_375, _376, _377), vec3(_459, _460, _461));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _375) - _459;
    float _689 = (_684 * _376) - _460;
    float _690 = (_684 * _377) - _461;
    float _694 = abs(dot(vec3(_459, _460, _461), vec3(_375, _376, _377)));
    float _3525 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_548);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _783 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _787 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _812 = _744 + _375;
        float _813 = _748 + _376;
        float _814 = _752 + _377;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_375, _376, _377), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3573 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_375, _376, _377), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3606 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_375, _376, _377), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3639 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1099 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1103 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1126 = _744 + _375;
        float _1127 = _748 + _376;
        float _1128 = _752 + _377;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_375, _376, _377), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3702 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_375, _376, _377), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3735 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_375, _376, _377), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3768 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = _1055;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1068)) + _1068;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _688 * 0.5;
    float _1433 = _689 * 0.5;
    float _1434 = _690 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1472;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1472 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1472 = 1.0;
    }
    float _1483;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1474 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1487 = (_1483 * cbModelParam._m0[1u].x) + (_1472 * (1.0 - cbModelParam._m0[1u].x));
    float _1497 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _548);
    float _1498 = isnan(_1497) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1497 : min(cbModelParam._m0[25u].z, _1497));
    float _1578;
    float _1580;
    float _1582;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1545 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1549 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1553 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1556 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1559 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1562 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1590;
        if (_1556 > 0.0)
        {
            _1590 = abs((1.0 - _1545) / _1556);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1545 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1590 = frontier_phi_16_14_ladder;
        }
        float _1819;
        if (_1559 > 0.0)
        {
            _1819 = abs((1.0 - _1549) / _1559);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1549 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2076;
        if (_1562 > 0.0)
        {
            _2076 = abs((1.0 - _1553) / _1562);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1553 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2076 = frontier_phi_37_32_ladder;
        }
        float _2078 = isnan(_1819) ? _1590 : (isnan(_1590) ? _1819 : min(_1590, _1819));
        float _2079 = isnan(_2076) ? _2078 : (isnan(_2078) ? _2076 : min(_2078, _2076));
        float _2083 = (_2079 * _1556) + _1545;
        float _2084 = (_2079 * _1559) + _1549;
        float _2085 = (_2079 * _1562) + _1553;
        float _2086 = _2079 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2086;
        float _2090 = _2086 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 > _2090) || ((_2084 < _2088) || ((_2083 < _2088) || (_2083 > _2090))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2085, cbModelParam._m0[9u].z, fma(_2084, cbModelParam._m0[9u].y, _2083 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2085, cbModelParam._m0[10u].z, fma(_2084, cbModelParam._m0[10u].y, _2083 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2085, cbModelParam._m0[11u].z, fma(_2084, cbModelParam._m0[11u].y, _2083 * cbModelParam._m0[11u].x))), _1498);
            frontier_phi_15_37_ladder = _2213.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2213.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2213.x * cbModelParam._m0[1u].y;
        }
        _1578 = frontier_phi_15_37_ladder_2;
        _1580 = frontier_phi_15_37_ladder_1;
        _1582 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1498);
        _1578 = _1566.x * cbModelParam._m0[1u].y;
        _1580 = _1566.y * cbModelParam._m0[1u].y;
        _1582 = _1566.z * cbModelParam._m0[1u].y;
    }
    float _1586 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _548);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1586 : min(cbModelParam._m0[25u].w, _1586));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1658 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1661 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1824;
        if (_1655 > 0.0)
        {
            _1824 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1824 = frontier_phi_27_23_ladder;
        }
        float _2103;
        if (_1658 > 0.0)
        {
            _2103 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2103 = frontier_phi_39_34_ladder;
        }
        float _2316;
        if (_1661 > 0.0)
        {
            _2316 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2316 = frontier_phi_48_45_ladder;
        }
        float _2318 = isnan(_2103) ? _1824 : (isnan(_1824) ? _2103 : min(_1824, _2103));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1655) + _1644;
        float _2324 = (_2319 * _1658) + _1648;
        float _2325 = (_2319 * _1661) + _1652;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1587);
            frontier_phi_24_48_ladder = _2528.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2528.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2528.x * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_24_48_ladder_2;
        _1682 = frontier_phi_24_48_ladder_1;
        _1684 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1587);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1697 = (((_715 * _666) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1680 - _1578)) + _1578);
    float _1699 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1682 - _1580)) + _1580);
    float _1701 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1697 * cbSceneParam._m0[91u].x));
    vec4 _1718 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_467, _468));
    float _1720 = _1718.w;
    float _1732 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1720);
    float _1733 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1720);
    float _1734 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1720);
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _680 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1777 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1781 = _1740 | 1u;
    float _1792 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_375, _376, _377));
    float _1795 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_375, _376, _377));
    float _3904 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _3915 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1800 = (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * 0.3183098733425140380859375;
    float _1802 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1809 = ((cbLight._m0[_1757].x * _1763) * _1802) + (((cbLight._m0[_1767].x * _1732) * _1777) * _1800);
    float _1810 = ((_1763 * cbLight._m0[_1757].y) * _1802) + (((cbLight._m0[_1767].y * _1733) * _1777) * _1800);
    float _1811 = ((_1763 * cbLight._m0[_1757].z) * _1802) + (((cbLight._m0[_1767].z * _1734) * _1777) * _1800);
    uvec4 _1816 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1818 = _1816.x == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1818)
    {
        _1829 = _1809;
        _1831 = _1810;
        _1833 = _1811;
    }
    else
    {
        uint _1837 = _1740 + 6u;
        float _1853 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3926 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1856 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1829 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1809;
        _1831 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1810;
        _1833 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1811;
    }
    bool _1836 = _1816.y == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1836)
    {
        _1874 = _1829;
        _1876 = _1831;
        _1878 = _1833;
    }
    else
    {
        uint _2047 = _1740 + 7u;
        float _2063 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_375, _376, _377)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _3942 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2066 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1874 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _1829;
        _1876 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _1831;
        _1878 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _1833;
    }
    uint _1881 = _1740 + 8u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _548) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1740].x + _459;
    float _1897 = cbLight._m0[_1740].y + _460;
    float _1898 = cbLight._m0[_1740].z + _461;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1740].xyz));
    float _3958 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1910 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _1911 = dot(vec3(_375, _376, _377), vec3(_1903, _1904, _1905));
    float _3980 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1903, _1904, _1905));
    float _3991 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1895 * _1895;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1931 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
    float _1932 = 0.959999978542327880859375 - _663;
    float _1934 = 0.959999978542327880859375 - _664;
    float _1935 = 0.959999978542327880859375 - _665;
    float _1942 = 1.0 - _1895;
    float _1953 = (0.5 / (((_1910 * ((_1909 * _1942) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _1942) + _1895) * _1909))) * _1909;
    float _4002 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    uint _1969 = _1740 + 9u;
    float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _548) * 0.949999988079071044921875);
    float _1981 = _1980 * _1980;
    float _1982 = cbLight._m0[_1781].x + _459;
    float _1983 = cbLight._m0[_1781].y + _460;
    float _1984 = cbLight._m0[_1781].z + _461;
    float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
    float _1989 = _1988 * _1982;
    float _1990 = _1988 * _1983;
    float _1991 = _1988 * _1984;
    float _1992 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_1781].xyz));
    float _4013 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1996 = dot(vec3(_375, _376, _377), vec3(_1989, _1990, _1991));
    float _4024 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _2000 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1989, _1990, _1991));
    float _4035 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2004 = _1981 * _1981;
    float _2008 = ((_1999 * _1999) * (_2004 + (-1.0))) + 1.0;
    float _2015 = exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0);
    float _2022 = 1.0 - _1981;
    float _2032 = (0.5 / (((_1910 * ((_1995 * _2022) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2022) + _1981) * _1995))) * _1995;
    float _4046 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2034 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_2004 / ((_2008 * _2008) * 3.141590118408203125));
    float _2044 = (((((_2015 * _1932) + _666) * cbLight._m0[_1969].x) * _2034) * _1763) + ((((cbLight._m0[_1881].x * _1732) * ((_1931 * _1932) + _666)) * _1955) * _1777);
    float _2045 = (((((_2015 * _1934) + _667) * cbLight._m0[_1969].y) * _2034) * _1763) + ((((cbLight._m0[_1881].y * _1733) * ((_1931 * _1934) + _667)) * _1955) * _1777);
    float _2046 = (((((_2015 * _1935) + _668) * cbLight._m0[_1969].z) * _2034) * _1763) + ((((cbLight._m0[_1881].z * _1734) * ((_1931 * _1935) + _668)) * _1955) * _1777);
    float _2108;
    float _2110;
    float _2112;
    if (_1818)
    {
        _2108 = _2044;
        _2110 = _2045;
        _2112 = _2046;
    }
    else
    {
        uint _2114 = _1740 + 2u;
        uint _2118 = _1740 + 10u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _548) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _459;
        float _2135 = cbLight._m0[_2114].y + _460;
        float _2136 = cbLight._m0[_2114].z + _461;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2114].xyz));
        float _4057 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2148 = dot(vec3(_375, _376, _377), vec3(_2141, _2142, _2143));
        float _4068 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4079 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
        float _2174 = 1.0 - _2133;
        float _2184 = (0.5 / (((_1910 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2174) + _2133) * _2147))) * _2147;
        float _4090 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2186 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2187 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2108 = (((((_2167 * _1932) + _666) * cbLight._m0[_2118].x) * _2186) * _2187) + _2044;
        _2110 = (((((_2167 * _1934) + _667) * cbLight._m0[_2118].y) * _2186) * _2187) + _2045;
        _2112 = (((((_2167 * _1935) + _668) * cbLight._m0[_2118].z) * _2186) * _2187) + _2046;
    }
    float _2222;
    float _2224;
    float _2226;
    if (_1836)
    {
        _2222 = _2108;
        _2224 = _2110;
        _2226 = _2112;
    }
    else
    {
        uint _2233 = _1740 + 3u;
        uint _2237 = _1740 + 11u;
        float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _548) * 0.949999988079071044921875);
        float _2252 = _2251 * _2251;
        float _2253 = cbLight._m0[_2233].x + _459;
        float _2254 = cbLight._m0[_2233].y + _460;
        float _2255 = cbLight._m0[_2233].z + _461;
        float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
        float _2260 = _2259 * _2253;
        float _2261 = _2259 * _2254;
        float _2262 = _2259 * _2255;
        float _2263 = dot(vec3(_375, _376, _377), vec3(cbLight._m0[_2233].xyz));
        float _4106 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2267 = dot(vec3(_375, _376, _377), vec3(_2260, _2261, _2262));
        float _4117 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2271 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2260, _2261, _2262));
        float _4128 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2275 = _2252 * _2252;
        float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
        float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2293 = 1.0 - _2252;
        float _2303 = (0.5 / (((_1910 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2293) + _2252) * _2266))) * _2266;
        float _4139 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2222 = (((((_2286 * _1932) + _666) * cbLight._m0[_2237].x) * _2305) * _2306) + _2108;
        _2224 = (((((_2286 * _1934) + _667) * cbLight._m0[_2237].y) * _2305) * _2306) + _2110;
        _2226 = (((((_2286 * _1935) + _668) * cbLight._m0[_2237].z) * _2305) * _2306) + _2112;
    }
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_1738.y == 0u)
    {
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2381;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2381;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2381;
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.x;
        uint _2408 = uint((float(_2396.y) * floor(float(uint(cbSceneParam._m0[85u].y * _468) / _2397))) + floor(float(uint(cbSceneParam._m0[85u].x * _467) / _2397)));
        float _2418 = (log2(_2384 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2419 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        uint _2422 = uint(isnan(14.0) ? _2419 : (isnan(_2419) ? 14.0 : min(_2419, 14.0)));
        uvec4 _2427 = texelFetch(g_lightClusterGridBuffer, int(((_2422 << 2u) + (_2408 << 6u)) >> 2u));
        uint _2428 = _2427.x;
        uint _2429 = _2396.z;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        if (((((1u << ((_2429 >> 4u) & 15u)) + 4294967295u) & _2428) == 0u) || ((_2429 & 240u) == 0u))
        {
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
        }
        else
        {
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            uint _2683 = 0u;
            uint _2692;
            bool _2693;
            for (;;)
            {
                _2692 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                _2693 = _2692 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2693)
                {
                    frontier_phi_63_pred = _2682;
                    frontier_phi_63_pred_1 = _2681;
                    frontier_phi_63_pred_2 = _2680;
                    frontier_phi_63_pred_3 = _2679;
                    frontier_phi_63_pred_4 = _2678;
                    frontier_phi_63_pred_5 = _2677;
                }
                else
                {
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    uint _2807;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2692;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    for (;;)
                    {
                        uint _2811 = uint(findLSB(_2807)) + (_2683 << 5u);
                        uint _2808 = (_2807 + 4294967295u) & _2807;
                        uint _2813 = _2811 * 48u;
                        vec4 _2827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 3u)).x));
                        uint _2833 = (_2811 * 48u) + 4u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2852 = (_2811 * 48u) + 8u;
                        vec3 _2863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x));
                        float _2867 = _2827.x - _2382;
                        float _2868 = _2827.y - _2383;
                        float _2869 = _2827.z - _2384;
                        float _2870 = dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869));
                        float _2873 = inversesqrt(_2870);
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2877 = dot(vec3(_492, _495, _498), vec3(_2874, _2875, _2876));
                        float _2882 = 1.0 - (_2870 * _2827.w);
                        float _4165 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2883 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2884 = sqrt(_2870) * _2846.w;
                        float _2887 = 1.39999997615814208984375 / (_2884 + 1.39999997615814208984375);
                        float _2888 = _2887 * _2887;
                        float _2891 = ((1.0 - _2888) * _2877) + _2888;
                        float _2894 = _2884 * _2884;
                        float _2898 = ((isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))) * _2883) / ((_2894 * 0.699999988079071044921875) + 1.0);
                        float _2902 = (-0.0) - _2382;
                        float _2903 = (-0.0) - _2383;
                        float _2904 = (-0.0) - _2384;
                        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
                        float _2909 = _2908 * _2902;
                        float _2910 = _2908 * _2903;
                        float _2911 = _2908 * _2904;
                        float _2919 = exp2(log2(1.0 / ((_2894 * 3.5) + 5.0)) * 0.25);
                        float _2920 = 1.0 - _696;
                        float _2927 = sqrt(1.0 - ((1.0 - (_2920 * _2920)) * (1.0 - (_2919 * _2919))));
                        float _2928 = _2927 * _2927;
                        float _2929 = _2928 * _2928;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2932 = _2911 + _2876;
                        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
                        float _2940 = dot(vec3(_492, _495, _498), vec3(_2909, _2910, _2911));
                        float _4181 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2944 = dot(vec3(_492, _495, _498), vec3(_2936 * _2930, _2936 * _2931, _2936 * _2932));
                        float _4192 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2951 = ((_2947 * _2947) * (_2929 + (-1.0))) + 1.0;
                        float _2952 = _2887 * _2928;
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2877) + _2953;
                        float _4203 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2958 = 1.0 - _2928;
                        float _2968 = (0.5 / (((_2957 * ((_2943 * _2958) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2957 * _2958) + _2928) * _2943))) * _2957;
                        float _4214 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2979 = (((_2929 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_2951 * _2951) * ((_2894 * 2.1991131305694580078125) + 3.141590118408203125))) * _2883;
                        _2736 = (_2898 * _2846.x) + _2804;
                        _2737 = (_2898 * _2846.y) + _2805;
                        _2738 = (_2898 * _2846.z) + _2806;
                        _2733 = (_2979 * _2863.x) + _2801;
                        _2734 = (_2979 * _2863.y) + _2802;
                        _2735 = (_2979 * _2863.z) + _2803;
                        if (_2808 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2808;
                        }
                    }
                    frontier_phi_63_pred = _2738;
                    frontier_phi_63_pred_1 = _2737;
                    frontier_phi_63_pred_2 = _2736;
                    frontier_phi_63_pred_3 = _2735;
                    frontier_phi_63_pred_4 = _2734;
                    frontier_phi_63_pred_5 = _2733;
                }
                _2544 = frontier_phi_63_pred;
                _2542 = frontier_phi_63_pred_1;
                _2540 = frontier_phi_63_pred_2;
                _2538 = frontier_phi_63_pred_3;
                _2536 = frontier_phi_63_pred_4;
                _2534 = frontier_phi_63_pred_5;
                uint _2684 = _2683 + 1u;
                if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2677 = _2534;
                    _2678 = _2536;
                    _2679 = _2538;
                    _2680 = _2540;
                    _2681 = _2542;
                    _2682 = _2544;
                    _2683 = _2684;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
        }
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.z;
        uint _2550 = (_2548 >> 8u) & 15u;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((4294967295u << _2550) & _2428) == 0u)
        {
            _2645 = _2533;
            _2647 = _2535;
            _2649 = _2537;
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
        }
        else
        {
            float _2670 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
            float _2671 = _2670 * _2382;
            float _2672 = _2670 * _2383;
            float _2673 = _2670 * _2384;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2550 < ((_2548 >> 12u) & 15u))
            {
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2784 = _2533;
                float _2785 = _2535;
                float _2786 = _2537;
                float _2787 = _2539;
                float _2788 = _2541;
                float _2789 = _2543;
                uint _2790 = _2550;
                uint _2799;
                bool _2800;
                for (;;)
                {
                    _2799 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                    _2800 = _2799 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2800)
                    {
                        frontier_phi_69_pred = _2789;
                        frontier_phi_69_pred_1 = _2788;
                        frontier_phi_69_pred_2 = _2787;
                        frontier_phi_69_pred_3 = _2786;
                        frontier_phi_69_pred_4 = _2785;
                        frontier_phi_69_pred_5 = _2784;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        uint _3003 = _2799;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3072;
                        vec4 _3088;
                        float _3135;
                        bool _3136;
                        for (;;)
                        {
                            uint _3014 = ((_2790 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3059 = (_3014 * 40u) + 16u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3075 = (_3014 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3091 = (_3014 * 40u) + 24u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3110 = (_3014 * 40u) + 28u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3135 = fma(_2384, _3123.z, fma(_2383, _3123.y, _3123.x * _2382)) + _3123.w;
                            _3136 = !((fma(_2384, _3104.z, fma(_2383, _3104.y, _3104.x * _2382)) + _3104.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3136)
                            {
                                float _3163 = _3029.x - _2382;
                                float _3164 = _3029.y - _2383;
                                float _3165 = _3029.z - _2384;
                                float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                                float _3169 = inversesqrt(_3166);
                                float _3170 = _3169 * _3163;
                                float _3171 = _3169 * _3164;
                                float _3172 = _3169 * _3165;
                                float _3176 = 1.0 - (_3166 / (_3030 * _3030));
                                float _4225 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3181 = sqrt(_3166) * _3045.w;
                                float _3183 = 1.39999997615814208984375 / (_3181 + 1.39999997615814208984375);
                                float _3184 = _3183 * _3183;
                                float _3187 = ((1.0 - _3184) * dot(vec3(_3170, _3171, _3172), vec3(_492, _495, _498))) + _3184;
                                float _3190 = _3181 * _3181;
                                float _3194 = (fma(_2384, _3072.z, fma(_2383, _3072.y, _3072.x * _2382)) + _3072.w) / _3135;
                                float _3195 = (fma(_2384, _3088.z, fma(_2383, _3088.y, _3088.x * _2382)) + _3088.w) / _3135;
                                float _3199 = 1.0 - dot(vec2(_3194, _3195), vec2(_3194, _3195));
                                float _4241 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3201 = _3200 * (((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3177) / ((_3190 * 0.699999988079071044921875) + 1.0));
                                float _3213 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                                float _3214 = 1.0 - _696;
                                float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                                float _3222 = _3221 * _3221;
                                float _3223 = _3222 * _3222;
                                float _3224 = _3170 - _2671;
                                float _3225 = _3171 - _2672;
                                float _3226 = _3172 - _2673;
                                float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                                float _3234 = dot(vec3(_492, _495, _498), vec3((-0.0) - _2671, (-0.0) - _2672, (-0.0) - _2673));
                                float _4252 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3238 = dot(vec3(_492, _495, _498), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                                float _4263 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                                float _3246 = _3183 * _3222;
                                float _3247 = _3246 * _3246;
                                float _3253 = ((1.0 - _3247) * dot(vec3(_492, _495, _498), vec3(_3170, _3171, _3172))) + _3247;
                                float _4274 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3255 = 1.0 - _3222;
                                float _3265 = (0.5 / (((_3254 * ((_3237 * _3255) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3254 * _3255) + _3222) * _3237))) * _3254;
                                float _4285 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3275 = (_3200 * _3177) * (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) / ((_3245 * _3245) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3201 * _3045.z;
                                frontier_phi_75_pred_1 = _3201 * _3045.y;
                                frontier_phi_75_pred_2 = _3201 * _3045.x;
                                frontier_phi_75_pred_3 = _3275 * _3057.z;
                                frontier_phi_75_pred_4 = _3275 * _3057.y;
                                frontier_phi_75_pred_5 = _3275 * _3057.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3284 = frontier_phi_75_pred;
                            _3283 = frontier_phi_75_pred_1;
                            _3282 = frontier_phi_75_pred_2;
                            _3281 = frontier_phi_75_pred_3;
                            _3280 = frontier_phi_75_pred_4;
                            _3279 = frontier_phi_75_pred_5;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2989;
                        frontier_phi_69_pred_1 = _2988;
                        frontier_phi_69_pred_2 = _2987;
                        frontier_phi_69_pred_3 = _2986;
                        frontier_phi_69_pred_4 = _2985;
                        frontier_phi_69_pred_5 = _2984;
                    }
                    _2656 = frontier_phi_69_pred;
                    _2654 = frontier_phi_69_pred_1;
                    _2652 = frontier_phi_69_pred_2;
                    _2650 = frontier_phi_69_pred_3;
                    _2648 = frontier_phi_69_pred_4;
                    _2646 = frontier_phi_69_pred_5;
                    uint _2791 = _2790 + 1u;
                    if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2784 = _2646;
                        _2785 = _2648;
                        _2786 = _2650;
                        _2787 = _2652;
                        _2788 = _2654;
                        _2789 = _2656;
                        _2790 = _2791;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2656;
                frontier_phi_57_58_ladder_1 = _2654;
                frontier_phi_57_58_ladder_2 = _2652;
                frontier_phi_57_58_ladder_3 = _2650;
                frontier_phi_57_58_ladder_4 = _2648;
                frontier_phi_57_58_ladder_5 = _2646;
            }
            else
            {
                frontier_phi_57_58_ladder = _2543;
                frontier_phi_57_58_ladder_1 = _2541;
                frontier_phi_57_58_ladder_2 = _2539;
                frontier_phi_57_58_ladder_3 = _2537;
                frontier_phi_57_58_ladder_4 = _2535;
                frontier_phi_57_58_ladder_5 = _2533;
            }
            _2645 = frontier_phi_57_58_ladder_5;
            _2647 = frontier_phi_57_58_ladder_4;
            _2649 = frontier_phi_57_58_ladder_3;
            _2651 = frontier_phi_57_58_ladder_2;
            _2653 = frontier_phi_57_58_ladder_1;
            _2655 = frontier_phi_57_58_ladder;
        }
        float _2660 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2440 = (_2660 * _2651) + _1874;
        _2442 = (_2660 * _2653) + _1876;
        _2444 = (_2660 * _2655) + _1878;
        _2446 = ((_2645 * _666) * _2660) + _2222;
        _2448 = ((_2647 * _667) * _2660) + _2224;
        _2450 = ((_2649 * _668) * _2660) + _2226;
    }
    else
    {
        _2440 = _1874;
        _2442 = _1876;
        _2444 = _1878;
        _2446 = _2222;
        _2448 = _2224;
        _2450 = _2226;
    }
    float _4301 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4312 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4323 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4334 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2468 = ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2440 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _680))) + ((_2446 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2469 = ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2442 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _680))) + ((_2448 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2470 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2444 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _680))) + ((_2450 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1487)) * cbPerFrame._m0[3u].x);
    float _2478 = cbInstanceData._m0[_572 + 6u].w * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)));
    float _2483 = _467 / cbSceneParam._m0[86u].x;
    float _2484 = _468 / cbSceneParam._m0[86u].y;
    vec4 _2498 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, (log2((isnan(cbSceneParam._m0[77u].w) ? _399 : (isnan(_399) ? cbSceneParam._m0[77u].w : min(_399, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2500 = _2498.x;
    float _2501 = _2498.y;
    float _2502 = _2498.z;
    float _2503 = _2498.w;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_399 > cbSceneParam._m0[78u].w)
    {
        float _2558 = isnan(_399) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _399 : min(cbSceneParam._m0[80u].w, _399));
        float _2559 = _2558 / _399;
        float _2570 = _2559 * _452;
        float _2571 = _453 * _2559;
        float _2572 = (-0.0) - _2571;
        float _2573 = _2559 * _454;
        float _2575 = (cbSceneParam._m0[77u].w * _2572) / _2558;
        float _2576 = _2575 + cbSceneParam._m0[79u].w;
        float _2577 = cbSceneParam._m0[79u].w - _2571;
        float _2583 = sqrt(((_2570 * _2570) + (_2571 * _2571)) + (_2573 * _2573));
        float _2586 = (1.0 - (cbSceneParam._m0[77u].w / _2558)) * _2583;
        float _2591 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2593 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2746;
        if (abs((_2572 - _2575) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2746 = ((((_2576 > 0.0) ? exp2(_2591 * _2576) : (2.0 - exp2(_2593 * _2576))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2586;
        }
        else
        {
            float _2706 = 1.0 / cbSceneParam._m0[80u].x;
            float _2707 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : max(_2576, _2577));
            float _2708 = isnan(_2577) ? _2576 : (isnan(_2576) ? _2577 : min(_2576, _2577));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            float _2718 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : min(_2708, 0.0));
            _2746 = ((abs(_2583 / _2572) * cbSceneParam._m0[80u].y) * ((((_2717 - _2718) * 2.0) - ((exp2(_2591 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0)))) - exp2(_2591 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0))))) * _2706)) - ((exp2(_2593 * _2717) - exp2(_2593 * _2718)) * _2706))) + (_2586 * cbSceneParam._m0[80u].z);
        }
        vec4 _2748 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2483, _2484, 1.0), 0.0);
        float _2757 = exp2((_2746 * (-1.44269502162933349609375)) * (1.0 - _2748.w));
        float _2758 = log2(_2757);
        float _2774 = log2(_2503);
        _2595 = (exp2(_2774 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].x)) * _2748.x) / cbSceneParam._m0[78u].x)) + _2500;
        _2597 = (exp2(_2774 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].y)) * _2748.y) / cbSceneParam._m0[78u].y)) + _2501;
        _2599 = (exp2(_2774 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2758 * cbSceneParam._m0[78u].z)) * _2748.z) / cbSceneParam._m0[78u].z)) + _2502;
        _2601 = _2757 * _2503;
    }
    else
    {
        _2595 = _2500;
        _2597 = _2501;
        _2599 = _2502;
        _2601 = _2503;
    }
    float _2613 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2614 = _2613 == 3.0;
    float _2615 = log2(_2601);
    float _2622 = exp2(_2615 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0)));
    float _2623 = exp2(_2615 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)));
    float _2624 = exp2(_2615 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0)));
    float _2633 = (_2613 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2633 * (_2614 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2595)));
    SV_Target.y = _2633 * (_2614 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.z = _2633 * (_2614 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.w = _2478;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2478;
}


