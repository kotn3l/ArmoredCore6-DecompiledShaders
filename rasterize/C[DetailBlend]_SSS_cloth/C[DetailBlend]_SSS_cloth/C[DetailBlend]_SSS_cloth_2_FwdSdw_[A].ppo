#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1180;
float _3853;
float _3854;
float _3855;
float _3856;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _250.z;
    float _261 = exp2(log2(_255 * 22.0) * 260.0);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _288 = cbMtdParam._m0[10u].x * _277.x;
    float _289 = cbMtdParam._m0[10u].y * _277.y;
    float _290 = cbMtdParam._m0[10u].z * _277.z;
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _325 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _347 = (((((_302.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _325.x) - _288) * _263) + _288;
    float _348 = (((((_302.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _325.y) - _289) * _263) + _289;
    float _349 = (((((_302.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _325.z) - _290) * _263) + _290;
    float _350 = _325.w * _302.w;
    vec4 _367 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = (((_367.x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _263) + cbMtdParam._m0[15u].y;
    vec4 _390 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _399 = cbMtdParam._m0[13u].y + _390.z;
    vec4 _411 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _423 = ((((_255 * 2.0) * (cbMtdParam._m0[13u].x + _411.z)) - _399) * _263) + _399;
    float _427 = (_250.x * 2.0) + (-1.0);
    float _429 = (_250.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_427, _429), vec2(_427, _429));
    float _3875 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))));
    float _448 = ((((((_411.x - _392) * _263) + _392) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _427;
    float _449 = ((((((_411.y - _393) * _263) + _393) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _429;
    float _452 = fma(_435, _234, fma(_449, _226 * TANGENT.x, (_212 * _204) * _448));
    float _455 = fma(_435, _235, fma(_449, _226 * TANGENT.y, (_212 * _205) * _448));
    float _458 = fma(_435, _236, fma(_449, _226 * TANGENT.z, (_212 * _206) * _448));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3886 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _466 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _467 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _468 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _469 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _470 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _471 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _487 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    vec4 _552 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _554 = _552.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _859 = sqrt(((_538 * _538) + (_539 * _539)) + (_540 * _540));
        float _865 = (cbMatDynParam._m0[5u].x * _859) + cbMatDynParam._m0[5u].y;
        float _3952 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _870 = (cbMatDynParam._m0[5u].z * _859) + cbMatDynParam._m0[5u].w;
        float _3963 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) - _866)) + _866) < ((_554 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _568 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _570 = _568.w;
    float _589 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _592 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _595 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    vec4 _597 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _599 = _597.x;
    float _611 = (((_597.y - _467) + (_597.w * _467)) * cbMtdParam._m0[3u].x) + _467;
    vec4 _612 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _628 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_599 * _599)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _612.z;
    float _636 = (((cbMatDynParam._m0[15u].x - _471) * cbMatDynParam._m0[15u].w) * _628) + _471;
    float _644 = ((_628 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _611)) + _611;
    uint _668 = uint(roundEven(NORMAL.w)) * 13u;
    uint _669 = _668 + 9u;
    uint _670 = _669 + uint(cbMatDynParam._m0[0u].w);
    float _676 = (cbMtdParam._m0[0u].x * _468) * cbInstanceData._m0[_670].x;
    float _677 = (cbMtdParam._m0[0u].y * _469) * cbInstanceData._m0[_670].y;
    float _678 = (cbMtdParam._m0[0u].z * _470) * cbInstanceData._m0[_670].z;
    float _3974 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    vec4 _682 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _687 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _698 = (((_687.x - _636) + (_687.w * _636)) * cbMtdParam._m0[3u].x) + _636;
    float _711 = (cbMtdParam._m0[3u].x * (((_679 * _570) - _679) + _682.x)) + _679;
    float _712 = (cbMtdParam._m0[3u].x * (((_680 * _570) - _680) + _682.y)) + _680;
    float _713 = (cbMtdParam._m0[3u].x * (((_681 * _570) - _681) + _682.z)) + _681;
    vec4 _714 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _727 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_636 * (_468 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_636 * (_469 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_636 * (_470 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _714.z;
    float _731 = _727 * cbMatDynParam._m0[13u].w;
    float _741 = (_731 * (cbMatDynParam._m0[13u].x - _711)) + _711;
    float _742 = (_731 * (cbMatDynParam._m0[13u].y - _712)) + _712;
    float _743 = (_731 * (cbMatDynParam._m0[13u].z - _713)) + _713;
    float _751 = ((_727 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _698)) + _698;
    float _752 = 1.0 - _751;
    float _753 = _752 * _741;
    float _754 = _752 * _742;
    float _755 = _752 * _743;
    float _759 = (_741 + (-0.039999999105930328369140625)) * _751;
    float _760 = (_742 + (-0.039999999105930328369140625)) * _751;
    float _761 = (_743 + (-0.039999999105930328369140625)) * _751;
    float _762 = _759 + 0.039999999105930328369140625;
    float _763 = _760 + 0.039999999105930328369140625;
    float _764 = _761 + 0.039999999105930328369140625;
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _776 = _773.x * TEXCOORD_4;
    float _777 = dot(vec3(_463, _464, _465), vec3(_545, _546, _547));
    float _780 = _777 * 2.0;
    float _784 = (_780 * _463) - _545;
    float _785 = (_780 * _464) - _546;
    float _786 = (_780 * _465) - _547;
    float _790 = abs(dot(vec3(_545, _546, _547), vec3(_463, _464, _465)));
    float _4007 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = sqrt(_644);
    float _805 = exp2((_792 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_792 * 3.0));
    float _811 = (1.0 - _805) * ((_792 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _812 = _805 * _792;
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _904 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _908 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _912 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _937 = _840 + _463;
        float _938 = _844 + _464;
        float _939 = _848 + _465;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _904;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _908;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _912;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_904 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_908 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_912 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_463, _464, _465), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _4055 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_463, _464, _465), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4088 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_463, _464, _465), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4121 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1227 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1231 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1254 = _840 + _463;
        float _1255 = _844 + _464;
        float _1256 = _848 + _465;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_463, _464, _465), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4184 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_463, _464, _465), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4217 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_463, _464, _465), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4250 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = _1180;
        _1502 = _1180;
        _1503 = _1180;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1192)) + _1192;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1193)) + _1193;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _784 * 0.5;
    float _1561 = _785 * 0.5;
    float _1562 = _786 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _644);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1673 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1677 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1681 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1684 = fma(_786, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784));
        float _1687 = fma(_786, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784));
        float _1690 = fma(_786, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784));
        float _1718;
        if (_1684 > 0.0)
        {
            _1718 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1718 = frontier_phi_19_17_ladder;
        }
        float _1894;
        if (_1687 > 0.0)
        {
            _1894 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1894 = frontier_phi_28_24_ladder;
        }
        float _2190;
        if (_1690 > 0.0)
        {
            _2190 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2190 = frontier_phi_40_35_ladder;
        }
        float _2192 = isnan(_1894) ? _1718 : (isnan(_1718) ? _1894 : min(_1718, _1894));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1684) + _1673;
        float _2198 = (_2193 * _1687) + _1677;
        float _2199 = (_2193 * _1690) + _1681;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2200;
        float _2204 = _2200 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 > _2204) || ((_2198 < _2202) || ((_2197 < _2202) || (_2197 > _2204))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2199, cbModelParam._m0[9u].z, fma(_2198, cbModelParam._m0[9u].y, _2197 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2199, cbModelParam._m0[10u].z, fma(_2198, cbModelParam._m0[10u].y, _2197 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2199, cbModelParam._m0[11u].z, fma(_2198, cbModelParam._m0[11u].y, _2197 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_18_40_ladder = _2344.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2344.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2344.x * cbModelParam._m0[1u].y;
        }
        _1706 = frontier_phi_18_40_ladder_2;
        _1708 = frontier_phi_18_40_ladder_1;
        _1710 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_784, _785, _786), _1626);
        _1706 = _1694.x * cbModelParam._m0[1u].y;
        _1708 = _1694.y * cbModelParam._m0[1u].y;
        _1710 = _1694.z * cbModelParam._m0[1u].y;
    }
    float _1714 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _644);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1714 : min(cbModelParam._m0[25u].w, _1714));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_786, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784));
        float _1786 = fma(_786, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784));
        float _1789 = fma(_786, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784));
        float _1899;
        if (_1783 > 0.0)
        {
            _1899 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1899 = frontier_phi_30_26_ladder;
        }
        float _2217;
        if (_1786 > 0.0)
        {
            _2217 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2217 = frontier_phi_42_37_ladder;
        }
        float _2555;
        if (_1789 > 0.0)
        {
            _2555 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2555 = frontier_phi_52_49_ladder;
        }
        float _2557 = isnan(_2217) ? _1899 : (isnan(_1899) ? _2217 : min(_1899, _2217));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _1783) + _1772;
        float _2563 = (_2558 * _1786) + _1776;
        float _2564 = (_2558 * _1789) + _1780;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2565;
        float _2568 = _2565 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2564 > _2568) || ((_2564 < _2566) || ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 < _2566) || (_2562 > _2568))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2564, cbModelParam._m0[17u].z, fma(_2563, cbModelParam._m0[17u].y, _2562 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2564, cbModelParam._m0[18u].z, fma(_2563, cbModelParam._m0[18u].y, _2562 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2564, cbModelParam._m0[19u].z, fma(_2563, cbModelParam._m0[19u].y, _2562 * cbModelParam._m0[19u].x))), _1715);
            frontier_phi_27_52_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_27_52_ladder_2;
        _1810 = frontier_phi_27_52_ladder_1;
        _1812 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_784, _785, _786), _1715);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1825 = (((_811 * _762) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1808 - _1706)) + _1706);
    float _1827 = (((_811 * _763) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1810 - _1708)) + _1708);
    float _1829 = (((_811 * _764) + _812) * _776) * ((cbModelParam._m0[1u].w * (_1812 - _1710)) + _1710);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1886 = _1873 / _1885;
    float _1887 = _1877 / _1885;
    float _1888 = _1881 / _1885;
    float _2035;
    float _2036;
    float _2037;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1915 = ((uint(_1888 > cbSceneParam._m0[59u].y) + uint(_1888 > cbSceneParam._m0[59u].x)) + uint(_1888 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1916 = _1915 + 43u;
        uint _1924 = _1915 + 44u;
        uint _1932 = _1915 + 45u;
        uint _1940 = _1915 + 46u;
        float _1951 = fma(_1885, cbSceneParam._m0[_1916].w, fma(_1881, cbSceneParam._m0[_1916].z, fma(_1877, cbSceneParam._m0[_1916].y, _1873 * cbSceneParam._m0[_1916].x)));
        float _1955 = fma(_1885, cbSceneParam._m0[_1924].w, fma(_1881, cbSceneParam._m0[_1924].z, fma(_1877, cbSceneParam._m0[_1924].y, _1873 * cbSceneParam._m0[_1924].x)));
        float _1963 = fma(_1885, cbSceneParam._m0[_1940].w, fma(_1881, cbSceneParam._m0[_1940].z, fma(_1877, cbSceneParam._m0[_1940].y, _1873 * cbSceneParam._m0[_1940].x)));
        float _1968 = cbSceneParam._m0[33u].z * _1963;
        float _1970 = cbSceneParam._m0[33u].w * _1963;
        float _1973 = fma(_1885, cbSceneParam._m0[_1932].w, fma(_1881, cbSceneParam._m0[_1932].z, fma(_1877, cbSceneParam._m0[_1932].y, _1873 * cbSceneParam._m0[_1932].x))) / _1963;
        float _2021 = (cbSceneParam._m0[33u].x - sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888))) * cbSceneParam._m0[33u].y;
        float _4376 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2028 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 + _1951) / _1963, (_1970 + _1955) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1970 + _1951) / _1963, (_1955 - _1968) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 - _1968) / _1963, (_1955 - _1970) / _1963), _1973), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1951 - _1970) / _1963, (_1968 + _1955) / _1963), _1973), 0.0)).x), vec4(0.25)));
        _2035 = 1.0 - (_2028 * cbSceneParam._m0[34u].x);
        _2036 = 1.0 - (_2028 * cbSceneParam._m0[34u].y);
        _2037 = 1.0 - (_2028 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2035 = 1.0;
        _2036 = 1.0;
        _2037 = 1.0;
    }
    float _2101;
    float _2103;
    float _2105;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2089 = fma(_1885, cbSceneParam._m0[63u].w, fma(_1881, cbSceneParam._m0[63u].z, fma(_1877, cbSceneParam._m0[63u].y, _1873 * cbSceneParam._m0[63u].x)));
        float _2090 = fma(_1885, cbSceneParam._m0[60u].w, fma(_1881, cbSceneParam._m0[60u].z, fma(_1877, cbSceneParam._m0[60u].y, _1873 * cbSceneParam._m0[60u].x))) / _2089;
        float _2091 = fma(_1885, cbSceneParam._m0[61u].w, fma(_1881, cbSceneParam._m0[61u].z, fma(_1877, cbSceneParam._m0[61u].y, _1873 * cbSceneParam._m0[61u].x))) / _2089;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2090 >= cbSceneParam._m0[64u].x) && (_2091 >= cbSceneParam._m0[64u].y)) && (_2090 <= cbSceneParam._m0[64u].z)) && (_2091 <= cbSceneParam._m0[64u].w))
        {
            float _2230 = fma(_1885, cbSceneParam._m0[62u].w, fma(_1881, cbSceneParam._m0[62u].z, fma(_1877, cbSceneParam._m0[62u].y, _1873 * cbSceneParam._m0[62u].x))) / _2089;
            float _2234 = isnan(cbSceneParam._m0[41u].w) ? _2230 : (isnan(_2230) ? cbSceneParam._m0[41u].w : max(_2230, cbSceneParam._m0[41u].w));
            float _2277 = (cbSceneParam._m0[33u].x - sqrt(((_1887 * _1887) + (_1886 * _1886)) + (_1888 * _1888))) * cbSceneParam._m0[33u].y;
            float _4392 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
            float _2284 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2090, cbSceneParam._m0[33u].w + _2091), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2090, _2091 - cbSceneParam._m0[33u].z), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2090 - cbSceneParam._m0[33u].z, _2091 - cbSceneParam._m0[33u].w), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2090 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2091), _2234), 0.0)).x), vec4(0.25)));
            float _2288 = 1.0 - (_2284 * cbSceneParam._m0[34u].x);
            float _2289 = 1.0 - (_2284 * cbSceneParam._m0[34u].y);
            float _2290 = 1.0 - (_2284 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2289) ? _2036 : (isnan(_2036) ? _2289 : min(_2036, _2289));
            frontier_phi_39_38_ladder_1 = isnan(_2288) ? _2035 : (isnan(_2035) ? _2288 : min(_2035, _2288));
            frontier_phi_39_38_ladder_2 = isnan(_2290) ? _2037 : (isnan(_2037) ? _2290 : min(_2037, _2290));
        }
        else
        {
            frontier_phi_39_38_ladder = _2036;
            frontier_phi_39_38_ladder_1 = _2035;
            frontier_phi_39_38_ladder_2 = _2037;
        }
        _2101 = frontier_phi_39_38_ladder_1;
        _2103 = frontier_phi_39_38_ladder;
        _2105 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2101 = _2035;
        _2103 = _2036;
        _2105 = _2037;
    }
    uvec4 _2110 = floatBitsToUint(cbInstanceData._m0[_668 + 5u]);
    uint _2112 = _2110.x * 14u;
    uint _2113 = _2112 + 13u;
    float _2120 = _776 + (-1.0);
    float _2125 = (cbLight._m0[_2113].x * _2120) + 1.0;
    float _2126 = (cbLight._m0[_2113].y * _2120) + 1.0;
    float _2127 = (cbLight._m0[_2113].z * _2120) + 1.0;
    float _2128 = (cbLight._m0[_2113].w * _2120) + 1.0;
    uint _2129 = _2112 + 5u;
    float _2135 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2139 = _2112 + 4u;
    float _2149 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2153 = _2112 | 1u;
    float _2164 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_463, _464, _465));
    float _2167 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_463, _464, _465));
    float _4428 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _4439 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2172 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * 0.3183098733425140380859375;
    float _2174 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2181 = ((cbLight._m0[_2129].x * _2135) * _2174) + (((cbLight._m0[_2139].x * _2101) * _2149) * _2172);
    float _2182 = ((_2135 * cbLight._m0[_2129].y) * _2174) + (((cbLight._m0[_2139].y * _2103) * _2149) * _2172);
    float _2183 = ((_2135 * cbLight._m0[_2129].z) * _2174) + (((cbLight._m0[_2139].z * _2105) * _2149) * _2172);
    uvec4 _2187 = floatBitsToUint(cbLight._m0[_2112 + 12u]);
    bool _2189 = _2187.x == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2189)
    {
        _2291 = _2181;
        _2293 = _2182;
        _2295 = _2183;
    }
    else
    {
        uint _2299 = _2112 + 6u;
        float _2315 = (dot(vec3(cbLight._m0[_2112 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4450 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2318 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2291 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2181;
        _2293 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2182;
        _2295 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2183;
    }
    bool _2298 = _2187.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2298)
    {
        _2353 = _2291;
        _2355 = _2293;
        _2357 = _2295;
    }
    else
    {
        uint _2526 = _2112 + 7u;
        float _2542 = (dot(vec3(cbLight._m0[_2112 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4466 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2545 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2353 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2291;
        _2355 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2293;
        _2357 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2295;
    }
    uint _2360 = _2112 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _644) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2112].x + _545;
    float _2376 = cbLight._m0[_2112].y + _546;
    float _2377 = cbLight._m0[_2112].z + _547;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2112].xyz));
    float _4482 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _4493 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _2389 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2390 = dot(vec3(_463, _464, _465), vec3(_2382, _2383, _2384));
    float _4504 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2382, _2383, _2384));
    float _4515 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0);
    float _2411 = 0.959999978542327880859375 - _759;
    float _2413 = 0.959999978542327880859375 - _760;
    float _2414 = 0.959999978542327880859375 - _761;
    float _2421 = 1.0 - _2374;
    float _2432 = (0.5 / (((_2389 * ((_2388 * _2421) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2421) + _2374) * _2388))) * _2388;
    float _4526 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2448 = _2112 + 9u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _644) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2153].x + _545;
    float _2462 = cbLight._m0[_2153].y + _546;
    float _2463 = cbLight._m0[_2153].z + _547;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2153].xyz));
    float _4537 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2475 = dot(vec3(_463, _464, _465), vec3(_2468, _2469, _2470));
    float _4548 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2468, _2469, _2470));
    float _4559 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2460 * _2460;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
    float _2501 = 1.0 - _2460;
    float _2511 = (0.5 / (((_2389 * ((_2474 * _2501) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2501) + _2460) * _2474))) * _2474;
    float _4570 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    float _2523 = (((((_2494 * _2411) + _762) * cbLight._m0[_2448].x) * _2513) * _2135) + ((((cbLight._m0[_2360].x * _2101) * ((_2410 * _2411) + _762)) * _2434) * _2149);
    float _2524 = (((((_2494 * _2413) + _763) * cbLight._m0[_2448].y) * _2513) * _2135) + ((((cbLight._m0[_2360].y * _2103) * ((_2410 * _2413) + _763)) * _2434) * _2149);
    float _2525 = (((((_2494 * _2414) + _764) * cbLight._m0[_2448].z) * _2513) * _2135) + ((((cbLight._m0[_2360].z * _2105) * ((_2410 * _2414) + _764)) * _2434) * _2149);
    float _2581;
    float _2583;
    float _2585;
    if (_2189)
    {
        _2581 = _2523;
        _2583 = _2524;
        _2585 = _2525;
    }
    else
    {
        uint _2587 = _2112 + 2u;
        uint _2591 = _2112 + 10u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _644) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _545;
        float _2608 = cbLight._m0[_2587].y + _546;
        float _2609 = cbLight._m0[_2587].z + _547;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2587].xyz));
        float _4581 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2621 = dot(vec3(_463, _464, _465), vec3(_2614, _2615, _2616));
        float _4592 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4603 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0);
        float _2647 = 1.0 - _2606;
        float _2657 = (0.5 / (((_2389 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2647) + _2606) * _2620))) * _2620;
        float _4614 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2581 = (((((_2640 * _2411) + _762) * cbLight._m0[_2591].x) * _2659) * _2660) + _2523;
        _2583 = (((((_2640 * _2413) + _763) * cbLight._m0[_2591].y) * _2659) * _2660) + _2524;
        _2585 = (((((_2640 * _2414) + _764) * cbLight._m0[_2591].z) * _2659) * _2660) + _2525;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2298)
    {
        _2691 = _2581;
        _2693 = _2583;
        _2695 = _2585;
    }
    else
    {
        uint _2702 = _2112 + 3u;
        uint _2706 = _2112 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _644) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _545;
        float _2723 = cbLight._m0[_2702].y + _546;
        float _2724 = cbLight._m0[_2702].z + _547;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2702].xyz));
        float _4630 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2736 = dot(vec3(_463, _464, _465), vec3(_2729, _2730, _2731));
        float _4641 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4652 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2755 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2762 = 1.0 - _2721;
        float _2772 = (0.5 / (((_2389 * ((_2735 * _2762) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2762) + _2721) * _2735))) * _2735;
        float _4663 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2691 = (((((_2755 * _2411) + _762) * cbLight._m0[_2706].x) * _2774) * _2775) + _2581;
        _2693 = (((((_2755 * _2413) + _763) * cbLight._m0[_2706].y) * _2774) * _2775) + _2583;
        _2695 = (((((_2755 * _2414) + _764) * cbLight._m0[_2706].z) * _2774) * _2775) + _2585;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2110.y == 0u)
    {
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.x;
        uint _2808 = uint((float(_2796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2797))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2797)));
        float _2818 = (log2(_1888 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2819 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        uint _2822 = uint(isnan(14.0) ? _2819 : (isnan(_2819) ? 14.0 : min(_2819, 14.0)));
        uvec4 _2827 = texelFetch(g_lightClusterGridBuffer, int(((_2822 << 2u) + (_2808 << 6u)) >> 2u));
        uint _2828 = _2827.x;
        uint _2829 = _2796.z;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        if (((((1u << ((_2829 >> 4u) & 15u)) + 4294967295u) & _2828) == 0u) || ((_2829 & 240u) == 0u))
        {
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
        }
        else
        {
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            uint _3070 = 0u;
            uint _3079;
            bool _3080;
            for (;;)
            {
                _3079 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3070 << 2u)) >> 2u)).x;
                _3080 = _3079 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3080)
                {
                    frontier_phi_73_pred = _3069;
                    frontier_phi_73_pred_1 = _3068;
                    frontier_phi_73_pred_2 = _3067;
                    frontier_phi_73_pred_3 = _3066;
                    frontier_phi_73_pred_4 = _3065;
                    frontier_phi_73_pred_5 = _3064;
                }
                else
                {
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    uint _3215;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3079;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    for (;;)
                    {
                        uint _3219 = uint(findLSB(_3215)) + (_3070 << 5u);
                        uint _3216 = (_3215 + 4294967295u) & _3215;
                        uint _3221 = _3219 * 48u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3241 = (_3219 * 48u) + 4u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3260 = (_3219 * 48u) + 8u;
                        vec3 _3271 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x));
                        float _3275 = _3235.x - _1886;
                        float _3276 = _3235.y - _1887;
                        float _3277 = _3235.z - _1888;
                        float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                        float _3281 = inversesqrt(_3278);
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3285 = dot(vec3(_589, _592, _595), vec3(_3282, _3283, _3284));
                        float _3290 = 1.0 - (_3278 * _3235.w);
                        float _4689 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3292 = sqrt(_3278) * _3254.w;
                        float _3295 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3285) + _3296;
                        float _3302 = _3292 * _3292;
                        float _3306 = ((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3291) / ((_3302 * 0.699999988079071044921875) + 1.0);
                        float _3310 = (-0.0) - _1886;
                        float _3311 = (-0.0) - _1887;
                        float _3312 = (-0.0) - _1888;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3317 = _3316 * _3310;
                        float _3318 = _3316 * _3311;
                        float _3319 = _3316 * _3312;
                        float _3326 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                        float _3327 = 1.0 - _792;
                        float _3334 = sqrt(1.0 - ((1.0 - (_3327 * _3327)) * (1.0 - (_3326 * _3326))));
                        float _3335 = _3334 * _3334;
                        float _3336 = _3335 * _3335;
                        float _3337 = _3317 + _3282;
                        float _3338 = _3318 + _3283;
                        float _3339 = _3319 + _3284;
                        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
                        float _3347 = dot(vec3(_589, _592, _595), vec3(_3317, _3318, _3319));
                        float _4705 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3350 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3351 = dot(vec3(_589, _592, _595), vec3(_3343 * _3337, _3343 * _3338, _3343 * _3339));
                        float _4716 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3354 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3358 = ((_3354 * _3354) * (_3336 + (-1.0))) + 1.0;
                        float _3359 = _3295 * _3335;
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3285) + _3360;
                        float _4727 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3365 = 1.0 - _3335;
                        float _3375 = (0.5 / (((_3364 * ((_3350 * _3365) + _3335)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3335) * _3350))) * _3364;
                        float _4738 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3386 = (((_3336 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3358 * _3358) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125))) * _3291;
                        _3139 = (_3306 * _3254.x) + _3212;
                        _3140 = (_3306 * _3254.y) + _3213;
                        _3141 = (_3306 * _3254.z) + _3214;
                        _3136 = (_3386 * _3271.x) + _3209;
                        _3137 = (_3386 * _3271.y) + _3210;
                        _3138 = (_3386 * _3271.z) + _3211;
                        if (_3216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3216;
                        }
                    }
                    frontier_phi_73_pred = _3141;
                    frontier_phi_73_pred_1 = _3140;
                    frontier_phi_73_pred_2 = _3139;
                    frontier_phi_73_pred_3 = _3138;
                    frontier_phi_73_pred_4 = _3137;
                    frontier_phi_73_pred_5 = _3136;
                }
                _2923 = frontier_phi_73_pred;
                _2921 = frontier_phi_73_pred_1;
                _2919 = frontier_phi_73_pred_2;
                _2917 = frontier_phi_73_pred_3;
                _2915 = frontier_phi_73_pred_4;
                _2913 = frontier_phi_73_pred_5;
                uint _3071 = _3070 + 1u;
                if (_3071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3064 = _2913;
                    _3065 = _2915;
                    _3066 = _2917;
                    _3067 = _2919;
                    _3068 = _2921;
                    _3069 = _2923;
                    _3070 = _3071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
        }
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.z;
        uint _2929 = (_2927 >> 8u) & 15u;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((4294967295u << _2929) & _2828) == 0u)
        {
            _3032 = _2912;
            _3034 = _2914;
            _3036 = _2916;
            _3038 = _2918;
            _3040 = _2920;
            _3042 = _2922;
        }
        else
        {
            float _3057 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
            float _3058 = _3057 * _1886;
            float _3059 = _3057 * _1887;
            float _3060 = _3057 * _1888;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2929 < ((_2927 >> 12u) & 15u))
            {
                float _3033;
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3192 = _2912;
                float _3193 = _2914;
                float _3194 = _2916;
                float _3195 = _2918;
                float _3196 = _2920;
                float _3197 = _2922;
                uint _3198 = _2929;
                uint _3207;
                bool _3208;
                for (;;)
                {
                    _3207 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3198 << 2u)) >> 2u)).x;
                    _3208 = _3207 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3208)
                    {
                        frontier_phi_84_pred = _3196;
                        frontier_phi_84_pred_1 = _3195;
                        frontier_phi_84_pred_2 = _3194;
                        frontier_phi_84_pred_3 = _3193;
                        frontier_phi_84_pred_4 = _3192;
                        frontier_phi_84_pred_5 = _3197;
                    }
                    else
                    {
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        uint _3419 = _3207;
                        uint _3420;
                        vec4 _3445;
                        float _3446;
                        vec4 _3461;
                        vec3 _3473;
                        vec4 _3488;
                        vec4 _3504;
                        float _3551;
                        bool _3552;
                        for (;;)
                        {
                            uint _3430 = ((_3198 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3419));
                            _3420 = (_3419 + 4294967295u) & _3419;
                            uint _3432 = _3430 * 40u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3446 = _3445.w;
                            uint _3448 = (_3430 * 40u) + 4u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3430 * 40u) + 8u;
                            _3473 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x));
                            uint _3475 = (_3430 * 40u) + 16u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3491 = (_3430 * 40u) + 20u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3507 = (_3430 * 40u) + 24u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3526 = (_3430 * 40u) + 28u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3551 = fma(_1888, _3539.z, fma(_1887, _3539.y, _3539.x * _1886)) + _3539.w;
                            _3552 = !((fma(_1888, _3520.z, fma(_1887, _3520.y, _3520.x * _1886)) + _3520.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3552)
                            {
                                float _3579 = _3445.x - _1886;
                                float _3580 = _3445.y - _1887;
                                float _3581 = _3445.z - _1888;
                                float _3582 = dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581));
                                float _3585 = inversesqrt(_3582);
                                float _3586 = _3585 * _3579;
                                float _3587 = _3585 * _3580;
                                float _3588 = _3585 * _3581;
                                float _3592 = 1.0 - (_3582 / (_3446 * _3446));
                                float _4749 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3597 = sqrt(_3582) * _3461.w;
                                float _3599 = 1.39999997615814208984375 / (_3597 + 1.39999997615814208984375);
                                float _3600 = _3599 * _3599;
                                float _3603 = ((1.0 - _3600) * dot(vec3(_3586, _3587, _3588), vec3(_589, _592, _595))) + _3600;
                                float _3606 = _3597 * _3597;
                                float _3610 = (fma(_1888, _3488.z, fma(_1887, _3488.y, _3488.x * _1886)) + _3488.w) / _3551;
                                float _3611 = (fma(_1888, _3504.z, fma(_1887, _3504.y, _3504.x * _1886)) + _3504.w) / _3551;
                                float _3615 = 1.0 - dot(vec2(_3610, _3611), vec2(_3610, _3611));
                                float _4765 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3617 = _3616 * (((isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0))) * _3593) / ((_3606 * 0.699999988079071044921875) + 1.0));
                                float _3629 = exp2(log2(1.0 / ((_3606 * 3.5) + 5.0)) * 0.25);
                                float _3630 = 1.0 - _792;
                                float _3637 = sqrt(1.0 - ((1.0 - (_3630 * _3630)) * (1.0 - (_3629 * _3629))));
                                float _3638 = _3637 * _3637;
                                float _3639 = _3638 * _3638;
                                float _3640 = _3586 - _3058;
                                float _3641 = _3587 - _3059;
                                float _3642 = _3588 - _3060;
                                float _3646 = inversesqrt(dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642)));
                                float _3650 = dot(vec3(_589, _592, _595), vec3((-0.0) - _3058, (-0.0) - _3059, (-0.0) - _3060));
                                float _4776 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3654 = dot(vec3(_589, _592, _595), vec3(_3646 * _3640, _3646 * _3641, _3646 * _3642));
                                float _4787 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3661 = ((_3657 * _3657) * (_3639 + (-1.0))) + 1.0;
                                float _3662 = _3599 * _3638;
                                float _3663 = _3662 * _3662;
                                float _3669 = ((1.0 - _3663) * dot(vec3(_589, _592, _595), vec3(_3586, _3587, _3588))) + _3663;
                                float _4798 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3671 = 1.0 - _3638;
                                float _3681 = (0.5 / (((_3670 * ((_3653 * _3671) + _3638)) + 9.9999999392252902907785028219223e-09) + (((_3670 * _3671) + _3638) * _3653))) * _3670;
                                float _4809 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3691 = (_3616 * _3593) * (((_3639 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3661 * _3661) * ((_3606 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3617 * _3461.y;
                                frontier_phi_90_pred_1 = _3617 * _3461.x;
                                frontier_phi_90_pred_2 = _3691 * _3473.z;
                                frontier_phi_90_pred_3 = _3691 * _3473.y;
                                frontier_phi_90_pred_4 = _3691 * _3473.x;
                                frontier_phi_90_pred_5 = _3617 * _3461.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3699 = frontier_phi_90_pred;
                            _3698 = frontier_phi_90_pred_1;
                            _3697 = frontier_phi_90_pred_2;
                            _3696 = frontier_phi_90_pred_3;
                            _3695 = frontier_phi_90_pred_4;
                            _3700 = frontier_phi_90_pred_5;
                            _3403 = _3698 + _3416;
                            _3404 = _3699 + _3417;
                            _3405 = _3700 + _3418;
                            _3400 = _3695 + _3413;
                            _3401 = _3696 + _3414;
                            _3402 = _3697 + _3415;
                            if (_3420 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3420;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3404;
                        frontier_phi_84_pred_1 = _3403;
                        frontier_phi_84_pred_2 = _3402;
                        frontier_phi_84_pred_3 = _3401;
                        frontier_phi_84_pred_4 = _3400;
                        frontier_phi_84_pred_5 = _3405;
                    }
                    _3041 = frontier_phi_84_pred;
                    _3039 = frontier_phi_84_pred_1;
                    _3037 = frontier_phi_84_pred_2;
                    _3035 = frontier_phi_84_pred_3;
                    _3033 = frontier_phi_84_pred_4;
                    _3043 = frontier_phi_84_pred_5;
                    uint _3199 = _3198 + 1u;
                    if (_3199 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3192 = _3033;
                        _3193 = _3035;
                        _3194 = _3037;
                        _3195 = _3039;
                        _3196 = _3041;
                        _3197 = _3043;
                        _3198 = _3199;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3043;
                frontier_phi_65_66_ladder_1 = _3039;
                frontier_phi_65_66_ladder_2 = _3041;
                frontier_phi_65_66_ladder_3 = _3035;
                frontier_phi_65_66_ladder_4 = _3033;
                frontier_phi_65_66_ladder_5 = _3037;
            }
            else
            {
                frontier_phi_65_66_ladder = _2922;
                frontier_phi_65_66_ladder_1 = _2918;
                frontier_phi_65_66_ladder_2 = _2920;
                frontier_phi_65_66_ladder_3 = _2914;
                frontier_phi_65_66_ladder_4 = _2912;
                frontier_phi_65_66_ladder_5 = _2916;
            }
            _3032 = frontier_phi_65_66_ladder_4;
            _3034 = frontier_phi_65_66_ladder_3;
            _3036 = frontier_phi_65_66_ladder_5;
            _3038 = frontier_phi_65_66_ladder_1;
            _3040 = frontier_phi_65_66_ladder_2;
            _3042 = frontier_phi_65_66_ladder;
        }
        float _3047 = isnan(1.0) ? _776 : (isnan(_776) ? 1.0 : min(_776, 1.0));
        _2840 = (_3047 * _3038) + _2353;
        _2842 = (_3047 * _3040) + _2355;
        _2844 = (_3047 * _3042) + _2357;
        _2846 = ((_3032 * _762) * _3047) + _2691;
        _2848 = ((_3034 * _763) * _3047) + _2693;
        _2850 = ((_3036 * _764) * _3047) + _2695;
    }
    else
    {
        _2840 = _2353;
        _2842 = _2355;
        _2844 = _2357;
        _2846 = _2691;
        _2848 = _2693;
        _2850 = _2695;
    }
    float _4825 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4836 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4847 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4858 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2868 = ((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2840 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _776))) + ((_2846 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2842 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _776))) + ((_2848 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2844 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _776))) + ((_2850 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    float _2871 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2872 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2873 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2878 = cbInstanceData._m0[_668 + 6u].w * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)));
    float _2883 = _565 / cbSceneParam._m0[86u].x;
    float _2884 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2898 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, (log2((isnan(cbSceneParam._m0[77u].w) ? _487 : (isnan(_487) ? cbSceneParam._m0[77u].w : min(_487, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2900 = _2898.x;
    float _2901 = _2898.y;
    float _2902 = _2898.z;
    float _2903 = _2898.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_487 > cbSceneParam._m0[78u].w)
    {
        float _2937 = isnan(_487) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _487 : min(cbSceneParam._m0[80u].w, _487));
        float _2938 = _2937 / _487;
        float _2949 = _2938 * _538;
        float _2950 = _539 * _2938;
        float _2951 = (-0.0) - _2950;
        float _2952 = _2938 * _540;
        float _2954 = (cbSceneParam._m0[77u].w * _2951) / _2937;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2950;
        float _2962 = sqrt(((_2949 * _2949) + (_2950 * _2950)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2937)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3149;
        if (abs((_2951 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3149 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3093 = 1.0 / cbSceneParam._m0[80u].x;
            float _3094 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3095 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            float _3105 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : min(_3095, 0.0));
            _3149 = ((abs(_2962 / _2951) * cbSceneParam._m0[80u].y) * ((((_3104 - _3105) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))))) * _3093)) - ((exp2(_2972 * _3104) - exp2(_2972 * _3105)) * _3093))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3151 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2883, _2884, 1.0), 0.0);
        float _3160 = exp2((_3149 * (-1.44269502162933349609375)) * (1.0 - _3151.w));
        float _3161 = log2(_3160);
        float _3177 = log2(_2903);
        _2974 = (exp2(_3177 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].x)) * _3151.x) / cbSceneParam._m0[78u].x)) + _2900;
        _2976 = (exp2(_3177 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].y)) * _3151.y) / cbSceneParam._m0[78u].y)) + _2901;
        _2978 = (exp2(_3177 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3161 * cbSceneParam._m0[78u].z)) * _3151.z) / cbSceneParam._m0[78u].z)) + _2902;
        _2980 = _3160 * _2903;
    }
    else
    {
        _2974 = _2900;
        _2976 = _2901;
        _2978 = _2902;
        _2980 = _2903;
    }
    bool _3187;
    vec4 _2990;
    vec4 _3012;
    float _3014;
    float _3018;
    float _3019;
    float _3020;
    float _3021;
    bool _3031;
    for (;;)
    {
        _2990 = cbMatDynParam._m0[0u];
        float _2992 = roundEven(_2990.y);
        bool _2993 = _2992 == 3.0;
        float _2994 = log2(_2980);
        float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * _2871;
        float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * _2872;
        float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * _2873;
        float _3010 = _554 + (-0.5);
        _3012 = cbMtdParam._m0[1u];
        _3014 = _3012.y * _3010;
        float _3017 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3018 = _3017 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
        _3019 = _3017 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
        _3020 = _3017 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
        _3021 = _3010 * 0.999000012874603271484375;
        _3031 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3031)
        {
            if ((cbInstanceData._m0[_668 + 7u].x + _3021) < 0.5)
            {
                _3187 = true;
                break;
            }
        }
        uint _3128 = _669 + uint(_2990.w);
        if ((cbInstanceData._m0[_3128].w < 1.0) && ((cbInstanceData._m0[_3128].w + _3021) < 0.5))
        {
            _3187 = true;
            break;
        }
        if ((_3014 + _350) < _3012.x)
        {
            _3187 = true;
            break;
        }
        _3187 = false;
        break;
    }
    float _3391;
    if (_3187)
    {
        discard_state = true;
        _3391 = 0.0;
    }
    else
    {
        _3391 = _2878;
    }
    SV_Target.x = _3018;
    SV_Target.y = _3019;
    SV_Target.z = _3020;
    SV_Target.w = _3391;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2878;
    discard_exit();
}


