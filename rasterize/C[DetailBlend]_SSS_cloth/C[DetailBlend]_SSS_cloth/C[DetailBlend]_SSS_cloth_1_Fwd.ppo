#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1134;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _242.z;
    float _253 = exp2(log2(_247 * 22.0) * 260.0);
    float _254 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _255 = isnan(1.0) ? _254 : (isnan(_254) ? 1.0 : min(_254, 1.0));
    vec4 _269 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _280 = cbMtdParam._m0[10u].x * _269.x;
    float _281 = cbMtdParam._m0[10u].y * _269.y;
    float _282 = cbMtdParam._m0[10u].z * _269.z;
    vec4 _294 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _329 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _337 = (((((cbMtdParam._m0[9u].x * _294.x) - _280) * _255) + _280) * 4.55000019073486328125) * _329.x;
    float _339 = (((((cbMtdParam._m0[9u].y * _294.y) - _281) * _255) + _281) * 4.55000019073486328125) * _329.y;
    float _341 = (((((cbMtdParam._m0[9u].z * _294.z) - _282) * _255) + _282) * 4.55000019073486328125) * _329.z;
    float _342 = _329.w * _294.w;
    float _369 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _255) + cbMtdParam._m0[15u].y;
    vec4 _382 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _382.x;
    float _385 = _382.y;
    float _391 = cbMtdParam._m0[13u].y + _382.z;
    vec4 _403 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _420 = (((_255 * (_247 + (-0.5))) + 0.5) * 2.0) * ((((_403.z - _391) + cbMtdParam._m0[13u].x) * _255) + _391);
    float _424 = (_242.x * 2.0) + (-1.0);
    float _426 = (_242.y * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3480 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    float _445 = ((((((_403.x - _384) * _255) + _384) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _424;
    float _446 = ((((((_403.y - _385) * _255) + _385) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _426;
    float _449 = fma(_432, _226, fma(_446, _218 * TANGENT.x, (_204 * _196) * _445));
    float _452 = fma(_432, _227, fma(_446, _218 * TANGENT.y, (_204 * _197) * _445));
    float _455 = fma(_432, _228, fma(_446, _218 * TANGENT.z, (_204 * _198) * _445));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    float _460 = _459 * _449;
    float _461 = _459 * _452;
    float _462 = _459 * _455;
    float _3491 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _463 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _464 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _465 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _466 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _467 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _468 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _535 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _525);
    float _536 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _525);
    float _537 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _525);
    float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
    float _542 = _535 * _541;
    float _543 = _536 * _541;
    float _544 = _537 * _541;
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _553 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _555 = _553.w;
    float _574 = fma(_462, cbSceneParam._m0[5u].z, fma(_461, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _460));
    float _577 = fma(_462, cbSceneParam._m0[6u].z, fma(_461, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _460));
    float _580 = fma(_462, cbSceneParam._m0[7u].z, fma(_461, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _460));
    vec4 _582 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _584 = _582.x;
    float _596 = (((_582.y - _464) + (_582.w * _464)) * cbMtdParam._m0[3u].x) + _464;
    float _613 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_584 * _584)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _621 = (((cbMatDynParam._m0[15u].x - _468) * cbMatDynParam._m0[15u].w) * _613) + _468;
    float _629 = ((_613 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _596)) + _596;
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _655 = (_653 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * _465) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * _466) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * _467) * cbInstanceData._m0[_655].z;
    float _3557 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _3579 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    vec4 _667 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _672 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _683 = (((_672.x - _621) + (_672.w * _621)) * cbMtdParam._m0[3u].x) + _621;
    float _696 = (cbMtdParam._m0[3u].x * (((_664 * _555) - _664) + _667.x)) + _664;
    float _697 = (cbMtdParam._m0[3u].x * (((_665 * _555) - _665) + _667.y)) + _665;
    float _698 = (cbMtdParam._m0[3u].x * (((_666 * _555) - _666) + _667.z)) + _666;
    vec4 _699 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _712 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_621 * (_465 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_621 * (_466 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_621 * (_467 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _699.z;
    float _716 = _712 * cbMatDynParam._m0[13u].w;
    float _726 = (_716 * (cbMatDynParam._m0[13u].x - _696)) + _696;
    float _727 = (_716 * (cbMatDynParam._m0[13u].y - _697)) + _697;
    float _728 = (_716 * (cbMatDynParam._m0[13u].z - _698)) + _698;
    float _736 = ((_712 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _683)) + _683;
    float _737 = 1.0 - _736;
    float _738 = _737 * _726;
    float _739 = _737 * _727;
    float _740 = _737 * _728;
    float _744 = (_726 + (-0.039999999105930328369140625)) * _736;
    float _745 = (_727 + (-0.039999999105930328369140625)) * _736;
    float _746 = (_728 + (-0.039999999105930328369140625)) * _736;
    float _747 = _744 + 0.039999999105930328369140625;
    float _748 = _745 + 0.039999999105930328369140625;
    float _749 = _746 + 0.039999999105930328369140625;
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _761 = _758.x * TEXCOORD_4;
    float _762 = dot(vec3(_460, _461, _462), vec3(_542, _543, _544));
    float _765 = _762 * 2.0;
    float _769 = (_765 * _460) - _542;
    float _770 = (_765 * _461) - _543;
    float _771 = (_765 * _462) - _544;
    float _775 = abs(dot(vec3(_542, _543, _544), vec3(_460, _461, _462)));
    float _3590 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = sqrt(_629);
    float _790 = exp2((_777 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_777 * 3.0));
    float _796 = (1.0 - _790) * ((_777 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _797 = _790 * _777;
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1133;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _864 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _868 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _891 = _825 + _460;
        float _892 = _829 + _461;
        float _893 = _833 + _462;
        float _903 = fma(_893, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891)) - _860;
        float _904 = fma(_893, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891)) - _864;
        float _905 = fma(_893, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891)) - _868;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _961 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_927.x + (-0.5));
        float _963 = _961 * (_927.y + (-0.5));
        float _964 = _961 * (_927.z + (-0.5));
        float _971 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_934.x + (-0.5));
        float _973 = _971 * (_934.y + (-0.5));
        float _974 = _971 * (_934.z + (-0.5));
        float _981 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_941.x + (-0.5));
        float _983 = _981 * (_941.y + (-0.5));
        float _984 = _981 * (_941.z + (-0.5));
        float _991 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_948.x + (-0.5));
        float _993 = _991 * (_948.y + (-0.5));
        float _994 = _991 * (_948.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1015 = (dot(vec3(_460, _461, _462), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1025 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3638 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1027 + 1.0))) + _1032) * _995;
        float _1042 = _963 * 0.5;
        float _1043 = _973 * 0.5;
        float _1044 = _983 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_460, _461, _462), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3671 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1069 + 1.0))) + _1074) * _996;
        float _1084 = _964 * 0.5;
        float _1085 = _974 * 0.5;
        float _1086 = _984 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_460, _461, _462), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3704 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1111 + 1.0))) + _1116) * _997;
        _1133 = _964;
        _1135 = _963;
        _1136 = _962;
        _1137 = _974;
        _1138 = _973;
        _1139 = _972;
        _1140 = _984;
        _1141 = _983;
        _1142 = _982;
        _1143 = _997;
        _1144 = _996;
        _1145 = _995;
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
    }
    else
    {
        _1133 = _1134;
        _1135 = _1134;
        _1136 = _1134;
        _1137 = _1134;
        _1138 = _1134;
        _1139 = _1134;
        _1140 = _1134;
        _1141 = _1134;
        _1142 = _1134;
        _1143 = _1134;
        _1144 = _1134;
        _1145 = _1134;
        _1146 = 0.0;
        _1147 = 0.0;
        _1148 = 0.0;
    }
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1174 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1178 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1182 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1205 = _825 + _460;
        float _1206 = _829 + _461;
        float _1207 = _833 + _462;
        float _1217 = fma(_1207, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205)) - _1174;
        float _1218 = fma(_1207, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205)) - _1178;
        float _1219 = fma(_1207, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205)) - _1182;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1174 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1178 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[35u].z) + ((((((_1182 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1273 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1240.x + (-0.5));
        float _1275 = _1273 * (_1240.y + (-0.5));
        float _1276 = _1273 * (_1240.z + (-0.5));
        float _1283 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1247.x + (-0.5));
        float _1285 = _1283 * (_1247.y + (-0.5));
        float _1286 = _1283 * (_1247.z + (-0.5));
        float _1293 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1254.x + (-0.5));
        float _1295 = _1293 * (_1254.y + (-0.5));
        float _1296 = _1293 * (_1254.z + (-0.5));
        float _1303 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1261.x + (-0.5));
        float _1305 = _1303 * (_1261.y + (-0.5));
        float _1306 = _1303 * (_1261.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_460, _461, _462), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3767 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1337 + 1.0))) + _1342) * _1307;
        float _1352 = _1275 * 0.5;
        float _1353 = _1285 * 0.5;
        float _1354 = _1295 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_460, _461, _462), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3800 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1379 + 1.0))) + _1384) * _1308;
        float _1394 = _1276 * 0.5;
        float _1395 = _1286 * 0.5;
        float _1396 = _1296 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_460, _461, _462), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3833 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1421 + 1.0))) + _1426) * _1309;
        _1443 = _1276;
        _1444 = _1275;
        _1445 = _1274;
        _1446 = _1286;
        _1447 = _1285;
        _1448 = _1284;
        _1449 = _1296;
        _1450 = _1295;
        _1451 = _1294;
        _1452 = _1309;
        _1453 = _1308;
        _1454 = _1307;
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1134;
        _1444 = _1134;
        _1445 = _1134;
        _1446 = _1134;
        _1447 = _1134;
        _1448 = _1134;
        _1449 = _1134;
        _1450 = _1134;
        _1451 = _1134;
        _1452 = _1134;
        _1453 = _1134;
        _1454 = _1134;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1146)) + _1146;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1490 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1467));
    float _1511 = _769 * 0.5;
    float _1512 = _770 * 0.5;
    float _1513 = _771 * 0.5;
    float _1514 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1517 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1520 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1527 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1133, _1137, _1140, _1143));
        float _1531 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1535 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1542 = dot(vec4(cbModelParam._m0[39u]), vec4(_1511, _1512, _1513, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1511, _1512, _1513, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _629);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_771, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769));
        float _1638 = fma(_771, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769));
        float _1641 = fma(_771, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1669 = frontier_phi_16_14_ladder;
        }
        float _1877;
        if (_1638 > 0.0)
        {
            _1877 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1877 = frontier_phi_25_21_ladder;
        }
        float _2131;
        if (_1641 > 0.0)
        {
            _2131 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2131 = frontier_phi_37_32_ladder;
        }
        float _2133 = isnan(_1877) ? _1669 : (isnan(_1669) ? _1877 : min(_1669, _1877));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1635) + _1624;
        float _2139 = (_2134 * _1638) + _1628;
        float _2140 = (_2134 * _1641) + _1632;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2141;
        float _2145 = _2141 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 > _2145) || ((_2139 < _2143) || ((_2138 < _2143) || (_2138 > _2145))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2140, cbModelParam._m0[9u].z, fma(_2139, cbModelParam._m0[9u].y, _2138 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2140, cbModelParam._m0[10u].z, fma(_2139, cbModelParam._m0[10u].y, _2138 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2140, cbModelParam._m0[11u].z, fma(_2139, cbModelParam._m0[11u].y, _2138 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_15_37_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_15_37_ladder_2;
        _1659 = frontier_phi_15_37_ladder_1;
        _1661 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_769, _770, _771), _1577);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _629);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_771, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769));
        float _1737 = fma(_771, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769));
        float _1740 = fma(_771, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769));
        float _1882;
        if (_1734 > 0.0)
        {
            _1882 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1882 = frontier_phi_27_23_ladder;
        }
        float _2158;
        if (_1737 > 0.0)
        {
            _2158 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2158 = frontier_phi_39_34_ladder;
        }
        float _2371;
        if (_1740 > 0.0)
        {
            _2371 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2371 = frontier_phi_48_45_ladder;
        }
        float _2373 = isnan(_2158) ? _1882 : (isnan(_1882) ? _2158 : min(_1882, _2158));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1734) + _1723;
        float _2379 = (_2374 * _1737) + _1727;
        float _2380 = (_2374 * _1740) + _1731;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_24_48_ladder = _2583.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2583.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2583.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_24_48_ladder_2;
        _1761 = frontier_phi_24_48_ladder_1;
        _1763 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_769, _770, _771), _1666);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1776 = (((_796 * _747) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1759 - _1657)) + _1657);
    float _1778 = (((_796 * _748) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1780 = (((_796 * _749) + _797) * _761) * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _761 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1835 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1839 = _1801 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_460, _461, _462));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_460, _461, _462));
    float _3969 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _3980 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1818].x * _1824) * _1860) + ((cbLight._m0[_1828].x * _1835) * _1858);
    float _1868 = ((_1824 * cbLight._m0[_1818].y) * _1860) + ((_1835 * cbLight._m0[_1828].y) * _1858);
    float _1869 = ((_1824 * cbLight._m0[_1818].z) * _1860) + ((_1835 * cbLight._m0[_1828].z) * _1858);
    uvec4 _1874 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1876 = _1874.x == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1876)
    {
        _1887 = _1867;
        _1889 = _1868;
        _1891 = _1869;
    }
    else
    {
        uint _1895 = _1801 + 6u;
        float _1911 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3991 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1914 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1887 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1867;
        _1889 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1868;
        _1891 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1869;
    }
    bool _1894 = _1874.y == 0u;
    float _1932;
    float _1934;
    float _1936;
    if (_1894)
    {
        _1932 = _1887;
        _1934 = _1889;
        _1936 = _1891;
    }
    else
    {
        uint _2102 = _1801 + 7u;
        float _2118 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_460, _461, _462)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4007 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2121 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1932 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1887;
        _1934 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1889;
        _1936 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1891;
    }
    uint _1939 = _1801 + 8u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _629) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1801].x + _542;
    float _1955 = cbLight._m0[_1801].y + _543;
    float _1956 = cbLight._m0[_1801].z + _544;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_1801].xyz));
    float _4023 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _1968 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1969 = dot(vec3(_460, _461, _462), vec3(_1961, _1962, _1963));
    float _4045 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _1973 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1961, _1962, _1963));
    float _4056 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1977 = _1953 * _1953;
    float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
    float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0);
    float _1990 = 0.959999978542327880859375 - _744;
    float _1992 = 0.959999978542327880859375 - _745;
    float _1993 = 0.959999978542327880859375 - _746;
    float _2000 = 1.0 - _1953;
    float _2011 = (0.5 / (((_1968 * ((_1967 * _2000) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2000) + _1953) * _1967))) * _1967;
    float _4067 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
    uint _2024 = _1801 + 9u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _629) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1839].x + _542;
    float _2038 = cbLight._m0[_1839].y + _543;
    float _2039 = cbLight._m0[_1839].z + _544;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_1839].xyz));
    float _4078 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _2051 = dot(vec3(_460, _461, _462), vec3(_2044, _2045, _2046));
    float _4089 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2055 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2044, _2045, _2046));
    float _4100 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = _2036 * _2036;
    float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
    float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0);
    float _2077 = 1.0 - _2036;
    float _2087 = (0.5 / (((_1968 * ((_2050 * _2077) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2077) + _2036) * _2050))) * _2050;
    float _4111 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
    float _2099 = (((((_2070 * _1990) + _747) * cbLight._m0[_2024].x) * _2089) * _1824) + (((((_1989 * _1990) + _747) * cbLight._m0[_1939].x) * _2013) * _1835);
    float _2100 = (((((_2070 * _1992) + _748) * cbLight._m0[_2024].y) * _2089) * _1824) + (((((_1989 * _1992) + _748) * cbLight._m0[_1939].y) * _2013) * _1835);
    float _2101 = (((((_2070 * _1993) + _749) * cbLight._m0[_2024].z) * _2089) * _1824) + (((((_1989 * _1993) + _749) * cbLight._m0[_1939].z) * _2013) * _1835);
    float _2163;
    float _2165;
    float _2167;
    if (_1876)
    {
        _2163 = _2099;
        _2165 = _2100;
        _2167 = _2101;
    }
    else
    {
        uint _2169 = _1801 + 2u;
        uint _2173 = _1801 + 10u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _629) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _542;
        float _2190 = cbLight._m0[_2169].y + _543;
        float _2191 = cbLight._m0[_2169].z + _544;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2169].xyz));
        float _4122 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2203 = dot(vec3(_460, _461, _462), vec3(_2196, _2197, _2198));
        float _4133 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4144 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2229 = 1.0 - _2188;
        float _2239 = (0.5 / (((_1968 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2229) + _2188) * _2202))) * _2202;
        float _4155 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2241 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2242 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2163 = (((((_2222 * _1990) + _747) * cbLight._m0[_2173].x) * _2241) * _2242) + _2099;
        _2165 = (((((_2222 * _1992) + _748) * cbLight._m0[_2173].y) * _2241) * _2242) + _2100;
        _2167 = (((((_2222 * _1993) + _749) * cbLight._m0[_2173].z) * _2241) * _2242) + _2101;
    }
    float _2277;
    float _2279;
    float _2281;
    if (_1894)
    {
        _2277 = _2163;
        _2279 = _2165;
        _2281 = _2167;
    }
    else
    {
        uint _2288 = _1801 + 3u;
        uint _2292 = _1801 + 11u;
        float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _629) * 0.949999988079071044921875);
        float _2307 = _2306 * _2306;
        float _2308 = cbLight._m0[_2288].x + _542;
        float _2309 = cbLight._m0[_2288].y + _543;
        float _2310 = cbLight._m0[_2288].z + _544;
        float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
        float _2315 = _2314 * _2308;
        float _2316 = _2314 * _2309;
        float _2317 = _2314 * _2310;
        float _2318 = dot(vec3(_460, _461, _462), vec3(cbLight._m0[_2288].xyz));
        float _4171 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2322 = dot(vec3(_460, _461, _462), vec3(_2315, _2316, _2317));
        float _4182 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2326 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2315, _2316, _2317));
        float _4193 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2330 = _2307 * _2307;
        float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
        float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
        float _2348 = 1.0 - _2307;
        float _2358 = (0.5 / (((_1968 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_1968 * _2348) + _2307) * _2321))) * _2321;
        float _4204 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2277 = (((((_2341 * _1990) + _747) * cbLight._m0[_2292].x) * _2360) * _2361) + _2163;
        _2279 = (((((_2341 * _1992) + _748) * cbLight._m0[_2292].y) * _2360) * _2361) + _2165;
        _2281 = (((((_2341 * _1993) + _749) * cbLight._m0[_2292].z) * _2360) * _2361) + _2167;
    }
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_1799.y == 0u)
    {
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2436;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2436;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2436;
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.x;
        uint _2463 = uint((float(_2451.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2452))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2452)));
        float _2473 = (log2(_2439 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2474 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        uint _2477 = uint(isnan(14.0) ? _2474 : (isnan(_2474) ? 14.0 : min(_2474, 14.0)));
        uvec4 _2482 = texelFetch(g_lightClusterGridBuffer, int(((_2477 << 2u) + (_2463 << 6u)) >> 2u));
        uint _2483 = _2482.x;
        uint _2484 = _2451.z;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((((1u << ((_2484 >> 4u) & 15u)) + 4294967295u) & _2483) == 0u) || ((_2484 & 240u) == 0u))
        {
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
        }
        else
        {
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            uint _2738 = 0u;
            uint _2747;
            bool _2748;
            for (;;)
            {
                _2747 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                _2748 = _2747 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2748)
                {
                    frontier_phi_63_pred = _2737;
                    frontier_phi_63_pred_1 = _2736;
                    frontier_phi_63_pred_2 = _2735;
                    frontier_phi_63_pred_3 = _2734;
                    frontier_phi_63_pred_4 = _2733;
                    frontier_phi_63_pred_5 = _2732;
                }
                else
                {
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    uint _2862;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2747;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    for (;;)
                    {
                        uint _2866 = uint(findLSB(_2862)) + (_2738 << 5u);
                        uint _2863 = (_2862 + 4294967295u) & _2862;
                        uint _2868 = _2866 * 48u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2888 = (_2866 * 48u) + 4u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2907 = (_2866 * 48u) + 8u;
                        vec3 _2918 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x));
                        float _2922 = _2882.x - _2437;
                        float _2923 = _2882.y - _2438;
                        float _2924 = _2882.z - _2439;
                        float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                        float _2928 = inversesqrt(_2925);
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2932 = dot(vec3(_574, _577, _580), vec3(_2929, _2930, _2931));
                        float _2937 = 1.0 - (_2925 * _2882.w);
                        float _4230 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2939 = sqrt(_2925) * _2901.w;
                        float _2942 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2932) + _2943;
                        float _2949 = _2939 * _2939;
                        float _2953 = ((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2938) / ((_2949 * 0.699999988079071044921875) + 1.0);
                        float _2957 = (-0.0) - _2437;
                        float _2958 = (-0.0) - _2438;
                        float _2959 = (-0.0) - _2439;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2974 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _777;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_574, _577, _580), vec3(_2964, _2965, _2966));
                        float _4246 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2999 = dot(vec3(_574, _577, _580), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4257 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2942 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2932) + _3008;
                        float _4268 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4279 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) / ((_3006 * _3006) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125))) * _2938;
                        _2791 = (_2953 * _2901.x) + _2859;
                        _2792 = (_2953 * _2901.y) + _2860;
                        _2793 = (_2953 * _2901.z) + _2861;
                        _2788 = (_3034 * _2918.x) + _2856;
                        _2789 = (_3034 * _2918.y) + _2857;
                        _2790 = (_3034 * _2918.z) + _2858;
                        if (_2863 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2863;
                        }
                    }
                    frontier_phi_63_pred = _2793;
                    frontier_phi_63_pred_1 = _2792;
                    frontier_phi_63_pred_2 = _2791;
                    frontier_phi_63_pred_3 = _2790;
                    frontier_phi_63_pred_4 = _2789;
                    frontier_phi_63_pred_5 = _2788;
                }
                _2599 = frontier_phi_63_pred;
                _2597 = frontier_phi_63_pred_1;
                _2595 = frontier_phi_63_pred_2;
                _2593 = frontier_phi_63_pred_3;
                _2591 = frontier_phi_63_pred_4;
                _2589 = frontier_phi_63_pred_5;
                uint _2739 = _2738 + 1u;
                if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2732 = _2589;
                    _2733 = _2591;
                    _2734 = _2593;
                    _2735 = _2595;
                    _2736 = _2597;
                    _2737 = _2599;
                    _2738 = _2739;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
        }
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.z;
        uint _2605 = (_2603 >> 8u) & 15u;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((4294967295u << _2605) & _2483) == 0u)
        {
            _2700 = _2588;
            _2702 = _2590;
            _2704 = _2592;
            _2706 = _2594;
            _2708 = _2596;
            _2710 = _2598;
        }
        else
        {
            float _2725 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
            float _2726 = _2725 * _2437;
            float _2727 = _2725 * _2438;
            float _2728 = _2725 * _2439;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2605 < ((_2603 >> 12u) & 15u))
            {
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2839 = _2588;
                float _2840 = _2590;
                float _2841 = _2592;
                float _2842 = _2594;
                float _2843 = _2596;
                float _2844 = _2598;
                uint _2845 = _2605;
                uint _2854;
                bool _2855;
                for (;;)
                {
                    _2854 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                    _2855 = _2854 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2855)
                    {
                        frontier_phi_69_pred = _2844;
                        frontier_phi_69_pred_1 = _2843;
                        frontier_phi_69_pred_2 = _2842;
                        frontier_phi_69_pred_3 = _2841;
                        frontier_phi_69_pred_4 = _2840;
                        frontier_phi_69_pred_5 = _2839;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        uint _3058 = _2854;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3127;
                        vec4 _3143;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3069 = ((_2845 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3114 = (_3069 * 40u) + 16u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3130 = (_3069 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3069 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3069 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_2439, _3178.z, fma(_2438, _3178.y, _3178.x * _2437)) + _3178.w;
                            _3191 = !((fma(_2439, _3159.z, fma(_2438, _3159.y, _3159.x * _2437)) + _3159.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3084.x - _2437;
                                float _3219 = _3084.y - _2438;
                                float _3220 = _3084.z - _2439;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3085 * _3085));
                                float _4290 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3236 = sqrt(_3221) * _3100.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_574, _577, _580))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_2439, _3127.z, fma(_2438, _3127.y, _3127.x * _2437)) + _3127.w) / _3190;
                                float _3250 = (fma(_2439, _3143.z, fma(_2438, _3143.y, _3143.x * _2437)) + _3143.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4306 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _777;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2726;
                                float _3280 = _3226 - _2727;
                                float _3281 = _3227 - _2728;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2726, (-0.0) - _2727, (-0.0) - _2728));
                                float _4317 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3293 = dot(vec3(_574, _577, _580), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4328 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_574, _577, _580), vec3(_3225, _3226, _3227))) + _3302;
                                float _4339 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4350 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3256 * _3100.z;
                                frontier_phi_75_pred_1 = _3256 * _3100.y;
                                frontier_phi_75_pred_2 = _3256 * _3100.x;
                                frontier_phi_75_pred_3 = _3330 * _3112.z;
                                frontier_phi_75_pred_4 = _3330 * _3112.y;
                                frontier_phi_75_pred_5 = _3330 * _3112.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3339 = frontier_phi_75_pred;
                            _3338 = frontier_phi_75_pred_1;
                            _3337 = frontier_phi_75_pred_2;
                            _3336 = frontier_phi_75_pred_3;
                            _3335 = frontier_phi_75_pred_4;
                            _3334 = frontier_phi_75_pred_5;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            _3044 = _3339 + _3057;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3044;
                        frontier_phi_69_pred_1 = _3043;
                        frontier_phi_69_pred_2 = _3042;
                        frontier_phi_69_pred_3 = _3041;
                        frontier_phi_69_pred_4 = _3040;
                        frontier_phi_69_pred_5 = _3039;
                    }
                    _2711 = frontier_phi_69_pred;
                    _2709 = frontier_phi_69_pred_1;
                    _2707 = frontier_phi_69_pred_2;
                    _2705 = frontier_phi_69_pred_3;
                    _2703 = frontier_phi_69_pred_4;
                    _2701 = frontier_phi_69_pred_5;
                    uint _2846 = _2845 + 1u;
                    if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2839 = _2701;
                        _2840 = _2703;
                        _2841 = _2705;
                        _2842 = _2707;
                        _2843 = _2709;
                        _2844 = _2711;
                        _2845 = _2846;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2711;
                frontier_phi_57_58_ladder_1 = _2709;
                frontier_phi_57_58_ladder_2 = _2707;
                frontier_phi_57_58_ladder_3 = _2705;
                frontier_phi_57_58_ladder_4 = _2703;
                frontier_phi_57_58_ladder_5 = _2701;
            }
            else
            {
                frontier_phi_57_58_ladder = _2598;
                frontier_phi_57_58_ladder_1 = _2596;
                frontier_phi_57_58_ladder_2 = _2594;
                frontier_phi_57_58_ladder_3 = _2592;
                frontier_phi_57_58_ladder_4 = _2590;
                frontier_phi_57_58_ladder_5 = _2588;
            }
            _2700 = frontier_phi_57_58_ladder_5;
            _2702 = frontier_phi_57_58_ladder_4;
            _2704 = frontier_phi_57_58_ladder_3;
            _2706 = frontier_phi_57_58_ladder_2;
            _2708 = frontier_phi_57_58_ladder_1;
            _2710 = frontier_phi_57_58_ladder;
        }
        float _2715 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2495 = (_2715 * _2706) + _1932;
        _2497 = (_2715 * _2708) + _1934;
        _2499 = (_2715 * _2710) + _1936;
        _2501 = ((_2700 * _747) * _2715) + _2277;
        _2503 = ((_2702 * _748) * _2715) + _2279;
        _2505 = ((_2704 * _749) * _2715) + _2281;
    }
    else
    {
        _2495 = _1932;
        _2497 = _1934;
        _2499 = _1936;
        _2501 = _2277;
        _2503 = _2279;
        _2505 = _2281;
    }
    float _4366 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4377 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4388 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4399 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2523 = ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2495 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _761))) + ((_2501 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2497 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _761))) + ((_2503 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2499 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _761))) + ((_2505 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2533 = cbInstanceData._m0[_653 + 6u].w * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)));
    float _2538 = _550 / cbSceneParam._m0[86u].x;
    float _2539 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2553 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2555 = _2553.x;
    float _2556 = _2553.y;
    float _2557 = _2553.z;
    float _2558 = _2553.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2614 = _2613 / _484;
        float _2625 = _2614 * _535;
        float _2626 = _536 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2628 = _2614 * _537;
        float _2630 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2626;
        float _2638 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2801;
        if (abs((_2627 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2801 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2763 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _2801 = ((abs(_2638 / _2627) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2648 * _2772) - exp2(_2648 * _2773)) * _2761))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _2803 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2538, _2539, 1.0), 0.0);
        float _2812 = exp2((_2801 * (-1.44269502162933349609375)) * (1.0 - _2803.w));
        float _2813 = log2(_2812);
        float _2829 = log2(_2558);
        _2650 = (exp2(_2829 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].x)) * _2803.x) / cbSceneParam._m0[78u].x)) + _2555;
        _2652 = (exp2(_2829 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].y)) * _2803.y) / cbSceneParam._m0[78u].y)) + _2556;
        _2654 = (exp2(_2829 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].z)) * _2803.z) / cbSceneParam._m0[78u].z)) + _2557;
        _2656 = _2812 * _2558;
    }
    else
    {
        _2650 = _2555;
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
    }
    float _2668 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2669 = _2668 == 3.0;
    float _2670 = log2(_2656);
    float _2677 = exp2(_2670 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0)));
    float _2678 = exp2(_2670 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)));
    float _2679 = exp2(_2670 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)));
    float _2688 = (_2668 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2688 * (_2669 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2650)));
    SV_Target.y = _2688 * (_2669 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.z = _2688 * (_2669 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.w = _2533;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2533;
}


