#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _302.z;
    float _313 = exp2(log2(_307 * 22.0) * 260.0);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _329 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _339 = cbMtdParam._m0[10u].x * _329.x;
    float _340 = cbMtdParam._m0[10u].y * _329.y;
    float _341 = cbMtdParam._m0[10u].z * _329.z;
    vec4 _353 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _395 = (((((cbMtdParam._m0[9u].x * _353.x) - _339) * _315) + _339) * 4.55000019073486328125) * _387.x;
    float _397 = (((((cbMtdParam._m0[9u].y * _353.y) - _340) * _315) + _340) * 4.55000019073486328125) * _387.y;
    float _399 = (((((cbMtdParam._m0[9u].z * _353.z) - _341) * _315) + _341) * 4.55000019073486328125) * _387.z;
    float _400 = _387.w * _353.w;
    float _427 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _315) + cbMtdParam._m0[15u].y;
    vec4 _439 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _448 = cbMtdParam._m0[13u].y + _439.z;
    vec4 _460 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _477 = (((_315 * (_307 + (-0.5))) + 0.5) * 2.0) * ((((_460.z - _448) + cbMtdParam._m0[13u].x) * _315) + _448);
    float _481 = (_302.x * 2.0) + (-1.0);
    float _483 = (_302.y * 2.0) + (-1.0);
    float _484 = dot(vec2(_481, _483), vec2(_481, _483));
    float _3897 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    float _502 = ((((((_460.x - _441) * _315) + _441) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _481;
    float _503 = ((((((_460.y - _442) * _315) + _442) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _483;
    float _506 = fma(_489, _230, fma(_503, _222 * TANGENT.x, (_208 * _200) * _502));
    float _509 = fma(_489, _231, fma(_503, _222 * TANGENT.y, (_208 * _201) * _502));
    float _512 = fma(_489, _232, fma(_503, _222 * TANGENT.z, (_208 * _202) * _502));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3908 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _520 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _521 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _522 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _523 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _524 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _525 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _533 = cbMatDynParam._m0[9u].x * _522;
    float _534 = cbMatDynParam._m0[9u].y * _523;
    float _535 = cbMatDynParam._m0[9u].z * _524;
    float _543 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _544 = _543 * _287;
    float _545 = _543 * _288;
    float _546 = _543 * _289;
    float _547 = dot(vec3(_517, _518, _519), vec3(_544, _545, _546));
    float _553 = abs(exp2(log2(_547) * cbMatDynParam._m0[12u].x));
    float _554 = isnan(0.100000001490116119384765625) ? _553 : (isnan(_553) ? 0.100000001490116119384765625 : max(_553, 0.100000001490116119384765625));
    float _560 = ((isnan(0.699999988079071044921875) ? _554 : (isnan(_554) ? 0.699999988079071044921875 : min(_554, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _583 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3984 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3995 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _591 = dot(vec3(_517, _518, _519), vec3(0.0, -1.0, 0.0));
    float _4006 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _601 = (_594 * _522) * cbMatDynParam._m0[11u].x;
    float _603 = (_594 * _523) * cbMatDynParam._m0[11u].y;
    float _605 = (_594 * _524) * cbMatDynParam._m0[11u].z;
    float _612 = dot(vec3(_544, _545, _546), vec3(_517, _518, _519));
    float _615 = _612 * 2.0;
    float _625 = dot(vec3((-0.0) - (_544 - (_615 * _517)), (-0.0) - (_545 - (_615 * _518)), (-0.0) - (_546 - (_615 * _519))), vec3(0.0, -1.0, 0.0));
    float _4017 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _632 = exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 4.0);
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _667 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _669 = _667.w;
    float _687 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _690 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _693 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    vec4 _695 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _697 = _695.x;
    float _709 = (((_695.y - _521) + (_695.w * _521)) * cbMtdParam._m0[3u].x) + _521;
    float _726 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_697 * _697)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _734 = (((cbMatDynParam._m0[15u].x - _525) * cbMatDynParam._m0[15u].w) * _726) + _525;
    float _742 = ((_726 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _709)) + _709;
    uint _766 = uint(roundEven(NORMAL.w)) * 13u;
    uint _767 = _766 + 9u;
    uint _768 = _767 + uint(cbMatDynParam._m0[0u].w);
    float _774 = (cbMtdParam._m0[0u].x * _533) * cbInstanceData._m0[_768].x;
    float _775 = (cbMtdParam._m0[0u].y * _534) * cbInstanceData._m0[_768].y;
    float _776 = (cbMtdParam._m0[0u].z * _535) * cbInstanceData._m0[_768].z;
    float _4028 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    vec4 _780 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _785 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _796 = (((_785.x - _734) + (_785.w * _734)) * cbMtdParam._m0[3u].x) + _734;
    float _809 = (cbMtdParam._m0[3u].x * (((_777 * _669) - _777) + _780.x)) + _777;
    float _810 = (cbMtdParam._m0[3u].x * (((_778 * _669) - _778) + _780.y)) + _778;
    float _811 = (cbMtdParam._m0[3u].x * (((_779 * _669) - _779) + _780.z)) + _779;
    vec4 _812 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _825 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_734 * (_533 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_734 * (_534 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_734 * (_535 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _812.z;
    float _829 = _825 * cbMatDynParam._m0[13u].w;
    float _839 = (_829 * (cbMatDynParam._m0[13u].x - _809)) + _809;
    float _840 = (_829 * (cbMatDynParam._m0[13u].y - _810)) + _810;
    float _841 = (_829 * (cbMatDynParam._m0[13u].z - _811)) + _811;
    float _849 = ((_825 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _796)) + _796;
    float _850 = 1.0 - _849;
    float _851 = _850 * _839;
    float _852 = _850 * _840;
    float _853 = _850 * _841;
    float _857 = (_839 + (-0.039999999105930328369140625)) * _849;
    float _858 = (_840 + (-0.039999999105930328369140625)) * _849;
    float _859 = (_841 + (-0.039999999105930328369140625)) * _849;
    float _860 = _857 + 0.039999999105930328369140625;
    float _861 = _858 + 0.039999999105930328369140625;
    float _862 = _859 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _874 = _871.x * TEXCOORD_4;
    float _875 = _547 * 2.0;
    float _879 = (_875 * _517) - _544;
    float _880 = (_875 * _518) - _545;
    float _881 = (_875 * _519) - _546;
    float _882 = abs(_612);
    float _4061 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_742);
    float _896 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _902 = (1.0 - _896) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _903 = _896 * _884;
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _966 = fma(_939, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931));
        float _970 = fma(_939, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931));
        float _974 = fma(_939, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931));
        float _997 = _931 + _517;
        float _998 = _935 + _518;
        float _999 = _939 + _519;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _966;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _970;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _974;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_966 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_970 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_974 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_517, _518, _519), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4109 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_517, _518, _519), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4142 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_517, _518, _519), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4175 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_939, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _931));
        float _1284 = fma(_939, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _931));
        float _1288 = fma(_939, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _931));
        float _1311 = _931 + _517;
        float _1312 = _935 + _518;
        float _1313 = _939 + _519;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_517, _518, _519), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4238 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_517, _518, _519), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4271 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_517, _518, _519), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4304 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = _1240;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1252)) + _1252;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1253)) + _1253;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1254)) + _1254;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _879 * 0.5;
    float _1618 = _880 * 0.5;
    float _1619 = _881 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _742);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_939, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_939, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_939, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_881, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879));
        float _1744 = fma(_881, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879));
        float _1747 = fma(_881, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1775 = frontier_phi_16_14_ladder;
        }
        float _1950;
        if (_1744 > 0.0)
        {
            _1950 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1950 = frontier_phi_25_21_ladder;
        }
        float _2246;
        if (_1747 > 0.0)
        {
            _2246 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2246 = frontier_phi_37_32_ladder;
        }
        float _2248 = isnan(_1950) ? _1775 : (isnan(_1775) ? _1950 : min(_1775, _1950));
        float _2249 = isnan(_2246) ? _2248 : (isnan(_2248) ? _2246 : min(_2248, _2246));
        float _2253 = (_2249 * _1741) + _1730;
        float _2254 = (_2249 * _1744) + _1734;
        float _2255 = (_2249 * _1747) + _1738;
        float _2256 = _2249 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2256;
        float _2260 = _2256 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 > _2260) || ((_2254 < _2258) || ((_2253 < _2258) || (_2253 > _2260))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2255, cbModelParam._m0[9u].z, fma(_2254, cbModelParam._m0[9u].y, _2253 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2255, cbModelParam._m0[10u].z, fma(_2254, cbModelParam._m0[10u].y, _2253 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2255, cbModelParam._m0[11u].z, fma(_2254, cbModelParam._m0[11u].y, _2253 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_15_37_ladder = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2400.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2400.z * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_15_37_ladder_1;
        _1765 = frontier_phi_15_37_ladder;
        _1767 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_879, _880, _881), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _742);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_939, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_939, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_939, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_881, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879));
        float _1843 = fma(_881, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879));
        float _1846 = fma(_881, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879));
        float _1955;
        if (_1840 > 0.0)
        {
            _1955 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1955 = frontier_phi_27_23_ladder;
        }
        float _2273;
        if (_1843 > 0.0)
        {
            _2273 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2273 = frontier_phi_39_34_ladder;
        }
        float _2611;
        if (_1846 > 0.0)
        {
            _2611 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2611 = frontier_phi_49_46_ladder;
        }
        float _2613 = isnan(_2273) ? _1955 : (isnan(_1955) ? _2273 : min(_1955, _2273));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1840) + _1829;
        float _2619 = (_2614 * _1843) + _1833;
        float _2620 = (_2614 * _1846) + _1837;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_24_49_ladder = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_24_49_ladder_2;
        _1867 = frontier_phi_24_49_ladder_1;
        _1869 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_879, _880, _881), _1772);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1882 = (((_902 * _860) + _903) * _874) * ((cbModelParam._m0[1u].w * (_1865 - _1763)) + _1763);
    float _1884 = (((_902 * _861) + _903) * _874) * ((cbModelParam._m0[1u].w * (_1867 - _1765)) + _1765);
    float _1886 = (((_902 * _862) + _903) * _874) * ((cbModelParam._m0[1u].w * (_1869 - _1767)) + _1767);
    float _1889 = fma(_1886, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1886, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1886, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1933 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1937 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1942 = _1929 / _1941;
    float _1943 = _1933 / _1941;
    float _1944 = _1937 / _1941;
    float _2091;
    float _2092;
    float _2093;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1971 = ((uint(_1944 > cbSceneParam._m0[59u].y) + uint(_1944 > cbSceneParam._m0[59u].x)) + uint(_1944 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1972 = _1971 + 43u;
        uint _1980 = _1971 + 44u;
        uint _1988 = _1971 + 45u;
        uint _1996 = _1971 + 46u;
        float _2007 = fma(_1941, cbSceneParam._m0[_1972].w, fma(_1937, cbSceneParam._m0[_1972].z, fma(_1933, cbSceneParam._m0[_1972].y, _1929 * cbSceneParam._m0[_1972].x)));
        float _2011 = fma(_1941, cbSceneParam._m0[_1980].w, fma(_1937, cbSceneParam._m0[_1980].z, fma(_1933, cbSceneParam._m0[_1980].y, _1929 * cbSceneParam._m0[_1980].x)));
        float _2019 = fma(_1941, cbSceneParam._m0[_1996].w, fma(_1937, cbSceneParam._m0[_1996].z, fma(_1933, cbSceneParam._m0[_1996].y, _1929 * cbSceneParam._m0[_1996].x)));
        float _2024 = cbSceneParam._m0[33u].z * _2019;
        float _2026 = cbSceneParam._m0[33u].w * _2019;
        float _2029 = fma(_1941, cbSceneParam._m0[_1988].w, fma(_1937, cbSceneParam._m0[_1988].z, fma(_1933, cbSceneParam._m0[_1988].y, _1929 * cbSceneParam._m0[_1988].x))) / _2019;
        float _2077 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
        float _4430 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2084 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2007) / _2019, (_2026 + _2011) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 + _2007) / _2019, (_2011 - _2024) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2024) / _2019, (_2011 - _2026) / _2019), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 - _2026) / _2019, (_2024 + _2011) / _2019), _2029), 0.0)).x), vec4(0.25)));
        _2091 = 1.0 - (_2084 * cbSceneParam._m0[34u].x);
        _2092 = 1.0 - (_2084 * cbSceneParam._m0[34u].y);
        _2093 = 1.0 - (_2084 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2091 = 1.0;
        _2092 = 1.0;
        _2093 = 1.0;
    }
    float _2157;
    float _2159;
    float _2161;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2145 = fma(_1941, cbSceneParam._m0[63u].w, fma(_1937, cbSceneParam._m0[63u].z, fma(_1933, cbSceneParam._m0[63u].y, _1929 * cbSceneParam._m0[63u].x)));
        float _2146 = fma(_1941, cbSceneParam._m0[60u].w, fma(_1937, cbSceneParam._m0[60u].z, fma(_1933, cbSceneParam._m0[60u].y, _1929 * cbSceneParam._m0[60u].x))) / _2145;
        float _2147 = fma(_1941, cbSceneParam._m0[61u].w, fma(_1937, cbSceneParam._m0[61u].z, fma(_1933, cbSceneParam._m0[61u].y, _1929 * cbSceneParam._m0[61u].x))) / _2145;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2146 >= cbSceneParam._m0[64u].x) && (_2147 >= cbSceneParam._m0[64u].y)) && (_2146 <= cbSceneParam._m0[64u].z)) && (_2147 <= cbSceneParam._m0[64u].w))
        {
            float _2286 = fma(_1941, cbSceneParam._m0[62u].w, fma(_1937, cbSceneParam._m0[62u].z, fma(_1933, cbSceneParam._m0[62u].y, _1929 * cbSceneParam._m0[62u].x))) / _2145;
            float _2290 = isnan(cbSceneParam._m0[41u].w) ? _2286 : (isnan(_2286) ? cbSceneParam._m0[41u].w : max(_2286, cbSceneParam._m0[41u].w));
            float _2333 = (cbSceneParam._m0[33u].x - sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944))) * cbSceneParam._m0[33u].y;
            float _4446 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
            float _2340 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2146, cbSceneParam._m0[33u].w + _2147), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2146, _2147 - cbSceneParam._m0[33u].z), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].z, _2147 - cbSceneParam._m0[33u].w), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2146 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2147), _2290), 0.0)).x), vec4(0.25)));
            float _2344 = 1.0 - (_2340 * cbSceneParam._m0[34u].x);
            float _2345 = 1.0 - (_2340 * cbSceneParam._m0[34u].y);
            float _2346 = 1.0 - (_2340 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2345) ? _2092 : (isnan(_2092) ? _2345 : min(_2092, _2345));
            frontier_phi_36_35_ladder_1 = isnan(_2346) ? _2093 : (isnan(_2093) ? _2346 : min(_2093, _2346));
            frontier_phi_36_35_ladder_2 = isnan(_2344) ? _2091 : (isnan(_2091) ? _2344 : min(_2091, _2344));
        }
        else
        {
            frontier_phi_36_35_ladder = _2092;
            frontier_phi_36_35_ladder_1 = _2093;
            frontier_phi_36_35_ladder_2 = _2091;
        }
        _2157 = frontier_phi_36_35_ladder_2;
        _2159 = frontier_phi_36_35_ladder;
        _2161 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2157 = _2091;
        _2159 = _2092;
        _2161 = _2093;
    }
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_766 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _874 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2205 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2209 = _2168 | 1u;
    float _2220 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_517, _518, _519));
    float _2223 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_517, _518, _519));
    float _4482 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _4493 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2228 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2230 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2237 = ((cbLight._m0[_2185].x * _2191) * _2230) + (((cbLight._m0[_2195].x * _2157) * _2205) * _2228);
    float _2238 = ((_2191 * cbLight._m0[_2185].y) * _2230) + (((cbLight._m0[_2195].y * _2159) * _2205) * _2228);
    float _2239 = ((_2191 * cbLight._m0[_2185].z) * _2230) + (((cbLight._m0[_2195].z * _2161) * _2205) * _2228);
    uvec4 _2243 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2245 = _2243.x == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2245)
    {
        _2347 = _2237;
        _2349 = _2238;
        _2351 = _2239;
    }
    else
    {
        uint _2355 = _2168 + 6u;
        float _2371 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4504 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2374 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2347 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2237;
        _2349 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2238;
        _2351 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2239;
    }
    bool _2354 = _2243.y == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2354)
    {
        _2409 = _2347;
        _2411 = _2349;
        _2413 = _2351;
    }
    else
    {
        uint _2582 = _2168 + 7u;
        float _2598 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_517, _518, _519)) * 0.5) + 0.5;
        float _2599 = _2598 * _2598;
        float _4520 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2600 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2601 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2409 = (((cbLight._m0[_2582].x * 0.3183098733425140380859375) * _2600) * _2601) + _2347;
        _2411 = (((cbLight._m0[_2582].y * 0.3183098733425140380859375) * _2600) * _2601) + _2349;
        _2413 = (((cbLight._m0[_2582].z * 0.3183098733425140380859375) * _2600) * _2601) + _2351;
    }
    uint _2416 = _2168 + 8u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _742) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2168].x + _544;
    float _2432 = cbLight._m0[_2168].y + _545;
    float _2433 = cbLight._m0[_2168].z + _546;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2168].xyz));
    float _4536 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _2445 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2446 = dot(vec3(_517, _518, _519), vec3(_2438, _2439, _2440));
    float _4558 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2438, _2439, _2440));
    float _4569 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2430 * _2430;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2467 = 0.959999978542327880859375 - _857;
    float _2469 = 0.959999978542327880859375 - _858;
    float _2470 = 0.959999978542327880859375 - _859;
    float _2477 = 1.0 - _2430;
    float _2488 = (0.5 / (((_2445 * ((_2444 * _2477) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2477) + _2430) * _2444))) * _2444;
    float _4580 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    uint _2504 = _2168 + 9u;
    float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _742) * 0.949999988079071044921875);
    float _2516 = _2515 * _2515;
    float _2517 = cbLight._m0[_2209].x + _544;
    float _2518 = cbLight._m0[_2209].y + _545;
    float _2519 = cbLight._m0[_2209].z + _546;
    float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
    float _2524 = _2523 * _2517;
    float _2525 = _2523 * _2518;
    float _2526 = _2523 * _2519;
    float _2527 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2209].xyz));
    float _4591 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2531 = dot(vec3(_517, _518, _519), vec3(_2524, _2525, _2526));
    float _4602 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2524, _2525, _2526));
    float _4613 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2516 * _2516;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2557 = 1.0 - _2516;
    float _2567 = (0.5 / (((_2445 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2557) + _2516) * _2530))) * _2530;
    float _4624 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    float _2579 = (((((_2550 * _2467) + _860) * cbLight._m0[_2504].x) * _2569) * _2191) + ((((cbLight._m0[_2416].x * _2157) * ((_2466 * _2467) + _860)) * _2490) * _2205);
    float _2580 = (((((_2550 * _2469) + _861) * cbLight._m0[_2504].y) * _2569) * _2191) + ((((cbLight._m0[_2416].y * _2159) * ((_2466 * _2469) + _861)) * _2490) * _2205);
    float _2581 = (((((_2550 * _2470) + _862) * cbLight._m0[_2504].z) * _2569) * _2191) + ((((cbLight._m0[_2416].z * _2161) * ((_2466 * _2470) + _862)) * _2490) * _2205);
    float _2637;
    float _2639;
    float _2641;
    if (_2245)
    {
        _2637 = _2579;
        _2639 = _2580;
        _2641 = _2581;
    }
    else
    {
        uint _2643 = _2168 + 2u;
        uint _2647 = _2168 + 10u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _742) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _544;
        float _2664 = cbLight._m0[_2643].y + _545;
        float _2665 = cbLight._m0[_2643].z + _546;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2643].xyz));
        float _4635 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2677 = dot(vec3(_517, _518, _519), vec3(_2670, _2671, _2672));
        float _4646 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4657 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2703 = 1.0 - _2662;
        float _2713 = (0.5 / (((_2445 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2703) + _2662) * _2676))) * _2676;
        float _4668 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2637 = (((((_2696 * _2467) + _860) * cbLight._m0[_2647].x) * _2715) * _2716) + _2579;
        _2639 = (((((_2696 * _2469) + _861) * cbLight._m0[_2647].y) * _2715) * _2716) + _2580;
        _2641 = (((((_2696 * _2470) + _862) * cbLight._m0[_2647].z) * _2715) * _2716) + _2581;
    }
    float _2747;
    float _2749;
    float _2751;
    if (_2354)
    {
        _2747 = _2637;
        _2749 = _2639;
        _2751 = _2641;
    }
    else
    {
        uint _2758 = _2168 + 3u;
        uint _2762 = _2168 + 11u;
        float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2758].w)) * _742) * 0.949999988079071044921875);
        float _2777 = _2776 * _2776;
        float _2778 = cbLight._m0[_2758].x + _544;
        float _2779 = cbLight._m0[_2758].y + _545;
        float _2780 = cbLight._m0[_2758].z + _546;
        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
        float _2785 = _2784 * _2778;
        float _2786 = _2784 * _2779;
        float _2787 = _2784 * _2780;
        float _2788 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_2758].xyz));
        float _4684 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2791 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2792 = dot(vec3(_517, _518, _519), vec3(_2785, _2786, _2787));
        float _4695 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2796 = dot(vec3(cbLight._m0[_2758].xyz), vec3(_2785, _2786, _2787));
        float _4706 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2800 = _2777 * _2777;
        float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
        float _2811 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2818 = 1.0 - _2777;
        float _2828 = (0.5 / (((_2445 * ((_2791 * _2818) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2818) + _2777) * _2791))) * _2791;
        float _4717 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2830 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
        float _2831 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2747 = (((((_2811 * _2467) + _860) * cbLight._m0[_2762].x) * _2830) * _2831) + _2637;
        _2749 = (((((_2811 * _2469) + _861) * cbLight._m0[_2762].y) * _2830) * _2831) + _2639;
        _2751 = (((((_2811 * _2470) + _862) * cbLight._m0[_2762].z) * _2830) * _2831) + _2641;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2166.y == 0u)
    {
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.x;
        uint _2864 = uint((float(_2852.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2853))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2853)));
        float _2874 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2875 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        uint _2878 = uint(isnan(14.0) ? _2875 : (isnan(_2875) ? 14.0 : min(_2875, 14.0)));
        uvec4 _2883 = texelFetch(g_lightClusterGridBuffer, int(((_2878 << 2u) + (_2864 << 6u)) >> 2u));
        uint _2884 = _2883.x;
        uint _2885 = _2852.z;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((((1u << ((_2885 >> 4u) & 15u)) + 4294967295u) & _2884) == 0u) || ((_2885 & 240u) == 0u))
        {
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
        }
        else
        {
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            uint _3148 = 0u;
            uint _3157;
            bool _3158;
            for (;;)
            {
                _3157 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3148 << 2u)) >> 2u)).x;
                _3158 = _3157 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3158)
                {
                    frontier_phi_68_pred = _3147;
                    frontier_phi_68_pred_1 = _3146;
                    frontier_phi_68_pred_2 = _3145;
                    frontier_phi_68_pred_3 = _3143;
                    frontier_phi_68_pred_4 = _3142;
                    frontier_phi_68_pred_5 = _3144;
                }
                else
                {
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    uint _3272;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3157;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    for (;;)
                    {
                        uint _3276 = uint(findLSB(_3272)) + (_3148 << 5u);
                        uint _3273 = (_3272 + 4294967295u) & _3272;
                        uint _3278 = _3276 * 48u;
                        vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3298 = (_3276 * 48u) + 4u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3317 = (_3276 * 48u) + 8u;
                        vec3 _3328 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x));
                        float _3332 = _3292.x - _1942;
                        float _3333 = _3292.y - _1943;
                        float _3334 = _3292.z - _1944;
                        float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                        float _3338 = inversesqrt(_3335);
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3342 = dot(vec3(_687, _690, _693), vec3(_3339, _3340, _3341));
                        float _3347 = 1.0 - (_3335 * _3292.w);
                        float _4743 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3348 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3349 = sqrt(_3335) * _3311.w;
                        float _3352 = 1.39999997615814208984375 / (_3349 + 1.39999997615814208984375);
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3342) + _3353;
                        float _3359 = _3349 * _3349;
                        float _3362 = ((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3348) / ((_3359 * 0.699999988079071044921875) + 1.0);
                        float _3366 = (-0.0) - _1942;
                        float _3367 = (-0.0) - _1943;
                        float _3368 = (-0.0) - _1944;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                        float _3383 = 1.0 - _884;
                        float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                        float _3391 = _3390 * _3390;
                        float _3392 = _3391 * _3391;
                        float _3393 = _3373 + _3339;
                        float _3394 = _3374 + _3340;
                        float _3395 = _3375 + _3341;
                        float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                        float _3403 = dot(vec3(_687, _690, _693), vec3(_3373, _3374, _3375));
                        float _4759 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3406 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3407 = dot(vec3(_687, _690, _693), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                        float _4770 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                        float _3415 = _3352 * _3391;
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3342) + _3416;
                        float _4781 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3421 = 1.0 - _3391;
                        float _3431 = (0.5 / (((_3420 * ((_3406 * _3421) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3391) * _3406))) * _3420;
                        float _4792 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3442 = (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125))) * _3348;
                        _3201 = (_3362 * _3311.x) + _3269;
                        _3202 = (_3362 * _3311.y) + _3270;
                        _3203 = (_3362 * _3311.z) + _3271;
                        _3198 = (_3442 * _3328.x) + _3266;
                        _3199 = (_3442 * _3328.y) + _3267;
                        _3200 = (_3442 * _3328.z) + _3268;
                        if (_3273 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3273;
                        }
                    }
                    frontier_phi_68_pred = _3203;
                    frontier_phi_68_pred_1 = _3202;
                    frontier_phi_68_pred_2 = _3201;
                    frontier_phi_68_pred_3 = _3199;
                    frontier_phi_68_pred_4 = _3198;
                    frontier_phi_68_pred_5 = _3200;
                }
                _3000 = frontier_phi_68_pred;
                _2998 = frontier_phi_68_pred_1;
                _2996 = frontier_phi_68_pred_2;
                _2992 = frontier_phi_68_pred_3;
                _2990 = frontier_phi_68_pred_4;
                _2994 = frontier_phi_68_pred_5;
                uint _3149 = _3148 + 1u;
                if (_3149 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3142 = _2990;
                    _3143 = _2992;
                    _3144 = _2994;
                    _3145 = _2996;
                    _3146 = _2998;
                    _3147 = _3000;
                    _3148 = _3149;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
        }
        uvec4 _3003 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3004 = _3003.z;
        uint _3006 = (_3004 >> 8u) & 15u;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((4294967295u << _3006) & _2884) == 0u)
        {
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
            _3118 = _2997;
            _3120 = _2999;
        }
        else
        {
            float _3135 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float _3136 = _3135 * _1942;
            float _3137 = _3135 * _1943;
            float _3138 = _3135 * _1944;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3006 < ((_3004 >> 12u) & 15u))
            {
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3249 = _2989;
                float _3250 = _2991;
                float _3251 = _2993;
                float _3252 = _2995;
                float _3253 = _2997;
                float _3254 = _2999;
                uint _3255 = _3006;
                uint _3264;
                bool _3265;
                for (;;)
                {
                    _3264 = texelFetch(g_lightClassification, int((((_2878 << 5u) + (_2864 << 9u)) + (_3255 << 2u)) >> 2u)).x;
                    _3265 = _3264 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3265)
                    {
                        frontier_phi_74_pred = _3251;
                        frontier_phi_74_pred_1 = _3250;
                        frontier_phi_74_pred_2 = _3249;
                        frontier_phi_74_pred_3 = _3254;
                        frontier_phi_74_pred_4 = _3253;
                        frontier_phi_74_pred_5 = _3252;
                    }
                    else
                    {
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3460 = _3249;
                        float _3461 = _3250;
                        float _3462 = _3251;
                        float _3463 = _3252;
                        float _3464 = _3253;
                        float _3465 = _3254;
                        uint _3466 = _3264;
                        uint _3467;
                        vec4 _3492;
                        float _3493;
                        vec4 _3508;
                        vec3 _3520;
                        vec4 _3535;
                        vec4 _3551;
                        float _3598;
                        bool _3599;
                        for (;;)
                        {
                            uint _3477 = ((_3255 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3466));
                            _3467 = (_3466 + 4294967295u) & _3466;
                            uint _3479 = _3477 * 40u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            _3493 = _3492.w;
                            uint _3495 = (_3477 * 40u) + 4u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3477 * 40u) + 8u;
                            _3520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x));
                            uint _3522 = (_3477 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3538 = (_3477 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3554 = (_3477 * 40u) + 24u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3573 = (_3477 * 40u) + 28u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3598 = fma(_1944, _3586.z, fma(_1943, _3586.y, _3586.x * _1942)) + _3586.w;
                            _3599 = !((fma(_1944, _3567.z, fma(_1943, _3567.y, _3567.x * _1942)) + _3567.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3599)
                            {
                                float _3626 = _3492.x - _1942;
                                float _3627 = _3492.y - _1943;
                                float _3628 = _3492.z - _1944;
                                float _3629 = dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628));
                                float _3632 = inversesqrt(_3629);
                                float _3633 = _3632 * _3626;
                                float _3634 = _3632 * _3627;
                                float _3635 = _3632 * _3628;
                                float _3639 = 1.0 - (_3629 / (_3493 * _3493));
                                float _4803 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3644 = sqrt(_3629) * _3508.w;
                                float _3646 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                                float _3647 = _3646 * _3646;
                                float _3650 = ((1.0 - _3647) * dot(vec3(_3633, _3634, _3635), vec3(_687, _690, _693))) + _3647;
                                float _3653 = _3644 * _3644;
                                float _3657 = (fma(_1944, _3535.z, fma(_1943, _3535.y, _3535.x * _1942)) + _3535.w) / _3598;
                                float _3658 = (fma(_1944, _3551.z, fma(_1943, _3551.y, _3551.x * _1942)) + _3551.w) / _3598;
                                float _3662 = 1.0 - dot(vec2(_3657, _3658), vec2(_3657, _3658));
                                float _4819 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3664 = _3663 * (((isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0))) * _3640) / ((_3653 * 0.699999988079071044921875) + 1.0));
                                float _3676 = exp2(log2(1.0 / ((_3653 * 3.5) + 5.0)) * 0.25);
                                float _3677 = 1.0 - _884;
                                float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                                float _3685 = _3684 * _3684;
                                float _3686 = _3685 * _3685;
                                float _3687 = _3633 - _3136;
                                float _3688 = _3634 - _3137;
                                float _3689 = _3635 - _3138;
                                float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                                float _3697 = dot(vec3(_687, _690, _693), vec3((-0.0) - _3136, (-0.0) - _3137, (-0.0) - _3138));
                                float _4830 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3701 = dot(vec3(_687, _690, _693), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                                float _4841 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                                float _3709 = _3646 * _3685;
                                float _3710 = _3709 * _3709;
                                float _3716 = ((1.0 - _3710) * dot(vec3(_687, _690, _693), vec3(_3633, _3634, _3635))) + _3710;
                                float _4852 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3718 = 1.0 - _3685;
                                float _3728 = (0.5 / (((_3717 * ((_3700 * _3718) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3685) * _3700))) * _3717;
                                float _4863 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3738 = (_3663 * _3640) * (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3708 * _3708) * ((_3653 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3738 * _3520.z;
                                frontier_phi_80_pred_1 = _3738 * _3520.y;
                                frontier_phi_80_pred_2 = _3738 * _3520.x;
                                frontier_phi_80_pred_3 = _3664 * _3508.z;
                                frontier_phi_80_pred_4 = _3664 * _3508.y;
                                frontier_phi_80_pred_5 = _3664 * _3508.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_80_pred;
                            _3743 = frontier_phi_80_pred_1;
                            _3742 = frontier_phi_80_pred_2;
                            _3747 = frontier_phi_80_pred_3;
                            _3746 = frontier_phi_80_pred_4;
                            _3745 = frontier_phi_80_pred_5;
                            _3450 = _3745 + _3463;
                            _3451 = _3746 + _3464;
                            _3452 = _3747 + _3465;
                            _3447 = _3742 + _3460;
                            _3448 = _3743 + _3461;
                            _3449 = _3744 + _3462;
                            if (_3467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3467;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3449;
                        frontier_phi_74_pred_1 = _3448;
                        frontier_phi_74_pred_2 = _3447;
                        frontier_phi_74_pred_3 = _3452;
                        frontier_phi_74_pred_4 = _3451;
                        frontier_phi_74_pred_5 = _3450;
                    }
                    _3115 = frontier_phi_74_pred;
                    _3113 = frontier_phi_74_pred_1;
                    _3111 = frontier_phi_74_pred_2;
                    _3121 = frontier_phi_74_pred_3;
                    _3119 = frontier_phi_74_pred_4;
                    _3117 = frontier_phi_74_pred_5;
                    uint _3256 = _3255 + 1u;
                    if (_3256 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3249 = _3111;
                        _3250 = _3113;
                        _3251 = _3115;
                        _3252 = _3117;
                        _3253 = _3119;
                        _3254 = _3121;
                        _3255 = _3256;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3119;
                frontier_phi_62_63_ladder_1 = _3117;
                frontier_phi_62_63_ladder_2 = _3115;
                frontier_phi_62_63_ladder_3 = _3121;
                frontier_phi_62_63_ladder_4 = _3113;
                frontier_phi_62_63_ladder_5 = _3111;
            }
            else
            {
                frontier_phi_62_63_ladder = _2997;
                frontier_phi_62_63_ladder_1 = _2995;
                frontier_phi_62_63_ladder_2 = _2993;
                frontier_phi_62_63_ladder_3 = _2999;
                frontier_phi_62_63_ladder_4 = _2991;
                frontier_phi_62_63_ladder_5 = _2989;
            }
            _3110 = frontier_phi_62_63_ladder_5;
            _3112 = frontier_phi_62_63_ladder_4;
            _3114 = frontier_phi_62_63_ladder_2;
            _3116 = frontier_phi_62_63_ladder_1;
            _3118 = frontier_phi_62_63_ladder;
            _3120 = frontier_phi_62_63_ladder_3;
        }
        float _3125 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2896 = (_3125 * _3116) + _2409;
        _2898 = (_3125 * _3118) + _2411;
        _2900 = (_3125 * _3120) + _2413;
        _2902 = ((_3110 * _860) * _3125) + _2747;
        _2904 = ((_3112 * _861) * _3125) + _2749;
        _2906 = ((_3114 * _862) * _3125) + _2751;
    }
    else
    {
        _2896 = _2409;
        _2898 = _2411;
        _2900 = _2413;
        _2902 = _2747;
        _2904 = _2749;
        _2906 = _2751;
    }
    uint _2912 = _767 + uint(cbMatDynParam._m0[0u].w);
    float _2918 = cbInstanceData._m0[_2912].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _560) + cbMatDynParam._m0[7u].x) + (((_601 - (_601 * _525)) + (cbMatDynParam._m0[11u].x * _632)) * cbMatDynParam._m0[9u].x));
    float _2919 = cbInstanceData._m0[_2912].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _560) + cbMatDynParam._m0[7u].y) + (((_603 - (_603 * _525)) + (cbMatDynParam._m0[11u].y * _632)) * cbMatDynParam._m0[9u].y));
    float _2920 = cbInstanceData._m0[_2912].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _560) + cbMatDynParam._m0[7u].z) + (((_605 - (_605 * _525)) + (cbMatDynParam._m0[11u].z * _632)) * cbMatDynParam._m0[9u].z));
    float _4879 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4890 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4901 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4912 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _2938 = (((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2896 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _874))) + ((_2902 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1672)) * cbPerFrame._m0[3u].x)) + _2918;
    float _2940 = (_2919 + ((_2904 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1672)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2898 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _874)));
    float _2942 = (_2920 + ((_2906 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1672)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2900 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _874)));
    float _2950 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) - _587) * _560) + _587));
    float _2955 = cbInstanceData._m0[_766 + 6u].w * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)));
    float _2960 = _664 / cbSceneParam._m0[86u].x;
    float _2961 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2975 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2977 = _2975.x;
    float _2978 = _2975.y;
    float _2979 = _2975.z;
    float _2980 = _2975.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _3014 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _3015 = _3014 / _658;
        float _3026 = _3015 * _287;
        float _3027 = _288 * _3015;
        float _3028 = (-0.0) - _3027;
        float _3029 = _3015 * _289;
        float _3031 = (cbSceneParam._m0[77u].w * _3028) / _3014;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3027;
        float _3039 = sqrt(((_3026 * _3026) + (_3027 * _3027)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3014)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3211;
        if (abs((_3028 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3211 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3171 = 1.0 / cbSceneParam._m0[80u].x;
            float _3172 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3173 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            _3211 = ((abs(_3039 / _3028) * cbSceneParam._m0[80u].y) * ((((_3182 - _3183) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))))) * _3171)) - ((exp2(_3049 * _3182) - exp2(_3049 * _3183)) * _3171))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3213 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, 1.0), 0.0);
        float _3222 = exp2((_3211 * (-1.44269502162933349609375)) * (1.0 - _3213.w));
        float _3223 = log2(_3222);
        float _3239 = log2(_2980);
        _3051 = (exp2(_3239 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3223 * cbSceneParam._m0[78u].x)) * _3213.x) / cbSceneParam._m0[78u].x)) + _2977;
        _3053 = (exp2(_3239 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3223 * cbSceneParam._m0[78u].y)) * _3213.y) / cbSceneParam._m0[78u].y)) + _2978;
        _3055 = (exp2(_3239 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3223 * cbSceneParam._m0[78u].z)) * _3213.z) / cbSceneParam._m0[78u].z)) + _2979;
        _3057 = _3222 * _2980;
    }
    else
    {
        _3051 = _2977;
        _3053 = _2978;
        _3055 = _2979;
        _3057 = _2980;
    }
    float _3069 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3070 = _3069 == 3.0;
    float _3071 = log2(_3057);
    float _3075 = exp2(_3071 * cbSceneParam._m0[78u].x);
    float _3076 = exp2(_3071 * cbSceneParam._m0[78u].y);
    float _3077 = exp2(_3071 * cbSceneParam._m0[78u].z);
    float _3078 = _3075 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)));
    float _3079 = _3076 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0)));
    float _3080 = _3077 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)));
    float _3089 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3089 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
    SV_Target.y = _3089 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
    SV_Target.z = _3089 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
    SV_Target.w = _2955;
    SV_Target_1.x = ((_2950 * _2918) * _3075) * _3089;
    SV_Target_1.y = ((_2950 * _2919) * _3076) * _3089;
    SV_Target_1.z = ((_2950 * _2920) * _3077) * _3089;
    SV_Target_1.w = _2955;
}


