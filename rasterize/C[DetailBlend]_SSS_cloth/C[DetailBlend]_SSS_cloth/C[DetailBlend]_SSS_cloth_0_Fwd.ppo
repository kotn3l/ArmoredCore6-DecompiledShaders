#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1053;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _238 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _255 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _278 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _287 = ((_255.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _278.x;
    float _290 = ((_255.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _278.y;
    float _293 = ((_255.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _278.z;
    float _294 = _278.w * _255.w;
    float _314 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    vec4 _326 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _338 = (_238.z * 2.0) * (cbMtdParam._m0[13u].x + _326.z);
    float _342 = (_238.x * 2.0) + (-1.0);
    float _344 = (_238.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3389 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _351 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    float _358 = (((_326.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _342;
    float _359 = (((_326.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _344;
    float _362 = fma(_351, _222, fma(_359, _214 * TANGENT.x, (_200 * _192) * _358));
    float _365 = fma(_351, _223, fma(_359, _214 * TANGENT.y, (_200 * _193) * _358));
    float _368 = fma(_351, _224, fma(_359, _214 * TANGENT.z, (_200 * _194) * _358));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _373 = _372 * _362;
    float _374 = _372 * _365;
    float _375 = _372 * _368;
    float _3400 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _376 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _377 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _378 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _379 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _380 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _381 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _397 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _440 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _450 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _440);
    float _451 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _440);
    float _452 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _440);
    float _456 = inversesqrt(dot(vec3(_450, _451, _452), vec3(_450, _451, _452)));
    float _457 = _450 * _456;
    float _458 = _451 * _456;
    float _459 = _452 * _456;
    float _465 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _466 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _468 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _470 = _468.w;
    float _490 = fma(_375, cbSceneParam._m0[5u].z, fma(_374, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _373));
    float _493 = fma(_375, cbSceneParam._m0[6u].z, fma(_374, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _373));
    float _496 = fma(_375, cbSceneParam._m0[7u].z, fma(_374, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _373));
    vec4 _498 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _500 = _498.x;
    float _512 = (((_498.y - _377) + (_498.w * _377)) * cbMtdParam._m0[3u].x) + _377;
    float _529 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_500 * _500)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _538 = (((cbMatDynParam._m0[15u].x - _381) * cbMatDynParam._m0[15u].w) * _529) + _381;
    float _546 = ((_529 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _512)) + _512;
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = (_570 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * _378) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * _379) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * _380) * cbInstanceData._m0[_572].z;
    float _3466 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _584 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _589 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _600 = (((_589.x - _538) + (_589.w * _538)) * cbMtdParam._m0[3u].x) + _538;
    float _613 = (cbMtdParam._m0[3u].x * (((_581 * _470) - _581) + _584.x)) + _581;
    float _614 = (cbMtdParam._m0[3u].x * (((_582 * _470) - _582) + _584.y)) + _582;
    float _615 = (cbMtdParam._m0[3u].x * (((_583 * _470) - _583) + _584.z)) + _583;
    vec4 _616 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _629 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_538 * (_378 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_538 * (_379 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_538 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _616.z;
    float _633 = _629 * cbMatDynParam._m0[13u].w;
    float _643 = (_633 * (cbMatDynParam._m0[13u].x - _613)) + _613;
    float _644 = (_633 * (cbMatDynParam._m0[13u].y - _614)) + _614;
    float _645 = (_633 * (cbMatDynParam._m0[13u].z - _615)) + _615;
    float _653 = ((_629 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _600)) + _600;
    float _654 = 1.0 - _653;
    float _655 = _654 * _643;
    float _656 = _654 * _644;
    float _657 = _654 * _645;
    float _661 = (_643 + (-0.039999999105930328369140625)) * _653;
    float _662 = (_644 + (-0.039999999105930328369140625)) * _653;
    float _663 = (_645 + (-0.039999999105930328369140625)) * _653;
    float _664 = _661 + 0.039999999105930328369140625;
    float _665 = _662 + 0.039999999105930328369140625;
    float _666 = _663 + 0.039999999105930328369140625;
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _465, cbSceneParam._m0[86u].y * _466));
    float _678 = _675.x * TEXCOORD_4;
    float _679 = dot(vec3(_373, _374, _375), vec3(_457, _458, _459));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _373) - _457;
    float _687 = (_682 * _374) - _458;
    float _688 = (_682 * _375) - _459;
    float _692 = abs(dot(vec3(_457, _458, _459), vec3(_373, _374, _375)));
    float _3499 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_546);
    float _707 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _713 = (1.0 - _707) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _714 = _707 * _694;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1052;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _777 = fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742));
        float _781 = fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742));
        float _785 = fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742));
        float _810 = _742 + _373;
        float _811 = _746 + _374;
        float _812 = _750 + _375;
        float _822 = fma(_812, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _810)) - _777;
        float _823 = fma(_812, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _810)) - _781;
        float _824 = fma(_812, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _810)) - _785;
        float _828 = inversesqrt(dot(vec3(_822, _823, _824), vec3(_822, _823, _824)));
        float _841 = ((_828 * _822) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_777 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _842 = ((_828 * _823) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_781 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_828 * _824) / cbModelParam._m0[34u].z) + ((((((_785 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_841, _842, _843), 0.0);
        float _880 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_846.x + (-0.5));
        float _882 = _880 * (_846.y + (-0.5));
        float _883 = _880 * (_846.z + (-0.5));
        float _890 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_853.x + (-0.5));
        float _892 = _890 * (_853.y + (-0.5));
        float _893 = _890 * (_853.z + (-0.5));
        float _900 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_860.x + (-0.5));
        float _902 = _900 * (_860.y + (-0.5));
        float _903 = _900 * (_860.z + (-0.5));
        float _910 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_867.x + (-0.5));
        float _912 = _910 * (_867.y + (-0.5));
        float _913 = _910 * (_867.z + (-0.5));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = _881 * 0.5;
        float _918 = _891 * 0.5;
        float _919 = _901 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _934 = (dot(vec3(_373, _374, _375), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _944 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3547 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_946 + 1.0))) + _951) * _914;
        float _961 = _882 * 0.5;
        float _962 = _892 * 0.5;
        float _963 = _902 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _977 = (dot(vec3(_373, _374, _375), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _986 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3580 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_988 + 1.0))) + _993) * _915;
        float _1003 = _883 * 0.5;
        float _1004 = _893 * 0.5;
        float _1005 = _903 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_373, _374, _375), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3613 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1030 + 1.0))) + _1035) * _916;
        _1052 = _883;
        _1054 = _882;
        _1055 = _881;
        _1056 = _893;
        _1057 = _892;
        _1058 = _891;
        _1059 = _903;
        _1060 = _902;
        _1061 = _901;
        _1062 = _916;
        _1063 = _915;
        _1064 = _914;
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
    }
    else
    {
        _1052 = _1053;
        _1054 = _1053;
        _1055 = _1053;
        _1056 = _1053;
        _1057 = _1053;
        _1058 = _1053;
        _1059 = _1053;
        _1060 = _1053;
        _1061 = _1053;
        _1062 = _1053;
        _1063 = _1053;
        _1064 = _1053;
        _1065 = 0.0;
        _1066 = 0.0;
        _1067 = 0.0;
    }
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1093 = fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742));
        float _1097 = fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742));
        float _1101 = fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742));
        float _1124 = _742 + _373;
        float _1125 = _746 + _374;
        float _1126 = _750 + _375;
        float _1136 = fma(_1126, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1093 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1097 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[35u].z) + ((((((_1101 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1192 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1159.x + (-0.5));
        float _1194 = _1192 * (_1159.y + (-0.5));
        float _1195 = _1192 * (_1159.z + (-0.5));
        float _1202 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1166.x + (-0.5));
        float _1204 = _1202 * (_1166.y + (-0.5));
        float _1205 = _1202 * (_1166.z + (-0.5));
        float _1212 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1173.x + (-0.5));
        float _1214 = _1212 * (_1173.y + (-0.5));
        float _1215 = _1212 * (_1173.z + (-0.5));
        float _1222 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1180.x + (-0.5));
        float _1224 = _1222 * (_1180.y + (-0.5));
        float _1225 = _1222 * (_1180.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_373, _374, _375), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3676 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1256 + 1.0))) + _1261) * _1226;
        float _1271 = _1194 * 0.5;
        float _1272 = _1204 * 0.5;
        float _1273 = _1214 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_373, _374, _375), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3709 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1298 + 1.0))) + _1303) * _1227;
        float _1313 = _1195 * 0.5;
        float _1314 = _1205 * 0.5;
        float _1315 = _1215 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_373, _374, _375), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3742 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1340 + 1.0))) + _1345) * _1228;
        _1362 = _1195;
        _1363 = _1194;
        _1364 = _1193;
        _1365 = _1205;
        _1366 = _1204;
        _1367 = _1203;
        _1368 = _1215;
        _1369 = _1214;
        _1370 = _1213;
        _1371 = _1228;
        _1372 = _1227;
        _1373 = _1226;
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1053;
        _1363 = _1053;
        _1364 = _1053;
        _1365 = _1053;
        _1366 = _1053;
        _1367 = _1053;
        _1368 = _1053;
        _1369 = _1053;
        _1370 = _1053;
        _1371 = _1053;
        _1372 = _1053;
        _1373 = _1053;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1066)) + _1066;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1067)) + _1067;
    float _1409 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1386));
    float _1430 = _686 * 0.5;
    float _1431 = _687 * 0.5;
    float _1432 = _688 * 0.5;
    float _1433 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1436 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1439 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1446 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1052, _1056, _1059, _1062));
        float _1450 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1454 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1461 = dot(vec4(cbModelParam._m0[39u]), vec4(_1430, _1431, _1432, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1430, _1431, _1432, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _546);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1543 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1547 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1551 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1554 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1557 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1560 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1588;
        if (_1554 > 0.0)
        {
            _1588 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1588 = frontier_phi_16_14_ladder;
        }
        float _1796;
        if (_1557 > 0.0)
        {
            _1796 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1796 = frontier_phi_25_21_ladder;
        }
        float _2050;
        if (_1560 > 0.0)
        {
            _2050 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2050 = frontier_phi_37_32_ladder;
        }
        float _2052 = isnan(_1796) ? _1588 : (isnan(_1588) ? _1796 : min(_1588, _1796));
        float _2053 = isnan(_2050) ? _2052 : (isnan(_2052) ? _2050 : min(_2052, _2050));
        float _2057 = (_2053 * _1554) + _1543;
        float _2058 = (_2053 * _1557) + _1547;
        float _2059 = (_2053 * _1560) + _1551;
        float _2060 = _2053 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2060;
        float _2064 = _2060 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 > _2064) || ((_2058 < _2062) || ((_2057 < _2062) || (_2057 > _2064))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2187 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2059, cbModelParam._m0[9u].z, fma(_2058, cbModelParam._m0[9u].y, _2057 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2059, cbModelParam._m0[10u].z, fma(_2058, cbModelParam._m0[10u].y, _2057 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2059, cbModelParam._m0[11u].z, fma(_2058, cbModelParam._m0[11u].y, _2057 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_15_37_ladder = _2187.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2187.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2187.x * cbModelParam._m0[1u].y;
        }
        _1576 = frontier_phi_15_37_ladder_2;
        _1578 = frontier_phi_15_37_ladder_1;
        _1580 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1496);
        _1576 = _1564.x * cbModelParam._m0[1u].y;
        _1578 = _1564.y * cbModelParam._m0[1u].y;
        _1580 = _1564.z * cbModelParam._m0[1u].y;
    }
    float _1584 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _546);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1584 : min(cbModelParam._m0[25u].w, _1584));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1642 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1646 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1650 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1653 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1656 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1659 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1801;
        if (_1653 > 0.0)
        {
            _1801 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1801 = frontier_phi_27_23_ladder;
        }
        float _2077;
        if (_1656 > 0.0)
        {
            _2077 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2077 = frontier_phi_39_34_ladder;
        }
        float _2290;
        if (_1659 > 0.0)
        {
            _2290 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2290 = frontier_phi_48_45_ladder;
        }
        float _2292 = isnan(_2077) ? _1801 : (isnan(_1801) ? _2077 : min(_1801, _2077));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1653) + _1642;
        float _2298 = (_2293 * _1656) + _1646;
        float _2299 = (_2293 * _1659) + _1650;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2300;
        float _2303 = _2300 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2299 > _2303) || ((_2299 < _2301) || ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 < _2301) || (_2297 > _2303))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2299, cbModelParam._m0[17u].z, fma(_2298, cbModelParam._m0[17u].y, _2297 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2299, cbModelParam._m0[18u].z, fma(_2298, cbModelParam._m0[18u].y, _2297 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2299, cbModelParam._m0[19u].z, fma(_2298, cbModelParam._m0[19u].y, _2297 * cbModelParam._m0[19u].x))), _1585);
            frontier_phi_24_48_ladder = _2502.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2502.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2502.x * cbModelParam._m0[1u].z;
        }
        _1678 = frontier_phi_24_48_ladder_2;
        _1680 = frontier_phi_24_48_ladder_1;
        _1682 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1585);
        _1678 = _1662.x * cbModelParam._m0[1u].z;
        _1680 = _1662.y * cbModelParam._m0[1u].z;
        _1682 = _1662.z * cbModelParam._m0[1u].z;
    }
    float _1695 = (((_713 * _664) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1697 = (((_713 * _665) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1680 - _1578)) + _1578);
    float _1699 = (((_713 * _666) + _714) * _678) * ((cbModelParam._m0[1u].w * (_1682 - _1580)) + _1580);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1697, cbSceneParam._m0[89u].y, _1695 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1697, cbSceneParam._m0[90u].y, _1695 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1697, cbSceneParam._m0[91u].y, _1695 * cbSceneParam._m0[91u].x));
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _678 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1754 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1758 = _1720 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_373, _374, _375));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_373, _374, _375));
    float _3878 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3889 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1737].x * _1743) * _1779) + ((cbLight._m0[_1747].x * _1754) * _1777);
    float _1787 = ((_1743 * cbLight._m0[_1737].y) * _1779) + ((_1754 * cbLight._m0[_1747].y) * _1777);
    float _1788 = ((_1743 * cbLight._m0[_1737].z) * _1779) + ((_1754 * cbLight._m0[_1747].z) * _1777);
    uvec4 _1793 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1795 = _1793.x == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1795)
    {
        _1806 = _1786;
        _1808 = _1787;
        _1810 = _1788;
    }
    else
    {
        uint _1814 = _1720 + 6u;
        float _1830 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3900 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1833 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1806 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1786;
        _1808 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1787;
        _1810 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1788;
    }
    bool _1813 = _1793.y == 0u;
    float _1851;
    float _1853;
    float _1855;
    if (_1813)
    {
        _1851 = _1806;
        _1853 = _1808;
        _1855 = _1810;
    }
    else
    {
        uint _2021 = _1720 + 7u;
        float _2037 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _2038 = _2037 * _2037;
        float _3916 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2039 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2040 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1851 = (((cbLight._m0[_2021].x * 0.3183098733425140380859375) * _2039) * _2040) + _1806;
        _1853 = (((cbLight._m0[_2021].y * 0.3183098733425140380859375) * _2039) * _2040) + _1808;
        _1855 = (((cbLight._m0[_2021].z * 0.3183098733425140380859375) * _2039) * _2040) + _1810;
    }
    uint _1858 = _1720 + 8u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _546) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1720].x + _457;
    float _1874 = cbLight._m0[_1720].y + _458;
    float _1875 = cbLight._m0[_1720].z + _459;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1720].xyz));
    float _3932 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1887 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1888 = dot(vec3(_373, _374, _375), vec3(_1880, _1881, _1882));
    float _3954 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1880, _1881, _1882));
    float _3965 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1872 * _1872;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1908 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
    float _1909 = 0.959999978542327880859375 - _661;
    float _1911 = 0.959999978542327880859375 - _662;
    float _1912 = 0.959999978542327880859375 - _663;
    float _1919 = 1.0 - _1872;
    float _1930 = (0.5 / (((_1887 * ((_1886 * _1919) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1919) + _1872) * _1886))) * _1886;
    float _3976 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    uint _1943 = _1720 + 9u;
    float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _546) * 0.949999988079071044921875);
    float _1955 = _1954 * _1954;
    float _1956 = cbLight._m0[_1758].x + _457;
    float _1957 = cbLight._m0[_1758].y + _458;
    float _1958 = cbLight._m0[_1758].z + _459;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1963 = _1962 * _1956;
    float _1964 = _1962 * _1957;
    float _1965 = _1962 * _1958;
    float _1966 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1758].xyz));
    float _3987 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1970 = dot(vec3(_373, _374, _375), vec3(_1963, _1964, _1965));
    float _3998 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1963, _1964, _1965));
    float _4009 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1955 * _1955;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1989 = exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0);
    float _1996 = 1.0 - _1955;
    float _2006 = (0.5 / (((_1887 * ((_1969 * _1996) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1996) + _1955) * _1969))) * _1969;
    float _4020 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2008 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    float _2018 = (((((_1989 * _1909) + _664) * cbLight._m0[_1943].x) * _2008) * _1743) + (((((_1908 * _1909) + _664) * cbLight._m0[_1858].x) * _1932) * _1754);
    float _2019 = (((((_1989 * _1911) + _665) * cbLight._m0[_1943].y) * _2008) * _1743) + (((((_1908 * _1911) + _665) * cbLight._m0[_1858].y) * _1932) * _1754);
    float _2020 = (((((_1989 * _1912) + _666) * cbLight._m0[_1943].z) * _2008) * _1743) + (((((_1908 * _1912) + _666) * cbLight._m0[_1858].z) * _1932) * _1754);
    float _2082;
    float _2084;
    float _2086;
    if (_1795)
    {
        _2082 = _2018;
        _2084 = _2019;
        _2086 = _2020;
    }
    else
    {
        uint _2088 = _1720 + 2u;
        uint _2092 = _1720 + 10u;
        float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _546) * 0.949999988079071044921875);
        float _2107 = _2106 * _2106;
        float _2108 = cbLight._m0[_2088].x + _457;
        float _2109 = cbLight._m0[_2088].y + _458;
        float _2110 = cbLight._m0[_2088].z + _459;
        float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
        float _2115 = _2114 * _2108;
        float _2116 = _2114 * _2109;
        float _2117 = _2114 * _2110;
        float _2118 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2088].xyz));
        float _4031 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2122 = dot(vec3(_373, _374, _375), vec3(_2115, _2116, _2117));
        float _4042 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2125 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2126 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2115, _2116, _2117));
        float _4053 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2130 = _2107 * _2107;
        float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
        float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
        float _2148 = 1.0 - _2107;
        float _2158 = (0.5 / (((_1887 * ((_2121 * _2148) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2148) + _2107) * _2121))) * _2121;
        float _4064 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2160 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
        float _2161 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2082 = (((((_2141 * _1909) + _664) * cbLight._m0[_2092].x) * _2160) * _2161) + _2018;
        _2084 = (((((_2141 * _1911) + _665) * cbLight._m0[_2092].y) * _2160) * _2161) + _2019;
        _2086 = (((((_2141 * _1912) + _666) * cbLight._m0[_2092].z) * _2160) * _2161) + _2020;
    }
    float _2196;
    float _2198;
    float _2200;
    if (_1813)
    {
        _2196 = _2082;
        _2198 = _2084;
        _2200 = _2086;
    }
    else
    {
        uint _2207 = _1720 + 3u;
        uint _2211 = _1720 + 11u;
        float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _546) * 0.949999988079071044921875);
        float _2226 = _2225 * _2225;
        float _2227 = cbLight._m0[_2207].x + _457;
        float _2228 = cbLight._m0[_2207].y + _458;
        float _2229 = cbLight._m0[_2207].z + _459;
        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
        float _2234 = _2233 * _2227;
        float _2235 = _2233 * _2228;
        float _2236 = _2233 * _2229;
        float _2237 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2207].xyz));
        float _4080 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2241 = dot(vec3(_373, _374, _375), vec3(_2234, _2235, _2236));
        float _4091 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2245 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2234, _2235, _2236));
        float _4102 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2249 = _2226 * _2226;
        float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
        float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2267 = 1.0 - _2226;
        float _2277 = (0.5 / (((_1887 * ((_2240 * _2267) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2267) + _2226) * _2240))) * _2240;
        float _4113 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2196 = (((((_2260 * _1909) + _664) * cbLight._m0[_2211].x) * _2279) * _2280) + _2082;
        _2198 = (((((_2260 * _1911) + _665) * cbLight._m0[_2211].y) * _2279) * _2280) + _2084;
        _2200 = (((((_2260 * _1912) + _666) * cbLight._m0[_2211].z) * _2279) * _2280) + _2086;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1718.y == 0u)
    {
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2355;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2355;
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2355;
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.x;
        uint _2382 = uint((float(_2370.y) * floor(float(uint(cbSceneParam._m0[85u].y * _466) / _2371))) + floor(float(uint(cbSceneParam._m0[85u].x * _465) / _2371)));
        float _2392 = (log2(_2358 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2393 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        uint _2396 = uint(isnan(14.0) ? _2393 : (isnan(_2393) ? 14.0 : min(_2393, 14.0)));
        uvec4 _2401 = texelFetch(g_lightClusterGridBuffer, int(((_2396 << 2u) + (_2382 << 6u)) >> 2u));
        uint _2402 = _2401.x;
        uint _2403 = _2370.z;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((((1u << ((_2403 >> 4u) & 15u)) + 4294967295u) & _2402) == 0u) || ((_2403 & 240u) == 0u))
        {
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
        }
        else
        {
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2667)
                {
                    frontier_phi_63_pred = _2656;
                    frontier_phi_63_pred_1 = _2655;
                    frontier_phi_63_pred_2 = _2654;
                    frontier_phi_63_pred_3 = _2653;
                    frontier_phi_63_pred_4 = _2652;
                    frontier_phi_63_pred_5 = _2651;
                }
                else
                {
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    uint _2781;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2666;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    for (;;)
                    {
                        uint _2785 = uint(findLSB(_2781)) + (_2657 << 5u);
                        uint _2782 = (_2781 + 4294967295u) & _2781;
                        uint _2787 = _2785 * 48u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2807 = (_2785 * 48u) + 4u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2826 = (_2785 * 48u) + 8u;
                        vec3 _2837 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x));
                        float _2841 = _2801.x - _2356;
                        float _2842 = _2801.y - _2357;
                        float _2843 = _2801.z - _2358;
                        float _2844 = dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843));
                        float _2847 = inversesqrt(_2844);
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2851 = dot(vec3(_490, _493, _496), vec3(_2848, _2849, _2850));
                        float _2856 = 1.0 - (_2844 * _2801.w);
                        float _4139 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2857 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2858 = sqrt(_2844) * _2820.w;
                        float _2861 = 1.39999997615814208984375 / (_2858 + 1.39999997615814208984375);
                        float _2862 = _2861 * _2861;
                        float _2865 = ((1.0 - _2862) * _2851) + _2862;
                        float _2868 = _2858 * _2858;
                        float _2872 = ((isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))) * _2857) / ((_2868 * 0.699999988079071044921875) + 1.0);
                        float _2876 = (-0.0) - _2356;
                        float _2877 = (-0.0) - _2357;
                        float _2878 = (-0.0) - _2358;
                        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2893 = exp2(log2(1.0 / ((_2868 * 3.5) + 5.0)) * 0.25);
                        float _2894 = 1.0 - _694;
                        float _2901 = sqrt(1.0 - ((1.0 - (_2894 * _2894)) * (1.0 - (_2893 * _2893))));
                        float _2902 = _2901 * _2901;
                        float _2903 = _2902 * _2902;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2906 = _2885 + _2850;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2914 = dot(vec3(_490, _493, _496), vec3(_2883, _2884, _2885));
                        float _4155 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2918 = dot(vec3(_490, _493, _496), vec3(_2910 * _2904, _2910 * _2905, _2910 * _2906));
                        float _4166 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2925 = ((_2921 * _2921) * (_2903 + (-1.0))) + 1.0;
                        float _2926 = _2861 * _2902;
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2851) + _2927;
                        float _4177 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2932 = 1.0 - _2902;
                        float _2942 = (0.5 / (((_2931 * ((_2917 * _2932) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2931 * _2932) + _2902) * _2917))) * _2931;
                        float _4188 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2953 = (((_2903 * 3.1415927410125732421875) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) / ((_2925 * _2925) * ((_2868 * 2.1991131305694580078125) + 3.141590118408203125))) * _2857;
                        _2710 = (_2872 * _2820.x) + _2778;
                        _2711 = (_2872 * _2820.y) + _2779;
                        _2712 = (_2872 * _2820.z) + _2780;
                        _2707 = (_2953 * _2837.x) + _2775;
                        _2708 = (_2953 * _2837.y) + _2776;
                        _2709 = (_2953 * _2837.z) + _2777;
                        if (_2782 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2782;
                        }
                    }
                    frontier_phi_63_pred = _2712;
                    frontier_phi_63_pred_1 = _2711;
                    frontier_phi_63_pred_2 = _2710;
                    frontier_phi_63_pred_3 = _2709;
                    frontier_phi_63_pred_4 = _2708;
                    frontier_phi_63_pred_5 = _2707;
                }
                _2518 = frontier_phi_63_pred;
                _2516 = frontier_phi_63_pred_1;
                _2514 = frontier_phi_63_pred_2;
                _2512 = frontier_phi_63_pred_3;
                _2510 = frontier_phi_63_pred_4;
                _2508 = frontier_phi_63_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2508;
                    _2652 = _2510;
                    _2653 = _2512;
                    _2654 = _2514;
                    _2655 = _2516;
                    _2656 = _2518;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
        }
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.z;
        uint _2524 = (_2522 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2524) & _2402) == 0u)
        {
            _2619 = _2507;
            _2621 = _2509;
            _2623 = _2511;
            _2625 = _2513;
            _2627 = _2515;
            _2629 = _2517;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
            float _2645 = _2644 * _2356;
            float _2646 = _2644 * _2357;
            float _2647 = _2644 * _2358;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2524 < ((_2522 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2758 = _2507;
                float _2759 = _2509;
                float _2760 = _2511;
                float _2761 = _2513;
                float _2762 = _2515;
                float _2763 = _2517;
                uint _2764 = _2524;
                uint _2773;
                bool _2774;
                for (;;)
                {
                    _2773 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                    _2774 = _2773 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2774)
                    {
                        frontier_phi_69_pred = _2763;
                        frontier_phi_69_pred_1 = _2762;
                        frontier_phi_69_pred_2 = _2761;
                        frontier_phi_69_pred_3 = _2760;
                        frontier_phi_69_pred_4 = _2759;
                        frontier_phi_69_pred_5 = _2758;
                    }
                    else
                    {
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        uint _2977 = _2773;
                        uint _2978;
                        vec4 _3003;
                        float _3004;
                        vec4 _3019;
                        vec3 _3031;
                        vec4 _3046;
                        vec4 _3062;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2988 = ((_2764 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2977));
                            _2978 = (_2977 + 4294967295u) & _2977;
                            uint _2990 = _2988 * 40u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            _3004 = _3003.w;
                            uint _3006 = (_2988 * 40u) + 4u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3021 = (_2988 * 40u) + 8u;
                            _3031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x));
                            uint _3033 = (_2988 * 40u) + 16u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2988 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_2988 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2988 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_2358, _3097.z, fma(_2357, _3097.y, _3097.x * _2356)) + _3097.w;
                            _3110 = !((fma(_2358, _3078.z, fma(_2357, _3078.y, _3078.x * _2356)) + _3078.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3003.x - _2356;
                                float _3138 = _3003.y - _2357;
                                float _3139 = _3003.z - _2358;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3004 * _3004));
                                float _4199 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3155 = sqrt(_3140) * _3019.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_490, _493, _496))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_2358, _3046.z, fma(_2357, _3046.y, _3046.x * _2356)) + _3046.w) / _3109;
                                float _3169 = (fma(_2358, _3062.z, fma(_2357, _3062.y, _3062.x * _2356)) + _3062.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4215 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _694;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2645;
                                float _3199 = _3145 - _2646;
                                float _3200 = _3146 - _2647;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_490, _493, _496), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4226 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3212 = dot(vec3(_490, _493, _496), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4237 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_490, _493, _496), vec3(_3144, _3145, _3146))) + _3221;
                                float _4248 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4259 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3175 * _3019.z;
                                frontier_phi_75_pred_1 = _3175 * _3019.y;
                                frontier_phi_75_pred_2 = _3175 * _3019.x;
                                frontier_phi_75_pred_3 = _3249 * _3031.z;
                                frontier_phi_75_pred_4 = _3249 * _3031.y;
                                frontier_phi_75_pred_5 = _3249 * _3031.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3258 = frontier_phi_75_pred;
                            _3257 = frontier_phi_75_pred_1;
                            _3256 = frontier_phi_75_pred_2;
                            _3255 = frontier_phi_75_pred_3;
                            _3254 = frontier_phi_75_pred_4;
                            _3253 = frontier_phi_75_pred_5;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2963 = _3258 + _2976;
                            _2958 = _3253 + _2971;
                            _2959 = _3254 + _2972;
                            _2960 = _3255 + _2973;
                            if (_2978 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2978;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2963;
                        frontier_phi_69_pred_1 = _2962;
                        frontier_phi_69_pred_2 = _2961;
                        frontier_phi_69_pred_3 = _2960;
                        frontier_phi_69_pred_4 = _2959;
                        frontier_phi_69_pred_5 = _2958;
                    }
                    _2630 = frontier_phi_69_pred;
                    _2628 = frontier_phi_69_pred_1;
                    _2626 = frontier_phi_69_pred_2;
                    _2624 = frontier_phi_69_pred_3;
                    _2622 = frontier_phi_69_pred_4;
                    _2620 = frontier_phi_69_pred_5;
                    uint _2765 = _2764 + 1u;
                    if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2758 = _2620;
                        _2759 = _2622;
                        _2760 = _2624;
                        _2761 = _2626;
                        _2762 = _2628;
                        _2763 = _2630;
                        _2764 = _2765;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2630;
                frontier_phi_57_58_ladder_1 = _2628;
                frontier_phi_57_58_ladder_2 = _2626;
                frontier_phi_57_58_ladder_3 = _2624;
                frontier_phi_57_58_ladder_4 = _2622;
                frontier_phi_57_58_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_57_58_ladder = _2517;
                frontier_phi_57_58_ladder_1 = _2515;
                frontier_phi_57_58_ladder_2 = _2513;
                frontier_phi_57_58_ladder_3 = _2511;
                frontier_phi_57_58_ladder_4 = _2509;
                frontier_phi_57_58_ladder_5 = _2507;
            }
            _2619 = frontier_phi_57_58_ladder_5;
            _2621 = frontier_phi_57_58_ladder_4;
            _2623 = frontier_phi_57_58_ladder_3;
            _2625 = frontier_phi_57_58_ladder_2;
            _2627 = frontier_phi_57_58_ladder_1;
            _2629 = frontier_phi_57_58_ladder;
        }
        float _2634 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2414 = (_2634 * _2625) + _1851;
        _2416 = (_2634 * _2627) + _1853;
        _2418 = (_2634 * _2629) + _1855;
        _2420 = ((_2619 * _664) * _2634) + _2196;
        _2422 = ((_2621 * _665) * _2634) + _2198;
        _2424 = ((_2623 * _666) * _2634) + _2200;
    }
    else
    {
        _2414 = _1851;
        _2416 = _1853;
        _2418 = _1855;
        _2420 = _2196;
        _2422 = _2198;
        _2424 = _2200;
    }
    float _4275 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4286 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4297 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4308 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _2442 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2414 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _678))) + ((_2420 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2443 = ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2416 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _678))) + ((_2422 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2444 = ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2418 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _678))) + ((_2424 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2452 = cbInstanceData._m0[_570 + 6u].w * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)));
    float _2457 = _465 / cbSceneParam._m0[86u].x;
    float _2458 = _466 / cbSceneParam._m0[86u].y;
    vec4 _2472 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, (log2((isnan(cbSceneParam._m0[77u].w) ? _397 : (isnan(_397) ? cbSceneParam._m0[77u].w : min(_397, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2474 = _2472.x;
    float _2475 = _2472.y;
    float _2476 = _2472.z;
    float _2477 = _2472.w;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_397 > cbSceneParam._m0[78u].w)
    {
        float _2532 = isnan(_397) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _397 : min(cbSceneParam._m0[80u].w, _397));
        float _2533 = _2532 / _397;
        float _2544 = _2533 * _450;
        float _2545 = _451 * _2533;
        float _2546 = (-0.0) - _2545;
        float _2547 = _2533 * _452;
        float _2549 = (cbSceneParam._m0[77u].w * _2546) / _2532;
        float _2550 = _2549 + cbSceneParam._m0[79u].w;
        float _2551 = cbSceneParam._m0[79u].w - _2545;
        float _2557 = sqrt(((_2544 * _2544) + (_2545 * _2545)) + (_2547 * _2547));
        float _2560 = (1.0 - (cbSceneParam._m0[77u].w / _2532)) * _2557;
        float _2565 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2567 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2720;
        if (abs((_2546 - _2549) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2720 = ((((_2550 > 0.0) ? exp2(_2565 * _2550) : (2.0 - exp2(_2567 * _2550))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2560;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : max(_2550, _2551));
            float _2682 = isnan(_2551) ? _2550 : (isnan(_2550) ? _2551 : min(_2550, _2551));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2720 = ((abs(_2557 / _2546) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2565 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2565 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2567 * _2691) - exp2(_2567 * _2692)) * _2680))) + (_2560 * cbSceneParam._m0[80u].z);
        }
        vec4 _2722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2457, _2458, 1.0), 0.0);
        float _2731 = exp2((_2720 * (-1.44269502162933349609375)) * (1.0 - _2722.w));
        float _2732 = log2(_2731);
        float _2748 = log2(_2477);
        _2569 = (exp2(_2748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].x)) * _2722.x) / cbSceneParam._m0[78u].x)) + _2474;
        _2571 = (exp2(_2748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].y)) * _2722.y) / cbSceneParam._m0[78u].y)) + _2475;
        _2573 = (exp2(_2748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2732 * cbSceneParam._m0[78u].z)) * _2722.z) / cbSceneParam._m0[78u].z)) + _2476;
        _2575 = _2731 * _2477;
    }
    else
    {
        _2569 = _2474;
        _2571 = _2475;
        _2573 = _2476;
        _2575 = _2477;
    }
    float _2587 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2588 = _2587 == 3.0;
    float _2589 = log2(_2575);
    float _2596 = exp2(_2589 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0)));
    float _2597 = exp2(_2589 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)));
    float _2598 = exp2(_2589 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0)));
    float _2607 = (_2587 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2607 * (_2588 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.y = _2607 * (_2588 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2571)));
    SV_Target.z = _2607 * (_2588 ? _2598 : (_2598 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.w = _2452;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2452;
}


