#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1353;
float _3770;
float _3771;
float _3772;
float _3773;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _318 = exp2(log2(_311 * 22.0) * 260.0);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _334 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _344 = cbMtdParam._m0[10u].x * _334.x;
    float _345 = cbMtdParam._m0[10u].y * _334.y;
    float _346 = cbMtdParam._m0[10u].z * _334.z;
    vec4 _358 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _373 = exp2(log2(1.0 - _306.w) * 8.0);
    vec4 _385 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _410 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _432 = (((((_358.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _410.x) - _344) * _320) + _344;
    float _433 = (((((_358.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _410.y) - _345) * _320) + _345;
    float _434 = (((((_358.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _410.z) - _346) * _320) + _346;
    float _441 = (((cbMtdParam._m0[12u].x * _385.x) - _432) * _373) + _432;
    float _442 = (((cbMtdParam._m0[12u].y * _385.y) - _433) * _373) + _433;
    float _443 = (((cbMtdParam._m0[12u].z * _385.z) - _434) * _373) + _434;
    float _444 = _410.w * _358.w;
    float _472 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _320) + cbMtdParam._m0[15u].y;
    float _475 = ((cbMtdParam._m0[14u].y - _472) * _373) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[13u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _527 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _538 = ((((_311 * 2.0) * (cbMtdParam._m0[13u].x + _508.z)) - _496) * _320) + _496;
    float _542 = (((_527.z - _538) + cbMtdParam._m0[14u].x) * _373) + _538;
    float _546 = (_306.x * 2.0) + (-1.0);
    float _548 = (_306.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_546, _548), vec2(_546, _548));
    float _3792 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))));
    float _559 = ((_508.x - _489) * _320) + _489;
    float _560 = ((_508.y - _490) * _320) + _490;
    float _573 = ((((((_527.x - _559) * _373) + _559) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _546;
    float _574 = ((((((_527.y - _560) * _373) + _560) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _548;
    float _577 = fma(_554, _234, fma(_574, _226 * TANGENT.x, (_212 * _204) * _573));
    float _580 = fma(_554, _235, fma(_574, _226 * TANGENT.y, (_212 * _205) * _573));
    float _583 = fma(_554, _236, fma(_574, _226 * TANGENT.z, (_212 * _206) * _573));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3803 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _591 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _592 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _593 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _594 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _595 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _596 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _604 = cbMatDynParam._m0[9u].x * _593;
    float _605 = cbMatDynParam._m0[9u].y * _594;
    float _606 = cbMatDynParam._m0[9u].z * _595;
    float _613 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _614 = _613 * _291;
    float _615 = _613 * _292;
    float _616 = _613 * _293;
    float _617 = dot(vec3(_588, _589, _590), vec3(_614, _615, _616));
    float _623 = abs(exp2(log2(_617) * cbMatDynParam._m0[12u].x));
    float _624 = isnan(0.100000001490116119384765625) ? _623 : (isnan(_623) ? 0.100000001490116119384765625 : max(_623, 0.100000001490116119384765625));
    float _630 = ((isnan(0.699999988079071044921875) ? _624 : (isnan(_624) ? 0.699999988079071044921875 : min(_624, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _653 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3879 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3890 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _661 = dot(vec3(_588, _589, _590), vec3(0.0, -1.0, 0.0));
    float _3901 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _671 = (_664 * _593) * cbMatDynParam._m0[11u].x;
    float _673 = (_664 * _594) * cbMatDynParam._m0[11u].y;
    float _675 = (_664 * _595) * cbMatDynParam._m0[11u].z;
    float _682 = dot(vec3(_614, _615, _616), vec3(_588, _589, _590));
    float _685 = _682 * 2.0;
    float _695 = dot(vec3((-0.0) - (_614 - (_685 * _588)), (-0.0) - (_615 - (_685 * _589)), (-0.0) - (_616 - (_685 * _590))), vec3(0.0, -1.0, 0.0));
    float _3912 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _702 = exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 4.0);
    float _728 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _733 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _735 = _733.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1032 = sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293));
        float _1038 = (cbMatDynParam._m0[5u].x * _1032) + cbMatDynParam._m0[5u].y;
        float _3923 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1043 = (cbMatDynParam._m0[5u].z * _1032) + cbMatDynParam._m0[5u].w;
        float _3934 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) - _1039)) + _1039) < ((_735 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _746 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _747 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _749 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = _749.w;
    float _769 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _772 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _775 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    vec4 _777 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _779 = _777.x;
    float _791 = (((_777.y - _592) + (_777.w * _592)) * cbMtdParam._m0[3u].x) + _592;
    vec4 _792 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _808 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_779 * _779)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _792.z;
    float _816 = (((cbMatDynParam._m0[15u].x - _596) * cbMatDynParam._m0[15u].w) * _808) + _596;
    float _824 = ((_808 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _791)) + _791;
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _849 = _848 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * _604) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * _605) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * _606) * cbInstanceData._m0[_850].z;
    float _3945 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    vec4 _862 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _867 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _878 = (((_867.x - _816) + (_867.w * _816)) * cbMtdParam._m0[3u].x) + _816;
    float _891 = (cbMtdParam._m0[3u].x * (((_859 * _751) - _859) + _862.x)) + _859;
    float _892 = (cbMtdParam._m0[3u].x * (((_860 * _751) - _860) + _862.y)) + _860;
    float _893 = (cbMtdParam._m0[3u].x * (((_861 * _751) - _861) + _862.z)) + _861;
    vec4 _894 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _907 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_816 * (_604 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_816 * (_605 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_816 * (_606 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _894.z;
    float _911 = _907 * cbMatDynParam._m0[13u].w;
    float _921 = (_911 * (cbMatDynParam._m0[13u].x - _891)) + _891;
    float _922 = (_911 * (cbMatDynParam._m0[13u].y - _892)) + _892;
    float _923 = (_911 * (cbMatDynParam._m0[13u].z - _893)) + _893;
    float _931 = ((_907 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _878)) + _878;
    float _932 = 1.0 - _931;
    float _933 = _932 * _921;
    float _934 = _932 * _922;
    float _935 = _932 * _923;
    float _939 = (_921 + (-0.039999999105930328369140625)) * _931;
    float _940 = (_922 + (-0.039999999105930328369140625)) * _931;
    float _941 = (_923 + (-0.039999999105930328369140625)) * _931;
    float _942 = _939 + 0.039999999105930328369140625;
    float _943 = _940 + 0.039999999105930328369140625;
    float _944 = _941 + 0.039999999105930328369140625;
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _746, cbSceneParam._m0[86u].y * _747));
    float _956 = _953.x * TEXCOORD_4;
    float _957 = _617 * 2.0;
    float _961 = (_957 * _588) - _614;
    float _962 = (_957 * _589) - _615;
    float _963 = (_957 * _590) - _616;
    float _964 = abs(_682);
    float _3978 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _966 = sqrt(_824);
    float _978 = exp2((_966 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_966 * 3.0));
    float _984 = (1.0 - _978) * ((_966 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _985 = _978 * _966;
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1081 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1085 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1110 = _1013 + _588;
        float _1111 = _1017 + _589;
        float _1112 = _1021 + _590;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_588, _589, _590), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4026 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_588, _589, _590), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4059 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_588, _589, _590), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4092 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1400 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1404 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1427 = _1013 + _588;
        float _1428 = _1017 + _589;
        float _1429 = _1021 + _590;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_588, _589, _590), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4155 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_588, _589, _590), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4188 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_588, _589, _590), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4221 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = _1353;
        _1675 = _1353;
        _1676 = _1353;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1365)) + _1365;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1366)) + _1366;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1367)) + _1367;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _961 * 0.5;
    float _1734 = _962 * 0.5;
    float _1735 = _963 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1860 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1863 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1891 = frontier_phi_19_17_ladder;
        }
        float _2097;
        if (_1860 > 0.0)
        {
            _2097 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2351;
        if (_1863 > 0.0)
        {
            _2351 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2351 = frontier_phi_40_35_ladder;
        }
        float _2353 = isnan(_2097) ? _1891 : (isnan(_1891) ? _2097 : min(_1891, _2097));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1857) + _1846;
        float _2359 = (_2354 * _1860) + _1850;
        float _2360 = (_2354 * _1863) + _1854;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_18_40_ladder = _2488.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2488.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2488.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_18_40_ladder_2;
        _1881 = frontier_phi_18_40_ladder_1;
        _1883 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1959 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1962 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2102;
        if (_1956 > 0.0)
        {
            _2102 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2102 = frontier_phi_30_26_ladder;
        }
        float _2378;
        if (_1959 > 0.0)
        {
            _2378 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2378 = frontier_phi_42_37_ladder;
        }
        float _2591;
        if (_1962 > 0.0)
        {
            _2591 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2591 = frontier_phi_51_48_ladder;
        }
        float _2593 = isnan(_2378) ? _2102 : (isnan(_2102) ? _2378 : min(_2102, _2378));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1956) + _1945;
        float _2599 = (_2594 * _1959) + _1949;
        float _2600 = (_2594 * _1962) + _1953;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_27_51_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_27_51_ladder_2;
        _1983 = frontier_phi_27_51_ladder_1;
        _1985 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1888);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_984 * _942) + _985) * _956) * ((cbModelParam._m0[1u].w * (_1981 - _1879)) + _1879);
    float _2000 = (((_984 * _943) + _985) * _956) * ((cbModelParam._m0[1u].w * (_1983 - _1881)) + _1881);
    float _2002 = (((_984 * _944) + _985) * _956) * ((cbModelParam._m0[1u].w * (_1985 - _1883)) + _1883);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _956 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2056 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2060 = _2023 | 1u;
    float _2071 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_588, _589, _590));
    float _2074 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_588, _589, _590));
    float _4357 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _4368 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2079 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2081 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2088 = ((cbLight._m0[_2040].x * _2046) * _2081) + ((cbLight._m0[_2050].x * _2056) * _2079);
    float _2089 = ((_2046 * cbLight._m0[_2040].y) * _2081) + ((_2056 * cbLight._m0[_2050].y) * _2079);
    float _2090 = ((_2046 * cbLight._m0[_2040].z) * _2081) + ((_2056 * cbLight._m0[_2050].z) * _2079);
    uvec4 _2094 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2096 = _2094.x == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2096)
    {
        _2107 = _2088;
        _2109 = _2089;
        _2111 = _2090;
    }
    else
    {
        uint _2115 = _2023 + 6u;
        float _2131 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4379 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2134 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2107 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _2088;
        _2109 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _2089;
        _2111 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _2090;
    }
    bool _2114 = _2094.y == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2114)
    {
        _2152 = _2107;
        _2154 = _2109;
        _2156 = _2111;
    }
    else
    {
        uint _2322 = _2023 + 7u;
        float _2338 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2339 = _2338 * _2338;
        float _4395 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2340 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2341 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2152 = (((cbLight._m0[_2322].x * 0.3183098733425140380859375) * _2340) * _2341) + _2107;
        _2154 = (((cbLight._m0[_2322].y * 0.3183098733425140380859375) * _2340) * _2341) + _2109;
        _2156 = (((cbLight._m0[_2322].z * 0.3183098733425140380859375) * _2340) * _2341) + _2111;
    }
    uint _2159 = _2023 + 8u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _824) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2023].x + _614;
    float _2175 = cbLight._m0[_2023].y + _615;
    float _2176 = cbLight._m0[_2023].z + _616;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2023].xyz));
    float _4411 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _2188 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2189 = dot(vec3(_588, _589, _590), vec3(_2181, _2182, _2183));
    float _4433 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2181, _2182, _2183));
    float _4444 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2173 * _2173;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
    float _2210 = 0.959999978542327880859375 - _939;
    float _2212 = 0.959999978542327880859375 - _940;
    float _2213 = 0.959999978542327880859375 - _941;
    float _2220 = 1.0 - _2173;
    float _2231 = (0.5 / (((_2188 * ((_2187 * _2220) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2220) + _2173) * _2187))) * _2187;
    float _4455 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    uint _2244 = _2023 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _824) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_2060].x + _614;
    float _2258 = cbLight._m0[_2060].y + _615;
    float _2259 = cbLight._m0[_2060].z + _616;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2060].xyz));
    float _4466 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2271 = dot(vec3(_588, _589, _590), vec3(_2264, _2265, _2266));
    float _4477 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2264, _2265, _2266));
    float _4488 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2297 = 1.0 - _2256;
    float _2307 = (0.5 / (((_2188 * ((_2270 * _2297) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2297) + _2256) * _2270))) * _2270;
    float _4499 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2319 = (((((_2290 * _2210) + _942) * cbLight._m0[_2244].x) * _2309) * _2046) + (((((_2209 * _2210) + _942) * cbLight._m0[_2159].x) * _2233) * _2056);
    float _2320 = (((((_2290 * _2212) + _943) * cbLight._m0[_2244].y) * _2309) * _2046) + (((((_2209 * _2212) + _943) * cbLight._m0[_2159].y) * _2233) * _2056);
    float _2321 = (((((_2290 * _2213) + _944) * cbLight._m0[_2244].z) * _2309) * _2046) + (((((_2209 * _2213) + _944) * cbLight._m0[_2159].z) * _2233) * _2056);
    float _2383;
    float _2385;
    float _2387;
    if (_2096)
    {
        _2383 = _2319;
        _2385 = _2320;
        _2387 = _2321;
    }
    else
    {
        uint _2389 = _2023 + 2u;
        uint _2393 = _2023 + 10u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _824) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _614;
        float _2410 = cbLight._m0[_2389].y + _615;
        float _2411 = cbLight._m0[_2389].z + _616;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2389].xyz));
        float _4510 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2423 = dot(vec3(_588, _589, _590), vec3(_2416, _2417, _2418));
        float _4521 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4532 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2449 = 1.0 - _2408;
        float _2459 = (0.5 / (((_2188 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2449) + _2408) * _2422))) * _2422;
        float _4543 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2383 = (((((_2442 * _2210) + _942) * cbLight._m0[_2393].x) * _2461) * _2462) + _2319;
        _2385 = (((((_2442 * _2212) + _943) * cbLight._m0[_2393].y) * _2461) * _2462) + _2320;
        _2387 = (((((_2442 * _2213) + _944) * cbLight._m0[_2393].z) * _2461) * _2462) + _2321;
    }
    float _2497;
    float _2499;
    float _2501;
    if (_2114)
    {
        _2497 = _2383;
        _2499 = _2385;
        _2501 = _2387;
    }
    else
    {
        uint _2508 = _2023 + 3u;
        uint _2512 = _2023 + 11u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _824) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _614;
        float _2529 = cbLight._m0[_2508].y + _615;
        float _2530 = cbLight._m0[_2508].z + _616;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2508].xyz));
        float _4559 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2542 = dot(vec3(_588, _589, _590), vec3(_2535, _2536, _2537));
        float _4570 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4581 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2561 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
        float _2568 = 1.0 - _2527;
        float _2578 = (0.5 / (((_2188 * ((_2541 * _2568) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2188 * _2568) + _2527) * _2541))) * _2541;
        float _4592 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2580 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2581 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2497 = (((((_2561 * _2210) + _942) * cbLight._m0[_2512].x) * _2580) * _2581) + _2383;
        _2499 = (((((_2561 * _2212) + _943) * cbLight._m0[_2512].y) * _2580) * _2581) + _2385;
        _2501 = (((((_2561 * _2213) + _944) * cbLight._m0[_2512].z) * _2580) * _2581) + _2387;
    }
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    if (_2021.y == 0u)
    {
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2656;
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2656;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2656;
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.x;
        uint _2683 = uint((float(_2671.y) * floor(float(uint(cbSceneParam._m0[85u].y * _747) / _2672))) + floor(float(uint(cbSceneParam._m0[85u].x * _746) / _2672)));
        float _2693 = (log2(_2659 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2694 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        uint _2697 = uint(isnan(14.0) ? _2694 : (isnan(_2694) ? 14.0 : min(_2694, 14.0)));
        uvec4 _2702 = texelFetch(g_lightClusterGridBuffer, int(((_2697 << 2u) + (_2683 << 6u)) >> 2u));
        uint _2703 = _2702.x;
        uint _2704 = _2671.z;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((((1u << ((_2704 >> 4u) & 15u)) + 4294967295u) & _2703) == 0u) || ((_2704 & 240u) == 0u))
        {
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
        }
        else
        {
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            uint _2996 = 0u;
            uint _3005;
            bool _3006;
            for (;;)
            {
                _3005 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_2996 << 2u)) >> 2u)).x;
                _3006 = _3005 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3006)
                {
                    frontier_phi_68_pred = _2992;
                    frontier_phi_68_pred_1 = _2995;
                    frontier_phi_68_pred_2 = _2994;
                    frontier_phi_68_pred_3 = _2993;
                    frontier_phi_68_pred_4 = _2991;
                    frontier_phi_68_pred_5 = _2990;
                }
                else
                {
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    uint _3141;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _3005;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    for (;;)
                    {
                        uint _3145 = uint(findLSB(_3141)) + (_2996 << 5u);
                        uint _3142 = (_3141 + 4294967295u) & _3141;
                        uint _3147 = _3145 * 48u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3167 = (_3145 * 48u) + 4u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3186 = (_3145 * 48u) + 8u;
                        vec3 _3197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x));
                        float _3201 = _3161.x - _2657;
                        float _3202 = _3161.y - _2658;
                        float _3203 = _3161.z - _2659;
                        float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                        float _3207 = inversesqrt(_3204);
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3211 = dot(vec3(_769, _772, _775), vec3(_3208, _3209, _3210));
                        float _3216 = 1.0 - (_3204 * _3161.w);
                        float _4618 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3218 = sqrt(_3204) * _3180.w;
                        float _3221 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3211) + _3222;
                        float _3228 = _3218 * _3218;
                        float _3231 = ((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3217) / ((_3228 * 0.699999988079071044921875) + 1.0);
                        float _3235 = (-0.0) - _2657;
                        float _3236 = (-0.0) - _2658;
                        float _3237 = (-0.0) - _2659;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3252 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                        float _3253 = 1.0 - _966;
                        float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                        float _3261 = _3260 * _3260;
                        float _3262 = _3261 * _3261;
                        float _3263 = _3242 + _3208;
                        float _3264 = _3243 + _3209;
                        float _3265 = _3244 + _3210;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3273 = dot(vec3(_769, _772, _775), vec3(_3242, _3243, _3244));
                        float _4634 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3277 = dot(vec3(_769, _772, _775), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                        float _4645 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3280 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                        float _3285 = _3221 * _3261;
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3211) + _3286;
                        float _4656 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3291 = 1.0 - _3261;
                        float _3301 = (0.5 / (((_3290 * ((_3276 * _3291) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3261) * _3276))) * _3290;
                        float _4667 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3312 = (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3284 * _3284) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125))) * _3217;
                        _3065 = (_3231 * _3180.x) + _3138;
                        _3066 = (_3231 * _3180.y) + _3139;
                        _3067 = (_3231 * _3180.z) + _3140;
                        _3062 = (_3312 * _3197.x) + _3135;
                        _3063 = (_3312 * _3197.y) + _3136;
                        _3064 = (_3312 * _3197.z) + _3137;
                        if (_3142 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3142;
                        }
                    }
                    frontier_phi_68_pred = _3064;
                    frontier_phi_68_pred_1 = _3067;
                    frontier_phi_68_pred_2 = _3066;
                    frontier_phi_68_pred_3 = _3065;
                    frontier_phi_68_pred_4 = _3063;
                    frontier_phi_68_pred_5 = _3062;
                }
                _2834 = frontier_phi_68_pred;
                _2840 = frontier_phi_68_pred_1;
                _2838 = frontier_phi_68_pred_2;
                _2836 = frontier_phi_68_pred_3;
                _2832 = frontier_phi_68_pred_4;
                _2830 = frontier_phi_68_pred_5;
                uint _2997 = _2996 + 1u;
                if (_2997 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2990 = _2830;
                    _2991 = _2832;
                    _2992 = _2834;
                    _2993 = _2836;
                    _2994 = _2838;
                    _2995 = _2840;
                    _2996 = _2997;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
        }
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.z;
        uint _2846 = (_2844 >> 8u) & 15u;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((4294967295u << _2846) & _2703) == 0u)
        {
            _2958 = _2829;
            _2960 = _2831;
            _2962 = _2833;
            _2964 = _2835;
            _2966 = _2837;
            _2968 = _2839;
        }
        else
        {
            float _2983 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
            float _2984 = _2983 * _2657;
            float _2985 = _2983 * _2658;
            float _2986 = _2983 * _2659;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2846 < ((_2844 >> 12u) & 15u))
            {
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _2969;
                float _3118 = _2829;
                float _3119 = _2831;
                float _3120 = _2833;
                float _3121 = _2835;
                float _3122 = _2837;
                float _3123 = _2839;
                uint _3124 = _2846;
                uint _3133;
                bool _3134;
                for (;;)
                {
                    _3133 = texelFetch(g_lightClassification, int((((_2697 << 5u) + (_2683 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                    _3134 = _3133 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3134)
                    {
                        frontier_phi_79_pred = _3123;
                        frontier_phi_79_pred_1 = _3122;
                        frontier_phi_79_pred_2 = _3121;
                        frontier_phi_79_pred_3 = _3120;
                        frontier_phi_79_pred_4 = _3119;
                        frontier_phi_79_pred_5 = _3118;
                    }
                    else
                    {
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        uint _3345 = _3133;
                        uint _3346;
                        vec4 _3371;
                        float _3372;
                        vec4 _3387;
                        vec3 _3399;
                        vec4 _3414;
                        vec4 _3430;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3356 = ((_3124 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3345));
                            _3346 = (_3345 + 4294967295u) & _3345;
                            uint _3358 = _3356 * 40u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3372 = _3371.w;
                            uint _3374 = (_3356 * 40u) + 4u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3356 * 40u) + 8u;
                            _3399 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x));
                            uint _3401 = (_3356 * 40u) + 16u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3356 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3433 = (_3356 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3356 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_2659, _3465.z, fma(_2658, _3465.y, _3465.x * _2657)) + _3465.w;
                            _3478 = !((fma(_2659, _3446.z, fma(_2658, _3446.y, _3446.x * _2657)) + _3446.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3371.x - _2657;
                                float _3506 = _3371.y - _2658;
                                float _3507 = _3371.z - _2659;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3372 * _3372));
                                float _4678 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3523 = sqrt(_3508) * _3387.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_769, _772, _775))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_2659, _3414.z, fma(_2658, _3414.y, _3414.x * _2657)) + _3414.w) / _3477;
                                float _3537 = (fma(_2659, _3430.z, fma(_2658, _3430.y, _3430.x * _2657)) + _3430.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4694 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _966;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2984;
                                float _3567 = _3513 - _2985;
                                float _3568 = _3514 - _2986;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2984, (-0.0) - _2985, (-0.0) - _2986));
                                float _4705 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3580 = dot(vec3(_769, _772, _775), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4716 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_769, _772, _775), vec3(_3512, _3513, _3514))) + _3589;
                                float _4727 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4738 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3543 * _3387.z;
                                frontier_phi_85_pred_1 = _3543 * _3387.y;
                                frontier_phi_85_pred_2 = _3543 * _3387.x;
                                frontier_phi_85_pred_3 = _3617 * _3399.z;
                                frontier_phi_85_pred_4 = _3617 * _3399.y;
                                frontier_phi_85_pred_5 = _3617 * _3399.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_85_pred;
                            _3625 = frontier_phi_85_pred_1;
                            _3624 = frontier_phi_85_pred_2;
                            _3623 = frontier_phi_85_pred_3;
                            _3622 = frontier_phi_85_pred_4;
                            _3621 = frontier_phi_85_pred_5;
                            _3329 = _3624 + _3342;
                            _3330 = _3625 + _3343;
                            _3331 = _3626 + _3344;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            if (_3346 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3346;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3331;
                        frontier_phi_79_pred_1 = _3330;
                        frontier_phi_79_pred_2 = _3329;
                        frontier_phi_79_pred_3 = _3328;
                        frontier_phi_79_pred_4 = _3327;
                        frontier_phi_79_pred_5 = _3326;
                    }
                    _2969 = frontier_phi_79_pred;
                    _2967 = frontier_phi_79_pred_1;
                    _2965 = frontier_phi_79_pred_2;
                    _2963 = frontier_phi_79_pred_3;
                    _2961 = frontier_phi_79_pred_4;
                    _2959 = frontier_phi_79_pred_5;
                    uint _3125 = _3124 + 1u;
                    if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3118 = _2959;
                        _3119 = _2961;
                        _3120 = _2963;
                        _3121 = _2965;
                        _3122 = _2967;
                        _3123 = _2969;
                        _3124 = _3125;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2965;
                frontier_phi_60_61_ladder_1 = _2969;
                frontier_phi_60_61_ladder_2 = _2967;
                frontier_phi_60_61_ladder_3 = _2963;
                frontier_phi_60_61_ladder_4 = _2961;
                frontier_phi_60_61_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_60_61_ladder = _2835;
                frontier_phi_60_61_ladder_1 = _2839;
                frontier_phi_60_61_ladder_2 = _2837;
                frontier_phi_60_61_ladder_3 = _2833;
                frontier_phi_60_61_ladder_4 = _2831;
                frontier_phi_60_61_ladder_5 = _2829;
            }
            _2958 = frontier_phi_60_61_ladder_5;
            _2960 = frontier_phi_60_61_ladder_4;
            _2962 = frontier_phi_60_61_ladder_3;
            _2964 = frontier_phi_60_61_ladder;
            _2966 = frontier_phi_60_61_ladder_2;
            _2968 = frontier_phi_60_61_ladder_1;
        }
        float _2973 = isnan(1.0) ? _956 : (isnan(_956) ? 1.0 : min(_956, 1.0));
        _2715 = (_2973 * _2964) + _2152;
        _2717 = (_2973 * _2966) + _2154;
        _2719 = (_2973 * _2968) + _2156;
        _2721 = ((_2958 * _942) * _2973) + _2497;
        _2723 = ((_2960 * _943) * _2973) + _2499;
        _2725 = ((_2962 * _944) * _2973) + _2501;
    }
    else
    {
        _2715 = _2152;
        _2717 = _2154;
        _2719 = _2156;
        _2721 = _2497;
        _2723 = _2499;
        _2725 = _2501;
    }
    uint _2731 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _2737 = cbInstanceData._m0[_2731].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _630) + cbMatDynParam._m0[7u].x) + (((_671 - (_671 * _596)) + (cbMatDynParam._m0[11u].x * _702)) * cbMatDynParam._m0[9u].x));
    float _2738 = cbInstanceData._m0[_2731].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _630) + cbMatDynParam._m0[7u].y) + (((_673 - (_673 * _596)) + (cbMatDynParam._m0[11u].y * _702)) * cbMatDynParam._m0[9u].y));
    float _2739 = cbInstanceData._m0[_2731].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _630) + cbMatDynParam._m0[7u].z) + (((_675 - (_675 * _596)) + (cbMatDynParam._m0[11u].z * _702)) * cbMatDynParam._m0[9u].z));
    float _4754 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4765 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4776 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4787 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _2757 = (((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2715 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _956))) + ((_2721 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + _2737;
    float _2759 = (_2738 + ((_2723 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2717 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _956)));
    float _2761 = (_2739 + ((_2725 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1788)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2719 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _956)));
    float _2762 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2763 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
    float _2764 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2769 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) - _657) * _630) + _657));
    float _2774 = cbInstanceData._m0[_848 + 6u].w * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)));
    float _2779 = _746 / cbSceneParam._m0[86u].x;
    float _2780 = _747 / cbSceneParam._m0[86u].y;
    vec4 _2794 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, (log2((isnan(cbSceneParam._m0[77u].w) ? _728 : (isnan(_728) ? cbSceneParam._m0[77u].w : min(_728, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2796 = _2794.x;
    float _2797 = _2794.y;
    float _2798 = _2794.z;
    float _2799 = _2794.w;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_728 > cbSceneParam._m0[78u].w)
    {
        float _2854 = isnan(_728) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _728 : min(cbSceneParam._m0[80u].w, _728));
        float _2855 = _2854 / _728;
        float _2866 = _2855 * _291;
        float _2867 = _292 * _2855;
        float _2868 = (-0.0) - _2867;
        float _2869 = _2855 * _293;
        float _2871 = (cbSceneParam._m0[77u].w * _2868) / _2854;
        float _2872 = _2871 + cbSceneParam._m0[79u].w;
        float _2873 = cbSceneParam._m0[79u].w - _2867;
        float _2879 = sqrt(((_2866 * _2866) + (_2867 * _2867)) + (_2869 * _2869));
        float _2882 = (1.0 - (cbSceneParam._m0[77u].w / _2854)) * _2879;
        float _2887 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2889 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3075;
        if (abs((_2868 - _2871) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3075 = ((((_2872 > 0.0) ? exp2(_2887 * _2872) : (2.0 - exp2(_2889 * _2872))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2882;
        }
        else
        {
            float _3019 = 1.0 / cbSceneParam._m0[80u].x;
            float _3020 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : max(_2872, _2873));
            float _3021 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : min(_2872, _2873));
            float _3030 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : min(_3020, 0.0));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            _3075 = ((abs(_2879 / _2868) * cbSceneParam._m0[80u].y) * ((((_3030 - _3031) * 2.0) - ((exp2(_2887 * (isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0)))) - exp2(_2887 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))))) * _3019)) - ((exp2(_2889 * _3030) - exp2(_2889 * _3031)) * _3019))) + (_2882 * cbSceneParam._m0[80u].z);
        }
        vec4 _3077 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2779, _2780, 1.0), 0.0);
        float _3086 = exp2((_3075 * (-1.44269502162933349609375)) * (1.0 - _3077.w));
        float _3087 = log2(_3086);
        float _3103 = log2(_2799);
        _2891 = (exp2(_3103 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].x)) * _3077.x) / cbSceneParam._m0[78u].x)) + _2796;
        _2893 = (exp2(_3103 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].y)) * _3077.y) / cbSceneParam._m0[78u].y)) + _2797;
        _2895 = (exp2(_3103 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3087 * cbSceneParam._m0[78u].z)) * _3077.z) / cbSceneParam._m0[78u].z)) + _2798;
        _2897 = _3086 * _2799;
    }
    else
    {
        _2891 = _2796;
        _2893 = _2797;
        _2895 = _2798;
        _2897 = _2799;
    }
    bool _3113;
    vec4 _2907;
    vec4 _2929;
    float _2931;
    float _2935;
    float _2936;
    float _2937;
    float _2940;
    float _2943;
    float _2946;
    float _2947;
    bool _2957;
    for (;;)
    {
        _2907 = cbMatDynParam._m0[0u];
        float _2909 = roundEven(_2907.y);
        bool _2910 = _2909 == 3.0;
        float _2911 = log2(_2897);
        float _2915 = exp2(_2911 * cbSceneParam._m0[78u].x);
        float _2916 = exp2(_2911 * cbSceneParam._m0[78u].y);
        float _2917 = exp2(_2911 * cbSceneParam._m0[78u].z);
        float _2918 = _2915 * _2762;
        float _2919 = _2916 * _2763;
        float _2920 = _2917 * _2764;
        float _2927 = _735 + (-0.5);
        _2929 = cbMtdParam._m0[1u];
        _2931 = _2929.y * _2927;
        float _2934 = (_2909 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2935 = _2934 * (_2910 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2891)));
        _2936 = _2934 * (_2910 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2893)));
        _2937 = _2934 * (_2910 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = ((_2769 * _2737) * _2915) * _2934;
        _2943 = ((_2769 * _2738) * _2916) * _2934;
        _2946 = ((_2769 * _2739) * _2917) * _2934;
        _2947 = _2927 * 0.999000012874603271484375;
        _2957 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2957)
        {
            if ((cbInstanceData._m0[_848 + 7u].x + _2947) < 0.5)
            {
                _3113 = true;
                break;
            }
        }
        uint _3054 = _849 + uint(_2907.w);
        if ((cbInstanceData._m0[_3054].w < 1.0) && ((cbInstanceData._m0[_3054].w + _2947) < 0.5))
        {
            _3113 = true;
            break;
        }
        if ((_2931 + _444) < _2929.x)
        {
            _3113 = true;
            break;
        }
        _3113 = false;
        break;
    }
    float _3317;
    if (_3113)
    {
        discard_state = true;
        _3317 = 0.0;
    }
    else
    {
        _3317 = _2774;
    }
    SV_Target.x = _2935;
    SV_Target.y = _2936;
    SV_Target.z = _2937;
    SV_Target.w = _3317;
    SV_Target_1.x = _2940;
    SV_Target_1.y = _2943;
    SV_Target_1.z = _2946;
    SV_Target_1.w = _2774;
    discard_exit();
}


