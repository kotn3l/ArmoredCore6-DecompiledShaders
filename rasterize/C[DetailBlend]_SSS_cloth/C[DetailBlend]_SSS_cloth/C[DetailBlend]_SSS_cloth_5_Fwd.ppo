#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _246.z;
    float _258 = exp2(log2(_251 * 22.0) * 260.0);
    float _259 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _260 = isnan(1.0) ? _259 : (isnan(_259) ? 1.0 : min(_259, 1.0));
    vec4 _274 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _285 = cbMtdParam._m0[10u].x * _274.x;
    float _286 = cbMtdParam._m0[10u].y * _274.y;
    float _287 = cbMtdParam._m0[10u].z * _274.z;
    vec4 _299 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = exp2(log2(1.0 - _246.w) * 8.0);
    vec4 _327 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _352 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _374 = (((((_299.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _352.x) - _285) * _260) + _285;
    float _375 = (((((_299.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _352.y) - _286) * _260) + _286;
    float _376 = (((((_299.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _352.z) - _287) * _260) + _287;
    float _383 = (((cbMtdParam._m0[12u].x * _327.x) - _374) * _315) + _374;
    float _384 = (((cbMtdParam._m0[12u].y * _327.y) - _375) * _315) + _375;
    float _385 = (((cbMtdParam._m0[12u].z * _327.z) - _376) * _315) + _376;
    float _386 = _352.w * _299.w;
    float _414 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _260) + cbMtdParam._m0[15u].y;
    float _417 = ((cbMtdParam._m0[14u].y - _414) * _315) + _414;
    vec4 _430 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _439 = cbMtdParam._m0[13u].y + _430.z;
    vec4 _451 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _470 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _481 = ((((_251 * 2.0) * (cbMtdParam._m0[13u].x + _451.z)) - _439) * _260) + _439;
    float _485 = (((_470.z - _481) + cbMtdParam._m0[14u].x) * _315) + _481;
    float _489 = (_246.x * 2.0) + (-1.0);
    float _491 = (_246.y * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3551 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _502 = ((_451.x - _432) * _260) + _432;
    float _503 = ((_451.y - _433) * _260) + _433;
    float _516 = ((((((_470.x - _502) * _315) + _502) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _489;
    float _517 = ((((((_470.y - _503) * _315) + _503) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _491;
    float _520 = fma(_497, _230, fma(_517, _222 * TANGENT.x, (_208 * _200) * _516));
    float _523 = fma(_497, _231, fma(_517, _222 * TANGENT.y, (_208 * _201) * _516));
    float _526 = fma(_497, _232, fma(_517, _222 * TANGENT.z, (_208 * _202) * _516));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3562 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _534 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _535 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _536 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _537 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _538 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _539 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _624 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _626 = _624.w;
    float _645 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _648 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _651 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    vec4 _653 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _655 = _653.x;
    float _667 = (((_653.y - _535) + (_653.w * _535)) * cbMtdParam._m0[3u].x) + _535;
    vec4 _668 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _684 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_655 * _655)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _668.z;
    float _692 = (((cbMatDynParam._m0[15u].x - _539) * cbMatDynParam._m0[15u].w) * _684) + _539;
    float _700 = ((_684 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _667)) + _667;
    uint _724 = uint(roundEven(NORMAL.w)) * 13u;
    uint _726 = (_724 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _732 = (cbMtdParam._m0[0u].x * _536) * cbInstanceData._m0[_726].x;
    float _733 = (cbMtdParam._m0[0u].y * _537) * cbInstanceData._m0[_726].y;
    float _734 = (cbMtdParam._m0[0u].z * _538) * cbInstanceData._m0[_726].z;
    float _3628 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    vec4 _738 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _743 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _754 = (((_743.x - _692) + (_743.w * _692)) * cbMtdParam._m0[3u].x) + _692;
    float _767 = (cbMtdParam._m0[3u].x * (((_735 * _626) - _735) + _738.x)) + _735;
    float _768 = (cbMtdParam._m0[3u].x * (((_736 * _626) - _736) + _738.y)) + _736;
    float _769 = (cbMtdParam._m0[3u].x * (((_737 * _626) - _737) + _738.z)) + _737;
    vec4 _770 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _783 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_692 * (_536 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_692 * (_537 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_692 * (_538 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _770.z;
    float _787 = _783 * cbMatDynParam._m0[13u].w;
    float _797 = (_787 * (cbMatDynParam._m0[13u].x - _767)) + _767;
    float _798 = (_787 * (cbMatDynParam._m0[13u].y - _768)) + _768;
    float _799 = (_787 * (cbMatDynParam._m0[13u].z - _769)) + _769;
    float _807 = ((_783 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _754)) + _754;
    float _808 = 1.0 - _807;
    float _809 = _808 * _797;
    float _810 = _808 * _798;
    float _811 = _808 * _799;
    float _815 = (_797 + (-0.039999999105930328369140625)) * _807;
    float _816 = (_798 + (-0.039999999105930328369140625)) * _807;
    float _817 = (_799 + (-0.039999999105930328369140625)) * _807;
    float _818 = _815 + 0.039999999105930328369140625;
    float _819 = _816 + 0.039999999105930328369140625;
    float _820 = _817 + 0.039999999105930328369140625;
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _832 = _829.x * TEXCOORD_4;
    float _833 = dot(vec3(_531, _532, _533), vec3(_613, _614, _615));
    float _836 = _833 * 2.0;
    float _840 = (_836 * _531) - _613;
    float _841 = (_836 * _532) - _614;
    float _842 = (_836 * _533) - _615;
    float _846 = abs(dot(vec3(_613, _614, _615), vec3(_531, _532, _533)));
    float _3661 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _848 = sqrt(_700);
    float _861 = exp2((_848 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_848 * 3.0));
    float _867 = (1.0 - _861) * ((_848 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _868 = _861 * _848;
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _935 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _939 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _964 = _896 + _531;
        float _965 = _900 + _532;
        float _966 = _904 + _533;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _931;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _935;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _939;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_531, _532, _533), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3709 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_531, _532, _533), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3742 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_531, _532, _533), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3775 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1247 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1251 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1255 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1278 = _896 + _531;
        float _1279 = _900 + _532;
        float _1280 = _904 + _533;
        float _1290 = fma(_1280, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1278)) - _1247;
        float _1291 = fma(_1280, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1278)) - _1251;
        float _1292 = fma(_1280, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1278)) - _1255;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1247 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1251 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[35u].z) + ((((((_1255 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_531, _532, _533), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3838 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_531, _532, _533), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3871 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_531, _532, _533), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3904 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = _1207;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1219)) + _1219;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1220)) + _1220;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _840 * 0.5;
    float _1585 = _841 * 0.5;
    float _1586 = _842 * 0.5;
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_842, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840));
        float _1711 = fma(_842, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840));
        float _1714 = fma(_842, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1742 = frontier_phi_16_14_ladder;
        }
        float _1948;
        if (_1711 > 0.0)
        {
            _1948 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1948 = frontier_phi_25_21_ladder;
        }
        float _2202;
        if (_1714 > 0.0)
        {
            _2202 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2202 = frontier_phi_37_32_ladder;
        }
        float _2204 = isnan(_1948) ? _1742 : (isnan(_1742) ? _1948 : min(_1742, _1948));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1708) + _1697;
        float _2210 = (_2205 * _1711) + _1701;
        float _2211 = (_2205 * _1714) + _1705;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2214 = (-1.0) - _2212;
        float _2216 = _2212 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2211 > _2216) || ((_2211 < _2214) || ((_2210 > _2216) || ((_2210 < _2214) || ((_2209 < _2214) || (_2209 > _2216))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_15_37_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_15_37_ladder_2;
        _1732 = frontier_phi_15_37_ladder_1;
        _1734 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_840, _841, _842), _1650);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1796 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1800 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1804 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1807 = fma(_842, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840));
        float _1810 = fma(_842, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840));
        float _1813 = fma(_842, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840));
        float _1953;
        if (_1807 > 0.0)
        {
            _1953 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1953 = frontier_phi_27_23_ladder;
        }
        float _2229;
        if (_1810 > 0.0)
        {
            _2229 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2229 = frontier_phi_39_34_ladder;
        }
        float _2442;
        if (_1813 > 0.0)
        {
            _2442 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2442 = frontier_phi_48_45_ladder;
        }
        float _2444 = isnan(_2229) ? _1953 : (isnan(_1953) ? _2229 : min(_1953, _2229));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1807) + _1796;
        float _2450 = (_2445 * _1810) + _1800;
        float _2451 = (_2445 * _1813) + _1804;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_24_48_ladder = _2654.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2654.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2654.x * cbModelParam._m0[1u].z;
        }
        _1832 = frontier_phi_24_48_ladder_2;
        _1834 = frontier_phi_24_48_ladder_1;
        _1836 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_840, _841, _842), _1739);
        _1832 = _1816.x * cbModelParam._m0[1u].z;
        _1834 = _1816.y * cbModelParam._m0[1u].z;
        _1836 = _1816.z * cbModelParam._m0[1u].z;
    }
    float _1849 = (((_867 * _818) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1832 - _1730)) + _1730);
    float _1851 = (((_867 * _819) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1834 - _1732)) + _1732);
    float _1853 = (((_867 * _820) + _868) * _832) * ((cbModelParam._m0[1u].w * (_1836 - _1734)) + _1734);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1849 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1849 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1849 * cbSceneParam._m0[91u].x));
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_724 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _832 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1907 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1911 = _1874 | 1u;
    float _1922 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_531, _532, _533));
    float _1925 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_531, _532, _533));
    float _4040 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _4051 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1930 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1932 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1939 = ((cbLight._m0[_1891].x * _1897) * _1932) + ((cbLight._m0[_1901].x * _1907) * _1930);
    float _1940 = ((_1897 * cbLight._m0[_1891].y) * _1932) + ((_1907 * cbLight._m0[_1901].y) * _1930);
    float _1941 = ((_1897 * cbLight._m0[_1891].z) * _1932) + ((_1907 * cbLight._m0[_1901].z) * _1930);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1947)
    {
        _1958 = _1939;
        _1960 = _1940;
        _1962 = _1941;
    }
    else
    {
        uint _1966 = _1874 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4062 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1985 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1939;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1940;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1941;
    }
    bool _1965 = _1945.y == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1965)
    {
        _2003 = _1958;
        _2005 = _1960;
        _2007 = _1962;
    }
    else
    {
        uint _2173 = _1874 + 7u;
        float _2189 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4078 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2192 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2003 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _1958;
        _2005 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _1960;
        _2007 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _1962;
    }
    uint _2010 = _1874 + 8u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _700) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1874].x + _613;
    float _2026 = cbLight._m0[_1874].y + _614;
    float _2027 = cbLight._m0[_1874].z + _615;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1874].xyz));
    float _4094 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2039 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2040 = dot(vec3(_531, _532, _533), vec3(_2032, _2033, _2034));
    float _4116 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2032, _2033, _2034));
    float _4127 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2024 * _2024;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
    float _2061 = 0.959999978542327880859375 - _815;
    float _2063 = 0.959999978542327880859375 - _816;
    float _2064 = 0.959999978542327880859375 - _817;
    float _2071 = 1.0 - _2024;
    float _2082 = (0.5 / (((_2039 * ((_2038 * _2071) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2071) + _2024) * _2038))) * _2038;
    float _4138 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    uint _2095 = _1874 + 9u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _700) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1911].x + _613;
    float _2109 = cbLight._m0[_1911].y + _614;
    float _2110 = cbLight._m0[_1911].z + _615;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1911].xyz));
    float _4149 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2122 = dot(vec3(_531, _532, _533), vec3(_2115, _2116, _2117));
    float _4160 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2115, _2116, _2117));
    float _4171 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2107 * _2107;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
    float _2148 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2039 * ((_2121 * _2148) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2148) + _2107) * _2121))) * _2121;
    float _4182 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    float _2170 = (((((_2141 * _2061) + _818) * cbLight._m0[_2095].x) * _2160) * _1897) + (((((_2060 * _2061) + _818) * cbLight._m0[_2010].x) * _2084) * _1907);
    float _2171 = (((((_2141 * _2063) + _819) * cbLight._m0[_2095].y) * _2160) * _1897) + (((((_2060 * _2063) + _819) * cbLight._m0[_2010].y) * _2084) * _1907);
    float _2172 = (((((_2141 * _2064) + _820) * cbLight._m0[_2095].z) * _2160) * _1897) + (((((_2060 * _2064) + _820) * cbLight._m0[_2010].z) * _2084) * _1907);
    float _2234;
    float _2236;
    float _2238;
    if (_1947)
    {
        _2234 = _2170;
        _2236 = _2171;
        _2238 = _2172;
    }
    else
    {
        uint _2240 = _1874 + 2u;
        uint _2244 = _1874 + 10u;
        float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _700) * 0.949999988079071044921875);
        float _2259 = _2258 * _2258;
        float _2260 = cbLight._m0[_2240].x + _613;
        float _2261 = cbLight._m0[_2240].y + _614;
        float _2262 = cbLight._m0[_2240].z + _615;
        float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
        float _2267 = _2266 * _2260;
        float _2268 = _2266 * _2261;
        float _2269 = _2266 * _2262;
        float _2270 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2240].xyz));
        float _4193 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2274 = dot(vec3(_531, _532, _533), vec3(_2267, _2268, _2269));
        float _4204 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2278 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2267, _2268, _2269));
        float _4215 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2282 = _2259 * _2259;
        float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
        float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2300 = 1.0 - _2259;
        float _2310 = (0.5 / (((_2039 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2300) + _2259) * _2273))) * _2273;
        float _4226 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2234 = (((((_2293 * _2061) + _818) * cbLight._m0[_2244].x) * _2312) * _2313) + _2170;
        _2236 = (((((_2293 * _2063) + _819) * cbLight._m0[_2244].y) * _2312) * _2313) + _2171;
        _2238 = (((((_2293 * _2064) + _820) * cbLight._m0[_2244].z) * _2312) * _2313) + _2172;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1965)
    {
        _2348 = _2234;
        _2350 = _2236;
        _2352 = _2238;
    }
    else
    {
        uint _2359 = _1874 + 3u;
        uint _2363 = _1874 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _700) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _613;
        float _2380 = cbLight._m0[_2359].y + _614;
        float _2381 = cbLight._m0[_2359].z + _615;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2359].xyz));
        float _4242 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2393 = dot(vec3(_531, _532, _533), vec3(_2386, _2387, _2388));
        float _4253 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4264 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
        float _2419 = 1.0 - _2378;
        float _2429 = (0.5 / (((_2039 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2419) + _2378) * _2392))) * _2392;
        float _4275 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2348 = (((((_2412 * _2061) + _818) * cbLight._m0[_2363].x) * _2431) * _2432) + _2234;
        _2350 = (((((_2412 * _2063) + _819) * cbLight._m0[_2363].y) * _2431) * _2432) + _2236;
        _2352 = (((((_2412 * _2064) + _820) * cbLight._m0[_2363].z) * _2431) * _2432) + _2238;
    }
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_1872.y == 0u)
    {
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2507;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2507;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2507;
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.x;
        uint _2534 = uint((float(_2522.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2523))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2523)));
        float _2544 = (log2(_2510 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2545 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        uint _2548 = uint(isnan(14.0) ? _2545 : (isnan(_2545) ? 14.0 : min(_2545, 14.0)));
        uvec4 _2553 = texelFetch(g_lightClusterGridBuffer, int(((_2548 << 2u) + (_2534 << 6u)) >> 2u));
        uint _2554 = _2553.x;
        uint _2555 = _2522.z;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((((1u << ((_2555 >> 4u) & 15u)) + 4294967295u) & _2554) == 0u) || ((_2555 & 240u) == 0u))
        {
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
        }
        else
        {
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            uint _2809 = 0u;
            uint _2818;
            bool _2819;
            for (;;)
            {
                _2818 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                _2819 = _2818 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2819)
                {
                    frontier_phi_63_pred = _2808;
                    frontier_phi_63_pred_1 = _2807;
                    frontier_phi_63_pred_2 = _2806;
                    frontier_phi_63_pred_3 = _2805;
                    frontier_phi_63_pred_4 = _2804;
                    frontier_phi_63_pred_5 = _2803;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2818;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2809 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _2508;
                        float _2994 = _2953.y - _2509;
                        float _2995 = _2953.z - _2510;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_645, _648, _651), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4301 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _2508;
                        float _3029 = (-0.0) - _2509;
                        float _3030 = (-0.0) - _2510;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3045 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _848;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_645, _648, _651), vec3(_3035, _3036, _3037));
                        float _4317 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3070 = dot(vec3(_645, _648, _651), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4328 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3013 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3003) + _3079;
                        float _4339 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4350 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3077 * _3077) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2862 = (_3024 * _2972.x) + _2930;
                        _2863 = (_3024 * _2972.y) + _2931;
                        _2864 = (_3024 * _2972.z) + _2932;
                        _2859 = (_3105 * _2989.x) + _2927;
                        _2860 = (_3105 * _2989.y) + _2928;
                        _2861 = (_3105 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_63_pred = _2864;
                    frontier_phi_63_pred_1 = _2863;
                    frontier_phi_63_pred_2 = _2862;
                    frontier_phi_63_pred_3 = _2861;
                    frontier_phi_63_pred_4 = _2860;
                    frontier_phi_63_pred_5 = _2859;
                }
                _2670 = frontier_phi_63_pred;
                _2668 = frontier_phi_63_pred_1;
                _2666 = frontier_phi_63_pred_2;
                _2664 = frontier_phi_63_pred_3;
                _2662 = frontier_phi_63_pred_4;
                _2660 = frontier_phi_63_pred_5;
                uint _2810 = _2809 + 1u;
                if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2803 = _2660;
                    _2804 = _2662;
                    _2805 = _2664;
                    _2806 = _2666;
                    _2807 = _2668;
                    _2808 = _2670;
                    _2809 = _2810;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
        }
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.z;
        uint _2676 = (_2674 >> 8u) & 15u;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((4294967295u << _2676) & _2554) == 0u)
        {
            _2771 = _2659;
            _2773 = _2661;
            _2775 = _2663;
            _2777 = _2665;
            _2779 = _2667;
            _2781 = _2669;
        }
        else
        {
            float _2796 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
            float _2797 = _2796 * _2508;
            float _2798 = _2796 * _2509;
            float _2799 = _2796 * _2510;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2676 < ((_2674 >> 12u) & 15u))
            {
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2910 = _2659;
                float _2911 = _2661;
                float _2912 = _2663;
                float _2913 = _2665;
                float _2914 = _2667;
                float _2915 = _2669;
                uint _2916 = _2676;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2926)
                    {
                        frontier_phi_69_pred = _2915;
                        frontier_phi_69_pred_1 = _2914;
                        frontier_phi_69_pred_2 = _2913;
                        frontier_phi_69_pred_3 = _2912;
                        frontier_phi_69_pred_4 = _2911;
                        frontier_phi_69_pred_5 = _2910;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        uint _3129 = _2925;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3198;
                        vec4 _3214;
                        float _3261;
                        bool _3262;
                        for (;;)
                        {
                            uint _3140 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3185 = (_3140 * 40u) + 16u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3201 = (_3140 * 40u) + 20u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3217 = (_3140 * 40u) + 24u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3236 = (_3140 * 40u) + 28u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3261 = fma(_2510, _3249.z, fma(_2509, _3249.y, _3249.x * _2508)) + _3249.w;
                            _3262 = !((fma(_2510, _3230.z, fma(_2509, _3230.y, _3230.x * _2508)) + _3230.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3262)
                            {
                                float _3289 = _3155.x - _2508;
                                float _3290 = _3155.y - _2509;
                                float _3291 = _3155.z - _2510;
                                float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                                float _3295 = inversesqrt(_3292);
                                float _3296 = _3295 * _3289;
                                float _3297 = _3295 * _3290;
                                float _3298 = _3295 * _3291;
                                float _3302 = 1.0 - (_3292 / (_3156 * _3156));
                                float _4361 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3307 = sqrt(_3292) * _3171.w;
                                float _3309 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                                float _3310 = _3309 * _3309;
                                float _3313 = ((1.0 - _3310) * dot(vec3(_3296, _3297, _3298), vec3(_645, _648, _651))) + _3310;
                                float _3316 = _3307 * _3307;
                                float _3320 = (fma(_2510, _3198.z, fma(_2509, _3198.y, _3198.x * _2508)) + _3198.w) / _3261;
                                float _3321 = (fma(_2510, _3214.z, fma(_2509, _3214.y, _3214.x * _2508)) + _3214.w) / _3261;
                                float _3325 = 1.0 - dot(vec2(_3320, _3321), vec2(_3320, _3321));
                                float _4377 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3327 = _3326 * (((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3303) / ((_3316 * 0.699999988079071044921875) + 1.0));
                                float _3339 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                                float _3340 = 1.0 - _848;
                                float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                                float _3348 = _3347 * _3347;
                                float _3349 = _3348 * _3348;
                                float _3350 = _3296 - _2797;
                                float _3351 = _3297 - _2798;
                                float _3352 = _3298 - _2799;
                                float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                                float _3360 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2797, (-0.0) - _2798, (-0.0) - _2799));
                                float _4388 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3364 = dot(vec3(_645, _648, _651), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                                float _4399 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                                float _3372 = _3309 * _3348;
                                float _3373 = _3372 * _3372;
                                float _3379 = ((1.0 - _3373) * dot(vec3(_645, _648, _651), vec3(_3296, _3297, _3298))) + _3373;
                                float _4410 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3381 = 1.0 - _3348;
                                float _3391 = (0.5 / (((_3380 * ((_3363 * _3381) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3348) * _3363))) * _3380;
                                float _4421 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3401 = (_3326 * _3303) * (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3371 * _3371) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3327 * _3171.z;
                                frontier_phi_75_pred_1 = _3327 * _3171.y;
                                frontier_phi_75_pred_2 = _3327 * _3171.x;
                                frontier_phi_75_pred_3 = _3401 * _3183.z;
                                frontier_phi_75_pred_4 = _3401 * _3183.y;
                                frontier_phi_75_pred_5 = _3401 * _3183.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3410 = frontier_phi_75_pred;
                            _3409 = frontier_phi_75_pred_1;
                            _3408 = frontier_phi_75_pred_2;
                            _3407 = frontier_phi_75_pred_3;
                            _3406 = frontier_phi_75_pred_4;
                            _3405 = frontier_phi_75_pred_5;
                            _3113 = _3408 + _3126;
                            _3114 = _3409 + _3127;
                            _3115 = _3410 + _3128;
                            _3110 = _3405 + _3123;
                            _3111 = _3406 + _3124;
                            _3112 = _3407 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3115;
                        frontier_phi_69_pred_1 = _3114;
                        frontier_phi_69_pred_2 = _3113;
                        frontier_phi_69_pred_3 = _3112;
                        frontier_phi_69_pred_4 = _3111;
                        frontier_phi_69_pred_5 = _3110;
                    }
                    _2782 = frontier_phi_69_pred;
                    _2780 = frontier_phi_69_pred_1;
                    _2778 = frontier_phi_69_pred_2;
                    _2776 = frontier_phi_69_pred_3;
                    _2774 = frontier_phi_69_pred_4;
                    _2772 = frontier_phi_69_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2772;
                        _2911 = _2774;
                        _2912 = _2776;
                        _2913 = _2778;
                        _2914 = _2780;
                        _2915 = _2782;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2782;
                frontier_phi_57_58_ladder_1 = _2780;
                frontier_phi_57_58_ladder_2 = _2778;
                frontier_phi_57_58_ladder_3 = _2776;
                frontier_phi_57_58_ladder_4 = _2774;
                frontier_phi_57_58_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_57_58_ladder = _2669;
                frontier_phi_57_58_ladder_1 = _2667;
                frontier_phi_57_58_ladder_2 = _2665;
                frontier_phi_57_58_ladder_3 = _2663;
                frontier_phi_57_58_ladder_4 = _2661;
                frontier_phi_57_58_ladder_5 = _2659;
            }
            _2771 = frontier_phi_57_58_ladder_5;
            _2773 = frontier_phi_57_58_ladder_4;
            _2775 = frontier_phi_57_58_ladder_3;
            _2777 = frontier_phi_57_58_ladder_2;
            _2779 = frontier_phi_57_58_ladder_1;
            _2781 = frontier_phi_57_58_ladder;
        }
        float _2786 = isnan(1.0) ? _832 : (isnan(_832) ? 1.0 : min(_832, 1.0));
        _2566 = (_2786 * _2777) + _2003;
        _2568 = (_2786 * _2779) + _2005;
        _2570 = (_2786 * _2781) + _2007;
        _2572 = ((_2771 * _818) * _2786) + _2348;
        _2574 = ((_2773 * _819) * _2786) + _2350;
        _2576 = ((_2775 * _820) * _2786) + _2352;
    }
    else
    {
        _2566 = _2003;
        _2568 = _2005;
        _2570 = _2007;
        _2572 = _2348;
        _2574 = _2350;
        _2576 = _2352;
    }
    float _4437 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4448 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4459 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4470 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2594 = ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2566 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _832))) + ((_2572 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2568 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _832))) + ((_2574 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2596 = ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2570 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _832))) + ((_2576 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2604 = cbInstanceData._m0[_724 + 6u].w * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)));
    float _2609 = _621 / cbSceneParam._m0[86u].x;
    float _2610 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2684 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2685 = _2684 / _555;
        float _2696 = _2685 * _606;
        float _2697 = _607 * _2685;
        float _2698 = (-0.0) - _2697;
        float _2699 = _2685 * _608;
        float _2701 = (cbSceneParam._m0[77u].w * _2698) / _2684;
        float _2702 = _2701 + cbSceneParam._m0[79u].w;
        float _2703 = cbSceneParam._m0[79u].w - _2697;
        float _2709 = sqrt(((_2696 * _2696) + (_2697 * _2697)) + (_2699 * _2699));
        float _2712 = (1.0 - (cbSceneParam._m0[77u].w / _2684)) * _2709;
        float _2717 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2719 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2698 - _2701) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2702 > 0.0) ? exp2(_2717 * _2702) : (2.0 - exp2(_2719 * _2702))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2712;
        }
        else
        {
            float _2832 = 1.0 / cbSceneParam._m0[80u].x;
            float _2833 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : max(_2702, _2703));
            float _2834 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : min(_2702, _2703));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            _2872 = ((abs(_2709 / _2698) * cbSceneParam._m0[80u].y) * ((((_2843 - _2844) * 2.0) - ((exp2(_2717 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0)))) - exp2(_2717 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))))) * _2832)) - ((exp2(_2719 * _2843) - exp2(_2719 * _2844)) * _2832))) + (_2712 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2629);
        _2721 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2723 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2725 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2727 = _2883 * _2629;
    }
    else
    {
        _2721 = _2626;
        _2723 = _2627;
        _2725 = _2628;
        _2727 = _2629;
    }
    float _2739 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2740 = _2739 == 3.0;
    float _2741 = log2(_2727);
    float _2748 = exp2(_2741 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0)));
    float _2749 = exp2(_2741 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0)));
    float _2750 = exp2(_2741 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0)));
    float _2759 = (_2739 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2759 * (_2740 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.y = _2759 * (_2740 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.z = _2759 * (_2740 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.w = _2604;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2604;
}


