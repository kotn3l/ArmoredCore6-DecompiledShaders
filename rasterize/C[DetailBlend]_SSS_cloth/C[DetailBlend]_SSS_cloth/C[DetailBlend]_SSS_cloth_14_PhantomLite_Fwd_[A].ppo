#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1275;
float _3692;
float _3693;
float _3694;
float _3695;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _320 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = exp2(log2(1.0 - _302.w) * 8.0);
    vec4 _348 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _373 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _382 = ((_320.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _373.x;
    float _385 = ((_320.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _373.y;
    float _388 = ((_320.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _373.z;
    float _395 = (((cbMtdParam._m0[12u].x * _348.x) - _382) * _336) + _382;
    float _396 = (((cbMtdParam._m0[12u].y * _348.y) - _385) * _336) + _385;
    float _397 = (((cbMtdParam._m0[12u].z * _348.z) - _388) * _336) + _388;
    float _398 = _373.w * _320.w;
    vec4 _415 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = cbMtdParam._m0[14u].z + _415.x;
    float _422 = ((cbMtdParam._m0[14u].y - _419) * _336) + _419;
    vec4 _434 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    vec4 _456 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _464 = (_302.z * 2.0) * (cbMtdParam._m0[13u].x + _434.z);
    float _468 = (((_456.z - _464) + cbMtdParam._m0[14u].x) * _336) + _464;
    float _472 = (_302.x * 2.0) + (-1.0);
    float _474 = (_302.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_472, _474), vec2(_472, _474));
    float _3704 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    float _493 = ((((((_456.x - _436) * _336) + _436) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _472;
    float _494 = ((((((_456.y - _437) * _336) + _437) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _474;
    float _497 = fma(_480, _230, fma(_494, _222 * TANGENT.x, (_208 * _200) * _493));
    float _500 = fma(_480, _231, fma(_494, _222 * TANGENT.y, (_208 * _201) * _493));
    float _503 = fma(_480, _232, fma(_494, _222 * TANGENT.z, (_208 * _202) * _493));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3715 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _511 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _512 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _513 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _514 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _515 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _516 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _524 = cbMatDynParam._m0[9u].x * _513;
    float _525 = cbMatDynParam._m0[9u].y * _514;
    float _526 = cbMatDynParam._m0[9u].z * _515;
    float _533 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _534 = _533 * _287;
    float _535 = _533 * _288;
    float _536 = _533 * _289;
    float _537 = dot(vec3(_508, _509, _510), vec3(_534, _535, _536));
    float _543 = abs(exp2(log2(_537) * cbMatDynParam._m0[12u].x));
    float _544 = isnan(0.100000001490116119384765625) ? _543 : (isnan(_543) ? 0.100000001490116119384765625 : max(_543, 0.100000001490116119384765625));
    float _550 = ((isnan(0.699999988079071044921875) ? _544 : (isnan(_544) ? 0.699999988079071044921875 : min(_544, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _573 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3791 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3802 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _581 = dot(vec3(_508, _509, _510), vec3(0.0, -1.0, 0.0));
    float _3813 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _591 = (_584 * _513) * cbMatDynParam._m0[11u].x;
    float _593 = (_584 * _514) * cbMatDynParam._m0[11u].y;
    float _595 = (_584 * _515) * cbMatDynParam._m0[11u].z;
    float _602 = dot(vec3(_534, _535, _536), vec3(_508, _509, _510));
    float _605 = _602 * 2.0;
    float _615 = dot(vec3((-0.0) - (_534 - (_605 * _508)), (-0.0) - (_535 - (_605 * _509)), (-0.0) - (_536 - (_605 * _510))), vec3(0.0, -1.0, 0.0));
    float _3824 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _622 = exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 4.0);
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _653 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _655 = _653.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _954 = sqrt(((_287 * _287) + (_288 * _288)) + (_289 * _289));
        float _960 = (cbMatDynParam._m0[5u].x * _954) + cbMatDynParam._m0[5u].y;
        float _3835 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _965 = (cbMatDynParam._m0[5u].z * _954) + cbMatDynParam._m0[5u].w;
        float _3846 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) - _961)) + _961) < ((_655 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.w;
    float _690 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _693 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _696 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    vec4 _698 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _700 = _698.x;
    float _712 = (((_698.y - _512) + (_698.w * _512)) * cbMtdParam._m0[3u].x) + _512;
    vec4 _713 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _729 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_700 * _700)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _713.z;
    float _738 = (((cbMatDynParam._m0[15u].x - _516) * cbMatDynParam._m0[15u].w) * _729) + _516;
    float _746 = ((_729 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _712)) + _712;
    uint _770 = uint(roundEven(NORMAL.w)) * 13u;
    uint _771 = _770 + 9u;
    uint _772 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * _524) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * _525) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * _526) * cbInstanceData._m0[_772].z;
    float _3857 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    vec4 _784 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _789 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _800 = (((_789.x - _738) + (_789.w * _738)) * cbMtdParam._m0[3u].x) + _738;
    float _813 = (cbMtdParam._m0[3u].x * (((_781 * _671) - _781) + _784.x)) + _781;
    float _814 = (cbMtdParam._m0[3u].x * (((_782 * _671) - _782) + _784.y)) + _782;
    float _815 = (cbMtdParam._m0[3u].x * (((_783 * _671) - _783) + _784.z)) + _783;
    float _829 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_738 * (_524 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_738 * (_525 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_738 * (_526 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _833 = _829 * cbMatDynParam._m0[13u].w;
    float _843 = (_833 * (cbMatDynParam._m0[13u].x - _813)) + _813;
    float _844 = (_833 * (cbMatDynParam._m0[13u].y - _814)) + _814;
    float _845 = (_833 * (cbMatDynParam._m0[13u].z - _815)) + _815;
    float _853 = ((_829 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _800)) + _800;
    float _854 = 1.0 - _853;
    float _855 = _854 * _843;
    float _856 = _854 * _844;
    float _857 = _854 * _845;
    float _861 = (_843 + (-0.039999999105930328369140625)) * _853;
    float _862 = (_844 + (-0.039999999105930328369140625)) * _853;
    float _863 = (_845 + (-0.039999999105930328369140625)) * _853;
    float _864 = _861 + 0.039999999105930328369140625;
    float _865 = _862 + 0.039999999105930328369140625;
    float _866 = _863 + 0.039999999105930328369140625;
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _878 = _875.x * TEXCOORD_4;
    float _879 = _537 * 2.0;
    float _883 = (_879 * _508) - _534;
    float _884 = (_879 * _509) - _535;
    float _885 = (_879 * _510) - _536;
    float _886 = abs(_602);
    float _3890 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_746);
    float _900 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _906 = (1.0 - _900) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _907 = _900 * _888;
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1274;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _999 = fma(_943, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935));
        float _1003 = fma(_943, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935));
        float _1007 = fma(_943, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935));
        float _1032 = _935 + _508;
        float _1033 = _939 + _509;
        float _1034 = _943 + _510;
        float _1044 = fma(_1034, cbModelParam._m0[26u].z, fma(_1033, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032)) - _999;
        float _1045 = fma(_1034, cbModelParam._m0[27u].z, fma(_1033, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032)) - _1003;
        float _1046 = fma(_1034, cbModelParam._m0[28u].z, fma(_1033, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032)) - _1007;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_999 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1003 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[34u].z) + ((((((_1007 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1102 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1068.x + (-0.5));
        float _1104 = _1102 * (_1068.y + (-0.5));
        float _1105 = _1102 * (_1068.z + (-0.5));
        float _1112 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1075.x + (-0.5));
        float _1114 = _1112 * (_1075.y + (-0.5));
        float _1115 = _1112 * (_1075.z + (-0.5));
        float _1122 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1082.x + (-0.5));
        float _1124 = _1122 * (_1082.y + (-0.5));
        float _1125 = _1122 * (_1082.z + (-0.5));
        float _1132 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1089.x + (-0.5));
        float _1134 = _1132 * (_1089.y + (-0.5));
        float _1135 = _1132 * (_1089.z + (-0.5));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = _1103 * 0.5;
        float _1140 = _1113 * 0.5;
        float _1141 = _1123 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1156 = (dot(vec3(_508, _509, _510), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1166 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3938 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1168 + 1.0))) + _1173) * _1136;
        float _1183 = _1104 * 0.5;
        float _1184 = _1114 * 0.5;
        float _1185 = _1124 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_508, _509, _510), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3971 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1210 + 1.0))) + _1215) * _1137;
        float _1225 = _1105 * 0.5;
        float _1226 = _1115 * 0.5;
        float _1227 = _1125 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_508, _509, _510), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4004 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1252 + 1.0))) + _1257) * _1138;
        _1274 = _1105;
        _1276 = _1104;
        _1277 = _1103;
        _1278 = _1115;
        _1279 = _1114;
        _1280 = _1113;
        _1281 = _1125;
        _1282 = _1124;
        _1283 = _1123;
        _1284 = _1138;
        _1285 = _1137;
        _1286 = _1136;
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
    }
    else
    {
        _1274 = _1275;
        _1276 = _1275;
        _1277 = _1275;
        _1278 = _1275;
        _1279 = _1275;
        _1280 = _1275;
        _1281 = _1275;
        _1282 = _1275;
        _1283 = _1275;
        _1284 = _1275;
        _1285 = _1275;
        _1286 = _1275;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_943, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935));
        float _1322 = fma(_943, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935));
        float _1326 = fma(_943, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935));
        float _1349 = _935 + _508;
        float _1350 = _939 + _509;
        float _1351 = _943 + _510;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_508, _509, _510), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4067 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_508, _509, _510), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4100 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_508, _509, _510), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4133 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1275;
        _1588 = _1275;
        _1589 = _1275;
        _1590 = _1275;
        _1591 = _1275;
        _1592 = _1275;
        _1593 = _1275;
        _1594 = _1275;
        _1595 = _1275;
        _1596 = _1275;
        _1597 = _1275;
        _1598 = _1275;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1287)) + _1287;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1288)) + _1288;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1289)) + _1289;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _883 * 0.5;
    float _1656 = _884 * 0.5;
    float _1657 = _885 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1695;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1274, _1278, _1281, _1284));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1276, _1279, _1282, _1285));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1706;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1697 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1710 = (_1706 * cbModelParam._m0[1u].x) + (_1695 * (1.0 - cbModelParam._m0[1u].x));
    float _1720 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1720 : min(cbModelParam._m0[25u].z, _1720));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1768 = fma(_943, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935)) + cbModelParam._m0[13u].w;
        float _1772 = fma(_943, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935)) + cbModelParam._m0[14u].w;
        float _1776 = fma(_943, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935)) + cbModelParam._m0[15u].w;
        float _1779 = fma(_885, cbModelParam._m0[13u].z, fma(_884, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883));
        float _1782 = fma(_885, cbModelParam._m0[14u].z, fma(_884, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883));
        float _1785 = fma(_885, cbModelParam._m0[15u].z, fma(_884, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883));
        float _1813;
        if (_1779 > 0.0)
        {
            _1813 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1813 = frontier_phi_19_17_ladder;
        }
        float _2019;
        if (_1782 > 0.0)
        {
            _2019 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2019 = frontier_phi_28_24_ladder;
        }
        float _2273;
        if (_1785 > 0.0)
        {
            _2273 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2273 = frontier_phi_40_35_ladder;
        }
        float _2275 = isnan(_2019) ? _1813 : (isnan(_1813) ? _2019 : min(_1813, _2019));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1779) + _1768;
        float _2281 = (_2276 * _1782) + _1772;
        float _2282 = (_2276 * _1785) + _1776;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1721);
            frontier_phi_18_40_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1801 = frontier_phi_18_40_ladder_2;
        _1803 = frontier_phi_18_40_ladder_1;
        _1805 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_883, _884, _885), _1721);
        _1801 = _1789.x * cbModelParam._m0[1u].y;
        _1803 = _1789.y * cbModelParam._m0[1u].y;
        _1805 = _1789.z * cbModelParam._m0[1u].y;
    }
    float _1809 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1809 : min(cbModelParam._m0[25u].w, _1809));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_943, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_943, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_943, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_885, cbModelParam._m0[21u].z, fma(_884, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883));
        float _1881 = fma(_885, cbModelParam._m0[22u].z, fma(_884, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883));
        float _1884 = fma(_885, cbModelParam._m0[23u].z, fma(_884, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883));
        float _2024;
        if (_1878 > 0.0)
        {
            _2024 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2024 = frontier_phi_30_26_ladder;
        }
        float _2300;
        if (_1881 > 0.0)
        {
            _2300 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2300 = frontier_phi_42_37_ladder;
        }
        float _2513;
        if (_1884 > 0.0)
        {
            _2513 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2513 = frontier_phi_51_48_ladder;
        }
        float _2515 = isnan(_2300) ? _2024 : (isnan(_2024) ? _2300 : min(_2024, _2300));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1878) + _1867;
        float _2521 = (_2516 * _1881) + _1871;
        float _2522 = (_2516 * _1884) + _1875;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1810);
            frontier_phi_27_51_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_27_51_ladder_2;
        _1905 = frontier_phi_27_51_ladder_1;
        _1907 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_883, _884, _885), _1810);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1920 = (((_906 * _864) + _907) * _878) * ((cbModelParam._m0[1u].w * (_1903 - _1801)) + _1801);
    float _1922 = (((_906 * _865) + _907) * _878) * ((cbModelParam._m0[1u].w * (_1905 - _1803)) + _1803);
    float _1924 = (((_906 * _866) + _907) * _878) * ((cbModelParam._m0[1u].w * (_1907 - _1805)) + _1805);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    uvec4 _1943 = floatBitsToUint(cbInstanceData._m0[_770 + 5u]);
    uint _1945 = _1943.x * 14u;
    uint _1946 = _1945 + 13u;
    float _1953 = _878 + (-1.0);
    float _1958 = (cbLight._m0[_1946].x * _1953) + 1.0;
    float _1959 = (cbLight._m0[_1946].y * _1953) + 1.0;
    float _1960 = (cbLight._m0[_1946].z * _1953) + 1.0;
    float _1961 = (cbLight._m0[_1946].w * _1953) + 1.0;
    uint _1962 = _1945 + 5u;
    float _1968 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1972 = _1945 + 4u;
    float _1978 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1982 = _1945 | 1u;
    float _1993 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_508, _509, _510));
    float _1996 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_508, _509, _510));
    float _4269 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _4280 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2001 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2003 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2010 = ((cbLight._m0[_1962].x * _1968) * _2003) + ((cbLight._m0[_1972].x * _1978) * _2001);
    float _2011 = ((_1968 * cbLight._m0[_1962].y) * _2003) + ((_1978 * cbLight._m0[_1972].y) * _2001);
    float _2012 = ((_1968 * cbLight._m0[_1962].z) * _2003) + ((_1978 * cbLight._m0[_1972].z) * _2001);
    uvec4 _2016 = floatBitsToUint(cbLight._m0[_1945 + 12u]);
    bool _2018 = _2016.x == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_2018)
    {
        _2029 = _2010;
        _2031 = _2011;
        _2033 = _2012;
    }
    else
    {
        uint _2037 = _1945 + 6u;
        float _2053 = (dot(vec3(cbLight._m0[_1945 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _4291 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2056 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2029 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _2010;
        _2031 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _2011;
        _2033 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _2012;
    }
    bool _2036 = _2016.y == 0u;
    float _2074;
    float _2076;
    float _2078;
    if (_2036)
    {
        _2074 = _2029;
        _2076 = _2031;
        _2078 = _2033;
    }
    else
    {
        uint _2244 = _1945 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1945 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4307 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2263 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2074 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2029;
        _2076 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2031;
        _2078 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2033;
    }
    uint _2081 = _1945 + 8u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _746) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1945].x + _534;
    float _2097 = cbLight._m0[_1945].y + _535;
    float _2098 = cbLight._m0[_1945].z + _536;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1945].xyz));
    float _4323 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _2110 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2111 = dot(vec3(_508, _509, _510), vec3(_2103, _2104, _2105));
    float _4345 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2103, _2104, _2105));
    float _4356 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2095 * _2095;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2131 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
    float _2132 = 0.959999978542327880859375 - _861;
    float _2134 = 0.959999978542327880859375 - _862;
    float _2135 = 0.959999978542327880859375 - _863;
    float _2142 = 1.0 - _2095;
    float _2153 = (0.5 / (((_2110 * ((_2109 * _2142) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2142) + _2095) * _2109))) * _2109;
    float _4367 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2155 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    uint _2166 = _1945 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _746) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1982].x + _534;
    float _2180 = cbLight._m0[_1982].y + _535;
    float _2181 = cbLight._m0[_1982].z + _536;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1982].xyz));
    float _4378 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2193 = dot(vec3(_508, _509, _510), vec3(_2186, _2187, _2188));
    float _4389 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2186, _2187, _2188));
    float _4400 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
    float _2219 = 1.0 - _2178;
    float _2229 = (0.5 / (((_2110 * ((_2192 * _2219) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2219) + _2178) * _2192))) * _2192;
    float _4411 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2241 = (((((_2212 * _2132) + _864) * cbLight._m0[_2166].x) * _2231) * _1968) + (((((_2131 * _2132) + _864) * cbLight._m0[_2081].x) * _2155) * _1978);
    float _2242 = (((((_2212 * _2134) + _865) * cbLight._m0[_2166].y) * _2231) * _1968) + (((((_2131 * _2134) + _865) * cbLight._m0[_2081].y) * _2155) * _1978);
    float _2243 = (((((_2212 * _2135) + _866) * cbLight._m0[_2166].z) * _2231) * _1968) + (((((_2131 * _2135) + _866) * cbLight._m0[_2081].z) * _2155) * _1978);
    float _2305;
    float _2307;
    float _2309;
    if (_2018)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1945 + 2u;
        uint _2315 = _1945 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _746) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _534;
        float _2332 = cbLight._m0[_2311].y + _535;
        float _2333 = cbLight._m0[_2311].z + _536;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2311].xyz));
        float _4422 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2345 = dot(vec3(_508, _509, _510), vec3(_2338, _2339, _2340));
        float _4433 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4444 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_2110 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2371) + _2330) * _2344))) * _2344;
        float _4455 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2305 = (((((_2364 * _2132) + _864) * cbLight._m0[_2315].x) * _2383) * _2384) + _2241;
        _2307 = (((((_2364 * _2134) + _865) * cbLight._m0[_2315].y) * _2383) * _2384) + _2242;
        _2309 = (((((_2364 * _2135) + _866) * cbLight._m0[_2315].z) * _2383) * _2384) + _2243;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2036)
    {
        _2419 = _2305;
        _2421 = _2307;
        _2423 = _2309;
    }
    else
    {
        uint _2430 = _1945 + 3u;
        uint _2434 = _1945 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _746) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _534;
        float _2451 = cbLight._m0[_2430].y + _535;
        float _2452 = cbLight._m0[_2430].z + _536;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2430].xyz));
        float _4471 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2464 = dot(vec3(_508, _509, _510), vec3(_2457, _2458, _2459));
        float _4482 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4493 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2483 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
        float _2490 = 1.0 - _2449;
        float _2500 = (0.5 / (((_2110 * ((_2463 * _2490) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2110 * _2490) + _2449) * _2463))) * _2463;
        float _4504 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2419 = (((((_2483 * _2132) + _864) * cbLight._m0[_2434].x) * _2502) * _2503) + _2305;
        _2421 = (((((_2483 * _2134) + _865) * cbLight._m0[_2434].y) * _2502) * _2503) + _2307;
        _2423 = (((((_2483 * _2135) + _866) * cbLight._m0[_2434].z) * _2502) * _2503) + _2309;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1943.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            uint _2918 = 0u;
            uint _2927;
            bool _2928;
            for (;;)
            {
                _2927 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                _2928 = _2927 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2928)
                {
                    frontier_phi_68_pred = _2914;
                    frontier_phi_68_pred_1 = _2917;
                    frontier_phi_68_pred_2 = _2916;
                    frontier_phi_68_pred_3 = _2915;
                    frontier_phi_68_pred_4 = _2913;
                    frontier_phi_68_pred_5 = _2912;
                }
                else
                {
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    uint _3063;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2927;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    for (;;)
                    {
                        uint _3067 = uint(findLSB(_3063)) + (_2918 << 5u);
                        uint _3064 = (_3063 + 4294967295u) & _3063;
                        uint _3069 = _3067 * 48u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3069)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3069 + 3u)).x));
                        uint _3089 = (_3067 * 48u) + 4u;
                        vec4 _3102 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3108 = (_3067 * 48u) + 8u;
                        vec3 _3119 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x));
                        float _3123 = _3083.x - _2579;
                        float _3124 = _3083.y - _2580;
                        float _3125 = _3083.z - _2581;
                        float _3126 = dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125));
                        float _3129 = inversesqrt(_3126);
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3133 = dot(vec3(_690, _693, _696), vec3(_3130, _3131, _3132));
                        float _3138 = 1.0 - (_3126 * _3083.w);
                        float _4530 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3139 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3140 = sqrt(_3126) * _3102.w;
                        float _3143 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                        float _3144 = _3143 * _3143;
                        float _3147 = ((1.0 - _3144) * _3133) + _3144;
                        float _3150 = _3140 * _3140;
                        float _3153 = ((isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0))) * _3139) / ((_3150 * 0.699999988079071044921875) + 1.0);
                        float _3157 = (-0.0) - _2579;
                        float _3158 = (-0.0) - _2580;
                        float _3159 = (-0.0) - _2581;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3164 = _3163 * _3157;
                        float _3165 = _3163 * _3158;
                        float _3166 = _3163 * _3159;
                        float _3174 = exp2(log2(1.0 / ((_3150 * 3.5) + 5.0)) * 0.25);
                        float _3175 = 1.0 - _888;
                        float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                        float _3183 = _3182 * _3182;
                        float _3184 = _3183 * _3183;
                        float _3185 = _3164 + _3130;
                        float _3186 = _3165 + _3131;
                        float _3187 = _3166 + _3132;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3195 = dot(vec3(_690, _693, _696), vec3(_3164, _3165, _3166));
                        float _4546 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3199 = dot(vec3(_690, _693, _696), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                        float _4557 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                        float _3207 = _3143 * _3183;
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3133) + _3208;
                        float _4568 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3213 = 1.0 - _3183;
                        float _3223 = (0.5 / (((_3212 * ((_3198 * _3213) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3183) * _3198))) * _3212;
                        float _4579 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3234 = (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3206 * _3206) * ((_3150 * 2.1991131305694580078125) + 3.141590118408203125))) * _3139;
                        _2987 = (_3153 * _3102.x) + _3060;
                        _2988 = (_3153 * _3102.y) + _3061;
                        _2989 = (_3153 * _3102.z) + _3062;
                        _2984 = (_3234 * _3119.x) + _3057;
                        _2985 = (_3234 * _3119.y) + _3058;
                        _2986 = (_3234 * _3119.z) + _3059;
                        if (_3064 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _3064;
                        }
                    }
                    frontier_phi_68_pred = _2986;
                    frontier_phi_68_pred_1 = _2989;
                    frontier_phi_68_pred_2 = _2988;
                    frontier_phi_68_pred_3 = _2987;
                    frontier_phi_68_pred_4 = _2985;
                    frontier_phi_68_pred_5 = _2984;
                }
                _2756 = frontier_phi_68_pred;
                _2762 = frontier_phi_68_pred_1;
                _2760 = frontier_phi_68_pred_2;
                _2758 = frontier_phi_68_pred_3;
                _2754 = frontier_phi_68_pred_4;
                _2752 = frontier_phi_68_pred_5;
                uint _2919 = _2918 + 1u;
                if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2912 = _2752;
                    _2913 = _2754;
                    _2914 = _2756;
                    _2915 = _2758;
                    _2916 = _2760;
                    _2917 = _2762;
                    _2918 = _2919;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((4294967295u << _2768) & _2625) == 0u)
        {
            _2880 = _2751;
            _2882 = _2753;
            _2884 = _2755;
            _2886 = _2757;
            _2888 = _2759;
            _2890 = _2761;
        }
        else
        {
            float _2905 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2906 = _2905 * _2579;
            float _2907 = _2905 * _2580;
            float _2908 = _2905 * _2581;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _3040 = _2751;
                float _3041 = _2753;
                float _3042 = _2755;
                float _3043 = _2757;
                float _3044 = _2759;
                float _3045 = _2761;
                uint _3046 = _2768;
                uint _3055;
                bool _3056;
                for (;;)
                {
                    _3055 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_3046 << 2u)) >> 2u)).x;
                    _3056 = _3055 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3056)
                    {
                        frontier_phi_79_pred = _3045;
                        frontier_phi_79_pred_1 = _3044;
                        frontier_phi_79_pred_2 = _3043;
                        frontier_phi_79_pred_3 = _3042;
                        frontier_phi_79_pred_4 = _3041;
                        frontier_phi_79_pred_5 = _3040;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3261 = _3040;
                        float _3262 = _3041;
                        float _3263 = _3042;
                        float _3264 = _3043;
                        float _3265 = _3044;
                        float _3266 = _3045;
                        uint _3267 = _3055;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        vec3 _3321;
                        vec4 _3336;
                        vec4 _3352;
                        float _3399;
                        bool _3400;
                        for (;;)
                        {
                            uint _3278 = ((_3046 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3278 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3278 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3278 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3355 = (_3278 * 40u) + 24u;
                            vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3374 = (_3278 * 40u) + 28u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3399 = fma(_2581, _3387.z, fma(_2580, _3387.y, _3387.x * _2579)) + _3387.w;
                            _3400 = !((fma(_2581, _3368.z, fma(_2580, _3368.y, _3368.x * _2579)) + _3368.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3400)
                            {
                                float _3427 = _3293.x - _2579;
                                float _3428 = _3293.y - _2580;
                                float _3429 = _3293.z - _2581;
                                float _3430 = dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429));
                                float _3433 = inversesqrt(_3430);
                                float _3434 = _3433 * _3427;
                                float _3435 = _3433 * _3428;
                                float _3436 = _3433 * _3429;
                                float _3440 = 1.0 - (_3430 / (_3294 * _3294));
                                float _4590 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3445 = sqrt(_3430) * _3309.w;
                                float _3447 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                                float _3448 = _3447 * _3447;
                                float _3451 = ((1.0 - _3448) * dot(vec3(_3434, _3435, _3436), vec3(_690, _693, _696))) + _3448;
                                float _3454 = _3445 * _3445;
                                float _3458 = (fma(_2581, _3336.z, fma(_2580, _3336.y, _3336.x * _2579)) + _3336.w) / _3399;
                                float _3459 = (fma(_2581, _3352.z, fma(_2580, _3352.y, _3352.x * _2579)) + _3352.w) / _3399;
                                float _3463 = 1.0 - dot(vec2(_3458, _3459), vec2(_3458, _3459));
                                float _4606 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3465 = _3464 * (((isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))) * _3441) / ((_3454 * 0.699999988079071044921875) + 1.0));
                                float _3477 = exp2(log2(1.0 / ((_3454 * 3.5) + 5.0)) * 0.25);
                                float _3478 = 1.0 - _888;
                                float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                                float _3486 = _3485 * _3485;
                                float _3487 = _3486 * _3486;
                                float _3488 = _3434 - _2906;
                                float _3489 = _3435 - _2907;
                                float _3490 = _3436 - _2908;
                                float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                                float _3498 = dot(vec3(_690, _693, _696), vec3((-0.0) - _2906, (-0.0) - _2907, (-0.0) - _2908));
                                float _4617 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3502 = dot(vec3(_690, _693, _696), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                                float _4628 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3505 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                                float _3510 = _3447 * _3486;
                                float _3511 = _3510 * _3510;
                                float _3517 = ((1.0 - _3511) * dot(vec3(_690, _693, _696), vec3(_3434, _3435, _3436))) + _3511;
                                float _4639 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3519 = 1.0 - _3486;
                                float _3529 = (0.5 / (((_3518 * ((_3501 * _3519) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3486) * _3501))) * _3518;
                                float _4650 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3539 = (_3464 * _3441) * (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) / ((_3509 * _3509) * ((_3454 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3465 * _3309.z;
                                frontier_phi_85_pred_1 = _3465 * _3309.y;
                                frontier_phi_85_pred_2 = _3465 * _3309.x;
                                frontier_phi_85_pred_3 = _3539 * _3321.z;
                                frontier_phi_85_pred_4 = _3539 * _3321.y;
                                frontier_phi_85_pred_5 = _3539 * _3321.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_85_pred;
                            _3547 = frontier_phi_85_pred_1;
                            _3546 = frontier_phi_85_pred_2;
                            _3545 = frontier_phi_85_pred_3;
                            _3544 = frontier_phi_85_pred_4;
                            _3543 = frontier_phi_85_pred_5;
                            _3251 = _3546 + _3264;
                            _3252 = _3547 + _3265;
                            _3253 = _3548 + _3266;
                            _3248 = _3543 + _3261;
                            _3249 = _3544 + _3262;
                            _3250 = _3545 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3253;
                        frontier_phi_79_pred_1 = _3252;
                        frontier_phi_79_pred_2 = _3251;
                        frontier_phi_79_pred_3 = _3250;
                        frontier_phi_79_pred_4 = _3249;
                        frontier_phi_79_pred_5 = _3248;
                    }
                    _2891 = frontier_phi_79_pred;
                    _2889 = frontier_phi_79_pred_1;
                    _2887 = frontier_phi_79_pred_2;
                    _2885 = frontier_phi_79_pred_3;
                    _2883 = frontier_phi_79_pred_4;
                    _2881 = frontier_phi_79_pred_5;
                    uint _3047 = _3046 + 1u;
                    if (_3047 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3040 = _2881;
                        _3041 = _2883;
                        _3042 = _2885;
                        _3043 = _2887;
                        _3044 = _2889;
                        _3045 = _2891;
                        _3046 = _3047;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2887;
                frontier_phi_60_61_ladder_1 = _2891;
                frontier_phi_60_61_ladder_2 = _2889;
                frontier_phi_60_61_ladder_3 = _2885;
                frontier_phi_60_61_ladder_4 = _2883;
                frontier_phi_60_61_ladder_5 = _2881;
            }
            else
            {
                frontier_phi_60_61_ladder = _2757;
                frontier_phi_60_61_ladder_1 = _2761;
                frontier_phi_60_61_ladder_2 = _2759;
                frontier_phi_60_61_ladder_3 = _2755;
                frontier_phi_60_61_ladder_4 = _2753;
                frontier_phi_60_61_ladder_5 = _2751;
            }
            _2880 = frontier_phi_60_61_ladder_5;
            _2882 = frontier_phi_60_61_ladder_4;
            _2884 = frontier_phi_60_61_ladder_3;
            _2886 = frontier_phi_60_61_ladder;
            _2888 = frontier_phi_60_61_ladder_2;
            _2890 = frontier_phi_60_61_ladder_1;
        }
        float _2895 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2637 = (_2895 * _2886) + _2074;
        _2639 = (_2895 * _2888) + _2076;
        _2641 = (_2895 * _2890) + _2078;
        _2643 = ((_2880 * _864) * _2895) + _2419;
        _2645 = ((_2882 * _865) * _2895) + _2421;
        _2647 = ((_2884 * _866) * _2895) + _2423;
    }
    else
    {
        _2637 = _2074;
        _2639 = _2076;
        _2641 = _2078;
        _2643 = _2419;
        _2645 = _2421;
        _2647 = _2423;
    }
    uint _2653 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _2659 = cbInstanceData._m0[_2653].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _550) + cbMatDynParam._m0[7u].x) + (((_591 - (_591 * _516)) + (cbMatDynParam._m0[11u].x * _622)) * cbMatDynParam._m0[9u].x));
    float _2660 = cbInstanceData._m0[_2653].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _550) + cbMatDynParam._m0[7u].y) + (((_593 - (_593 * _516)) + (cbMatDynParam._m0[11u].y * _622)) * cbMatDynParam._m0[9u].y));
    float _2661 = cbInstanceData._m0[_2653].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _550) + cbMatDynParam._m0[7u].z) + (((_595 - (_595 * _516)) + (cbMatDynParam._m0[11u].z * _622)) * cbMatDynParam._m0[9u].z));
    float _4666 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4677 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4688 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4699 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2679 = (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2637 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _878))) + ((_2643 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + _2659;
    float _2681 = (_2660 + ((_2645 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2639 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _878)));
    float _2683 = (_2661 + ((_2647 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1710)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2641 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _878)));
    float _2684 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2685 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2686 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2691 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) - _577) * _550) + _577));
    float _2696 = cbInstanceData._m0[_770 + 6u].w * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)));
    float _2701 = _666 / cbSceneParam._m0[86u].x;
    float _2702 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2716 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2718 = _2716.x;
    float _2719 = _2716.y;
    float _2720 = _2716.z;
    float _2721 = _2716.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2777 = _2776 / _648;
        float _2788 = _2777 * _287;
        float _2789 = _288 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2791 = _2777 * _289;
        float _2793 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2789;
        float _2801 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2790 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2941 = 1.0 / cbSceneParam._m0[80u].x;
            float _2942 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2943 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            _2997 = ((abs(_2801 / _2790) * cbSceneParam._m0[80u].y) * ((((_2952 - _2953) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))))) * _2941)) - ((exp2(_2811 * _2952) - exp2(_2811 * _2953)) * _2941))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2721);
        _2813 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2718;
        _2815 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2719;
        _2817 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2720;
        _2819 = _3008 * _2721;
    }
    else
    {
        _2813 = _2718;
        _2815 = _2719;
        _2817 = _2720;
        _2819 = _2721;
    }
    bool _3035;
    vec4 _2829;
    vec4 _2851;
    float _2853;
    float _2857;
    float _2858;
    float _2859;
    float _2862;
    float _2865;
    float _2868;
    float _2869;
    bool _2879;
    for (;;)
    {
        _2829 = cbMatDynParam._m0[0u];
        float _2831 = roundEven(_2829.y);
        bool _2832 = _2831 == 3.0;
        float _2833 = log2(_2819);
        float _2837 = exp2(_2833 * cbSceneParam._m0[78u].x);
        float _2838 = exp2(_2833 * cbSceneParam._m0[78u].y);
        float _2839 = exp2(_2833 * cbSceneParam._m0[78u].z);
        float _2840 = _2837 * _2684;
        float _2841 = _2838 * _2685;
        float _2842 = _2839 * _2686;
        float _2849 = _655 + (-0.5);
        _2851 = cbMtdParam._m0[1u];
        _2853 = _2851.y * _2849;
        float _2856 = (_2831 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2857 = _2856 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2813)));
        _2858 = _2856 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
        _2859 = _2856 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
        _2862 = ((_2691 * _2659) * _2837) * _2856;
        _2865 = ((_2691 * _2660) * _2838) * _2856;
        _2868 = ((_2691 * _2661) * _2839) * _2856;
        _2869 = _2849 * 0.999000012874603271484375;
        _2879 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2879)
        {
            if ((cbInstanceData._m0[_770 + 7u].x + _2869) < 0.5)
            {
                _3035 = true;
                break;
            }
        }
        uint _2976 = _771 + uint(_2829.w);
        if ((cbInstanceData._m0[_2976].w < 1.0) && ((cbInstanceData._m0[_2976].w + _2869) < 0.5))
        {
            _3035 = true;
            break;
        }
        if ((_2853 + _398) < _2851.x)
        {
            _3035 = true;
            break;
        }
        _3035 = false;
        break;
    }
    float _3239;
    if (_3035)
    {
        discard_state = true;
        _3239 = 0.0;
    }
    else
    {
        _3239 = _2696;
    }
    SV_Target.x = _2857;
    SV_Target.y = _2858;
    SV_Target.z = _2859;
    SV_Target.w = _3239;
    SV_Target_1.x = _2862;
    SV_Target_1.y = _2865;
    SV_Target_1.z = _2868;
    SV_Target_1.w = _2696;
    discard_exit();
}


