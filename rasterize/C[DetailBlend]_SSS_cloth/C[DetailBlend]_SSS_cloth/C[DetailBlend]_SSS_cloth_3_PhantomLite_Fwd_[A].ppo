#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1356;
float _3773;
float _3774;
float _3775;
float _3776;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _318 = exp2(log2(_311 * 22.0) * 260.0);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _334 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _344 = cbMtdParam._m0[10u].x * _334.x;
    float _345 = cbMtdParam._m0[10u].y * _334.y;
    float _346 = cbMtdParam._m0[10u].z * _334.z;
    vec4 _358 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _378 = (((cbMtdParam._m0[9u].x * _358.x) - _344) * _320) + _344;
    float _379 = (((cbMtdParam._m0[9u].y * _358.y) - _345) * _320) + _345;
    float _380 = (((cbMtdParam._m0[9u].z * _358.z) - _346) * _320) + _346;
    float _385 = exp2(log2(1.0 - _306.w) * 8.0);
    vec4 _397 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _439 = (((((cbMtdParam._m0[12u].x * _397.x) - _378) * _385) + _378) * 4.55000019073486328125) * _431.x;
    float _441 = (((((cbMtdParam._m0[12u].y * _397.y) - _379) * _385) + _379) * 4.55000019073486328125) * _431.y;
    float _443 = (((((cbMtdParam._m0[12u].z * _397.z) - _380) * _385) + _380) * 4.55000019073486328125) * _431.z;
    float _444 = _431.w * _358.w;
    float _472 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _320) + cbMtdParam._m0[15u].y;
    float _475 = ((cbMtdParam._m0[14u].y - _472) * _385) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[13u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _517 = (((_508.z - _496) + cbMtdParam._m0[13u].x) * _320) + _496;
    vec4 _530 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _547 = (((_320 * (_311 + (-0.5))) + 0.5) * 2.0) * ((((_530.z - _517) + cbMtdParam._m0[14u].x) * _385) + _517);
    float _551 = (_306.x * 2.0) + (-1.0);
    float _553 = (_306.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _3795 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))));
    float _564 = ((_508.x - _489) * _320) + _489;
    float _565 = ((_508.y - _490) * _320) + _490;
    float _578 = ((((((_530.x - _564) * _385) + _564) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _551;
    float _579 = ((((((_530.y - _565) * _385) + _565) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _553;
    float _582 = fma(_559, _234, fma(_579, _226 * TANGENT.x, (_212 * _204) * _578));
    float _585 = fma(_559, _235, fma(_579, _226 * TANGENT.y, (_212 * _205) * _578));
    float _588 = fma(_559, _236, fma(_579, _226 * TANGENT.z, (_212 * _206) * _578));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = _592 * _582;
    float _594 = _592 * _585;
    float _595 = _592 * _588;
    float _3806 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _596 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _597 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _598 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _599 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _600 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _601 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _609 = cbMatDynParam._m0[9u].x * _598;
    float _610 = cbMatDynParam._m0[9u].y * _599;
    float _611 = cbMatDynParam._m0[9u].z * _600;
    float _618 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _619 = _618 * _291;
    float _620 = _618 * _292;
    float _621 = _618 * _293;
    float _622 = dot(vec3(_593, _594, _595), vec3(_619, _620, _621));
    float _628 = abs(exp2(log2(_622) * cbMatDynParam._m0[12u].x));
    float _629 = isnan(0.100000001490116119384765625) ? _628 : (isnan(_628) ? 0.100000001490116119384765625 : max(_628, 0.100000001490116119384765625));
    float _635 = ((isnan(0.699999988079071044921875) ? _629 : (isnan(_629) ? 0.699999988079071044921875 : min(_629, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _658 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3882 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3893 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _666 = dot(vec3(_593, _594, _595), vec3(0.0, -1.0, 0.0));
    float _3904 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _676 = (_669 * _598) * cbMatDynParam._m0[11u].x;
    float _678 = (_669 * _599) * cbMatDynParam._m0[11u].y;
    float _680 = (_669 * _600) * cbMatDynParam._m0[11u].z;
    float _687 = dot(vec3(_619, _620, _621), vec3(_593, _594, _595));
    float _690 = _687 * 2.0;
    float _700 = dot(vec3((-0.0) - (_619 - (_690 * _593)), (-0.0) - (_620 - (_690 * _594)), (-0.0) - (_621 - (_690 * _595))), vec3(0.0, -1.0, 0.0));
    float _3915 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _707 = exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 4.0);
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _738 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _740 = _738.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1037 = sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293));
        float _1043 = (cbMatDynParam._m0[5u].x * _1037) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1048 = (cbMatDynParam._m0[5u].z * _1037) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _1044)) + _1044) < ((_740 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _751 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _752 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _754 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _756 = _754.w;
    float _774 = fma(_595, cbSceneParam._m0[5u].z, fma(_594, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _593));
    float _777 = fma(_595, cbSceneParam._m0[6u].z, fma(_594, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _593));
    float _780 = fma(_595, cbSceneParam._m0[7u].z, fma(_594, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _593));
    vec4 _782 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _784 = _782.x;
    float _796 = (((_782.y - _597) + (_782.w * _597)) * cbMtdParam._m0[3u].x) + _597;
    vec4 _797 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _813 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_784 * _784)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _797.z;
    float _821 = (((cbMatDynParam._m0[15u].x - _601) * cbMatDynParam._m0[15u].w) * _813) + _601;
    float _829 = ((_813 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _796)) + _796;
    uint _853 = uint(roundEven(NORMAL.w)) * 13u;
    uint _854 = _853 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * _609) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * _610) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * _611) * cbInstanceData._m0[_855].z;
    float _3948 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _867 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _872 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _883 = (((_872.x - _821) + (_872.w * _821)) * cbMtdParam._m0[3u].x) + _821;
    float _896 = (cbMtdParam._m0[3u].x * (((_864 * _756) - _864) + _867.x)) + _864;
    float _897 = (cbMtdParam._m0[3u].x * (((_865 * _756) - _865) + _867.y)) + _865;
    float _898 = (cbMtdParam._m0[3u].x * (((_866 * _756) - _866) + _867.z)) + _866;
    float _912 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_821 * (_609 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_821 * (_610 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_821 * (_611 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _916 = _912 * cbMatDynParam._m0[13u].w;
    float _926 = (_916 * (cbMatDynParam._m0[13u].x - _896)) + _896;
    float _927 = (_916 * (cbMatDynParam._m0[13u].y - _897)) + _897;
    float _928 = (_916 * (cbMatDynParam._m0[13u].z - _898)) + _898;
    float _936 = ((_912 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _883)) + _883;
    float _937 = 1.0 - _936;
    float _938 = _937 * _926;
    float _939 = _937 * _927;
    float _940 = _937 * _928;
    float _944 = (_926 + (-0.039999999105930328369140625)) * _936;
    float _945 = (_927 + (-0.039999999105930328369140625)) * _936;
    float _946 = (_928 + (-0.039999999105930328369140625)) * _936;
    float _947 = _944 + 0.039999999105930328369140625;
    float _948 = _945 + 0.039999999105930328369140625;
    float _949 = _946 + 0.039999999105930328369140625;
    vec4 _958 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _751, cbSceneParam._m0[86u].y * _752));
    float _961 = _958.x * TEXCOORD_4;
    float _962 = _622 * 2.0;
    float _966 = (_962 * _593) - _619;
    float _967 = (_962 * _594) - _620;
    float _968 = (_962 * _595) - _621;
    float _969 = abs(_687);
    float _3981 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_829);
    float _983 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _989 = (1.0 - _983) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _990 = _983 * _971;
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1082 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1086 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1090 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1113 = _1018 + _593;
        float _1114 = _1022 + _594;
        float _1115 = _1026 + _595;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1082 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1086 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1090 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_593, _594, _595), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4029 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_593, _594, _595), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4062 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_593, _594, _595), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4095 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1399 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1403 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1407 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1430 = _1018 + _593;
        float _1431 = _1022 + _594;
        float _1432 = _1026 + _595;
        float _1442 = fma(_1432, cbModelParam._m0[30u].z, fma(_1431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1430)) - _1399;
        float _1443 = fma(_1432, cbModelParam._m0[31u].z, fma(_1431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1430)) - _1403;
        float _1444 = fma(_1432, cbModelParam._m0[32u].z, fma(_1431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1430)) - _1407;
        float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
        float _1461 = ((_1448 * _1442) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1399 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1448 * _1443) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1403 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1448 * _1444) / cbModelParam._m0[35u].z) + ((((((_1407 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1461, _1462, _1463), 0.0);
        float _1498 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1465.x + (-0.5));
        float _1500 = _1498 * (_1465.y + (-0.5));
        float _1501 = _1498 * (_1465.z + (-0.5));
        float _1508 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1472.x + (-0.5));
        float _1510 = _1508 * (_1472.y + (-0.5));
        float _1511 = _1508 * (_1472.z + (-0.5));
        float _1518 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1479.x + (-0.5));
        float _1520 = _1518 * (_1479.y + (-0.5));
        float _1521 = _1518 * (_1479.z + (-0.5));
        float _1528 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1486.x + (-0.5));
        float _1530 = _1528 * (_1486.y + (-0.5));
        float _1531 = _1528 * (_1486.z + (-0.5));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = _1499 * 0.5;
        float _1536 = _1509 * 0.5;
        float _1537 = _1519 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_593, _594, _595), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4158 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1562 + 1.0))) + _1567) * _1532;
        float _1577 = _1500 * 0.5;
        float _1578 = _1510 * 0.5;
        float _1579 = _1520 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_593, _594, _595), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4191 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1604 + 1.0))) + _1609) * _1533;
        float _1619 = _1501 * 0.5;
        float _1620 = _1511 * 0.5;
        float _1621 = _1521 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_593, _594, _595), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4224 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1646 + 1.0))) + _1651) * _1534;
        _1668 = _1501;
        _1669 = _1500;
        _1670 = _1499;
        _1671 = _1511;
        _1672 = _1510;
        _1673 = _1509;
        _1674 = _1521;
        _1675 = _1520;
        _1676 = _1519;
        _1677 = _1534;
        _1678 = _1533;
        _1679 = _1532;
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
    }
    else
    {
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = _1356;
        _1676 = _1356;
        _1677 = _1356;
        _1678 = _1356;
        _1679 = _1356;
        _1680 = 0.0;
        _1681 = 0.0;
        _1682 = 0.0;
    }
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1368)) + _1368;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1369)) + _1369;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1370)) + _1370;
    float _1715 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1692));
    float _1736 = _966 * 0.5;
    float _1737 = _967 * 0.5;
    float _1738 = _968 * 0.5;
    float _1739 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1742 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1745 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1752 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1756 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1760 = dot(vec4(_1736, _1737, _1738, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1767 = dot(vec4(cbModelParam._m0[39u]), vec4(_1736, _1737, _1738, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1767) ? 0.0 : (isnan(0.0) ? _1767 : max(0.0, _1767))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1736, _1737, _1738, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _829);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_968, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966));
        float _1863 = fma(_968, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966));
        float _1866 = fma(_968, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1894 = frontier_phi_19_17_ladder;
        }
        float _2100;
        if (_1863 > 0.0)
        {
            _2100 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2100 = frontier_phi_28_24_ladder;
        }
        float _2354;
        if (_1866 > 0.0)
        {
            _2354 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2354 = frontier_phi_40_35_ladder;
        }
        float _2356 = isnan(_2100) ? _1894 : (isnan(_1894) ? _2100 : min(_1894, _2100));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1860) + _1849;
        float _2362 = (_2357 * _1863) + _1853;
        float _2363 = (_2357 * _1866) + _1857;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_18_40_ladder = _2491.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2491.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2491.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_18_40_ladder_2;
        _1884 = frontier_phi_18_40_ladder_1;
        _1886 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_966, _967, _968), _1802);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _829);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_968, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966));
        float _1962 = fma(_968, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966));
        float _1965 = fma(_968, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966));
        float _2105;
        if (_1959 > 0.0)
        {
            _2105 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2105 = frontier_phi_30_26_ladder;
        }
        float _2381;
        if (_1962 > 0.0)
        {
            _2381 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2381 = frontier_phi_42_37_ladder;
        }
        float _2594;
        if (_1965 > 0.0)
        {
            _2594 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2594 = frontier_phi_51_48_ladder;
        }
        float _2596 = isnan(_2381) ? _2105 : (isnan(_2105) ? _2381 : min(_2105, _2381));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1959) + _1948;
        float _2602 = (_2597 * _1962) + _1952;
        float _2603 = (_2597 * _1965) + _1956;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_27_51_ladder = _2827.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2827.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2827.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_27_51_ladder_2;
        _1986 = frontier_phi_27_51_ladder_1;
        _1988 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_966, _967, _968), _1891);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2001 = (((_989 * _947) + _990) * _961) * ((cbModelParam._m0[1u].w * (_1984 - _1882)) + _1882);
    float _2003 = (((_989 * _948) + _990) * _961) * ((cbModelParam._m0[1u].w * (_1986 - _1884)) + _1884);
    float _2005 = (((_989 * _949) + _990) * _961) * ((cbModelParam._m0[1u].w * (_1988 - _1886)) + _1886);
    float _2008 = fma(_2005, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_2005, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_2005, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_853 + 5u]);
    uint _2026 = _2024.x * 14u;
    uint _2027 = _2026 + 13u;
    float _2034 = _961 + (-1.0);
    float _2039 = (cbLight._m0[_2027].x * _2034) + 1.0;
    float _2040 = (cbLight._m0[_2027].y * _2034) + 1.0;
    float _2041 = (cbLight._m0[_2027].z * _2034) + 1.0;
    float _2042 = (cbLight._m0[_2027].w * _2034) + 1.0;
    uint _2043 = _2026 + 5u;
    float _2049 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2053 = _2026 + 4u;
    float _2059 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2063 = _2026 | 1u;
    float _2074 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_593, _594, _595));
    float _2077 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_593, _594, _595));
    float _4360 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _4371 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2082 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2084 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2091 = ((cbLight._m0[_2043].x * _2049) * _2084) + ((cbLight._m0[_2053].x * _2059) * _2082);
    float _2092 = ((_2049 * cbLight._m0[_2043].y) * _2084) + ((_2059 * cbLight._m0[_2053].y) * _2082);
    float _2093 = ((_2049 * cbLight._m0[_2043].z) * _2084) + ((_2059 * cbLight._m0[_2053].z) * _2082);
    uvec4 _2097 = floatBitsToUint(cbLight._m0[_2026 + 12u]);
    bool _2099 = _2097.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2099)
    {
        _2110 = _2091;
        _2112 = _2092;
        _2114 = _2093;
    }
    else
    {
        uint _2118 = _2026 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_2026 + 2u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4382 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2137 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2091;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2092;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2093;
    }
    bool _2117 = _2097.y == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2117)
    {
        _2155 = _2110;
        _2157 = _2112;
        _2159 = _2114;
    }
    else
    {
        uint _2325 = _2026 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2026 + 3u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4398 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2344 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2155 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2110;
        _2157 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2112;
        _2159 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2114;
    }
    uint _2162 = _2026 + 8u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _829) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_2026].x + _619;
    float _2178 = cbLight._m0[_2026].y + _620;
    float _2179 = cbLight._m0[_2026].z + _621;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2026].xyz));
    float _4414 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2191 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2192 = dot(vec3(_593, _594, _595), vec3(_2184, _2185, _2186));
    float _4436 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2184, _2185, _2186));
    float _4447 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2176 * _2176;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2212 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2213 = 0.959999978542327880859375 - _944;
    float _2215 = 0.959999978542327880859375 - _945;
    float _2216 = 0.959999978542327880859375 - _946;
    float _2223 = 1.0 - _2176;
    float _2234 = (0.5 / (((_2191 * ((_2190 * _2223) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2223) + _2176) * _2190))) * _2190;
    float _4458 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    uint _2247 = _2026 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _829) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2063].x + _619;
    float _2261 = cbLight._m0[_2063].y + _620;
    float _2262 = cbLight._m0[_2063].z + _621;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2063].xyz));
    float _4469 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2274 = dot(vec3(_593, _594, _595), vec3(_2267, _2268, _2269));
    float _4480 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2267, _2268, _2269));
    float _4491 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2300 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2191 * ((_2273 * _2300) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2300) + _2259) * _2273))) * _2273;
    float _4502 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2322 = (((((_2293 * _2213) + _947) * cbLight._m0[_2247].x) * _2312) * _2049) + (((((_2212 * _2213) + _947) * cbLight._m0[_2162].x) * _2236) * _2059);
    float _2323 = (((((_2293 * _2215) + _948) * cbLight._m0[_2247].y) * _2312) * _2049) + (((((_2212 * _2215) + _948) * cbLight._m0[_2162].y) * _2236) * _2059);
    float _2324 = (((((_2293 * _2216) + _949) * cbLight._m0[_2247].z) * _2312) * _2049) + (((((_2212 * _2216) + _949) * cbLight._m0[_2162].z) * _2236) * _2059);
    float _2386;
    float _2388;
    float _2390;
    if (_2099)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2026 + 2u;
        uint _2396 = _2026 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _829) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _619;
        float _2413 = cbLight._m0[_2392].y + _620;
        float _2414 = cbLight._m0[_2392].z + _621;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2392].xyz));
        float _4513 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2426 = dot(vec3(_593, _594, _595), vec3(_2419, _2420, _2421));
        float _4524 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4535 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2452 = 1.0 - _2411;
        float _2462 = (0.5 / (((_2191 * ((_2425 * _2452) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2452) + _2411) * _2425))) * _2425;
        float _4546 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2386 = (((((_2445 * _2213) + _947) * cbLight._m0[_2396].x) * _2464) * _2465) + _2322;
        _2388 = (((((_2445 * _2215) + _948) * cbLight._m0[_2396].y) * _2464) * _2465) + _2323;
        _2390 = (((((_2445 * _2216) + _949) * cbLight._m0[_2396].z) * _2464) * _2465) + _2324;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2117)
    {
        _2500 = _2386;
        _2502 = _2388;
        _2504 = _2390;
    }
    else
    {
        uint _2511 = _2026 + 3u;
        uint _2515 = _2026 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _829) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _619;
        float _2532 = cbLight._m0[_2511].y + _620;
        float _2533 = cbLight._m0[_2511].z + _621;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2511].xyz));
        float _4562 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2545 = dot(vec3(_593, _594, _595), vec3(_2538, _2539, _2540));
        float _4573 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4584 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2191 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2571) + _2530) * _2544))) * _2544;
        float _4595 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2500 = (((((_2564 * _2213) + _947) * cbLight._m0[_2515].x) * _2583) * _2584) + _2386;
        _2502 = (((((_2564 * _2215) + _948) * cbLight._m0[_2515].y) * _2583) * _2584) + _2388;
        _2504 = (((((_2564 * _2216) + _949) * cbLight._m0[_2515].z) * _2583) * _2584) + _2390;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2024.y == 0u)
    {
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2659;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2659;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2659;
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.x;
        uint _2686 = uint((float(_2674.y) * floor(float(uint(cbSceneParam._m0[85u].y * _752) / _2675))) + floor(float(uint(cbSceneParam._m0[85u].x * _751) / _2675)));
        float _2696 = (log2(_2662 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        uint _2700 = uint(isnan(14.0) ? _2697 : (isnan(_2697) ? 14.0 : min(_2697, 14.0)));
        uvec4 _2705 = texelFetch(g_lightClusterGridBuffer, int(((_2700 << 2u) + (_2686 << 6u)) >> 2u));
        uint _2706 = _2705.x;
        uint _2707 = _2674.z;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((((1u << ((_2707 >> 4u) & 15u)) + 4294967295u) & _2706) == 0u) || ((_2707 & 240u) == 0u))
        {
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
        }
        else
        {
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            uint _2999 = 0u;
            uint _3008;
            bool _3009;
            for (;;)
            {
                _3008 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                _3009 = _3008 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3009)
                {
                    frontier_phi_68_pred = _2995;
                    frontier_phi_68_pred_1 = _2998;
                    frontier_phi_68_pred_2 = _2997;
                    frontier_phi_68_pred_3 = _2996;
                    frontier_phi_68_pred_4 = _2994;
                    frontier_phi_68_pred_5 = _2993;
                }
                else
                {
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    uint _3144;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _3008;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3148 = uint(findLSB(_3144)) + (_2999 << 5u);
                        uint _3145 = (_3144 + 4294967295u) & _3144;
                        uint _3150 = _3148 * 48u;
                        vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3170 = (_3148 * 48u) + 4u;
                        vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 3u)).x));
                        uint _3189 = (_3148 * 48u) + 8u;
                        vec3 _3200 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x));
                        float _3204 = _3164.x - _2660;
                        float _3205 = _3164.y - _2661;
                        float _3206 = _3164.z - _2662;
                        float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                        float _3210 = inversesqrt(_3207);
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3214 = dot(vec3(_774, _777, _780), vec3(_3211, _3212, _3213));
                        float _3219 = 1.0 - (_3207 * _3164.w);
                        float _4621 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3221 = sqrt(_3207) * _3183.w;
                        float _3224 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3214) + _3225;
                        float _3231 = _3221 * _3221;
                        float _3234 = ((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3220) / ((_3231 * 0.699999988079071044921875) + 1.0);
                        float _3238 = (-0.0) - _2660;
                        float _3239 = (-0.0) - _2661;
                        float _3240 = (-0.0) - _2662;
                        float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3255 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                        float _3256 = 1.0 - _971;
                        float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                        float _3264 = _3263 * _3263;
                        float _3265 = _3264 * _3264;
                        float _3266 = _3245 + _3211;
                        float _3267 = _3246 + _3212;
                        float _3268 = _3247 + _3213;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3276 = dot(vec3(_774, _777, _780), vec3(_3245, _3246, _3247));
                        float _4637 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3280 = dot(vec3(_774, _777, _780), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                        float _4648 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3283 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                        float _3288 = _3224 * _3264;
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3214) + _3289;
                        float _4659 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3294 = 1.0 - _3264;
                        float _3304 = (0.5 / (((_3293 * ((_3279 * _3294) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3293 * _3294) + _3264) * _3279))) * _3293;
                        float _4670 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3315 = (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3287 * _3287) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125))) * _3220;
                        _3068 = (_3234 * _3183.x) + _3141;
                        _3069 = (_3234 * _3183.y) + _3142;
                        _3070 = (_3234 * _3183.z) + _3143;
                        _3065 = (_3315 * _3200.x) + _3138;
                        _3066 = (_3315 * _3200.y) + _3139;
                        _3067 = (_3315 * _3200.z) + _3140;
                        if (_3145 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3145;
                        }
                    }
                    frontier_phi_68_pred = _3067;
                    frontier_phi_68_pred_1 = _3070;
                    frontier_phi_68_pred_2 = _3069;
                    frontier_phi_68_pred_3 = _3068;
                    frontier_phi_68_pred_4 = _3066;
                    frontier_phi_68_pred_5 = _3065;
                }
                _2837 = frontier_phi_68_pred;
                _2843 = frontier_phi_68_pred_1;
                _2841 = frontier_phi_68_pred_2;
                _2839 = frontier_phi_68_pred_3;
                _2835 = frontier_phi_68_pred_4;
                _2833 = frontier_phi_68_pred_5;
                uint _3000 = _2999 + 1u;
                if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2993 = _2833;
                    _2994 = _2835;
                    _2995 = _2837;
                    _2996 = _2839;
                    _2997 = _2841;
                    _2998 = _2843;
                    _2999 = _3000;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
        }
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.z;
        uint _2849 = (_2847 >> 8u) & 15u;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((4294967295u << _2849) & _2706) == 0u)
        {
            _2961 = _2832;
            _2963 = _2834;
            _2965 = _2836;
            _2967 = _2838;
            _2969 = _2840;
            _2971 = _2842;
        }
        else
        {
            float _2986 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
            float _2987 = _2986 * _2660;
            float _2988 = _2986 * _2661;
            float _2989 = _2986 * _2662;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2849 < ((_2847 >> 12u) & 15u))
            {
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _3121 = _2832;
                float _3122 = _2834;
                float _3123 = _2836;
                float _3124 = _2838;
                float _3125 = _2840;
                float _3126 = _2842;
                uint _3127 = _2849;
                uint _3136;
                bool _3137;
                for (;;)
                {
                    _3136 = texelFetch(g_lightClassification, int((((_2700 << 5u) + (_2686 << 9u)) + (_3127 << 2u)) >> 2u)).x;
                    _3137 = _3136 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3137)
                    {
                        frontier_phi_79_pred = _3126;
                        frontier_phi_79_pred_1 = _3125;
                        frontier_phi_79_pred_2 = _3124;
                        frontier_phi_79_pred_3 = _3123;
                        frontier_phi_79_pred_4 = _3122;
                        frontier_phi_79_pred_5 = _3121;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3342 = _3121;
                        float _3343 = _3122;
                        float _3344 = _3123;
                        float _3345 = _3124;
                        float _3346 = _3125;
                        float _3347 = _3126;
                        uint _3348 = _3136;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3433;
                        float _3480;
                        bool _3481;
                        for (;;)
                        {
                            uint _3359 = ((_3127 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3420 = (_3359 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3436 = (_3359 * 40u) + 24u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3455 = (_3359 * 40u) + 28u;
                            vec4 _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            _3480 = fma(_2662, _3468.z, fma(_2661, _3468.y, _3468.x * _2660)) + _3468.w;
                            _3481 = !((fma(_2662, _3449.z, fma(_2661, _3449.y, _3449.x * _2660)) + _3449.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3481)
                            {
                                float _3508 = _3374.x - _2660;
                                float _3509 = _3374.y - _2661;
                                float _3510 = _3374.z - _2662;
                                float _3511 = dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510));
                                float _3514 = inversesqrt(_3511);
                                float _3515 = _3514 * _3508;
                                float _3516 = _3514 * _3509;
                                float _3517 = _3514 * _3510;
                                float _3521 = 1.0 - (_3511 / (_3375 * _3375));
                                float _4681 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3526 = sqrt(_3511) * _3390.w;
                                float _3528 = 1.39999997615814208984375 / (_3526 + 1.39999997615814208984375);
                                float _3529 = _3528 * _3528;
                                float _3532 = ((1.0 - _3529) * dot(vec3(_3515, _3516, _3517), vec3(_774, _777, _780))) + _3529;
                                float _3535 = _3526 * _3526;
                                float _3539 = (fma(_2662, _3417.z, fma(_2661, _3417.y, _3417.x * _2660)) + _3417.w) / _3480;
                                float _3540 = (fma(_2662, _3433.z, fma(_2661, _3433.y, _3433.x * _2660)) + _3433.w) / _3480;
                                float _3544 = 1.0 - dot(vec2(_3539, _3540), vec2(_3539, _3540));
                                float _4697 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3546 = _3545 * (((isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0))) * _3522) / ((_3535 * 0.699999988079071044921875) + 1.0));
                                float _3558 = exp2(log2(1.0 / ((_3535 * 3.5) + 5.0)) * 0.25);
                                float _3559 = 1.0 - _971;
                                float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                                float _3567 = _3566 * _3566;
                                float _3568 = _3567 * _3567;
                                float _3569 = _3515 - _2987;
                                float _3570 = _3516 - _2988;
                                float _3571 = _3517 - _2989;
                                float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                                float _3579 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2987, (-0.0) - _2988, (-0.0) - _2989));
                                float _4708 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3583 = dot(vec3(_774, _777, _780), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                                float _4719 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                                float _3591 = _3528 * _3567;
                                float _3592 = _3591 * _3591;
                                float _3598 = ((1.0 - _3592) * dot(vec3(_774, _777, _780), vec3(_3515, _3516, _3517))) + _3592;
                                float _4730 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3600 = 1.0 - _3567;
                                float _3610 = (0.5 / (((_3599 * ((_3582 * _3600) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3567) * _3582))) * _3599;
                                float _4741 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3620 = (_3545 * _3522) * (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3590 * _3590) * ((_3535 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3546 * _3390.z;
                                frontier_phi_85_pred_1 = _3546 * _3390.y;
                                frontier_phi_85_pred_2 = _3546 * _3390.x;
                                frontier_phi_85_pred_3 = _3620 * _3402.z;
                                frontier_phi_85_pred_4 = _3620 * _3402.y;
                                frontier_phi_85_pred_5 = _3620 * _3402.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3629 = frontier_phi_85_pred;
                            _3628 = frontier_phi_85_pred_1;
                            _3627 = frontier_phi_85_pred_2;
                            _3626 = frontier_phi_85_pred_3;
                            _3625 = frontier_phi_85_pred_4;
                            _3624 = frontier_phi_85_pred_5;
                            _3332 = _3627 + _3345;
                            _3333 = _3628 + _3346;
                            _3334 = _3629 + _3347;
                            _3329 = _3624 + _3342;
                            _3330 = _3625 + _3343;
                            _3331 = _3626 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3334;
                        frontier_phi_79_pred_1 = _3333;
                        frontier_phi_79_pred_2 = _3332;
                        frontier_phi_79_pred_3 = _3331;
                        frontier_phi_79_pred_4 = _3330;
                        frontier_phi_79_pred_5 = _3329;
                    }
                    _2972 = frontier_phi_79_pred;
                    _2970 = frontier_phi_79_pred_1;
                    _2968 = frontier_phi_79_pred_2;
                    _2966 = frontier_phi_79_pred_3;
                    _2964 = frontier_phi_79_pred_4;
                    _2962 = frontier_phi_79_pred_5;
                    uint _3128 = _3127 + 1u;
                    if (_3128 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3121 = _2962;
                        _3122 = _2964;
                        _3123 = _2966;
                        _3124 = _2968;
                        _3125 = _2970;
                        _3126 = _2972;
                        _3127 = _3128;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2968;
                frontier_phi_60_61_ladder_1 = _2972;
                frontier_phi_60_61_ladder_2 = _2970;
                frontier_phi_60_61_ladder_3 = _2966;
                frontier_phi_60_61_ladder_4 = _2964;
                frontier_phi_60_61_ladder_5 = _2962;
            }
            else
            {
                frontier_phi_60_61_ladder = _2838;
                frontier_phi_60_61_ladder_1 = _2842;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2836;
                frontier_phi_60_61_ladder_4 = _2834;
                frontier_phi_60_61_ladder_5 = _2832;
            }
            _2961 = frontier_phi_60_61_ladder_5;
            _2963 = frontier_phi_60_61_ladder_4;
            _2965 = frontier_phi_60_61_ladder_3;
            _2967 = frontier_phi_60_61_ladder;
            _2969 = frontier_phi_60_61_ladder_2;
            _2971 = frontier_phi_60_61_ladder_1;
        }
        float _2976 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2718 = (_2976 * _2967) + _2155;
        _2720 = (_2976 * _2969) + _2157;
        _2722 = (_2976 * _2971) + _2159;
        _2724 = ((_2961 * _947) * _2976) + _2500;
        _2726 = ((_2963 * _948) * _2976) + _2502;
        _2728 = ((_2965 * _949) * _2976) + _2504;
    }
    else
    {
        _2718 = _2155;
        _2720 = _2157;
        _2722 = _2159;
        _2724 = _2500;
        _2726 = _2502;
        _2728 = _2504;
    }
    uint _2734 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _2740 = cbInstanceData._m0[_2734].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _635) + cbMatDynParam._m0[7u].x) + (((_676 - (_676 * _601)) + (cbMatDynParam._m0[11u].x * _707)) * cbMatDynParam._m0[9u].x));
    float _2741 = cbInstanceData._m0[_2734].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _635) + cbMatDynParam._m0[7u].y) + (((_678 - (_678 * _601)) + (cbMatDynParam._m0[11u].y * _707)) * cbMatDynParam._m0[9u].y));
    float _2742 = cbInstanceData._m0[_2734].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _635) + cbMatDynParam._m0[7u].z) + (((_680 - (_680 * _601)) + (cbMatDynParam._m0[11u].z * _707)) * cbMatDynParam._m0[9u].z));
    float _4757 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4768 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4779 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4790 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _2760 = (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2718 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _961))) + ((_2724 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1791)) * cbPerFrame._m0[3u].x)) + _2740;
    float _2762 = (_2741 + ((_2726 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1791)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2720 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _961)));
    float _2764 = (_2742 + ((_2728 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1791)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2722 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _961)));
    float _2765 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2766 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2767 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2772 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) - _662) * _635) + _662));
    float _2777 = cbInstanceData._m0[_853 + 6u].w * (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)));
    float _2782 = _751 / cbSceneParam._m0[86u].x;
    float _2783 = _752 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2857 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2858 = _2857 / _733;
        float _2869 = _2858 * _291;
        float _2870 = _292 * _2858;
        float _2871 = (-0.0) - _2870;
        float _2872 = _2858 * _293;
        float _2874 = (cbSceneParam._m0[77u].w * _2871) / _2857;
        float _2875 = _2874 + cbSceneParam._m0[79u].w;
        float _2876 = cbSceneParam._m0[79u].w - _2870;
        float _2882 = sqrt(((_2869 * _2869) + (_2870 * _2870)) + (_2872 * _2872));
        float _2885 = (1.0 - (cbSceneParam._m0[77u].w / _2857)) * _2882;
        float _2890 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2892 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2871 - _2874) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2875 > 0.0) ? exp2(_2890 * _2875) : (2.0 - exp2(_2892 * _2875))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2885;
        }
        else
        {
            float _3022 = 1.0 / cbSceneParam._m0[80u].x;
            float _3023 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : max(_2875, _2876));
            float _3024 = isnan(_2876) ? _2875 : (isnan(_2875) ? _2876 : min(_2875, _2876));
            float _3033 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : min(_3023, 0.0));
            float _3034 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : min(_3024, 0.0));
            _3078 = ((abs(_2882 / _2871) * cbSceneParam._m0[80u].y) * ((((_3033 - _3034) * 2.0) - ((exp2(_2890 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0)))) - exp2(_2890 * (isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))))) * _3022)) - ((exp2(_2892 * _3033) - exp2(_2892 * _3034)) * _3022))) + (_2885 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2802);
        _2894 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2896 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2898 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2900 = _3089 * _2802;
    }
    else
    {
        _2894 = _2799;
        _2896 = _2800;
        _2898 = _2801;
        _2900 = _2802;
    }
    bool _3116;
    vec4 _2910;
    vec4 _2932;
    float _2934;
    float _2938;
    float _2939;
    float _2940;
    float _2943;
    float _2946;
    float _2949;
    float _2950;
    bool _2960;
    for (;;)
    {
        _2910 = cbMatDynParam._m0[0u];
        float _2912 = roundEven(_2910.y);
        bool _2913 = _2912 == 3.0;
        float _2914 = log2(_2900);
        float _2918 = exp2(_2914 * cbSceneParam._m0[78u].x);
        float _2919 = exp2(_2914 * cbSceneParam._m0[78u].y);
        float _2920 = exp2(_2914 * cbSceneParam._m0[78u].z);
        float _2921 = _2918 * _2765;
        float _2922 = _2919 * _2766;
        float _2923 = _2920 * _2767;
        float _2930 = _740 + (-0.5);
        _2932 = cbMtdParam._m0[1u];
        _2934 = _2932.y * _2930;
        float _2937 = (_2912 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2938 = _2937 * (_2913 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2894)));
        _2939 = _2937 * (_2913 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2896)));
        _2940 = _2937 * (_2913 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2898)));
        _2943 = ((_2772 * _2740) * _2918) * _2937;
        _2946 = ((_2772 * _2741) * _2919) * _2937;
        _2949 = ((_2772 * _2742) * _2920) * _2937;
        _2950 = _2930 * 0.999000012874603271484375;
        _2960 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2960)
        {
            if ((cbInstanceData._m0[_853 + 7u].x + _2950) < 0.5)
            {
                _3116 = true;
                break;
            }
        }
        uint _3057 = _854 + uint(_2910.w);
        if ((cbInstanceData._m0[_3057].w < 1.0) && ((cbInstanceData._m0[_3057].w + _2950) < 0.5))
        {
            _3116 = true;
            break;
        }
        if ((_2934 + _444) < _2932.x)
        {
            _3116 = true;
            break;
        }
        _3116 = false;
        break;
    }
    float _3320;
    if (_3116)
    {
        discard_state = true;
        _3320 = 0.0;
    }
    else
    {
        _3320 = _2777;
    }
    SV_Target.x = _2938;
    SV_Target.y = _2939;
    SV_Target.z = _2940;
    SV_Target.w = _3320;
    SV_Target_1.x = _2943;
    SV_Target_1.y = _2946;
    SV_Target_1.z = _2949;
    SV_Target_1.w = _2777;
    discard_exit();
}


