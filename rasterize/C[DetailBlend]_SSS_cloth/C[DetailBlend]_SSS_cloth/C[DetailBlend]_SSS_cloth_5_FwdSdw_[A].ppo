#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1256;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _293 = cbMtdParam._m0[10u].x * _282.x;
    float _294 = cbMtdParam._m0[10u].y * _282.y;
    float _295 = cbMtdParam._m0[10u].z * _282.z;
    vec4 _307 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = exp2(log2(1.0 - _254.w) * 8.0);
    vec4 _335 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _360 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _382 = (((((_307.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _360.x) - _293) * _268) + _293;
    float _383 = (((((_307.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _360.y) - _294) * _268) + _294;
    float _384 = (((((_307.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _360.z) - _295) * _268) + _295;
    float _391 = (((cbMtdParam._m0[12u].x * _335.x) - _382) * _323) + _382;
    float _392 = (((cbMtdParam._m0[12u].y * _335.y) - _383) * _323) + _383;
    float _393 = (((cbMtdParam._m0[12u].z * _335.z) - _384) * _323) + _384;
    float _394 = _360.w * _307.w;
    float _422 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _268) + cbMtdParam._m0[15u].y;
    float _425 = ((cbMtdParam._m0[14u].y - _422) * _323) + _422;
    vec4 _438 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _447 = cbMtdParam._m0[13u].y + _438.z;
    vec4 _459 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _478 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _489 = ((((_259 * 2.0) * (cbMtdParam._m0[13u].x + _459.z)) - _447) * _268) + _447;
    float _493 = (((_478.z - _489) + cbMtdParam._m0[14u].x) * _323) + _489;
    float _497 = (_254.x * 2.0) + (-1.0);
    float _499 = (_254.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_497, _499), vec2(_497, _499));
    float _3949 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))));
    float _510 = ((_459.x - _440) * _268) + _440;
    float _511 = ((_459.y - _441) * _268) + _441;
    float _524 = ((((((_478.x - _510) * _323) + _510) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _497;
    float _525 = ((((((_478.y - _511) * _323) + _511) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _499;
    float _528 = fma(_505, _238, fma(_525, _230 * TANGENT.x, (_216 * _208) * _524));
    float _531 = fma(_505, _239, fma(_525, _230 * TANGENT.y, (_216 * _209) * _524));
    float _534 = fma(_505, _240, fma(_525, _230 * TANGENT.z, (_216 * _210) * _524));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3960 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _542 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _543 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _544 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _545 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _546 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _547 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _563 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    vec4 _628 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _630 = _628.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _935 = sqrt(((_614 * _614) + (_615 * _615)) + (_616 * _616));
        float _941 = (cbMatDynParam._m0[5u].x * _935) + cbMatDynParam._m0[5u].y;
        float _4026 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _946 = (cbMatDynParam._m0[5u].z * _935) + cbMatDynParam._m0[5u].w;
        float _4037 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) - _942)) + _942) < ((_630 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _641 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _642 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _644 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _646 = _644.w;
    float _665 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _668 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _671 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    vec4 _673 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _675 = _673.x;
    float _687 = (((_673.y - _543) + (_673.w * _543)) * cbMtdParam._m0[3u].x) + _543;
    vec4 _688 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _704 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_675 * _675)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _688.z;
    float _712 = (((cbMatDynParam._m0[15u].x - _547) * cbMatDynParam._m0[15u].w) * _704) + _547;
    float _720 = ((_704 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _687)) + _687;
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _745 = _744 + 9u;
    uint _746 = _745 + uint(cbMatDynParam._m0[0u].w);
    float _752 = (cbMtdParam._m0[0u].x * _544) * cbInstanceData._m0[_746].x;
    float _753 = (cbMtdParam._m0[0u].y * _545) * cbInstanceData._m0[_746].y;
    float _754 = (cbMtdParam._m0[0u].z * _546) * cbInstanceData._m0[_746].z;
    float _4048 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _4070 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    vec4 _758 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _763 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _774 = (((_763.x - _712) + (_763.w * _712)) * cbMtdParam._m0[3u].x) + _712;
    float _787 = (cbMtdParam._m0[3u].x * (((_755 * _646) - _755) + _758.x)) + _755;
    float _788 = (cbMtdParam._m0[3u].x * (((_756 * _646) - _756) + _758.y)) + _756;
    float _789 = (cbMtdParam._m0[3u].x * (((_757 * _646) - _757) + _758.z)) + _757;
    vec4 _790 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _803 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_712 * (_544 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_712 * (_545 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_712 * (_546 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _790.z;
    float _807 = _803 * cbMatDynParam._m0[13u].w;
    float _817 = (_807 * (cbMatDynParam._m0[13u].x - _787)) + _787;
    float _818 = (_807 * (cbMatDynParam._m0[13u].y - _788)) + _788;
    float _819 = (_807 * (cbMatDynParam._m0[13u].z - _789)) + _789;
    float _827 = ((_803 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _774)) + _774;
    float _828 = 1.0 - _827;
    float _829 = _828 * _817;
    float _830 = _828 * _818;
    float _831 = _828 * _819;
    float _835 = (_817 + (-0.039999999105930328369140625)) * _827;
    float _836 = (_818 + (-0.039999999105930328369140625)) * _827;
    float _837 = (_819 + (-0.039999999105930328369140625)) * _827;
    float _838 = _835 + 0.039999999105930328369140625;
    float _839 = _836 + 0.039999999105930328369140625;
    float _840 = _837 + 0.039999999105930328369140625;
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _642));
    float _852 = _849.x * TEXCOORD_4;
    float _853 = dot(vec3(_539, _540, _541), vec3(_621, _622, _623));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _539) - _621;
    float _861 = (_856 * _540) - _622;
    float _862 = (_856 * _541) - _623;
    float _866 = abs(dot(vec3(_621, _622, _623), vec3(_539, _540, _541)));
    float _4081 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_720);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _887 = (1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _888 = _881 * _868;
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _984 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _988 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _1013 = _916 + _539;
        float _1014 = _920 + _540;
        float _1015 = _924 + _541;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_539, _540, _541), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4129 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_539, _540, _541), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4162 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_539, _540, _541), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4195 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1303 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1307 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1330 = _916 + _539;
        float _1331 = _920 + _540;
        float _1332 = _924 + _541;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_539, _540, _541), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4258 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_539, _540, _541), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4291 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_539, _540, _541), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4324 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = _1256;
        _1578 = _1256;
        _1579 = _1256;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1268)) + _1268;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1269)) + _1269;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _860 * 0.5;
    float _1637 = _861 * 0.5;
    float _1638 = _862 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1763 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1766 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1794 = frontier_phi_19_17_ladder;
        }
        float _1969;
        if (_1763 > 0.0)
        {
            _1969 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1969 = frontier_phi_28_24_ladder;
        }
        float _2264;
        if (_1766 > 0.0)
        {
            _2264 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2264 = frontier_phi_40_35_ladder;
        }
        float _2266 = isnan(_1969) ? _1794 : (isnan(_1794) ? _1969 : min(_1794, _1969));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1760) + _1749;
        float _2272 = (_2267 * _1763) + _1753;
        float _2273 = (_2267 * _1766) + _1757;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_18_40_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_18_40_ladder_2;
        _1784 = frontier_phi_18_40_ladder_1;
        _1786 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1702);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1862 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1865 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1974;
        if (_1859 > 0.0)
        {
            _1974 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1974 = frontier_phi_30_26_ladder;
        }
        float _2291;
        if (_1862 > 0.0)
        {
            _2291 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2291 = frontier_phi_42_37_ladder;
        }
        float _2629;
        if (_1865 > 0.0)
        {
            _2629 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2629 = frontier_phi_52_49_ladder;
        }
        float _2631 = isnan(_2291) ? _1974 : (isnan(_1974) ? _2291 : min(_1974, _2291));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _1859) + _1848;
        float _2637 = (_2632 * _1862) + _1852;
        float _2638 = (_2632 * _1865) + _1856;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2639;
        float _2642 = _2639 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2638 > _2642) || ((_2638 < _2640) || ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 < _2640) || (_2636 > _2642))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2638, cbModelParam._m0[17u].z, fma(_2637, cbModelParam._m0[17u].y, _2636 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2638, cbModelParam._m0[18u].z, fma(_2637, cbModelParam._m0[18u].y, _2636 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2638, cbModelParam._m0[19u].z, fma(_2637, cbModelParam._m0[19u].y, _2636 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_27_52_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_27_52_ladder_2;
        _1886 = frontier_phi_27_52_ladder_1;
        _1888 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1791);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1901 = (((_887 * _838) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1884 - _1782)) + _1782);
    float _1903 = (((_887 * _839) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1886 - _1784)) + _1784);
    float _1905 = (((_887 * _840) + _888) * _852) * ((cbModelParam._m0[1u].w * (_1888 - _1786)) + _1786);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1903, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1903, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1903, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1961 = _1948 / _1960;
    float _1962 = _1952 / _1960;
    float _1963 = _1956 / _1960;
    float _2110;
    float _2111;
    float _2112;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1990 = ((uint(_1963 > cbSceneParam._m0[59u].y) + uint(_1963 > cbSceneParam._m0[59u].x)) + uint(_1963 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1991 = _1990 + 43u;
        uint _1999 = _1990 + 44u;
        uint _2007 = _1990 + 45u;
        uint _2015 = _1990 + 46u;
        float _2026 = fma(_1960, cbSceneParam._m0[_1991].w, fma(_1956, cbSceneParam._m0[_1991].z, fma(_1952, cbSceneParam._m0[_1991].y, _1948 * cbSceneParam._m0[_1991].x)));
        float _2030 = fma(_1960, cbSceneParam._m0[_1999].w, fma(_1956, cbSceneParam._m0[_1999].z, fma(_1952, cbSceneParam._m0[_1999].y, _1948 * cbSceneParam._m0[_1999].x)));
        float _2038 = fma(_1960, cbSceneParam._m0[_2015].w, fma(_1956, cbSceneParam._m0[_2015].z, fma(_1952, cbSceneParam._m0[_2015].y, _1948 * cbSceneParam._m0[_2015].x)));
        float _2043 = cbSceneParam._m0[33u].z * _2038;
        float _2045 = cbSceneParam._m0[33u].w * _2038;
        float _2048 = fma(_1960, cbSceneParam._m0[_2007].w, fma(_1956, cbSceneParam._m0[_2007].z, fma(_1952, cbSceneParam._m0[_2007].y, _1948 * cbSceneParam._m0[_2007].x))) / _2038;
        float _2096 = (cbSceneParam._m0[33u].x - sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963))) * cbSceneParam._m0[33u].y;
        float _4450 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2103 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 + _2026) / _2038, (_2045 + _2030) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2026) / _2038, (_2030 - _2043) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 - _2043) / _2038, (_2030 - _2045) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 - _2045) / _2038, (_2043 + _2030) / _2038), _2048), 0.0)).x), vec4(0.25)));
        _2110 = 1.0 - (_2103 * cbSceneParam._m0[34u].x);
        _2111 = 1.0 - (_2103 * cbSceneParam._m0[34u].y);
        _2112 = 1.0 - (_2103 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2110 = 1.0;
        _2111 = 1.0;
        _2112 = 1.0;
    }
    float _2176;
    float _2178;
    float _2180;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2164 = fma(_1960, cbSceneParam._m0[63u].w, fma(_1956, cbSceneParam._m0[63u].z, fma(_1952, cbSceneParam._m0[63u].y, _1948 * cbSceneParam._m0[63u].x)));
        float _2165 = fma(_1960, cbSceneParam._m0[60u].w, fma(_1956, cbSceneParam._m0[60u].z, fma(_1952, cbSceneParam._m0[60u].y, _1948 * cbSceneParam._m0[60u].x))) / _2164;
        float _2166 = fma(_1960, cbSceneParam._m0[61u].w, fma(_1956, cbSceneParam._m0[61u].z, fma(_1952, cbSceneParam._m0[61u].y, _1948 * cbSceneParam._m0[61u].x))) / _2164;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2165 >= cbSceneParam._m0[64u].x) && (_2166 >= cbSceneParam._m0[64u].y)) && (_2165 <= cbSceneParam._m0[64u].z)) && (_2166 <= cbSceneParam._m0[64u].w))
        {
            float _2304 = fma(_1960, cbSceneParam._m0[62u].w, fma(_1956, cbSceneParam._m0[62u].z, fma(_1952, cbSceneParam._m0[62u].y, _1948 * cbSceneParam._m0[62u].x))) / _2164;
            float _2308 = isnan(cbSceneParam._m0[41u].w) ? _2304 : (isnan(_2304) ? cbSceneParam._m0[41u].w : max(_2304, cbSceneParam._m0[41u].w));
            float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963))) * cbSceneParam._m0[33u].y;
            float _4466 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
            float _2358 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2165, cbSceneParam._m0[33u].w + _2166), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2165, _2166 - cbSceneParam._m0[33u].z), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2165 - cbSceneParam._m0[33u].z, _2166 - cbSceneParam._m0[33u].w), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2165 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2166), _2308), 0.0)).x), vec4(0.25)));
            float _2362 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
            float _2363 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
            float _2364 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2363) ? _2111 : (isnan(_2111) ? _2363 : min(_2111, _2363));
            frontier_phi_39_38_ladder_1 = isnan(_2362) ? _2110 : (isnan(_2110) ? _2362 : min(_2110, _2362));
            frontier_phi_39_38_ladder_2 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
        }
        else
        {
            frontier_phi_39_38_ladder = _2111;
            frontier_phi_39_38_ladder_1 = _2110;
            frontier_phi_39_38_ladder_2 = _2112;
        }
        _2176 = frontier_phi_39_38_ladder_1;
        _2178 = frontier_phi_39_38_ladder;
        _2180 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2176 = _2110;
        _2178 = _2111;
        _2180 = _2112;
    }
    uvec4 _2185 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _2187 = _2185.x * 14u;
    uint _2188 = _2187 + 13u;
    float _2195 = _852 + (-1.0);
    float _2200 = (cbLight._m0[_2188].x * _2195) + 1.0;
    float _2201 = (cbLight._m0[_2188].y * _2195) + 1.0;
    float _2202 = (cbLight._m0[_2188].z * _2195) + 1.0;
    float _2203 = (cbLight._m0[_2188].w * _2195) + 1.0;
    uint _2204 = _2187 + 5u;
    float _2210 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2214 = _2187 + 4u;
    float _2223 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2227 = _2187 | 1u;
    float _2238 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_539, _540, _541));
    float _2241 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_539, _540, _541));
    float _4502 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _4513 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2246 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2248 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2255 = ((cbLight._m0[_2204].x * _2210) * _2248) + (((cbLight._m0[_2214].x * _2176) * _2223) * _2246);
    float _2256 = ((_2210 * cbLight._m0[_2204].y) * _2248) + (((cbLight._m0[_2214].y * _2178) * _2223) * _2246);
    float _2257 = ((_2210 * cbLight._m0[_2204].z) * _2248) + (((cbLight._m0[_2214].z * _2180) * _2223) * _2246);
    uvec4 _2261 = floatBitsToUint(cbLight._m0[_2187 + 12u]);
    bool _2263 = _2261.x == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2263)
    {
        _2365 = _2255;
        _2367 = _2256;
        _2369 = _2257;
    }
    else
    {
        uint _2373 = _2187 + 6u;
        float _2389 = (dot(vec3(cbLight._m0[_2187 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4524 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2392 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2365 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2255;
        _2367 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2256;
        _2369 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2257;
    }
    bool _2372 = _2261.y == 0u;
    float _2427;
    float _2429;
    float _2431;
    if (_2372)
    {
        _2427 = _2365;
        _2429 = _2367;
        _2431 = _2369;
    }
    else
    {
        uint _2600 = _2187 + 7u;
        float _2616 = (dot(vec3(cbLight._m0[_2187 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4540 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2619 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2427 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2365;
        _2429 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2367;
        _2431 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2369;
    }
    uint _2434 = _2187 + 8u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _720) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2187].x + _621;
    float _2450 = cbLight._m0[_2187].y + _622;
    float _2451 = cbLight._m0[_2187].z + _623;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2187].xyz));
    float _4556 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2463 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2464 = dot(vec3(_539, _540, _541), vec3(_2456, _2457, _2458));
    float _4578 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2456, _2457, _2458));
    float _4589 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2448 * _2448;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2485 = 0.959999978542327880859375 - _835;
    float _2487 = 0.959999978542327880859375 - _836;
    float _2488 = 0.959999978542327880859375 - _837;
    float _2495 = 1.0 - _2448;
    float _2506 = (0.5 / (((_2463 * ((_2462 * _2495) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2495) + _2448) * _2462))) * _2462;
    float _4600 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    uint _2522 = _2187 + 9u;
    float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _720) * 0.949999988079071044921875);
    float _2534 = _2533 * _2533;
    float _2535 = cbLight._m0[_2227].x + _621;
    float _2536 = cbLight._m0[_2227].y + _622;
    float _2537 = cbLight._m0[_2227].z + _623;
    float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
    float _2542 = _2541 * _2535;
    float _2543 = _2541 * _2536;
    float _2544 = _2541 * _2537;
    float _2545 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2227].xyz));
    float _4611 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2549 = dot(vec3(_539, _540, _541), vec3(_2542, _2543, _2544));
    float _4622 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2542, _2543, _2544));
    float _4633 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2534 * _2534;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2575 = 1.0 - _2534;
    float _2585 = (0.5 / (((_2463 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2575) + _2534) * _2548))) * _2548;
    float _4644 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    float _2597 = (((((_2568 * _2485) + _838) * cbLight._m0[_2522].x) * _2587) * _2210) + ((((cbLight._m0[_2434].x * _2176) * ((_2484 * _2485) + _838)) * _2508) * _2223);
    float _2598 = (((((_2568 * _2487) + _839) * cbLight._m0[_2522].y) * _2587) * _2210) + ((((cbLight._m0[_2434].y * _2178) * ((_2484 * _2487) + _839)) * _2508) * _2223);
    float _2599 = (((((_2568 * _2488) + _840) * cbLight._m0[_2522].z) * _2587) * _2210) + ((((cbLight._m0[_2434].z * _2180) * ((_2484 * _2488) + _840)) * _2508) * _2223);
    float _2655;
    float _2657;
    float _2659;
    if (_2263)
    {
        _2655 = _2597;
        _2657 = _2598;
        _2659 = _2599;
    }
    else
    {
        uint _2661 = _2187 + 2u;
        uint _2665 = _2187 + 10u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _720) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _621;
        float _2682 = cbLight._m0[_2661].y + _622;
        float _2683 = cbLight._m0[_2661].z + _623;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2661].xyz));
        float _4655 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2695 = dot(vec3(_539, _540, _541), vec3(_2688, _2689, _2690));
        float _4666 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4677 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2721 = 1.0 - _2680;
        float _2731 = (0.5 / (((_2463 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2721) + _2680) * _2694))) * _2694;
        float _4688 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2655 = (((((_2714 * _2485) + _838) * cbLight._m0[_2665].x) * _2733) * _2734) + _2597;
        _2657 = (((((_2714 * _2487) + _839) * cbLight._m0[_2665].y) * _2733) * _2734) + _2598;
        _2659 = (((((_2714 * _2488) + _840) * cbLight._m0[_2665].z) * _2733) * _2734) + _2599;
    }
    float _2765;
    float _2767;
    float _2769;
    if (_2372)
    {
        _2765 = _2655;
        _2767 = _2657;
        _2769 = _2659;
    }
    else
    {
        uint _2776 = _2187 + 3u;
        uint _2780 = _2187 + 11u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _720) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _621;
        float _2797 = cbLight._m0[_2776].y + _622;
        float _2798 = cbLight._m0[_2776].z + _623;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2776].xyz));
        float _4704 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2810 = dot(vec3(_539, _540, _541), vec3(_2803, _2804, _2805));
        float _4715 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4726 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2463 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2836) + _2795) * _2809))) * _2809;
        float _4737 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2765 = (((((_2829 * _2485) + _838) * cbLight._m0[_2780].x) * _2848) * _2849) + _2655;
        _2767 = (((((_2829 * _2487) + _839) * cbLight._m0[_2780].y) * _2848) * _2849) + _2657;
        _2769 = (((((_2829 * _2488) + _840) * cbLight._m0[_2780].z) * _2848) * _2849) + _2659;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2185.y == 0u)
    {
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.x;
        uint _2882 = uint((float(_2870.y) * floor(float(uint(cbSceneParam._m0[85u].y * _642) / _2871))) + floor(float(uint(cbSceneParam._m0[85u].x * _641) / _2871)));
        float _2892 = (log2(_1963 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2893 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        uint _2896 = uint(isnan(14.0) ? _2893 : (isnan(_2893) ? 14.0 : min(_2893, 14.0)));
        uvec4 _2901 = texelFetch(g_lightClusterGridBuffer, int(((_2896 << 2u) + (_2882 << 6u)) >> 2u));
        uint _2902 = _2901.x;
        uint _2903 = _2870.z;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((((1u << ((_2903 >> 4u) & 15u)) + 4294967295u) & _2902) == 0u) || ((_2903 & 240u) == 0u))
        {
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
        }
        else
        {
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3154)
                {
                    frontier_phi_73_pred = _3143;
                    frontier_phi_73_pred_1 = _3142;
                    frontier_phi_73_pred_2 = _3141;
                    frontier_phi_73_pred_3 = _3140;
                    frontier_phi_73_pred_4 = _3139;
                    frontier_phi_73_pred_5 = _3138;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3153;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3144 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _1961;
                        float _3350 = _3309.y - _1962;
                        float _3351 = _3309.z - _1963;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_665, _668, _671), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4763 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _1961;
                        float _3385 = (-0.0) - _1962;
                        float _3386 = (-0.0) - _1963;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3400 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _868;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_665, _668, _671), vec3(_3391, _3392, _3393));
                        float _4779 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3425 = dot(vec3(_665, _668, _671), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4790 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3369 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3359) + _3434;
                        float _4801 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4812 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3432 * _3432) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3213 = (_3380 * _3328.x) + _3286;
                        _3214 = (_3380 * _3328.y) + _3287;
                        _3215 = (_3380 * _3328.z) + _3288;
                        _3210 = (_3460 * _3345.x) + _3283;
                        _3211 = (_3460 * _3345.y) + _3284;
                        _3212 = (_3460 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_73_pred = _3215;
                    frontier_phi_73_pred_1 = _3214;
                    frontier_phi_73_pred_2 = _3213;
                    frontier_phi_73_pred_3 = _3212;
                    frontier_phi_73_pred_4 = _3211;
                    frontier_phi_73_pred_5 = _3210;
                }
                _2997 = frontier_phi_73_pred;
                _2995 = frontier_phi_73_pred_1;
                _2993 = frontier_phi_73_pred_2;
                _2991 = frontier_phi_73_pred_3;
                _2989 = frontier_phi_73_pred_4;
                _2987 = frontier_phi_73_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2987;
                    _3139 = _2989;
                    _3140 = _2991;
                    _3141 = _2993;
                    _3142 = _2995;
                    _3143 = _2997;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
        }
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.z;
        uint _3003 = (_3001 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3003) & _2902) == 0u)
        {
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
            _3114 = _2994;
            _3116 = _2996;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
            float _3132 = _3131 * _1961;
            float _3133 = _3131 * _1962;
            float _3134 = _3131 * _1963;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3003 < ((_3001 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3266 = _2986;
                float _3267 = _2988;
                float _3268 = _2990;
                float _3269 = _2992;
                float _3270 = _2994;
                float _3271 = _2996;
                uint _3272 = _3003;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3282)
                    {
                        frontier_phi_84_pred = _3270;
                        frontier_phi_84_pred_1 = _3269;
                        frontier_phi_84_pred_2 = _3268;
                        frontier_phi_84_pred_3 = _3267;
                        frontier_phi_84_pred_4 = _3266;
                        frontier_phi_84_pred_5 = _3271;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        uint _3493 = _3281;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3578;
                        float _3625;
                        bool _3626;
                        for (;;)
                        {
                            uint _3504 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3565 = (_3504 * 40u) + 20u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            uint _3581 = (_3504 * 40u) + 24u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3600 = (_3504 * 40u) + 28u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3625 = fma(_1963, _3613.z, fma(_1962, _3613.y, _3613.x * _1961)) + _3613.w;
                            _3626 = !((fma(_1963, _3594.z, fma(_1962, _3594.y, _3594.x * _1961)) + _3594.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3626)
                            {
                                float _3653 = _3519.x - _1961;
                                float _3654 = _3519.y - _1962;
                                float _3655 = _3519.z - _1963;
                                float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                                float _3659 = inversesqrt(_3656);
                                float _3660 = _3659 * _3653;
                                float _3661 = _3659 * _3654;
                                float _3662 = _3659 * _3655;
                                float _3666 = 1.0 - (_3656 / (_3520 * _3520));
                                float _4823 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3671 = sqrt(_3656) * _3535.w;
                                float _3673 = 1.39999997615814208984375 / (_3671 + 1.39999997615814208984375);
                                float _3674 = _3673 * _3673;
                                float _3677 = ((1.0 - _3674) * dot(vec3(_3660, _3661, _3662), vec3(_665, _668, _671))) + _3674;
                                float _3680 = _3671 * _3671;
                                float _3684 = (fma(_1963, _3562.z, fma(_1962, _3562.y, _3562.x * _1961)) + _3562.w) / _3625;
                                float _3685 = (fma(_1963, _3578.z, fma(_1962, _3578.y, _3578.x * _1961)) + _3578.w) / _3625;
                                float _3689 = 1.0 - dot(vec2(_3684, _3685), vec2(_3684, _3685));
                                float _4839 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3691 = _3690 * (((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3667) / ((_3680 * 0.699999988079071044921875) + 1.0));
                                float _3703 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                                float _3704 = 1.0 - _868;
                                float _3711 = sqrt(1.0 - ((1.0 - (_3704 * _3704)) * (1.0 - (_3703 * _3703))));
                                float _3712 = _3711 * _3711;
                                float _3713 = _3712 * _3712;
                                float _3714 = _3660 - _3132;
                                float _3715 = _3661 - _3133;
                                float _3716 = _3662 - _3134;
                                float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                                float _3724 = dot(vec3(_665, _668, _671), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4850 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3728 = dot(vec3(_665, _668, _671), vec3(_3720 * _3714, _3720 * _3715, _3720 * _3716));
                                float _4861 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3735 = ((_3731 * _3731) * (_3713 + (-1.0))) + 1.0;
                                float _3736 = _3673 * _3712;
                                float _3737 = _3736 * _3736;
                                float _3743 = ((1.0 - _3737) * dot(vec3(_665, _668, _671), vec3(_3660, _3661, _3662))) + _3737;
                                float _4872 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3745 = 1.0 - _3712;
                                float _3755 = (0.5 / (((_3744 * ((_3727 * _3745) + _3712)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3712) * _3727))) * _3744;
                                float _4883 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3765 = (_3690 * _3667) * (((_3713 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3735 * _3735) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3691 * _3535.y;
                                frontier_phi_90_pred_1 = _3691 * _3535.x;
                                frontier_phi_90_pred_2 = _3765 * _3547.z;
                                frontier_phi_90_pred_3 = _3765 * _3547.y;
                                frontier_phi_90_pred_4 = _3765 * _3547.x;
                                frontier_phi_90_pred_5 = _3691 * _3535.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3773 = frontier_phi_90_pred;
                            _3772 = frontier_phi_90_pred_1;
                            _3771 = frontier_phi_90_pred_2;
                            _3770 = frontier_phi_90_pred_3;
                            _3769 = frontier_phi_90_pred_4;
                            _3774 = frontier_phi_90_pred_5;
                            _3477 = _3772 + _3490;
                            _3478 = _3773 + _3491;
                            _3479 = _3774 + _3492;
                            _3474 = _3769 + _3487;
                            _3475 = _3770 + _3488;
                            _3476 = _3771 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3478;
                        frontier_phi_84_pred_1 = _3477;
                        frontier_phi_84_pred_2 = _3476;
                        frontier_phi_84_pred_3 = _3475;
                        frontier_phi_84_pred_4 = _3474;
                        frontier_phi_84_pred_5 = _3479;
                    }
                    _3115 = frontier_phi_84_pred;
                    _3113 = frontier_phi_84_pred_1;
                    _3111 = frontier_phi_84_pred_2;
                    _3109 = frontier_phi_84_pred_3;
                    _3107 = frontier_phi_84_pred_4;
                    _3117 = frontier_phi_84_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3107;
                        _3267 = _3109;
                        _3268 = _3111;
                        _3269 = _3113;
                        _3270 = _3115;
                        _3271 = _3117;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3117;
                frontier_phi_65_66_ladder_1 = _3113;
                frontier_phi_65_66_ladder_2 = _3115;
                frontier_phi_65_66_ladder_3 = _3109;
                frontier_phi_65_66_ladder_4 = _3107;
                frontier_phi_65_66_ladder_5 = _3111;
            }
            else
            {
                frontier_phi_65_66_ladder = _2996;
                frontier_phi_65_66_ladder_1 = _2992;
                frontier_phi_65_66_ladder_2 = _2994;
                frontier_phi_65_66_ladder_3 = _2988;
                frontier_phi_65_66_ladder_4 = _2986;
                frontier_phi_65_66_ladder_5 = _2990;
            }
            _3106 = frontier_phi_65_66_ladder_4;
            _3108 = frontier_phi_65_66_ladder_3;
            _3110 = frontier_phi_65_66_ladder_5;
            _3112 = frontier_phi_65_66_ladder_1;
            _3114 = frontier_phi_65_66_ladder_2;
            _3116 = frontier_phi_65_66_ladder;
        }
        float _3121 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2914 = (_3121 * _3112) + _2427;
        _2916 = (_3121 * _3114) + _2429;
        _2918 = (_3121 * _3116) + _2431;
        _2920 = ((_3106 * _838) * _3121) + _2765;
        _2922 = ((_3108 * _839) * _3121) + _2767;
        _2924 = ((_3110 * _840) * _3121) + _2769;
    }
    else
    {
        _2914 = _2427;
        _2916 = _2429;
        _2918 = _2431;
        _2920 = _2765;
        _2922 = _2767;
        _2924 = _2769;
    }
    float _4899 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4910 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4921 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4932 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2942 = ((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2914 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _852))) + ((_2920 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2916 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _852))) + ((_2922 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2918 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _852))) + ((_2924 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2945 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
    float _2946 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2947 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
    float _2952 = cbInstanceData._m0[_744 + 6u].w * (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)));
    float _2957 = _641 / cbSceneParam._m0[86u].x;
    float _2958 = _642 / cbSceneParam._m0[86u].y;
    vec4 _2972 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, (log2((isnan(cbSceneParam._m0[77u].w) ? _563 : (isnan(_563) ? cbSceneParam._m0[77u].w : min(_563, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2974 = _2972.x;
    float _2975 = _2972.y;
    float _2976 = _2972.z;
    float _2977 = _2972.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_563 > cbSceneParam._m0[78u].w)
    {
        float _3011 = isnan(_563) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _563 : min(cbSceneParam._m0[80u].w, _563));
        float _3012 = _3011 / _563;
        float _3023 = _3012 * _614;
        float _3024 = _615 * _3012;
        float _3025 = (-0.0) - _3024;
        float _3026 = _3012 * _616;
        float _3028 = (cbSceneParam._m0[77u].w * _3025) / _3011;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3024;
        float _3036 = sqrt(((_3023 * _3023) + (_3024 * _3024)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3011)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3025 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3223 = ((abs(_3036 / _3025) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3046 * _3178) - exp2(_3046 * _3179)) * _3167))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2977);
        _3048 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2974;
        _3050 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2975;
        _3052 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2976;
        _3054 = _3234 * _2977;
    }
    else
    {
        _3048 = _2974;
        _3050 = _2975;
        _3052 = _2976;
        _3054 = _2977;
    }
    bool _3261;
    vec4 _3064;
    vec4 _3086;
    float _3088;
    float _3092;
    float _3093;
    float _3094;
    float _3095;
    bool _3105;
    for (;;)
    {
        _3064 = cbMatDynParam._m0[0u];
        float _3066 = roundEven(_3064.y);
        bool _3067 = _3066 == 3.0;
        float _3068 = log2(_3054);
        float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * _2945;
        float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * _2946;
        float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * _2947;
        float _3084 = _630 + (-0.5);
        _3086 = cbMtdParam._m0[1u];
        _3088 = _3086.y * _3084;
        float _3091 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3092 = _3091 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
        _3093 = _3091 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
        _3094 = _3091 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
        _3095 = _3084 * 0.999000012874603271484375;
        _3105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3105)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _3095) < 0.5)
            {
                _3261 = true;
                break;
            }
        }
        uint _3202 = _745 + uint(_3064.w);
        if ((cbInstanceData._m0[_3202].w < 1.0) && ((cbInstanceData._m0[_3202].w + _3095) < 0.5))
        {
            _3261 = true;
            break;
        }
        if ((_3088 + _394) < _3086.x)
        {
            _3261 = true;
            break;
        }
        _3261 = false;
        break;
    }
    float _3465;
    if (_3261)
    {
        discard_state = true;
        _3465 = 0.0;
    }
    else
    {
        _3465 = _2952;
    }
    SV_Target.x = _3092;
    SV_Target.y = _3093;
    SV_Target.z = _3094;
    SV_Target.w = _3465;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2952;
    discard_exit();
}


