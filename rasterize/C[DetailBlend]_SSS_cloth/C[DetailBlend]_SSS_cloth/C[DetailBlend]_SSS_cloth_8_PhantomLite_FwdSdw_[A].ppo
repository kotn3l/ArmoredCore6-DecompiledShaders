#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _4052;
float _4053;
float _4054;
float _4055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    vec4 _310 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _316 = _310.w;
    vec4 _328 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _344 = exp2(log2(1.0 - _316) * 8.0);
    vec4 _356 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _372 = exp2(log2(_316) * 8.0);
    vec4 _385 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _409 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _418 = ((_328.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _409.x;
    float _421 = ((_328.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _409.y;
    float _424 = ((_328.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _409.z;
    float _431 = (((cbMtdParam._m0[12u].x * _356.x) - _418) * _344) + _418;
    float _432 = (((cbMtdParam._m0[12u].y * _356.y) - _421) * _344) + _421;
    float _433 = (((cbMtdParam._m0[12u].z * _356.z) - _424) * _344) + _424;
    float _440 = (((cbMtdParam._m0[11u].x * _385.x) - _431) * _372) + _431;
    float _441 = (((cbMtdParam._m0[11u].y * _385.y) - _432) * _372) + _432;
    float _442 = (((cbMtdParam._m0[11u].z * _385.z) - _433) * _372) + _433;
    float _443 = _409.w * _328.w;
    vec4 _460 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = cbMtdParam._m0[14u].z + _460.x;
    float _471 = ((cbMtdParam._m0[14u].y - _464) * _344) + _464;
    float _474 = ((cbMtdParam._m0[15u].x - _471) * _372) + _471;
    vec4 _486 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    vec4 _508 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _533 = (_310.z * 2.0) * (cbMtdParam._m0[13u].x + _486.z);
    float _537 = (((_508.z - _533) + cbMtdParam._m0[14u].x) * _344) + _533;
    float _541 = (((_525.z - _537) + cbMtdParam._m0[13u].w) * _372) + _537;
    float _545 = (_310.x * 2.0) + (-1.0);
    float _547 = (_310.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _4064 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))));
    float _558 = ((_508.x - _488) * _344) + _488;
    float _559 = ((_508.y - _489) * _344) + _489;
    float _572 = ((((((_525.x - _558) * _372) + _558) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _545;
    float _573 = ((((((_525.y - _559) * _372) + _559) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _547;
    float _576 = fma(_553, _238, fma(_573, _230 * TANGENT.x, (_216 * _208) * _572));
    float _579 = fma(_553, _239, fma(_573, _230 * TANGENT.y, (_216 * _209) * _572));
    float _582 = fma(_553, _240, fma(_573, _230 * TANGENT.z, (_216 * _210) * _572));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _4075 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _590 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _591 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _592 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _593 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _594 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _595 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _603 = cbMatDynParam._m0[9u].x * _592;
    float _604 = cbMatDynParam._m0[9u].y * _593;
    float _605 = cbMatDynParam._m0[9u].z * _594;
    float _612 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _613 = _612 * _295;
    float _614 = _612 * _296;
    float _615 = _612 * _297;
    float _616 = dot(vec3(_587, _588, _589), vec3(_613, _614, _615));
    float _622 = abs(exp2(log2(_616) * cbMatDynParam._m0[12u].x));
    float _623 = isnan(0.100000001490116119384765625) ? _622 : (isnan(_622) ? 0.100000001490116119384765625 : max(_622, 0.100000001490116119384765625));
    float _629 = ((isnan(0.699999988079071044921875) ? _623 : (isnan(_623) ? 0.699999988079071044921875 : min(_623, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _651 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4151 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4162 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _659 = dot(vec3(_587, _588, _589), vec3(0.0, -1.0, 0.0));
    float _4173 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _669 = (_662 * _592) * cbMatDynParam._m0[11u].x;
    float _671 = (_662 * _593) * cbMatDynParam._m0[11u].y;
    float _673 = (_662 * _594) * cbMatDynParam._m0[11u].z;
    float _680 = dot(vec3(_613, _614, _615), vec3(_587, _588, _589));
    float _683 = _680 * 2.0;
    float _693 = dot(vec3((-0.0) - (_613 - (_683 * _587)), (-0.0) - (_614 - (_683 * _588)), (-0.0) - (_615 - (_683 * _589))), vec3(0.0, -1.0, 0.0));
    float _4184 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _700 = exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 4.0);
    float _726 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _731 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _733 = _731.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1031 = sqrt(((_295 * _295) + (_296 * _296)) + (_297 * _297));
        float _1037 = (cbMatDynParam._m0[5u].x * _1031) + cbMatDynParam._m0[5u].y;
        float _4195 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1042 = (cbMatDynParam._m0[5u].z * _1031) + cbMatDynParam._m0[5u].w;
        float _4206 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) - _1038)) + _1038) < ((_733 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _744 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _745 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _747 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _749 = _747.w;
    float _768 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _771 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _774 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    vec4 _776 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _778 = _776.x;
    float _790 = (((_776.y - _591) + (_776.w * _591)) * cbMtdParam._m0[3u].x) + _591;
    vec4 _791 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _807 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_778 * _778)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _791.z;
    float _815 = (((cbMatDynParam._m0[15u].x - _595) * cbMatDynParam._m0[15u].w) * _807) + _595;
    float _823 = ((_807 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _790)) + _790;
    uint _847 = uint(roundEven(NORMAL.w)) * 13u;
    uint _848 = _847 + 9u;
    uint _849 = _848 + uint(cbMatDynParam._m0[0u].w);
    float _855 = (cbMtdParam._m0[0u].x * _603) * cbInstanceData._m0[_849].x;
    float _856 = (cbMtdParam._m0[0u].y * _604) * cbInstanceData._m0[_849].y;
    float _857 = (cbMtdParam._m0[0u].z * _605) * cbInstanceData._m0[_849].z;
    float _4217 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _4228 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    vec4 _861 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _866 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _877 = (((_866.x - _815) + (_866.w * _815)) * cbMtdParam._m0[3u].x) + _815;
    float _890 = (cbMtdParam._m0[3u].x * (((_858 * _749) - _858) + _861.x)) + _858;
    float _891 = (cbMtdParam._m0[3u].x * (((_859 * _749) - _859) + _861.y)) + _859;
    float _892 = (cbMtdParam._m0[3u].x * (((_860 * _749) - _860) + _861.z)) + _860;
    vec4 _893 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _906 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_815 * (_603 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_815 * (_604 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_815 * (_605 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _893.z;
    float _910 = _906 * cbMatDynParam._m0[13u].w;
    float _920 = (_910 * (cbMatDynParam._m0[13u].x - _890)) + _890;
    float _921 = (_910 * (cbMatDynParam._m0[13u].y - _891)) + _891;
    float _922 = (_910 * (cbMatDynParam._m0[13u].z - _892)) + _892;
    float _930 = ((_906 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _877)) + _877;
    float _931 = 1.0 - _930;
    float _932 = _931 * _920;
    float _933 = _931 * _921;
    float _934 = _931 * _922;
    float _938 = (_920 + (-0.039999999105930328369140625)) * _930;
    float _939 = (_921 + (-0.039999999105930328369140625)) * _930;
    float _940 = (_922 + (-0.039999999105930328369140625)) * _930;
    float _941 = _938 + 0.039999999105930328369140625;
    float _942 = _939 + 0.039999999105930328369140625;
    float _943 = _940 + 0.039999999105930328369140625;
    vec4 _952 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _744, cbSceneParam._m0[86u].y * _745));
    float _955 = _952.x * TEXCOORD_4;
    float _956 = _616 * 2.0;
    float _960 = (_956 * _587) - _613;
    float _961 = (_956 * _588) - _614;
    float _962 = (_956 * _589) - _615;
    float _963 = abs(_680);
    float _4250 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _965 = sqrt(_823);
    float _977 = exp2((_965 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_965 * 3.0));
    float _983 = (1.0 - _977) * ((_965 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _965;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1080 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1084 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1109 = _1012 + _587;
        float _1110 = _1016 + _588;
        float _1111 = _1020 + _589;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_587, _588, _589), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4298 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_587, _588, _589), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4331 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_587, _588, _589), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4364 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1399 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1403 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1426 = _1012 + _587;
        float _1427 = _1016 + _588;
        float _1428 = _1020 + _589;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_587, _588, _589), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4427 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_587, _588, _589), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4460 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_587, _588, _589), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4471 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4482 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4493 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = _1352;
        _1674 = _1352;
        _1675 = _1352;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1364)) + _1364;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1365)) + _1365;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1366)) + _1366;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _960 * 0.5;
    float _1733 = _961 * 0.5;
    float _1734 = _962 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1859 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1862 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1890 = frontier_phi_19_17_ladder;
        }
        float _2065;
        if (_1859 > 0.0)
        {
            _2065 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2065 = frontier_phi_28_24_ladder;
        }
        float _2360;
        if (_1862 > 0.0)
        {
            _2360 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2360 = frontier_phi_40_35_ladder;
        }
        float _2362 = isnan(_2065) ? _1890 : (isnan(_1890) ? _2065 : min(_1890, _2065));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1856) + _1845;
        float _2368 = (_2363 * _1859) + _1849;
        float _2369 = (_2363 * _1862) + _1853;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_18_40_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_18_40_ladder_2;
        _1880 = frontier_phi_18_40_ladder_1;
        _1882 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1798);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1958 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1961 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2070;
        if (_1955 > 0.0)
        {
            _2070 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2070 = frontier_phi_30_26_ladder;
        }
        float _2387;
        if (_1958 > 0.0)
        {
            _2387 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2387 = frontier_phi_42_37_ladder;
        }
        float _2725;
        if (_1961 > 0.0)
        {
            _2725 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2725 = frontier_phi_52_49_ladder;
        }
        float _2727 = isnan(_2387) ? _2070 : (isnan(_2070) ? _2387 : min(_2070, _2387));
        float _2728 = isnan(_2725) ? _2727 : (isnan(_2727) ? _2725 : min(_2727, _2725));
        float _2732 = (_2728 * _1955) + _1944;
        float _2733 = (_2728 * _1958) + _1948;
        float _2734 = (_2728 * _1961) + _1952;
        float _2735 = _2728 * 9.9999997473787516355514526367188e-05;
        float _2736 = (-1.0) - _2735;
        float _2738 = _2735 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2734 > _2738) || ((_2734 < _2736) || ((_2733 > _2738) || ((_2733 < _2736) || ((_2732 < _2736) || (_2732 > _2738))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2734, cbModelParam._m0[17u].z, fma(_2733, cbModelParam._m0[17u].y, _2732 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2734, cbModelParam._m0[18u].z, fma(_2733, cbModelParam._m0[18u].y, _2732 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2734, cbModelParam._m0[19u].z, fma(_2733, cbModelParam._m0[19u].y, _2732 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_27_52_ladder = _2856.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2856.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2856.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_27_52_ladder_2;
        _1982 = frontier_phi_27_52_ladder_1;
        _1984 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1887);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1997 = (((_983 * _941) + _984) * _955) * ((cbModelParam._m0[1u].w * (_1980 - _1878)) + _1878);
    float _1999 = (((_983 * _942) + _984) * _955) * ((cbModelParam._m0[1u].w * (_1982 - _1880)) + _1880);
    float _2001 = (((_983 * _943) + _984) * _955) * ((cbModelParam._m0[1u].w * (_1984 - _1882)) + _1882);
    float _2004 = fma(_2001, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_2001, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_2001, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2056 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2057 = _2044 / _2056;
    float _2058 = _2048 / _2056;
    float _2059 = _2052 / _2056;
    float _2206;
    float _2207;
    float _2208;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2086 = ((uint(_2059 > cbSceneParam._m0[59u].y) + uint(_2059 > cbSceneParam._m0[59u].x)) + uint(_2059 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2087 = _2086 + 43u;
        uint _2095 = _2086 + 44u;
        uint _2103 = _2086 + 45u;
        uint _2111 = _2086 + 46u;
        float _2122 = fma(_2056, cbSceneParam._m0[_2087].w, fma(_2052, cbSceneParam._m0[_2087].z, fma(_2048, cbSceneParam._m0[_2087].y, _2044 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2056, cbSceneParam._m0[_2095].w, fma(_2052, cbSceneParam._m0[_2095].z, fma(_2048, cbSceneParam._m0[_2095].y, _2044 * cbSceneParam._m0[_2095].x)));
        float _2134 = fma(_2056, cbSceneParam._m0[_2111].w, fma(_2052, cbSceneParam._m0[_2111].z, fma(_2048, cbSceneParam._m0[_2111].y, _2044 * cbSceneParam._m0[_2111].x)));
        float _2139 = cbSceneParam._m0[33u].z * _2134;
        float _2141 = cbSceneParam._m0[33u].w * _2134;
        float _2144 = fma(_2056, cbSceneParam._m0[_2103].w, fma(_2052, cbSceneParam._m0[_2103].z, fma(_2048, cbSceneParam._m0[_2103].y, _2044 * cbSceneParam._m0[_2103].x))) / _2134;
        float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
        float _4619 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2199 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 + _2122) / _2134, (_2141 + _2126) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2122) / _2134, (_2126 - _2139) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2139) / _2134, (_2126 - _2141) / _2134), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 - _2141) / _2134, (_2139 + _2126) / _2134), _2144), 0.0)).x), vec4(0.25)));
        _2206 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
        _2207 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
        _2208 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2206 = 1.0;
        _2207 = 1.0;
        _2208 = 1.0;
    }
    float _2272;
    float _2274;
    float _2276;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2260 = fma(_2056, cbSceneParam._m0[63u].w, fma(_2052, cbSceneParam._m0[63u].z, fma(_2048, cbSceneParam._m0[63u].y, _2044 * cbSceneParam._m0[63u].x)));
        float _2261 = fma(_2056, cbSceneParam._m0[60u].w, fma(_2052, cbSceneParam._m0[60u].z, fma(_2048, cbSceneParam._m0[60u].y, _2044 * cbSceneParam._m0[60u].x))) / _2260;
        float _2262 = fma(_2056, cbSceneParam._m0[61u].w, fma(_2052, cbSceneParam._m0[61u].z, fma(_2048, cbSceneParam._m0[61u].y, _2044 * cbSceneParam._m0[61u].x))) / _2260;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2261 >= cbSceneParam._m0[64u].x) && (_2262 >= cbSceneParam._m0[64u].y)) && (_2261 <= cbSceneParam._m0[64u].z)) && (_2262 <= cbSceneParam._m0[64u].w))
        {
            float _2400 = fma(_2056, cbSceneParam._m0[62u].w, fma(_2052, cbSceneParam._m0[62u].z, fma(_2048, cbSceneParam._m0[62u].y, _2044 * cbSceneParam._m0[62u].x))) / _2260;
            float _2404 = isnan(cbSceneParam._m0[41u].w) ? _2400 : (isnan(_2400) ? cbSceneParam._m0[41u].w : max(_2400, cbSceneParam._m0[41u].w));
            float _2447 = (cbSceneParam._m0[33u].x - sqrt(((_2058 * _2058) + (_2057 * _2057)) + (_2059 * _2059))) * cbSceneParam._m0[33u].y;
            float _4635 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
            float _2454 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2261, cbSceneParam._m0[33u].w + _2262), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2261, _2262 - cbSceneParam._m0[33u].z), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].z, _2262 - cbSceneParam._m0[33u].w), _2404), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2262), _2404), 0.0)).x), vec4(0.25)));
            float _2458 = 1.0 - (_2454 * cbSceneParam._m0[34u].x);
            float _2459 = 1.0 - (_2454 * cbSceneParam._m0[34u].y);
            float _2460 = 1.0 - (_2454 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_39_38_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_39_38_ladder_2 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
        }
        else
        {
            frontier_phi_39_38_ladder = _2207;
            frontier_phi_39_38_ladder_1 = _2206;
            frontier_phi_39_38_ladder_2 = _2208;
        }
        _2272 = frontier_phi_39_38_ladder_1;
        _2274 = frontier_phi_39_38_ladder;
        _2276 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2272 = _2206;
        _2274 = _2207;
        _2276 = _2208;
    }
    uvec4 _2281 = floatBitsToUint(cbInstanceData._m0[_847 + 5u]);
    uint _2283 = _2281.x * 14u;
    uint _2284 = _2283 + 13u;
    float _2291 = _955 + (-1.0);
    float _2296 = (cbLight._m0[_2284].x * _2291) + 1.0;
    float _2297 = (cbLight._m0[_2284].y * _2291) + 1.0;
    float _2298 = (cbLight._m0[_2284].z * _2291) + 1.0;
    float _2299 = (cbLight._m0[_2284].w * _2291) + 1.0;
    uint _2300 = _2283 + 5u;
    float _2306 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
    uint _2310 = _2283 + 4u;
    float _2319 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2323 = _2283 | 1u;
    float _2334 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_587, _588, _589));
    float _2337 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_587, _588, _589));
    float _4671 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _4682 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2342 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2344 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2351 = ((cbLight._m0[_2300].x * _2306) * _2344) + (((cbLight._m0[_2310].x * _2272) * _2319) * _2342);
    float _2352 = ((_2306 * cbLight._m0[_2300].y) * _2344) + (((cbLight._m0[_2310].y * _2274) * _2319) * _2342);
    float _2353 = ((_2306 * cbLight._m0[_2300].z) * _2344) + (((cbLight._m0[_2310].z * _2276) * _2319) * _2342);
    uvec4 _2357 = floatBitsToUint(cbLight._m0[_2283 + 12u]);
    bool _2359 = _2357.x == 0u;
    float _2461;
    float _2463;
    float _2465;
    if (_2359)
    {
        _2461 = _2351;
        _2463 = _2352;
        _2465 = _2353;
    }
    else
    {
        uint _2469 = _2283 + 6u;
        float _2485 = (dot(vec3(cbLight._m0[_2283 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4693 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
        float _2488 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2461 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2351;
        _2463 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2352;
        _2465 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2353;
    }
    bool _2468 = _2357.y == 0u;
    float _2523;
    float _2525;
    float _2527;
    if (_2468)
    {
        _2523 = _2461;
        _2525 = _2463;
        _2527 = _2465;
    }
    else
    {
        uint _2696 = _2283 + 7u;
        float _2712 = (dot(vec3(cbLight._m0[_2283 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2713 = _2712 * _2712;
        float _4709 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2714 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2715 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2523 = (((cbLight._m0[_2696].x * 0.3183098733425140380859375) * _2714) * _2715) + _2461;
        _2525 = (((cbLight._m0[_2696].y * 0.3183098733425140380859375) * _2714) * _2715) + _2463;
        _2527 = (((cbLight._m0[_2696].z * 0.3183098733425140380859375) * _2714) * _2715) + _2465;
    }
    uint _2530 = _2283 + 8u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _823) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2283].x + _613;
    float _2546 = cbLight._m0[_2283].y + _614;
    float _2547 = cbLight._m0[_2283].z + _615;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2283].xyz));
    float _4725 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _4736 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2559 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2560 = dot(vec3(_587, _588, _589), vec3(_2552, _2553, _2554));
    float _4747 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2564 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2552, _2553, _2554));
    float _4758 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2568 = _2544 * _2544;
    float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
    float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2581 = 0.959999978542327880859375 - _938;
    float _2583 = 0.959999978542327880859375 - _939;
    float _2584 = 0.959999978542327880859375 - _940;
    float _2591 = 1.0 - _2544;
    float _2602 = (0.5 / (((_2559 * ((_2558 * _2591) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2591) + _2544) * _2558))) * _2558;
    float _4769 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
    uint _2618 = _2283 + 9u;
    float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _823) * 0.949999988079071044921875);
    float _2630 = _2629 * _2629;
    float _2631 = cbLight._m0[_2323].x + _613;
    float _2632 = cbLight._m0[_2323].y + _614;
    float _2633 = cbLight._m0[_2323].z + _615;
    float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
    float _2638 = _2637 * _2631;
    float _2639 = _2637 * _2632;
    float _2640 = _2637 * _2633;
    float _2641 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2323].xyz));
    float _4780 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2645 = dot(vec3(_587, _588, _589), vec3(_2638, _2639, _2640));
    float _4791 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2649 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2638, _2639, _2640));
    float _4802 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2653 = _2630 * _2630;
    float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
    float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
    float _2671 = 1.0 - _2630;
    float _2681 = (0.5 / (((_2559 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2671) + _2630) * _2644))) * _2644;
    float _4813 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
    float _2693 = (((((_2664 * _2581) + _941) * cbLight._m0[_2618].x) * _2683) * _2306) + ((((cbLight._m0[_2530].x * _2272) * ((_2580 * _2581) + _941)) * _2604) * _2319);
    float _2694 = (((((_2664 * _2583) + _942) * cbLight._m0[_2618].y) * _2683) * _2306) + ((((cbLight._m0[_2530].y * _2274) * ((_2580 * _2583) + _942)) * _2604) * _2319);
    float _2695 = (((((_2664 * _2584) + _943) * cbLight._m0[_2618].z) * _2683) * _2306) + ((((cbLight._m0[_2530].z * _2276) * ((_2580 * _2584) + _943)) * _2604) * _2319);
    float _2751;
    float _2753;
    float _2755;
    if (_2359)
    {
        _2751 = _2693;
        _2753 = _2694;
        _2755 = _2695;
    }
    else
    {
        uint _2757 = _2283 + 2u;
        uint _2761 = _2283 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _823) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _613;
        float _2778 = cbLight._m0[_2757].y + _614;
        float _2779 = cbLight._m0[_2757].z + _615;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2757].xyz));
        float _4824 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2791 = dot(vec3(_587, _588, _589), vec3(_2784, _2785, _2786));
        float _4835 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4846 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2559 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2817) + _2776) * _2790))) * _2790;
        float _4857 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2751 = (((((_2810 * _2581) + _941) * cbLight._m0[_2761].x) * _2829) * _2830) + _2693;
        _2753 = (((((_2810 * _2583) + _942) * cbLight._m0[_2761].y) * _2829) * _2830) + _2694;
        _2755 = (((((_2810 * _2584) + _943) * cbLight._m0[_2761].z) * _2829) * _2830) + _2695;
    }
    float _2861;
    float _2863;
    float _2865;
    if (_2468)
    {
        _2861 = _2751;
        _2863 = _2753;
        _2865 = _2755;
    }
    else
    {
        uint _2872 = _2283 + 3u;
        uint _2876 = _2283 + 11u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _823) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _613;
        float _2893 = cbLight._m0[_2872].y + _614;
        float _2894 = cbLight._m0[_2872].z + _615;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2872].xyz));
        float _4873 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2906 = dot(vec3(_587, _588, _589), vec3(_2899, _2900, _2901));
        float _4884 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4895 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2559 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2559 * _2932) + _2891) * _2905))) * _2905;
        float _4906 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
        _2861 = (((((_2925 * _2581) + _941) * cbLight._m0[_2876].x) * _2944) * _2945) + _2751;
        _2863 = (((((_2925 * _2583) + _942) * cbLight._m0[_2876].y) * _2944) * _2945) + _2753;
        _2865 = (((((_2925 * _2584) + _943) * cbLight._m0[_2876].z) * _2944) * _2945) + _2755;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2281.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _745) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _744) / _2967)));
        float _2988 = (log2(_2059 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
        }
        else
        {
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            uint _3270 = 0u;
            uint _3279;
            bool _3280;
            for (;;)
            {
                _3279 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                _3280 = _3279 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3280)
                {
                    frontier_phi_73_pred = _3269;
                    frontier_phi_73_pred_1 = _3268;
                    frontier_phi_73_pred_2 = _3267;
                    frontier_phi_73_pred_3 = _3266;
                    frontier_phi_73_pred_4 = _3265;
                    frontier_phi_73_pred_5 = _3264;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3279;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3270 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2057;
                        float _3476 = _3435.y - _2058;
                        float _3477 = _3435.z - _2059;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_768, _771, _774), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4932 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3505 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3509 = (-0.0) - _2057;
                        float _3510 = (-0.0) - _2058;
                        float _3511 = (-0.0) - _2059;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3516 = _3515 * _3509;
                        float _3517 = _3515 * _3510;
                        float _3518 = _3515 * _3511;
                        float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3526 = 1.0 - _965;
                        float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                        float _3534 = _3533 * _3533;
                        float _3535 = _3534 * _3534;
                        float _3536 = _3516 + _3482;
                        float _3537 = _3517 + _3483;
                        float _3538 = _3518 + _3484;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3546 = dot(vec3(_768, _771, _774), vec3(_3516, _3517, _3518));
                        float _4948 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3550 = dot(vec3(_768, _771, _774), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                        float _4959 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                        float _3558 = _3495 * _3534;
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3485) + _3559;
                        float _4970 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3564 = 1.0 - _3534;
                        float _3574 = (0.5 / (((_3563 * ((_3549 * _3564) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3534) * _3549))) * _3563;
                        float _4981 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3585 = (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3339 = (_3505 * _3454.x) + _3412;
                        _3340 = (_3505 * _3454.y) + _3413;
                        _3341 = (_3505 * _3454.z) + _3414;
                        _3336 = (_3585 * _3471.x) + _3409;
                        _3337 = (_3585 * _3471.y) + _3410;
                        _3338 = (_3585 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_73_pred = _3341;
                    frontier_phi_73_pred_1 = _3340;
                    frontier_phi_73_pred_2 = _3339;
                    frontier_phi_73_pred_3 = _3338;
                    frontier_phi_73_pred_4 = _3337;
                    frontier_phi_73_pred_5 = _3336;
                }
                _3114 = frontier_phi_73_pred;
                _3112 = frontier_phi_73_pred_1;
                _3110 = frontier_phi_73_pred_2;
                _3108 = frontier_phi_73_pred_3;
                _3106 = frontier_phi_73_pred_4;
                _3104 = frontier_phi_73_pred_5;
                uint _3271 = _3270 + 1u;
                if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3264 = _3104;
                    _3265 = _3106;
                    _3266 = _3108;
                    _3267 = _3110;
                    _3268 = _3112;
                    _3269 = _3114;
                    _3270 = _3271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
        }
        uvec4 _3117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3118 = _3117.z;
        uint _3120 = (_3118 >> 8u) & 15u;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((4294967295u << _3120) & _2998) == 0u)
        {
            _3232 = _3103;
            _3234 = _3105;
            _3236 = _3107;
            _3238 = _3109;
            _3240 = _3111;
            _3242 = _3113;
        }
        else
        {
            float _3257 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
            float _3258 = _3257 * _2057;
            float _3259 = _3257 * _2058;
            float _3260 = _3257 * _2059;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3120 < ((_3118 >> 12u) & 15u))
            {
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3392 = _3103;
                float _3393 = _3105;
                float _3394 = _3107;
                float _3395 = _3109;
                float _3396 = _3111;
                float _3397 = _3113;
                uint _3398 = _3120;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3408)
                    {
                        frontier_phi_84_pred = _3396;
                        frontier_phi_84_pred_1 = _3395;
                        frontier_phi_84_pred_2 = _3394;
                        frontier_phi_84_pred_3 = _3393;
                        frontier_phi_84_pred_4 = _3392;
                        frontier_phi_84_pred_5 = _3397;
                    }
                    else
                    {
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3612 = _3392;
                        float _3613 = _3393;
                        float _3614 = _3394;
                        float _3615 = _3395;
                        float _3616 = _3396;
                        float _3617 = _3397;
                        uint _3618 = _3407;
                        uint _3619;
                        vec4 _3644;
                        float _3645;
                        vec4 _3660;
                        vec3 _3672;
                        vec4 _3687;
                        vec4 _3703;
                        float _3750;
                        bool _3751;
                        for (;;)
                        {
                            uint _3629 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3618));
                            _3619 = (_3618 + 4294967295u) & _3618;
                            uint _3631 = _3629 * 40u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3645 = _3644.w;
                            uint _3647 = (_3629 * 40u) + 4u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3629 * 40u) + 8u;
                            _3672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x));
                            uint _3674 = (_3629 * 40u) + 16u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3690 = (_3629 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3706 = (_3629 * 40u) + 24u;
                            vec4 _3719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 3u)).x));
                            uint _3725 = (_3629 * 40u) + 28u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            _3750 = fma(_2059, _3738.z, fma(_2058, _3738.y, _3738.x * _2057)) + _3738.w;
                            _3751 = !((fma(_2059, _3719.z, fma(_2058, _3719.y, _3719.x * _2057)) + _3719.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3751)
                            {
                                float _3778 = _3644.x - _2057;
                                float _3779 = _3644.y - _2058;
                                float _3780 = _3644.z - _2059;
                                float _3781 = dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780));
                                float _3784 = inversesqrt(_3781);
                                float _3785 = _3784 * _3778;
                                float _3786 = _3784 * _3779;
                                float _3787 = _3784 * _3780;
                                float _3791 = 1.0 - (_3781 / (_3645 * _3645));
                                float _4992 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3796 = sqrt(_3781) * _3660.w;
                                float _3798 = 1.39999997615814208984375 / (_3796 + 1.39999997615814208984375);
                                float _3799 = _3798 * _3798;
                                float _3802 = ((1.0 - _3799) * dot(vec3(_3785, _3786, _3787), vec3(_768, _771, _774))) + _3799;
                                float _3805 = _3796 * _3796;
                                float _3809 = (fma(_2059, _3687.z, fma(_2058, _3687.y, _3687.x * _2057)) + _3687.w) / _3750;
                                float _3810 = (fma(_2059, _3703.z, fma(_2058, _3703.y, _3703.x * _2057)) + _3703.w) / _3750;
                                float _3814 = 1.0 - dot(vec2(_3809, _3810), vec2(_3809, _3810));
                                float _5008 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3816 = _3815 * (((isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0))) * _3792) / ((_3805 * 0.699999988079071044921875) + 1.0));
                                float _3828 = exp2(log2(1.0 / ((_3805 * 3.5) + 5.0)) * 0.25);
                                float _3829 = 1.0 - _965;
                                float _3836 = sqrt(1.0 - ((1.0 - (_3829 * _3829)) * (1.0 - (_3828 * _3828))));
                                float _3837 = _3836 * _3836;
                                float _3838 = _3837 * _3837;
                                float _3839 = _3785 - _3258;
                                float _3840 = _3786 - _3259;
                                float _3841 = _3787 - _3260;
                                float _3845 = inversesqrt(dot(vec3(_3839, _3840, _3841), vec3(_3839, _3840, _3841)));
                                float _3849 = dot(vec3(_768, _771, _774), vec3((-0.0) - _3258, (-0.0) - _3259, (-0.0) - _3260));
                                float _5019 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3853 = dot(vec3(_768, _771, _774), vec3(_3845 * _3839, _3845 * _3840, _3845 * _3841));
                                float _5030 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3860 = ((_3856 * _3856) * (_3838 + (-1.0))) + 1.0;
                                float _3861 = _3798 * _3837;
                                float _3862 = _3861 * _3861;
                                float _3868 = ((1.0 - _3862) * dot(vec3(_768, _771, _774), vec3(_3785, _3786, _3787))) + _3862;
                                float _5041 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3869 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3870 = 1.0 - _3837;
                                float _3880 = (0.5 / (((_3869 * ((_3852 * _3870) + _3837)) + 9.9999999392252902907785028219223e-09) + (((_3869 * _3870) + _3837) * _3852))) * _3869;
                                float _5052 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3890 = (_3815 * _3792) * (((_3838 * 3.1415927410125732421875) * (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0)))) / ((_3860 * _3860) * ((_3805 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3816 * _3660.y;
                                frontier_phi_90_pred_1 = _3816 * _3660.x;
                                frontier_phi_90_pred_2 = _3890 * _3672.z;
                                frontier_phi_90_pred_3 = _3890 * _3672.y;
                                frontier_phi_90_pred_4 = _3890 * _3672.x;
                                frontier_phi_90_pred_5 = _3816 * _3660.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_90_pred;
                            _3897 = frontier_phi_90_pred_1;
                            _3896 = frontier_phi_90_pred_2;
                            _3895 = frontier_phi_90_pred_3;
                            _3894 = frontier_phi_90_pred_4;
                            _3899 = frontier_phi_90_pred_5;
                            _3602 = _3897 + _3615;
                            _3603 = _3898 + _3616;
                            _3604 = _3899 + _3617;
                            _3599 = _3894 + _3612;
                            _3600 = _3895 + _3613;
                            _3601 = _3896 + _3614;
                            if (_3619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3619;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3603;
                        frontier_phi_84_pred_1 = _3602;
                        frontier_phi_84_pred_2 = _3601;
                        frontier_phi_84_pred_3 = _3600;
                        frontier_phi_84_pred_4 = _3599;
                        frontier_phi_84_pred_5 = _3604;
                    }
                    _3241 = frontier_phi_84_pred;
                    _3239 = frontier_phi_84_pred_1;
                    _3237 = frontier_phi_84_pred_2;
                    _3235 = frontier_phi_84_pred_3;
                    _3233 = frontier_phi_84_pred_4;
                    _3243 = frontier_phi_84_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3233;
                        _3393 = _3235;
                        _3394 = _3237;
                        _3395 = _3239;
                        _3396 = _3241;
                        _3397 = _3243;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3243;
                frontier_phi_65_66_ladder_1 = _3239;
                frontier_phi_65_66_ladder_2 = _3241;
                frontier_phi_65_66_ladder_3 = _3235;
                frontier_phi_65_66_ladder_4 = _3233;
                frontier_phi_65_66_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_65_66_ladder = _3113;
                frontier_phi_65_66_ladder_1 = _3109;
                frontier_phi_65_66_ladder_2 = _3111;
                frontier_phi_65_66_ladder_3 = _3105;
                frontier_phi_65_66_ladder_4 = _3103;
                frontier_phi_65_66_ladder_5 = _3107;
            }
            _3232 = frontier_phi_65_66_ladder_4;
            _3234 = frontier_phi_65_66_ladder_3;
            _3236 = frontier_phi_65_66_ladder_5;
            _3238 = frontier_phi_65_66_ladder_1;
            _3240 = frontier_phi_65_66_ladder_2;
            _3242 = frontier_phi_65_66_ladder;
        }
        float _3247 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _3010 = (_3247 * _3238) + _2523;
        _3012 = (_3247 * _3240) + _2525;
        _3014 = (_3247 * _3242) + _2527;
        _3016 = ((_3232 * _941) * _3247) + _2861;
        _3018 = ((_3234 * _942) * _3247) + _2863;
        _3020 = ((_3236 * _943) * _3247) + _2865;
    }
    else
    {
        _3010 = _2523;
        _3012 = _2525;
        _3014 = _2527;
        _3016 = _2861;
        _3018 = _2863;
        _3020 = _2865;
    }
    uint _3026 = _848 + uint(cbMatDynParam._m0[0u].w);
    float _3032 = cbInstanceData._m0[_3026].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _629) + cbMatDynParam._m0[7u].x) + (((_669 - (_669 * _595)) + (cbMatDynParam._m0[11u].x * _700)) * cbMatDynParam._m0[9u].x));
    float _3033 = cbInstanceData._m0[_3026].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _629) + cbMatDynParam._m0[7u].y) + (((_671 - (_671 * _595)) + (cbMatDynParam._m0[11u].y * _700)) * cbMatDynParam._m0[9u].y));
    float _3034 = cbInstanceData._m0[_3026].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _629) + cbMatDynParam._m0[7u].z) + (((_673 - (_673 * _595)) + (cbMatDynParam._m0[11u].z * _700)) * cbMatDynParam._m0[9u].z));
    float _5068 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _5079 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _5090 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _5101 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3052 = (((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3010 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _955))) + ((_3016 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + _3032;
    float _3054 = (_3033 + ((_3018 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3012 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _955)));
    float _3056 = (_3034 + ((_3020 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1787)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3014 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _955)));
    float _3057 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
    float _3058 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
    float _3059 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
    float _3064 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) - _655) * _629) + _655));
    float _3069 = cbInstanceData._m0[_847 + 6u].w * (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)));
    float _3074 = _744 / cbSceneParam._m0[86u].x;
    float _3075 = _745 / cbSceneParam._m0[86u].y;
    vec4 _3089 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, (log2((isnan(cbSceneParam._m0[77u].w) ? _726 : (isnan(_726) ? cbSceneParam._m0[77u].w : min(_726, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3091 = _3089.x;
    float _3092 = _3089.y;
    float _3093 = _3089.z;
    float _3094 = _3089.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_726 > cbSceneParam._m0[78u].w)
    {
        float _3128 = isnan(_726) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _726 : min(cbSceneParam._m0[80u].w, _726));
        float _3129 = _3128 / _726;
        float _3140 = _3129 * _295;
        float _3141 = _296 * _3129;
        float _3142 = (-0.0) - _3141;
        float _3143 = _3129 * _297;
        float _3145 = (cbSceneParam._m0[77u].w * _3142) / _3128;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3141;
        float _3153 = sqrt(((_3140 * _3140) + (_3141 * _3141)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3128)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3142 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3293 = 1.0 / cbSceneParam._m0[80u].x;
            float _3294 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3295 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            _3349 = ((abs(_3153 / _3142) * cbSceneParam._m0[80u].y) * ((((_3304 - _3305) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))))) * _3293)) - ((exp2(_3163 * _3304) - exp2(_3163 * _3305)) * _3293))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3074, _3075, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3094);
        _3165 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3091;
        _3167 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3092;
        _3169 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3093;
        _3171 = _3360 * _3094;
    }
    else
    {
        _3165 = _3091;
        _3167 = _3092;
        _3169 = _3093;
        _3171 = _3094;
    }
    bool _3387;
    vec4 _3181;
    vec4 _3203;
    float _3205;
    float _3209;
    float _3210;
    float _3211;
    float _3214;
    float _3217;
    float _3220;
    float _3221;
    bool _3231;
    for (;;)
    {
        _3181 = cbMatDynParam._m0[0u];
        float _3183 = roundEven(_3181.y);
        bool _3184 = _3183 == 3.0;
        float _3185 = log2(_3171);
        float _3189 = exp2(_3185 * cbSceneParam._m0[78u].x);
        float _3190 = exp2(_3185 * cbSceneParam._m0[78u].y);
        float _3191 = exp2(_3185 * cbSceneParam._m0[78u].z);
        float _3192 = _3189 * _3057;
        float _3193 = _3190 * _3058;
        float _3194 = _3191 * _3059;
        float _3201 = _733 + (-0.5);
        _3203 = cbMtdParam._m0[1u];
        _3205 = _3203.y * _3201;
        float _3208 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3209 = _3208 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
        _3210 = _3208 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
        _3211 = _3208 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
        _3214 = ((_3064 * _3032) * _3189) * _3208;
        _3217 = ((_3064 * _3033) * _3190) * _3208;
        _3220 = ((_3064 * _3034) * _3191) * _3208;
        _3221 = _3201 * 0.999000012874603271484375;
        _3231 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3231)
        {
            if ((cbInstanceData._m0[_847 + 7u].x + _3221) < 0.5)
            {
                _3387 = true;
                break;
            }
        }
        uint _3328 = _848 + uint(_3181.w);
        if ((cbInstanceData._m0[_3328].w < 1.0) && ((cbInstanceData._m0[_3328].w + _3221) < 0.5))
        {
            _3387 = true;
            break;
        }
        if ((_3205 + _443) < _3203.x)
        {
            _3387 = true;
            break;
        }
        _3387 = false;
        break;
    }
    float _3590;
    if (_3387)
    {
        discard_state = true;
        _3590 = 0.0;
    }
    else
    {
        _3590 = _3069;
    }
    SV_Target.x = _3209;
    SV_Target.y = _3210;
    SV_Target.z = _3211;
    SV_Target.w = _3590;
    SV_Target_1.x = _3214;
    SV_Target_1.y = _3217;
    SV_Target_1.z = _3220;
    SV_Target_1.w = _3069;
    discard_exit();
}


