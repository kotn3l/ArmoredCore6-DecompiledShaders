#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1315;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _318 = exp2(log2(_311 * 22.0) * 260.0);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _334 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _344 = cbMtdParam._m0[10u].x * _334.x;
    float _345 = cbMtdParam._m0[10u].y * _334.y;
    float _346 = cbMtdParam._m0[10u].z * _334.z;
    vec4 _358 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _378 = (((cbMtdParam._m0[9u].x * _358.x) - _344) * _320) + _344;
    float _379 = (((cbMtdParam._m0[9u].y * _358.y) - _345) * _320) + _345;
    float _380 = (((cbMtdParam._m0[9u].z * _358.z) - _346) * _320) + _346;
    float _385 = exp2(log2(1.0 - _306.w) * 8.0);
    vec4 _397 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _439 = (((((cbMtdParam._m0[12u].x * _397.x) - _378) * _385) + _378) * 4.55000019073486328125) * _431.x;
    float _441 = (((((cbMtdParam._m0[12u].y * _397.y) - _379) * _385) + _379) * 4.55000019073486328125) * _431.y;
    float _443 = (((((cbMtdParam._m0[12u].z * _397.z) - _380) * _385) + _380) * 4.55000019073486328125) * _431.z;
    float _444 = _431.w * _358.w;
    float _472 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _320) + cbMtdParam._m0[15u].y;
    float _475 = ((cbMtdParam._m0[14u].y - _472) * _385) + _472;
    vec4 _487 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _489 = _487.x;
    float _490 = _487.y;
    float _496 = cbMtdParam._m0[13u].y + _487.z;
    vec4 _508 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _517 = (((_508.z - _496) + cbMtdParam._m0[13u].x) * _320) + _496;
    vec4 _530 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _547 = (((_320 * (_311 + (-0.5))) + 0.5) * 2.0) * ((((_530.z - _517) + cbMtdParam._m0[14u].x) * _385) + _517);
    float _551 = (_306.x * 2.0) + (-1.0);
    float _553 = (_306.y * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _3971 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    float _564 = ((_508.x - _489) * _320) + _489;
    float _565 = ((_508.y - _490) * _320) + _490;
    float _578 = ((((((_530.x - _564) * _385) + _564) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _551;
    float _579 = ((((((_530.y - _565) * _385) + _565) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _553;
    float _582 = fma(_559, _234, fma(_579, _226 * TANGENT.x, (_212 * _204) * _578));
    float _585 = fma(_559, _235, fma(_579, _226 * TANGENT.y, (_212 * _205) * _578));
    float _588 = fma(_559, _236, fma(_579, _226 * TANGENT.z, (_212 * _206) * _578));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = _592 * _582;
    float _594 = _592 * _585;
    float _595 = _592 * _588;
    float _3982 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _596 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _597 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _598 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _599 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _600 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _601 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _609 = cbMatDynParam._m0[9u].x * _598;
    float _610 = cbMatDynParam._m0[9u].y * _599;
    float _611 = cbMatDynParam._m0[9u].z * _600;
    float _618 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _619 = _618 * _291;
    float _620 = _618 * _292;
    float _621 = _618 * _293;
    float _622 = dot(vec3(_593, _594, _595), vec3(_619, _620, _621));
    float _628 = abs(exp2(log2(_622) * cbMatDynParam._m0[12u].x));
    float _629 = isnan(0.100000001490116119384765625) ? _628 : (isnan(_628) ? 0.100000001490116119384765625 : max(_628, 0.100000001490116119384765625));
    float _635 = ((isnan(0.699999988079071044921875) ? _629 : (isnan(_629) ? 0.699999988079071044921875 : min(_629, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _658 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4058 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4069 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _666 = dot(vec3(_593, _594, _595), vec3(0.0, -1.0, 0.0));
    float _4080 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _676 = (_669 * _598) * cbMatDynParam._m0[11u].x;
    float _678 = (_669 * _599) * cbMatDynParam._m0[11u].y;
    float _680 = (_669 * _600) * cbMatDynParam._m0[11u].z;
    float _687 = dot(vec3(_619, _620, _621), vec3(_593, _594, _595));
    float _690 = _687 * 2.0;
    float _700 = dot(vec3((-0.0) - (_619 - (_690 * _593)), (-0.0) - (_620 - (_690 * _594)), (-0.0) - (_621 - (_690 * _595))), vec3(0.0, -1.0, 0.0));
    float _4091 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _707 = exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 4.0);
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _742 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _744 = _742.w;
    float _762 = fma(_595, cbSceneParam._m0[5u].z, fma(_594, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _593));
    float _765 = fma(_595, cbSceneParam._m0[6u].z, fma(_594, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _593));
    float _768 = fma(_595, cbSceneParam._m0[7u].z, fma(_594, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _593));
    vec4 _770 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _772 = _770.x;
    float _784 = (((_770.y - _597) + (_770.w * _597)) * cbMtdParam._m0[3u].x) + _597;
    vec4 _785 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _801 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_772 * _772)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _785.z;
    float _809 = (((cbMatDynParam._m0[15u].x - _601) * cbMatDynParam._m0[15u].w) * _801) + _601;
    float _817 = ((_801 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _784)) + _784;
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = _841 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * _609) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * _610) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * _611) * cbInstanceData._m0[_843].z;
    float _4102 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    vec4 _855 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _860 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _871 = (((_860.x - _809) + (_860.w * _809)) * cbMtdParam._m0[3u].x) + _809;
    float _884 = (cbMtdParam._m0[3u].x * (((_852 * _744) - _852) + _855.x)) + _852;
    float _885 = (cbMtdParam._m0[3u].x * (((_853 * _744) - _853) + _855.y)) + _853;
    float _886 = (cbMtdParam._m0[3u].x * (((_854 * _744) - _854) + _855.z)) + _854;
    float _900 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_809 * (_609 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_809 * (_610 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_809 * (_611 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _904 = _900 * cbMatDynParam._m0[13u].w;
    float _914 = (_904 * (cbMatDynParam._m0[13u].x - _884)) + _884;
    float _915 = (_904 * (cbMatDynParam._m0[13u].y - _885)) + _885;
    float _916 = (_904 * (cbMatDynParam._m0[13u].z - _886)) + _886;
    float _924 = ((_900 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _871)) + _871;
    float _925 = 1.0 - _924;
    float _926 = _925 * _914;
    float _927 = _925 * _915;
    float _928 = _925 * _916;
    float _932 = (_914 + (-0.039999999105930328369140625)) * _924;
    float _933 = (_915 + (-0.039999999105930328369140625)) * _924;
    float _934 = (_916 + (-0.039999999105930328369140625)) * _924;
    float _935 = _932 + 0.039999999105930328369140625;
    float _936 = _933 + 0.039999999105930328369140625;
    float _937 = _934 + 0.039999999105930328369140625;
    vec4 _946 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _949 = _946.x * TEXCOORD_4;
    float _950 = _622 * 2.0;
    float _954 = (_950 * _593) - _619;
    float _955 = (_950 * _594) - _620;
    float _956 = (_950 * _595) - _621;
    float _957 = abs(_687);
    float _4135 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_817);
    float _971 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _977 = (1.0 - _971) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _959;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1045 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1049 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1072 = _1006 + _593;
        float _1073 = _1010 + _594;
        float _1074 = _1014 + _595;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_593, _594, _595), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _4183 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_593, _594, _595), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4216 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_593, _594, _595), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4249 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1355 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1359 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1363 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1386 = _1006 + _593;
        float _1387 = _1010 + _594;
        float _1388 = _1014 + _595;
        float _1398 = fma(_1388, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1386)) - _1355;
        float _1399 = fma(_1388, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1386)) - _1359;
        float _1400 = fma(_1388, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1386)) - _1363;
        float _1404 = inversesqrt(dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400)));
        float _1417 = ((_1404 * _1398) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1355 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1404 * _1399) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1359 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1404 * _1400) / cbModelParam._m0[35u].z) + ((((((_1363 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1417, _1418, _1419), 0.0);
        float _1454 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1421.x + (-0.5));
        float _1456 = _1454 * (_1421.y + (-0.5));
        float _1457 = _1454 * (_1421.z + (-0.5));
        float _1464 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1428.x + (-0.5));
        float _1466 = _1464 * (_1428.y + (-0.5));
        float _1467 = _1464 * (_1428.z + (-0.5));
        float _1474 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1435.x + (-0.5));
        float _1476 = _1474 * (_1435.y + (-0.5));
        float _1477 = _1474 * (_1435.z + (-0.5));
        float _1484 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1442.x + (-0.5));
        float _1486 = _1484 * (_1442.y + (-0.5));
        float _1487 = _1484 * (_1442.z + (-0.5));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = _1455 * 0.5;
        float _1492 = _1465 * 0.5;
        float _1493 = _1475 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_593, _594, _595), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4312 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1518 + 1.0))) + _1523) * _1488;
        float _1533 = _1456 * 0.5;
        float _1534 = _1466 * 0.5;
        float _1535 = _1476 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_593, _594, _595), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4345 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1560 + 1.0))) + _1565) * _1489;
        float _1575 = _1457 * 0.5;
        float _1576 = _1467 * 0.5;
        float _1577 = _1477 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_593, _594, _595), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4378 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1602 + 1.0))) + _1607) * _1490;
        _1624 = _1457;
        _1625 = _1456;
        _1626 = _1455;
        _1627 = _1467;
        _1628 = _1466;
        _1629 = _1465;
        _1630 = _1477;
        _1631 = _1476;
        _1632 = _1475;
        _1633 = _1490;
        _1634 = _1489;
        _1635 = _1488;
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
    }
    else
    {
        _1624 = _1315;
        _1625 = _1315;
        _1626 = _1315;
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1327)) + _1327;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1328)) + _1328;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1329)) + _1329;
    float _1671 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1648));
    float _1692 = _954 * 0.5;
    float _1693 = _955 * 0.5;
    float _1694 = _956 * 0.5;
    float _1695 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1698 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1701 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1708 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1712 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1716 = dot(vec4(_1692, _1693, _1694, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1723 = dot(vec4(cbModelParam._m0[39u]), vec4(_1692, _1693, _1694, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1692, _1693, _1694, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1819 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1822 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1850 = frontier_phi_16_14_ladder;
        }
        float _2025;
        if (_1819 > 0.0)
        {
            _2025 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2025 = frontier_phi_25_21_ladder;
        }
        float _2320;
        if (_1822 > 0.0)
        {
            _2320 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2320 = frontier_phi_37_32_ladder;
        }
        float _2322 = isnan(_2025) ? _1850 : (isnan(_1850) ? _2025 : min(_1850, _2025));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1816) + _1805;
        float _2328 = (_2323 * _1819) + _1809;
        float _2329 = (_2323 * _1822) + _1813;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2330;
        float _2334 = _2330 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 > _2334) || ((_2328 < _2332) || ((_2327 < _2332) || (_2327 > _2334))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_15_37_ladder = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2474.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2474.z * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_15_37_ladder_1;
        _1840 = frontier_phi_15_37_ladder;
        _1842 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1758);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1918 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1921 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _2030;
        if (_1915 > 0.0)
        {
            _2030 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2030 = frontier_phi_27_23_ladder;
        }
        float _2347;
        if (_1918 > 0.0)
        {
            _2347 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2347 = frontier_phi_39_34_ladder;
        }
        float _2685;
        if (_1921 > 0.0)
        {
            _2685 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2685 = frontier_phi_49_46_ladder;
        }
        float _2687 = isnan(_2347) ? _2030 : (isnan(_2030) ? _2347 : min(_2030, _2347));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _1915) + _1904;
        float _2693 = (_2688 * _1918) + _1908;
        float _2694 = (_2688 * _1921) + _1912;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_24_49_ladder = _2816.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2816.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2816.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_24_49_ladder_2;
        _1942 = frontier_phi_24_49_ladder_1;
        _1944 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1847);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1957 = (((_977 * _935) + _978) * _949) * ((cbModelParam._m0[1u].w * (_1940 - _1838)) + _1838);
    float _1959 = (((_977 * _936) + _978) * _949) * ((cbModelParam._m0[1u].w * (_1942 - _1840)) + _1840);
    float _1961 = (((_977 * _937) + _978) * _949) * ((cbModelParam._m0[1u].w * (_1944 - _1842)) + _1842);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1959, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1959, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1959, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2017 = _2004 / _2016;
    float _2018 = _2008 / _2016;
    float _2019 = _2012 / _2016;
    float _2166;
    float _2167;
    float _2168;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2046 = ((uint(_2019 > cbSceneParam._m0[59u].y) + uint(_2019 > cbSceneParam._m0[59u].x)) + uint(_2019 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2047 = _2046 + 43u;
        uint _2055 = _2046 + 44u;
        uint _2063 = _2046 + 45u;
        uint _2071 = _2046 + 46u;
        float _2082 = fma(_2016, cbSceneParam._m0[_2047].w, fma(_2012, cbSceneParam._m0[_2047].z, fma(_2008, cbSceneParam._m0[_2047].y, _2004 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2016, cbSceneParam._m0[_2055].w, fma(_2012, cbSceneParam._m0[_2055].z, fma(_2008, cbSceneParam._m0[_2055].y, _2004 * cbSceneParam._m0[_2055].x)));
        float _2094 = fma(_2016, cbSceneParam._m0[_2071].w, fma(_2012, cbSceneParam._m0[_2071].z, fma(_2008, cbSceneParam._m0[_2071].y, _2004 * cbSceneParam._m0[_2071].x)));
        float _2099 = cbSceneParam._m0[33u].z * _2094;
        float _2101 = cbSceneParam._m0[33u].w * _2094;
        float _2104 = fma(_2016, cbSceneParam._m0[_2063].w, fma(_2012, cbSceneParam._m0[_2063].z, fma(_2008, cbSceneParam._m0[_2063].y, _2004 * cbSceneParam._m0[_2063].x))) / _2094;
        float _2152 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
        float _4504 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2159 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2082) / _2094, (_2101 + _2086) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 + _2082) / _2094, (_2086 - _2099) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2099) / _2094, (_2086 - _2101) / _2094), _2104), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 - _2101) / _2094, (_2099 + _2086) / _2094), _2104), 0.0)).x), vec4(0.25)));
        _2166 = 1.0 - (_2159 * cbSceneParam._m0[34u].x);
        _2167 = 1.0 - (_2159 * cbSceneParam._m0[34u].y);
        _2168 = 1.0 - (_2159 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2166 = 1.0;
        _2167 = 1.0;
        _2168 = 1.0;
    }
    float _2232;
    float _2234;
    float _2236;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2220 = fma(_2016, cbSceneParam._m0[63u].w, fma(_2012, cbSceneParam._m0[63u].z, fma(_2008, cbSceneParam._m0[63u].y, _2004 * cbSceneParam._m0[63u].x)));
        float _2221 = fma(_2016, cbSceneParam._m0[60u].w, fma(_2012, cbSceneParam._m0[60u].z, fma(_2008, cbSceneParam._m0[60u].y, _2004 * cbSceneParam._m0[60u].x))) / _2220;
        float _2222 = fma(_2016, cbSceneParam._m0[61u].w, fma(_2012, cbSceneParam._m0[61u].z, fma(_2008, cbSceneParam._m0[61u].y, _2004 * cbSceneParam._m0[61u].x))) / _2220;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2221 >= cbSceneParam._m0[64u].x) && (_2222 >= cbSceneParam._m0[64u].y)) && (_2221 <= cbSceneParam._m0[64u].z)) && (_2222 <= cbSceneParam._m0[64u].w))
        {
            float _2360 = fma(_2016, cbSceneParam._m0[62u].w, fma(_2012, cbSceneParam._m0[62u].z, fma(_2008, cbSceneParam._m0[62u].y, _2004 * cbSceneParam._m0[62u].x))) / _2220;
            float _2364 = isnan(cbSceneParam._m0[41u].w) ? _2360 : (isnan(_2360) ? cbSceneParam._m0[41u].w : max(_2360, cbSceneParam._m0[41u].w));
            float _2407 = (cbSceneParam._m0[33u].x - sqrt(((_2018 * _2018) + (_2017 * _2017)) + (_2019 * _2019))) * cbSceneParam._m0[33u].y;
            float _4520 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
            float _2414 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2221, cbSceneParam._m0[33u].w + _2222), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2221, _2222 - cbSceneParam._m0[33u].z), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].z, _2222 - cbSceneParam._m0[33u].w), _2364), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2221 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2222), _2364), 0.0)).x), vec4(0.25)));
            float _2418 = 1.0 - (_2414 * cbSceneParam._m0[34u].x);
            float _2419 = 1.0 - (_2414 * cbSceneParam._m0[34u].y);
            float _2420 = 1.0 - (_2414 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
            frontier_phi_36_35_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_36_35_ladder_2 = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
        }
        else
        {
            frontier_phi_36_35_ladder = _2167;
            frontier_phi_36_35_ladder_1 = _2168;
            frontier_phi_36_35_ladder_2 = _2166;
        }
        _2232 = frontier_phi_36_35_ladder_2;
        _2234 = frontier_phi_36_35_ladder;
        _2236 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2232 = _2166;
        _2234 = _2167;
        _2236 = _2168;
    }
    uvec4 _2241 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _2243 = _2241.x * 14u;
    uint _2244 = _2243 + 13u;
    float _2251 = _949 + (-1.0);
    float _2256 = (cbLight._m0[_2244].x * _2251) + 1.0;
    float _2257 = (cbLight._m0[_2244].y * _2251) + 1.0;
    float _2258 = (cbLight._m0[_2244].z * _2251) + 1.0;
    float _2259 = (cbLight._m0[_2244].w * _2251) + 1.0;
    uint _2260 = _2243 + 5u;
    float _2266 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2270 = _2243 + 4u;
    float _2279 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2283 = _2243 | 1u;
    float _2294 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_593, _594, _595));
    float _2297 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_593, _594, _595));
    float _4556 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _4567 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2302 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * 0.3183098733425140380859375;
    float _2304 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2311 = ((cbLight._m0[_2260].x * _2266) * _2304) + (((cbLight._m0[_2270].x * _2232) * _2279) * _2302);
    float _2312 = ((_2266 * cbLight._m0[_2260].y) * _2304) + (((cbLight._m0[_2270].y * _2234) * _2279) * _2302);
    float _2313 = ((_2266 * cbLight._m0[_2260].z) * _2304) + (((cbLight._m0[_2270].z * _2236) * _2279) * _2302);
    uvec4 _2317 = floatBitsToUint(cbLight._m0[_2243 + 12u]);
    bool _2319 = _2317.x == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2319)
    {
        _2421 = _2311;
        _2423 = _2312;
        _2425 = _2313;
    }
    else
    {
        uint _2429 = _2243 + 6u;
        float _2445 = (dot(vec3(cbLight._m0[_2243 + 2u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2446 = _2445 * _2445;
        float _4578 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2447 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2448 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2421 = (((cbLight._m0[_2429].x * 0.3183098733425140380859375) * _2447) * _2448) + _2311;
        _2423 = (((cbLight._m0[_2429].y * 0.3183098733425140380859375) * _2447) * _2448) + _2312;
        _2425 = (((cbLight._m0[_2429].z * 0.3183098733425140380859375) * _2447) * _2448) + _2313;
    }
    bool _2428 = _2317.y == 0u;
    float _2483;
    float _2485;
    float _2487;
    if (_2428)
    {
        _2483 = _2421;
        _2485 = _2423;
        _2487 = _2425;
    }
    else
    {
        uint _2656 = _2243 + 7u;
        float _2672 = (dot(vec3(cbLight._m0[_2243 + 3u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2673 = _2672 * _2672;
        float _4594 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2674 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2675 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2483 = (((cbLight._m0[_2656].x * 0.3183098733425140380859375) * _2674) * _2675) + _2421;
        _2485 = (((cbLight._m0[_2656].y * 0.3183098733425140380859375) * _2674) * _2675) + _2423;
        _2487 = (((cbLight._m0[_2656].z * 0.3183098733425140380859375) * _2674) * _2675) + _2425;
    }
    uint _2490 = _2243 + 8u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _817) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2243].x + _619;
    float _2506 = cbLight._m0[_2243].y + _620;
    float _2507 = cbLight._m0[_2243].z + _621;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2243].xyz));
    float _4610 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _4621 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2519 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2520 = dot(vec3(_593, _594, _595), vec3(_2512, _2513, _2514));
    float _4632 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2524 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2512, _2513, _2514));
    float _4643 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2528 = _2504 * _2504;
    float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
    float _2540 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
    float _2541 = 0.959999978542327880859375 - _932;
    float _2543 = 0.959999978542327880859375 - _933;
    float _2544 = 0.959999978542327880859375 - _934;
    float _2551 = 1.0 - _2504;
    float _2562 = (0.5 / (((_2519 * ((_2518 * _2551) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2551) + _2504) * _2518))) * _2518;
    float _4654 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
    uint _2578 = _2243 + 9u;
    float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _817) * 0.949999988079071044921875);
    float _2590 = _2589 * _2589;
    float _2591 = cbLight._m0[_2283].x + _619;
    float _2592 = cbLight._m0[_2283].y + _620;
    float _2593 = cbLight._m0[_2283].z + _621;
    float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
    float _2598 = _2597 * _2591;
    float _2599 = _2597 * _2592;
    float _2600 = _2597 * _2593;
    float _2601 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2283].xyz));
    float _4665 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2605 = dot(vec3(_593, _594, _595), vec3(_2598, _2599, _2600));
    float _4676 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2609 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2598, _2599, _2600));
    float _4687 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2613 = _2590 * _2590;
    float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
    float _2624 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
    float _2631 = 1.0 - _2590;
    float _2641 = (0.5 / (((_2519 * ((_2604 * _2631) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2631) + _2590) * _2604))) * _2604;
    float _4698 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
    float _2653 = (((((_2624 * _2541) + _935) * cbLight._m0[_2578].x) * _2643) * _2266) + ((((cbLight._m0[_2490].x * _2232) * ((_2540 * _2541) + _935)) * _2564) * _2279);
    float _2654 = (((((_2624 * _2543) + _936) * cbLight._m0[_2578].y) * _2643) * _2266) + ((((cbLight._m0[_2490].y * _2234) * ((_2540 * _2543) + _936)) * _2564) * _2279);
    float _2655 = (((((_2624 * _2544) + _937) * cbLight._m0[_2578].z) * _2643) * _2266) + ((((cbLight._m0[_2490].z * _2236) * ((_2540 * _2544) + _937)) * _2564) * _2279);
    float _2711;
    float _2713;
    float _2715;
    if (_2319)
    {
        _2711 = _2653;
        _2713 = _2654;
        _2715 = _2655;
    }
    else
    {
        uint _2717 = _2243 + 2u;
        uint _2721 = _2243 + 10u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _817) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _619;
        float _2738 = cbLight._m0[_2717].y + _620;
        float _2739 = cbLight._m0[_2717].z + _621;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2717].xyz));
        float _4709 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2751 = dot(vec3(_593, _594, _595), vec3(_2744, _2745, _2746));
        float _4720 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4731 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
        float _2777 = 1.0 - _2736;
        float _2787 = (0.5 / (((_2519 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2777) + _2736) * _2750))) * _2750;
        float _4742 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
        _2711 = (((((_2770 * _2541) + _935) * cbLight._m0[_2721].x) * _2789) * _2790) + _2653;
        _2713 = (((((_2770 * _2543) + _936) * cbLight._m0[_2721].y) * _2789) * _2790) + _2654;
        _2715 = (((((_2770 * _2544) + _937) * cbLight._m0[_2721].z) * _2789) * _2790) + _2655;
    }
    float _2821;
    float _2823;
    float _2825;
    if (_2428)
    {
        _2821 = _2711;
        _2823 = _2713;
        _2825 = _2715;
    }
    else
    {
        uint _2832 = _2243 + 3u;
        uint _2836 = _2243 + 11u;
        float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2832].w)) * _817) * 0.949999988079071044921875);
        float _2851 = _2850 * _2850;
        float _2852 = cbLight._m0[_2832].x + _619;
        float _2853 = cbLight._m0[_2832].y + _620;
        float _2854 = cbLight._m0[_2832].z + _621;
        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
        float _2859 = _2858 * _2852;
        float _2860 = _2858 * _2853;
        float _2861 = _2858 * _2854;
        float _2862 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2832].xyz));
        float _4758 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2866 = dot(vec3(_593, _594, _595), vec3(_2859, _2860, _2861));
        float _4769 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2870 = dot(vec3(cbLight._m0[_2832].xyz), vec3(_2859, _2860, _2861));
        float _4780 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2874 = _2851 * _2851;
        float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
        float _2885 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
        float _2892 = 1.0 - _2851;
        float _2902 = (0.5 / (((_2519 * ((_2865 * _2892) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2519 * _2892) + _2851) * _2865))) * _2865;
        float _4791 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2904 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
        float _2905 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2821 = (((((_2885 * _2541) + _935) * cbLight._m0[_2836].x) * _2904) * _2905) + _2711;
        _2823 = (((((_2885 * _2543) + _936) * cbLight._m0[_2836].y) * _2904) * _2905) + _2713;
        _2825 = (((((_2885 * _2544) + _937) * cbLight._m0[_2836].z) * _2904) * _2905) + _2715;
    }
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_2241.y == 0u)
    {
        uvec4 _2926 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2927 = _2926.x;
        uint _2938 = uint((float(_2926.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2927))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2927)));
        float _2948 = (log2(_2019 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2949 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        uint _2952 = uint(isnan(14.0) ? _2949 : (isnan(_2949) ? 14.0 : min(_2949, 14.0)));
        uvec4 _2957 = texelFetch(g_lightClusterGridBuffer, int(((_2952 << 2u) + (_2938 << 6u)) >> 2u));
        uint _2958 = _2957.x;
        uint _2959 = _2926.z;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        if (((((1u << ((_2959 >> 4u) & 15u)) + 4294967295u) & _2958) == 0u) || ((_2959 & 240u) == 0u))
        {
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
        }
        else
        {
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            uint _3222 = 0u;
            uint _3231;
            bool _3232;
            for (;;)
            {
                _3231 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                _3232 = _3231 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3232)
                {
                    frontier_phi_68_pred = _3221;
                    frontier_phi_68_pred_1 = _3220;
                    frontier_phi_68_pred_2 = _3219;
                    frontier_phi_68_pred_3 = _3217;
                    frontier_phi_68_pred_4 = _3216;
                    frontier_phi_68_pred_5 = _3218;
                }
                else
                {
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    uint _3346;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3221;
                    _3346 = _3231;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    for (;;)
                    {
                        uint _3350 = uint(findLSB(_3346)) + (_3222 << 5u);
                        uint _3347 = (_3346 + 4294967295u) & _3346;
                        uint _3352 = _3350 * 48u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3372 = (_3350 * 48u) + 4u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3391 = (_3350 * 48u) + 8u;
                        vec3 _3402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x));
                        float _3406 = _3366.x - _2017;
                        float _3407 = _3366.y - _2018;
                        float _3408 = _3366.z - _2019;
                        float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                        float _3412 = inversesqrt(_3409);
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3416 = dot(vec3(_762, _765, _768), vec3(_3413, _3414, _3415));
                        float _3421 = 1.0 - (_3409 * _3366.w);
                        float _4817 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3423 = sqrt(_3409) * _3385.w;
                        float _3426 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3416) + _3427;
                        float _3433 = _3423 * _3423;
                        float _3436 = ((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3422) / ((_3433 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _2017;
                        float _3441 = (-0.0) - _2018;
                        float _3442 = (-0.0) - _2019;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3456 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _959;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3447 + _3413;
                        float _3468 = _3448 + _3414;
                        float _3469 = _3449 + _3415;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_762, _765, _768), vec3(_3447, _3448, _3449));
                        float _4833 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3481 = dot(vec3(_762, _765, _768), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4844 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3426 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3416) + _3490;
                        float _4855 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4866 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3488 * _3488) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125))) * _3422;
                        _3275 = (_3436 * _3385.x) + _3343;
                        _3276 = (_3436 * _3385.y) + _3344;
                        _3277 = (_3436 * _3385.z) + _3345;
                        _3272 = (_3516 * _3402.x) + _3340;
                        _3273 = (_3516 * _3402.y) + _3341;
                        _3274 = (_3516 * _3402.z) + _3342;
                        if (_3347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3277;
                            _3346 = _3347;
                        }
                    }
                    frontier_phi_68_pred = _3277;
                    frontier_phi_68_pred_1 = _3276;
                    frontier_phi_68_pred_2 = _3275;
                    frontier_phi_68_pred_3 = _3273;
                    frontier_phi_68_pred_4 = _3272;
                    frontier_phi_68_pred_5 = _3274;
                }
                _3074 = frontier_phi_68_pred;
                _3072 = frontier_phi_68_pred_1;
                _3070 = frontier_phi_68_pred_2;
                _3066 = frontier_phi_68_pred_3;
                _3064 = frontier_phi_68_pred_4;
                _3068 = frontier_phi_68_pred_5;
                uint _3223 = _3222 + 1u;
                if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3216 = _3064;
                    _3217 = _3066;
                    _3218 = _3068;
                    _3219 = _3070;
                    _3220 = _3072;
                    _3221 = _3074;
                    _3222 = _3223;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
        }
        uvec4 _3077 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3078 = _3077.z;
        uint _3080 = (_3078 >> 8u) & 15u;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        if (((4294967295u << _3080) & _2958) == 0u)
        {
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
        }
        else
        {
            float _3209 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
            float _3210 = _3209 * _2017;
            float _3211 = _3209 * _2018;
            float _3212 = _3209 * _2019;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3080 < ((_3078 >> 12u) & 15u))
            {
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3323 = _3063;
                float _3324 = _3065;
                float _3325 = _3067;
                float _3326 = _3069;
                float _3327 = _3071;
                float _3328 = _3073;
                uint _3329 = _3080;
                uint _3338;
                bool _3339;
                for (;;)
                {
                    _3338 = texelFetch(g_lightClassification, int((((_2952 << 5u) + (_2938 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                    _3339 = _3338 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3339)
                    {
                        frontier_phi_74_pred = _3325;
                        frontier_phi_74_pred_1 = _3324;
                        frontier_phi_74_pred_2 = _3323;
                        frontier_phi_74_pred_3 = _3328;
                        frontier_phi_74_pred_4 = _3327;
                        frontier_phi_74_pred_5 = _3326;
                    }
                    else
                    {
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3534 = _3323;
                        float _3535 = _3324;
                        float _3536 = _3325;
                        float _3537 = _3326;
                        float _3538 = _3327;
                        float _3539 = _3328;
                        uint _3540 = _3338;
                        uint _3541;
                        vec4 _3566;
                        float _3567;
                        vec4 _3582;
                        vec3 _3594;
                        vec4 _3609;
                        vec4 _3625;
                        float _3672;
                        bool _3673;
                        for (;;)
                        {
                            uint _3551 = ((_3329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3540));
                            _3541 = (_3540 + 4294967295u) & _3540;
                            uint _3553 = _3551 * 40u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            _3567 = _3566.w;
                            uint _3569 = (_3551 * 40u) + 4u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3551 * 40u) + 8u;
                            _3594 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x));
                            uint _3596 = (_3551 * 40u) + 16u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3612 = (_3551 * 40u) + 20u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3628 = (_3551 * 40u) + 24u;
                            vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3647 = (_3551 * 40u) + 28u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            _3672 = fma(_2019, _3660.z, fma(_2018, _3660.y, _3660.x * _2017)) + _3660.w;
                            _3673 = !((fma(_2019, _3641.z, fma(_2018, _3641.y, _3641.x * _2017)) + _3641.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3673)
                            {
                                float _3700 = _3566.x - _2017;
                                float _3701 = _3566.y - _2018;
                                float _3702 = _3566.z - _2019;
                                float _3703 = dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702));
                                float _3706 = inversesqrt(_3703);
                                float _3707 = _3706 * _3700;
                                float _3708 = _3706 * _3701;
                                float _3709 = _3706 * _3702;
                                float _3713 = 1.0 - (_3703 / (_3567 * _3567));
                                float _4877 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3718 = sqrt(_3703) * _3582.w;
                                float _3720 = 1.39999997615814208984375 / (_3718 + 1.39999997615814208984375);
                                float _3721 = _3720 * _3720;
                                float _3724 = ((1.0 - _3721) * dot(vec3(_3707, _3708, _3709), vec3(_762, _765, _768))) + _3721;
                                float _3727 = _3718 * _3718;
                                float _3731 = (fma(_2019, _3609.z, fma(_2018, _3609.y, _3609.x * _2017)) + _3609.w) / _3672;
                                float _3732 = (fma(_2019, _3625.z, fma(_2018, _3625.y, _3625.x * _2017)) + _3625.w) / _3672;
                                float _3736 = 1.0 - dot(vec2(_3731, _3732), vec2(_3731, _3732));
                                float _4893 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3738 = _3737 * (((isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0))) * _3714) / ((_3727 * 0.699999988079071044921875) + 1.0));
                                float _3750 = exp2(log2(1.0 / ((_3727 * 3.5) + 5.0)) * 0.25);
                                float _3751 = 1.0 - _959;
                                float _3758 = sqrt(1.0 - ((1.0 - (_3751 * _3751)) * (1.0 - (_3750 * _3750))));
                                float _3759 = _3758 * _3758;
                                float _3760 = _3759 * _3759;
                                float _3761 = _3707 - _3210;
                                float _3762 = _3708 - _3211;
                                float _3763 = _3709 - _3212;
                                float _3767 = inversesqrt(dot(vec3(_3761, _3762, _3763), vec3(_3761, _3762, _3763)));
                                float _3771 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3210, (-0.0) - _3211, (-0.0) - _3212));
                                float _4904 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3774 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3775 = dot(vec3(_762, _765, _768), vec3(_3767 * _3761, _3767 * _3762, _3767 * _3763));
                                float _4915 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3778 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3782 = ((_3778 * _3778) * (_3760 + (-1.0))) + 1.0;
                                float _3783 = _3720 * _3759;
                                float _3784 = _3783 * _3783;
                                float _3790 = ((1.0 - _3784) * dot(vec3(_762, _765, _768), vec3(_3707, _3708, _3709))) + _3784;
                                float _4926 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3792 = 1.0 - _3759;
                                float _3802 = (0.5 / (((_3791 * ((_3774 * _3792) + _3759)) + 9.9999999392252902907785028219223e-09) + (((_3791 * _3792) + _3759) * _3774))) * _3791;
                                float _4937 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3812 = (_3737 * _3714) * (((_3760 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3782 * _3782) * ((_3727 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3812 * _3594.z;
                                frontier_phi_80_pred_1 = _3812 * _3594.y;
                                frontier_phi_80_pred_2 = _3812 * _3594.x;
                                frontier_phi_80_pred_3 = _3738 * _3582.z;
                                frontier_phi_80_pred_4 = _3738 * _3582.y;
                                frontier_phi_80_pred_5 = _3738 * _3582.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3818 = frontier_phi_80_pred;
                            _3817 = frontier_phi_80_pred_1;
                            _3816 = frontier_phi_80_pred_2;
                            _3821 = frontier_phi_80_pred_3;
                            _3820 = frontier_phi_80_pred_4;
                            _3819 = frontier_phi_80_pred_5;
                            _3524 = _3819 + _3537;
                            _3525 = _3820 + _3538;
                            _3526 = _3821 + _3539;
                            _3521 = _3816 + _3534;
                            _3522 = _3817 + _3535;
                            _3523 = _3818 + _3536;
                            if (_3541 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3541;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3523;
                        frontier_phi_74_pred_1 = _3522;
                        frontier_phi_74_pred_2 = _3521;
                        frontier_phi_74_pred_3 = _3526;
                        frontier_phi_74_pred_4 = _3525;
                        frontier_phi_74_pred_5 = _3524;
                    }
                    _3189 = frontier_phi_74_pred;
                    _3187 = frontier_phi_74_pred_1;
                    _3185 = frontier_phi_74_pred_2;
                    _3195 = frontier_phi_74_pred_3;
                    _3193 = frontier_phi_74_pred_4;
                    _3191 = frontier_phi_74_pred_5;
                    uint _3330 = _3329 + 1u;
                    if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3323 = _3185;
                        _3324 = _3187;
                        _3325 = _3189;
                        _3326 = _3191;
                        _3327 = _3193;
                        _3328 = _3195;
                        _3329 = _3330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3193;
                frontier_phi_62_63_ladder_1 = _3191;
                frontier_phi_62_63_ladder_2 = _3189;
                frontier_phi_62_63_ladder_3 = _3195;
                frontier_phi_62_63_ladder_4 = _3187;
                frontier_phi_62_63_ladder_5 = _3185;
            }
            else
            {
                frontier_phi_62_63_ladder = _3071;
                frontier_phi_62_63_ladder_1 = _3069;
                frontier_phi_62_63_ladder_2 = _3067;
                frontier_phi_62_63_ladder_3 = _3073;
                frontier_phi_62_63_ladder_4 = _3065;
                frontier_phi_62_63_ladder_5 = _3063;
            }
            _3184 = frontier_phi_62_63_ladder_5;
            _3186 = frontier_phi_62_63_ladder_4;
            _3188 = frontier_phi_62_63_ladder_2;
            _3190 = frontier_phi_62_63_ladder_1;
            _3192 = frontier_phi_62_63_ladder;
            _3194 = frontier_phi_62_63_ladder_3;
        }
        float _3199 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
        _2970 = (_3199 * _3190) + _2483;
        _2972 = (_3199 * _3192) + _2485;
        _2974 = (_3199 * _3194) + _2487;
        _2976 = ((_3184 * _935) * _3199) + _2821;
        _2978 = ((_3186 * _936) * _3199) + _2823;
        _2980 = ((_3188 * _937) * _3199) + _2825;
    }
    else
    {
        _2970 = _2483;
        _2972 = _2485;
        _2974 = _2487;
        _2976 = _2821;
        _2978 = _2823;
        _2980 = _2825;
    }
    uint _2986 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _2992 = cbInstanceData._m0[_2986].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _635) + cbMatDynParam._m0[7u].x) + (((_676 - (_676 * _601)) + (cbMatDynParam._m0[11u].x * _707)) * cbMatDynParam._m0[9u].x));
    float _2993 = cbInstanceData._m0[_2986].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _635) + cbMatDynParam._m0[7u].y) + (((_678 - (_678 * _601)) + (cbMatDynParam._m0[11u].y * _707)) * cbMatDynParam._m0[9u].y));
    float _2994 = cbInstanceData._m0[_2986].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _635) + cbMatDynParam._m0[7u].z) + (((_680 - (_680 * _601)) + (cbMatDynParam._m0[11u].z * _707)) * cbMatDynParam._m0[9u].z));
    float _4953 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4964 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4975 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4986 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3012 = (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2970 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _949))) + ((_2976 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + _2992;
    float _3014 = (_2993 + ((_2978 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2972 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _949)));
    float _3016 = (_2994 + ((_2980 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2974 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _949)));
    float _3024 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) - _662) * _635) + _662));
    float _3029 = cbInstanceData._m0[_841 + 6u].w * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)));
    float _3034 = _739 / cbSceneParam._m0[86u].x;
    float _3035 = _740 / cbSceneParam._m0[86u].y;
    vec4 _3049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3051 = _3049.x;
    float _3052 = _3049.y;
    float _3053 = _3049.z;
    float _3054 = _3049.w;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _3088 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _3089 = _3088 / _733;
        float _3100 = _3089 * _291;
        float _3101 = _292 * _3089;
        float _3102 = (-0.0) - _3101;
        float _3103 = _3089 * _293;
        float _3105 = (cbSceneParam._m0[77u].w * _3102) / _3088;
        float _3106 = _3105 + cbSceneParam._m0[79u].w;
        float _3107 = cbSceneParam._m0[79u].w - _3101;
        float _3113 = sqrt(((_3100 * _3100) + (_3101 * _3101)) + (_3103 * _3103));
        float _3116 = (1.0 - (cbSceneParam._m0[77u].w / _3088)) * _3113;
        float _3121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3285;
        if (abs((_3102 - _3105) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3285 = ((((_3106 > 0.0) ? exp2(_3121 * _3106) : (2.0 - exp2(_3123 * _3106))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3116;
        }
        else
        {
            float _3245 = 1.0 / cbSceneParam._m0[80u].x;
            float _3246 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : max(_3106, _3107));
            float _3247 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : min(_3106, _3107));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            _3285 = ((abs(_3113 / _3102) * cbSceneParam._m0[80u].y) * ((((_3256 - _3257) * 2.0) - ((exp2(_3121 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0)))) - exp2(_3121 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))))) * _3245)) - ((exp2(_3123 * _3256) - exp2(_3123 * _3257)) * _3245))) + (_3116 * cbSceneParam._m0[80u].z);
        }
        vec4 _3287 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3034, _3035, 1.0), 0.0);
        float _3296 = exp2((_3285 * (-1.44269502162933349609375)) * (1.0 - _3287.w));
        float _3297 = log2(_3296);
        float _3313 = log2(_3054);
        _3125 = (exp2(_3313 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].x)) * _3287.x) / cbSceneParam._m0[78u].x)) + _3051;
        _3127 = (exp2(_3313 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].y)) * _3287.y) / cbSceneParam._m0[78u].y)) + _3052;
        _3129 = (exp2(_3313 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3297 * cbSceneParam._m0[78u].z)) * _3287.z) / cbSceneParam._m0[78u].z)) + _3053;
        _3131 = _3296 * _3054;
    }
    else
    {
        _3125 = _3051;
        _3127 = _3052;
        _3129 = _3053;
        _3131 = _3054;
    }
    float _3143 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3144 = _3143 == 3.0;
    float _3145 = log2(_3131);
    float _3149 = exp2(_3145 * cbSceneParam._m0[78u].x);
    float _3150 = exp2(_3145 * cbSceneParam._m0[78u].y);
    float _3151 = exp2(_3145 * cbSceneParam._m0[78u].z);
    float _3152 = _3149 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)));
    float _3153 = _3150 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)));
    float _3154 = _3151 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0)));
    float _3163 = (_3143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3163 * (_3144 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3125)));
    SV_Target.y = _3163 * (_3144 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.z = _3163 * (_3144 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.w = _3029;
    SV_Target_1.x = ((_3024 * _2992) * _3149) * _3163;
    SV_Target_1.y = ((_3024 * _2993) * _3150) * _3163;
    SV_Target_1.z = ((_3024 * _2994) * _3151) * _3163;
    SV_Target_1.w = _3029;
}


