#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1237;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _302.z;
    float _313 = exp2(log2(_307 * 22.0) * 260.0);
    float _314 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _315 = isnan(1.0) ? _314 : (isnan(_314) ? 1.0 : min(_314, 1.0));
    vec4 _329 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _339 = cbMtdParam._m0[10u].x * _329.x;
    float _340 = cbMtdParam._m0[10u].y * _329.y;
    float _341 = cbMtdParam._m0[10u].z * _329.z;
    vec4 _353 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _375 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _397 = (((((_353.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _375.x) - _339) * _315) + _339;
    float _398 = (((((_353.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _375.y) - _340) * _315) + _340;
    float _399 = (((((_353.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _375.z) - _341) * _315) + _341;
    float _400 = _375.w * _353.w;
    float _427 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _315) + cbMtdParam._m0[15u].y;
    vec4 _439 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _448 = cbMtdParam._m0[13u].y + _439.z;
    vec4 _460 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _472 = ((((_307 * 2.0) * (cbMtdParam._m0[13u].x + _460.z)) - _448) * _315) + _448;
    float _476 = (_302.x * 2.0) + (-1.0);
    float _478 = (_302.y * 2.0) + (-1.0);
    float _479 = dot(vec2(_476, _478), vec2(_476, _478));
    float _3894 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _497 = ((((((_460.x - _441) * _315) + _441) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _476;
    float _498 = ((((((_460.y - _442) * _315) + _442) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _478;
    float _501 = fma(_484, _230, fma(_498, _222 * TANGENT.x, (_208 * _200) * _497));
    float _504 = fma(_484, _231, fma(_498, _222 * TANGENT.y, (_208 * _201) * _497));
    float _507 = fma(_484, _232, fma(_498, _222 * TANGENT.z, (_208 * _202) * _497));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3905 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _515 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _516 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _517 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _518 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _519 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _520 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _528 = cbMatDynParam._m0[9u].x * _517;
    float _529 = cbMatDynParam._m0[9u].y * _518;
    float _530 = cbMatDynParam._m0[9u].z * _519;
    float _538 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _539 = _538 * _287;
    float _540 = _538 * _288;
    float _541 = _538 * _289;
    float _542 = dot(vec3(_512, _513, _514), vec3(_539, _540, _541));
    float _548 = abs(exp2(log2(_542) * cbMatDynParam._m0[12u].x));
    float _549 = isnan(0.100000001490116119384765625) ? _548 : (isnan(_548) ? 0.100000001490116119384765625 : max(_548, 0.100000001490116119384765625));
    float _555 = ((isnan(0.699999988079071044921875) ? _549 : (isnan(_549) ? 0.699999988079071044921875 : min(_549, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _578 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3981 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3992 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _586 = dot(vec3(_512, _513, _514), vec3(0.0, -1.0, 0.0));
    float _4003 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _596 = (_589 * _517) * cbMatDynParam._m0[11u].x;
    float _598 = (_589 * _518) * cbMatDynParam._m0[11u].y;
    float _600 = (_589 * _519) * cbMatDynParam._m0[11u].z;
    float _607 = dot(vec3(_539, _540, _541), vec3(_512, _513, _514));
    float _610 = _607 * 2.0;
    float _620 = dot(vec3((-0.0) - (_539 - (_610 * _512)), (-0.0) - (_540 - (_610 * _513)), (-0.0) - (_541 - (_610 * _514))), vec3(0.0, -1.0, 0.0));
    float _4014 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _627 = exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 4.0);
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _662 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _664 = _662.w;
    float _682 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _685 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _688 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    vec4 _690 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _692 = _690.x;
    float _704 = (((_690.y - _516) + (_690.w * _516)) * cbMtdParam._m0[3u].x) + _516;
    vec4 _705 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _721 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_692 * _692)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _705.z;
    float _729 = (((cbMatDynParam._m0[15u].x - _520) * cbMatDynParam._m0[15u].w) * _721) + _520;
    float _737 = ((_721 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _704)) + _704;
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _762 = _761 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * _528) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * _529) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * _530) * cbInstanceData._m0[_763].z;
    float _4025 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _775 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _780 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = (((_780.x - _729) + (_780.w * _729)) * cbMtdParam._m0[3u].x) + _729;
    float _804 = (cbMtdParam._m0[3u].x * (((_772 * _664) - _772) + _775.x)) + _772;
    float _805 = (cbMtdParam._m0[3u].x * (((_773 * _664) - _773) + _775.y)) + _773;
    float _806 = (cbMtdParam._m0[3u].x * (((_774 * _664) - _774) + _775.z)) + _774;
    vec4 _807 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _820 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_729 * (_528 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_529 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_729 * (_530 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _807.z;
    float _824 = _820 * cbMatDynParam._m0[13u].w;
    float _834 = (_824 * (cbMatDynParam._m0[13u].x - _804)) + _804;
    float _835 = (_824 * (cbMatDynParam._m0[13u].y - _805)) + _805;
    float _836 = (_824 * (cbMatDynParam._m0[13u].z - _806)) + _806;
    float _844 = ((_820 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _791)) + _791;
    float _845 = 1.0 - _844;
    float _846 = _845 * _834;
    float _847 = _845 * _835;
    float _848 = _845 * _836;
    float _852 = (_834 + (-0.039999999105930328369140625)) * _844;
    float _853 = (_835 + (-0.039999999105930328369140625)) * _844;
    float _854 = (_836 + (-0.039999999105930328369140625)) * _844;
    float _855 = _852 + 0.039999999105930328369140625;
    float _856 = _853 + 0.039999999105930328369140625;
    float _857 = _854 + 0.039999999105930328369140625;
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _869 = _866.x * TEXCOORD_4;
    float _870 = _542 * 2.0;
    float _874 = (_870 * _512) - _539;
    float _875 = (_870 * _513) - _540;
    float _876 = (_870 * _514) - _541;
    float _877 = abs(_607);
    float _4058 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_737);
    float _891 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _897 = (1.0 - _891) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _879;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _965 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _969 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _994 = _926 + _512;
        float _995 = _930 + _513;
        float _996 = _934 + _514;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_512, _513, _514), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4106 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_512, _513, _514), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _4139 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_512, _513, _514), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _4172 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1281 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1285 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1308 = _926 + _512;
        float _1309 = _930 + _513;
        float _1310 = _934 + _514;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_512, _513, _514), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4235 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_512, _513, _514), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4268 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_512, _513, _514), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4301 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1237;
        _1547 = _1237;
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = _1237;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1249)) + _1249;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1250)) + _1250;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1251)) + _1251;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _874 * 0.5;
    float _1615 = _875 * 0.5;
    float _1616 = _876 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1727 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1731 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1735 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1738 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1741 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1744 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1772;
        if (_1738 > 0.0)
        {
            _1772 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1772 = frontier_phi_16_14_ladder;
        }
        float _1947;
        if (_1741 > 0.0)
        {
            _1947 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1947 = frontier_phi_25_21_ladder;
        }
        float _2243;
        if (_1744 > 0.0)
        {
            _2243 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2243 = frontier_phi_37_32_ladder;
        }
        float _2245 = isnan(_1947) ? _1772 : (isnan(_1772) ? _1947 : min(_1772, _1947));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1738) + _1727;
        float _2251 = (_2246 * _1741) + _1731;
        float _2252 = (_2246 * _1744) + _1735;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_15_37_ladder = _2397.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2397.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2397.z * cbModelParam._m0[1u].y;
        }
        _1760 = frontier_phi_15_37_ladder_1;
        _1762 = frontier_phi_15_37_ladder;
        _1764 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1680);
        _1760 = _1748.x * cbModelParam._m0[1u].y;
        _1762 = _1748.y * cbModelParam._m0[1u].y;
        _1764 = _1748.z * cbModelParam._m0[1u].y;
    }
    float _1768 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1768 : min(cbModelParam._m0[25u].w, _1768));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1840 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1843 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _1952;
        if (_1837 > 0.0)
        {
            _1952 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1952 = frontier_phi_27_23_ladder;
        }
        float _2270;
        if (_1840 > 0.0)
        {
            _2270 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2270 = frontier_phi_39_34_ladder;
        }
        float _2608;
        if (_1843 > 0.0)
        {
            _2608 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2608 = frontier_phi_49_46_ladder;
        }
        float _2610 = isnan(_2270) ? _1952 : (isnan(_1952) ? _2270 : min(_1952, _2270));
        float _2611 = isnan(_2608) ? _2610 : (isnan(_2610) ? _2608 : min(_2610, _2608));
        float _2615 = (_2611 * _1837) + _1826;
        float _2616 = (_2611 * _1840) + _1830;
        float _2617 = (_2611 * _1843) + _1834;
        float _2618 = _2611 * 9.9999997473787516355514526367188e-05;
        float _2619 = (-1.0) - _2618;
        float _2621 = _2618 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2617 > _2621) || ((_2617 < _2619) || ((_2616 > _2621) || ((_2616 < _2619) || ((_2615 < _2619) || (_2615 > _2621))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2617, cbModelParam._m0[17u].z, fma(_2616, cbModelParam._m0[17u].y, _2615 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2617, cbModelParam._m0[18u].z, fma(_2616, cbModelParam._m0[18u].y, _2615 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2617, cbModelParam._m0[19u].z, fma(_2616, cbModelParam._m0[19u].y, _2615 * cbModelParam._m0[19u].x))), _1769);
            frontier_phi_24_49_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_24_49_ladder_2;
        _1864 = frontier_phi_24_49_ladder_1;
        _1866 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1769);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1879 = (((_897 * _855) + _898) * _869) * ((cbModelParam._m0[1u].w * (_1862 - _1760)) + _1760);
    float _1881 = (((_897 * _856) + _898) * _869) * ((cbModelParam._m0[1u].w * (_1864 - _1762)) + _1762);
    float _1883 = (((_897 * _857) + _898) * _869) * ((cbModelParam._m0[1u].w * (_1866 - _1764)) + _1764);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    float _1926 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1939 = _1926 / _1938;
    float _1940 = _1930 / _1938;
    float _1941 = _1934 / _1938;
    float _2088;
    float _2089;
    float _2090;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1968 = ((uint(_1941 > cbSceneParam._m0[59u].y) + uint(_1941 > cbSceneParam._m0[59u].x)) + uint(_1941 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1969 = _1968 + 43u;
        uint _1977 = _1968 + 44u;
        uint _1985 = _1968 + 45u;
        uint _1993 = _1968 + 46u;
        float _2004 = fma(_1938, cbSceneParam._m0[_1969].w, fma(_1934, cbSceneParam._m0[_1969].z, fma(_1930, cbSceneParam._m0[_1969].y, _1926 * cbSceneParam._m0[_1969].x)));
        float _2008 = fma(_1938, cbSceneParam._m0[_1977].w, fma(_1934, cbSceneParam._m0[_1977].z, fma(_1930, cbSceneParam._m0[_1977].y, _1926 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1938, cbSceneParam._m0[_1993].w, fma(_1934, cbSceneParam._m0[_1993].z, fma(_1930, cbSceneParam._m0[_1993].y, _1926 * cbSceneParam._m0[_1993].x)));
        float _2021 = cbSceneParam._m0[33u].z * _2016;
        float _2023 = cbSceneParam._m0[33u].w * _2016;
        float _2026 = fma(_1938, cbSceneParam._m0[_1985].w, fma(_1934, cbSceneParam._m0[_1985].z, fma(_1930, cbSceneParam._m0[_1985].y, _1926 * cbSceneParam._m0[_1985].x))) / _2016;
        float _2074 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
        float _4427 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2081 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2021 + _2004) / _2016, (_2023 + _2008) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2004) / _2016, (_2008 - _2021) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2021) / _2016, (_2008 - _2023) / _2016), _2026), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 - _2023) / _2016, (_2021 + _2008) / _2016), _2026), 0.0)).x), vec4(0.25)));
        _2088 = 1.0 - (_2081 * cbSceneParam._m0[34u].x);
        _2089 = 1.0 - (_2081 * cbSceneParam._m0[34u].y);
        _2090 = 1.0 - (_2081 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2088 = 1.0;
        _2089 = 1.0;
        _2090 = 1.0;
    }
    float _2154;
    float _2156;
    float _2158;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2142 = fma(_1938, cbSceneParam._m0[63u].w, fma(_1934, cbSceneParam._m0[63u].z, fma(_1930, cbSceneParam._m0[63u].y, _1926 * cbSceneParam._m0[63u].x)));
        float _2143 = fma(_1938, cbSceneParam._m0[60u].w, fma(_1934, cbSceneParam._m0[60u].z, fma(_1930, cbSceneParam._m0[60u].y, _1926 * cbSceneParam._m0[60u].x))) / _2142;
        float _2144 = fma(_1938, cbSceneParam._m0[61u].w, fma(_1934, cbSceneParam._m0[61u].z, fma(_1930, cbSceneParam._m0[61u].y, _1926 * cbSceneParam._m0[61u].x))) / _2142;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2143 >= cbSceneParam._m0[64u].x) && (_2144 >= cbSceneParam._m0[64u].y)) && (_2143 <= cbSceneParam._m0[64u].z)) && (_2144 <= cbSceneParam._m0[64u].w))
        {
            float _2283 = fma(_1938, cbSceneParam._m0[62u].w, fma(_1934, cbSceneParam._m0[62u].z, fma(_1930, cbSceneParam._m0[62u].y, _1926 * cbSceneParam._m0[62u].x))) / _2142;
            float _2287 = isnan(cbSceneParam._m0[41u].w) ? _2283 : (isnan(_2283) ? cbSceneParam._m0[41u].w : max(_2283, cbSceneParam._m0[41u].w));
            float _2330 = (cbSceneParam._m0[33u].x - sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941))) * cbSceneParam._m0[33u].y;
            float _4443 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
            float _2337 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2143, cbSceneParam._m0[33u].w + _2144), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2143, _2144 - cbSceneParam._m0[33u].z), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].z, _2144 - cbSceneParam._m0[33u].w), _2287), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2143 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2144), _2287), 0.0)).x), vec4(0.25)));
            float _2341 = 1.0 - (_2337 * cbSceneParam._m0[34u].x);
            float _2342 = 1.0 - (_2337 * cbSceneParam._m0[34u].y);
            float _2343 = 1.0 - (_2337 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2342) ? _2089 : (isnan(_2089) ? _2342 : min(_2089, _2342));
            frontier_phi_36_35_ladder_1 = isnan(_2343) ? _2090 : (isnan(_2090) ? _2343 : min(_2090, _2343));
            frontier_phi_36_35_ladder_2 = isnan(_2341) ? _2088 : (isnan(_2088) ? _2341 : min(_2088, _2341));
        }
        else
        {
            frontier_phi_36_35_ladder = _2089;
            frontier_phi_36_35_ladder_1 = _2090;
            frontier_phi_36_35_ladder_2 = _2088;
        }
        _2154 = frontier_phi_36_35_ladder_2;
        _2156 = frontier_phi_36_35_ladder;
        _2158 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2154 = _2088;
        _2156 = _2089;
        _2158 = _2090;
    }
    uvec4 _2163 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _2165 = _2163.x * 14u;
    uint _2166 = _2165 + 13u;
    float _2173 = _869 + (-1.0);
    float _2178 = (cbLight._m0[_2166].x * _2173) + 1.0;
    float _2179 = (cbLight._m0[_2166].y * _2173) + 1.0;
    float _2180 = (cbLight._m0[_2166].z * _2173) + 1.0;
    float _2181 = (cbLight._m0[_2166].w * _2173) + 1.0;
    uint _2182 = _2165 + 5u;
    float _2188 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2192 = _2165 + 4u;
    float _2202 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2206 = _2165 | 1u;
    float _2217 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_512, _513, _514));
    float _2220 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_512, _513, _514));
    float _4479 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _4490 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2225 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2227 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2234 = ((cbLight._m0[_2182].x * _2188) * _2227) + (((cbLight._m0[_2192].x * _2154) * _2202) * _2225);
    float _2235 = ((_2188 * cbLight._m0[_2182].y) * _2227) + (((cbLight._m0[_2192].y * _2156) * _2202) * _2225);
    float _2236 = ((_2188 * cbLight._m0[_2182].z) * _2227) + (((cbLight._m0[_2192].z * _2158) * _2202) * _2225);
    uvec4 _2240 = floatBitsToUint(cbLight._m0[_2165 + 12u]);
    bool _2242 = _2240.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2242)
    {
        _2344 = _2234;
        _2346 = _2235;
        _2348 = _2236;
    }
    else
    {
        uint _2352 = _2165 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2165 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4501 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2371 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2234;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2235;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2236;
    }
    bool _2351 = _2240.y == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2351)
    {
        _2406 = _2344;
        _2408 = _2346;
        _2410 = _2348;
    }
    else
    {
        uint _2579 = _2165 + 7u;
        float _2595 = (dot(vec3(cbLight._m0[_2165 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2596 = _2595 * _2595;
        float _4517 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2597 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2598 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2406 = (((cbLight._m0[_2579].x * 0.3183098733425140380859375) * _2597) * _2598) + _2344;
        _2408 = (((cbLight._m0[_2579].y * 0.3183098733425140380859375) * _2597) * _2598) + _2346;
        _2410 = (((cbLight._m0[_2579].z * 0.3183098733425140380859375) * _2597) * _2598) + _2348;
    }
    uint _2413 = _2165 + 8u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _737) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2165].x + _539;
    float _2429 = cbLight._m0[_2165].y + _540;
    float _2430 = cbLight._m0[_2165].z + _541;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2165].xyz));
    float _4533 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2442 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2443 = dot(vec3(_512, _513, _514), vec3(_2435, _2436, _2437));
    float _4555 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2435, _2436, _2437));
    float _4566 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2427 * _2427;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0);
    float _2464 = 0.959999978542327880859375 - _852;
    float _2466 = 0.959999978542327880859375 - _853;
    float _2467 = 0.959999978542327880859375 - _854;
    float _2474 = 1.0 - _2427;
    float _2485 = (0.5 / (((_2442 * ((_2441 * _2474) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2474) + _2427) * _2441))) * _2441;
    float _4577 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    uint _2501 = _2165 + 9u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _737) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2206].x + _539;
    float _2515 = cbLight._m0[_2206].y + _540;
    float _2516 = cbLight._m0[_2206].z + _541;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2206].xyz));
    float _4588 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2528 = dot(vec3(_512, _513, _514), vec3(_2521, _2522, _2523));
    float _4599 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2521, _2522, _2523));
    float _4610 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2513 * _2513;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2554 = 1.0 - _2513;
    float _2564 = (0.5 / (((_2442 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2554) + _2513) * _2527))) * _2527;
    float _4621 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2566 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    float _2576 = (((((_2547 * _2464) + _855) * cbLight._m0[_2501].x) * _2566) * _2188) + ((((cbLight._m0[_2413].x * _2154) * ((_2463 * _2464) + _855)) * _2487) * _2202);
    float _2577 = (((((_2547 * _2466) + _856) * cbLight._m0[_2501].y) * _2566) * _2188) + ((((cbLight._m0[_2413].y * _2156) * ((_2463 * _2466) + _856)) * _2487) * _2202);
    float _2578 = (((((_2547 * _2467) + _857) * cbLight._m0[_2501].z) * _2566) * _2188) + ((((cbLight._m0[_2413].z * _2158) * ((_2463 * _2467) + _857)) * _2487) * _2202);
    float _2634;
    float _2636;
    float _2638;
    if (_2242)
    {
        _2634 = _2576;
        _2636 = _2577;
        _2638 = _2578;
    }
    else
    {
        uint _2640 = _2165 + 2u;
        uint _2644 = _2165 + 10u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _737) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _539;
        float _2661 = cbLight._m0[_2640].y + _540;
        float _2662 = cbLight._m0[_2640].z + _541;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2640].xyz));
        float _4632 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2674 = dot(vec3(_512, _513, _514), vec3(_2667, _2668, _2669));
        float _4643 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4654 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2700 = 1.0 - _2659;
        float _2710 = (0.5 / (((_2442 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2700) + _2659) * _2673))) * _2673;
        float _4665 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2634 = (((((_2693 * _2464) + _855) * cbLight._m0[_2644].x) * _2712) * _2713) + _2576;
        _2636 = (((((_2693 * _2466) + _856) * cbLight._m0[_2644].y) * _2712) * _2713) + _2577;
        _2638 = (((((_2693 * _2467) + _857) * cbLight._m0[_2644].z) * _2712) * _2713) + _2578;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2351)
    {
        _2744 = _2634;
        _2746 = _2636;
        _2748 = _2638;
    }
    else
    {
        uint _2755 = _2165 + 3u;
        uint _2759 = _2165 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _737) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _539;
        float _2776 = cbLight._m0[_2755].y + _540;
        float _2777 = cbLight._m0[_2755].z + _541;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2755].xyz));
        float _4681 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2789 = dot(vec3(_512, _513, _514), vec3(_2782, _2783, _2784));
        float _4692 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4703 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2442 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2815) + _2774) * _2788))) * _2788;
        float _4714 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2744 = (((((_2808 * _2464) + _855) * cbLight._m0[_2759].x) * _2827) * _2828) + _2634;
        _2746 = (((((_2808 * _2466) + _856) * cbLight._m0[_2759].y) * _2827) * _2828) + _2636;
        _2748 = (((((_2808 * _2467) + _857) * cbLight._m0[_2759].z) * _2827) * _2828) + _2638;
    }
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_2163.y == 0u)
    {
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.x;
        uint _2861 = uint((float(_2849.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2850))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2850)));
        float _2871 = (log2(_1941 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        uint _2875 = uint(isnan(14.0) ? _2872 : (isnan(_2872) ? 14.0 : min(_2872, 14.0)));
        uvec4 _2880 = texelFetch(g_lightClusterGridBuffer, int(((_2875 << 2u) + (_2861 << 6u)) >> 2u));
        uint _2881 = _2880.x;
        uint _2882 = _2849.z;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((((1u << ((_2882 >> 4u) & 15u)) + 4294967295u) & _2881) == 0u) || ((_2882 & 240u) == 0u))
        {
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
        }
        else
        {
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3155)
                {
                    frontier_phi_68_pred = _3144;
                    frontier_phi_68_pred_1 = _3143;
                    frontier_phi_68_pred_2 = _3142;
                    frontier_phi_68_pred_3 = _3140;
                    frontier_phi_68_pred_4 = _3139;
                    frontier_phi_68_pred_5 = _3141;
                }
                else
                {
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    uint _3269;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3154;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    for (;;)
                    {
                        uint _3273 = uint(findLSB(_3269)) + (_3145 << 5u);
                        uint _3270 = (_3269 + 4294967295u) & _3269;
                        uint _3275 = _3273 * 48u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3295 = (_3273 * 48u) + 4u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3314 = (_3273 * 48u) + 8u;
                        vec3 _3325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x));
                        float _3329 = _3289.x - _1939;
                        float _3330 = _3289.y - _1940;
                        float _3331 = _3289.z - _1941;
                        float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                        float _3335 = inversesqrt(_3332);
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3339 = dot(vec3(_682, _685, _688), vec3(_3336, _3337, _3338));
                        float _3344 = 1.0 - (_3332 * _3289.w);
                        float _4740 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3346 = sqrt(_3332) * _3308.w;
                        float _3349 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3339) + _3350;
                        float _3356 = _3346 * _3346;
                        float _3359 = ((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3345) / ((_3356 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _1939;
                        float _3364 = (-0.0) - _1940;
                        float _3365 = (-0.0) - _1941;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3379 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                        float _3380 = 1.0 - _879;
                        float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                        float _3388 = _3387 * _3387;
                        float _3389 = _3388 * _3388;
                        float _3390 = _3370 + _3336;
                        float _3391 = _3371 + _3337;
                        float _3392 = _3372 + _3338;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3400 = dot(vec3(_682, _685, _688), vec3(_3370, _3371, _3372));
                        float _4756 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3404 = dot(vec3(_682, _685, _688), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                        float _4767 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                        float _3412 = _3349 * _3388;
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3339) + _3413;
                        float _4778 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3418 = 1.0 - _3388;
                        float _3428 = (0.5 / (((_3417 * ((_3403 * _3418) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3388) * _3403))) * _3417;
                        float _4789 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3439 = (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3411 * _3411) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125))) * _3345;
                        _3198 = (_3359 * _3308.x) + _3266;
                        _3199 = (_3359 * _3308.y) + _3267;
                        _3200 = (_3359 * _3308.z) + _3268;
                        _3195 = (_3439 * _3325.x) + _3263;
                        _3196 = (_3439 * _3325.y) + _3264;
                        _3197 = (_3439 * _3325.z) + _3265;
                        if (_3270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3270;
                        }
                    }
                    frontier_phi_68_pred = _3200;
                    frontier_phi_68_pred_1 = _3199;
                    frontier_phi_68_pred_2 = _3198;
                    frontier_phi_68_pred_3 = _3196;
                    frontier_phi_68_pred_4 = _3195;
                    frontier_phi_68_pred_5 = _3197;
                }
                _2997 = frontier_phi_68_pred;
                _2995 = frontier_phi_68_pred_1;
                _2993 = frontier_phi_68_pred_2;
                _2989 = frontier_phi_68_pred_3;
                _2987 = frontier_phi_68_pred_4;
                _2991 = frontier_phi_68_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2987;
                    _3140 = _2989;
                    _3141 = _2991;
                    _3142 = _2993;
                    _3143 = _2995;
                    _3144 = _2997;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
        }
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.z;
        uint _3003 = (_3001 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _3003) & _2881) == 0u)
        {
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
            float _3133 = _3132 * _1939;
            float _3134 = _3132 * _1940;
            float _3135 = _3132 * _1941;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3003 < ((_3001 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3246 = _2986;
                float _3247 = _2988;
                float _3248 = _2990;
                float _3249 = _2992;
                float _3250 = _2994;
                float _3251 = _2996;
                uint _3252 = _3003;
                uint _3261;
                bool _3262;
                for (;;)
                {
                    _3261 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                    _3262 = _3261 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3262)
                    {
                        frontier_phi_74_pred = _3248;
                        frontier_phi_74_pred_1 = _3247;
                        frontier_phi_74_pred_2 = _3246;
                        frontier_phi_74_pred_3 = _3251;
                        frontier_phi_74_pred_4 = _3250;
                        frontier_phi_74_pred_5 = _3249;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3457 = _3246;
                        float _3458 = _3247;
                        float _3459 = _3248;
                        float _3460 = _3249;
                        float _3461 = _3250;
                        float _3462 = _3251;
                        uint _3463 = _3261;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3548;
                        float _3595;
                        bool _3596;
                        for (;;)
                        {
                            uint _3474 = ((_3252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3535 = (_3474 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3551 = (_3474 * 40u) + 24u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3570 = (_3474 * 40u) + 28u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3595 = fma(_1941, _3583.z, fma(_1940, _3583.y, _3583.x * _1939)) + _3583.w;
                            _3596 = !((fma(_1941, _3564.z, fma(_1940, _3564.y, _3564.x * _1939)) + _3564.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3596)
                            {
                                float _3623 = _3489.x - _1939;
                                float _3624 = _3489.y - _1940;
                                float _3625 = _3489.z - _1941;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3490 * _3490));
                                float _4800 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3641 = sqrt(_3626) * _3505.w;
                                float _3643 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                                float _3644 = _3643 * _3643;
                                float _3647 = ((1.0 - _3644) * dot(vec3(_3630, _3631, _3632), vec3(_682, _685, _688))) + _3644;
                                float _3650 = _3641 * _3641;
                                float _3654 = (fma(_1941, _3532.z, fma(_1940, _3532.y, _3532.x * _1939)) + _3532.w) / _3595;
                                float _3655 = (fma(_1941, _3548.z, fma(_1940, _3548.y, _3548.x * _1939)) + _3548.w) / _3595;
                                float _3659 = 1.0 - dot(vec2(_3654, _3655), vec2(_3654, _3655));
                                float _4816 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3661 = _3660 * (((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3637) / ((_3650 * 0.699999988079071044921875) + 1.0));
                                float _3673 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                                float _3674 = 1.0 - _879;
                                float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                                float _3682 = _3681 * _3681;
                                float _3683 = _3682 * _3682;
                                float _3684 = _3630 - _3133;
                                float _3685 = _3631 - _3134;
                                float _3686 = _3632 - _3135;
                                float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                                float _3694 = dot(vec3(_682, _685, _688), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _4827 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3698 = dot(vec3(_682, _685, _688), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                                float _4838 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                                float _3706 = _3643 * _3682;
                                float _3707 = _3706 * _3706;
                                float _3713 = ((1.0 - _3707) * dot(vec3(_682, _685, _688), vec3(_3630, _3631, _3632))) + _3707;
                                float _4849 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3715 = 1.0 - _3682;
                                float _3725 = (0.5 / (((_3714 * ((_3697 * _3715) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3682) * _3697))) * _3714;
                                float _4860 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3735 = (_3660 * _3637) * (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3705 * _3705) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3735 * _3517.z;
                                frontier_phi_80_pred_1 = _3735 * _3517.y;
                                frontier_phi_80_pred_2 = _3735 * _3517.x;
                                frontier_phi_80_pred_3 = _3661 * _3505.z;
                                frontier_phi_80_pred_4 = _3661 * _3505.y;
                                frontier_phi_80_pred_5 = _3661 * _3505.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_80_pred;
                            _3740 = frontier_phi_80_pred_1;
                            _3739 = frontier_phi_80_pred_2;
                            _3744 = frontier_phi_80_pred_3;
                            _3743 = frontier_phi_80_pred_4;
                            _3742 = frontier_phi_80_pred_5;
                            _3447 = _3742 + _3460;
                            _3448 = _3743 + _3461;
                            _3449 = _3744 + _3462;
                            _3444 = _3739 + _3457;
                            _3445 = _3740 + _3458;
                            _3446 = _3741 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3446;
                        frontier_phi_74_pred_1 = _3445;
                        frontier_phi_74_pred_2 = _3444;
                        frontier_phi_74_pred_3 = _3449;
                        frontier_phi_74_pred_4 = _3448;
                        frontier_phi_74_pred_5 = _3447;
                    }
                    _3112 = frontier_phi_74_pred;
                    _3110 = frontier_phi_74_pred_1;
                    _3108 = frontier_phi_74_pred_2;
                    _3118 = frontier_phi_74_pred_3;
                    _3116 = frontier_phi_74_pred_4;
                    _3114 = frontier_phi_74_pred_5;
                    uint _3253 = _3252 + 1u;
                    if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3246 = _3108;
                        _3247 = _3110;
                        _3248 = _3112;
                        _3249 = _3114;
                        _3250 = _3116;
                        _3251 = _3118;
                        _3252 = _3253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3116;
                frontier_phi_62_63_ladder_1 = _3114;
                frontier_phi_62_63_ladder_2 = _3112;
                frontier_phi_62_63_ladder_3 = _3118;
                frontier_phi_62_63_ladder_4 = _3110;
                frontier_phi_62_63_ladder_5 = _3108;
            }
            else
            {
                frontier_phi_62_63_ladder = _2994;
                frontier_phi_62_63_ladder_1 = _2992;
                frontier_phi_62_63_ladder_2 = _2990;
                frontier_phi_62_63_ladder_3 = _2996;
                frontier_phi_62_63_ladder_4 = _2988;
                frontier_phi_62_63_ladder_5 = _2986;
            }
            _3107 = frontier_phi_62_63_ladder_5;
            _3109 = frontier_phi_62_63_ladder_4;
            _3111 = frontier_phi_62_63_ladder_2;
            _3113 = frontier_phi_62_63_ladder_1;
            _3115 = frontier_phi_62_63_ladder;
            _3117 = frontier_phi_62_63_ladder_3;
        }
        float _3122 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2893 = (_3122 * _3113) + _2406;
        _2895 = (_3122 * _3115) + _2408;
        _2897 = (_3122 * _3117) + _2410;
        _2899 = ((_3107 * _855) * _3122) + _2744;
        _2901 = ((_3109 * _856) * _3122) + _2746;
        _2903 = ((_3111 * _857) * _3122) + _2748;
    }
    else
    {
        _2893 = _2406;
        _2895 = _2408;
        _2897 = _2410;
        _2899 = _2744;
        _2901 = _2746;
        _2903 = _2748;
    }
    uint _2909 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _2915 = cbInstanceData._m0[_2909].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _555) + cbMatDynParam._m0[7u].x) + (((_596 - (_596 * _520)) + (cbMatDynParam._m0[11u].x * _627)) * cbMatDynParam._m0[9u].x));
    float _2916 = cbInstanceData._m0[_2909].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _555) + cbMatDynParam._m0[7u].y) + (((_598 - (_598 * _520)) + (cbMatDynParam._m0[11u].y * _627)) * cbMatDynParam._m0[9u].y));
    float _2917 = cbInstanceData._m0[_2909].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _555) + cbMatDynParam._m0[7u].z) + (((_600 - (_600 * _520)) + (cbMatDynParam._m0[11u].z * _627)) * cbMatDynParam._m0[9u].z));
    float _4876 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4887 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4898 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4909 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2935 = (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2893 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _869))) + ((_2899 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1669)) * cbPerFrame._m0[3u].x)) + _2915;
    float _2937 = (_2916 + ((_2901 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1669)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2895 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _869)));
    float _2939 = (_2917 + ((_2903 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1669)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2897 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _869)));
    float _2947 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) - _582) * _555) + _582));
    float _2952 = cbInstanceData._m0[_761 + 6u].w * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)));
    float _2957 = _659 / cbSceneParam._m0[86u].x;
    float _2958 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2972 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2974 = _2972.x;
    float _2975 = _2972.y;
    float _2976 = _2972.z;
    float _2977 = _2972.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _3011 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _3012 = _3011 / _653;
        float _3023 = _3012 * _287;
        float _3024 = _288 * _3012;
        float _3025 = (-0.0) - _3024;
        float _3026 = _3012 * _289;
        float _3028 = (cbSceneParam._m0[77u].w * _3025) / _3011;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3024;
        float _3036 = sqrt(((_3023 * _3023) + (_3024 * _3024)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3011)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3208;
        if (abs((_3025 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3208 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3168 = 1.0 / cbSceneParam._m0[80u].x;
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3170 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            _3208 = ((abs(_3036 / _3025) * cbSceneParam._m0[80u].y) * ((((_3179 - _3180) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))))) * _3168)) - ((exp2(_3046 * _3179) - exp2(_3046 * _3180)) * _3168))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, 1.0), 0.0);
        float _3219 = exp2((_3208 * (-1.44269502162933349609375)) * (1.0 - _3210.w));
        float _3220 = log2(_3219);
        float _3236 = log2(_2977);
        _3048 = (exp2(_3236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].x)) * _3210.x) / cbSceneParam._m0[78u].x)) + _2974;
        _3050 = (exp2(_3236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].y)) * _3210.y) / cbSceneParam._m0[78u].y)) + _2975;
        _3052 = (exp2(_3236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].z)) * _3210.z) / cbSceneParam._m0[78u].z)) + _2976;
        _3054 = _3219 * _2977;
    }
    else
    {
        _3048 = _2974;
        _3050 = _2975;
        _3052 = _2976;
        _3054 = _2977;
    }
    float _3066 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3067 = _3066 == 3.0;
    float _3068 = log2(_3054);
    float _3072 = exp2(_3068 * cbSceneParam._m0[78u].x);
    float _3073 = exp2(_3068 * cbSceneParam._m0[78u].y);
    float _3074 = exp2(_3068 * cbSceneParam._m0[78u].z);
    float _3075 = _3072 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)));
    float _3076 = _3073 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)));
    float _3077 = _3074 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)));
    float _3086 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3086 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.y = _3086 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
    SV_Target.z = _3086 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
    SV_Target.w = _2952;
    SV_Target_1.x = ((_2947 * _2915) * _3072) * _3086;
    SV_Target_1.y = ((_2947 * _2916) * _3073) * _3086;
    SV_Target_1.z = ((_2947 * _2917) * _3074) * _3086;
    SV_Target_1.w = _2952;
}


