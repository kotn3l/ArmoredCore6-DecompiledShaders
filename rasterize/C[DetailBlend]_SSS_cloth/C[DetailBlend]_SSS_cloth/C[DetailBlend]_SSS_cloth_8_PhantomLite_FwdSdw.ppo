#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1307;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _312 = _306.w;
    vec4 _324 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = exp2(log2(1.0 - _312) * 8.0);
    vec4 _352 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _368 = exp2(log2(_312) * 8.0);
    vec4 _381 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _405 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _414 = ((_324.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _405.x;
    float _417 = ((_324.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _405.y;
    float _420 = ((_324.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _405.z;
    float _427 = (((cbMtdParam._m0[12u].x * _352.x) - _414) * _340) + _414;
    float _428 = (((cbMtdParam._m0[12u].y * _352.y) - _417) * _340) + _417;
    float _429 = (((cbMtdParam._m0[12u].z * _352.z) - _420) * _340) + _420;
    float _436 = (((cbMtdParam._m0[11u].x * _381.x) - _427) * _368) + _427;
    float _437 = (((cbMtdParam._m0[11u].y * _381.y) - _428) * _368) + _428;
    float _438 = (((cbMtdParam._m0[11u].z * _381.z) - _429) * _368) + _429;
    float _439 = _405.w * _324.w;
    float _460 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _467 = ((cbMtdParam._m0[14u].y - _460) * _340) + _460;
    float _470 = ((cbMtdParam._m0[15u].x - _467) * _368) + _467;
    vec4 _482 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    vec4 _504 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _521 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _529 = (_306.z * 2.0) * (cbMtdParam._m0[13u].x + _482.z);
    float _533 = (((_504.z - _529) + cbMtdParam._m0[14u].x) * _340) + _529;
    float _537 = (((_521.z - _533) + cbMtdParam._m0[13u].w) * _368) + _533;
    float _541 = (_306.x * 2.0) + (-1.0);
    float _543 = (_306.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_541, _543), vec2(_541, _543));
    float _3953 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    float _554 = ((_504.x - _484) * _340) + _484;
    float _555 = ((_504.y - _485) * _340) + _485;
    float _568 = ((((((_521.x - _554) * _368) + _554) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _541;
    float _569 = ((((((_521.y - _555) * _368) + _555) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _543;
    float _572 = fma(_549, _234, fma(_569, _226 * TANGENT.x, (_212 * _204) * _568));
    float _575 = fma(_549, _235, fma(_569, _226 * TANGENT.y, (_212 * _205) * _568));
    float _578 = fma(_549, _236, fma(_569, _226 * TANGENT.z, (_212 * _206) * _568));
    float _582 = inversesqrt(dot(vec3(_572, _575, _578), vec3(_572, _575, _578)));
    float _583 = _582 * _572;
    float _584 = _582 * _575;
    float _585 = _582 * _578;
    float _3964 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _586 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _587 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _588 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _589 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _590 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _591 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _599 = cbMatDynParam._m0[9u].x * _588;
    float _600 = cbMatDynParam._m0[9u].y * _589;
    float _601 = cbMatDynParam._m0[9u].z * _590;
    float _608 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _609 = _608 * _291;
    float _610 = _608 * _292;
    float _611 = _608 * _293;
    float _612 = dot(vec3(_583, _584, _585), vec3(_609, _610, _611));
    float _618 = abs(exp2(log2(_612) * cbMatDynParam._m0[12u].x));
    float _619 = isnan(0.100000001490116119384765625) ? _618 : (isnan(_618) ? 0.100000001490116119384765625 : max(_618, 0.100000001490116119384765625));
    float _625 = ((isnan(0.699999988079071044921875) ? _619 : (isnan(_619) ? 0.699999988079071044921875 : min(_619, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _647 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4040 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4051 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _655 = dot(vec3(_583, _584, _585), vec3(0.0, -1.0, 0.0));
    float _4062 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _665 = (_658 * _588) * cbMatDynParam._m0[11u].x;
    float _667 = (_658 * _589) * cbMatDynParam._m0[11u].y;
    float _669 = (_658 * _590) * cbMatDynParam._m0[11u].z;
    float _676 = dot(vec3(_609, _610, _611), vec3(_583, _584, _585));
    float _679 = _676 * 2.0;
    float _689 = dot(vec3((-0.0) - (_609 - (_679 * _583)), (-0.0) - (_610 - (_679 * _584)), (-0.0) - (_611 - (_679 * _585))), vec3(0.0, -1.0, 0.0));
    float _4073 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _696 = exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 4.0);
    float _722 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _728 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _729 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _731 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = _731.w;
    float _752 = fma(_585, cbSceneParam._m0[5u].z, fma(_584, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _583));
    float _755 = fma(_585, cbSceneParam._m0[6u].z, fma(_584, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _583));
    float _758 = fma(_585, cbSceneParam._m0[7u].z, fma(_584, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _583));
    vec4 _760 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _762 = _760.x;
    float _774 = (((_760.y - _587) + (_760.w * _587)) * cbMtdParam._m0[3u].x) + _587;
    vec4 _775 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _791 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_762 * _762)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _775.z;
    float _799 = (((cbMatDynParam._m0[15u].x - _591) * cbMatDynParam._m0[15u].w) * _791) + _591;
    float _807 = ((_791 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _774)) + _774;
    uint _831 = uint(roundEven(NORMAL.w)) * 13u;
    uint _832 = _831 + 9u;
    uint _833 = _832 + uint(cbMatDynParam._m0[0u].w);
    float _839 = (cbMtdParam._m0[0u].x * _599) * cbInstanceData._m0[_833].x;
    float _840 = (cbMtdParam._m0[0u].y * _600) * cbInstanceData._m0[_833].y;
    float _841 = (cbMtdParam._m0[0u].z * _601) * cbInstanceData._m0[_833].z;
    float _4084 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    vec4 _845 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _850 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _861 = (((_850.x - _799) + (_850.w * _799)) * cbMtdParam._m0[3u].x) + _799;
    float _874 = (cbMtdParam._m0[3u].x * (((_842 * _733) - _842) + _845.x)) + _842;
    float _875 = (cbMtdParam._m0[3u].x * (((_843 * _733) - _843) + _845.y)) + _843;
    float _876 = (cbMtdParam._m0[3u].x * (((_844 * _733) - _844) + _845.z)) + _844;
    vec4 _877 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _890 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_799 * (_599 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_799 * (_600 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_799 * (_601 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _877.z;
    float _894 = _890 * cbMatDynParam._m0[13u].w;
    float _904 = (_894 * (cbMatDynParam._m0[13u].x - _874)) + _874;
    float _905 = (_894 * (cbMatDynParam._m0[13u].y - _875)) + _875;
    float _906 = (_894 * (cbMatDynParam._m0[13u].z - _876)) + _876;
    float _914 = ((_890 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _861)) + _861;
    float _915 = 1.0 - _914;
    float _916 = _915 * _904;
    float _917 = _915 * _905;
    float _918 = _915 * _906;
    float _922 = (_904 + (-0.039999999105930328369140625)) * _914;
    float _923 = (_905 + (-0.039999999105930328369140625)) * _914;
    float _924 = (_906 + (-0.039999999105930328369140625)) * _914;
    float _925 = _922 + 0.039999999105930328369140625;
    float _926 = _923 + 0.039999999105930328369140625;
    float _927 = _924 + 0.039999999105930328369140625;
    vec4 _936 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _728, cbSceneParam._m0[86u].y * _729));
    float _939 = _936.x * TEXCOORD_4;
    float _940 = _612 * 2.0;
    float _944 = (_940 * _583) - _609;
    float _945 = (_940 * _584) - _610;
    float _946 = (_940 * _585) - _611;
    float _947 = abs(_676);
    float _4117 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_807);
    float _961 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _967 = (1.0 - _961) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _949;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1035 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1039 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1064 = _996 + _583;
        float _1065 = _1000 + _584;
        float _1066 = _1004 + _585;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_583, _584, _585), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4165 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_583, _584, _585), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4198 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_583, _584, _585), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4231 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1351 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1355 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1378 = _996 + _583;
        float _1379 = _1000 + _584;
        float _1380 = _1004 + _585;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_583, _584, _585), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4294 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_583, _584, _585), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4327 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_583, _584, _585), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4360 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1307;
        _1617 = _1307;
        _1618 = _1307;
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1319)) + _1319;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1320)) + _1320;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1321)) + _1321;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _944 * 0.5;
    float _1685 = _945 * 0.5;
    float _1686 = _946 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1797 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1801 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1805 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1808 = fma(_946, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944));
        float _1811 = fma(_946, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944));
        float _1814 = fma(_946, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944));
        float _1842;
        if (_1808 > 0.0)
        {
            _1842 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1842 = frontier_phi_16_14_ladder;
        }
        float _2017;
        if (_1811 > 0.0)
        {
            _2017 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2312;
        if (_1814 > 0.0)
        {
            _2312 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2312 = frontier_phi_37_32_ladder;
        }
        float _2314 = isnan(_2017) ? _1842 : (isnan(_1842) ? _2017 : min(_1842, _2017));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1808) + _1797;
        float _2320 = (_2315 * _1811) + _1801;
        float _2321 = (_2315 * _1814) + _1805;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_15_37_ladder = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2466.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2466.z * cbModelParam._m0[1u].y;
        }
        _1830 = frontier_phi_15_37_ladder_1;
        _1832 = frontier_phi_15_37_ladder;
        _1834 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_944, _945, _946), _1750);
        _1830 = _1818.x * cbModelParam._m0[1u].y;
        _1832 = _1818.y * cbModelParam._m0[1u].y;
        _1834 = _1818.z * cbModelParam._m0[1u].y;
    }
    float _1838 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1838 : min(cbModelParam._m0[25u].w, _1838));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1896 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1900 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1904 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1907 = fma(_946, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944));
        float _1910 = fma(_946, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944));
        float _1913 = fma(_946, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944));
        float _2022;
        if (_1907 > 0.0)
        {
            _2022 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2022 = frontier_phi_27_23_ladder;
        }
        float _2339;
        if (_1910 > 0.0)
        {
            _2339 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2339 = frontier_phi_39_34_ladder;
        }
        float _2677;
        if (_1913 > 0.0)
        {
            _2677 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2677 = frontier_phi_49_46_ladder;
        }
        float _2679 = isnan(_2339) ? _2022 : (isnan(_2022) ? _2339 : min(_2022, _2339));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1907) + _1896;
        float _2685 = (_2680 * _1910) + _1900;
        float _2686 = (_2680 * _1913) + _1904;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1839);
            frontier_phi_24_49_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1932 = frontier_phi_24_49_ladder_2;
        _1934 = frontier_phi_24_49_ladder_1;
        _1936 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_944, _945, _946), _1839);
        _1932 = _1916.x * cbModelParam._m0[1u].z;
        _1934 = _1916.y * cbModelParam._m0[1u].z;
        _1936 = _1916.z * cbModelParam._m0[1u].z;
    }
    float _1949 = (((_967 * _925) + _968) * _939) * ((cbModelParam._m0[1u].w * (_1932 - _1830)) + _1830);
    float _1951 = (((_967 * _926) + _968) * _939) * ((cbModelParam._m0[1u].w * (_1934 - _1832)) + _1832);
    float _1953 = (((_967 * _927) + _968) * _939) * ((cbModelParam._m0[1u].w * (_1936 - _1834)) + _1834);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1949 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1949 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1949 * cbSceneParam._m0[91u].x));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2009 = _1996 / _2008;
    float _2010 = _2000 / _2008;
    float _2011 = _2004 / _2008;
    float _2158;
    float _2159;
    float _2160;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2038 = ((uint(_2011 > cbSceneParam._m0[59u].y) + uint(_2011 > cbSceneParam._m0[59u].x)) + uint(_2011 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2039 = _2038 + 43u;
        uint _2047 = _2038 + 44u;
        uint _2055 = _2038 + 45u;
        uint _2063 = _2038 + 46u;
        float _2074 = fma(_2008, cbSceneParam._m0[_2039].w, fma(_2004, cbSceneParam._m0[_2039].z, fma(_2000, cbSceneParam._m0[_2039].y, _1996 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2008, cbSceneParam._m0[_2047].w, fma(_2004, cbSceneParam._m0[_2047].z, fma(_2000, cbSceneParam._m0[_2047].y, _1996 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2008, cbSceneParam._m0[_2063].w, fma(_2004, cbSceneParam._m0[_2063].z, fma(_2000, cbSceneParam._m0[_2063].y, _1996 * cbSceneParam._m0[_2063].x)));
        float _2091 = cbSceneParam._m0[33u].z * _2086;
        float _2093 = cbSceneParam._m0[33u].w * _2086;
        float _2096 = fma(_2008, cbSceneParam._m0[_2055].w, fma(_2004, cbSceneParam._m0[_2055].z, fma(_2000, cbSceneParam._m0[_2055].y, _1996 * cbSceneParam._m0[_2055].x))) / _2086;
        float _2144 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2151 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 + _2074) / _2086, (_2093 + _2078) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2074) / _2086, (_2078 - _2091) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2091) / _2086, (_2078 - _2093) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2093) / _2086, (_2091 + _2078) / _2086), _2096), 0.0)).x), vec4(0.25)));
        _2158 = 1.0 - (_2151 * cbSceneParam._m0[34u].x);
        _2159 = 1.0 - (_2151 * cbSceneParam._m0[34u].y);
        _2160 = 1.0 - (_2151 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2158 = 1.0;
        _2159 = 1.0;
        _2160 = 1.0;
    }
    float _2224;
    float _2226;
    float _2228;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2212 = fma(_2008, cbSceneParam._m0[63u].w, fma(_2004, cbSceneParam._m0[63u].z, fma(_2000, cbSceneParam._m0[63u].y, _1996 * cbSceneParam._m0[63u].x)));
        float _2213 = fma(_2008, cbSceneParam._m0[60u].w, fma(_2004, cbSceneParam._m0[60u].z, fma(_2000, cbSceneParam._m0[60u].y, _1996 * cbSceneParam._m0[60u].x))) / _2212;
        float _2214 = fma(_2008, cbSceneParam._m0[61u].w, fma(_2004, cbSceneParam._m0[61u].z, fma(_2000, cbSceneParam._m0[61u].y, _1996 * cbSceneParam._m0[61u].x))) / _2212;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2213 >= cbSceneParam._m0[64u].x) && (_2214 >= cbSceneParam._m0[64u].y)) && (_2213 <= cbSceneParam._m0[64u].z)) && (_2214 <= cbSceneParam._m0[64u].w))
        {
            float _2352 = fma(_2008, cbSceneParam._m0[62u].w, fma(_2004, cbSceneParam._m0[62u].z, fma(_2000, cbSceneParam._m0[62u].y, _1996 * cbSceneParam._m0[62u].x))) / _2212;
            float _2356 = isnan(cbSceneParam._m0[41u].w) ? _2352 : (isnan(_2352) ? cbSceneParam._m0[41u].w : max(_2352, cbSceneParam._m0[41u].w));
            float _2399 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
            float _2406 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2213, cbSceneParam._m0[33u].w + _2214), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2213, _2214 - cbSceneParam._m0[33u].z), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].z, _2214 - cbSceneParam._m0[33u].w), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2214), _2356), 0.0)).x), vec4(0.25)));
            float _2410 = 1.0 - (_2406 * cbSceneParam._m0[34u].x);
            float _2411 = 1.0 - (_2406 * cbSceneParam._m0[34u].y);
            float _2412 = 1.0 - (_2406 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_36_35_ladder_1 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_36_35_ladder_2 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
        }
        else
        {
            frontier_phi_36_35_ladder = _2159;
            frontier_phi_36_35_ladder_1 = _2160;
            frontier_phi_36_35_ladder_2 = _2158;
        }
        _2224 = frontier_phi_36_35_ladder_2;
        _2226 = frontier_phi_36_35_ladder;
        _2228 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2224 = _2158;
        _2226 = _2159;
        _2228 = _2160;
    }
    uvec4 _2233 = floatBitsToUint(cbInstanceData._m0[_831 + 5u]);
    uint _2235 = _2233.x * 14u;
    uint _2236 = _2235 + 13u;
    float _2243 = _939 + (-1.0);
    float _2248 = (cbLight._m0[_2236].x * _2243) + 1.0;
    float _2249 = (cbLight._m0[_2236].y * _2243) + 1.0;
    float _2250 = (cbLight._m0[_2236].z * _2243) + 1.0;
    float _2251 = (cbLight._m0[_2236].w * _2243) + 1.0;
    uint _2252 = _2235 + 5u;
    float _2258 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2262 = _2235 + 4u;
    float _2271 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2275 = _2235 | 1u;
    float _2286 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_583, _584, _585));
    float _2289 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_583, _584, _585));
    float _4538 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _4549 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2296 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2303 = ((cbLight._m0[_2252].x * _2258) * _2296) + (((cbLight._m0[_2262].x * _2224) * _2271) * _2294);
    float _2304 = ((_2258 * cbLight._m0[_2252].y) * _2296) + (((cbLight._m0[_2262].y * _2226) * _2271) * _2294);
    float _2305 = ((_2258 * cbLight._m0[_2252].z) * _2296) + (((cbLight._m0[_2262].z * _2228) * _2271) * _2294);
    uvec4 _2309 = floatBitsToUint(cbLight._m0[_2235 + 12u]);
    bool _2311 = _2309.x == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2311)
    {
        _2413 = _2303;
        _2415 = _2304;
        _2417 = _2305;
    }
    else
    {
        uint _2421 = _2235 + 6u;
        float _2437 = (dot(vec3(cbLight._m0[_2235 + 2u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4560 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2440 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2413 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2303;
        _2415 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2304;
        _2417 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2305;
    }
    bool _2420 = _2309.y == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2420)
    {
        _2475 = _2413;
        _2477 = _2415;
        _2479 = _2417;
    }
    else
    {
        uint _2648 = _2235 + 7u;
        float _2664 = (dot(vec3(cbLight._m0[_2235 + 3u].xyz), vec3(_583, _584, _585)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4576 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2667 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2475 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2413;
        _2477 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2415;
        _2479 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2417;
    }
    uint _2482 = _2235 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _807) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2235].x + _609;
    float _2498 = cbLight._m0[_2235].y + _610;
    float _2499 = cbLight._m0[_2235].z + _611;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2235].xyz));
    float _4592 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2511 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2512 = dot(vec3(_583, _584, _585), vec3(_2504, _2505, _2506));
    float _4614 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2504, _2505, _2506));
    float _4625 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2496 * _2496;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2533 = 0.959999978542327880859375 - _922;
    float _2535 = 0.959999978542327880859375 - _923;
    float _2536 = 0.959999978542327880859375 - _924;
    float _2543 = 1.0 - _2496;
    float _2554 = (0.5 / (((_2511 * ((_2510 * _2543) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2543) + _2496) * _2510))) * _2510;
    float _4636 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    uint _2570 = _2235 + 9u;
    float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _807) * 0.949999988079071044921875);
    float _2582 = _2581 * _2581;
    float _2583 = cbLight._m0[_2275].x + _609;
    float _2584 = cbLight._m0[_2275].y + _610;
    float _2585 = cbLight._m0[_2275].z + _611;
    float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
    float _2590 = _2589 * _2583;
    float _2591 = _2589 * _2584;
    float _2592 = _2589 * _2585;
    float _2593 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2275].xyz));
    float _4647 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2597 = dot(vec3(_583, _584, _585), vec3(_2590, _2591, _2592));
    float _4658 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2590, _2591, _2592));
    float _4669 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2582 * _2582;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2623 = 1.0 - _2582;
    float _2633 = (0.5 / (((_2511 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2623) + _2582) * _2596))) * _2596;
    float _4680 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    float _2645 = (((((_2616 * _2533) + _925) * cbLight._m0[_2570].x) * _2635) * _2258) + ((((cbLight._m0[_2482].x * _2224) * ((_2532 * _2533) + _925)) * _2556) * _2271);
    float _2646 = (((((_2616 * _2535) + _926) * cbLight._m0[_2570].y) * _2635) * _2258) + ((((cbLight._m0[_2482].y * _2226) * ((_2532 * _2535) + _926)) * _2556) * _2271);
    float _2647 = (((((_2616 * _2536) + _927) * cbLight._m0[_2570].z) * _2635) * _2258) + ((((cbLight._m0[_2482].z * _2228) * ((_2532 * _2536) + _927)) * _2556) * _2271);
    float _2703;
    float _2705;
    float _2707;
    if (_2311)
    {
        _2703 = _2645;
        _2705 = _2646;
        _2707 = _2647;
    }
    else
    {
        uint _2709 = _2235 + 2u;
        uint _2713 = _2235 + 10u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _807) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _609;
        float _2730 = cbLight._m0[_2709].y + _610;
        float _2731 = cbLight._m0[_2709].z + _611;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2709].xyz));
        float _4691 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2743 = dot(vec3(_583, _584, _585), vec3(_2736, _2737, _2738));
        float _4702 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4713 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2511 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2769) + _2728) * _2742))) * _2742;
        float _4724 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2703 = (((((_2762 * _2533) + _925) * cbLight._m0[_2713].x) * _2781) * _2782) + _2645;
        _2705 = (((((_2762 * _2535) + _926) * cbLight._m0[_2713].y) * _2781) * _2782) + _2646;
        _2707 = (((((_2762 * _2536) + _927) * cbLight._m0[_2713].z) * _2781) * _2782) + _2647;
    }
    float _2813;
    float _2815;
    float _2817;
    if (_2420)
    {
        _2813 = _2703;
        _2815 = _2705;
        _2817 = _2707;
    }
    else
    {
        uint _2824 = _2235 + 3u;
        uint _2828 = _2235 + 11u;
        float _2842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2824].w)) * _807) * 0.949999988079071044921875);
        float _2843 = _2842 * _2842;
        float _2844 = cbLight._m0[_2824].x + _609;
        float _2845 = cbLight._m0[_2824].y + _610;
        float _2846 = cbLight._m0[_2824].z + _611;
        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
        float _2851 = _2850 * _2844;
        float _2852 = _2850 * _2845;
        float _2853 = _2850 * _2846;
        float _2854 = dot(vec3(_583, _584, _585), vec3(cbLight._m0[_2824].xyz));
        float _4740 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2858 = dot(vec3(_583, _584, _585), vec3(_2851, _2852, _2853));
        float _4751 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2862 = dot(vec3(cbLight._m0[_2824].xyz), vec3(_2851, _2852, _2853));
        float _4762 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2866 = _2843 * _2843;
        float _2870 = ((_2861 * _2861) * (_2866 + (-1.0))) + 1.0;
        float _2877 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2884 = 1.0 - _2843;
        float _2894 = (0.5 / (((_2511 * ((_2857 * _2884) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2884) + _2843) * _2857))) * _2857;
        float _4773 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2896 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2866 / ((_2870 * _2870) * 3.141590118408203125));
        float _2897 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2813 = (((((_2877 * _2533) + _925) * cbLight._m0[_2828].x) * _2896) * _2897) + _2703;
        _2815 = (((((_2877 * _2535) + _926) * cbLight._m0[_2828].y) * _2896) * _2897) + _2705;
        _2817 = (((((_2877 * _2536) + _927) * cbLight._m0[_2828].z) * _2896) * _2897) + _2707;
    }
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_2233.y == 0u)
    {
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _729) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _728) / _2919)));
        float _2940 = (log2(_2011 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            uint _3214 = 0u;
            uint _3223;
            bool _3224;
            for (;;)
            {
                _3223 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                _3224 = _3223 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3224)
                {
                    frontier_phi_68_pred = _3213;
                    frontier_phi_68_pred_1 = _3212;
                    frontier_phi_68_pred_2 = _3211;
                    frontier_phi_68_pred_3 = _3209;
                    frontier_phi_68_pred_4 = _3208;
                    frontier_phi_68_pred_5 = _3210;
                }
                else
                {
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    uint _3338;
                    _3332 = _3208;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3223;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    for (;;)
                    {
                        uint _3342 = uint(findLSB(_3338)) + (_3214 << 5u);
                        uint _3339 = (_3338 + 4294967295u) & _3338;
                        uint _3344 = _3342 * 48u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3364 = (_3342 * 48u) + 4u;
                        vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3383 = (_3342 * 48u) + 8u;
                        vec3 _3394 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3383)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3383 + 2u)).x));
                        float _3398 = _3358.x - _2009;
                        float _3399 = _3358.y - _2010;
                        float _3400 = _3358.z - _2011;
                        float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                        float _3404 = inversesqrt(_3401);
                        float _3405 = _3404 * _3398;
                        float _3406 = _3404 * _3399;
                        float _3407 = _3404 * _3400;
                        float _3408 = dot(vec3(_752, _755, _758), vec3(_3405, _3406, _3407));
                        float _3413 = 1.0 - (_3401 * _3358.w);
                        float _4799 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3414 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3415 = sqrt(_3401) * _3377.w;
                        float _3418 = 1.39999997615814208984375 / (_3415 + 1.39999997615814208984375);
                        float _3419 = _3418 * _3418;
                        float _3422 = ((1.0 - _3419) * _3408) + _3419;
                        float _3425 = _3415 * _3415;
                        float _3428 = ((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3414) / ((_3425 * 0.699999988079071044921875) + 1.0);
                        float _3432 = (-0.0) - _2009;
                        float _3433 = (-0.0) - _2010;
                        float _3434 = (-0.0) - _2011;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _949;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3439 + _3405;
                        float _3460 = _3440 + _3406;
                        float _3461 = _3441 + _3407;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_752, _755, _758), vec3(_3439, _3440, _3441));
                        float _4815 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3473 = dot(vec3(_752, _755, _758), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4826 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3418 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3408) + _3482;
                        float _4837 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4848 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125))) * _3414;
                        _3267 = (_3428 * _3377.x) + _3335;
                        _3268 = (_3428 * _3377.y) + _3336;
                        _3269 = (_3428 * _3377.z) + _3337;
                        _3264 = (_3508 * _3394.x) + _3332;
                        _3265 = (_3508 * _3394.y) + _3333;
                        _3266 = (_3508 * _3394.z) + _3334;
                        if (_3339 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3332 = _3264;
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3339;
                        }
                    }
                    frontier_phi_68_pred = _3269;
                    frontier_phi_68_pred_1 = _3268;
                    frontier_phi_68_pred_2 = _3267;
                    frontier_phi_68_pred_3 = _3265;
                    frontier_phi_68_pred_4 = _3264;
                    frontier_phi_68_pred_5 = _3266;
                }
                _3066 = frontier_phi_68_pred;
                _3064 = frontier_phi_68_pred_1;
                _3062 = frontier_phi_68_pred_2;
                _3058 = frontier_phi_68_pred_3;
                _3056 = frontier_phi_68_pred_4;
                _3060 = frontier_phi_68_pred_5;
                uint _3215 = _3214 + 1u;
                if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3208 = _3056;
                    _3209 = _3058;
                    _3210 = _3060;
                    _3211 = _3062;
                    _3212 = _3064;
                    _3213 = _3066;
                    _3214 = _3215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((4294967295u << _3072) & _2950) == 0u)
        {
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
        }
        else
        {
            float _3201 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
            float _3202 = _3201 * _2009;
            float _3203 = _3201 * _2010;
            float _3204 = _3201 * _2011;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3315 = _3055;
                float _3316 = _3057;
                float _3317 = _3059;
                float _3318 = _3061;
                float _3319 = _3063;
                float _3320 = _3065;
                uint _3321 = _3072;
                uint _3330;
                bool _3331;
                for (;;)
                {
                    _3330 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3321 << 2u)) >> 2u)).x;
                    _3331 = _3330 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3331)
                    {
                        frontier_phi_74_pred = _3317;
                        frontier_phi_74_pred_1 = _3316;
                        frontier_phi_74_pred_2 = _3315;
                        frontier_phi_74_pred_3 = _3320;
                        frontier_phi_74_pred_4 = _3319;
                        frontier_phi_74_pred_5 = _3318;
                    }
                    else
                    {
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3526 = _3315;
                        float _3527 = _3316;
                        float _3528 = _3317;
                        float _3529 = _3318;
                        float _3530 = _3319;
                        float _3531 = _3320;
                        uint _3532 = _3330;
                        uint _3533;
                        vec4 _3558;
                        float _3559;
                        vec4 _3574;
                        vec3 _3586;
                        vec4 _3601;
                        vec4 _3617;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3543 = ((_3321 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3532));
                            _3533 = (_3532 + 4294967295u) & _3532;
                            uint _3545 = _3543 * 40u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3559 = _3558.w;
                            uint _3561 = (_3543 * 40u) + 4u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3543 * 40u) + 8u;
                            _3586 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x));
                            uint _3588 = (_3543 * 40u) + 16u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3604 = (_3543 * 40u) + 20u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3620 = (_3543 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3543 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2011, _3652.z, fma(_2010, _3652.y, _3652.x * _2009)) + _3652.w;
                            _3665 = !((fma(_2011, _3633.z, fma(_2010, _3633.y, _3633.x * _2009)) + _3633.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3558.x - _2009;
                                float _3693 = _3558.y - _2010;
                                float _3694 = _3558.z - _2011;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3559 * _3559));
                                float _4859 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3710 = sqrt(_3695) * _3574.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_752, _755, _758))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2011, _3601.z, fma(_2010, _3601.y, _3601.x * _2009)) + _3601.w) / _3664;
                                float _3724 = (fma(_2011, _3617.z, fma(_2010, _3617.y, _3617.x * _2009)) + _3617.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4875 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _949;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3202;
                                float _3754 = _3700 - _3203;
                                float _3755 = _3701 - _3204;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_752, _755, _758), vec3((-0.0) - _3202, (-0.0) - _3203, (-0.0) - _3204));
                                float _4886 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3767 = dot(vec3(_752, _755, _758), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4897 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_752, _755, _758), vec3(_3699, _3700, _3701))) + _3776;
                                float _4908 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4919 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3804 * _3586.z;
                                frontier_phi_80_pred_1 = _3804 * _3586.y;
                                frontier_phi_80_pred_2 = _3804 * _3586.x;
                                frontier_phi_80_pred_3 = _3730 * _3574.z;
                                frontier_phi_80_pred_4 = _3730 * _3574.y;
                                frontier_phi_80_pred_5 = _3730 * _3574.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3810 = frontier_phi_80_pred;
                            _3809 = frontier_phi_80_pred_1;
                            _3808 = frontier_phi_80_pred_2;
                            _3813 = frontier_phi_80_pred_3;
                            _3812 = frontier_phi_80_pred_4;
                            _3811 = frontier_phi_80_pred_5;
                            _3516 = _3811 + _3529;
                            _3517 = _3812 + _3530;
                            _3518 = _3813 + _3531;
                            _3513 = _3808 + _3526;
                            _3514 = _3809 + _3527;
                            _3515 = _3810 + _3528;
                            if (_3533 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3533;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3515;
                        frontier_phi_74_pred_1 = _3514;
                        frontier_phi_74_pred_2 = _3513;
                        frontier_phi_74_pred_3 = _3518;
                        frontier_phi_74_pred_4 = _3517;
                        frontier_phi_74_pred_5 = _3516;
                    }
                    _3181 = frontier_phi_74_pred;
                    _3179 = frontier_phi_74_pred_1;
                    _3177 = frontier_phi_74_pred_2;
                    _3187 = frontier_phi_74_pred_3;
                    _3185 = frontier_phi_74_pred_4;
                    _3183 = frontier_phi_74_pred_5;
                    uint _3322 = _3321 + 1u;
                    if (_3322 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3315 = _3177;
                        _3316 = _3179;
                        _3317 = _3181;
                        _3318 = _3183;
                        _3319 = _3185;
                        _3320 = _3187;
                        _3321 = _3322;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3185;
                frontier_phi_62_63_ladder_1 = _3183;
                frontier_phi_62_63_ladder_2 = _3181;
                frontier_phi_62_63_ladder_3 = _3187;
                frontier_phi_62_63_ladder_4 = _3179;
                frontier_phi_62_63_ladder_5 = _3177;
            }
            else
            {
                frontier_phi_62_63_ladder = _3063;
                frontier_phi_62_63_ladder_1 = _3061;
                frontier_phi_62_63_ladder_2 = _3059;
                frontier_phi_62_63_ladder_3 = _3065;
                frontier_phi_62_63_ladder_4 = _3057;
                frontier_phi_62_63_ladder_5 = _3055;
            }
            _3176 = frontier_phi_62_63_ladder_5;
            _3178 = frontier_phi_62_63_ladder_4;
            _3180 = frontier_phi_62_63_ladder_2;
            _3182 = frontier_phi_62_63_ladder_1;
            _3184 = frontier_phi_62_63_ladder;
            _3186 = frontier_phi_62_63_ladder_3;
        }
        float _3191 = isnan(1.0) ? _939 : (isnan(_939) ? 1.0 : min(_939, 1.0));
        _2962 = (_3191 * _3182) + _2475;
        _2964 = (_3191 * _3184) + _2477;
        _2966 = (_3191 * _3186) + _2479;
        _2968 = ((_3176 * _925) * _3191) + _2813;
        _2970 = ((_3178 * _926) * _3191) + _2815;
        _2972 = ((_3180 * _927) * _3191) + _2817;
    }
    else
    {
        _2962 = _2475;
        _2964 = _2477;
        _2966 = _2479;
        _2968 = _2813;
        _2970 = _2815;
        _2972 = _2817;
    }
    uint _2978 = _832 + uint(cbMatDynParam._m0[0u].w);
    float _2984 = cbInstanceData._m0[_2978].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _625) + cbMatDynParam._m0[7u].x) + (((_665 - (_665 * _591)) + (cbMatDynParam._m0[11u].x * _696)) * cbMatDynParam._m0[9u].x));
    float _2985 = cbInstanceData._m0[_2978].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _625) + cbMatDynParam._m0[7u].y) + (((_667 - (_667 * _591)) + (cbMatDynParam._m0[11u].y * _696)) * cbMatDynParam._m0[9u].y));
    float _2986 = cbInstanceData._m0[_2978].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _625) + cbMatDynParam._m0[7u].z) + (((_669 - (_669 * _591)) + (cbMatDynParam._m0[11u].z * _696)) * cbMatDynParam._m0[9u].z));
    float _4935 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4946 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4957 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4968 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3004 = (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2962 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _939))) + ((_2968 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + _2984;
    float _3006 = (_2985 + ((_2970 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2964 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _939)));
    float _3008 = (_2986 + ((_2972 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1739)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2966 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _939)));
    float _3016 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) - _651) * _625) + _651));
    float _3021 = cbInstanceData._m0[_831 + 6u].w * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)));
    float _3026 = _728 / cbSceneParam._m0[86u].x;
    float _3027 = _729 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _722 : (isnan(_722) ? cbSceneParam._m0[77u].w : min(_722, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_722 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_722) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _722 : min(cbSceneParam._m0[80u].w, _722));
        float _3081 = _3080 / _722;
        float _3092 = _3081 * _291;
        float _3093 = _292 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _293;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3277;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3277 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3237 = 1.0 / cbSceneParam._m0[80u].x;
            float _3238 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3239 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            _3277 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3248 - _3249) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))))) * _3237)) - ((exp2(_3115 * _3248) - exp2(_3115 * _3249)) * _3237))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3279 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3288 = exp2((_3277 * (-1.44269502162933349609375)) * (1.0 - _3279.w));
        float _3289 = log2(_3288);
        float _3305 = log2(_3046);
        _3117 = (exp2(_3305 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].x)) * _3279.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3119 = (exp2(_3305 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].y)) * _3279.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3121 = (exp2(_3305 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3289 * cbSceneParam._m0[78u].z)) * _3279.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3123 = _3288 * _3046;
    }
    else
    {
        _3117 = _3043;
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3141 = exp2(_3137 * cbSceneParam._m0[78u].x);
    float _3142 = exp2(_3137 * cbSceneParam._m0[78u].y);
    float _3143 = exp2(_3137 * cbSceneParam._m0[78u].z);
    float _3144 = _3141 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0)));
    float _3145 = _3142 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)));
    float _3146 = _3143 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0)));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = _3021;
    SV_Target_1.x = ((_3016 * _2984) * _3141) * _3155;
    SV_Target_1.y = ((_3016 * _2985) * _3142) * _3155;
    SV_Target_1.z = ((_3016 * _2986) * _3143) * _3155;
    SV_Target_1.w = _3021;
}


