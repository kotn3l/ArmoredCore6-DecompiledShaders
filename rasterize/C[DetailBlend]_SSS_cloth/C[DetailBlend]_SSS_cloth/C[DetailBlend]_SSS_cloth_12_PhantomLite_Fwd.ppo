#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1379;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _312 = _306.w;
    float _318 = exp2(log2(_311 * 22.0) * 260.0);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _334 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _344 = cbMtdParam._m0[10u].x * _334.x;
    float _345 = cbMtdParam._m0[10u].y * _334.y;
    float _346 = cbMtdParam._m0[10u].z * _334.z;
    vec4 _358 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _373 = exp2(log2(1.0 - _312) * 8.0);
    vec4 _385 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _401 = exp2(log2(_312) * 8.0);
    vec4 _414 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _438 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _460 = (((((_358.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _438.x) - _344) * _320) + _344;
    float _461 = (((((_358.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _438.y) - _345) * _320) + _345;
    float _462 = (((((_358.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _438.z) - _346) * _320) + _346;
    float _469 = (((cbMtdParam._m0[12u].x * _385.x) - _460) * _373) + _460;
    float _470 = (((cbMtdParam._m0[12u].y * _385.y) - _461) * _373) + _461;
    float _471 = (((cbMtdParam._m0[12u].z * _385.z) - _462) * _373) + _462;
    float _478 = (((cbMtdParam._m0[11u].x * _414.x) - _469) * _401) + _469;
    float _479 = (((cbMtdParam._m0[11u].y * _414.y) - _470) * _401) + _470;
    float _480 = (((cbMtdParam._m0[11u].z * _414.z) - _471) * _401) + _471;
    float _481 = _438.w * _358.w;
    float _510 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _320) + cbMtdParam._m0[15u].y;
    float _513 = ((cbMtdParam._m0[14u].y - _510) * _373) + _510;
    float _516 = ((cbMtdParam._m0[15u].x - _513) * _401) + _513;
    vec4 _528 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _530 = _528.x;
    float _531 = _528.y;
    float _537 = cbMtdParam._m0[13u].y + _528.z;
    vec4 _549 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _568 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _585 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _596 = ((((_311 * 2.0) * (cbMtdParam._m0[13u].x + _549.z)) - _537) * _320) + _537;
    float _600 = (((_568.z - _596) + cbMtdParam._m0[14u].x) * _373) + _596;
    float _604 = (((_585.z - _600) + cbMtdParam._m0[13u].w) * _401) + _600;
    float _608 = (_306.x * 2.0) + (-1.0);
    float _610 = (_306.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_608, _610), vec2(_608, _610));
    float _3752 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _616 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    float _621 = ((_549.x - _530) * _320) + _530;
    float _622 = ((_549.y - _531) * _320) + _531;
    float _627 = ((_568.x - _621) * _373) + _621;
    float _628 = ((_568.y - _622) * _373) + _622;
    float _641 = ((((((_585.x - _627) * _401) + _627) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _608;
    float _642 = ((((((_585.y - _628) * _401) + _628) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _610;
    float _645 = fma(_616, _234, fma(_642, _226 * TANGENT.x, (_212 * _204) * _641));
    float _648 = fma(_616, _235, fma(_642, _226 * TANGENT.y, (_212 * _205) * _641));
    float _651 = fma(_616, _236, fma(_642, _226 * TANGENT.z, (_212 * _206) * _641));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3763 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _659 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _660 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _661 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _662 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _663 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _664 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _672 = cbMatDynParam._m0[9u].x * _661;
    float _673 = cbMatDynParam._m0[9u].y * _662;
    float _674 = cbMatDynParam._m0[9u].z * _663;
    float _681 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _682 = _681 * _291;
    float _683 = _681 * _292;
    float _684 = _681 * _293;
    float _685 = dot(vec3(_656, _657, _658), vec3(_682, _683, _684));
    float _691 = abs(exp2(log2(_685) * cbMatDynParam._m0[12u].x));
    float _692 = isnan(0.100000001490116119384765625) ? _691 : (isnan(_691) ? 0.100000001490116119384765625 : max(_691, 0.100000001490116119384765625));
    float _698 = ((isnan(0.699999988079071044921875) ? _692 : (isnan(_692) ? 0.699999988079071044921875 : min(_692, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _720 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3839 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3850 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _728 = dot(vec3(_656, _657, _658), vec3(0.0, -1.0, 0.0));
    float _3861 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _738 = (_731 * _661) * cbMatDynParam._m0[11u].x;
    float _740 = (_731 * _662) * cbMatDynParam._m0[11u].y;
    float _742 = (_731 * _663) * cbMatDynParam._m0[11u].z;
    float _749 = dot(vec3(_682, _683, _684), vec3(_656, _657, _658));
    float _752 = _749 * 2.0;
    float _762 = dot(vec3((-0.0) - (_682 - (_752 * _656)), (-0.0) - (_683 - (_752 * _657)), (-0.0) - (_684 - (_752 * _658))), vec3(0.0, -1.0, 0.0));
    float _3872 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _769 = exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 4.0);
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _802 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _804 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _806 = _804.w;
    float _824 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _827 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _830 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    vec4 _832 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _834 = _832.x;
    float _846 = (((_832.y - _660) + (_832.w * _660)) * cbMtdParam._m0[3u].x) + _660;
    vec4 _847 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _863 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_834 * _834)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _847.z;
    float _871 = (((cbMatDynParam._m0[15u].x - _664) * cbMatDynParam._m0[15u].w) * _863) + _664;
    float _879 = ((_863 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _846)) + _846;
    uint _903 = uint(roundEven(NORMAL.w)) * 13u;
    uint _904 = _903 + 9u;
    uint _905 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * _672) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * _673) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * _674) * cbInstanceData._m0[_905].z;
    float _3883 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    vec4 _917 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _922 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _933 = (((_922.x - _871) + (_922.w * _871)) * cbMtdParam._m0[3u].x) + _871;
    float _946 = (cbMtdParam._m0[3u].x * (((_914 * _806) - _914) + _917.x)) + _914;
    float _947 = (cbMtdParam._m0[3u].x * (((_915 * _806) - _915) + _917.y)) + _915;
    float _948 = (cbMtdParam._m0[3u].x * (((_916 * _806) - _916) + _917.z)) + _916;
    float _962 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_871 * (_672 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_673 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_871 * (_674 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _966 = _962 * cbMatDynParam._m0[13u].w;
    float _976 = (_966 * (cbMatDynParam._m0[13u].x - _946)) + _946;
    float _977 = (_966 * (cbMatDynParam._m0[13u].y - _947)) + _947;
    float _978 = (_966 * (cbMatDynParam._m0[13u].z - _948)) + _948;
    float _986 = ((_962 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _933)) + _933;
    float _987 = 1.0 - _986;
    float _988 = _987 * _976;
    float _989 = _987 * _977;
    float _990 = _987 * _978;
    float _994 = (_976 + (-0.039999999105930328369140625)) * _986;
    float _995 = (_977 + (-0.039999999105930328369140625)) * _986;
    float _996 = (_978 + (-0.039999999105930328369140625)) * _986;
    float _997 = _994 + 0.039999999105930328369140625;
    float _998 = _995 + 0.039999999105930328369140625;
    float _999 = _996 + 0.039999999105930328369140625;
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _801, cbSceneParam._m0[86u].y * _802));
    float _1011 = _1008.x * TEXCOORD_4;
    float _1012 = _685 * 2.0;
    float _1016 = (_1012 * _656) - _682;
    float _1017 = (_1012 * _657) - _683;
    float _1018 = (_1012 * _658) - _684;
    float _1019 = abs(_749);
    float _3916 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1021 = sqrt(_879);
    float _1033 = exp2((_1021 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1021 * 3.0));
    float _1039 = (1.0 - _1033) * ((_1021 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1040 = _1033 * _1021;
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1107 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1111 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1136 = _1068 + _656;
        float _1137 = _1072 + _657;
        float _1138 = _1076 + _658;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_656, _657, _658), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3964 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_656, _657, _658), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3975 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3986 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3997 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_656, _657, _658), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4008 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4019 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4030 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1423 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1427 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1450 = _1068 + _656;
        float _1451 = _1072 + _657;
        float _1452 = _1076 + _658;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_656, _657, _658), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4093 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_656, _657, _658), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4126 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_656, _657, _658), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4159 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1379;
        _1689 = _1379;
        _1690 = _1379;
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = _1379;
        _1698 = _1379;
        _1699 = _1379;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1391)) + _1391;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _1016 * 0.5;
    float _1757 = _1017 * 0.5;
    float _1758 = _1018 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _879);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1883 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1886 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1914 = frontier_phi_16_14_ladder;
        }
        float _2120;
        if (_1883 > 0.0)
        {
            _2120 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2120 = frontier_phi_25_21_ladder;
        }
        float _2374;
        if (_1886 > 0.0)
        {
            _2374 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2374 = frontier_phi_37_32_ladder;
        }
        float _2376 = isnan(_2120) ? _1914 : (isnan(_1914) ? _2120 : min(_1914, _2120));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1880) + _1869;
        float _2382 = (_2377 * _1883) + _1873;
        float _2383 = (_2377 * _1886) + _1877;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_15_37_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_15_37_ladder_2;
        _1904 = frontier_phi_15_37_ladder_1;
        _1906 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _879);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _1982 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _1985 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2125;
        if (_1979 > 0.0)
        {
            _2125 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2125 = frontier_phi_27_23_ladder;
        }
        float _2401;
        if (_1982 > 0.0)
        {
            _2401 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2401 = frontier_phi_39_34_ladder;
        }
        float _2614;
        if (_1985 > 0.0)
        {
            _2614 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2614 = frontier_phi_48_45_ladder;
        }
        float _2616 = isnan(_2401) ? _2125 : (isnan(_2125) ? _2401 : min(_2125, _2401));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1979) + _1968;
        float _2622 = (_2617 * _1982) + _1972;
        float _2623 = (_2617 * _1985) + _1976;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_24_48_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_24_48_ladder_2;
        _2006 = frontier_phi_24_48_ladder_1;
        _2008 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1911);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1039 * _997) + _1040) * _1011) * ((cbModelParam._m0[1u].w * (_2004 - _1902)) + _1902);
    float _2023 = (((_1039 * _998) + _1040) * _1011) * ((cbModelParam._m0[1u].w * (_2006 - _1904)) + _1904);
    float _2025 = (((_1039 * _999) + _1040) * _1011) * ((cbModelParam._m0[1u].w * (_2008 - _1906)) + _1906);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    uvec4 _2044 = floatBitsToUint(cbInstanceData._m0[_903 + 5u]);
    uint _2046 = _2044.x * 14u;
    uint _2047 = _2046 + 13u;
    float _2054 = _1011 + (-1.0);
    float _2059 = (cbLight._m0[_2047].x * _2054) + 1.0;
    float _2060 = (cbLight._m0[_2047].y * _2054) + 1.0;
    float _2061 = (cbLight._m0[_2047].z * _2054) + 1.0;
    float _2062 = (cbLight._m0[_2047].w * _2054) + 1.0;
    uint _2063 = _2046 + 5u;
    float _2069 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2073 = _2046 + 4u;
    float _2079 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2083 = _2046 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_656, _657, _658));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_656, _657, _658));
    float _4295 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4306 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2063].x * _2069) * _2104) + ((cbLight._m0[_2073].x * _2079) * _2102);
    float _2112 = ((_2069 * cbLight._m0[_2063].y) * _2104) + ((_2079 * cbLight._m0[_2073].y) * _2102);
    float _2113 = ((_2069 * cbLight._m0[_2063].z) * _2104) + ((_2079 * cbLight._m0[_2073].z) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2046 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2119)
    {
        _2130 = _2111;
        _2132 = _2112;
        _2134 = _2113;
    }
    else
    {
        uint _2138 = _2046 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_2046 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4317 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2157 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2111;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2112;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2113;
    }
    bool _2137 = _2117.y == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2137)
    {
        _2175 = _2130;
        _2177 = _2132;
        _2179 = _2134;
    }
    else
    {
        uint _2345 = _2046 + 7u;
        float _2361 = (dot(vec3(cbLight._m0[_2046 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4333 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2364 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2175 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2130;
        _2177 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2132;
        _2179 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2134;
    }
    uint _2182 = _2046 + 8u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _879) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2046].x + _682;
    float _2198 = cbLight._m0[_2046].y + _683;
    float _2199 = cbLight._m0[_2046].z + _684;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2046].xyz));
    float _4349 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _4360 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _2211 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2212 = dot(vec3(_656, _657, _658), vec3(_2204, _2205, _2206));
    float _4371 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2204, _2205, _2206));
    float _4382 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2196 * _2196;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
    float _2233 = 0.959999978542327880859375 - _994;
    float _2235 = 0.959999978542327880859375 - _995;
    float _2236 = 0.959999978542327880859375 - _996;
    float _2243 = 1.0 - _2196;
    float _2254 = (0.5 / (((_2211 * ((_2210 * _2243) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2243) + _2196) * _2210))) * _2210;
    float _4393 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    uint _2267 = _2046 + 9u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _879) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2083].x + _682;
    float _2281 = cbLight._m0[_2083].y + _683;
    float _2282 = cbLight._m0[_2083].z + _684;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2083].xyz));
    float _4404 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2294 = dot(vec3(_656, _657, _658), vec3(_2287, _2288, _2289));
    float _4415 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2287, _2288, _2289));
    float _4426 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2279 * _2279;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2320 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2211 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2320) + _2279) * _2293))) * _2293;
    float _4437 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    float _2342 = (((((_2313 * _2233) + _997) * cbLight._m0[_2267].x) * _2332) * _2069) + (((((_2232 * _2233) + _997) * cbLight._m0[_2182].x) * _2256) * _2079);
    float _2343 = (((((_2313 * _2235) + _998) * cbLight._m0[_2267].y) * _2332) * _2069) + (((((_2232 * _2235) + _998) * cbLight._m0[_2182].y) * _2256) * _2079);
    float _2344 = (((((_2313 * _2236) + _999) * cbLight._m0[_2267].z) * _2332) * _2069) + (((((_2232 * _2236) + _999) * cbLight._m0[_2182].z) * _2256) * _2079);
    float _2406;
    float _2408;
    float _2410;
    if (_2119)
    {
        _2406 = _2342;
        _2408 = _2343;
        _2410 = _2344;
    }
    else
    {
        uint _2412 = _2046 + 2u;
        uint _2416 = _2046 + 10u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _879) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _682;
        float _2433 = cbLight._m0[_2412].y + _683;
        float _2434 = cbLight._m0[_2412].z + _684;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2412].xyz));
        float _4448 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2446 = dot(vec3(_656, _657, _658), vec3(_2439, _2440, _2441));
        float _4459 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4470 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2211 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2472) + _2431) * _2445))) * _2445;
        float _4481 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2406 = (((((_2465 * _2233) + _997) * cbLight._m0[_2416].x) * _2484) * _2485) + _2342;
        _2408 = (((((_2465 * _2235) + _998) * cbLight._m0[_2416].y) * _2484) * _2485) + _2343;
        _2410 = (((((_2465 * _2236) + _999) * cbLight._m0[_2416].z) * _2484) * _2485) + _2344;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2137)
    {
        _2520 = _2406;
        _2522 = _2408;
        _2524 = _2410;
    }
    else
    {
        uint _2531 = _2046 + 3u;
        uint _2535 = _2046 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _879) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _682;
        float _2552 = cbLight._m0[_2531].y + _683;
        float _2553 = cbLight._m0[_2531].z + _684;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2531].xyz));
        float _4497 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2565 = dot(vec3(_656, _657, _658), vec3(_2558, _2559, _2560));
        float _4508 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4519 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
        float _2591 = 1.0 - _2550;
        float _2601 = (0.5 / (((_2211 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2591) + _2550) * _2564))) * _2564;
        float _4530 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2520 = (((((_2584 * _2233) + _997) * cbLight._m0[_2535].x) * _2603) * _2604) + _2406;
        _2522 = (((((_2584 * _2235) + _998) * cbLight._m0[_2535].y) * _2603) * _2604) + _2408;
        _2524 = (((((_2584 * _2236) + _999) * cbLight._m0[_2535].z) * _2603) * _2604) + _2410;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2044.y == 0u)
    {
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2679;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2679;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2679;
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _802) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _801) / _2695)));
        float _2716 = (log2(_2682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3021)
                {
                    frontier_phi_63_pred = _3010;
                    frontier_phi_63_pred_1 = _3009;
                    frontier_phi_63_pred_2 = _3008;
                    frontier_phi_63_pred_3 = _3007;
                    frontier_phi_63_pred_4 = _3006;
                    frontier_phi_63_pred_5 = _3005;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3020;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_3011 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _2680;
                        float _3196 = _3155.y - _2681;
                        float _3197 = _3155.z - _2682;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_824, _827, _830), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4556 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3225 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _2680;
                        float _3230 = (-0.0) - _2681;
                        float _3231 = (-0.0) - _2682;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _1021;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3236 + _3202;
                        float _3258 = _3237 + _3203;
                        float _3259 = _3238 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_824, _827, _830), vec3(_3236, _3237, _3238));
                        float _4572 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3271 = dot(vec3(_824, _827, _830), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4583 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4594 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4605 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3064 = (_3225 * _3174.x) + _3132;
                        _3065 = (_3225 * _3174.y) + _3133;
                        _3066 = (_3225 * _3174.z) + _3134;
                        _3061 = (_3306 * _3191.x) + _3129;
                        _3062 = (_3306 * _3191.y) + _3130;
                        _3063 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_63_pred = _3066;
                    frontier_phi_63_pred_1 = _3065;
                    frontier_phi_63_pred_2 = _3064;
                    frontier_phi_63_pred_3 = _3063;
                    frontier_phi_63_pred_4 = _3062;
                    frontier_phi_63_pred_5 = _3061;
                }
                _2863 = frontier_phi_63_pred;
                _2861 = frontier_phi_63_pred_1;
                _2859 = frontier_phi_63_pred_2;
                _2857 = frontier_phi_63_pred_3;
                _2855 = frontier_phi_63_pred_4;
                _2853 = frontier_phi_63_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2853;
                    _3006 = _2855;
                    _3007 = _2857;
                    _3008 = _2859;
                    _3009 = _2861;
                    _3010 = _2863;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2869) & _2726) == 0u)
        {
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
            float _2999 = _2998 * _2680;
            float _3000 = _2998 * _2681;
            float _3001 = _2998 * _2682;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3112 = _2852;
                float _3113 = _2854;
                float _3114 = _2856;
                float _3115 = _2858;
                float _3116 = _2860;
                float _3117 = _2862;
                uint _3118 = _2869;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3128)
                    {
                        frontier_phi_69_pred = _3117;
                        frontier_phi_69_pred_1 = _3116;
                        frontier_phi_69_pred_2 = _3115;
                        frontier_phi_69_pred_3 = _3114;
                        frontier_phi_69_pred_4 = _3113;
                        frontier_phi_69_pred_5 = _3112;
                    }
                    else
                    {
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        uint _3330 = _3127;
                        uint _3331;
                        vec4 _3356;
                        float _3357;
                        vec4 _3372;
                        vec3 _3384;
                        vec4 _3399;
                        vec4 _3415;
                        float _3462;
                        bool _3463;
                        for (;;)
                        {
                            uint _3341 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3330));
                            _3331 = (_3330 + 4294967295u) & _3330;
                            uint _3343 = _3341 * 40u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3357 = _3356.w;
                            uint _3359 = (_3341 * 40u) + 4u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3341 * 40u) + 8u;
                            _3384 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x));
                            uint _3386 = (_3341 * 40u) + 16u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3402 = (_3341 * 40u) + 20u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3418 = (_3341 * 40u) + 24u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3437 = (_3341 * 40u) + 28u;
                            vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            _3462 = fma(_2682, _3450.z, fma(_2681, _3450.y, _3450.x * _2680)) + _3450.w;
                            _3463 = !((fma(_2682, _3431.z, fma(_2681, _3431.y, _3431.x * _2680)) + _3431.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3463)
                            {
                                float _3490 = _3356.x - _2680;
                                float _3491 = _3356.y - _2681;
                                float _3492 = _3356.z - _2682;
                                float _3493 = dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492));
                                float _3496 = inversesqrt(_3493);
                                float _3497 = _3496 * _3490;
                                float _3498 = _3496 * _3491;
                                float _3499 = _3496 * _3492;
                                float _3503 = 1.0 - (_3493 / (_3357 * _3357));
                                float _4616 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3508 = sqrt(_3493) * _3372.w;
                                float _3510 = 1.39999997615814208984375 / (_3508 + 1.39999997615814208984375);
                                float _3511 = _3510 * _3510;
                                float _3514 = ((1.0 - _3511) * dot(vec3(_3497, _3498, _3499), vec3(_824, _827, _830))) + _3511;
                                float _3517 = _3508 * _3508;
                                float _3521 = (fma(_2682, _3399.z, fma(_2681, _3399.y, _3399.x * _2680)) + _3399.w) / _3462;
                                float _3522 = (fma(_2682, _3415.z, fma(_2681, _3415.y, _3415.x * _2680)) + _3415.w) / _3462;
                                float _3526 = 1.0 - dot(vec2(_3521, _3522), vec2(_3521, _3522));
                                float _4632 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3528 = _3527 * (((isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))) * _3504) / ((_3517 * 0.699999988079071044921875) + 1.0));
                                float _3540 = exp2(log2(1.0 / ((_3517 * 3.5) + 5.0)) * 0.25);
                                float _3541 = 1.0 - _1021;
                                float _3548 = sqrt(1.0 - ((1.0 - (_3541 * _3541)) * (1.0 - (_3540 * _3540))));
                                float _3549 = _3548 * _3548;
                                float _3550 = _3549 * _3549;
                                float _3551 = _3497 - _2999;
                                float _3552 = _3498 - _3000;
                                float _3553 = _3499 - _3001;
                                float _3557 = inversesqrt(dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553)));
                                float _3561 = dot(vec3(_824, _827, _830), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4643 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3564 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3565 = dot(vec3(_824, _827, _830), vec3(_3557 * _3551, _3557 * _3552, _3557 * _3553));
                                float _4654 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3572 = ((_3568 * _3568) * (_3550 + (-1.0))) + 1.0;
                                float _3573 = _3510 * _3549;
                                float _3574 = _3573 * _3573;
                                float _3580 = ((1.0 - _3574) * dot(vec3(_824, _827, _830), vec3(_3497, _3498, _3499))) + _3574;
                                float _4665 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3582 = 1.0 - _3549;
                                float _3592 = (0.5 / (((_3581 * ((_3564 * _3582) + _3549)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3549) * _3564))) * _3581;
                                float _4676 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3602 = (_3527 * _3504) * (((_3550 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3572 * _3572) * ((_3517 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3528 * _3372.z;
                                frontier_phi_75_pred_1 = _3528 * _3372.y;
                                frontier_phi_75_pred_2 = _3528 * _3372.x;
                                frontier_phi_75_pred_3 = _3602 * _3384.z;
                                frontier_phi_75_pred_4 = _3602 * _3384.y;
                                frontier_phi_75_pred_5 = _3602 * _3384.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_75_pred;
                            _3610 = frontier_phi_75_pred_1;
                            _3609 = frontier_phi_75_pred_2;
                            _3608 = frontier_phi_75_pred_3;
                            _3607 = frontier_phi_75_pred_4;
                            _3606 = frontier_phi_75_pred_5;
                            _3314 = _3609 + _3327;
                            _3315 = _3610 + _3328;
                            _3316 = _3611 + _3329;
                            _3311 = _3606 + _3324;
                            _3312 = _3607 + _3325;
                            _3313 = _3608 + _3326;
                            if (_3331 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3331;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3316;
                        frontier_phi_69_pred_1 = _3315;
                        frontier_phi_69_pred_2 = _3314;
                        frontier_phi_69_pred_3 = _3313;
                        frontier_phi_69_pred_4 = _3312;
                        frontier_phi_69_pred_5 = _3311;
                    }
                    _2984 = frontier_phi_69_pred;
                    _2982 = frontier_phi_69_pred_1;
                    _2980 = frontier_phi_69_pred_2;
                    _2978 = frontier_phi_69_pred_3;
                    _2976 = frontier_phi_69_pred_4;
                    _2974 = frontier_phi_69_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2974;
                        _3113 = _2976;
                        _3114 = _2978;
                        _3115 = _2980;
                        _3116 = _2982;
                        _3117 = _2984;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2984;
                frontier_phi_57_58_ladder_1 = _2982;
                frontier_phi_57_58_ladder_2 = _2980;
                frontier_phi_57_58_ladder_3 = _2978;
                frontier_phi_57_58_ladder_4 = _2976;
                frontier_phi_57_58_ladder_5 = _2974;
            }
            else
            {
                frontier_phi_57_58_ladder = _2862;
                frontier_phi_57_58_ladder_1 = _2860;
                frontier_phi_57_58_ladder_2 = _2858;
                frontier_phi_57_58_ladder_3 = _2856;
                frontier_phi_57_58_ladder_4 = _2854;
                frontier_phi_57_58_ladder_5 = _2852;
            }
            _2973 = frontier_phi_57_58_ladder_5;
            _2975 = frontier_phi_57_58_ladder_4;
            _2977 = frontier_phi_57_58_ladder_3;
            _2979 = frontier_phi_57_58_ladder_2;
            _2981 = frontier_phi_57_58_ladder_1;
            _2983 = frontier_phi_57_58_ladder;
        }
        float _2988 = isnan(1.0) ? _1011 : (isnan(_1011) ? 1.0 : min(_1011, 1.0));
        _2738 = (_2988 * _2979) + _2175;
        _2740 = (_2988 * _2981) + _2177;
        _2742 = (_2988 * _2983) + _2179;
        _2744 = ((_2973 * _997) * _2988) + _2520;
        _2746 = ((_2975 * _998) * _2988) + _2522;
        _2748 = ((_2977 * _999) * _2988) + _2524;
    }
    else
    {
        _2738 = _2175;
        _2740 = _2177;
        _2742 = _2179;
        _2744 = _2520;
        _2746 = _2522;
        _2748 = _2524;
    }
    uint _2754 = _904 + uint(cbMatDynParam._m0[0u].w);
    float _2760 = cbInstanceData._m0[_2754].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _698) + cbMatDynParam._m0[7u].x) + (((_738 - (_738 * _664)) + (cbMatDynParam._m0[11u].x * _769)) * cbMatDynParam._m0[9u].x));
    float _2761 = cbInstanceData._m0[_2754].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _698) + cbMatDynParam._m0[7u].y) + (((_740 - (_740 * _664)) + (cbMatDynParam._m0[11u].y * _769)) * cbMatDynParam._m0[9u].y));
    float _2762 = cbInstanceData._m0[_2754].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _698) + cbMatDynParam._m0[7u].z) + (((_742 - (_742 * _664)) + (cbMatDynParam._m0[11u].z * _769)) * cbMatDynParam._m0[9u].z));
    float _4692 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4703 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _4714 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _4725 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2780 = (((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2738 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1011))) + ((_2744 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + _2760;
    float _2782 = (_2761 + ((_2746 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2740 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1011)));
    float _2784 = (_2762 + ((_2748 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2742 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1011)));
    float _2792 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) - _724) * _698) + _724));
    float _2797 = cbInstanceData._m0[_903 + 6u].w * (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)));
    float _2802 = _801 / cbSceneParam._m0[86u].x;
    float _2803 = _802 / cbSceneParam._m0[86u].y;
    vec4 _2817 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2819 = _2817.x;
    float _2820 = _2817.y;
    float _2821 = _2817.z;
    float _2822 = _2817.w;
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _2878 = _2877 / _795;
        float _2889 = _2878 * _291;
        float _2890 = _292 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2892 = _2878 * _293;
        float _2894 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2895 = _2894 + cbSceneParam._m0[79u].w;
        float _2896 = cbSceneParam._m0[79u].w - _2890;
        float _2902 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2892 * _2892));
        float _2905 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2902;
        float _2910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3074;
        if (abs((_2891 - _2894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3074 = ((((_2895 > 0.0) ? exp2(_2910 * _2895) : (2.0 - exp2(_2912 * _2895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2905;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : max(_2895, _2896));
            float _3036 = isnan(_2896) ? _2895 : (isnan(_2895) ? _2896 : min(_2895, _2896));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3074 = ((abs(_2902 / _2891) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2910 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2910 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2912 * _3045) - exp2(_2912 * _3046)) * _3034))) + (_2905 * cbSceneParam._m0[80u].z);
        }
        vec4 _3076 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, 1.0), 0.0);
        float _3085 = exp2((_3074 * (-1.44269502162933349609375)) * (1.0 - _3076.w));
        float _3086 = log2(_3085);
        float _3102 = log2(_2822);
        _2914 = (exp2(_3102 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].x)) * _3076.x) / cbSceneParam._m0[78u].x)) + _2819;
        _2916 = (exp2(_3102 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].y)) * _3076.y) / cbSceneParam._m0[78u].y)) + _2820;
        _2918 = (exp2(_3102 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].z)) * _3076.z) / cbSceneParam._m0[78u].z)) + _2821;
        _2920 = _3085 * _2822;
    }
    else
    {
        _2914 = _2819;
        _2916 = _2820;
        _2918 = _2821;
        _2920 = _2822;
    }
    float _2932 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2933 = _2932 == 3.0;
    float _2934 = log2(_2920);
    float _2938 = exp2(_2934 * cbSceneParam._m0[78u].x);
    float _2939 = exp2(_2934 * cbSceneParam._m0[78u].y);
    float _2940 = exp2(_2934 * cbSceneParam._m0[78u].z);
    float _2941 = _2938 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)));
    float _2942 = _2939 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)));
    float _2943 = _2940 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)));
    float _2952 = (_2932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2952 * (_2933 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2914)));
    SV_Target.y = _2952 * (_2933 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2916)));
    SV_Target.z = _2952 * (_2933 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.w = _2797;
    SV_Target_1.x = ((_2792 * _2760) * _2938) * _2952;
    SV_Target_1.y = ((_2792 * _2761) * _2939) * _2952;
    SV_Target_1.z = ((_2792 * _2762) * _2940) * _2952;
    SV_Target_1.w = _2797;
}


