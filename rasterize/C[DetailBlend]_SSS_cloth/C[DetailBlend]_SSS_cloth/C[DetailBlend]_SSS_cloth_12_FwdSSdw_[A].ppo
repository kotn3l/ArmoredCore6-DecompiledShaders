#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1325;
float _3737;
float _3738;
float _3739;
float _3740;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _256.z;
    float _262 = _256.w;
    float _268 = exp2(log2(_261 * 22.0) * 260.0);
    float _269 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _270 = isnan(1.0) ? _269 : (isnan(_269) ? 1.0 : min(_269, 1.0));
    vec4 _284 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _295 = cbMtdParam._m0[10u].x * _284.x;
    float _296 = cbMtdParam._m0[10u].y * _284.y;
    float _297 = cbMtdParam._m0[10u].z * _284.z;
    vec4 _309 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = exp2(log2(1.0 - _262) * 8.0);
    vec4 _337 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _353 = exp2(log2(_262) * 8.0);
    vec4 _366 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _391 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _413 = (((((_309.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _391.x) - _295) * _270) + _295;
    float _414 = (((((_309.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _391.y) - _296) * _270) + _296;
    float _415 = (((((_309.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _391.z) - _297) * _270) + _297;
    float _422 = (((cbMtdParam._m0[12u].x * _337.x) - _413) * _325) + _413;
    float _423 = (((cbMtdParam._m0[12u].y * _337.y) - _414) * _325) + _414;
    float _424 = (((cbMtdParam._m0[12u].z * _337.z) - _415) * _325) + _415;
    float _431 = (((cbMtdParam._m0[11u].x * _366.x) - _422) * _353) + _422;
    float _432 = (((cbMtdParam._m0[11u].y * _366.y) - _423) * _353) + _423;
    float _433 = (((cbMtdParam._m0[11u].z * _366.z) - _424) * _353) + _424;
    float _434 = _391.w * _309.w;
    float _463 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _270) + cbMtdParam._m0[15u].y;
    float _466 = ((cbMtdParam._m0[14u].y - _463) * _325) + _463;
    float _469 = ((cbMtdParam._m0[15u].x - _466) * _353) + _466;
    vec4 _482 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _491 = cbMtdParam._m0[13u].y + _482.z;
    vec4 _503 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _522 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _550 = ((((_261 * 2.0) * (cbMtdParam._m0[13u].x + _503.z)) - _491) * _270) + _491;
    float _554 = (((_522.z - _550) + cbMtdParam._m0[14u].x) * _325) + _550;
    float _558 = (((_539.z - _554) + cbMtdParam._m0[13u].w) * _353) + _554;
    float _562 = (_256.x * 2.0) + (-1.0);
    float _564 = (_256.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_562, _564), vec2(_562, _564));
    float _3759 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))));
    float _575 = ((_503.x - _484) * _270) + _484;
    float _576 = ((_503.y - _485) * _270) + _485;
    float _581 = ((_522.x - _575) * _325) + _575;
    float _582 = ((_522.y - _576) * _325) + _576;
    float _595 = ((((((_539.x - _581) * _353) + _581) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _562;
    float _596 = ((((((_539.y - _582) * _353) + _582) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _564;
    float _599 = fma(_570, _240, fma(_596, _232 * TANGENT.x, (_218 * _210) * _595));
    float _602 = fma(_570, _241, fma(_596, _232 * TANGENT.y, (_218 * _211) * _595));
    float _605 = fma(_570, _242, fma(_596, _232 * TANGENT.z, (_218 * _212) * _595));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3770 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _613 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _614 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _615 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _616 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _617 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _618 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    vec4 _698 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _700 = _698.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1004 = sqrt(((_684 * _684) + (_685 * _685)) + (_686 * _686));
        float _1010 = (cbMatDynParam._m0[5u].x * _1004) + cbMatDynParam._m0[5u].y;
        float _3836 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1015 = (cbMatDynParam._m0[5u].z * _1004) + cbMatDynParam._m0[5u].w;
        float _3847 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) - _1011)) + _1011) < ((_700 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _711 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _712 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _714 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _716 = _714.w;
    float _734 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _737 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _740 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    vec4 _742 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _744 = _742.x;
    float _756 = (((_742.y - _614) + (_742.w * _614)) * cbMtdParam._m0[3u].x) + _614;
    vec4 _757 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _773 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_744 * _744)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _757.z;
    float _781 = (((cbMatDynParam._m0[15u].x - _618) * cbMatDynParam._m0[15u].w) * _773) + _618;
    float _789 = ((_773 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _756)) + _756;
    uint _813 = uint(roundEven(NORMAL.w)) * 13u;
    uint _814 = _813 + 9u;
    uint _815 = _814 + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * _615) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * _616) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * _617) * cbInstanceData._m0[_815].z;
    float _3858 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    vec4 _827 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _832 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _843 = (((_832.x - _781) + (_832.w * _781)) * cbMtdParam._m0[3u].x) + _781;
    float _856 = (cbMtdParam._m0[3u].x * (((_824 * _716) - _824) + _827.x)) + _824;
    float _857 = (cbMtdParam._m0[3u].x * (((_825 * _716) - _825) + _827.y)) + _825;
    float _858 = (cbMtdParam._m0[3u].x * (((_826 * _716) - _826) + _827.z)) + _826;
    float _872 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_781 * (_615 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_781 * (_616 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_781 * (_617 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _876 = _872 * cbMatDynParam._m0[13u].w;
    float _886 = (_876 * (cbMatDynParam._m0[13u].x - _856)) + _856;
    float _887 = (_876 * (cbMatDynParam._m0[13u].y - _857)) + _857;
    float _888 = (_876 * (cbMatDynParam._m0[13u].z - _858)) + _858;
    float _896 = ((_872 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _843)) + _843;
    float _897 = 1.0 - _896;
    float _898 = _897 * _886;
    float _899 = _897 * _887;
    float _900 = _897 * _888;
    float _904 = (_886 + (-0.039999999105930328369140625)) * _896;
    float _905 = (_887 + (-0.039999999105930328369140625)) * _896;
    float _906 = (_888 + (-0.039999999105930328369140625)) * _896;
    float _907 = _904 + 0.039999999105930328369140625;
    float _908 = _905 + 0.039999999105930328369140625;
    float _909 = _906 + 0.039999999105930328369140625;
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _711, cbSceneParam._m0[86u].y * _712));
    float _921 = _918.x * TEXCOORD_4;
    float _922 = dot(vec3(_610, _611, _612), vec3(_691, _692, _693));
    float _925 = _922 * 2.0;
    float _929 = (_925 * _610) - _691;
    float _930 = (_925 * _611) - _692;
    float _931 = (_925 * _612) - _693;
    float _935 = abs(dot(vec3(_691, _692, _693), vec3(_610, _611, _612)));
    float _3891 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _937 = sqrt(_789);
    float _950 = exp2((_937 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_937 * 3.0));
    float _956 = (1.0 - _950) * ((_937 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _957 = _950 * _937;
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_993, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985));
        float _1053 = fma(_993, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985));
        float _1057 = fma(_993, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985));
        float _1082 = _985 + _610;
        float _1083 = _989 + _611;
        float _1084 = _993 + _612;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_610, _611, _612), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3939 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_610, _611, _612), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3972 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_610, _611, _612), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4005 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_993, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _985));
        float _1372 = fma(_993, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _985));
        float _1376 = fma(_993, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _985));
        float _1399 = _985 + _610;
        float _1400 = _989 + _611;
        float _1401 = _993 + _612;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_610, _611, _612), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4068 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_610, _611, _612), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4101 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_610, _611, _612), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4134 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = _1325;
        _1645 = _1325;
        _1646 = _1325;
        _1647 = _1325;
        _1648 = _1325;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1337)) + _1337;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1338)) + _1338;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1339)) + _1339;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _929 * 0.5;
    float _1706 = _930 * 0.5;
    float _1707 = _931 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1745;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1756;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1747 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1747) ? 0.0 : (isnan(0.0) ? _1747 : max(0.0, _1747))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1760 = (_1756 * cbModelParam._m0[1u].x) + (_1745 * (1.0 - cbModelParam._m0[1u].x));
    float _1770 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1770 : min(cbModelParam._m0[25u].z, _1770));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1818 = fma(_993, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985)) + cbModelParam._m0[13u].w;
        float _1822 = fma(_993, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985)) + cbModelParam._m0[14u].w;
        float _1826 = fma(_993, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985)) + cbModelParam._m0[15u].w;
        float _1829 = fma(_931, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _929));
        float _1832 = fma(_931, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _929));
        float _1835 = fma(_931, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _929));
        float _1863;
        if (_1829 > 0.0)
        {
            _1863 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1863 = frontier_phi_19_17_ladder;
        }
        float _2090;
        if (_1832 > 0.0)
        {
            _2090 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2090 = frontier_phi_28_24_ladder;
        }
        float _2347;
        if (_1835 > 0.0)
        {
            _2347 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2347 = frontier_phi_40_35_ladder;
        }
        float _2349 = isnan(_2090) ? _1863 : (isnan(_1863) ? _2090 : min(_1863, _2090));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1829) + _1818;
        float _2355 = (_2350 * _1832) + _1822;
        float _2356 = (_2350 * _1835) + _1826;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1771);
            frontier_phi_18_40_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1851 = frontier_phi_18_40_ladder_2;
        _1853 = frontier_phi_18_40_ladder_1;
        _1855 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_929, _930, _931), _1771);
        _1851 = _1839.x * cbModelParam._m0[1u].y;
        _1853 = _1839.y * cbModelParam._m0[1u].y;
        _1855 = _1839.z * cbModelParam._m0[1u].y;
    }
    float _1859 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1860 = isnan(_1859) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1859 : min(cbModelParam._m0[25u].w, _1859));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_993, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_993, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_993, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_931, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _929));
        float _1931 = fma(_931, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _929));
        float _1934 = fma(_931, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _929));
        float _2095;
        if (_1928 > 0.0)
        {
            _2095 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2095 = frontier_phi_30_26_ladder;
        }
        float _2374;
        if (_1931 > 0.0)
        {
            _2374 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2374 = frontier_phi_42_37_ladder;
        }
        float _2587;
        if (_1934 > 0.0)
        {
            _2587 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2587 = frontier_phi_51_48_ladder;
        }
        float _2589 = isnan(_2374) ? _2095 : (isnan(_2095) ? _2374 : min(_2095, _2374));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1928) + _1917;
        float _2595 = (_2590 * _1931) + _1921;
        float _2596 = (_2590 * _1934) + _1925;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1860);
            frontier_phi_27_51_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_27_51_ladder_2;
        _1955 = frontier_phi_27_51_ladder_1;
        _1957 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_929, _930, _931), _1860);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1970 = (((_956 * _907) + _957) * _921) * ((cbModelParam._m0[1u].w * (_1953 - _1851)) + _1851);
    float _1972 = (((_956 * _908) + _957) * _921) * ((cbModelParam._m0[1u].w * (_1955 - _1853)) + _1853);
    float _1974 = (((_956 * _909) + _957) * _921) * ((cbModelParam._m0[1u].w * (_1957 - _1855)) + _1855);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    vec4 _1991 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_711, _712));
    float _1993 = _1991.w;
    float _2005 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1993);
    float _2006 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1993);
    float _2007 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1993);
    uvec4 _2011 = floatBitsToUint(cbInstanceData._m0[_813 + 5u]);
    uint _2013 = _2011.x * 14u;
    uint _2014 = _2013 + 13u;
    float _2021 = _921 + (-1.0);
    float _2026 = (cbLight._m0[_2014].x * _2021) + 1.0;
    float _2027 = (cbLight._m0[_2014].y * _2021) + 1.0;
    float _2028 = (cbLight._m0[_2014].z * _2021) + 1.0;
    float _2029 = (cbLight._m0[_2014].w * _2021) + 1.0;
    uint _2030 = _2013 + 5u;
    float _2036 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2040 = _2013 + 4u;
    float _2049 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2053 = _2013 | 1u;
    float _2064 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_610, _611, _612));
    float _2067 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_610, _611, _612));
    float _4270 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _4281 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2072 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2074 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2081 = ((cbLight._m0[_2030].x * _2036) * _2074) + (((cbLight._m0[_2040].x * _2005) * _2049) * _2072);
    float _2082 = ((_2036 * cbLight._m0[_2030].y) * _2074) + (((cbLight._m0[_2040].y * _2006) * _2049) * _2072);
    float _2083 = ((_2036 * cbLight._m0[_2030].z) * _2074) + (((cbLight._m0[_2040].z * _2007) * _2049) * _2072);
    uvec4 _2087 = floatBitsToUint(cbLight._m0[_2013 + 12u]);
    bool _2089 = _2087.x == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2089)
    {
        _2100 = _2081;
        _2102 = _2082;
        _2104 = _2083;
    }
    else
    {
        uint _2108 = _2013 + 6u;
        float _2124 = (dot(vec3(cbLight._m0[_2013 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4292 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2127 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2100 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _2081;
        _2102 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _2082;
        _2104 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _2083;
    }
    bool _2107 = _2087.y == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2107)
    {
        _2145 = _2100;
        _2147 = _2102;
        _2149 = _2104;
    }
    else
    {
        uint _2318 = _2013 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2013 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4308 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2337 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2145 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2100;
        _2147 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2102;
        _2149 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2104;
    }
    uint _2152 = _2013 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _789) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_2013].x + _691;
    float _2168 = cbLight._m0[_2013].y + _692;
    float _2169 = cbLight._m0[_2013].z + _693;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2013].xyz));
    float _4324 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _2181 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2182 = dot(vec3(_610, _611, _612), vec3(_2174, _2175, _2176));
    float _4346 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2174, _2175, _2176));
    float _4357 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2203 = 0.959999978542327880859375 - _904;
    float _2205 = 0.959999978542327880859375 - _905;
    float _2206 = 0.959999978542327880859375 - _906;
    float _2213 = 1.0 - _2166;
    float _2224 = (0.5 / (((_2181 * ((_2180 * _2213) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2213) + _2166) * _2180))) * _2180;
    float _4368 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2240 = _2013 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _789) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2053].x + _691;
    float _2254 = cbLight._m0[_2053].y + _692;
    float _2255 = cbLight._m0[_2053].z + _693;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2053].xyz));
    float _4379 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2267 = dot(vec3(_610, _611, _612), vec3(_2260, _2261, _2262));
    float _4390 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2260, _2261, _2262));
    float _4401 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
    float _2293 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2181 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2293) + _2252) * _2266))) * _2266;
    float _4412 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2315 = (((((_2286 * _2203) + _907) * cbLight._m0[_2240].x) * _2305) * _2036) + ((((cbLight._m0[_2152].x * _2005) * ((_2202 * _2203) + _907)) * _2226) * _2049);
    float _2316 = (((((_2286 * _2205) + _908) * cbLight._m0[_2240].y) * _2305) * _2036) + ((((cbLight._m0[_2152].y * _2006) * ((_2202 * _2205) + _908)) * _2226) * _2049);
    float _2317 = (((((_2286 * _2206) + _909) * cbLight._m0[_2240].z) * _2305) * _2036) + ((((cbLight._m0[_2152].z * _2007) * ((_2202 * _2206) + _909)) * _2226) * _2049);
    float _2379;
    float _2381;
    float _2383;
    if (_2089)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2013 + 2u;
        uint _2389 = _2013 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _789) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _691;
        float _2406 = cbLight._m0[_2385].y + _692;
        float _2407 = cbLight._m0[_2385].z + _693;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2385].xyz));
        float _4423 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2419 = dot(vec3(_610, _611, _612), vec3(_2412, _2413, _2414));
        float _4434 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4445 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2181 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2445) + _2404) * _2418))) * _2418;
        float _4456 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2379 = (((((_2438 * _2203) + _907) * cbLight._m0[_2389].x) * _2457) * _2458) + _2315;
        _2381 = (((((_2438 * _2205) + _908) * cbLight._m0[_2389].y) * _2457) * _2458) + _2316;
        _2383 = (((((_2438 * _2206) + _909) * cbLight._m0[_2389].z) * _2457) * _2458) + _2317;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2107)
    {
        _2493 = _2379;
        _2495 = _2381;
        _2497 = _2383;
    }
    else
    {
        uint _2504 = _2013 + 3u;
        uint _2508 = _2013 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _789) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _691;
        float _2525 = cbLight._m0[_2504].y + _692;
        float _2526 = cbLight._m0[_2504].z + _693;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2504].xyz));
        float _4472 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2538 = dot(vec3(_610, _611, _612), vec3(_2531, _2532, _2533));
        float _4483 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4494 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2181 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2564) + _2523) * _2537))) * _2537;
        float _4505 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2493 = (((((_2557 * _2203) + _907) * cbLight._m0[_2508].x) * _2576) * _2577) + _2379;
        _2495 = (((((_2557 * _2205) + _908) * cbLight._m0[_2508].y) * _2576) * _2577) + _2381;
        _2497 = (((((_2557 * _2206) + _909) * cbLight._m0[_2508].z) * _2576) * _2577) + _2383;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2011.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _712) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _711) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
        }
        else
        {
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            uint _2962 = 0u;
            uint _2971;
            bool _2972;
            for (;;)
            {
                _2971 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                _2972 = _2971 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2972)
                {
                    frontier_phi_68_pred = _2958;
                    frontier_phi_68_pred_1 = _2961;
                    frontier_phi_68_pred_2 = _2960;
                    frontier_phi_68_pred_3 = _2959;
                    frontier_phi_68_pred_4 = _2957;
                    frontier_phi_68_pred_5 = _2956;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2971;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2962 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2653;
                        float _3168 = _3127.y - _2654;
                        float _3169 = _3127.z - _2655;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_734, _737, _740), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4531 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2653;
                        float _3203 = (-0.0) - _2654;
                        float _3204 = (-0.0) - _2655;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _937;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_734, _737, _740), vec3(_3209, _3210, _3211));
                        float _4547 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3244 = dot(vec3(_734, _737, _740), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4558 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4569 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4580 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3031 = (_3198 * _3146.x) + _3104;
                        _3032 = (_3198 * _3146.y) + _3105;
                        _3033 = (_3198 * _3146.z) + _3106;
                        _3028 = (_3279 * _3163.x) + _3101;
                        _3029 = (_3279 * _3163.y) + _3102;
                        _3030 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_68_pred = _3030;
                    frontier_phi_68_pred_1 = _3033;
                    frontier_phi_68_pred_2 = _3032;
                    frontier_phi_68_pred_3 = _3031;
                    frontier_phi_68_pred_4 = _3029;
                    frontier_phi_68_pred_5 = _3028;
                }
                _2809 = frontier_phi_68_pred;
                _2815 = frontier_phi_68_pred_1;
                _2813 = frontier_phi_68_pred_2;
                _2811 = frontier_phi_68_pred_3;
                _2807 = frontier_phi_68_pred_4;
                _2805 = frontier_phi_68_pred_5;
                uint _2963 = _2962 + 1u;
                if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2956 = _2805;
                    _2957 = _2807;
                    _2958 = _2809;
                    _2959 = _2811;
                    _2960 = _2813;
                    _2961 = _2815;
                    _2962 = _2963;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
        }
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.z;
        uint _2821 = (_2819 >> 8u) & 15u;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((4294967295u << _2821) & _2699) == 0u)
        {
            _2924 = _2804;
            _2926 = _2806;
            _2928 = _2808;
            _2930 = _2810;
            _2932 = _2812;
            _2934 = _2814;
        }
        else
        {
            float _2949 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2950 = _2949 * _2653;
            float _2951 = _2949 * _2654;
            float _2952 = _2949 * _2655;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2821 < ((_2819 >> 12u) & 15u))
            {
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _3084 = _2804;
                float _3085 = _2806;
                float _3086 = _2808;
                float _3087 = _2810;
                float _3088 = _2812;
                float _3089 = _2814;
                uint _3090 = _2821;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3100)
                    {
                        frontier_phi_79_pred = _3089;
                        frontier_phi_79_pred_1 = _3088;
                        frontier_phi_79_pred_2 = _3087;
                        frontier_phi_79_pred_3 = _3086;
                        frontier_phi_79_pred_4 = _3085;
                        frontier_phi_79_pred_5 = _3084;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        uint _3312 = _3099;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3397;
                        float _3444;
                        bool _3445;
                        for (;;)
                        {
                            uint _3323 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3384 = (_3323 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3400 = (_3323 * 40u) + 24u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3419 = (_3323 * 40u) + 28u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3444 = fma(_2655, _3432.z, fma(_2654, _3432.y, _3432.x * _2653)) + _3432.w;
                            _3445 = !((fma(_2655, _3413.z, fma(_2654, _3413.y, _3413.x * _2653)) + _3413.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3445)
                            {
                                float _3472 = _3338.x - _2653;
                                float _3473 = _3338.y - _2654;
                                float _3474 = _3338.z - _2655;
                                float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                                float _3478 = inversesqrt(_3475);
                                float _3479 = _3478 * _3472;
                                float _3480 = _3478 * _3473;
                                float _3481 = _3478 * _3474;
                                float _3485 = 1.0 - (_3475 / (_3339 * _3339));
                                float _4591 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3490 = sqrt(_3475) * _3354.w;
                                float _3492 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                                float _3493 = _3492 * _3492;
                                float _3496 = ((1.0 - _3493) * dot(vec3(_3479, _3480, _3481), vec3(_734, _737, _740))) + _3493;
                                float _3499 = _3490 * _3490;
                                float _3503 = (fma(_2655, _3381.z, fma(_2654, _3381.y, _3381.x * _2653)) + _3381.w) / _3444;
                                float _3504 = (fma(_2655, _3397.z, fma(_2654, _3397.y, _3397.x * _2653)) + _3397.w) / _3444;
                                float _3508 = 1.0 - dot(vec2(_3503, _3504), vec2(_3503, _3504));
                                float _4607 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3510 = _3509 * (((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3486) / ((_3499 * 0.699999988079071044921875) + 1.0));
                                float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _937;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3479 - _2950;
                                float _3534 = _3480 - _2951;
                                float _3535 = _3481 - _2952;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2950, (-0.0) - _2951, (-0.0) - _2952));
                                float _4618 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3547 = dot(vec3(_734, _737, _740), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4629 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3492 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_734, _737, _740), vec3(_3479, _3480, _3481))) + _3556;
                                float _4640 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4651 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3509 * _3486) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3510 * _3354.z;
                                frontier_phi_85_pred_1 = _3510 * _3354.y;
                                frontier_phi_85_pred_2 = _3510 * _3354.x;
                                frontier_phi_85_pred_3 = _3584 * _3366.z;
                                frontier_phi_85_pred_4 = _3584 * _3366.y;
                                frontier_phi_85_pred_5 = _3584 * _3366.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3593 = frontier_phi_85_pred;
                            _3592 = frontier_phi_85_pred_1;
                            _3591 = frontier_phi_85_pred_2;
                            _3590 = frontier_phi_85_pred_3;
                            _3589 = frontier_phi_85_pred_4;
                            _3588 = frontier_phi_85_pred_5;
                            _3296 = _3591 + _3309;
                            _3297 = _3592 + _3310;
                            _3298 = _3593 + _3311;
                            _3293 = _3588 + _3306;
                            _3294 = _3589 + _3307;
                            _3295 = _3590 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3298;
                        frontier_phi_79_pred_1 = _3297;
                        frontier_phi_79_pred_2 = _3296;
                        frontier_phi_79_pred_3 = _3295;
                        frontier_phi_79_pred_4 = _3294;
                        frontier_phi_79_pred_5 = _3293;
                    }
                    _2935 = frontier_phi_79_pred;
                    _2933 = frontier_phi_79_pred_1;
                    _2931 = frontier_phi_79_pred_2;
                    _2929 = frontier_phi_79_pred_3;
                    _2927 = frontier_phi_79_pred_4;
                    _2925 = frontier_phi_79_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2925;
                        _3085 = _2927;
                        _3086 = _2929;
                        _3087 = _2931;
                        _3088 = _2933;
                        _3089 = _2935;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2931;
                frontier_phi_60_61_ladder_1 = _2935;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2929;
                frontier_phi_60_61_ladder_4 = _2927;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_60_61_ladder = _2810;
                frontier_phi_60_61_ladder_1 = _2814;
                frontier_phi_60_61_ladder_2 = _2812;
                frontier_phi_60_61_ladder_3 = _2808;
                frontier_phi_60_61_ladder_4 = _2806;
                frontier_phi_60_61_ladder_5 = _2804;
            }
            _2924 = frontier_phi_60_61_ladder_5;
            _2926 = frontier_phi_60_61_ladder_4;
            _2928 = frontier_phi_60_61_ladder_3;
            _2930 = frontier_phi_60_61_ladder;
            _2932 = frontier_phi_60_61_ladder_2;
            _2934 = frontier_phi_60_61_ladder_1;
        }
        float _2939 = isnan(1.0) ? _921 : (isnan(_921) ? 1.0 : min(_921, 1.0));
        _2711 = (_2939 * _2930) + _2145;
        _2713 = (_2939 * _2932) + _2147;
        _2715 = (_2939 * _2934) + _2149;
        _2717 = ((_2924 * _907) * _2939) + _2493;
        _2719 = ((_2926 * _908) * _2939) + _2495;
        _2721 = ((_2928 * _909) * _2939) + _2497;
    }
    else
    {
        _2711 = _2145;
        _2713 = _2147;
        _2715 = _2149;
        _2717 = _2493;
        _2719 = _2495;
        _2721 = _2497;
    }
    float _4667 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4678 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4689 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4700 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2739 = ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2711 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _921))) + ((_2717 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2713 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _921))) + ((_2719 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _2741 = ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2715 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _921))) + ((_2721 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1760)) * cbPerFrame._m0[3u].x);
    float _2742 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2744 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2749 = cbInstanceData._m0[_813 + 6u].w * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)));
    float _2754 = _711 / cbSceneParam._m0[86u].x;
    float _2755 = _712 / cbSceneParam._m0[86u].y;
    vec4 _2769 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2771 = _2769.x;
    float _2772 = _2769.y;
    float _2773 = _2769.z;
    float _2774 = _2769.w;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2829 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2830 = _2829 / _634;
        float _2841 = _2830 * _684;
        float _2842 = _685 * _2830;
        float _2843 = (-0.0) - _2842;
        float _2844 = _2830 * _686;
        float _2846 = (cbSceneParam._m0[77u].w * _2843) / _2829;
        float _2847 = _2846 + cbSceneParam._m0[79u].w;
        float _2848 = cbSceneParam._m0[79u].w - _2842;
        float _2854 = sqrt(((_2841 * _2841) + (_2842 * _2842)) + (_2844 * _2844));
        float _2857 = (1.0 - (cbSceneParam._m0[77u].w / _2829)) * _2854;
        float _2862 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2864 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2843 - _2846) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2847 > 0.0) ? exp2(_2862 * _2847) : (2.0 - exp2(_2864 * _2847))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2857;
        }
        else
        {
            float _2985 = 1.0 / cbSceneParam._m0[80u].x;
            float _2986 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : max(_2847, _2848));
            float _2987 = isnan(_2848) ? _2847 : (isnan(_2847) ? _2848 : min(_2847, _2848));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            float _2997 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : min(_2987, 0.0));
            _3041 = ((abs(_2854 / _2843) * cbSceneParam._m0[80u].y) * ((((_2996 - _2997) * 2.0) - ((exp2(_2862 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0)))) - exp2(_2862 * (isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))))) * _2985)) - ((exp2(_2864 * _2996) - exp2(_2864 * _2997)) * _2985))) + (_2857 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2754, _2755, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2774);
        _2866 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2771;
        _2868 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2772;
        _2870 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2773;
        _2872 = _3052 * _2774;
    }
    else
    {
        _2866 = _2771;
        _2868 = _2772;
        _2870 = _2773;
        _2872 = _2774;
    }
    bool _3079;
    vec4 _2882;
    vec4 _2904;
    float _2906;
    float _2910;
    float _2911;
    float _2912;
    float _2913;
    bool _2923;
    for (;;)
    {
        _2882 = cbMatDynParam._m0[0u];
        float _2884 = roundEven(_2882.y);
        bool _2885 = _2884 == 3.0;
        float _2886 = log2(_2872);
        float _2893 = exp2(_2886 * cbSceneParam._m0[78u].x) * _2742;
        float _2894 = exp2(_2886 * cbSceneParam._m0[78u].y) * _2743;
        float _2895 = exp2(_2886 * cbSceneParam._m0[78u].z) * _2744;
        float _2902 = _700 + (-0.5);
        _2904 = cbMtdParam._m0[1u];
        _2906 = _2904.y * _2902;
        float _2909 = (_2884 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2910 = _2909 * (_2885 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2866)));
        _2911 = _2909 * (_2885 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2868)));
        _2912 = _2909 * (_2885 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2870)));
        _2913 = _2902 * 0.999000012874603271484375;
        _2923 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2923)
        {
            if ((cbInstanceData._m0[_813 + 7u].x + _2913) < 0.5)
            {
                _3079 = true;
                break;
            }
        }
        uint _3020 = _814 + uint(_2882.w);
        if ((cbInstanceData._m0[_3020].w < 1.0) && ((cbInstanceData._m0[_3020].w + _2913) < 0.5))
        {
            _3079 = true;
            break;
        }
        if ((_2906 + _434) < _2904.x)
        {
            _3079 = true;
            break;
        }
        _3079 = false;
        break;
    }
    float _3284;
    if (_3079)
    {
        discard_state = true;
        _3284 = 0.0;
    }
    else
    {
        _3284 = _2749;
    }
    SV_Target.x = _2910;
    SV_Target.y = _2911;
    SV_Target.z = _2912;
    SV_Target.w = _3284;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2749;
    discard_exit();
}


