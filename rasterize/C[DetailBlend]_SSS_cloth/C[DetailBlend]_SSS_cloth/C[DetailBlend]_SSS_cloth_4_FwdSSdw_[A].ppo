#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1257;
float _3669;
float _3670;
float _3671;
float _3672;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _252.z;
    float _264 = exp2(log2(_257 * 22.0) * 260.0);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    vec4 _280 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _291 = cbMtdParam._m0[10u].x * _280.x;
    float _292 = cbMtdParam._m0[10u].y * _280.y;
    float _293 = cbMtdParam._m0[10u].z * _280.z;
    vec4 _305 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = exp2(log2(1.0 - _252.w) * 8.0);
    vec4 _345 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _370 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _378 = (((((cbMtdParam._m0[9u].x * _305.x) - _291) * _266) + _291) * 4.55000019073486328125) * _370.x;
    float _380 = (((((cbMtdParam._m0[9u].y * _305.y) - _292) * _266) + _292) * 4.55000019073486328125) * _370.y;
    float _382 = (((((cbMtdParam._m0[9u].z * _305.z) - _293) * _266) + _293) * 4.55000019073486328125) * _370.z;
    float _389 = (((cbMtdParam._m0[12u].x * _345.x) - _378) * _333) + _378;
    float _390 = (((cbMtdParam._m0[12u].y * _345.y) - _380) * _333) + _380;
    float _391 = (((cbMtdParam._m0[12u].z * _345.z) - _382) * _333) + _382;
    float _392 = _370.w * _305.w;
    float _420 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _266) + cbMtdParam._m0[15u].y;
    float _423 = ((cbMtdParam._m0[14u].y - _420) * _333) + _420;
    vec4 _436 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _445 = cbMtdParam._m0[13u].y + _436.z;
    vec4 _457 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _479 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _492 = (((_266 * (_257 + (-0.5))) + 0.5) * 2.0) * ((((_457.z - _445) + cbMtdParam._m0[13u].x) * _266) + _445);
    float _496 = (((_479.z - _492) + cbMtdParam._m0[14u].x) * _333) + _492;
    float _500 = (_252.x * 2.0) + (-1.0);
    float _502 = (_252.y * 2.0) + (-1.0);
    float _503 = dot(vec2(_500, _502), vec2(_500, _502));
    float _3691 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))));
    float _513 = ((_457.x - _438) * _266) + _438;
    float _514 = ((_457.y - _439) * _266) + _439;
    float _527 = ((((((_479.x - _513) * _333) + _513) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _500;
    float _528 = ((((((_479.y - _514) * _333) + _514) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _502;
    float _531 = fma(_508, _236, fma(_528, _228 * TANGENT.x, (_214 * _206) * _527));
    float _534 = fma(_508, _237, fma(_528, _228 * TANGENT.y, (_214 * _207) * _527));
    float _537 = fma(_508, _238, fma(_528, _228 * TANGENT.z, (_214 * _208) * _527));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    float _542 = _541 * _531;
    float _543 = _541 * _534;
    float _544 = _541 * _537;
    float _3702 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _545 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _546 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _547 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _548 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _549 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _550 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _566 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _617 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _607);
    float _618 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _607);
    float _619 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _607);
    float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
    float _624 = _617 * _623;
    float _625 = _618 * _623;
    float _626 = _619 * _623;
    vec4 _631 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _633 = _631.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _938 = sqrt(((_617 * _617) + (_618 * _618)) + (_619 * _619));
        float _944 = (cbMatDynParam._m0[5u].x * _938) + cbMatDynParam._m0[5u].y;
        float _3768 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _949 = (cbMatDynParam._m0[5u].z * _938) + cbMatDynParam._m0[5u].w;
        float _3779 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) - _945)) + _945) < ((_633 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _647 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _649 = _647.w;
    float _668 = fma(_544, cbSceneParam._m0[5u].z, fma(_543, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _542));
    float _671 = fma(_544, cbSceneParam._m0[6u].z, fma(_543, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _542));
    float _674 = fma(_544, cbSceneParam._m0[7u].z, fma(_543, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _542));
    vec4 _676 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _678 = _676.x;
    float _690 = (((_676.y - _546) + (_676.w * _546)) * cbMtdParam._m0[3u].x) + _546;
    vec4 _691 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _707 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_678 * _678)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _691.z;
    float _715 = (((cbMatDynParam._m0[15u].x - _550) * cbMatDynParam._m0[15u].w) * _707) + _550;
    float _723 = ((_707 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _690)) + _690;
    uint _747 = uint(roundEven(NORMAL.w)) * 13u;
    uint _748 = _747 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * _547) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * _548) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * _549) * cbInstanceData._m0[_749].z;
    float _3790 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    vec4 _761 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _766 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _777 = (((_766.x - _715) + (_766.w * _715)) * cbMtdParam._m0[3u].x) + _715;
    float _790 = (cbMtdParam._m0[3u].x * (((_758 * _649) - _758) + _761.x)) + _758;
    float _791 = (cbMtdParam._m0[3u].x * (((_759 * _649) - _759) + _761.y)) + _759;
    float _792 = (cbMtdParam._m0[3u].x * (((_760 * _649) - _760) + _761.z)) + _760;
    float _806 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_715 * (_547 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_715 * (_548 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_715 * (_549 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _810 = _806 * cbMatDynParam._m0[13u].w;
    float _820 = (_810 * (cbMatDynParam._m0[13u].x - _790)) + _790;
    float _821 = (_810 * (cbMatDynParam._m0[13u].y - _791)) + _791;
    float _822 = (_810 * (cbMatDynParam._m0[13u].z - _792)) + _792;
    float _830 = ((_806 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _777)) + _777;
    float _831 = 1.0 - _830;
    float _832 = _831 * _820;
    float _833 = _831 * _821;
    float _834 = _831 * _822;
    float _838 = (_820 + (-0.039999999105930328369140625)) * _830;
    float _839 = (_821 + (-0.039999999105930328369140625)) * _830;
    float _840 = (_822 + (-0.039999999105930328369140625)) * _830;
    float _841 = _838 + 0.039999999105930328369140625;
    float _842 = _839 + 0.039999999105930328369140625;
    float _843 = _840 + 0.039999999105930328369140625;
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _855 = _852.x * TEXCOORD_4;
    float _856 = dot(vec3(_542, _543, _544), vec3(_624, _625, _626));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _542) - _624;
    float _864 = (_859 * _543) - _625;
    float _865 = (_859 * _544) - _626;
    float _869 = abs(dot(vec3(_624, _625, _626), vec3(_542, _543, _544)));
    float _3823 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_723);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _890 = (1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _891 = _884 * _871;
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _987 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _991 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _1014 = _919 + _542;
        float _1015 = _923 + _543;
        float _1016 = _927 + _544;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_542, _543, _544), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3871 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_542, _543, _544), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3904 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_542, _543, _544), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3937 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1304 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1308 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1331 = _919 + _542;
        float _1332 = _923 + _543;
        float _1333 = _927 + _544;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_542, _543, _544), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4000 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_542, _543, _544), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4033 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_542, _543, _544), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4066 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = _1257;
        _1579 = _1257;
        _1580 = _1257;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1269)) + _1269;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1271)) + _1271;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _863 * 0.5;
    float _1638 = _864 * 0.5;
    float _1639 = _865 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _723);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1764 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1767 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1795 = frontier_phi_19_17_ladder;
        }
        float _2022;
        if (_1764 > 0.0)
        {
            _2022 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2022 = frontier_phi_28_24_ladder;
        }
        float _2279;
        if (_1767 > 0.0)
        {
            _2279 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2279 = frontier_phi_40_35_ladder;
        }
        float _2281 = isnan(_2022) ? _1795 : (isnan(_1795) ? _2022 : min(_1795, _2022));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1761) + _1750;
        float _2287 = (_2282 * _1764) + _1754;
        float _2288 = (_2282 * _1767) + _1758;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_18_40_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_18_40_ladder_2;
        _1785 = frontier_phi_18_40_ladder_1;
        _1787 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _723);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1885;
    float _1887;
    float _1889;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1849 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1853 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1857 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1860 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1863 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1866 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _2027;
        if (_1860 > 0.0)
        {
            _2027 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2027 = frontier_phi_30_26_ladder;
        }
        float _2306;
        if (_1863 > 0.0)
        {
            _2306 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2306 = frontier_phi_42_37_ladder;
        }
        float _2519;
        if (_1866 > 0.0)
        {
            _2519 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2519 = frontier_phi_51_48_ladder;
        }
        float _2521 = isnan(_2306) ? _2027 : (isnan(_2027) ? _2306 : min(_2027, _2306));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1860) + _1849;
        float _2527 = (_2522 * _1863) + _1853;
        float _2528 = (_2522 * _1866) + _1857;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_27_51_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1885 = frontier_phi_27_51_ladder_2;
        _1887 = frontier_phi_27_51_ladder_1;
        _1889 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1792);
        _1885 = _1869.x * cbModelParam._m0[1u].z;
        _1887 = _1869.y * cbModelParam._m0[1u].z;
        _1889 = _1869.z * cbModelParam._m0[1u].z;
    }
    float _1902 = (((_890 * _841) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1885 - _1783)) + _1783);
    float _1904 = (((_890 * _842) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1887 - _1785)) + _1785);
    float _1906 = (((_890 * _843) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1889 - _1787)) + _1787);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1902 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1902 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1902 * cbSceneParam._m0[91u].x));
    vec4 _1923 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_644, _645));
    float _1925 = _1923.w;
    float _1937 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1925);
    float _1938 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1925);
    float _1939 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1925);
    uvec4 _1943 = floatBitsToUint(cbInstanceData._m0[_747 + 5u]);
    uint _1945 = _1943.x * 14u;
    uint _1946 = _1945 + 13u;
    float _1953 = _855 + (-1.0);
    float _1958 = (cbLight._m0[_1946].x * _1953) + 1.0;
    float _1959 = (cbLight._m0[_1946].y * _1953) + 1.0;
    float _1960 = (cbLight._m0[_1946].z * _1953) + 1.0;
    float _1961 = (cbLight._m0[_1946].w * _1953) + 1.0;
    uint _1962 = _1945 + 5u;
    float _1968 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1972 = _1945 + 4u;
    float _1981 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1985 = _1945 | 1u;
    float _1996 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_542, _543, _544));
    float _1999 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_542, _543, _544));
    float _4202 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _4213 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2004 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _2006 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2013 = ((cbLight._m0[_1962].x * _1968) * _2006) + (((cbLight._m0[_1972].x * _1937) * _1981) * _2004);
    float _2014 = ((_1968 * cbLight._m0[_1962].y) * _2006) + (((cbLight._m0[_1972].y * _1938) * _1981) * _2004);
    float _2015 = ((_1968 * cbLight._m0[_1962].z) * _2006) + (((cbLight._m0[_1972].z * _1939) * _1981) * _2004);
    uvec4 _2019 = floatBitsToUint(cbLight._m0[_1945 + 12u]);
    bool _2021 = _2019.x == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_2021)
    {
        _2032 = _2013;
        _2034 = _2014;
        _2036 = _2015;
    }
    else
    {
        uint _2040 = _1945 + 6u;
        float _2056 = (dot(vec3(cbLight._m0[_1945 + 2u].xyz), vec3(_542, _543, _544)) * 0.5) + 0.5;
        float _2057 = _2056 * _2056;
        float _4224 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2058 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2059 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2032 = (((cbLight._m0[_2040].x * 0.3183098733425140380859375) * _2058) * _2059) + _2013;
        _2034 = (((cbLight._m0[_2040].y * 0.3183098733425140380859375) * _2058) * _2059) + _2014;
        _2036 = (((cbLight._m0[_2040].z * 0.3183098733425140380859375) * _2058) * _2059) + _2015;
    }
    bool _2039 = _2019.y == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2039)
    {
        _2077 = _2032;
        _2079 = _2034;
        _2081 = _2036;
    }
    else
    {
        uint _2250 = _1945 + 7u;
        float _2266 = (dot(vec3(cbLight._m0[_1945 + 3u].xyz), vec3(_542, _543, _544)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4240 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2269 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2077 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2032;
        _2079 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2034;
        _2081 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2036;
    }
    uint _2084 = _1945 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _723) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1945].x + _624;
    float _2100 = cbLight._m0[_1945].y + _625;
    float _2101 = cbLight._m0[_1945].z + _626;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_1945].xyz));
    float _4256 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2113 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2114 = dot(vec3(_542, _543, _544), vec3(_2106, _2107, _2108));
    float _4278 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2106, _2107, _2108));
    float _4289 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2134 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2135 = 0.959999978542327880859375 - _838;
    float _2137 = 0.959999978542327880859375 - _839;
    float _2138 = 0.959999978542327880859375 - _840;
    float _2145 = 1.0 - _2098;
    float _2156 = (0.5 / (((_2113 * ((_2112 * _2145) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2145) + _2098) * _2112))) * _2112;
    float _4300 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    uint _2172 = _1945 + 9u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _723) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1985].x + _624;
    float _2186 = cbLight._m0[_1985].y + _625;
    float _2187 = cbLight._m0[_1985].z + _626;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_1985].xyz));
    float _4311 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2199 = dot(vec3(_542, _543, _544), vec3(_2192, _2193, _2194));
    float _4322 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2192, _2193, _2194));
    float _4333 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2184 * _2184;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2218 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
    float _2225 = 1.0 - _2184;
    float _2235 = (0.5 / (((_2113 * ((_2198 * _2225) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2225) + _2184) * _2198))) * _2198;
    float _4344 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    float _2247 = (((((_2218 * _2135) + _841) * cbLight._m0[_2172].x) * _2237) * _1968) + ((((cbLight._m0[_2084].x * _1937) * ((_2134 * _2135) + _841)) * _2158) * _1981);
    float _2248 = (((((_2218 * _2137) + _842) * cbLight._m0[_2172].y) * _2237) * _1968) + ((((cbLight._m0[_2084].y * _1938) * ((_2134 * _2137) + _842)) * _2158) * _1981);
    float _2249 = (((((_2218 * _2138) + _843) * cbLight._m0[_2172].z) * _2237) * _1968) + ((((cbLight._m0[_2084].z * _1939) * ((_2134 * _2138) + _843)) * _2158) * _1981);
    float _2311;
    float _2313;
    float _2315;
    if (_2021)
    {
        _2311 = _2247;
        _2313 = _2248;
        _2315 = _2249;
    }
    else
    {
        uint _2317 = _1945 + 2u;
        uint _2321 = _1945 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _723) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _624;
        float _2338 = cbLight._m0[_2317].y + _625;
        float _2339 = cbLight._m0[_2317].z + _626;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_2317].xyz));
        float _4355 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2351 = dot(vec3(_542, _543, _544), vec3(_2344, _2345, _2346));
        float _4366 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4377 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2370 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
        float _2377 = 1.0 - _2336;
        float _2387 = (0.5 / (((_2113 * ((_2350 * _2377) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2377) + _2336) * _2350))) * _2350;
        float _4388 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2311 = (((((_2370 * _2135) + _841) * cbLight._m0[_2321].x) * _2389) * _2390) + _2247;
        _2313 = (((((_2370 * _2137) + _842) * cbLight._m0[_2321].y) * _2389) * _2390) + _2248;
        _2315 = (((((_2370 * _2138) + _843) * cbLight._m0[_2321].z) * _2389) * _2390) + _2249;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2039)
    {
        _2425 = _2311;
        _2427 = _2313;
        _2429 = _2315;
    }
    else
    {
        uint _2436 = _1945 + 3u;
        uint _2440 = _1945 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _723) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _624;
        float _2457 = cbLight._m0[_2436].y + _625;
        float _2458 = cbLight._m0[_2436].z + _626;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_542, _543, _544), vec3(cbLight._m0[_2436].xyz));
        float _4404 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2470 = dot(vec3(_542, _543, _544), vec3(_2463, _2464, _2465));
        float _4415 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4426 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2113 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2496) + _2455) * _2469))) * _2469;
        float _4437 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2425 = (((((_2489 * _2135) + _841) * cbLight._m0[_2440].x) * _2508) * _2509) + _2311;
        _2427 = (((((_2489 * _2137) + _842) * cbLight._m0[_2440].y) * _2508) * _2509) + _2313;
        _2429 = (((((_2489 * _2138) + _843) * cbLight._m0[_2440].z) * _2508) * _2509) + _2315;
    }
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_1943.y == 0u)
    {
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2584;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2584;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2584;
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.x;
        uint _2611 = uint((float(_2599.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2600))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2600)));
        float _2621 = (log2(_2587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2622 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        uint _2625 = uint(isnan(14.0) ? _2622 : (isnan(_2622) ? 14.0 : min(_2622, 14.0)));
        uvec4 _2630 = texelFetch(g_lightClusterGridBuffer, int(((_2625 << 2u) + (_2611 << 6u)) >> 2u));
        uint _2631 = _2630.x;
        uint _2632 = _2599.z;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((((1u << ((_2632 >> 4u) & 15u)) + 4294967295u) & _2631) == 0u) || ((_2632 & 240u) == 0u))
        {
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
        }
        else
        {
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2904)
                {
                    frontier_phi_68_pred = _2890;
                    frontier_phi_68_pred_1 = _2893;
                    frontier_phi_68_pred_2 = _2892;
                    frontier_phi_68_pred_3 = _2891;
                    frontier_phi_68_pred_4 = _2889;
                    frontier_phi_68_pred_5 = _2888;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2903;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2894 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _2585;
                        float _3100 = _3059.y - _2586;
                        float _3101 = _3059.z - _2587;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_668, _671, _674), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4463 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _2585;
                        float _3135 = (-0.0) - _2586;
                        float _3136 = (-0.0) - _2587;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3151 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _871;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_668, _671, _674), vec3(_3141, _3142, _3143));
                        float _4479 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3176 = dot(vec3(_668, _671, _674), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4490 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3119 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3109) + _3185;
                        float _4501 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4512 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3183 * _3183) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2963 = (_3130 * _3078.x) + _3036;
                        _2964 = (_3130 * _3078.y) + _3037;
                        _2965 = (_3130 * _3078.z) + _3038;
                        _2960 = (_3211 * _3095.x) + _3033;
                        _2961 = (_3211 * _3095.y) + _3034;
                        _2962 = (_3211 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_68_pred = _2962;
                    frontier_phi_68_pred_1 = _2965;
                    frontier_phi_68_pred_2 = _2964;
                    frontier_phi_68_pred_3 = _2963;
                    frontier_phi_68_pred_4 = _2961;
                    frontier_phi_68_pred_5 = _2960;
                }
                _2741 = frontier_phi_68_pred;
                _2747 = frontier_phi_68_pred_1;
                _2745 = frontier_phi_68_pred_2;
                _2743 = frontier_phi_68_pred_3;
                _2739 = frontier_phi_68_pred_4;
                _2737 = frontier_phi_68_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2737;
                    _2889 = _2739;
                    _2890 = _2741;
                    _2891 = _2743;
                    _2892 = _2745;
                    _2893 = _2747;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
        }
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.z;
        uint _2753 = (_2751 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2753) & _2631) == 0u)
        {
            _2856 = _2736;
            _2858 = _2738;
            _2860 = _2740;
            _2862 = _2742;
            _2864 = _2744;
            _2866 = _2746;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
            float _2882 = _2881 * _2585;
            float _2883 = _2881 * _2586;
            float _2884 = _2881 * _2587;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2753 < ((_2751 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _3016 = _2736;
                float _3017 = _2738;
                float _3018 = _2740;
                float _3019 = _2742;
                float _3020 = _2744;
                float _3021 = _2746;
                uint _3022 = _2753;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3032)
                    {
                        frontier_phi_79_pred = _3021;
                        frontier_phi_79_pred_1 = _3020;
                        frontier_phi_79_pred_2 = _3019;
                        frontier_phi_79_pred_3 = _3018;
                        frontier_phi_79_pred_4 = _3017;
                        frontier_phi_79_pred_5 = _3016;
                    }
                    else
                    {
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        uint _3244 = _3031;
                        uint _3245;
                        vec4 _3270;
                        float _3271;
                        vec4 _3286;
                        vec3 _3298;
                        vec4 _3313;
                        vec4 _3329;
                        float _3376;
                        bool _3377;
                        for (;;)
                        {
                            uint _3255 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3244));
                            _3245 = (_3244 + 4294967295u) & _3244;
                            uint _3257 = _3255 * 40u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3271 = _3270.w;
                            uint _3273 = (_3255 * 40u) + 4u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3255 * 40u) + 8u;
                            _3298 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x));
                            uint _3300 = (_3255 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3316 = (_3255 * 40u) + 20u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3255 * 40u) + 24u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3351 = (_3255 * 40u) + 28u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3376 = fma(_2587, _3364.z, fma(_2586, _3364.y, _3364.x * _2585)) + _3364.w;
                            _3377 = !((fma(_2587, _3345.z, fma(_2586, _3345.y, _3345.x * _2585)) + _3345.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3377)
                            {
                                float _3404 = _3270.x - _2585;
                                float _3405 = _3270.y - _2586;
                                float _3406 = _3270.z - _2587;
                                float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                                float _3410 = inversesqrt(_3407);
                                float _3411 = _3410 * _3404;
                                float _3412 = _3410 * _3405;
                                float _3413 = _3410 * _3406;
                                float _3417 = 1.0 - (_3407 / (_3271 * _3271));
                                float _4523 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3422 = sqrt(_3407) * _3286.w;
                                float _3424 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                                float _3425 = _3424 * _3424;
                                float _3428 = ((1.0 - _3425) * dot(vec3(_3411, _3412, _3413), vec3(_668, _671, _674))) + _3425;
                                float _3431 = _3422 * _3422;
                                float _3435 = (fma(_2587, _3313.z, fma(_2586, _3313.y, _3313.x * _2585)) + _3313.w) / _3376;
                                float _3436 = (fma(_2587, _3329.z, fma(_2586, _3329.y, _3329.x * _2585)) + _3329.w) / _3376;
                                float _3440 = 1.0 - dot(vec2(_3435, _3436), vec2(_3435, _3436));
                                float _4539 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3442 = _3441 * (((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3418) / ((_3431 * 0.699999988079071044921875) + 1.0));
                                float _3454 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                                float _3455 = 1.0 - _871;
                                float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                                float _3463 = _3462 * _3462;
                                float _3464 = _3463 * _3463;
                                float _3465 = _3411 - _2882;
                                float _3466 = _3412 - _2883;
                                float _3467 = _3413 - _2884;
                                float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                                float _3475 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4550 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3479 = dot(vec3(_668, _671, _674), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                                float _4561 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                                float _3487 = _3424 * _3463;
                                float _3488 = _3487 * _3487;
                                float _3494 = ((1.0 - _3488) * dot(vec3(_668, _671, _674), vec3(_3411, _3412, _3413))) + _3488;
                                float _4572 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3496 = 1.0 - _3463;
                                float _3506 = (0.5 / (((_3495 * ((_3478 * _3496) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3463) * _3478))) * _3495;
                                float _4583 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3516 = (_3441 * _3418) * (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3486 * _3486) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3442 * _3286.z;
                                frontier_phi_85_pred_1 = _3442 * _3286.y;
                                frontier_phi_85_pred_2 = _3442 * _3286.x;
                                frontier_phi_85_pred_3 = _3516 * _3298.z;
                                frontier_phi_85_pred_4 = _3516 * _3298.y;
                                frontier_phi_85_pred_5 = _3516 * _3298.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_85_pred;
                            _3524 = frontier_phi_85_pred_1;
                            _3523 = frontier_phi_85_pred_2;
                            _3522 = frontier_phi_85_pred_3;
                            _3521 = frontier_phi_85_pred_4;
                            _3520 = frontier_phi_85_pred_5;
                            _3228 = _3523 + _3241;
                            _3229 = _3524 + _3242;
                            _3230 = _3525 + _3243;
                            _3225 = _3520 + _3238;
                            _3226 = _3521 + _3239;
                            _3227 = _3522 + _3240;
                            if (_3245 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3245;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3230;
                        frontier_phi_79_pred_1 = _3229;
                        frontier_phi_79_pred_2 = _3228;
                        frontier_phi_79_pred_3 = _3227;
                        frontier_phi_79_pred_4 = _3226;
                        frontier_phi_79_pred_5 = _3225;
                    }
                    _2867 = frontier_phi_79_pred;
                    _2865 = frontier_phi_79_pred_1;
                    _2863 = frontier_phi_79_pred_2;
                    _2861 = frontier_phi_79_pred_3;
                    _2859 = frontier_phi_79_pred_4;
                    _2857 = frontier_phi_79_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2857;
                        _3017 = _2859;
                        _3018 = _2861;
                        _3019 = _2863;
                        _3020 = _2865;
                        _3021 = _2867;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2863;
                frontier_phi_60_61_ladder_1 = _2867;
                frontier_phi_60_61_ladder_2 = _2865;
                frontier_phi_60_61_ladder_3 = _2861;
                frontier_phi_60_61_ladder_4 = _2859;
                frontier_phi_60_61_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_60_61_ladder = _2742;
                frontier_phi_60_61_ladder_1 = _2746;
                frontier_phi_60_61_ladder_2 = _2744;
                frontier_phi_60_61_ladder_3 = _2740;
                frontier_phi_60_61_ladder_4 = _2738;
                frontier_phi_60_61_ladder_5 = _2736;
            }
            _2856 = frontier_phi_60_61_ladder_5;
            _2858 = frontier_phi_60_61_ladder_4;
            _2860 = frontier_phi_60_61_ladder_3;
            _2862 = frontier_phi_60_61_ladder;
            _2864 = frontier_phi_60_61_ladder_2;
            _2866 = frontier_phi_60_61_ladder_1;
        }
        float _2871 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2643 = (_2871 * _2862) + _2077;
        _2645 = (_2871 * _2864) + _2079;
        _2647 = (_2871 * _2866) + _2081;
        _2649 = ((_2856 * _841) * _2871) + _2425;
        _2651 = ((_2858 * _842) * _2871) + _2427;
        _2653 = ((_2860 * _843) * _2871) + _2429;
    }
    else
    {
        _2643 = _2077;
        _2645 = _2079;
        _2647 = _2081;
        _2649 = _2425;
        _2651 = _2427;
        _2653 = _2429;
    }
    float _4599 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4610 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4621 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4632 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _2671 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2643 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _855))) + ((_2649 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2672 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2645 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _855))) + ((_2651 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2673 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2647 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _855))) + ((_2653 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2674 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2675 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2681 = cbInstanceData._m0[_747 + 6u].w * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)));
    float _2686 = _644 / cbSceneParam._m0[86u].x;
    float _2687 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2701 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, (log2((isnan(cbSceneParam._m0[77u].w) ? _566 : (isnan(_566) ? cbSceneParam._m0[77u].w : min(_566, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2703 = _2701.x;
    float _2704 = _2701.y;
    float _2705 = _2701.z;
    float _2706 = _2701.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_566 > cbSceneParam._m0[78u].w)
    {
        float _2761 = isnan(_566) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _566 : min(cbSceneParam._m0[80u].w, _566));
        float _2762 = _2761 / _566;
        float _2773 = _2762 * _617;
        float _2774 = _618 * _2762;
        float _2775 = (-0.0) - _2774;
        float _2776 = _2762 * _619;
        float _2778 = (cbSceneParam._m0[77u].w * _2775) / _2761;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2774;
        float _2786 = sqrt(((_2773 * _2773) + (_2774 * _2774)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2761)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2973;
        if (abs((_2775 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2973 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2919 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2973 = ((abs(_2786 / _2775) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2796 * _2928) - exp2(_2796 * _2929)) * _2917))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2975 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, 1.0), 0.0);
        float _2984 = exp2((_2973 * (-1.44269502162933349609375)) * (1.0 - _2975.w));
        float _2985 = log2(_2984);
        float _3001 = log2(_2706);
        _2798 = (exp2(_3001 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].x)) * _2975.x) / cbSceneParam._m0[78u].x)) + _2703;
        _2800 = (exp2(_3001 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].y)) * _2975.y) / cbSceneParam._m0[78u].y)) + _2704;
        _2802 = (exp2(_3001 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].z)) * _2975.z) / cbSceneParam._m0[78u].z)) + _2705;
        _2804 = _2984 * _2706;
    }
    else
    {
        _2798 = _2703;
        _2800 = _2704;
        _2802 = _2705;
        _2804 = _2706;
    }
    bool _3011;
    vec4 _2814;
    vec4 _2836;
    float _2838;
    float _2842;
    float _2843;
    float _2844;
    float _2845;
    bool _2855;
    for (;;)
    {
        _2814 = cbMatDynParam._m0[0u];
        float _2816 = roundEven(_2814.y);
        bool _2817 = _2816 == 3.0;
        float _2818 = log2(_2804);
        float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * _2674;
        float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * _2675;
        float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * _2676;
        float _2834 = _633 + (-0.5);
        _2836 = cbMtdParam._m0[1u];
        _2838 = _2836.y * _2834;
        float _2841 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2842 = _2841 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
        _2843 = _2841 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
        _2844 = _2841 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
        _2845 = _2834 * 0.999000012874603271484375;
        _2855 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2855)
        {
            if ((cbInstanceData._m0[_747 + 7u].x + _2845) < 0.5)
            {
                _3011 = true;
                break;
            }
        }
        uint _2952 = _748 + uint(_2814.w);
        if ((cbInstanceData._m0[_2952].w < 1.0) && ((cbInstanceData._m0[_2952].w + _2845) < 0.5))
        {
            _3011 = true;
            break;
        }
        if ((_2838 + _392) < _2836.x)
        {
            _3011 = true;
            break;
        }
        _3011 = false;
        break;
    }
    float _3216;
    if (_3011)
    {
        discard_state = true;
        _3216 = 0.0;
    }
    else
    {
        _3216 = _2681;
    }
    SV_Target.x = _2842;
    SV_Target.y = _2843;
    SV_Target.z = _2844;
    SV_Target.w = _3216;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2681;
    discard_exit();
}


