#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1212;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _248.z;
    float _260 = exp2(log2(_253 * 22.0) * 260.0);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    vec4 _276 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _287 = cbMtdParam._m0[10u].x * _276.x;
    float _288 = cbMtdParam._m0[10u].y * _276.y;
    float _289 = cbMtdParam._m0[10u].z * _276.z;
    vec4 _301 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = (((cbMtdParam._m0[9u].x * _301.x) - _287) * _262) + _287;
    float _323 = (((cbMtdParam._m0[9u].y * _301.y) - _288) * _262) + _288;
    float _324 = (((cbMtdParam._m0[9u].z * _301.z) - _289) * _262) + _289;
    float _329 = exp2(log2(1.0 - _248.w) * 8.0);
    vec4 _341 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _375 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _383 = (((((cbMtdParam._m0[12u].x * _341.x) - _322) * _329) + _322) * 4.55000019073486328125) * _375.x;
    float _385 = (((((cbMtdParam._m0[12u].y * _341.y) - _323) * _329) + _323) * 4.55000019073486328125) * _375.y;
    float _387 = (((((cbMtdParam._m0[12u].z * _341.z) - _324) * _329) + _324) * 4.55000019073486328125) * _375.z;
    float _388 = _375.w * _301.w;
    float _416 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _262) + cbMtdParam._m0[15u].y;
    float _419 = ((cbMtdParam._m0[14u].y - _416) * _329) + _416;
    vec4 _432 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _441 = cbMtdParam._m0[13u].y + _432.z;
    vec4 _453 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _462 = (((_453.z - _441) + cbMtdParam._m0[13u].x) * _262) + _441;
    vec4 _475 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _492 = (((_262 * (_253 + (-0.5))) + 0.5) * 2.0) * ((((_475.z - _462) + cbMtdParam._m0[14u].x) * _329) + _462);
    float _496 = (_248.x * 2.0) + (-1.0);
    float _498 = (_248.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_496, _498), vec2(_496, _498));
    float _3580 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _504 = sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))));
    float _509 = ((_453.x - _434) * _262) + _434;
    float _510 = ((_453.y - _435) * _262) + _435;
    float _523 = ((((((_475.x - _509) * _329) + _509) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _496;
    float _524 = ((((((_475.y - _510) * _329) + _510) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _498;
    float _527 = fma(_504, _232, fma(_524, _224 * TANGENT.x, (_210 * _202) * _523));
    float _530 = fma(_504, _233, fma(_524, _224 * TANGENT.y, (_210 * _203) * _523));
    float _533 = fma(_504, _234, fma(_524, _224 * TANGENT.z, (_210 * _204) * _523));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    float _538 = _537 * _527;
    float _539 = _537 * _530;
    float _540 = _537 * _533;
    float _3591 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _541 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _542 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _543 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _544 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _545 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _546 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _613 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _603);
    float _614 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _603);
    float _615 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _603);
    float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
    float _620 = _613 * _619;
    float _621 = _614 * _619;
    float _622 = _615 * _619;
    float _628 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _629 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _631 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _633 = _631.w;
    float _652 = fma(_540, cbSceneParam._m0[5u].z, fma(_539, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _538));
    float _655 = fma(_540, cbSceneParam._m0[6u].z, fma(_539, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _538));
    float _658 = fma(_540, cbSceneParam._m0[7u].z, fma(_539, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _538));
    vec4 _660 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _662 = _660.x;
    float _674 = (((_660.y - _542) + (_660.w * _542)) * cbMtdParam._m0[3u].x) + _542;
    vec4 _675 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _691 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_662 * _662)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _675.z;
    float _699 = (((cbMatDynParam._m0[15u].x - _546) * cbMatDynParam._m0[15u].w) * _691) + _546;
    float _707 = ((_691 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _674)) + _674;
    uint _731 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = (_731 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * _543) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * _544) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * _545) * cbInstanceData._m0[_733].z;
    float _3657 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    vec4 _745 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _750 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _761 = (((_750.x - _699) + (_750.w * _699)) * cbMtdParam._m0[3u].x) + _699;
    float _774 = (cbMtdParam._m0[3u].x * (((_742 * _633) - _742) + _745.x)) + _742;
    float _775 = (cbMtdParam._m0[3u].x * (((_743 * _633) - _743) + _745.y)) + _743;
    float _776 = (cbMtdParam._m0[3u].x * (((_744 * _633) - _744) + _745.z)) + _744;
    float _790 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_699 * (_543 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_699 * (_544 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_699 * (_545 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _794 = _790 * cbMatDynParam._m0[13u].w;
    float _804 = (_794 * (cbMatDynParam._m0[13u].x - _774)) + _774;
    float _805 = (_794 * (cbMatDynParam._m0[13u].y - _775)) + _775;
    float _806 = (_794 * (cbMatDynParam._m0[13u].z - _776)) + _776;
    float _814 = ((_790 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _761)) + _761;
    float _815 = 1.0 - _814;
    float _816 = _815 * _804;
    float _817 = _815 * _805;
    float _818 = _815 * _806;
    float _822 = (_804 + (-0.039999999105930328369140625)) * _814;
    float _823 = (_805 + (-0.039999999105930328369140625)) * _814;
    float _824 = (_806 + (-0.039999999105930328369140625)) * _814;
    float _825 = _822 + 0.039999999105930328369140625;
    float _826 = _823 + 0.039999999105930328369140625;
    float _827 = _824 + 0.039999999105930328369140625;
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _628, cbSceneParam._m0[86u].y * _629));
    float _839 = _836.x * TEXCOORD_4;
    float _840 = dot(vec3(_538, _539, _540), vec3(_620, _621, _622));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _538) - _620;
    float _848 = (_843 * _539) - _621;
    float _849 = (_843 * _540) - _622;
    float _853 = abs(dot(vec3(_620, _621, _622), vec3(_538, _539, _540)));
    float _3690 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_707);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _874 = (1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _875 = _868 * _855;
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1211;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _942 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _946 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _969 = _903 + _538;
        float _970 = _907 + _539;
        float _971 = _911 + _540;
        float _981 = fma(_971, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969)) - _938;
        float _982 = fma(_971, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969)) - _942;
        float _983 = fma(_971, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969)) - _946;
        float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
        float _1000 = ((_987 * _981) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_987 * _982) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_987 * _983) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1000, _1001, _1002), 0.0);
        float _1039 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1005.x + (-0.5));
        float _1041 = _1039 * (_1005.y + (-0.5));
        float _1042 = _1039 * (_1005.z + (-0.5));
        float _1049 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1012.x + (-0.5));
        float _1051 = _1049 * (_1012.y + (-0.5));
        float _1052 = _1049 * (_1012.z + (-0.5));
        float _1059 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1019.x + (-0.5));
        float _1061 = _1059 * (_1019.y + (-0.5));
        float _1062 = _1059 * (_1019.z + (-0.5));
        float _1069 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1026.x + (-0.5));
        float _1071 = _1069 * (_1026.y + (-0.5));
        float _1072 = _1069 * (_1026.z + (-0.5));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = _1040 * 0.5;
        float _1077 = _1050 * 0.5;
        float _1078 = _1060 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1093 = (dot(vec3(_538, _539, _540), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1103 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3738 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1105 + 1.0))) + _1110) * _1073;
        float _1120 = _1041 * 0.5;
        float _1121 = _1051 * 0.5;
        float _1122 = _1061 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_538, _539, _540), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3771 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1147 + 1.0))) + _1152) * _1074;
        float _1162 = _1042 * 0.5;
        float _1163 = _1052 * 0.5;
        float _1164 = _1062 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_538, _539, _540), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3804 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1189 + 1.0))) + _1194) * _1075;
        _1211 = _1042;
        _1213 = _1041;
        _1214 = _1040;
        _1215 = _1052;
        _1216 = _1051;
        _1217 = _1050;
        _1218 = _1062;
        _1219 = _1061;
        _1220 = _1060;
        _1221 = _1075;
        _1222 = _1074;
        _1223 = _1073;
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
    }
    else
    {
        _1211 = _1212;
        _1213 = _1212;
        _1214 = _1212;
        _1215 = _1212;
        _1216 = _1212;
        _1217 = _1212;
        _1218 = _1212;
        _1219 = _1212;
        _1220 = _1212;
        _1221 = _1212;
        _1222 = _1212;
        _1223 = _1212;
        _1224 = 0.0;
        _1225 = 0.0;
        _1226 = 0.0;
    }
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1252 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1256 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1260 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1283 = _903 + _538;
        float _1284 = _907 + _539;
        float _1285 = _911 + _540;
        float _1295 = fma(_1285, cbModelParam._m0[30u].z, fma(_1284, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283)) - _1252;
        float _1296 = fma(_1285, cbModelParam._m0[31u].z, fma(_1284, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283)) - _1256;
        float _1297 = fma(_1285, cbModelParam._m0[32u].z, fma(_1284, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283)) - _1260;
        float _1301 = inversesqrt(dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297)));
        float _1314 = ((_1301 * _1295) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1252 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1301 * _1296) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1256 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1301 * _1297) / cbModelParam._m0[35u].z) + ((((((_1260 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1351 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1318.x + (-0.5));
        float _1353 = _1351 * (_1318.y + (-0.5));
        float _1354 = _1351 * (_1318.z + (-0.5));
        float _1361 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1325.x + (-0.5));
        float _1363 = _1361 * (_1325.y + (-0.5));
        float _1364 = _1361 * (_1325.z + (-0.5));
        float _1371 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1332.x + (-0.5));
        float _1373 = _1371 * (_1332.y + (-0.5));
        float _1374 = _1371 * (_1332.z + (-0.5));
        float _1381 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1339.x + (-0.5));
        float _1383 = _1381 * (_1339.y + (-0.5));
        float _1384 = _1381 * (_1339.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_538, _539, _540), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3867 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1415 + 1.0))) + _1420) * _1385;
        float _1430 = _1353 * 0.5;
        float _1431 = _1363 * 0.5;
        float _1432 = _1373 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_538, _539, _540), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3900 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1457 + 1.0))) + _1462) * _1386;
        float _1472 = _1354 * 0.5;
        float _1473 = _1364 * 0.5;
        float _1474 = _1374 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_538, _539, _540), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _3933 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1499 + 1.0))) + _1504) * _1387;
        _1521 = _1354;
        _1522 = _1353;
        _1523 = _1352;
        _1524 = _1364;
        _1525 = _1363;
        _1526 = _1362;
        _1527 = _1374;
        _1528 = _1373;
        _1529 = _1372;
        _1530 = _1387;
        _1531 = _1386;
        _1532 = _1385;
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1212;
        _1522 = _1212;
        _1523 = _1212;
        _1524 = _1212;
        _1525 = _1212;
        _1526 = _1212;
        _1527 = _1212;
        _1528 = _1212;
        _1529 = _1212;
        _1530 = _1212;
        _1531 = _1212;
        _1532 = _1212;
        _1533 = 0.0;
        _1534 = 0.0;
        _1535 = 0.0;
    }
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1224)) + _1224;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1225)) + _1225;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1226)) + _1226;
    float _1568 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1546, cbSceneParam._m0[89u].y, _1545 * cbSceneParam._m0[89u].x));
    float _1571 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1546, cbSceneParam._m0[90u].y, _1545 * cbSceneParam._m0[90u].x));
    float _1574 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1546, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1545));
    float _1589 = _847 * 0.5;
    float _1590 = _848 * 0.5;
    float _1591 = _849 * 0.5;
    float _1592 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1595 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1598 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1605 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1211, _1215, _1218, _1221));
        float _1609 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1613 = dot(vec4(_1589, _1590, _1591, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1620 = dot(vec4(cbModelParam._m0[39u]), vec4(_1589, _1590, _1591, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1620) ? 0.0 : (isnan(0.0) ? _1620 : max(0.0, _1620))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1589, _1590, _1591, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1716 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1719 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1747 = frontier_phi_16_14_ladder;
        }
        float _1974;
        if (_1716 > 0.0)
        {
            _1974 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1974 = frontier_phi_25_21_ladder;
        }
        float _2231;
        if (_1719 > 0.0)
        {
            _2231 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2231 = frontier_phi_37_32_ladder;
        }
        float _2233 = isnan(_1974) ? _1747 : (isnan(_1747) ? _1974 : min(_1747, _1974));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1713) + _1702;
        float _2239 = (_2234 * _1716) + _1706;
        float _2240 = (_2234 * _1719) + _1710;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_15_37_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_15_37_ladder_2;
        _1737 = frontier_phi_15_37_ladder_1;
        _1739 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1815 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1818 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _1979;
        if (_1812 > 0.0)
        {
            _1979 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1979 = frontier_phi_27_23_ladder;
        }
        float _2258;
        if (_1815 > 0.0)
        {
            _2258 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2258 = frontier_phi_39_34_ladder;
        }
        float _2471;
        if (_1818 > 0.0)
        {
            _2471 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2471 = frontier_phi_48_45_ladder;
        }
        float _2473 = isnan(_2258) ? _1979 : (isnan(_1979) ? _2258 : min(_1979, _2258));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1812) + _1801;
        float _2479 = (_2474 * _1815) + _1805;
        float _2480 = (_2474 * _1818) + _1809;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_24_48_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_24_48_ladder_2;
        _1839 = frontier_phi_24_48_ladder_1;
        _1841 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1744);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_874 * _825) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1837 - _1735)) + _1735);
    float _1856 = (((_874 * _826) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1839 - _1737)) + _1737);
    float _1858 = (((_874 * _827) + _875) * _839) * ((cbModelParam._m0[1u].w * (_1841 - _1739)) + _1739);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    vec4 _1875 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_628, _629));
    float _1877 = _1875.w;
    float _1889 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1877);
    float _1890 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1877);
    float _1891 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1877);
    uvec4 _1895 = floatBitsToUint(cbInstanceData._m0[_731 + 5u]);
    uint _1897 = _1895.x * 14u;
    uint _1898 = _1897 + 13u;
    float _1905 = _839 + (-1.0);
    float _1910 = (cbLight._m0[_1898].x * _1905) + 1.0;
    float _1911 = (cbLight._m0[_1898].y * _1905) + 1.0;
    float _1912 = (cbLight._m0[_1898].z * _1905) + 1.0;
    float _1913 = (cbLight._m0[_1898].w * _1905) + 1.0;
    uint _1914 = _1897 + 5u;
    float _1920 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1924 = _1897 + 4u;
    float _1933 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1937 = _1897 | 1u;
    float _1948 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_538, _539, _540));
    float _1951 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_538, _539, _540));
    float _4069 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _4080 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1956 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1958 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1965 = ((cbLight._m0[_1914].x * _1920) * _1958) + (((cbLight._m0[_1924].x * _1889) * _1933) * _1956);
    float _1966 = ((_1920 * cbLight._m0[_1914].y) * _1958) + (((cbLight._m0[_1924].y * _1890) * _1933) * _1956);
    float _1967 = ((_1920 * cbLight._m0[_1914].z) * _1958) + (((cbLight._m0[_1924].z * _1891) * _1933) * _1956);
    uvec4 _1971 = floatBitsToUint(cbLight._m0[_1897 + 12u]);
    bool _1973 = _1971.x == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1973)
    {
        _1984 = _1965;
        _1986 = _1966;
        _1988 = _1967;
    }
    else
    {
        uint _1992 = _1897 + 6u;
        float _2008 = (dot(vec3(cbLight._m0[_1897 + 2u].xyz), vec3(_538, _539, _540)) * 0.5) + 0.5;
        float _2009 = _2008 * _2008;
        float _4091 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2011 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _1984 = (((cbLight._m0[_1992].x * 0.3183098733425140380859375) * _2010) * _2011) + _1965;
        _1986 = (((cbLight._m0[_1992].y * 0.3183098733425140380859375) * _2010) * _2011) + _1966;
        _1988 = (((cbLight._m0[_1992].z * 0.3183098733425140380859375) * _2010) * _2011) + _1967;
    }
    bool _1991 = _1971.y == 0u;
    float _2029;
    float _2031;
    float _2033;
    if (_1991)
    {
        _2029 = _1984;
        _2031 = _1986;
        _2033 = _1988;
    }
    else
    {
        uint _2202 = _1897 + 7u;
        float _2218 = (dot(vec3(cbLight._m0[_1897 + 3u].xyz), vec3(_538, _539, _540)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4107 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2221 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2029 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _1984;
        _2031 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _1986;
        _2033 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _1988;
    }
    uint _2036 = _1897 + 8u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _707) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1897].x + _620;
    float _2052 = cbLight._m0[_1897].y + _621;
    float _2053 = cbLight._m0[_1897].z + _622;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1897].xyz));
    float _4123 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2065 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2066 = dot(vec3(_538, _539, _540), vec3(_2058, _2059, _2060));
    float _4145 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2070 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2058, _2059, _2060));
    float _4156 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2074 = _2050 * _2050;
    float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
    float _2086 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2087 = 0.959999978542327880859375 - _822;
    float _2089 = 0.959999978542327880859375 - _823;
    float _2090 = 0.959999978542327880859375 - _824;
    float _2097 = 1.0 - _2050;
    float _2108 = (0.5 / (((_2065 * ((_2064 * _2097) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2097) + _2050) * _2064))) * _2064;
    float _4167 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
    uint _2124 = _1897 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _707) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1937].x + _620;
    float _2138 = cbLight._m0[_1937].y + _621;
    float _2139 = cbLight._m0[_1937].z + _622;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_1937].xyz));
    float _4178 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2151 = dot(vec3(_538, _539, _540), vec3(_2144, _2145, _2146));
    float _4189 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2144, _2145, _2146));
    float _4200 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0);
    float _2177 = 1.0 - _2136;
    float _2187 = (0.5 / (((_2065 * ((_2150 * _2177) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2177) + _2136) * _2150))) * _2150;
    float _4211 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2189 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2199 = (((((_2170 * _2087) + _825) * cbLight._m0[_2124].x) * _2189) * _1920) + ((((cbLight._m0[_2036].x * _1889) * ((_2086 * _2087) + _825)) * _2110) * _1933);
    float _2200 = (((((_2170 * _2089) + _826) * cbLight._m0[_2124].y) * _2189) * _1920) + ((((cbLight._m0[_2036].y * _1890) * ((_2086 * _2089) + _826)) * _2110) * _1933);
    float _2201 = (((((_2170 * _2090) + _827) * cbLight._m0[_2124].z) * _2189) * _1920) + ((((cbLight._m0[_2036].z * _1891) * ((_2086 * _2090) + _827)) * _2110) * _1933);
    float _2263;
    float _2265;
    float _2267;
    if (_1973)
    {
        _2263 = _2199;
        _2265 = _2200;
        _2267 = _2201;
    }
    else
    {
        uint _2269 = _1897 + 2u;
        uint _2273 = _1897 + 10u;
        float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _707) * 0.949999988079071044921875);
        float _2288 = _2287 * _2287;
        float _2289 = cbLight._m0[_2269].x + _620;
        float _2290 = cbLight._m0[_2269].y + _621;
        float _2291 = cbLight._m0[_2269].z + _622;
        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
        float _2296 = _2295 * _2289;
        float _2297 = _2295 * _2290;
        float _2298 = _2295 * _2291;
        float _2299 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2269].xyz));
        float _4222 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2303 = dot(vec3(_538, _539, _540), vec3(_2296, _2297, _2298));
        float _4233 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2307 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2296, _2297, _2298));
        float _4244 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2311 = _2288 * _2288;
        float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
        float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0);
        float _2329 = 1.0 - _2288;
        float _2339 = (0.5 / (((_2065 * ((_2302 * _2329) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2329) + _2288) * _2302))) * _2302;
        float _4255 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2263 = (((((_2322 * _2087) + _825) * cbLight._m0[_2273].x) * _2341) * _2342) + _2199;
        _2265 = (((((_2322 * _2089) + _826) * cbLight._m0[_2273].y) * _2341) * _2342) + _2200;
        _2267 = (((((_2322 * _2090) + _827) * cbLight._m0[_2273].z) * _2341) * _2342) + _2201;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_1991)
    {
        _2377 = _2263;
        _2379 = _2265;
        _2381 = _2267;
    }
    else
    {
        uint _2388 = _1897 + 3u;
        uint _2392 = _1897 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _707) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _620;
        float _2409 = cbLight._m0[_2388].y + _621;
        float _2410 = cbLight._m0[_2388].z + _622;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2388].xyz));
        float _4271 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2422 = dot(vec3(_538, _539, _540), vec3(_2415, _2416, _2417));
        float _4282 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4293 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2065 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2065 * _2448) + _2407) * _2421))) * _2421;
        float _4304 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
        _2377 = (((((_2441 * _2087) + _825) * cbLight._m0[_2392].x) * _2460) * _2461) + _2263;
        _2379 = (((((_2441 * _2089) + _826) * cbLight._m0[_2392].y) * _2460) * _2461) + _2265;
        _2381 = (((((_2441 * _2090) + _827) * cbLight._m0[_2392].z) * _2460) * _2461) + _2267;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1895.y == 0u)
    {
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2536;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2536;
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2536;
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.x;
        uint _2563 = uint((float(_2551.y) * floor(float(uint(cbSceneParam._m0[85u].y * _629) / _2552))) + floor(float(uint(cbSceneParam._m0[85u].x * _628) / _2552)));
        float _2573 = (log2(_2539 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2574 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        uint _2577 = uint(isnan(14.0) ? _2574 : (isnan(_2574) ? 14.0 : min(_2574, 14.0)));
        uvec4 _2582 = texelFetch(g_lightClusterGridBuffer, int(((_2577 << 2u) + (_2563 << 6u)) >> 2u));
        uint _2583 = _2582.x;
        uint _2584 = _2551.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2584 >> 4u) & 15u)) + 4294967295u) & _2583) == 0u) || ((_2584 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            uint _2838 = 0u;
            uint _2847;
            bool _2848;
            for (;;)
            {
                _2847 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                _2848 = _2847 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2848)
                {
                    frontier_phi_63_pred = _2837;
                    frontier_phi_63_pred_1 = _2836;
                    frontier_phi_63_pred_2 = _2835;
                    frontier_phi_63_pred_3 = _2834;
                    frontier_phi_63_pred_4 = _2833;
                    frontier_phi_63_pred_5 = _2832;
                }
                else
                {
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    uint _2962;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2847;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2966 = uint(findLSB(_2962)) + (_2838 << 5u);
                        uint _2963 = (_2962 + 4294967295u) & _2962;
                        uint _2968 = _2966 * 48u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2988 = (_2966 * 48u) + 4u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3007 = (_2966 * 48u) + 8u;
                        vec3 _3018 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x));
                        float _3022 = _2982.x - _2537;
                        float _3023 = _2982.y - _2538;
                        float _3024 = _2982.z - _2539;
                        float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                        float _3028 = inversesqrt(_3025);
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3032 = dot(vec3(_652, _655, _658), vec3(_3029, _3030, _3031));
                        float _3037 = 1.0 - (_3025 * _2982.w);
                        float _4330 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3039 = sqrt(_3025) * _3001.w;
                        float _3042 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _3032) + _3043;
                        float _3049 = _3039 * _3039;
                        float _3053 = ((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3038) / ((_3049 * 0.699999988079071044921875) + 1.0);
                        float _3057 = (-0.0) - _2537;
                        float _3058 = (-0.0) - _2538;
                        float _3059 = (-0.0) - _2539;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3074 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                        float _3075 = 1.0 - _855;
                        float _3082 = sqrt(1.0 - ((1.0 - (_3075 * _3075)) * (1.0 - (_3074 * _3074))));
                        float _3083 = _3082 * _3082;
                        float _3084 = _3083 * _3083;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3095 = dot(vec3(_652, _655, _658), vec3(_3064, _3065, _3066));
                        float _4346 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3099 = dot(vec3(_652, _655, _658), vec3(_3091 * _3085, _3091 * _3086, _3091 * _3087));
                        float _4357 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3106 = ((_3102 * _3102) * (_3084 + (-1.0))) + 1.0;
                        float _3107 = _3042 * _3083;
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3032) + _3108;
                        float _4368 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3113 = 1.0 - _3083;
                        float _3123 = (0.5 / (((_3112 * ((_3098 * _3113) + _3083)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3083) * _3098))) * _3112;
                        float _4379 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3134 = (((_3084 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3106 * _3106) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125))) * _3038;
                        _2891 = (_3053 * _3001.x) + _2959;
                        _2892 = (_3053 * _3001.y) + _2960;
                        _2893 = (_3053 * _3001.z) + _2961;
                        _2888 = (_3134 * _3018.x) + _2956;
                        _2889 = (_3134 * _3018.y) + _2957;
                        _2890 = (_3134 * _3018.z) + _2958;
                        if (_2963 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2963;
                        }
                    }
                    frontier_phi_63_pred = _2893;
                    frontier_phi_63_pred_1 = _2892;
                    frontier_phi_63_pred_2 = _2891;
                    frontier_phi_63_pred_3 = _2890;
                    frontier_phi_63_pred_4 = _2889;
                    frontier_phi_63_pred_5 = _2888;
                }
                _2699 = frontier_phi_63_pred;
                _2697 = frontier_phi_63_pred_1;
                _2695 = frontier_phi_63_pred_2;
                _2693 = frontier_phi_63_pred_3;
                _2691 = frontier_phi_63_pred_4;
                _2689 = frontier_phi_63_pred_5;
                uint _2839 = _2838 + 1u;
                if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2832 = _2689;
                    _2833 = _2691;
                    _2834 = _2693;
                    _2835 = _2695;
                    _2836 = _2697;
                    _2837 = _2699;
                    _2838 = _2839;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((4294967295u << _2705) & _2583) == 0u)
        {
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
        }
        else
        {
            float _2825 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
            float _2826 = _2825 * _2537;
            float _2827 = _2825 * _2538;
            float _2828 = _2825 * _2539;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2939 = _2688;
                float _2940 = _2690;
                float _2941 = _2692;
                float _2942 = _2694;
                float _2943 = _2696;
                float _2944 = _2698;
                uint _2945 = _2705;
                uint _2954;
                bool _2955;
                for (;;)
                {
                    _2954 = texelFetch(g_lightClassification, int((((_2577 << 5u) + (_2563 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                    _2955 = _2954 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2955)
                    {
                        frontier_phi_69_pred = _2944;
                        frontier_phi_69_pred_1 = _2943;
                        frontier_phi_69_pred_2 = _2942;
                        frontier_phi_69_pred_3 = _2941;
                        frontier_phi_69_pred_4 = _2940;
                        frontier_phi_69_pred_5 = _2939;
                    }
                    else
                    {
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        uint _3158 = _2954;
                        uint _3159;
                        vec4 _3184;
                        float _3185;
                        vec4 _3200;
                        vec3 _3212;
                        vec4 _3227;
                        vec4 _3243;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3169 = ((_2945 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3158));
                            _3159 = (_3158 + 4294967295u) & _3158;
                            uint _3171 = _3169 * 40u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3185 = _3184.w;
                            uint _3187 = (_3169 * 40u) + 4u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3169 * 40u) + 8u;
                            _3212 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x));
                            uint _3214 = (_3169 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3169 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3169 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3169 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2539, _3278.z, fma(_2538, _3278.y, _3278.x * _2537)) + _3278.w;
                            _3291 = !((fma(_2539, _3259.z, fma(_2538, _3259.y, _3259.x * _2537)) + _3259.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3184.x - _2537;
                                float _3319 = _3184.y - _2538;
                                float _3320 = _3184.z - _2539;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3185 * _3185));
                                float _4390 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3336 = sqrt(_3321) * _3200.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_652, _655, _658))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2539, _3227.z, fma(_2538, _3227.y, _3227.x * _2537)) + _3227.w) / _3290;
                                float _3350 = (fma(_2539, _3243.z, fma(_2538, _3243.y, _3243.x * _2537)) + _3243.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4406 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _855;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2826;
                                float _3380 = _3326 - _2827;
                                float _3381 = _3327 - _2828;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_652, _655, _658), vec3((-0.0) - _2826, (-0.0) - _2827, (-0.0) - _2828));
                                float _4417 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3393 = dot(vec3(_652, _655, _658), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4428 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_652, _655, _658), vec3(_3325, _3326, _3327))) + _3402;
                                float _4439 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4450 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3356 * _3200.z;
                                frontier_phi_75_pred_1 = _3356 * _3200.y;
                                frontier_phi_75_pred_2 = _3356 * _3200.x;
                                frontier_phi_75_pred_3 = _3430 * _3212.z;
                                frontier_phi_75_pred_4 = _3430 * _3212.y;
                                frontier_phi_75_pred_5 = _3430 * _3212.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3439 = frontier_phi_75_pred;
                            _3438 = frontier_phi_75_pred_1;
                            _3437 = frontier_phi_75_pred_2;
                            _3436 = frontier_phi_75_pred_3;
                            _3435 = frontier_phi_75_pred_4;
                            _3434 = frontier_phi_75_pred_5;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            _3144 = _3439 + _3157;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            _3141 = _3436 + _3154;
                            if (_3159 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3159;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3144;
                        frontier_phi_69_pred_1 = _3143;
                        frontier_phi_69_pred_2 = _3142;
                        frontier_phi_69_pred_3 = _3141;
                        frontier_phi_69_pred_4 = _3140;
                        frontier_phi_69_pred_5 = _3139;
                    }
                    _2811 = frontier_phi_69_pred;
                    _2809 = frontier_phi_69_pred_1;
                    _2807 = frontier_phi_69_pred_2;
                    _2805 = frontier_phi_69_pred_3;
                    _2803 = frontier_phi_69_pred_4;
                    _2801 = frontier_phi_69_pred_5;
                    uint _2946 = _2945 + 1u;
                    if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2939 = _2801;
                        _2940 = _2803;
                        _2941 = _2805;
                        _2942 = _2807;
                        _2943 = _2809;
                        _2944 = _2811;
                        _2945 = _2946;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2811;
                frontier_phi_57_58_ladder_1 = _2809;
                frontier_phi_57_58_ladder_2 = _2807;
                frontier_phi_57_58_ladder_3 = _2805;
                frontier_phi_57_58_ladder_4 = _2803;
                frontier_phi_57_58_ladder_5 = _2801;
            }
            else
            {
                frontier_phi_57_58_ladder = _2698;
                frontier_phi_57_58_ladder_1 = _2696;
                frontier_phi_57_58_ladder_2 = _2694;
                frontier_phi_57_58_ladder_3 = _2692;
                frontier_phi_57_58_ladder_4 = _2690;
                frontier_phi_57_58_ladder_5 = _2688;
            }
            _2800 = frontier_phi_57_58_ladder_5;
            _2802 = frontier_phi_57_58_ladder_4;
            _2804 = frontier_phi_57_58_ladder_3;
            _2806 = frontier_phi_57_58_ladder_2;
            _2808 = frontier_phi_57_58_ladder_1;
            _2810 = frontier_phi_57_58_ladder;
        }
        float _2815 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2595 = (_2815 * _2806) + _2029;
        _2597 = (_2815 * _2808) + _2031;
        _2599 = (_2815 * _2810) + _2033;
        _2601 = ((_2800 * _825) * _2815) + _2377;
        _2603 = ((_2802 * _826) * _2815) + _2379;
        _2605 = ((_2804 * _827) * _2815) + _2381;
    }
    else
    {
        _2595 = _2029;
        _2597 = _2031;
        _2599 = _2033;
        _2601 = _2377;
        _2603 = _2379;
        _2605 = _2381;
    }
    float _4466 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4477 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4488 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4499 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2623 = ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2595 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _839))) + ((_2601 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1644)) * cbPerFrame._m0[3u].x);
    float _2624 = ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2597 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _839))) + ((_2603 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1644)) * cbPerFrame._m0[3u].x);
    float _2625 = ((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2599 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _839))) + ((_2605 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1644)) * cbPerFrame._m0[3u].x);
    float _2633 = cbInstanceData._m0[_731 + 6u].w * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)));
    float _2638 = _628 / cbSceneParam._m0[86u].x;
    float _2639 = _629 / cbSceneParam._m0[86u].y;
    vec4 _2653 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2655 = _2653.x;
    float _2656 = _2653.y;
    float _2657 = _2653.z;
    float _2658 = _2653.w;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2714 = _2713 / _562;
        float _2725 = _2714 * _613;
        float _2726 = _614 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2728 = _2714 * _615;
        float _2730 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2731 = _2730 + cbSceneParam._m0[79u].w;
        float _2732 = cbSceneParam._m0[79u].w - _2726;
        float _2738 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2728 * _2728));
        float _2741 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2738;
        float _2746 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2748 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2727 - _2730) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2731 > 0.0) ? exp2(_2746 * _2731) : (2.0 - exp2(_2748 * _2731))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2741;
        }
        else
        {
            float _2861 = 1.0 / cbSceneParam._m0[80u].x;
            float _2862 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : max(_2731, _2732));
            float _2863 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : min(_2731, _2732));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            _2901 = ((abs(_2738 / _2727) * cbSceneParam._m0[80u].y) * ((((_2872 - _2873) * 2.0) - ((exp2(_2746 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)))) - exp2(_2746 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))))) * _2861)) - ((exp2(_2748 * _2872) - exp2(_2748 * _2873)) * _2861))) + (_2741 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2658);
        _2750 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2655;
        _2752 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2656;
        _2754 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2657;
        _2756 = _2912 * _2658;
    }
    else
    {
        _2750 = _2655;
        _2752 = _2656;
        _2754 = _2657;
        _2756 = _2658;
    }
    float _2768 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2769 = _2768 == 3.0;
    float _2770 = log2(_2756);
    float _2777 = exp2(_2770 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)));
    float _2778 = exp2(_2770 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0)));
    float _2779 = exp2(_2770 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)));
    float _2788 = (_2768 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2788 * (_2769 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.y = _2788 * (_2769 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.z = _2788 * (_2769 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.w = _2633;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2633;
}


