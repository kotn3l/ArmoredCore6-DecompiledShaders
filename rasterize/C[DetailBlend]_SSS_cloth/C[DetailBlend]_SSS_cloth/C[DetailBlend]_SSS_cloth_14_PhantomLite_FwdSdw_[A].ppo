#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1279;
float _3979;
float _3980;
float _3981;
float _3982;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _324 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _340 = exp2(log2(1.0 - _306.w) * 8.0);
    vec4 _352 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _377 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _386 = ((_324.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _377.x;
    float _389 = ((_324.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _377.y;
    float _392 = ((_324.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _377.z;
    float _399 = (((cbMtdParam._m0[12u].x * _352.x) - _386) * _340) + _386;
    float _400 = (((cbMtdParam._m0[12u].y * _352.y) - _389) * _340) + _389;
    float _401 = (((cbMtdParam._m0[12u].z * _352.z) - _392) * _340) + _392;
    float _402 = _377.w * _324.w;
    vec4 _419 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = cbMtdParam._m0[14u].z + _419.x;
    float _426 = ((cbMtdParam._m0[14u].y - _423) * _340) + _423;
    vec4 _438 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    vec4 _460 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _468 = (_306.z * 2.0) * (cbMtdParam._m0[13u].x + _438.z);
    float _472 = (((_460.z - _468) + cbMtdParam._m0[14u].x) * _340) + _468;
    float _476 = (_306.x * 2.0) + (-1.0);
    float _478 = (_306.y * 2.0) + (-1.0);
    float _479 = dot(vec2(_476, _478), vec2(_476, _478));
    float _3991 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    float _497 = ((((((_460.x - _440) * _340) + _440) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _476;
    float _498 = ((((((_460.y - _441) * _340) + _441) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _478;
    float _501 = fma(_484, _234, fma(_498, _226 * TANGENT.x, (_212 * _204) * _497));
    float _504 = fma(_484, _235, fma(_498, _226 * TANGENT.y, (_212 * _205) * _497));
    float _507 = fma(_484, _236, fma(_498, _226 * TANGENT.z, (_212 * _206) * _497));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _4002 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _515 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _516 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _517 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _518 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _4046 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _519 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _520 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _528 = cbMatDynParam._m0[9u].x * _517;
    float _529 = cbMatDynParam._m0[9u].y * _518;
    float _530 = cbMatDynParam._m0[9u].z * _519;
    float _537 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _538 = _537 * _291;
    float _539 = _537 * _292;
    float _540 = _537 * _293;
    float _541 = dot(vec3(_512, _513, _514), vec3(_538, _539, _540));
    float _547 = abs(exp2(log2(_541) * cbMatDynParam._m0[12u].x));
    float _548 = isnan(0.100000001490116119384765625) ? _547 : (isnan(_547) ? 0.100000001490116119384765625 : max(_547, 0.100000001490116119384765625));
    float _554 = ((isnan(0.699999988079071044921875) ? _548 : (isnan(_548) ? 0.699999988079071044921875 : min(_548, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _577 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4078 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4089 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _585 = dot(vec3(_512, _513, _514), vec3(0.0, -1.0, 0.0));
    float _4100 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _595 = (_588 * _517) * cbMatDynParam._m0[11u].x;
    float _597 = (_588 * _518) * cbMatDynParam._m0[11u].y;
    float _599 = (_588 * _519) * cbMatDynParam._m0[11u].z;
    float _606 = dot(vec3(_538, _539, _540), vec3(_512, _513, _514));
    float _609 = _606 * 2.0;
    float _619 = dot(vec3((-0.0) - (_538 - (_609 * _512)), (-0.0) - (_539 - (_609 * _513)), (-0.0) - (_540 - (_609 * _514))), vec3(0.0, -1.0, 0.0));
    float _4111 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _626 = exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 4.0);
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _657 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _659 = _657.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _958 = sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293));
        float _964 = (cbMatDynParam._m0[5u].x * _958) + cbMatDynParam._m0[5u].y;
        float _4122 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _969 = (cbMatDynParam._m0[5u].z * _958) + cbMatDynParam._m0[5u].w;
        float _4133 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) - _965)) + _965) < ((_659 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _673 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _675 = _673.w;
    float _694 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _697 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _700 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    vec4 _702 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _704 = _702.x;
    float _716 = (((_702.y - _516) + (_702.w * _516)) * cbMtdParam._m0[3u].x) + _516;
    vec4 _717 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_704 * _704)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _717.z;
    float _742 = (((cbMatDynParam._m0[15u].x - _520) * cbMatDynParam._m0[15u].w) * _733) + _520;
    float _750 = ((_733 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _716)) + _716;
    uint _774 = uint(roundEven(NORMAL.w)) * 13u;
    uint _775 = _774 + 9u;
    uint _776 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * _528) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * _529) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * _530) * cbInstanceData._m0[_776].z;
    float _4144 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    vec4 _788 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _793 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _804 = (((_793.x - _742) + (_793.w * _742)) * cbMtdParam._m0[3u].x) + _742;
    float _817 = (cbMtdParam._m0[3u].x * (((_785 * _675) - _785) + _788.x)) + _785;
    float _818 = (cbMtdParam._m0[3u].x * (((_786 * _675) - _786) + _788.y)) + _786;
    float _819 = (cbMtdParam._m0[3u].x * (((_787 * _675) - _787) + _788.z)) + _787;
    float _833 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_742 * (_528 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_742 * (_529 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_742 * (_530 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _837 = _833 * cbMatDynParam._m0[13u].w;
    float _847 = (_837 * (cbMatDynParam._m0[13u].x - _817)) + _817;
    float _848 = (_837 * (cbMatDynParam._m0[13u].y - _818)) + _818;
    float _849 = (_837 * (cbMatDynParam._m0[13u].z - _819)) + _819;
    float _857 = ((_833 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _804)) + _804;
    float _858 = 1.0 - _857;
    float _859 = _858 * _847;
    float _860 = _858 * _848;
    float _861 = _858 * _849;
    float _865 = (_847 + (-0.039999999105930328369140625)) * _857;
    float _866 = (_848 + (-0.039999999105930328369140625)) * _857;
    float _867 = (_849 + (-0.039999999105930328369140625)) * _857;
    float _868 = _865 + 0.039999999105930328369140625;
    float _869 = _866 + 0.039999999105930328369140625;
    float _870 = _867 + 0.039999999105930328369140625;
    vec4 _879 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _882 = _879.x * TEXCOORD_4;
    float _883 = _541 * 2.0;
    float _887 = (_883 * _512) - _538;
    float _888 = (_883 * _513) - _539;
    float _889 = (_883 * _514) - _540;
    float _890 = abs(_606);
    float _4177 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_750);
    float _904 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _910 = (1.0 - _904) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _911 = _904 * _892;
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _1007 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _1011 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1036 = _939 + _512;
        float _1037 = _943 + _513;
        float _1038 = _947 + _514;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_512, _513, _514), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _4225 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_512, _513, _514), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _4258 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_512, _513, _514), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4291 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1326 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1330 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1353 = _939 + _512;
        float _1354 = _943 + _513;
        float _1355 = _947 + _514;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_512, _513, _514), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4354 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_512, _513, _514), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4387 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_512, _513, _514), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4420 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = _1279;
        _1600 = _1279;
        _1601 = _1279;
        _1602 = _1279;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1291)) + _1291;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1292)) + _1292;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1293)) + _1293;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _887 * 0.5;
    float _1660 = _888 * 0.5;
    float _1661 = _889 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _750);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1786 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1789 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1817 = frontier_phi_19_17_ladder;
        }
        float _1992;
        if (_1786 > 0.0)
        {
            _1992 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1992 = frontier_phi_28_24_ladder;
        }
        float _2287;
        if (_1789 > 0.0)
        {
            _2287 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2287 = frontier_phi_40_35_ladder;
        }
        float _2289 = isnan(_1992) ? _1817 : (isnan(_1817) ? _1992 : min(_1817, _1992));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1783) + _1772;
        float _2295 = (_2290 * _1786) + _1776;
        float _2296 = (_2290 * _1789) + _1780;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_18_40_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_18_40_ladder_2;
        _1807 = frontier_phi_18_40_ladder_1;
        _1809 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1725);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _750);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1885 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1888 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _1997;
        if (_1882 > 0.0)
        {
            _1997 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1997 = frontier_phi_30_26_ladder;
        }
        float _2314;
        if (_1885 > 0.0)
        {
            _2314 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2314 = frontier_phi_42_37_ladder;
        }
        float _2652;
        if (_1888 > 0.0)
        {
            _2652 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2652 = frontier_phi_52_49_ladder;
        }
        float _2654 = isnan(_2314) ? _1997 : (isnan(_1997) ? _2314 : min(_1997, _2314));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1882) + _1871;
        float _2660 = (_2655 * _1885) + _1875;
        float _2661 = (_2655 * _1888) + _1879;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_27_52_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_27_52_ladder_2;
        _1909 = frontier_phi_27_52_ladder_1;
        _1911 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1814);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1924 = (((_910 * _868) + _911) * _882) * ((cbModelParam._m0[1u].w * (_1907 - _1805)) + _1805);
    float _1926 = (((_910 * _869) + _911) * _882) * ((cbModelParam._m0[1u].w * (_1909 - _1807)) + _1807);
    float _1928 = (((_910 * _870) + _911) * _882) * ((cbModelParam._m0[1u].w * (_1911 - _1809)) + _1809);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1984 = _1971 / _1983;
    float _1985 = _1975 / _1983;
    float _1986 = _1979 / _1983;
    float _2133;
    float _2134;
    float _2135;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2013 = ((uint(_1986 > cbSceneParam._m0[59u].y) + uint(_1986 > cbSceneParam._m0[59u].x)) + uint(_1986 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2014 = _2013 + 43u;
        uint _2022 = _2013 + 44u;
        uint _2030 = _2013 + 45u;
        uint _2038 = _2013 + 46u;
        float _2049 = fma(_1983, cbSceneParam._m0[_2014].w, fma(_1979, cbSceneParam._m0[_2014].z, fma(_1975, cbSceneParam._m0[_2014].y, _1971 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1983, cbSceneParam._m0[_2022].w, fma(_1979, cbSceneParam._m0[_2022].z, fma(_1975, cbSceneParam._m0[_2022].y, _1971 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1983, cbSceneParam._m0[_2038].w, fma(_1979, cbSceneParam._m0[_2038].z, fma(_1975, cbSceneParam._m0[_2038].y, _1971 * cbSceneParam._m0[_2038].x)));
        float _2066 = cbSceneParam._m0[33u].z * _2061;
        float _2068 = cbSceneParam._m0[33u].w * _2061;
        float _2071 = fma(_1983, cbSceneParam._m0[_2030].w, fma(_1979, cbSceneParam._m0[_2030].z, fma(_1975, cbSceneParam._m0[_2030].y, _1971 * cbSceneParam._m0[_2030].x))) / _2061;
        float _2119 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
        float _4546 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2126 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2049) / _2061, (_2068 + _2053) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2049) / _2061, (_2053 - _2066) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2066) / _2061, (_2053 - _2068) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2068) / _2061, (_2066 + _2053) / _2061), _2071), 0.0)).x), vec4(0.25)));
        _2133 = 1.0 - (_2126 * cbSceneParam._m0[34u].x);
        _2134 = 1.0 - (_2126 * cbSceneParam._m0[34u].y);
        _2135 = 1.0 - (_2126 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2133 = 1.0;
        _2134 = 1.0;
        _2135 = 1.0;
    }
    float _2199;
    float _2201;
    float _2203;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2187 = fma(_1983, cbSceneParam._m0[63u].w, fma(_1979, cbSceneParam._m0[63u].z, fma(_1975, cbSceneParam._m0[63u].y, _1971 * cbSceneParam._m0[63u].x)));
        float _2188 = fma(_1983, cbSceneParam._m0[60u].w, fma(_1979, cbSceneParam._m0[60u].z, fma(_1975, cbSceneParam._m0[60u].y, _1971 * cbSceneParam._m0[60u].x))) / _2187;
        float _2189 = fma(_1983, cbSceneParam._m0[61u].w, fma(_1979, cbSceneParam._m0[61u].z, fma(_1975, cbSceneParam._m0[61u].y, _1971 * cbSceneParam._m0[61u].x))) / _2187;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2188 >= cbSceneParam._m0[64u].x) && (_2189 >= cbSceneParam._m0[64u].y)) && (_2188 <= cbSceneParam._m0[64u].z)) && (_2189 <= cbSceneParam._m0[64u].w))
        {
            float _2327 = fma(_1983, cbSceneParam._m0[62u].w, fma(_1979, cbSceneParam._m0[62u].z, fma(_1975, cbSceneParam._m0[62u].y, _1971 * cbSceneParam._m0[62u].x))) / _2187;
            float _2331 = isnan(cbSceneParam._m0[41u].w) ? _2327 : (isnan(_2327) ? cbSceneParam._m0[41u].w : max(_2327, cbSceneParam._m0[41u].w));
            float _2374 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
            float _4562 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
            float _2381 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2188, cbSceneParam._m0[33u].w + _2189), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2188, _2189 - cbSceneParam._m0[33u].z), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].z, _2189 - cbSceneParam._m0[33u].w), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2189), _2331), 0.0)).x), vec4(0.25)));
            float _2385 = 1.0 - (_2381 * cbSceneParam._m0[34u].x);
            float _2386 = 1.0 - (_2381 * cbSceneParam._m0[34u].y);
            float _2387 = 1.0 - (_2381 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_39_38_ladder_1 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_39_38_ladder_2 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
        }
        else
        {
            frontier_phi_39_38_ladder = _2134;
            frontier_phi_39_38_ladder_1 = _2133;
            frontier_phi_39_38_ladder_2 = _2135;
        }
        _2199 = frontier_phi_39_38_ladder_1;
        _2201 = frontier_phi_39_38_ladder;
        _2203 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2199 = _2133;
        _2201 = _2134;
        _2203 = _2135;
    }
    uvec4 _2208 = floatBitsToUint(cbInstanceData._m0[_774 + 5u]);
    uint _2210 = _2208.x * 14u;
    uint _2211 = _2210 + 13u;
    float _2218 = _882 + (-1.0);
    float _2223 = (cbLight._m0[_2211].x * _2218) + 1.0;
    float _2224 = (cbLight._m0[_2211].y * _2218) + 1.0;
    float _2225 = (cbLight._m0[_2211].z * _2218) + 1.0;
    float _2226 = (cbLight._m0[_2211].w * _2218) + 1.0;
    uint _2227 = _2210 + 5u;
    float _2233 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2237 = _2210 + 4u;
    float _2246 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2250 = _2210 | 1u;
    float _2261 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_512, _513, _514));
    float _2264 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_512, _513, _514));
    float _4598 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _4609 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2269 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * 0.3183098733425140380859375;
    float _2271 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2278 = ((cbLight._m0[_2227].x * _2233) * _2271) + (((cbLight._m0[_2237].x * _2199) * _2246) * _2269);
    float _2279 = ((_2233 * cbLight._m0[_2227].y) * _2271) + (((cbLight._m0[_2237].y * _2201) * _2246) * _2269);
    float _2280 = ((_2233 * cbLight._m0[_2227].z) * _2271) + (((cbLight._m0[_2237].z * _2203) * _2246) * _2269);
    uvec4 _2284 = floatBitsToUint(cbLight._m0[_2210 + 12u]);
    bool _2286 = _2284.x == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2286)
    {
        _2388 = _2278;
        _2390 = _2279;
        _2392 = _2280;
    }
    else
    {
        uint _2396 = _2210 + 6u;
        float _2412 = (dot(vec3(cbLight._m0[_2210 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4620 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2415 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2388 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2278;
        _2390 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2279;
        _2392 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2280;
    }
    bool _2395 = _2284.y == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2395)
    {
        _2450 = _2388;
        _2452 = _2390;
        _2454 = _2392;
    }
    else
    {
        uint _2623 = _2210 + 7u;
        float _2639 = (dot(vec3(cbLight._m0[_2210 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2640 = _2639 * _2639;
        float _4636 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2641 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2642 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2450 = (((cbLight._m0[_2623].x * 0.3183098733425140380859375) * _2641) * _2642) + _2388;
        _2452 = (((cbLight._m0[_2623].y * 0.3183098733425140380859375) * _2641) * _2642) + _2390;
        _2454 = (((cbLight._m0[_2623].z * 0.3183098733425140380859375) * _2641) * _2642) + _2392;
    }
    uint _2457 = _2210 + 8u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _750) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2210].x + _538;
    float _2473 = cbLight._m0[_2210].y + _539;
    float _2474 = cbLight._m0[_2210].z + _540;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2210].xyz));
    float _4652 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _4663 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2486 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2487 = dot(vec3(_512, _513, _514), vec3(_2479, _2480, _2481));
    float _4674 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2479, _2480, _2481));
    float _4685 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2471 * _2471;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
    float _2508 = 0.959999978542327880859375 - _865;
    float _2510 = 0.959999978542327880859375 - _866;
    float _2511 = 0.959999978542327880859375 - _867;
    float _2518 = 1.0 - _2471;
    float _2529 = (0.5 / (((_2486 * ((_2485 * _2518) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2518) + _2471) * _2485))) * _2485;
    float _4696 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    uint _2545 = _2210 + 9u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _750) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2250].x + _538;
    float _2559 = cbLight._m0[_2250].y + _539;
    float _2560 = cbLight._m0[_2250].z + _540;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2250].xyz));
    float _4707 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2572 = dot(vec3(_512, _513, _514), vec3(_2565, _2566, _2567));
    float _4718 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2576 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2565, _2566, _2567));
    float _4729 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2580 = _2557 * _2557;
    float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
    float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2598 = 1.0 - _2557;
    float _2608 = (0.5 / (((_2486 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2598) + _2557) * _2571))) * _2571;
    float _4740 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
    float _2620 = (((((_2591 * _2508) + _868) * cbLight._m0[_2545].x) * _2610) * _2233) + ((((cbLight._m0[_2457].x * _2199) * ((_2507 * _2508) + _868)) * _2531) * _2246);
    float _2621 = (((((_2591 * _2510) + _869) * cbLight._m0[_2545].y) * _2610) * _2233) + ((((cbLight._m0[_2457].y * _2201) * ((_2507 * _2510) + _869)) * _2531) * _2246);
    float _2622 = (((((_2591 * _2511) + _870) * cbLight._m0[_2545].z) * _2610) * _2233) + ((((cbLight._m0[_2457].z * _2203) * ((_2507 * _2511) + _870)) * _2531) * _2246);
    float _2678;
    float _2680;
    float _2682;
    if (_2286)
    {
        _2678 = _2620;
        _2680 = _2621;
        _2682 = _2622;
    }
    else
    {
        uint _2684 = _2210 + 2u;
        uint _2688 = _2210 + 10u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _750) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _538;
        float _2705 = cbLight._m0[_2684].y + _539;
        float _2706 = cbLight._m0[_2684].z + _540;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2684].xyz));
        float _4751 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2718 = dot(vec3(_512, _513, _514), vec3(_2711, _2712, _2713));
        float _4762 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4773 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2486 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2744) + _2703) * _2717))) * _2717;
        float _4784 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2678 = (((((_2737 * _2508) + _868) * cbLight._m0[_2688].x) * _2756) * _2757) + _2620;
        _2680 = (((((_2737 * _2510) + _869) * cbLight._m0[_2688].y) * _2756) * _2757) + _2621;
        _2682 = (((((_2737 * _2511) + _870) * cbLight._m0[_2688].z) * _2756) * _2757) + _2622;
    }
    float _2788;
    float _2790;
    float _2792;
    if (_2395)
    {
        _2788 = _2678;
        _2790 = _2680;
        _2792 = _2682;
    }
    else
    {
        uint _2799 = _2210 + 3u;
        uint _2803 = _2210 + 11u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _750) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _538;
        float _2820 = cbLight._m0[_2799].y + _539;
        float _2821 = cbLight._m0[_2799].z + _540;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2799].xyz));
        float _4800 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2833 = dot(vec3(_512, _513, _514), vec3(_2826, _2827, _2828));
        float _4811 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4822 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2852 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2859 = 1.0 - _2818;
        float _2869 = (0.5 / (((_2486 * ((_2832 * _2859) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2859) + _2818) * _2832))) * _2832;
        float _4833 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2788 = (((((_2852 * _2508) + _868) * cbLight._m0[_2803].x) * _2871) * _2872) + _2678;
        _2790 = (((((_2852 * _2510) + _869) * cbLight._m0[_2803].y) * _2871) * _2872) + _2680;
        _2792 = (((((_2852 * _2511) + _870) * cbLight._m0[_2803].z) * _2871) * _2872) + _2682;
    }
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_2208.y == 0u)
    {
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2894)));
        float _2915 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
        }
        else
        {
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3207)
                {
                    frontier_phi_73_pred = _3196;
                    frontier_phi_73_pred_1 = _3195;
                    frontier_phi_73_pred_2 = _3194;
                    frontier_phi_73_pred_3 = _3193;
                    frontier_phi_73_pred_4 = _3192;
                    frontier_phi_73_pred_5 = _3191;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3191;
                    _3337 = _3192;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3206;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3197 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _1984;
                        float _3403 = _3362.y - _1985;
                        float _3404 = _3362.z - _1986;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_694, _697, _700), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4859 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3432 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3436 = (-0.0) - _1984;
                        float _3437 = (-0.0) - _1985;
                        float _3438 = (-0.0) - _1986;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3452 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3453 = 1.0 - _892;
                        float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                        float _3461 = _3460 * _3460;
                        float _3462 = _3461 * _3461;
                        float _3463 = _3443 + _3409;
                        float _3464 = _3444 + _3410;
                        float _3465 = _3445 + _3411;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3473 = dot(vec3(_694, _697, _700), vec3(_3443, _3444, _3445));
                        float _4875 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3477 = dot(vec3(_694, _697, _700), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                        float _4886 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                        float _3485 = _3422 * _3461;
                        float _3486 = _3485 * _3485;
                        float _3489 = ((1.0 - _3486) * _3412) + _3486;
                        float _4897 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3491 = 1.0 - _3461;
                        float _3501 = (0.5 / (((_3490 * ((_3476 * _3491) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3461) * _3476))) * _3490;
                        float _4908 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3512 = (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3484 * _3484) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3266 = (_3432 * _3381.x) + _3339;
                        _3267 = (_3432 * _3381.y) + _3340;
                        _3268 = (_3432 * _3381.z) + _3341;
                        _3263 = (_3512 * _3398.x) + _3336;
                        _3264 = (_3512 * _3398.y) + _3337;
                        _3265 = (_3512 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3263;
                            _3337 = _3264;
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_73_pred = _3268;
                    frontier_phi_73_pred_1 = _3267;
                    frontier_phi_73_pred_2 = _3266;
                    frontier_phi_73_pred_3 = _3265;
                    frontier_phi_73_pred_4 = _3264;
                    frontier_phi_73_pred_5 = _3263;
                }
                _3041 = frontier_phi_73_pred;
                _3039 = frontier_phi_73_pred_1;
                _3037 = frontier_phi_73_pred_2;
                _3035 = frontier_phi_73_pred_3;
                _3033 = frontier_phi_73_pred_4;
                _3031 = frontier_phi_73_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3031;
                    _3192 = _3033;
                    _3193 = _3035;
                    _3194 = _3037;
                    _3195 = _3039;
                    _3196 = _3041;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
        }
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.z;
        uint _3047 = (_3045 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3047) & _2925) == 0u)
        {
            _3159 = _3030;
            _3161 = _3032;
            _3163 = _3034;
            _3165 = _3036;
            _3167 = _3038;
            _3169 = _3040;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float _3185 = _3184 * _1984;
            float _3186 = _3184 * _1985;
            float _3187 = _3184 * _1986;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3047 < ((_3045 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3319 = _3030;
                float _3320 = _3032;
                float _3321 = _3034;
                float _3322 = _3036;
                float _3323 = _3038;
                float _3324 = _3040;
                uint _3325 = _3047;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3335)
                    {
                        frontier_phi_84_pred = _3323;
                        frontier_phi_84_pred_1 = _3322;
                        frontier_phi_84_pred_2 = _3321;
                        frontier_phi_84_pred_3 = _3320;
                        frontier_phi_84_pred_4 = _3319;
                        frontier_phi_84_pred_5 = _3324;
                    }
                    else
                    {
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3539 = _3319;
                        float _3540 = _3320;
                        float _3541 = _3321;
                        float _3542 = _3322;
                        float _3543 = _3323;
                        float _3544 = _3324;
                        uint _3545 = _3334;
                        uint _3546;
                        vec4 _3571;
                        float _3572;
                        vec4 _3587;
                        vec3 _3599;
                        vec4 _3614;
                        vec4 _3630;
                        float _3677;
                        bool _3678;
                        for (;;)
                        {
                            uint _3556 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3545));
                            _3546 = (_3545 + 4294967295u) & _3545;
                            uint _3558 = _3556 * 40u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3572 = _3571.w;
                            uint _3574 = (_3556 * 40u) + 4u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3556 * 40u) + 8u;
                            _3599 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x));
                            uint _3601 = (_3556 * 40u) + 16u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3617 = (_3556 * 40u) + 20u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3633 = (_3556 * 40u) + 24u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3652 = (_3556 * 40u) + 28u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3677 = fma(_1986, _3665.z, fma(_1985, _3665.y, _3665.x * _1984)) + _3665.w;
                            _3678 = !((fma(_1986, _3646.z, fma(_1985, _3646.y, _3646.x * _1984)) + _3646.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3678)
                            {
                                float _3705 = _3571.x - _1984;
                                float _3706 = _3571.y - _1985;
                                float _3707 = _3571.z - _1986;
                                float _3708 = dot(vec3(_3705, _3706, _3707), vec3(_3705, _3706, _3707));
                                float _3711 = inversesqrt(_3708);
                                float _3712 = _3711 * _3705;
                                float _3713 = _3711 * _3706;
                                float _3714 = _3711 * _3707;
                                float _3718 = 1.0 - (_3708 / (_3572 * _3572));
                                float _4919 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3723 = sqrt(_3708) * _3587.w;
                                float _3725 = 1.39999997615814208984375 / (_3723 + 1.39999997615814208984375);
                                float _3726 = _3725 * _3725;
                                float _3729 = ((1.0 - _3726) * dot(vec3(_3712, _3713, _3714), vec3(_694, _697, _700))) + _3726;
                                float _3732 = _3723 * _3723;
                                float _3736 = (fma(_1986, _3614.z, fma(_1985, _3614.y, _3614.x * _1984)) + _3614.w) / _3677;
                                float _3737 = (fma(_1986, _3630.z, fma(_1985, _3630.y, _3630.x * _1984)) + _3630.w) / _3677;
                                float _3741 = 1.0 - dot(vec2(_3736, _3737), vec2(_3736, _3737));
                                float _4935 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3743 = _3742 * (((isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0))) * _3719) / ((_3732 * 0.699999988079071044921875) + 1.0));
                                float _3755 = exp2(log2(1.0 / ((_3732 * 3.5) + 5.0)) * 0.25);
                                float _3756 = 1.0 - _892;
                                float _3763 = sqrt(1.0 - ((1.0 - (_3756 * _3756)) * (1.0 - (_3755 * _3755))));
                                float _3764 = _3763 * _3763;
                                float _3765 = _3764 * _3764;
                                float _3766 = _3712 - _3185;
                                float _3767 = _3713 - _3186;
                                float _3768 = _3714 - _3187;
                                float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                                float _3776 = dot(vec3(_694, _697, _700), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4946 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3780 = dot(vec3(_694, _697, _700), vec3(_3772 * _3766, _3772 * _3767, _3772 * _3768));
                                float _4957 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3787 = ((_3783 * _3783) * (_3765 + (-1.0))) + 1.0;
                                float _3788 = _3725 * _3764;
                                float _3789 = _3788 * _3788;
                                float _3795 = ((1.0 - _3789) * dot(vec3(_694, _697, _700), vec3(_3712, _3713, _3714))) + _3789;
                                float _4968 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3797 = 1.0 - _3764;
                                float _3807 = (0.5 / (((_3796 * ((_3779 * _3797) + _3764)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3764) * _3779))) * _3796;
                                float _4979 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3817 = (_3742 * _3719) * (((_3765 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3787 * _3787) * ((_3732 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3743 * _3587.y;
                                frontier_phi_90_pred_1 = _3743 * _3587.x;
                                frontier_phi_90_pred_2 = _3817 * _3599.z;
                                frontier_phi_90_pred_3 = _3817 * _3599.y;
                                frontier_phi_90_pred_4 = _3817 * _3599.x;
                                frontier_phi_90_pred_5 = _3743 * _3587.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3825 = frontier_phi_90_pred;
                            _3824 = frontier_phi_90_pred_1;
                            _3823 = frontier_phi_90_pred_2;
                            _3822 = frontier_phi_90_pred_3;
                            _3821 = frontier_phi_90_pred_4;
                            _3826 = frontier_phi_90_pred_5;
                            _3529 = _3824 + _3542;
                            _3530 = _3825 + _3543;
                            _3531 = _3826 + _3544;
                            _3526 = _3821 + _3539;
                            _3527 = _3822 + _3540;
                            _3528 = _3823 + _3541;
                            if (_3546 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3546;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3530;
                        frontier_phi_84_pred_1 = _3529;
                        frontier_phi_84_pred_2 = _3528;
                        frontier_phi_84_pred_3 = _3527;
                        frontier_phi_84_pred_4 = _3526;
                        frontier_phi_84_pred_5 = _3531;
                    }
                    _3168 = frontier_phi_84_pred;
                    _3166 = frontier_phi_84_pred_1;
                    _3164 = frontier_phi_84_pred_2;
                    _3162 = frontier_phi_84_pred_3;
                    _3160 = frontier_phi_84_pred_4;
                    _3170 = frontier_phi_84_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3160;
                        _3320 = _3162;
                        _3321 = _3164;
                        _3322 = _3166;
                        _3323 = _3168;
                        _3324 = _3170;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3170;
                frontier_phi_65_66_ladder_1 = _3166;
                frontier_phi_65_66_ladder_2 = _3168;
                frontier_phi_65_66_ladder_3 = _3162;
                frontier_phi_65_66_ladder_4 = _3160;
                frontier_phi_65_66_ladder_5 = _3164;
            }
            else
            {
                frontier_phi_65_66_ladder = _3040;
                frontier_phi_65_66_ladder_1 = _3036;
                frontier_phi_65_66_ladder_2 = _3038;
                frontier_phi_65_66_ladder_3 = _3032;
                frontier_phi_65_66_ladder_4 = _3030;
                frontier_phi_65_66_ladder_5 = _3034;
            }
            _3159 = frontier_phi_65_66_ladder_4;
            _3161 = frontier_phi_65_66_ladder_3;
            _3163 = frontier_phi_65_66_ladder_5;
            _3165 = frontier_phi_65_66_ladder_1;
            _3167 = frontier_phi_65_66_ladder_2;
            _3169 = frontier_phi_65_66_ladder;
        }
        float _3174 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2937 = (_3174 * _3165) + _2450;
        _2939 = (_3174 * _3167) + _2452;
        _2941 = (_3174 * _3169) + _2454;
        _2943 = ((_3159 * _868) * _3174) + _2788;
        _2945 = ((_3161 * _869) * _3174) + _2790;
        _2947 = ((_3163 * _870) * _3174) + _2792;
    }
    else
    {
        _2937 = _2450;
        _2939 = _2452;
        _2941 = _2454;
        _2943 = _2788;
        _2945 = _2790;
        _2947 = _2792;
    }
    uint _2953 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _2959 = cbInstanceData._m0[_2953].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _554) + cbMatDynParam._m0[7u].x) + (((_595 - (_595 * _520)) + (cbMatDynParam._m0[11u].x * _626)) * cbMatDynParam._m0[9u].x));
    float _2960 = cbInstanceData._m0[_2953].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _554) + cbMatDynParam._m0[7u].y) + (((_597 - (_597 * _520)) + (cbMatDynParam._m0[11u].y * _626)) * cbMatDynParam._m0[9u].y));
    float _2961 = cbInstanceData._m0[_2953].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _554) + cbMatDynParam._m0[7u].z) + (((_599 - (_599 * _520)) + (cbMatDynParam._m0[11u].z * _626)) * cbMatDynParam._m0[9u].z));
    float _4995 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _5006 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _5017 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _5028 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _2979 = (((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2937 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _882))) + ((_2943 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + _2959;
    float _2981 = (_2960 + ((_2945 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2939 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _882)));
    float _2983 = (_2961 + ((_2947 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1714)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2941 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _882)));
    float _2984 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
    float _2985 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
    float _2986 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2991 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) - _581) * _554) + _581));
    float _2996 = cbInstanceData._m0[_774 + 6u].w * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)));
    float _3001 = _670 / cbSceneParam._m0[86u].x;
    float _3002 = _671 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _3055 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _3056 = _3055 / _652;
        float _3067 = _3056 * _291;
        float _3068 = _292 * _3056;
        float _3069 = (-0.0) - _3068;
        float _3070 = _3056 * _293;
        float _3072 = (cbSceneParam._m0[77u].w * _3069) / _3055;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3068;
        float _3080 = sqrt(((_3067 * _3067) + (_3068 * _3068)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3055)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3276;
        if (abs((_3069 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3276 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3222 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3276 = ((abs(_3080 / _3069) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3090 * _3231) - exp2(_3090 * _3232)) * _3220))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3278 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3287 = exp2((_3276 * (-1.44269502162933349609375)) * (1.0 - _3278.w));
        float _3288 = log2(_3287);
        float _3304 = log2(_3021);
        _3092 = (exp2(_3304 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].x)) * _3278.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3094 = (exp2(_3304 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].y)) * _3278.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3096 = (exp2(_3304 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3288 * cbSceneParam._m0[78u].z)) * _3278.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3098 = _3287 * _3021;
    }
    else
    {
        _3092 = _3018;
        _3094 = _3019;
        _3096 = _3020;
        _3098 = _3021;
    }
    bool _3314;
    vec4 _3108;
    vec4 _3130;
    float _3132;
    float _3136;
    float _3137;
    float _3138;
    float _3141;
    float _3144;
    float _3147;
    float _3148;
    bool _3158;
    for (;;)
    {
        _3108 = cbMatDynParam._m0[0u];
        float _3110 = roundEven(_3108.y);
        bool _3111 = _3110 == 3.0;
        float _3112 = log2(_3098);
        float _3116 = exp2(_3112 * cbSceneParam._m0[78u].x);
        float _3117 = exp2(_3112 * cbSceneParam._m0[78u].y);
        float _3118 = exp2(_3112 * cbSceneParam._m0[78u].z);
        float _3119 = _3116 * _2984;
        float _3120 = _3117 * _2985;
        float _3121 = _3118 * _2986;
        float _3128 = _659 + (-0.5);
        _3130 = cbMtdParam._m0[1u];
        _3132 = _3130.y * _3128;
        float _3135 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3136 = _3135 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
        _3137 = _3135 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
        _3138 = _3135 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
        _3141 = ((_2991 * _2959) * _3116) * _3135;
        _3144 = ((_2991 * _2960) * _3117) * _3135;
        _3147 = ((_2991 * _2961) * _3118) * _3135;
        _3148 = _3128 * 0.999000012874603271484375;
        _3158 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3158)
        {
            if ((cbInstanceData._m0[_774 + 7u].x + _3148) < 0.5)
            {
                _3314 = true;
                break;
            }
        }
        uint _3255 = _775 + uint(_3108.w);
        if ((cbInstanceData._m0[_3255].w < 1.0) && ((cbInstanceData._m0[_3255].w + _3148) < 0.5))
        {
            _3314 = true;
            break;
        }
        if ((_3132 + _402) < _3130.x)
        {
            _3314 = true;
            break;
        }
        _3314 = false;
        break;
    }
    float _3517;
    if (_3314)
    {
        discard_state = true;
        _3517 = 0.0;
    }
    else
    {
        _3517 = _2996;
    }
    SV_Target.x = _3136;
    SV_Target.y = _3137;
    SV_Target.z = _3138;
    SV_Target.w = _3517;
    SV_Target_1.x = _3141;
    SV_Target_1.y = _3144;
    SV_Target_1.z = _3147;
    SV_Target_1.w = _2996;
    discard_exit();
}


