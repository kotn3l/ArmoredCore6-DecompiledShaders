#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1283;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _252.z;
    float _258 = _252.w;
    float _264 = exp2(log2(_257 * 22.0) * 260.0);
    float _265 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _265 : (isnan(_265) ? 1.0 : min(_265, 1.0));
    vec4 _280 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _291 = cbMtdParam._m0[10u].x * _280.x;
    float _292 = cbMtdParam._m0[10u].y * _280.y;
    float _293 = cbMtdParam._m0[10u].z * _280.z;
    vec4 _305 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = (((cbMtdParam._m0[9u].x * _305.x) - _291) * _266) + _291;
    float _327 = (((cbMtdParam._m0[9u].y * _305.y) - _292) * _266) + _292;
    float _328 = (((cbMtdParam._m0[9u].z * _305.z) - _293) * _266) + _293;
    float _333 = exp2(log2(1.0 - _258) * 8.0);
    vec4 _345 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _370 = exp2(log2(_258) * 8.0);
    vec4 _383 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _408 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _416 = (((((cbMtdParam._m0[12u].x * _345.x) - _326) * _333) + _326) * 4.55000019073486328125) * _408.x;
    float _418 = (((((cbMtdParam._m0[12u].y * _345.y) - _327) * _333) + _327) * 4.55000019073486328125) * _408.y;
    float _420 = (((((cbMtdParam._m0[12u].z * _345.z) - _328) * _333) + _328) * 4.55000019073486328125) * _408.z;
    float _427 = (((cbMtdParam._m0[11u].x * _383.x) - _416) * _370) + _416;
    float _428 = (((cbMtdParam._m0[11u].y * _383.y) - _418) * _370) + _418;
    float _429 = (((cbMtdParam._m0[11u].z * _383.z) - _420) * _370) + _420;
    float _430 = _408.w * _305.w;
    float _458 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _266) + cbMtdParam._m0[15u].y;
    float _461 = ((cbMtdParam._m0[14u].y - _458) * _333) + _458;
    float _465 = ((cbMtdParam._m0[15u].x - _461) * _370) + _461;
    vec4 _478 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _487 = cbMtdParam._m0[13u].y + _478.z;
    vec4 _499 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _508 = (((_499.z - _487) + cbMtdParam._m0[13u].x) * _266) + _487;
    vec4 _521 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _555 = (((_266 * (_257 + (-0.5))) + 0.5) * 2.0) * ((((_521.z - _508) + cbMtdParam._m0[14u].x) * _333) + _508);
    float _559 = (((_542.z - _555) + cbMtdParam._m0[13u].w) * _370) + _555;
    float _563 = (_252.x * 2.0) + (-1.0);
    float _565 = (_252.y * 2.0) + (-1.0);
    float _566 = dot(vec2(_563, _565), vec2(_563, _565));
    float _3651 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _571 = sqrt(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))));
    float _576 = ((_499.x - _480) * _266) + _480;
    float _577 = ((_499.y - _481) * _266) + _481;
    float _582 = ((_521.x - _576) * _333) + _576;
    float _583 = ((_521.y - _577) * _333) + _577;
    float _596 = ((((((_542.x - _582) * _370) + _582) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _563;
    float _597 = ((((((_542.y - _583) * _370) + _583) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _565;
    float _600 = fma(_571, _236, fma(_597, _228 * TANGENT.x, (_214 * _206) * _596));
    float _603 = fma(_571, _237, fma(_597, _228 * TANGENT.y, (_214 * _207) * _596));
    float _606 = fma(_571, _238, fma(_597, _228 * TANGENT.z, (_214 * _208) * _596));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3662 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _614 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _615 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _616 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _617 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _618 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _619 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _703 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _705 = _703.w;
    float _723 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _726 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _729 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    vec4 _731 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _733 = _731.x;
    float _745 = (((_731.y - _615) + (_731.w * _615)) * cbMtdParam._m0[3u].x) + _615;
    vec4 _746 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _762 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_733 * _733)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _746.z;
    float _770 = (((cbMatDynParam._m0[15u].x - _619) * cbMatDynParam._m0[15u].w) * _762) + _619;
    float _778 = ((_762 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _745)) + _745;
    uint _802 = uint(roundEven(NORMAL.w)) * 13u;
    uint _804 = (_802 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * _616) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * _617) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * _618) * cbInstanceData._m0[_804].z;
    float _3728 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    vec4 _816 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _821 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _832 = (((_821.x - _770) + (_821.w * _770)) * cbMtdParam._m0[3u].x) + _770;
    float _845 = (cbMtdParam._m0[3u].x * (((_813 * _705) - _813) + _816.x)) + _813;
    float _846 = (cbMtdParam._m0[3u].x * (((_814 * _705) - _814) + _816.y)) + _814;
    float _847 = (cbMtdParam._m0[3u].x * (((_815 * _705) - _815) + _816.z)) + _815;
    float _861 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_770 * (_616 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_770 * (_617 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_770 * (_618 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _865 = _861 * cbMatDynParam._m0[13u].w;
    float _875 = (_865 * (cbMatDynParam._m0[13u].x - _845)) + _845;
    float _876 = (_865 * (cbMatDynParam._m0[13u].y - _846)) + _846;
    float _877 = (_865 * (cbMatDynParam._m0[13u].z - _847)) + _847;
    float _885 = ((_861 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _832)) + _832;
    float _886 = 1.0 - _885;
    float _887 = _886 * _875;
    float _888 = _886 * _876;
    float _889 = _886 * _877;
    float _893 = (_875 + (-0.039999999105930328369140625)) * _885;
    float _894 = (_876 + (-0.039999999105930328369140625)) * _885;
    float _895 = (_877 + (-0.039999999105930328369140625)) * _885;
    float _896 = _893 + 0.039999999105930328369140625;
    float _897 = _894 + 0.039999999105930328369140625;
    float _898 = _895 + 0.039999999105930328369140625;
    vec4 _907 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _700, cbSceneParam._m0[86u].y * _701));
    float _910 = _907.x * TEXCOORD_4;
    float _911 = dot(vec3(_611, _612, _613), vec3(_692, _693, _694));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _611) - _692;
    float _919 = (_914 * _612) - _693;
    float _920 = (_914 * _613) - _694;
    float _924 = abs(dot(vec3(_692, _693, _694), vec3(_611, _612, _613)));
    float _3761 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_778);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _945 = (1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _946 = _939 * _926;
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1009 = fma(_982, cbModelParam._m0[26u].z, fma(_978, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974));
        float _1013 = fma(_982, cbModelParam._m0[27u].z, fma(_978, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974));
        float _1017 = fma(_982, cbModelParam._m0[28u].z, fma(_978, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974));
        float _1040 = _974 + _611;
        float _1041 = _978 + _612;
        float _1042 = _982 + _613;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1009 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1013 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1017 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_611, _612, _613), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3809 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_611, _612, _613), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3842 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_611, _612, _613), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3875 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1323 = fma(_982, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _974));
        float _1327 = fma(_982, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _974));
        float _1331 = fma(_982, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _974));
        float _1354 = _974 + _611;
        float _1355 = _978 + _612;
        float _1356 = _982 + _613;
        float _1366 = fma(_1356, cbModelParam._m0[30u].z, fma(_1355, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1354)) - _1323;
        float _1367 = fma(_1356, cbModelParam._m0[31u].z, fma(_1355, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1354)) - _1327;
        float _1368 = fma(_1356, cbModelParam._m0[32u].z, fma(_1355, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1354)) - _1331;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1323 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1327 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[35u].z) + ((((((_1331 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1422 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1389.x + (-0.5));
        float _1424 = _1422 * (_1389.y + (-0.5));
        float _1425 = _1422 * (_1389.z + (-0.5));
        float _1432 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1396.x + (-0.5));
        float _1434 = _1432 * (_1396.y + (-0.5));
        float _1435 = _1432 * (_1396.z + (-0.5));
        float _1442 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1403.x + (-0.5));
        float _1444 = _1442 * (_1403.y + (-0.5));
        float _1445 = _1442 * (_1403.z + (-0.5));
        float _1452 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1410.x + (-0.5));
        float _1454 = _1452 * (_1410.y + (-0.5));
        float _1455 = _1452 * (_1410.z + (-0.5));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = _1423 * 0.5;
        float _1460 = _1433 * 0.5;
        float _1461 = _1443 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_611, _612, _613), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3938 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1486 + 1.0))) + _1491) * _1456;
        float _1501 = _1424 * 0.5;
        float _1502 = _1434 * 0.5;
        float _1503 = _1444 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1517 = (dot(vec3(_611, _612, _613), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1526 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _3971 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1528 + 1.0))) + _1533) * _1457;
        float _1543 = _1425 * 0.5;
        float _1544 = _1435 * 0.5;
        float _1545 = _1445 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_611, _612, _613), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4004 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1570 + 1.0))) + _1575) * _1458;
        _1592 = _1425;
        _1593 = _1424;
        _1594 = _1423;
        _1595 = _1435;
        _1596 = _1434;
        _1597 = _1433;
        _1598 = _1445;
        _1599 = _1444;
        _1600 = _1443;
        _1601 = _1458;
        _1602 = _1457;
        _1603 = _1456;
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
    }
    else
    {
        _1592 = _1283;
        _1593 = _1283;
        _1594 = _1283;
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = _1283;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1295)) + _1295;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1296)) + _1296;
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1297)) + _1297;
    float _1639 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1616));
    float _1660 = _918 * 0.5;
    float _1661 = _919 * 0.5;
    float _1662 = _920 * 0.5;
    float _1663 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1666 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1669 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1676 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1680 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1684 = dot(vec4(_1660, _1661, _1662, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1691 = dot(vec4(cbModelParam._m0[39u]), vec4(_1660, _1661, _1662, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1660, _1661, _1662, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_982, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_982, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_982, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1787 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1790 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1818 = frontier_phi_16_14_ladder;
        }
        float _2045;
        if (_1787 > 0.0)
        {
            _2045 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2045 = frontier_phi_25_21_ladder;
        }
        float _2302;
        if (_1790 > 0.0)
        {
            _2302 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2302 = frontier_phi_37_32_ladder;
        }
        float _2304 = isnan(_2045) ? _1818 : (isnan(_1818) ? _2045 : min(_1818, _2045));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1784) + _1773;
        float _2310 = (_2305 * _1787) + _1777;
        float _2311 = (_2305 * _1790) + _1781;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_15_37_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_15_37_ladder_2;
        _1808 = frontier_phi_15_37_ladder_1;
        _1810 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1726);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_982, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_982, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_982, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1886 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1889 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2050;
        if (_1883 > 0.0)
        {
            _2050 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2050 = frontier_phi_27_23_ladder;
        }
        float _2329;
        if (_1886 > 0.0)
        {
            _2329 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2329 = frontier_phi_39_34_ladder;
        }
        float _2542;
        if (_1889 > 0.0)
        {
            _2542 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2542 = frontier_phi_48_45_ladder;
        }
        float _2544 = isnan(_2329) ? _2050 : (isnan(_2050) ? _2329 : min(_2050, _2329));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1883) + _1872;
        float _2550 = (_2545 * _1886) + _1876;
        float _2551 = (_2545 * _1889) + _1880;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_24_48_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_24_48_ladder_2;
        _1910 = frontier_phi_24_48_ladder_1;
        _1912 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1815);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1925 = (((_945 * _896) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1908 - _1806)) + _1806);
    float _1927 = (((_945 * _897) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1910 - _1808)) + _1808);
    float _1929 = (((_945 * _898) + _946) * _910) * ((cbModelParam._m0[1u].w * (_1912 - _1810)) + _1810);
    float _1932 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    vec4 _1946 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_700, _701));
    float _1948 = _1946.w;
    float _1960 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1948);
    float _1961 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1948);
    float _1962 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1948);
    uvec4 _1966 = floatBitsToUint(cbInstanceData._m0[_802 + 5u]);
    uint _1968 = _1966.x * 14u;
    uint _1969 = _1968 + 13u;
    float _1976 = _910 + (-1.0);
    float _1981 = (cbLight._m0[_1969].x * _1976) + 1.0;
    float _1982 = (cbLight._m0[_1969].y * _1976) + 1.0;
    float _1983 = (cbLight._m0[_1969].z * _1976) + 1.0;
    float _1984 = (cbLight._m0[_1969].w * _1976) + 1.0;
    uint _1985 = _1968 + 5u;
    float _1991 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
    uint _1995 = _1968 + 4u;
    float _2004 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _2008 = _1968 | 1u;
    float _2019 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_611, _612, _613));
    float _2022 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_611, _612, _613));
    float _4140 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _4151 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2027 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.3183098733425140380859375;
    float _2029 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _2036 = ((cbLight._m0[_1985].x * _1991) * _2029) + (((cbLight._m0[_1995].x * _1960) * _2004) * _2027);
    float _2037 = ((_1991 * cbLight._m0[_1985].y) * _2029) + (((cbLight._m0[_1995].y * _1961) * _2004) * _2027);
    float _2038 = ((_1991 * cbLight._m0[_1985].z) * _2029) + (((cbLight._m0[_1995].z * _1962) * _2004) * _2027);
    uvec4 _2042 = floatBitsToUint(cbLight._m0[_1968 + 12u]);
    bool _2044 = _2042.x == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2044)
    {
        _2055 = _2036;
        _2057 = _2037;
        _2059 = _2038;
    }
    else
    {
        uint _2063 = _1968 + 6u;
        float _2079 = (dot(vec3(cbLight._m0[_1968 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _4162 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2082 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2055 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _2036;
        _2057 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _2037;
        _2059 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _2038;
    }
    bool _2062 = _2042.y == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2062)
    {
        _2100 = _2055;
        _2102 = _2057;
        _2104 = _2059;
    }
    else
    {
        uint _2273 = _1968 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1968 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4178 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2292 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2100 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2055;
        _2102 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2057;
        _2104 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2059;
    }
    uint _2107 = _1968 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _778) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1968].x + _692;
    float _2123 = cbLight._m0[_1968].y + _693;
    float _2124 = cbLight._m0[_1968].z + _694;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_1968].xyz));
    float _4194 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2136 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2137 = dot(vec3(_611, _612, _613), vec3(_2129, _2130, _2131));
    float _4216 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2129, _2130, _2131));
    float _4227 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
    float _2158 = 0.959999978542327880859375 - _893;
    float _2160 = 0.959999978542327880859375 - _894;
    float _2161 = 0.959999978542327880859375 - _895;
    float _2168 = 1.0 - _2121;
    float _2179 = (0.5 / (((_2136 * ((_2135 * _2168) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2168) + _2121) * _2135))) * _2135;
    float _4238 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2195 = _1968 + 9u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2008].w)) * _778) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2008].x + _692;
    float _2209 = cbLight._m0[_2008].y + _693;
    float _2210 = cbLight._m0[_2008].z + _694;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2008].xyz));
    float _4249 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2222 = dot(vec3(_611, _612, _613), vec3(_2215, _2216, _2217));
    float _4260 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2226 = dot(vec3(cbLight._m0[_2008].xyz), vec3(_2215, _2216, _2217));
    float _4271 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2230 = _2207 * _2207;
    float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
    float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
    float _2248 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2136 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2248) + _2207) * _2221))) * _2221;
    float _4282 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
    float _2270 = (((((_2241 * _2158) + _896) * cbLight._m0[_2195].x) * _2260) * _1991) + ((((cbLight._m0[_2107].x * _1960) * ((_2157 * _2158) + _896)) * _2181) * _2004);
    float _2271 = (((((_2241 * _2160) + _897) * cbLight._m0[_2195].y) * _2260) * _1991) + ((((cbLight._m0[_2107].y * _1961) * ((_2157 * _2160) + _897)) * _2181) * _2004);
    float _2272 = (((((_2241 * _2161) + _898) * cbLight._m0[_2195].z) * _2260) * _1991) + ((((cbLight._m0[_2107].z * _1962) * ((_2157 * _2161) + _898)) * _2181) * _2004);
    float _2334;
    float _2336;
    float _2338;
    if (_2044)
    {
        _2334 = _2270;
        _2336 = _2271;
        _2338 = _2272;
    }
    else
    {
        uint _2340 = _1968 + 2u;
        uint _2344 = _1968 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _778) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _692;
        float _2361 = cbLight._m0[_2340].y + _693;
        float _2362 = cbLight._m0[_2340].z + _694;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2340].xyz));
        float _4293 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2374 = dot(vec3(_611, _612, _613), vec3(_2367, _2368, _2369));
        float _4304 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4315 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2136 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2400) + _2359) * _2373))) * _2373;
        float _4326 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2334 = (((((_2393 * _2158) + _896) * cbLight._m0[_2344].x) * _2412) * _2413) + _2270;
        _2336 = (((((_2393 * _2160) + _897) * cbLight._m0[_2344].y) * _2412) * _2413) + _2271;
        _2338 = (((((_2393 * _2161) + _898) * cbLight._m0[_2344].z) * _2412) * _2413) + _2272;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2062)
    {
        _2448 = _2334;
        _2450 = _2336;
        _2452 = _2338;
    }
    else
    {
        uint _2459 = _1968 + 3u;
        uint _2463 = _1968 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _778) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _692;
        float _2480 = cbLight._m0[_2459].y + _693;
        float _2481 = cbLight._m0[_2459].z + _694;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2459].xyz));
        float _4342 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2493 = dot(vec3(_611, _612, _613), vec3(_2486, _2487, _2488));
        float _4353 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4364 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0);
        float _2519 = 1.0 - _2478;
        float _2529 = (0.5 / (((_2136 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2519) + _2478) * _2492))) * _2492;
        float _4375 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
        _2448 = (((((_2512 * _2158) + _896) * cbLight._m0[_2463].x) * _2531) * _2532) + _2334;
        _2450 = (((((_2512 * _2160) + _897) * cbLight._m0[_2463].y) * _2531) * _2532) + _2336;
        _2452 = (((((_2512 * _2161) + _898) * cbLight._m0[_2463].z) * _2531) * _2532) + _2338;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1966.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2919)
                {
                    frontier_phi_63_pred = _2908;
                    frontier_phi_63_pred_1 = _2907;
                    frontier_phi_63_pred_2 = _2906;
                    frontier_phi_63_pred_3 = _2905;
                    frontier_phi_63_pred_4 = _2904;
                    frontier_phi_63_pred_5 = _2903;
                }
                else
                {
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    uint _3033;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2918;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3037 = uint(findLSB(_3033)) + (_2909 << 5u);
                        uint _3034 = (_3033 + 4294967295u) & _3033;
                        uint _3039 = _3037 * 48u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3059 = (_3037 * 48u) + 4u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3078 = (_3037 * 48u) + 8u;
                        vec3 _3089 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x));
                        float _3093 = _3053.x - _2608;
                        float _3094 = _3053.y - _2609;
                        float _3095 = _3053.z - _2610;
                        float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                        float _3099 = inversesqrt(_3096);
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3103 = dot(vec3(_723, _726, _729), vec3(_3100, _3101, _3102));
                        float _3108 = 1.0 - (_3096 * _3053.w);
                        float _4401 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3110 = sqrt(_3096) * _3072.w;
                        float _3113 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3103) + _3114;
                        float _3120 = _3110 * _3110;
                        float _3124 = ((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3109) / ((_3120 * 0.699999988079071044921875) + 1.0);
                        float _3128 = (-0.0) - _2608;
                        float _3129 = (-0.0) - _2609;
                        float _3130 = (-0.0) - _2610;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3145 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                        float _3146 = 1.0 - _926;
                        float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                        float _3154 = _3153 * _3153;
                        float _3155 = _3154 * _3154;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3166 = dot(vec3(_723, _726, _729), vec3(_3135, _3136, _3137));
                        float _4417 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3170 = dot(vec3(_723, _726, _729), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                        float _4428 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                        float _3178 = _3113 * _3154;
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3103) + _3179;
                        float _4439 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3184 = 1.0 - _3154;
                        float _3194 = (0.5 / (((_3183 * ((_3169 * _3184) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3154) * _3169))) * _3183;
                        float _4450 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3205 = (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3177 * _3177) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125))) * _3109;
                        _2962 = (_3124 * _3072.x) + _3030;
                        _2963 = (_3124 * _3072.y) + _3031;
                        _2964 = (_3124 * _3072.z) + _3032;
                        _2959 = (_3205 * _3089.x) + _3027;
                        _2960 = (_3205 * _3089.y) + _3028;
                        _2961 = (_3205 * _3089.z) + _3029;
                        if (_3034 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _3034;
                        }
                    }
                    frontier_phi_63_pred = _2964;
                    frontier_phi_63_pred_1 = _2963;
                    frontier_phi_63_pred_2 = _2962;
                    frontier_phi_63_pred_3 = _2961;
                    frontier_phi_63_pred_4 = _2960;
                    frontier_phi_63_pred_5 = _2959;
                }
                _2770 = frontier_phi_63_pred;
                _2768 = frontier_phi_63_pred_1;
                _2766 = frontier_phi_63_pred_2;
                _2764 = frontier_phi_63_pred_3;
                _2762 = frontier_phi_63_pred_4;
                _2760 = frontier_phi_63_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2760;
                    _2904 = _2762;
                    _2905 = _2764;
                    _2906 = _2766;
                    _2907 = _2768;
                    _2908 = _2770;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2776) & _2654) == 0u)
        {
            _2871 = _2759;
            _2873 = _2761;
            _2875 = _2763;
            _2877 = _2765;
            _2879 = _2767;
            _2881 = _2769;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2897 = _2896 * _2608;
            float _2898 = _2896 * _2609;
            float _2899 = _2896 * _2610;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3010 = _2759;
                float _3011 = _2761;
                float _3012 = _2763;
                float _3013 = _2765;
                float _3014 = _2767;
                float _3015 = _2769;
                uint _3016 = _2776;
                uint _3025;
                bool _3026;
                for (;;)
                {
                    _3025 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                    _3026 = _3025 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3026)
                    {
                        frontier_phi_69_pred = _3015;
                        frontier_phi_69_pred_1 = _3014;
                        frontier_phi_69_pred_2 = _3013;
                        frontier_phi_69_pred_3 = _3012;
                        frontier_phi_69_pred_4 = _3011;
                        frontier_phi_69_pred_5 = _3010;
                    }
                    else
                    {
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        uint _3229 = _3025;
                        uint _3230;
                        vec4 _3255;
                        float _3256;
                        vec4 _3271;
                        vec3 _3283;
                        vec4 _3298;
                        vec4 _3314;
                        float _3361;
                        bool _3362;
                        for (;;)
                        {
                            uint _3240 = ((_3016 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3229));
                            _3230 = (_3229 + 4294967295u) & _3229;
                            uint _3242 = _3240 * 40u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3256 = _3255.w;
                            uint _3258 = (_3240 * 40u) + 4u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3240 * 40u) + 8u;
                            _3283 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x));
                            uint _3285 = (_3240 * 40u) + 16u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3240 * 40u) + 20u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3317 = (_3240 * 40u) + 24u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3336 = (_3240 * 40u) + 28u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3361 = fma(_2610, _3349.z, fma(_2609, _3349.y, _3349.x * _2608)) + _3349.w;
                            _3362 = !((fma(_2610, _3330.z, fma(_2609, _3330.y, _3330.x * _2608)) + _3330.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3362)
                            {
                                float _3389 = _3255.x - _2608;
                                float _3390 = _3255.y - _2609;
                                float _3391 = _3255.z - _2610;
                                float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                                float _3395 = inversesqrt(_3392);
                                float _3396 = _3395 * _3389;
                                float _3397 = _3395 * _3390;
                                float _3398 = _3395 * _3391;
                                float _3402 = 1.0 - (_3392 / (_3256 * _3256));
                                float _4461 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3407 = sqrt(_3392) * _3271.w;
                                float _3409 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                                float _3410 = _3409 * _3409;
                                float _3413 = ((1.0 - _3410) * dot(vec3(_3396, _3397, _3398), vec3(_723, _726, _729))) + _3410;
                                float _3416 = _3407 * _3407;
                                float _3420 = (fma(_2610, _3298.z, fma(_2609, _3298.y, _3298.x * _2608)) + _3298.w) / _3361;
                                float _3421 = (fma(_2610, _3314.z, fma(_2609, _3314.y, _3314.x * _2608)) + _3314.w) / _3361;
                                float _3425 = 1.0 - dot(vec2(_3420, _3421), vec2(_3420, _3421));
                                float _4477 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3427 = _3426 * (((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3403) / ((_3416 * 0.699999988079071044921875) + 1.0));
                                float _3439 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                                float _3440 = 1.0 - _926;
                                float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                                float _3448 = _3447 * _3447;
                                float _3449 = _3448 * _3448;
                                float _3450 = _3396 - _2897;
                                float _3451 = _3397 - _2898;
                                float _3452 = _3398 - _2899;
                                float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                                float _3460 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4488 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3464 = dot(vec3(_723, _726, _729), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                                float _4499 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                                float _3472 = _3409 * _3448;
                                float _3473 = _3472 * _3472;
                                float _3479 = ((1.0 - _3473) * dot(vec3(_723, _726, _729), vec3(_3396, _3397, _3398))) + _3473;
                                float _4510 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3481 = 1.0 - _3448;
                                float _3491 = (0.5 / (((_3480 * ((_3463 * _3481) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3448) * _3463))) * _3480;
                                float _4521 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3501 = (_3426 * _3403) * (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3471 * _3471) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3427 * _3271.z;
                                frontier_phi_75_pred_1 = _3427 * _3271.y;
                                frontier_phi_75_pred_2 = _3427 * _3271.x;
                                frontier_phi_75_pred_3 = _3501 * _3283.z;
                                frontier_phi_75_pred_4 = _3501 * _3283.y;
                                frontier_phi_75_pred_5 = _3501 * _3283.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3510 = frontier_phi_75_pred;
                            _3509 = frontier_phi_75_pred_1;
                            _3508 = frontier_phi_75_pred_2;
                            _3507 = frontier_phi_75_pred_3;
                            _3506 = frontier_phi_75_pred_4;
                            _3505 = frontier_phi_75_pred_5;
                            _3213 = _3508 + _3226;
                            _3214 = _3509 + _3227;
                            _3215 = _3510 + _3228;
                            _3210 = _3505 + _3223;
                            _3211 = _3506 + _3224;
                            _3212 = _3507 + _3225;
                            if (_3230 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3230;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3215;
                        frontier_phi_69_pred_1 = _3214;
                        frontier_phi_69_pred_2 = _3213;
                        frontier_phi_69_pred_3 = _3212;
                        frontier_phi_69_pred_4 = _3211;
                        frontier_phi_69_pred_5 = _3210;
                    }
                    _2882 = frontier_phi_69_pred;
                    _2880 = frontier_phi_69_pred_1;
                    _2878 = frontier_phi_69_pred_2;
                    _2876 = frontier_phi_69_pred_3;
                    _2874 = frontier_phi_69_pred_4;
                    _2872 = frontier_phi_69_pred_5;
                    uint _3017 = _3016 + 1u;
                    if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3010 = _2872;
                        _3011 = _2874;
                        _3012 = _2876;
                        _3013 = _2878;
                        _3014 = _2880;
                        _3015 = _2882;
                        _3016 = _3017;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2882;
                frontier_phi_57_58_ladder_1 = _2880;
                frontier_phi_57_58_ladder_2 = _2878;
                frontier_phi_57_58_ladder_3 = _2876;
                frontier_phi_57_58_ladder_4 = _2874;
                frontier_phi_57_58_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_57_58_ladder = _2769;
                frontier_phi_57_58_ladder_1 = _2767;
                frontier_phi_57_58_ladder_2 = _2765;
                frontier_phi_57_58_ladder_3 = _2763;
                frontier_phi_57_58_ladder_4 = _2761;
                frontier_phi_57_58_ladder_5 = _2759;
            }
            _2871 = frontier_phi_57_58_ladder_5;
            _2873 = frontier_phi_57_58_ladder_4;
            _2875 = frontier_phi_57_58_ladder_3;
            _2877 = frontier_phi_57_58_ladder_2;
            _2879 = frontier_phi_57_58_ladder_1;
            _2881 = frontier_phi_57_58_ladder;
        }
        float _2886 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2666 = (_2886 * _2877) + _2100;
        _2668 = (_2886 * _2879) + _2102;
        _2670 = (_2886 * _2881) + _2104;
        _2672 = ((_2871 * _896) * _2886) + _2448;
        _2674 = ((_2873 * _897) * _2886) + _2450;
        _2676 = ((_2875 * _898) * _2886) + _2452;
    }
    else
    {
        _2666 = _2100;
        _2668 = _2102;
        _2670 = _2104;
        _2672 = _2448;
        _2674 = _2450;
        _2676 = _2452;
    }
    float _4537 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4548 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4559 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4570 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2694 = ((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2666 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _910))) + ((_2672 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2668 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _910))) + ((_2674 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2696 = ((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2670 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _910))) + ((_2676 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2704 = cbInstanceData._m0[_802 + 6u].w * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)));
    float _2709 = _700 / cbSceneParam._m0[86u].x;
    float _2710 = _701 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2785 = _2784 / _635;
        float _2796 = _2785 * _685;
        float _2797 = _686 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2799 = _2785 * _687;
        float _2801 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2802 = _2801 + cbSceneParam._m0[79u].w;
        float _2803 = cbSceneParam._m0[79u].w - _2797;
        float _2809 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2799 * _2799));
        float _2812 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2809;
        float _2817 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2819 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2798 - _2801) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2802 > 0.0) ? exp2(_2817 * _2802) : (2.0 - exp2(_2819 * _2802))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2812;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : max(_2802, _2803));
            float _2934 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : min(_2802, _2803));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2972 = ((abs(_2809 / _2798) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2817 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2817 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2819 * _2943) - exp2(_2819 * _2944)) * _2932))) + (_2812 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2729);
        _2821 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2823 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2825 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2827 = _2983 * _2729;
    }
    else
    {
        _2821 = _2726;
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
    }
    float _2839 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2840 = _2839 == 3.0;
    float _2841 = log2(_2827);
    float _2848 = exp2(_2841 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)));
    float _2849 = exp2(_2841 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)));
    float _2850 = exp2(_2841 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)));
    float _2859 = (_2839 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2859 * (_2840 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.y = _2859 * (_2840 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.z = _2859 * (_2840 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.w = _2704;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2704;
}


