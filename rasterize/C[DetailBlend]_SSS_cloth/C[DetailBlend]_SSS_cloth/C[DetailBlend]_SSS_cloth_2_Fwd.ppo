#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1131;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _242.z;
    float _253 = exp2(log2(_247 * 22.0) * 260.0);
    float _254 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _255 = isnan(1.0) ? _254 : (isnan(_254) ? 1.0 : min(_254, 1.0));
    vec4 _269 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _280 = cbMtdParam._m0[10u].x * _269.x;
    float _281 = cbMtdParam._m0[10u].y * _269.y;
    float _282 = cbMtdParam._m0[10u].z * _269.z;
    vec4 _294 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _317 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = (((((_294.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _317.x) - _280) * _255) + _280;
    float _340 = (((((_294.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _317.y) - _281) * _255) + _281;
    float _341 = (((((_294.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _317.z) - _282) * _255) + _282;
    float _342 = _317.w * _294.w;
    float _369 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _255) + cbMtdParam._m0[15u].y;
    vec4 _382 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _382.x;
    float _385 = _382.y;
    float _391 = cbMtdParam._m0[13u].y + _382.z;
    vec4 _403 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _415 = ((((_247 * 2.0) * (cbMtdParam._m0[13u].x + _403.z)) - _391) * _255) + _391;
    float _419 = (_242.x * 2.0) + (-1.0);
    float _421 = (_242.y * 2.0) + (-1.0);
    float _422 = dot(vec2(_419, _421), vec2(_419, _421));
    float _3477 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))));
    float _440 = ((((((_403.x - _384) * _255) + _384) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _419;
    float _441 = ((((((_403.y - _385) * _255) + _385) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _421;
    float _444 = fma(_427, _226, fma(_441, _218 * TANGENT.x, (_204 * _196) * _440));
    float _447 = fma(_427, _227, fma(_441, _218 * TANGENT.y, (_204 * _197) * _440));
    float _450 = fma(_427, _228, fma(_441, _218 * TANGENT.z, (_204 * _198) * _440));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    float _455 = _454 * _444;
    float _456 = _454 * _447;
    float _457 = _454 * _450;
    float _3488 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _458 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _459 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _460 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _461 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _462 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    float _3543 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _463 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _479 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _548 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _550 = _548.w;
    float _569 = fma(_457, cbSceneParam._m0[5u].z, fma(_456, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _455));
    float _572 = fma(_457, cbSceneParam._m0[6u].z, fma(_456, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _455));
    float _575 = fma(_457, cbSceneParam._m0[7u].z, fma(_456, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _455));
    vec4 _577 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _579 = _577.x;
    float _591 = (((_577.y - _459) + (_577.w * _459)) * cbMtdParam._m0[3u].x) + _459;
    vec4 _592 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _608 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_579 * _579)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _592.z;
    float _616 = (((cbMatDynParam._m0[15u].x - _463) * cbMatDynParam._m0[15u].w) * _608) + _463;
    float _624 = ((_608 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _591)) + _591;
    uint _648 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = (_648 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * _460) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * _461) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * _462) * cbInstanceData._m0[_650].z;
    float _3554 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    vec4 _662 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _667 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _678 = (((_667.x - _616) + (_667.w * _616)) * cbMtdParam._m0[3u].x) + _616;
    float _691 = (cbMtdParam._m0[3u].x * (((_659 * _550) - _659) + _662.x)) + _659;
    float _692 = (cbMtdParam._m0[3u].x * (((_660 * _550) - _660) + _662.y)) + _660;
    float _693 = (cbMtdParam._m0[3u].x * (((_661 * _550) - _661) + _662.z)) + _661;
    vec4 _694 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _707 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_616 * (_460 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_616 * (_461 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_616 * (_462 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _694.z;
    float _711 = _707 * cbMatDynParam._m0[13u].w;
    float _721 = (_711 * (cbMatDynParam._m0[13u].x - _691)) + _691;
    float _722 = (_711 * (cbMatDynParam._m0[13u].y - _692)) + _692;
    float _723 = (_711 * (cbMatDynParam._m0[13u].z - _693)) + _693;
    float _731 = ((_707 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _678)) + _678;
    float _732 = 1.0 - _731;
    float _733 = _732 * _721;
    float _734 = _732 * _722;
    float _735 = _732 * _723;
    float _739 = (_721 + (-0.039999999105930328369140625)) * _731;
    float _740 = (_722 + (-0.039999999105930328369140625)) * _731;
    float _741 = (_723 + (-0.039999999105930328369140625)) * _731;
    float _742 = _739 + 0.039999999105930328369140625;
    float _743 = _740 + 0.039999999105930328369140625;
    float _744 = _741 + 0.039999999105930328369140625;
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _756 = _753.x * TEXCOORD_4;
    float _757 = dot(vec3(_455, _456, _457), vec3(_537, _538, _539));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _455) - _537;
    float _765 = (_760 * _456) - _538;
    float _766 = (_760 * _457) - _539;
    float _770 = abs(dot(vec3(_537, _538, _539), vec3(_455, _456, _457)));
    float _3587 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_624);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _791 = (1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _792 = _785 * _772;
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _859 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _863 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _888 = _820 + _455;
        float _889 = _824 + _456;
        float _890 = _828 + _457;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _855;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _859;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _863;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_455, _456, _457), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3635 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_455, _456, _457), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3668 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_455, _456, _457), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3701 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1175 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1179 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1202 = _820 + _455;
        float _1203 = _824 + _456;
        float _1204 = _828 + _457;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_455, _456, _457), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3764 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_455, _456, _457), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3797 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_455, _456, _457), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3830 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1131;
        _1441 = _1131;
        _1442 = _1131;
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = _1131;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _764 * 0.5;
    float _1509 = _765 * 0.5;
    float _1510 = _766 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _624);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1635 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1638 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1666 = frontier_phi_16_14_ladder;
        }
        float _1874;
        if (_1635 > 0.0)
        {
            _1874 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1874 = frontier_phi_25_21_ladder;
        }
        float _2128;
        if (_1638 > 0.0)
        {
            _2128 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2128 = frontier_phi_37_32_ladder;
        }
        float _2130 = isnan(_1874) ? _1666 : (isnan(_1666) ? _1874 : min(_1666, _1874));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1632) + _1621;
        float _2136 = (_2131 * _1635) + _1625;
        float _2137 = (_2131 * _1638) + _1629;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2138;
        float _2142 = _2138 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 > _2142) || ((_2136 < _2140) || ((_2135 < _2140) || (_2135 > _2142))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_15_37_ladder = _2265.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2265.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2265.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_15_37_ladder_2;
        _1656 = frontier_phi_15_37_ladder_1;
        _1658 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1574);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _624);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1734 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1737 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1879;
        if (_1731 > 0.0)
        {
            _1879 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1879 = frontier_phi_27_23_ladder;
        }
        float _2155;
        if (_1734 > 0.0)
        {
            _2155 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2155 = frontier_phi_39_34_ladder;
        }
        float _2368;
        if (_1737 > 0.0)
        {
            _2368 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2368 = frontier_phi_48_45_ladder;
        }
        float _2370 = isnan(_2155) ? _1879 : (isnan(_1879) ? _2155 : min(_1879, _2155));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1731) + _1720;
        float _2376 = (_2371 * _1734) + _1724;
        float _2377 = (_2371 * _1737) + _1728;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2580 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_24_48_ladder = _2580.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2580.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2580.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_24_48_ladder_2;
        _1758 = frontier_phi_24_48_ladder_1;
        _1760 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1663);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1773 = (((_791 * _742) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1775 = (((_791 * _743) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1777 = (((_791 * _744) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1760 - _1658)) + _1658);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    uvec4 _1796 = floatBitsToUint(cbInstanceData._m0[_648 + 5u]);
    uint _1798 = _1796.x * 14u;
    uint _1799 = _1798 + 13u;
    float _1806 = _756 + (-1.0);
    float _1811 = (cbLight._m0[_1799].x * _1806) + 1.0;
    float _1812 = (cbLight._m0[_1799].y * _1806) + 1.0;
    float _1813 = (cbLight._m0[_1799].z * _1806) + 1.0;
    float _1814 = (cbLight._m0[_1799].w * _1806) + 1.0;
    uint _1815 = _1798 + 5u;
    float _1821 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1825 = _1798 + 4u;
    float _1832 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1836 = _1798 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_455, _456, _457));
    float _1850 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_455, _456, _457));
    float _3966 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _3977 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1857 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1864 = ((cbLight._m0[_1815].x * _1821) * _1857) + ((cbLight._m0[_1825].x * _1832) * _1855);
    float _1865 = ((_1821 * cbLight._m0[_1815].y) * _1857) + ((_1832 * cbLight._m0[_1825].y) * _1855);
    float _1866 = ((_1821 * cbLight._m0[_1815].z) * _1857) + ((_1832 * cbLight._m0[_1825].z) * _1855);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1798 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1873)
    {
        _1884 = _1864;
        _1886 = _1865;
        _1888 = _1866;
    }
    else
    {
        uint _1892 = _1798 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1798 + 2u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3988 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1911 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1864;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1865;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1866;
    }
    bool _1891 = _1871.y == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1891)
    {
        _1929 = _1884;
        _1931 = _1886;
        _1933 = _1888;
    }
    else
    {
        uint _2099 = _1798 + 7u;
        float _2115 = (dot(vec3(cbLight._m0[_1798 + 3u].xyz), vec3(_455, _456, _457)) * 0.5) + 0.5;
        float _2116 = _2115 * _2115;
        float _4004 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2117 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2118 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1929 = (((cbLight._m0[_2099].x * 0.3183098733425140380859375) * _2117) * _2118) + _1884;
        _1931 = (((cbLight._m0[_2099].y * 0.3183098733425140380859375) * _2117) * _2118) + _1886;
        _1933 = (((cbLight._m0[_2099].z * 0.3183098733425140380859375) * _2117) * _2118) + _1888;
    }
    uint _1936 = _1798 + 8u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _624) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1798].x + _537;
    float _1952 = cbLight._m0[_1798].y + _538;
    float _1953 = cbLight._m0[_1798].z + _539;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1798].xyz));
    float _4020 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1965 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1966 = dot(vec3(_455, _456, _457), vec3(_1958, _1959, _1960));
    float _4042 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1958, _1959, _1960));
    float _4053 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1950 * _1950;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1986 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
    float _1987 = 0.959999978542327880859375 - _739;
    float _1989 = 0.959999978542327880859375 - _740;
    float _1990 = 0.959999978542327880859375 - _741;
    float _1997 = 1.0 - _1950;
    float _2008 = (0.5 / (((_1965 * ((_1964 * _1997) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _1997) + _1950) * _1964))) * _1964;
    float _4064 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    uint _2021 = _1798 + 9u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _624) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1836].x + _537;
    float _2035 = cbLight._m0[_1836].y + _538;
    float _2036 = cbLight._m0[_1836].z + _539;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_1836].xyz));
    float _4075 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2048 = dot(vec3(_455, _456, _457), vec3(_2041, _2042, _2043));
    float _4086 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2041, _2042, _2043));
    float _4097 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2033 * _2033;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0);
    float _2074 = 1.0 - _2033;
    float _2084 = (0.5 / (((_1965 * ((_2047 * _2074) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2074) + _2033) * _2047))) * _2047;
    float _4108 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    float _2096 = (((((_2067 * _1987) + _742) * cbLight._m0[_2021].x) * _2086) * _1821) + (((((_1986 * _1987) + _742) * cbLight._m0[_1936].x) * _2010) * _1832);
    float _2097 = (((((_2067 * _1989) + _743) * cbLight._m0[_2021].y) * _2086) * _1821) + (((((_1986 * _1989) + _743) * cbLight._m0[_1936].y) * _2010) * _1832);
    float _2098 = (((((_2067 * _1990) + _744) * cbLight._m0[_2021].z) * _2086) * _1821) + (((((_1986 * _1990) + _744) * cbLight._m0[_1936].z) * _2010) * _1832);
    float _2160;
    float _2162;
    float _2164;
    if (_1873)
    {
        _2160 = _2096;
        _2162 = _2097;
        _2164 = _2098;
    }
    else
    {
        uint _2166 = _1798 + 2u;
        uint _2170 = _1798 + 10u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _624) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _537;
        float _2187 = cbLight._m0[_2166].y + _538;
        float _2188 = cbLight._m0[_2166].z + _539;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2166].xyz));
        float _4119 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2200 = dot(vec3(_455, _456, _457), vec3(_2193, _2194, _2195));
        float _4130 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4141 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0);
        float _2226 = 1.0 - _2185;
        float _2236 = (0.5 / (((_1965 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2226) + _2185) * _2199))) * _2199;
        float _4152 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
        _2160 = (((((_2219 * _1987) + _742) * cbLight._m0[_2170].x) * _2238) * _2239) + _2096;
        _2162 = (((((_2219 * _1989) + _743) * cbLight._m0[_2170].y) * _2238) * _2239) + _2097;
        _2164 = (((((_2219 * _1990) + _744) * cbLight._m0[_2170].z) * _2238) * _2239) + _2098;
    }
    float _2274;
    float _2276;
    float _2278;
    if (_1891)
    {
        _2274 = _2160;
        _2276 = _2162;
        _2278 = _2164;
    }
    else
    {
        uint _2285 = _1798 + 3u;
        uint _2289 = _1798 + 11u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _624) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _537;
        float _2306 = cbLight._m0[_2285].y + _538;
        float _2307 = cbLight._m0[_2285].z + _539;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_455, _456, _457), vec3(cbLight._m0[_2285].xyz));
        float _4168 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2319 = dot(vec3(_455, _456, _457), vec3(_2312, _2313, _2314));
        float _4179 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4190 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
        float _2345 = 1.0 - _2304;
        float _2355 = (0.5 / (((_1965 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2345) + _2304) * _2318))) * _2318;
        float _4201 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2274 = (((((_2338 * _1987) + _742) * cbLight._m0[_2289].x) * _2357) * _2358) + _2160;
        _2276 = (((((_2338 * _1989) + _743) * cbLight._m0[_2289].y) * _2357) * _2358) + _2162;
        _2278 = (((((_2338 * _1990) + _744) * cbLight._m0[_2289].z) * _2357) * _2358) + _2164;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1796.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
        }
        else
        {
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2745)
                {
                    frontier_phi_63_pred = _2734;
                    frontier_phi_63_pred_1 = _2733;
                    frontier_phi_63_pred_2 = _2732;
                    frontier_phi_63_pred_3 = _2731;
                    frontier_phi_63_pred_4 = _2730;
                    frontier_phi_63_pred_5 = _2729;
                }
                else
                {
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    uint _2859;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2744;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2863 = uint(findLSB(_2859)) + (_2735 << 5u);
                        uint _2860 = (_2859 + 4294967295u) & _2859;
                        uint _2865 = _2863 * 48u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2885 = (_2863 * 48u) + 4u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2904 = (_2863 * 48u) + 8u;
                        vec3 _2915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x));
                        float _2919 = _2879.x - _2434;
                        float _2920 = _2879.y - _2435;
                        float _2921 = _2879.z - _2436;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_569, _572, _575), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2879.w);
                        float _4227 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2936 = sqrt(_2922) * _2898.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2929) + _2940;
                        float _2946 = _2936 * _2936;
                        float _2950 = ((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2935) / ((_2946 * 0.699999988079071044921875) + 1.0);
                        float _2954 = (-0.0) - _2434;
                        float _2955 = (-0.0) - _2435;
                        float _2956 = (-0.0) - _2436;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2971 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _2972 = 1.0 - _772;
                        float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                        float _2980 = _2979 * _2979;
                        float _2981 = _2980 * _2980;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2992 = dot(vec3(_569, _572, _575), vec3(_2961, _2962, _2963));
                        float _4243 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2996 = dot(vec3(_569, _572, _575), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                        float _4254 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                        float _3004 = _2939 * _2980;
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2929) + _3005;
                        float _4265 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _3010 = 1.0 - _2980;
                        float _3020 = (0.5 / (((_3009 * ((_2995 * _3010) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2980) * _2995))) * _3009;
                        float _4276 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3031 = (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_3003 * _3003) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2788 = (_2950 * _2898.x) + _2856;
                        _2789 = (_2950 * _2898.y) + _2857;
                        _2790 = (_2950 * _2898.z) + _2858;
                        _2785 = (_3031 * _2915.x) + _2853;
                        _2786 = (_3031 * _2915.y) + _2854;
                        _2787 = (_3031 * _2915.z) + _2855;
                        if (_2860 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2860;
                        }
                    }
                    frontier_phi_63_pred = _2790;
                    frontier_phi_63_pred_1 = _2789;
                    frontier_phi_63_pred_2 = _2788;
                    frontier_phi_63_pred_3 = _2787;
                    frontier_phi_63_pred_4 = _2786;
                    frontier_phi_63_pred_5 = _2785;
                }
                _2596 = frontier_phi_63_pred;
                _2594 = frontier_phi_63_pred_1;
                _2592 = frontier_phi_63_pred_2;
                _2590 = frontier_phi_63_pred_3;
                _2588 = frontier_phi_63_pred_4;
                _2586 = frontier_phi_63_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2586;
                    _2730 = _2588;
                    _2731 = _2590;
                    _2732 = _2592;
                    _2733 = _2594;
                    _2734 = _2596;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
        }
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.z;
        uint _2602 = (_2600 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2602) & _2480) == 0u)
        {
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
            _2705 = _2593;
            _2707 = _2595;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2723 = _2722 * _2434;
            float _2724 = _2722 * _2435;
            float _2725 = _2722 * _2436;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2602 < ((_2600 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2836 = _2585;
                float _2837 = _2587;
                float _2838 = _2589;
                float _2839 = _2591;
                float _2840 = _2593;
                float _2841 = _2595;
                uint _2842 = _2602;
                uint _2851;
                bool _2852;
                for (;;)
                {
                    _2851 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                    _2852 = _2851 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2852)
                    {
                        frontier_phi_69_pred = _2841;
                        frontier_phi_69_pred_1 = _2840;
                        frontier_phi_69_pred_2 = _2839;
                        frontier_phi_69_pred_3 = _2838;
                        frontier_phi_69_pred_4 = _2837;
                        frontier_phi_69_pred_5 = _2836;
                    }
                    else
                    {
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        uint _3055 = _2851;
                        uint _3056;
                        vec4 _3081;
                        float _3082;
                        vec4 _3097;
                        vec3 _3109;
                        vec4 _3124;
                        vec4 _3140;
                        float _3187;
                        bool _3188;
                        for (;;)
                        {
                            uint _3066 = ((_2842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3055));
                            _3056 = (_3055 + 4294967295u) & _3055;
                            uint _3068 = _3066 * 40u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3082 = _3081.w;
                            uint _3084 = (_3066 * 40u) + 4u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3066 * 40u) + 8u;
                            _3109 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x));
                            uint _3111 = (_3066 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3066 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3066 * 40u) + 24u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3162 = (_3066 * 40u) + 28u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3187 = fma(_2436, _3175.z, fma(_2435, _3175.y, _3175.x * _2434)) + _3175.w;
                            _3188 = !((fma(_2436, _3156.z, fma(_2435, _3156.y, _3156.x * _2434)) + _3156.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3188)
                            {
                                float _3215 = _3081.x - _2434;
                                float _3216 = _3081.y - _2435;
                                float _3217 = _3081.z - _2436;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3082 * _3082));
                                float _4287 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3233 = sqrt(_3218) * _3097.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3239 = ((1.0 - _3236) * dot(vec3(_3222, _3223, _3224), vec3(_569, _572, _575))) + _3236;
                                float _3242 = _3233 * _3233;
                                float _3246 = (fma(_2436, _3124.z, fma(_2435, _3124.y, _3124.x * _2434)) + _3124.w) / _3187;
                                float _3247 = (fma(_2436, _3140.z, fma(_2435, _3140.y, _3140.x * _2434)) + _3140.w) / _3187;
                                float _3251 = 1.0 - dot(vec2(_3246, _3247), vec2(_3246, _3247));
                                float _4303 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3253 = _3252 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3229) / ((_3242 * 0.699999988079071044921875) + 1.0));
                                float _3265 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                                float _3266 = 1.0 - _772;
                                float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                                float _3274 = _3273 * _3273;
                                float _3275 = _3274 * _3274;
                                float _3276 = _3222 - _2723;
                                float _3277 = _3223 - _2724;
                                float _3278 = _3224 - _2725;
                                float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                                float _3286 = dot(vec3(_569, _572, _575), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4314 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3290 = dot(vec3(_569, _572, _575), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                                float _4325 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                                float _3298 = _3235 * _3274;
                                float _3299 = _3298 * _3298;
                                float _3305 = ((1.0 - _3299) * dot(vec3(_569, _572, _575), vec3(_3222, _3223, _3224))) + _3299;
                                float _4336 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3307 = 1.0 - _3274;
                                float _3317 = (0.5 / (((_3306 * ((_3289 * _3307) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3274) * _3289))) * _3306;
                                float _4347 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3327 = (_3252 * _3229) * (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3297 * _3297) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3253 * _3097.z;
                                frontier_phi_75_pred_1 = _3253 * _3097.y;
                                frontier_phi_75_pred_2 = _3253 * _3097.x;
                                frontier_phi_75_pred_3 = _3327 * _3109.z;
                                frontier_phi_75_pred_4 = _3327 * _3109.y;
                                frontier_phi_75_pred_5 = _3327 * _3109.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_75_pred;
                            _3335 = frontier_phi_75_pred_1;
                            _3334 = frontier_phi_75_pred_2;
                            _3333 = frontier_phi_75_pred_3;
                            _3332 = frontier_phi_75_pred_4;
                            _3331 = frontier_phi_75_pred_5;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            _3036 = _3331 + _3049;
                            _3037 = _3332 + _3050;
                            _3038 = _3333 + _3051;
                            if (_3056 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3056;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3041;
                        frontier_phi_69_pred_1 = _3040;
                        frontier_phi_69_pred_2 = _3039;
                        frontier_phi_69_pred_3 = _3038;
                        frontier_phi_69_pred_4 = _3037;
                        frontier_phi_69_pred_5 = _3036;
                    }
                    _2708 = frontier_phi_69_pred;
                    _2706 = frontier_phi_69_pred_1;
                    _2704 = frontier_phi_69_pred_2;
                    _2702 = frontier_phi_69_pred_3;
                    _2700 = frontier_phi_69_pred_4;
                    _2698 = frontier_phi_69_pred_5;
                    uint _2843 = _2842 + 1u;
                    if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2836 = _2698;
                        _2837 = _2700;
                        _2838 = _2702;
                        _2839 = _2704;
                        _2840 = _2706;
                        _2841 = _2708;
                        _2842 = _2843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2708;
                frontier_phi_57_58_ladder_1 = _2706;
                frontier_phi_57_58_ladder_2 = _2704;
                frontier_phi_57_58_ladder_3 = _2702;
                frontier_phi_57_58_ladder_4 = _2700;
                frontier_phi_57_58_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_57_58_ladder = _2595;
                frontier_phi_57_58_ladder_1 = _2593;
                frontier_phi_57_58_ladder_2 = _2591;
                frontier_phi_57_58_ladder_3 = _2589;
                frontier_phi_57_58_ladder_4 = _2587;
                frontier_phi_57_58_ladder_5 = _2585;
            }
            _2697 = frontier_phi_57_58_ladder_5;
            _2699 = frontier_phi_57_58_ladder_4;
            _2701 = frontier_phi_57_58_ladder_3;
            _2703 = frontier_phi_57_58_ladder_2;
            _2705 = frontier_phi_57_58_ladder_1;
            _2707 = frontier_phi_57_58_ladder;
        }
        float _2712 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2492 = (_2712 * _2703) + _1929;
        _2494 = (_2712 * _2705) + _1931;
        _2496 = (_2712 * _2707) + _1933;
        _2498 = ((_2697 * _742) * _2712) + _2274;
        _2500 = ((_2699 * _743) * _2712) + _2276;
        _2502 = ((_2701 * _744) * _2712) + _2278;
    }
    else
    {
        _2492 = _1929;
        _2494 = _1931;
        _2496 = _1933;
        _2498 = _2274;
        _2500 = _2276;
        _2502 = _2278;
    }
    float _4363 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4374 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4385 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4396 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2520 = ((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2492 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _756))) + ((_2498 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2521 = ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2494 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _756))) + ((_2500 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2522 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2496 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _756))) + ((_2502 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2530 = cbInstanceData._m0[_648 + 6u].w * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)));
    float _2535 = _545 / cbSceneParam._m0[86u].x;
    float _2536 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _479 : (isnan(_479) ? cbSceneParam._m0[77u].w : min(_479, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_479 > cbSceneParam._m0[78u].w)
    {
        float _2610 = isnan(_479) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _479 : min(cbSceneParam._m0[80u].w, _479));
        float _2611 = _2610 / _479;
        float _2622 = _2611 * _530;
        float _2623 = _531 * _2611;
        float _2624 = (-0.0) - _2623;
        float _2625 = _2611 * _532;
        float _2627 = (cbSceneParam._m0[77u].w * _2624) / _2610;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2623;
        float _2635 = sqrt(((_2622 * _2622) + (_2623 * _2623)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2610)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2624 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2760 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2798 = ((abs(_2635 / _2624) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2645 * _2769) - exp2(_2645 * _2770)) * _2758))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2555);
        _2647 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2649 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2651 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2653 = _2809 * _2555;
    }
    else
    {
        _2647 = _2552;
        _2649 = _2553;
        _2651 = _2554;
        _2653 = _2555;
    }
    float _2665 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2666 = _2665 == 3.0;
    float _2667 = log2(_2653);
    float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)));
    float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0)));
    float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)));
    float _2685 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2685 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.y = _2685 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.z = _2685 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.w = _2530;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2530;
}


