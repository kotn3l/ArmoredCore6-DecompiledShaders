#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1133;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _244.z;
    float _255 = exp2(log2(_249 * 22.0) * 260.0);
    float _256 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _257 = isnan(1.0) ? _256 : (isnan(_256) ? 1.0 : min(_256, 1.0));
    vec4 _271 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _282 = cbMtdParam._m0[10u].x * _271.x;
    float _283 = cbMtdParam._m0[10u].y * _271.y;
    float _284 = cbMtdParam._m0[10u].z * _271.z;
    vec4 _296 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _319 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = (((((_296.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _319.x) - _282) * _257) + _282;
    float _342 = (((((_296.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _319.y) - _283) * _257) + _283;
    float _343 = (((((_296.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _319.z) - _284) * _257) + _284;
    float _344 = _319.w * _296.w;
    float _371 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _257) + cbMtdParam._m0[15u].y;
    vec4 _384 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _384.x;
    float _387 = _384.y;
    float _393 = cbMtdParam._m0[13u].y + _384.z;
    vec4 _405 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _417 = ((((_249 * 2.0) * (cbMtdParam._m0[13u].x + _405.z)) - _393) * _257) + _393;
    float _421 = (_244.x * 2.0) + (-1.0);
    float _423 = (_244.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3503 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))));
    float _442 = ((((((_405.x - _386) * _257) + _386) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _421;
    float _443 = ((((((_405.y - _387) * _257) + _387) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _423;
    float _446 = fma(_429, _228, fma(_443, _220 * TANGENT.x, (_206 * _198) * _442));
    float _449 = fma(_429, _229, fma(_443, _220 * TANGENT.y, (_206 * _199) * _442));
    float _452 = fma(_429, _230, fma(_443, _220 * TANGENT.z, (_206 * _200) * _442));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3514 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _460 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _461 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _462 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _463 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _464 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _465 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _481 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _532 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _522);
    float _533 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _522);
    float _534 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _522);
    float _538 = inversesqrt(dot(vec3(_532, _533, _534), vec3(_532, _533, _534)));
    float _539 = _532 * _538;
    float _540 = _533 * _538;
    float _541 = _534 * _538;
    float _547 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _548 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _550 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _552 = _550.w;
    float _571 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _574 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _577 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    vec4 _579 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _581 = _579.x;
    float _593 = (((_579.y - _461) + (_579.w * _461)) * cbMtdParam._m0[3u].x) + _461;
    vec4 _594 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _610 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_581 * _581)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _594.z;
    float _618 = (((cbMatDynParam._m0[15u].x - _465) * cbMatDynParam._m0[15u].w) * _610) + _465;
    float _626 = ((_610 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _593)) + _593;
    uint _650 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = (_650 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _658 = (cbMtdParam._m0[0u].x * _462) * cbInstanceData._m0[_652].x;
    float _659 = (cbMtdParam._m0[0u].y * _463) * cbInstanceData._m0[_652].y;
    float _660 = (cbMtdParam._m0[0u].z * _464) * cbInstanceData._m0[_652].z;
    float _3580 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _3591 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    vec4 _664 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _669 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _680 = (((_669.x - _618) + (_669.w * _618)) * cbMtdParam._m0[3u].x) + _618;
    float _693 = (cbMtdParam._m0[3u].x * (((_661 * _552) - _661) + _664.x)) + _661;
    float _694 = (cbMtdParam._m0[3u].x * (((_662 * _552) - _662) + _664.y)) + _662;
    float _695 = (cbMtdParam._m0[3u].x * (((_663 * _552) - _663) + _664.z)) + _663;
    vec4 _696 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _709 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_618 * (_462 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_618 * (_463 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_618 * (_464 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _696.z;
    float _713 = _709 * cbMatDynParam._m0[13u].w;
    float _723 = (_713 * (cbMatDynParam._m0[13u].x - _693)) + _693;
    float _724 = (_713 * (cbMatDynParam._m0[13u].y - _694)) + _694;
    float _725 = (_713 * (cbMatDynParam._m0[13u].z - _695)) + _695;
    float _733 = ((_709 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _680)) + _680;
    float _734 = 1.0 - _733;
    float _735 = _734 * _723;
    float _736 = _734 * _724;
    float _737 = _734 * _725;
    float _741 = (_723 + (-0.039999999105930328369140625)) * _733;
    float _742 = (_724 + (-0.039999999105930328369140625)) * _733;
    float _743 = (_725 + (-0.039999999105930328369140625)) * _733;
    float _744 = _741 + 0.039999999105930328369140625;
    float _745 = _742 + 0.039999999105930328369140625;
    float _746 = _743 + 0.039999999105930328369140625;
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _547, cbSceneParam._m0[86u].y * _548));
    float _758 = _755.x * TEXCOORD_4;
    float _759 = dot(vec3(_457, _458, _459), vec3(_539, _540, _541));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _457) - _539;
    float _767 = (_762 * _458) - _540;
    float _768 = (_762 * _459) - _541;
    float _772 = abs(dot(vec3(_539, _540, _541), vec3(_457, _458, _459)));
    float _3613 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_626);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _793 = (1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _794 = _787 * _774;
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _861 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _865 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _890 = _822 + _457;
        float _891 = _826 + _458;
        float _892 = _830 + _459;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_457, _458, _459), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3661 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_457, _458, _459), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3694 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_457, _458, _459), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3727 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1177 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1181 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1204 = _822 + _457;
        float _1205 = _826 + _458;
        float _1206 = _830 + _459;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_457, _458, _459), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3790 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_457, _458, _459), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3823 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_457, _458, _459), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3856 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1133;
        _1443 = _1133;
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = _1133;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1146)) + _1146;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _766 * 0.5;
    float _1511 = _767 * 0.5;
    float _1512 = _768 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1637 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1640 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1668 = frontier_phi_16_14_ladder;
        }
        float _1897;
        if (_1637 > 0.0)
        {
            _1897 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2154;
        if (_1640 > 0.0)
        {
            _2154 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2154 = frontier_phi_37_32_ladder;
        }
        float _2156 = isnan(_1897) ? _1668 : (isnan(_1668) ? _1897 : min(_1668, _1897));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1634) + _1623;
        float _2162 = (_2157 * _1637) + _1627;
        float _2163 = (_2157 * _1640) + _1631;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2164;
        float _2168 = _2164 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 > _2168) || ((_2162 < _2166) || ((_2161 < _2166) || (_2161 > _2168))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2163, cbModelParam._m0[9u].z, fma(_2162, cbModelParam._m0[9u].y, _2161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2163, cbModelParam._m0[10u].z, fma(_2162, cbModelParam._m0[10u].y, _2161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2163, cbModelParam._m0[11u].z, fma(_2162, cbModelParam._m0[11u].y, _2161 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_15_37_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_15_37_ladder_2;
        _1658 = frontier_phi_15_37_ladder_1;
        _1660 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1576);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1736 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1739 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1902;
        if (_1733 > 0.0)
        {
            _1902 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1902 = frontier_phi_27_23_ladder;
        }
        float _2181;
        if (_1736 > 0.0)
        {
            _2181 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2181 = frontier_phi_39_34_ladder;
        }
        float _2394;
        if (_1739 > 0.0)
        {
            _2394 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2394 = frontier_phi_48_45_ladder;
        }
        float _2396 = isnan(_2181) ? _1902 : (isnan(_1902) ? _2181 : min(_1902, _2181));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1733) + _1722;
        float _2402 = (_2397 * _1736) + _1726;
        float _2403 = (_2397 * _1739) + _1730;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2606 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_24_48_ladder = _2606.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2606.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2606.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_24_48_ladder_2;
        _1760 = frontier_phi_24_48_ladder_1;
        _1762 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1665);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1775 = (((_793 * _744) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1777 = (((_793 * _745) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1760 - _1658)) + _1658);
    float _1779 = (((_793 * _746) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1762 - _1660)) + _1660);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    vec4 _1796 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_547, _548));
    float _1798 = _1796.w;
    float _1810 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1798);
    float _1811 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1798);
    float _1812 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1798);
    uvec4 _1816 = floatBitsToUint(cbInstanceData._m0[_650 + 5u]);
    uint _1818 = _1816.x * 14u;
    uint _1819 = _1818 + 13u;
    float _1826 = _758 + (-1.0);
    float _1831 = (cbLight._m0[_1819].x * _1826) + 1.0;
    float _1832 = (cbLight._m0[_1819].y * _1826) + 1.0;
    float _1833 = (cbLight._m0[_1819].z * _1826) + 1.0;
    float _1834 = (cbLight._m0[_1819].w * _1826) + 1.0;
    uint _1835 = _1818 + 5u;
    float _1841 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1845 = _1818 + 4u;
    float _1855 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1859 = _1818 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_457, _458, _459));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_457, _458, _459));
    float _3992 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _4003 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1835].x * _1841) * _1880) + (((cbLight._m0[_1845].x * _1810) * _1855) * _1878);
    float _1888 = ((_1841 * cbLight._m0[_1835].y) * _1880) + (((cbLight._m0[_1845].y * _1811) * _1855) * _1878);
    float _1889 = ((_1841 * cbLight._m0[_1835].z) * _1880) + (((cbLight._m0[_1845].z * _1812) * _1855) * _1878);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1818 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1887;
        _1909 = _1888;
        _1911 = _1889;
    }
    else
    {
        uint _1915 = _1818 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1818 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4014 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1934 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1887;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2125 = _1818 + 7u;
        float _2141 = (dot(vec3(cbLight._m0[_1818 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4030 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _2144 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1952 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _1907;
        _1954 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _1909;
        _1956 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _1911;
    }
    uint _1959 = _1818 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _626) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1818].x + _539;
    float _1975 = cbLight._m0[_1818].y + _540;
    float _1976 = cbLight._m0[_1818].z + _541;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1818].xyz));
    float _4046 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1988 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _1989 = dot(vec3(_457, _458, _459), vec3(_1981, _1982, _1983));
    float _4068 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_1981, _1982, _1983));
    float _4079 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0);
    float _2010 = 0.959999978542327880859375 - _741;
    float _2012 = 0.959999978542327880859375 - _742;
    float _2013 = 0.959999978542327880859375 - _743;
    float _2020 = 1.0 - _1973;
    float _2031 = (0.5 / (((_1988 * ((_1987 * _2020) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2020) + _1973) * _1987))) * _1987;
    float _4090 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2047 = _1818 + 9u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _626) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1859].x + _539;
    float _2061 = cbLight._m0[_1859].y + _540;
    float _2062 = cbLight._m0[_1859].z + _541;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1859].xyz));
    float _4101 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2074 = dot(vec3(_457, _458, _459), vec3(_2067, _2068, _2069));
    float _4112 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2067, _2068, _2069));
    float _4123 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2059 * _2059;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
    float _2100 = 1.0 - _2059;
    float _2110 = (0.5 / (((_1988 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2100) + _2059) * _2073))) * _2073;
    float _4134 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    float _2122 = (((((_2093 * _2010) + _744) * cbLight._m0[_2047].x) * _2112) * _1841) + ((((cbLight._m0[_1959].x * _1810) * ((_2009 * _2010) + _744)) * _2033) * _1855);
    float _2123 = (((((_2093 * _2012) + _745) * cbLight._m0[_2047].y) * _2112) * _1841) + ((((cbLight._m0[_1959].y * _1811) * ((_2009 * _2012) + _745)) * _2033) * _1855);
    float _2124 = (((((_2093 * _2013) + _746) * cbLight._m0[_2047].z) * _2112) * _1841) + ((((cbLight._m0[_1959].z * _1812) * ((_2009 * _2013) + _746)) * _2033) * _1855);
    float _2186;
    float _2188;
    float _2190;
    if (_1896)
    {
        _2186 = _2122;
        _2188 = _2123;
        _2190 = _2124;
    }
    else
    {
        uint _2192 = _1818 + 2u;
        uint _2196 = _1818 + 10u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _626) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _539;
        float _2213 = cbLight._m0[_2192].y + _540;
        float _2214 = cbLight._m0[_2192].z + _541;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2192].xyz));
        float _4145 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2226 = dot(vec3(_457, _458, _459), vec3(_2219, _2220, _2221));
        float _4156 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4167 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0);
        float _2252 = 1.0 - _2211;
        float _2262 = (0.5 / (((_1988 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2252) + _2211) * _2225))) * _2225;
        float _4178 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2186 = (((((_2245 * _2010) + _744) * cbLight._m0[_2196].x) * _2264) * _2265) + _2122;
        _2188 = (((((_2245 * _2012) + _745) * cbLight._m0[_2196].y) * _2264) * _2265) + _2123;
        _2190 = (((((_2245 * _2013) + _746) * cbLight._m0[_2196].z) * _2264) * _2265) + _2124;
    }
    float _2300;
    float _2302;
    float _2304;
    if (_1914)
    {
        _2300 = _2186;
        _2302 = _2188;
        _2304 = _2190;
    }
    else
    {
        uint _2311 = _1818 + 3u;
        uint _2315 = _1818 + 11u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _626) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _539;
        float _2332 = cbLight._m0[_2311].y + _540;
        float _2333 = cbLight._m0[_2311].z + _541;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2311].xyz));
        float _4194 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2345 = dot(vec3(_457, _458, _459), vec3(_2338, _2339, _2340));
        float _4205 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4216 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_1988 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2371) + _2330) * _2344))) * _2344;
        float _4227 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2300 = (((((_2364 * _2010) + _744) * cbLight._m0[_2315].x) * _2383) * _2384) + _2186;
        _2302 = (((((_2364 * _2012) + _745) * cbLight._m0[_2315].y) * _2383) * _2384) + _2188;
        _2304 = (((((_2364 * _2013) + _746) * cbLight._m0[_2315].z) * _2383) * _2384) + _2190;
    }
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_1816.y == 0u)
    {
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2459;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2459;
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2459;
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.x;
        uint _2486 = uint((float(_2474.y) * floor(float(uint(cbSceneParam._m0[85u].y * _548) / _2475))) + floor(float(uint(cbSceneParam._m0[85u].x * _547) / _2475)));
        float _2496 = (log2(_2462 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2497 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        uint _2500 = uint(isnan(14.0) ? _2497 : (isnan(_2497) ? 14.0 : min(_2497, 14.0)));
        uvec4 _2505 = texelFetch(g_lightClusterGridBuffer, int(((_2500 << 2u) + (_2486 << 6u)) >> 2u));
        uint _2506 = _2505.x;
        uint _2507 = _2474.z;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((((1u << ((_2507 >> 4u) & 15u)) + 4294967295u) & _2506) == 0u) || ((_2507 & 240u) == 0u))
        {
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
        }
        else
        {
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2771)
                {
                    frontier_phi_63_pred = _2760;
                    frontier_phi_63_pred_1 = _2759;
                    frontier_phi_63_pred_2 = _2758;
                    frontier_phi_63_pred_3 = _2757;
                    frontier_phi_63_pred_4 = _2756;
                    frontier_phi_63_pred_5 = _2755;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2770;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2761 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2460;
                        float _2946 = _2905.y - _2461;
                        float _2947 = _2905.z - _2462;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_571, _574, _577), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4253 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2976 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2980 = (-0.0) - _2460;
                        float _2981 = (-0.0) - _2461;
                        float _2982 = (-0.0) - _2462;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2997 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2998 = 1.0 - _774;
                        float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                        float _3006 = _3005 * _3005;
                        float _3007 = _3006 * _3006;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(_571, _574, _577), vec3(_2987, _2988, _2989));
                        float _4269 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _3022 = dot(vec3(_571, _574, _577), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4280 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                        float _3030 = _2965 * _3006;
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _2955) + _3031;
                        float _4291 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _3036 = 1.0 - _3006;
                        float _3046 = (0.5 / (((_3035 * ((_3021 * _3036) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3006) * _3021))) * _3035;
                        float _4302 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3057 = (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3029 * _3029) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2814 = (_2976 * _2924.x) + _2882;
                        _2815 = (_2976 * _2924.y) + _2883;
                        _2816 = (_2976 * _2924.z) + _2884;
                        _2811 = (_3057 * _2941.x) + _2879;
                        _2812 = (_3057 * _2941.y) + _2880;
                        _2813 = (_3057 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_63_pred = _2816;
                    frontier_phi_63_pred_1 = _2815;
                    frontier_phi_63_pred_2 = _2814;
                    frontier_phi_63_pred_3 = _2813;
                    frontier_phi_63_pred_4 = _2812;
                    frontier_phi_63_pred_5 = _2811;
                }
                _2622 = frontier_phi_63_pred;
                _2620 = frontier_phi_63_pred_1;
                _2618 = frontier_phi_63_pred_2;
                _2616 = frontier_phi_63_pred_3;
                _2614 = frontier_phi_63_pred_4;
                _2612 = frontier_phi_63_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2612;
                    _2756 = _2614;
                    _2757 = _2616;
                    _2758 = _2618;
                    _2759 = _2620;
                    _2760 = _2622;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
        }
        uvec4 _2625 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2626 = _2625.z;
        uint _2628 = (_2626 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2628) & _2506) == 0u)
        {
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
            float _2749 = _2748 * _2460;
            float _2750 = _2748 * _2461;
            float _2751 = _2748 * _2462;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2628 < ((_2626 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2862 = _2611;
                float _2863 = _2613;
                float _2864 = _2615;
                float _2865 = _2617;
                float _2866 = _2619;
                float _2867 = _2621;
                uint _2868 = _2628;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2878)
                    {
                        frontier_phi_69_pred = _2867;
                        frontier_phi_69_pred_1 = _2866;
                        frontier_phi_69_pred_2 = _2865;
                        frontier_phi_69_pred_3 = _2864;
                        frontier_phi_69_pred_4 = _2863;
                        frontier_phi_69_pred_5 = _2862;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        uint _3081 = _2877;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3150;
                        vec4 _3166;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3092 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3137 = (_3092 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3092 * 40u) + 20u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3092 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3092 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2462, _3201.z, fma(_2461, _3201.y, _3201.x * _2460)) + _3201.w;
                            _3214 = !((fma(_2462, _3182.z, fma(_2461, _3182.y, _3182.x * _2460)) + _3182.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3107.x - _2460;
                                float _3242 = _3107.y - _2461;
                                float _3243 = _3107.z - _2462;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3108 * _3108));
                                float _4313 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3259 = sqrt(_3244) * _3123.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_571, _574, _577))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_2462, _3150.z, fma(_2461, _3150.y, _3150.x * _2460)) + _3150.w) / _3213;
                                float _3273 = (fma(_2462, _3166.z, fma(_2461, _3166.y, _3166.x * _2460)) + _3166.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4329 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _774;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2749;
                                float _3303 = _3249 - _2750;
                                float _3304 = _3250 - _2751;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4340 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3316 = dot(vec3(_571, _574, _577), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4351 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_571, _574, _577), vec3(_3248, _3249, _3250))) + _3325;
                                float _4362 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4373 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3279 * _3123.z;
                                frontier_phi_75_pred_1 = _3279 * _3123.y;
                                frontier_phi_75_pred_2 = _3279 * _3123.x;
                                frontier_phi_75_pred_3 = _3353 * _3135.z;
                                frontier_phi_75_pred_4 = _3353 * _3135.y;
                                frontier_phi_75_pred_5 = _3353 * _3135.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_75_pred;
                            _3361 = frontier_phi_75_pred_1;
                            _3360 = frontier_phi_75_pred_2;
                            _3359 = frontier_phi_75_pred_3;
                            _3358 = frontier_phi_75_pred_4;
                            _3357 = frontier_phi_75_pred_5;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3062 = _3357 + _3075;
                            _3063 = _3358 + _3076;
                            _3064 = _3359 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3067;
                        frontier_phi_69_pred_1 = _3066;
                        frontier_phi_69_pred_2 = _3065;
                        frontier_phi_69_pred_3 = _3064;
                        frontier_phi_69_pred_4 = _3063;
                        frontier_phi_69_pred_5 = _3062;
                    }
                    _2734 = frontier_phi_69_pred;
                    _2732 = frontier_phi_69_pred_1;
                    _2730 = frontier_phi_69_pred_2;
                    _2728 = frontier_phi_69_pred_3;
                    _2726 = frontier_phi_69_pred_4;
                    _2724 = frontier_phi_69_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2724;
                        _2863 = _2726;
                        _2864 = _2728;
                        _2865 = _2730;
                        _2866 = _2732;
                        _2867 = _2734;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2734;
                frontier_phi_57_58_ladder_1 = _2732;
                frontier_phi_57_58_ladder_2 = _2730;
                frontier_phi_57_58_ladder_3 = _2728;
                frontier_phi_57_58_ladder_4 = _2726;
                frontier_phi_57_58_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_57_58_ladder = _2621;
                frontier_phi_57_58_ladder_1 = _2619;
                frontier_phi_57_58_ladder_2 = _2617;
                frontier_phi_57_58_ladder_3 = _2615;
                frontier_phi_57_58_ladder_4 = _2613;
                frontier_phi_57_58_ladder_5 = _2611;
            }
            _2723 = frontier_phi_57_58_ladder_5;
            _2725 = frontier_phi_57_58_ladder_4;
            _2727 = frontier_phi_57_58_ladder_3;
            _2729 = frontier_phi_57_58_ladder_2;
            _2731 = frontier_phi_57_58_ladder_1;
            _2733 = frontier_phi_57_58_ladder;
        }
        float _2738 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2518 = (_2738 * _2729) + _1952;
        _2520 = (_2738 * _2731) + _1954;
        _2522 = (_2738 * _2733) + _1956;
        _2524 = ((_2723 * _744) * _2738) + _2300;
        _2526 = ((_2725 * _745) * _2738) + _2302;
        _2528 = ((_2727 * _746) * _2738) + _2304;
    }
    else
    {
        _2518 = _1952;
        _2520 = _1954;
        _2522 = _1956;
        _2524 = _2300;
        _2526 = _2302;
        _2528 = _2304;
    }
    float _4389 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4400 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4411 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4422 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _2546 = ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2518 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _758))) + ((_2524 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2547 = ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2520 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _758))) + ((_2526 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2548 = ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2522 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _758))) + ((_2528 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2556 = cbInstanceData._m0[_650 + 6u].w * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)));
    float _2561 = _547 / cbSceneParam._m0[86u].x;
    float _2562 = _548 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _481 : (isnan(_481) ? cbSceneParam._m0[77u].w : min(_481, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_481 > cbSceneParam._m0[78u].w)
    {
        float _2636 = isnan(_481) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _481 : min(cbSceneParam._m0[80u].w, _481));
        float _2637 = _2636 / _481;
        float _2648 = _2637 * _532;
        float _2649 = _533 * _2637;
        float _2650 = (-0.0) - _2649;
        float _2651 = _2637 * _534;
        float _2653 = (cbSceneParam._m0[77u].w * _2650) / _2636;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2649;
        float _2661 = sqrt(((_2648 * _2648) + (_2649 * _2649)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2636)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2650 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2786 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2824 = ((abs(_2661 / _2650) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2671 * _2795) - exp2(_2671 * _2796)) * _2784))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2581);
        _2673 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2675 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2677 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2679 = _2835 * _2581;
    }
    else
    {
        _2673 = _2578;
        _2675 = _2579;
        _2677 = _2580;
        _2679 = _2581;
    }
    float _2691 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2692 = _2691 == 3.0;
    float _2693 = log2(_2679);
    float _2700 = exp2(_2693 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0)));
    float _2701 = exp2(_2693 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)));
    float _2702 = exp2(_2693 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)));
    float _2711 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2711 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.y = _2711 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.z = _2711 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.w = _2556;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2556;
}


