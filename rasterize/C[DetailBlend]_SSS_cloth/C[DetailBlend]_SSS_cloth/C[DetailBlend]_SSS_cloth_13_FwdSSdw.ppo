#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1131;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _262 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = cbMtdParam._m0[9u].x * _262.x;
    float _275 = cbMtdParam._m0[9u].y * _262.y;
    float _276 = cbMtdParam._m0[9u].z * _262.z;
    float _282 = exp2(log2(1.0 - _244.w) * 8.0);
    vec4 _294 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _328 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _336 = (((((cbMtdParam._m0[12u].x * _294.x) - _274) * _282) + _274) * 4.55000019073486328125) * _328.x;
    float _338 = (((((cbMtdParam._m0[12u].y * _294.y) - _275) * _282) + _275) * 4.55000019073486328125) * _328.y;
    float _340 = (((((cbMtdParam._m0[12u].z * _294.z) - _276) * _282) + _276) * 4.55000019073486328125) * _328.z;
    float _341 = _328.w * _262.w;
    float _362 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _365 = ((cbMtdParam._m0[14u].y - _362) * _282) + _362;
    vec4 _377 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _379 = _377.x;
    float _380 = _377.y;
    float _386 = cbMtdParam._m0[13u].x + _377.z;
    vec4 _399 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _411 = (_244.z * 2.0) * ((((_399.z - _386) + cbMtdParam._m0[14u].x) * _282) + _386);
    float _415 = (_244.x * 2.0) + (-1.0);
    float _417 = (_244.y * 2.0) + (-1.0);
    float _418 = dot(vec2(_415, _417), vec2(_415, _417));
    float _3489 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))));
    float _436 = ((((((_399.x - _379) * _282) + _379) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _415;
    float _437 = ((((((_399.y - _380) * _282) + _380) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _417;
    float _440 = fma(_423, _228, fma(_437, _220 * TANGENT.x, (_206 * _198) * _436));
    float _443 = fma(_423, _229, fma(_437, _220 * TANGENT.y, (_206 * _199) * _436));
    float _446 = fma(_423, _230, fma(_437, _220 * TANGENT.z, (_206 * _200) * _436));
    float _450 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _451 = _450 * _440;
    float _452 = _450 * _443;
    float _453 = _450 * _446;
    float _3500 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _454 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _455 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _456 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _457 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _458 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _459 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _546 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _548 = _546.w;
    float _568 = fma(_453, cbSceneParam._m0[5u].z, fma(_452, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _451));
    float _571 = fma(_453, cbSceneParam._m0[6u].z, fma(_452, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _451));
    float _574 = fma(_453, cbSceneParam._m0[7u].z, fma(_452, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _451));
    vec4 _576 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _578 = _576.x;
    float _590 = (((_576.y - _455) + (_576.w * _455)) * cbMtdParam._m0[3u].x) + _455;
    vec4 _591 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _607 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_578 * _578)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _591.z;
    float _616 = (((cbMatDynParam._m0[15u].x - _459) * cbMatDynParam._m0[15u].w) * _607) + _459;
    float _624 = ((_607 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _590)) + _590;
    uint _648 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = (_648 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * _456) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * _457) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * _458) * cbInstanceData._m0[_650].z;
    float _3566 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    vec4 _662 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _667 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _678 = (((_667.x - _616) + (_667.w * _616)) * cbMtdParam._m0[3u].x) + _616;
    float _691 = (cbMtdParam._m0[3u].x * (((_659 * _548) - _659) + _662.x)) + _659;
    float _692 = (cbMtdParam._m0[3u].x * (((_660 * _548) - _660) + _662.y)) + _660;
    float _693 = (cbMtdParam._m0[3u].x * (((_661 * _548) - _661) + _662.z)) + _661;
    float _707 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_616 * (_456 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_616 * (_457 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_616 * (_458 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _711 = _707 * cbMatDynParam._m0[13u].w;
    float _721 = (_711 * (cbMatDynParam._m0[13u].x - _691)) + _691;
    float _722 = (_711 * (cbMatDynParam._m0[13u].y - _692)) + _692;
    float _723 = (_711 * (cbMatDynParam._m0[13u].z - _693)) + _693;
    float _731 = ((_707 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _678)) + _678;
    float _732 = 1.0 - _731;
    float _733 = _732 * _721;
    float _734 = _732 * _722;
    float _735 = _732 * _723;
    float _739 = (_721 + (-0.039999999105930328369140625)) * _731;
    float _740 = (_722 + (-0.039999999105930328369140625)) * _731;
    float _741 = (_723 + (-0.039999999105930328369140625)) * _731;
    float _742 = _739 + 0.039999999105930328369140625;
    float _743 = _740 + 0.039999999105930328369140625;
    float _744 = _741 + 0.039999999105930328369140625;
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _756 = _753.x * TEXCOORD_4;
    float _757 = dot(vec3(_451, _452, _453), vec3(_535, _536, _537));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _451) - _535;
    float _765 = (_760 * _452) - _536;
    float _766 = (_760 * _453) - _537;
    float _770 = abs(dot(vec3(_535, _536, _537), vec3(_451, _452, _453)));
    float _3599 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_624);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _791 = (1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _792 = _785 * _772;
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _859 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _863 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _888 = _820 + _451;
        float _889 = _824 + _452;
        float _890 = _828 + _453;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _855;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _859;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _863;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_451, _452, _453), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3647 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_451, _452, _453), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3680 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_451, _452, _453), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3713 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1175 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1179 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1202 = _820 + _451;
        float _1203 = _824 + _452;
        float _1204 = _828 + _453;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_451, _452, _453), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3776 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_451, _452, _453), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3809 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_451, _452, _453), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3842 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1131;
        _1441 = _1131;
        _1442 = _1131;
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = _1131;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _764 * 0.5;
    float _1509 = _765 * 0.5;
    float _1510 = _766 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _624);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1635 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1638 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1666 = frontier_phi_16_14_ladder;
        }
        float _1893;
        if (_1635 > 0.0)
        {
            _1893 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1893 = frontier_phi_25_21_ladder;
        }
        float _2150;
        if (_1638 > 0.0)
        {
            _2150 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2150 = frontier_phi_37_32_ladder;
        }
        float _2152 = isnan(_1893) ? _1666 : (isnan(_1666) ? _1893 : min(_1666, _1893));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1632) + _1621;
        float _2158 = (_2153 * _1635) + _1625;
        float _2159 = (_2153 * _1638) + _1629;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2160;
        float _2164 = _2160 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 > _2164) || ((_2158 < _2162) || ((_2157 < _2162) || (_2157 > _2164))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2159, cbModelParam._m0[9u].z, fma(_2158, cbModelParam._m0[9u].y, _2157 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2159, cbModelParam._m0[10u].z, fma(_2158, cbModelParam._m0[10u].y, _2157 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2159, cbModelParam._m0[11u].z, fma(_2158, cbModelParam._m0[11u].y, _2157 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_15_37_ladder = _2287.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2287.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2287.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_15_37_ladder_2;
        _1656 = frontier_phi_15_37_ladder_1;
        _1658 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1574);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _624);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1720 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1724 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1728 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1731 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1734 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1737 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1898;
        if (_1731 > 0.0)
        {
            _1898 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1898 = frontier_phi_27_23_ladder;
        }
        float _2177;
        if (_1734 > 0.0)
        {
            _2177 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2177 = frontier_phi_39_34_ladder;
        }
        float _2390;
        if (_1737 > 0.0)
        {
            _2390 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2390 = frontier_phi_48_45_ladder;
        }
        float _2392 = isnan(_2177) ? _1898 : (isnan(_1898) ? _2177 : min(_1898, _2177));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1731) + _1720;
        float _2398 = (_2393 * _1734) + _1724;
        float _2399 = (_2393 * _1737) + _1728;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_24_48_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1756 = frontier_phi_24_48_ladder_2;
        _1758 = frontier_phi_24_48_ladder_1;
        _1760 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1663);
        _1756 = _1740.x * cbModelParam._m0[1u].z;
        _1758 = _1740.y * cbModelParam._m0[1u].z;
        _1760 = _1740.z * cbModelParam._m0[1u].z;
    }
    float _1773 = (((_791 * _742) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1775 = (((_791 * _743) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1777 = (((_791 * _744) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1760 - _1658)) + _1658);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1773 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1773 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1773 * cbSceneParam._m0[91u].x));
    vec4 _1794 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_543, _544));
    float _1796 = _1794.w;
    float _1808 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1796);
    float _1809 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1796);
    float _1810 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1796);
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_648 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _756 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1852 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1856 = _1816 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_451, _452, _453));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_451, _452, _453));
    float _3978 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _3989 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1833].x * _1839) * _1877) + (((cbLight._m0[_1843].x * _1808) * _1852) * _1875);
    float _1885 = ((_1839 * cbLight._m0[_1833].y) * _1877) + (((cbLight._m0[_1843].y * _1809) * _1852) * _1875);
    float _1886 = ((_1839 * cbLight._m0[_1833].z) * _1877) + (((cbLight._m0[_1843].z * _1810) * _1852) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1816 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4000 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1930 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2121 = _1816 + 7u;
        float _2137 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_451, _452, _453)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4016 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2140 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1948 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _1903;
        _1950 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _1905;
        _1952 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _1907;
    }
    uint _1955 = _1816 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _624) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1816].x + _535;
    float _1971 = cbLight._m0[_1816].y + _536;
    float _1972 = cbLight._m0[_1816].z + _537;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1816].xyz));
    float _4032 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1984 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1985 = dot(vec3(_451, _452, _453), vec3(_1977, _1978, _1979));
    float _4054 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1977, _1978, _1979));
    float _4065 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2005 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _2006 = 0.959999978542327880859375 - _739;
    float _2008 = 0.959999978542327880859375 - _740;
    float _2009 = 0.959999978542327880859375 - _741;
    float _2016 = 1.0 - _1969;
    float _2027 = (0.5 / (((_1984 * ((_1983 * _2016) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2016) + _1969) * _1983))) * _1983;
    float _4076 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2043 = _1816 + 9u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _624) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1856].x + _535;
    float _2057 = cbLight._m0[_1856].y + _536;
    float _2058 = cbLight._m0[_1856].z + _537;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_1856].xyz));
    float _4087 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2070 = dot(vec3(_451, _452, _453), vec3(_2063, _2064, _2065));
    float _4098 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2074 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2063, _2064, _2065));
    float _4109 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2078 = _2055 * _2055;
    float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
    float _2089 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
    float _2096 = 1.0 - _2055;
    float _2106 = (0.5 / (((_1984 * ((_2069 * _2096) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2096) + _2055) * _2069))) * _2069;
    float _4120 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
    float _2118 = (((((_2089 * _2006) + _742) * cbLight._m0[_2043].x) * _2108) * _1839) + ((((cbLight._m0[_1955].x * _1808) * ((_2005 * _2006) + _742)) * _2029) * _1852);
    float _2119 = (((((_2089 * _2008) + _743) * cbLight._m0[_2043].y) * _2108) * _1839) + ((((cbLight._m0[_1955].y * _1809) * ((_2005 * _2008) + _743)) * _2029) * _1852);
    float _2120 = (((((_2089 * _2009) + _744) * cbLight._m0[_2043].z) * _2108) * _1839) + ((((cbLight._m0[_1955].z * _1810) * ((_2005 * _2009) + _744)) * _2029) * _1852);
    float _2182;
    float _2184;
    float _2186;
    if (_1892)
    {
        _2182 = _2118;
        _2184 = _2119;
        _2186 = _2120;
    }
    else
    {
        uint _2188 = _1816 + 2u;
        uint _2192 = _1816 + 10u;
        float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _624) * 0.949999988079071044921875);
        float _2207 = _2206 * _2206;
        float _2208 = cbLight._m0[_2188].x + _535;
        float _2209 = cbLight._m0[_2188].y + _536;
        float _2210 = cbLight._m0[_2188].z + _537;
        float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
        float _2215 = _2214 * _2208;
        float _2216 = _2214 * _2209;
        float _2217 = _2214 * _2210;
        float _2218 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2188].xyz));
        float _4131 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2222 = dot(vec3(_451, _452, _453), vec3(_2215, _2216, _2217));
        float _4142 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _2226 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2215, _2216, _2217));
        float _4153 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2230 = _2207 * _2207;
        float _2234 = ((_2225 * _2225) * (_2230 + (-1.0))) + 1.0;
        float _2241 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
        float _2248 = 1.0 - _2207;
        float _2258 = (0.5 / (((_1984 * ((_2221 * _2248) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2248) + _2207) * _2221))) * _2221;
        float _4164 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2230 / ((_2234 * _2234) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2182 = (((((_2241 * _2006) + _742) * cbLight._m0[_2192].x) * _2260) * _2261) + _2118;
        _2184 = (((((_2241 * _2008) + _743) * cbLight._m0[_2192].y) * _2260) * _2261) + _2119;
        _2186 = (((((_2241 * _2009) + _744) * cbLight._m0[_2192].z) * _2260) * _2261) + _2120;
    }
    float _2296;
    float _2298;
    float _2300;
    if (_1910)
    {
        _2296 = _2182;
        _2298 = _2184;
        _2300 = _2186;
    }
    else
    {
        uint _2307 = _1816 + 3u;
        uint _2311 = _1816 + 11u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _624) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _535;
        float _2328 = cbLight._m0[_2307].y + _536;
        float _2329 = cbLight._m0[_2307].z + _537;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_451, _452, _453), vec3(cbLight._m0[_2307].xyz));
        float _4180 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2341 = dot(vec3(_451, _452, _453), vec3(_2334, _2335, _2336));
        float _4191 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4202 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0);
        float _2367 = 1.0 - _2326;
        float _2377 = (0.5 / (((_1984 * ((_2340 * _2367) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2367) + _2326) * _2340))) * _2340;
        float _4213 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2296 = (((((_2360 * _2006) + _742) * cbLight._m0[_2311].x) * _2379) * _2380) + _2182;
        _2298 = (((((_2360 * _2008) + _743) * cbLight._m0[_2311].y) * _2379) * _2380) + _2184;
        _2300 = (((((_2360 * _2009) + _744) * cbLight._m0[_2311].z) * _2379) * _2380) + _2186;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1814.y == 0u)
    {
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2455;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2455;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2455;
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2471)));
        float _2492 = (log2(_2458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2767)
                {
                    frontier_phi_63_pred = _2756;
                    frontier_phi_63_pred_1 = _2755;
                    frontier_phi_63_pred_2 = _2754;
                    frontier_phi_63_pred_3 = _2753;
                    frontier_phi_63_pred_4 = _2752;
                    frontier_phi_63_pred_5 = _2751;
                }
                else
                {
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    uint _2881;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2766;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    for (;;)
                    {
                        uint _2885 = uint(findLSB(_2881)) + (_2757 << 5u);
                        uint _2882 = (_2881 + 4294967295u) & _2881;
                        uint _2887 = _2885 * 48u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2887)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2887 + 3u)).x));
                        uint _2907 = (_2885 * 48u) + 4u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2926 = (_2885 * 48u) + 8u;
                        vec3 _2937 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x));
                        float _2941 = _2901.x - _2456;
                        float _2942 = _2901.y - _2457;
                        float _2943 = _2901.z - _2458;
                        float _2944 = dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943));
                        float _2947 = inversesqrt(_2944);
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2951 = dot(vec3(_568, _571, _574), vec3(_2948, _2949, _2950));
                        float _2956 = 1.0 - (_2944 * _2901.w);
                        float _4239 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2957 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2958 = sqrt(_2944) * _2920.w;
                        float _2961 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2951) + _2962;
                        float _2968 = _2958 * _2958;
                        float _2972 = ((isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))) * _2957) / ((_2968 * 0.699999988079071044921875) + 1.0);
                        float _2976 = (-0.0) - _2456;
                        float _2977 = (-0.0) - _2457;
                        float _2978 = (-0.0) - _2458;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2993 = exp2(log2(1.0 / ((_2968 * 3.5) + 5.0)) * 0.25);
                        float _2994 = 1.0 - _772;
                        float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                        float _3002 = _3001 * _3001;
                        float _3003 = _3002 * _3002;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3014 = dot(vec3(_568, _571, _574), vec3(_2983, _2984, _2985));
                        float _4255 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _3018 = dot(vec3(_568, _571, _574), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                        float _4266 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                        float _3026 = _2961 * _3002;
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _2951) + _3027;
                        float _4277 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3032 = 1.0 - _3002;
                        float _3042 = (0.5 / (((_3031 * ((_3017 * _3032) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _3002) * _3017))) * _3031;
                        float _4288 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3053 = (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) / ((_3025 * _3025) * ((_2968 * 2.1991131305694580078125) + 3.141590118408203125))) * _2957;
                        _2810 = (_2972 * _2920.x) + _2878;
                        _2811 = (_2972 * _2920.y) + _2879;
                        _2812 = (_2972 * _2920.z) + _2880;
                        _2807 = (_3053 * _2937.x) + _2875;
                        _2808 = (_3053 * _2937.y) + _2876;
                        _2809 = (_3053 * _2937.z) + _2877;
                        if (_2882 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2882;
                        }
                    }
                    frontier_phi_63_pred = _2812;
                    frontier_phi_63_pred_1 = _2811;
                    frontier_phi_63_pred_2 = _2810;
                    frontier_phi_63_pred_3 = _2809;
                    frontier_phi_63_pred_4 = _2808;
                    frontier_phi_63_pred_5 = _2807;
                }
                _2618 = frontier_phi_63_pred;
                _2616 = frontier_phi_63_pred_1;
                _2614 = frontier_phi_63_pred_2;
                _2612 = frontier_phi_63_pred_3;
                _2610 = frontier_phi_63_pred_4;
                _2608 = frontier_phi_63_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2608;
                    _2752 = _2610;
                    _2753 = _2612;
                    _2754 = _2614;
                    _2755 = _2616;
                    _2756 = _2618;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2624) & _2502) == 0u)
        {
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
            float _2745 = _2744 * _2456;
            float _2746 = _2744 * _2457;
            float _2747 = _2744 * _2458;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2858 = _2607;
                float _2859 = _2609;
                float _2860 = _2611;
                float _2861 = _2613;
                float _2862 = _2615;
                float _2863 = _2617;
                uint _2864 = _2624;
                uint _2873;
                bool _2874;
                for (;;)
                {
                    _2873 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                    _2874 = _2873 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2874)
                    {
                        frontier_phi_69_pred = _2863;
                        frontier_phi_69_pred_1 = _2862;
                        frontier_phi_69_pred_2 = _2861;
                        frontier_phi_69_pred_3 = _2860;
                        frontier_phi_69_pred_4 = _2859;
                        frontier_phi_69_pred_5 = _2858;
                    }
                    else
                    {
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        uint _3077 = _2873;
                        uint _3078;
                        vec4 _3103;
                        float _3104;
                        vec4 _3119;
                        vec3 _3131;
                        vec4 _3146;
                        vec4 _3162;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3088 = ((_2864 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3077));
                            _3078 = (_3077 + 4294967295u) & _3077;
                            uint _3090 = _3088 * 40u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3104 = _3103.w;
                            uint _3106 = (_3088 * 40u) + 4u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3088 * 40u) + 8u;
                            _3131 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x));
                            uint _3133 = (_3088 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3088 * 40u) + 20u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3088 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3088 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2458, _3197.z, fma(_2457, _3197.y, _3197.x * _2456)) + _3197.w;
                            _3210 = !((fma(_2458, _3178.z, fma(_2457, _3178.y, _3178.x * _2456)) + _3178.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3103.x - _2456;
                                float _3238 = _3103.y - _2457;
                                float _3239 = _3103.z - _2458;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3104 * _3104));
                                float _4299 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3255 = sqrt(_3240) * _3119.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_568, _571, _574))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2458, _3146.z, fma(_2457, _3146.y, _3146.x * _2456)) + _3146.w) / _3209;
                                float _3269 = (fma(_2458, _3162.z, fma(_2457, _3162.y, _3162.x * _2456)) + _3162.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4315 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _772;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2745;
                                float _3299 = _3245 - _2746;
                                float _3300 = _3246 - _2747;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_568, _571, _574), vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747));
                                float _4326 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3312 = dot(vec3(_568, _571, _574), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4337 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_568, _571, _574), vec3(_3244, _3245, _3246))) + _3321;
                                float _4348 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4359 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3275 * _3119.z;
                                frontier_phi_75_pred_1 = _3275 * _3119.y;
                                frontier_phi_75_pred_2 = _3275 * _3119.x;
                                frontier_phi_75_pred_3 = _3349 * _3131.z;
                                frontier_phi_75_pred_4 = _3349 * _3131.y;
                                frontier_phi_75_pred_5 = _3349 * _3131.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_75_pred;
                            _3357 = frontier_phi_75_pred_1;
                            _3356 = frontier_phi_75_pred_2;
                            _3355 = frontier_phi_75_pred_3;
                            _3354 = frontier_phi_75_pred_4;
                            _3353 = frontier_phi_75_pred_5;
                            _3061 = _3356 + _3074;
                            _3062 = _3357 + _3075;
                            _3063 = _3358 + _3076;
                            _3058 = _3353 + _3071;
                            _3059 = _3354 + _3072;
                            _3060 = _3355 + _3073;
                            if (_3078 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3078;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3063;
                        frontier_phi_69_pred_1 = _3062;
                        frontier_phi_69_pred_2 = _3061;
                        frontier_phi_69_pred_3 = _3060;
                        frontier_phi_69_pred_4 = _3059;
                        frontier_phi_69_pred_5 = _3058;
                    }
                    _2730 = frontier_phi_69_pred;
                    _2728 = frontier_phi_69_pred_1;
                    _2726 = frontier_phi_69_pred_2;
                    _2724 = frontier_phi_69_pred_3;
                    _2722 = frontier_phi_69_pred_4;
                    _2720 = frontier_phi_69_pred_5;
                    uint _2865 = _2864 + 1u;
                    if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2858 = _2720;
                        _2859 = _2722;
                        _2860 = _2724;
                        _2861 = _2726;
                        _2862 = _2728;
                        _2863 = _2730;
                        _2864 = _2865;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2730;
                frontier_phi_57_58_ladder_1 = _2728;
                frontier_phi_57_58_ladder_2 = _2726;
                frontier_phi_57_58_ladder_3 = _2724;
                frontier_phi_57_58_ladder_4 = _2722;
                frontier_phi_57_58_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_57_58_ladder = _2617;
                frontier_phi_57_58_ladder_1 = _2615;
                frontier_phi_57_58_ladder_2 = _2613;
                frontier_phi_57_58_ladder_3 = _2611;
                frontier_phi_57_58_ladder_4 = _2609;
                frontier_phi_57_58_ladder_5 = _2607;
            }
            _2719 = frontier_phi_57_58_ladder_5;
            _2721 = frontier_phi_57_58_ladder_4;
            _2723 = frontier_phi_57_58_ladder_3;
            _2725 = frontier_phi_57_58_ladder_2;
            _2727 = frontier_phi_57_58_ladder_1;
            _2729 = frontier_phi_57_58_ladder;
        }
        float _2734 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2514 = (_2734 * _2725) + _1948;
        _2516 = (_2734 * _2727) + _1950;
        _2518 = (_2734 * _2729) + _1952;
        _2520 = ((_2719 * _742) * _2734) + _2296;
        _2522 = ((_2721 * _743) * _2734) + _2298;
        _2524 = ((_2723 * _744) * _2734) + _2300;
    }
    else
    {
        _2514 = _1948;
        _2516 = _1950;
        _2518 = _1952;
        _2520 = _2296;
        _2522 = _2298;
        _2524 = _2300;
    }
    float _4375 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4386 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4397 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4408 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _2542 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2514 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _756))) + ((_2520 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2543 = ((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2516 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _756))) + ((_2522 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2544 = ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2518 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _756))) + ((_2524 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2552 = cbInstanceData._m0[_648 + 6u].w * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)));
    float _2557 = _543 / cbSceneParam._m0[86u].x;
    float _2558 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2572 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2574 = _2572.x;
    float _2575 = _2572.y;
    float _2576 = _2572.z;
    float _2577 = _2572.w;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2633 = _2632 / _475;
        float _2644 = _2633 * _528;
        float _2645 = _529 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2647 = _2633 * _530;
        float _2649 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2650 = _2649 + cbSceneParam._m0[79u].w;
        float _2651 = cbSceneParam._m0[79u].w - _2645;
        float _2657 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2647 * _2647));
        float _2660 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2657;
        float _2665 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2667 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2820;
        if (abs((_2646 - _2649) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2820 = ((((_2650 > 0.0) ? exp2(_2665 * _2650) : (2.0 - exp2(_2667 * _2650))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2660;
        }
        else
        {
            float _2780 = 1.0 / cbSceneParam._m0[80u].x;
            float _2781 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : max(_2650, _2651));
            float _2782 = isnan(_2651) ? _2650 : (isnan(_2650) ? _2651 : min(_2650, _2651));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            _2820 = ((abs(_2657 / _2646) * cbSceneParam._m0[80u].y) * ((((_2791 - _2792) * 2.0) - ((exp2(_2665 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0)))) - exp2(_2665 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))))) * _2780)) - ((exp2(_2667 * _2791) - exp2(_2667 * _2792)) * _2780))) + (_2660 * cbSceneParam._m0[80u].z);
        }
        vec4 _2822 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, 1.0), 0.0);
        float _2831 = exp2((_2820 * (-1.44269502162933349609375)) * (1.0 - _2822.w));
        float _2832 = log2(_2831);
        float _2848 = log2(_2577);
        _2669 = (exp2(_2848 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].x)) * _2822.x) / cbSceneParam._m0[78u].x)) + _2574;
        _2671 = (exp2(_2848 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].y)) * _2822.y) / cbSceneParam._m0[78u].y)) + _2575;
        _2673 = (exp2(_2848 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2832 * cbSceneParam._m0[78u].z)) * _2822.z) / cbSceneParam._m0[78u].z)) + _2576;
        _2675 = _2831 * _2577;
    }
    else
    {
        _2669 = _2574;
        _2671 = _2575;
        _2673 = _2576;
        _2675 = _2577;
    }
    float _2687 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2688 = _2687 == 3.0;
    float _2689 = log2(_2675);
    float _2696 = exp2(_2689 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)));
    float _2697 = exp2(_2689 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)));
    float _2698 = exp2(_2689 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0)));
    float _2707 = (_2687 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2707 * (_2688 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.y = _2707 * (_2688 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.z = _2707 * (_2688 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.w = _2552;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2552;
}


