#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _964;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _242.x;
    float _246 = _242.y;
    float _247 = _242.z;
    vec4 _279 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _292 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3300 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _293 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _302 = ((_279.z - _247) * _293) + _247;
    float _306 = ((((_279.x - _245) * _293) + _245) * 2.0) + (-1.0);
    float _308 = ((((_279.y - _246) * _293) + _246) * 2.0) + (-1.0);
    float _309 = dot(vec2(_306, _308), vec2(_306, _308));
    float _3311 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))));
    vec4 _332 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _337 = _332.x * cbMtdParam._m0[9u].x;
    float _338 = _332.y * cbMtdParam._m0[9u].y;
    float _339 = _332.z * cbMtdParam._m0[9u].z;
    vec4 _358 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _372 = (((_358.x * cbMtdParam._m0[10u].x) - _337) * _293) + _337;
    float _373 = (((_358.y * cbMtdParam._m0[10u].y) - _338) * _293) + _338;
    float _374 = (((_358.z * cbMtdParam._m0[10u].z) - _339) * _293) + _339;
    vec4 _387 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    float _389 = _387.x;
    float _407 = ((texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x - _389) * _293) + _389;
    float _410 = fma(_314, _226, fma(_308, _218 * TANGENT.x, (_204 * _196) * _306));
    float _413 = fma(_314, _227, fma(_308, _218 * TANGENT.y, (_204 * _197) * _306));
    float _416 = fma(_314, _228, fma(_308, _218 * TANGENT.z, (_204 * _198) * _306));
    float _420 = inversesqrt(dot(vec3(_410, _413, _416), vec3(_410, _413, _416)));
    float _421 = _420 * _410;
    float _422 = _420 * _413;
    float _423 = _420 * _416;
    float _3322 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _424 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3344 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3355 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3366 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _428 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _444 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _495 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _485);
    float _496 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _485);
    float _497 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _485);
    float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
    float _502 = _495 * _501;
    float _503 = _496 * _501;
    float _504 = _497 * _501;
    float _510 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _511 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _530 = fma(_423, cbSceneParam._m0[5u].z, fma(_422, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _421));
    float _533 = fma(_423, cbSceneParam._m0[6u].z, fma(_422, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _421));
    float _536 = fma(_423, cbSceneParam._m0[7u].z, fma(_422, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _421));
    uint _549 = uint(roundEven(NORMAL.w)) * 13u;
    uint _551 = (_549 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _557 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * cbInstanceData._m0[_551].x;
    float _558 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_551].y;
    float _559 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_551].z;
    float _3377 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _560 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    float _563 = 1.0 - _428;
    float _564 = _560 * _563;
    float _565 = _561 * _563;
    float _566 = _562 * _563;
    float _571 = (_560 + (-0.039999999105930328369140625)) * _428;
    float _572 = (_561 + (-0.039999999105930328369140625)) * _428;
    float _573 = (_562 + (-0.039999999105930328369140625)) * _428;
    float _574 = _571 + 0.039999999105930328369140625;
    float _576 = _572 + 0.039999999105930328369140625;
    float _577 = _573 + 0.039999999105930328369140625;
    vec4 _586 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _510, cbSceneParam._m0[86u].y * _511));
    float _589 = _586.x * TEXCOORD_9.w;
    float _590 = dot(vec3(_421, _422, _423), vec3(_502, _503, _504));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _421) - _502;
    float _598 = (_593 * _422) - _503;
    float _599 = (_593 * _423) - _504;
    float _603 = abs(dot(vec3(_502, _503, _504), vec3(_421, _422, _423)));
    float _3410 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_424);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _624 = (1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _625 = _618 * _605;
    float _653 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _661 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _963;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _688 = fma(_661, cbModelParam._m0[26u].z, fma(_657, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _653));
        float _692 = fma(_661, cbModelParam._m0[27u].z, fma(_657, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _653));
        float _696 = fma(_661, cbModelParam._m0[28u].z, fma(_657, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _653));
        float _721 = _653 + _421;
        float _722 = _657 + _422;
        float _723 = _661 + _423;
        float _733 = fma(_723, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _721)) - _688;
        float _734 = fma(_723, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _721)) - _692;
        float _735 = fma(_723, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _721)) - _696;
        float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
        float _752 = ((_739 * _733) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_688 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _753 = ((_739 * _734) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_692 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _754 = ((_739 * _735) / cbModelParam._m0[34u].z) + ((((((_696 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_752, _753, _754), 0.0);
        float _791 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_757.x + (-0.5));
        float _793 = _791 * (_757.y + (-0.5));
        float _794 = _791 * (_757.z + (-0.5));
        float _801 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_764.x + (-0.5));
        float _803 = _801 * (_764.y + (-0.5));
        float _804 = _801 * (_764.z + (-0.5));
        float _811 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_771.x + (-0.5));
        float _813 = _811 * (_771.y + (-0.5));
        float _814 = _811 * (_771.z + (-0.5));
        float _821 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_778.x + (-0.5));
        float _823 = _821 * (_778.y + (-0.5));
        float _824 = _821 * (_778.z + (-0.5));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = _792 * 0.5;
        float _829 = _802 * 0.5;
        float _830 = _812 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _845 = (dot(vec3(_421, _422, _423), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _855 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3458 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_857 + 1.0))) + _862) * _825;
        float _872 = _793 * 0.5;
        float _873 = _803 * 0.5;
        float _874 = _813 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_421, _422, _423), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3491 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_899 + 1.0))) + _904) * _826;
        float _914 = _794 * 0.5;
        float _915 = _804 * 0.5;
        float _916 = _814 * 0.5;
        float _917 = dot(vec3(_914, _915, _916), vec3(_914, _915, _916));
        float _922 = (_917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_917);
        float _930 = (dot(vec3(_421, _422, _423), vec3(_922 * _914, _922 * _915, _922 * _916)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _939 = sqrt(((_915 * _915) + (_914 * _914)) + (_916 * _916)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3524 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_941 + 1.0))) + _946) * _827;
        _963 = _794;
        _965 = _793;
        _966 = _792;
        _967 = _804;
        _968 = _803;
        _969 = _802;
        _970 = _814;
        _971 = _813;
        _972 = _812;
        _973 = _827;
        _974 = _826;
        _975 = _825;
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
    }
    else
    {
        _963 = _964;
        _965 = _964;
        _966 = _964;
        _967 = _964;
        _968 = _964;
        _969 = _964;
        _970 = _964;
        _971 = _964;
        _972 = _964;
        _973 = _964;
        _974 = _964;
        _975 = _964;
        _976 = 0.0;
        _977 = 0.0;
        _978 = 0.0;
    }
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1004 = fma(_661, cbModelParam._m0[30u].z, fma(_657, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _653));
        float _1008 = fma(_661, cbModelParam._m0[31u].z, fma(_657, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _653));
        float _1012 = fma(_661, cbModelParam._m0[32u].z, fma(_657, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _653));
        float _1035 = _653 + _421;
        float _1036 = _657 + _422;
        float _1037 = _661 + _423;
        float _1047 = fma(_1037, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035)) - _1004;
        float _1048 = fma(_1037, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035)) - _1008;
        float _1049 = fma(_1037, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035)) - _1012;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1004 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1008 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[35u].z) + ((((((_1012 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1103 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1070.x + (-0.5));
        float _1105 = _1103 * (_1070.y + (-0.5));
        float _1106 = _1103 * (_1070.z + (-0.5));
        float _1113 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1077.x + (-0.5));
        float _1115 = _1113 * (_1077.y + (-0.5));
        float _1116 = _1113 * (_1077.z + (-0.5));
        float _1123 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1084.x + (-0.5));
        float _1125 = _1123 * (_1084.y + (-0.5));
        float _1126 = _1123 * (_1084.z + (-0.5));
        float _1133 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1091.x + (-0.5));
        float _1135 = _1133 * (_1091.y + (-0.5));
        float _1136 = _1133 * (_1091.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1156 = (dot(vec3(_421, _422, _423), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1165 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1167 = _1166 * 2.0;
        float _1171 = (1.0 - _1166) / (_1166 + 1.0);
        float _3587 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1181 = ((((1.0 - _1172) * (_1167 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1167 + 1.0))) + _1172) * _1137;
        float _1182 = _1105 * 0.5;
        float _1183 = _1115 * 0.5;
        float _1184 = _1125 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1198 = (dot(vec3(_421, _422, _423), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1207 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3620 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1209 + 1.0))) + _1214) * _1138;
        float _1224 = _1106 * 0.5;
        float _1225 = _1116 * 0.5;
        float _1226 = _1126 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_421, _422, _423), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3653 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1251 + 1.0))) + _1256) * _1139;
        _1273 = _1106;
        _1274 = _1105;
        _1275 = _1104;
        _1276 = _1116;
        _1277 = _1115;
        _1278 = _1114;
        _1279 = _1126;
        _1280 = _1125;
        _1281 = _1124;
        _1282 = _1139;
        _1283 = _1138;
        _1284 = _1137;
        _1285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)));
        _1286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
    }
    else
    {
        _1273 = _964;
        _1274 = _964;
        _1275 = _964;
        _1276 = _964;
        _1277 = _964;
        _1278 = _964;
        _1279 = _964;
        _1280 = _964;
        _1281 = _964;
        _1282 = _964;
        _1283 = _964;
        _1284 = _964;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1297 = (cbModelParam._m0[1u].x * (_1285 - _976)) + _976;
    float _1298 = (cbModelParam._m0[1u].x * (_1286 - _977)) + _977;
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _978)) + _978;
    float _1320 = fma(_1299, cbSceneParam._m0[89u].z, fma(_1298, cbSceneParam._m0[89u].y, _1297 * cbSceneParam._m0[89u].x));
    float _1323 = fma(_1299, cbSceneParam._m0[90u].z, fma(_1298, cbSceneParam._m0[90u].y, _1297 * cbSceneParam._m0[90u].x));
    float _1326 = fma(_1299, cbSceneParam._m0[91u].z, fma(_1298, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1297));
    float _1341 = _597 * 0.5;
    float _1342 = _598 * 0.5;
    float _1343 = _599 * 0.5;
    float _1344 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1347 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1274, _1277, _1280, _1283));
    float _1350 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_1273, _1276, _1279, _1282));
    float _1384;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1357 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_963, _967, _970, _973));
        float _1361 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_965, _968, _971, _974));
        float _1365 = dot(vec4(_1341, _1342, _1343, 1.0), vec4(_966, _969, _972, _975));
        float _1372 = dot(vec4(cbModelParam._m0[39u]), vec4(_1341, _1342, _1343, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1372) ? 0.0 : (isnan(0.0) ? _1372 : max(0.0, _1372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1395;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1386 = dot(vec4(cbModelParam._m0[40u]), vec4(_1341, _1342, _1343, 1.0));
        _1395 = dot(vec3(isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1395 = 1.0;
    }
    float _1399 = (_1395 * cbModelParam._m0[1u].x) + (_1384 * (1.0 - cbModelParam._m0[1u].x));
    float _1409 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _424);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1409 : min(cbModelParam._m0[25u].z, _1409));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1459 = fma(_661, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653)) + cbModelParam._m0[13u].w;
        float _1463 = fma(_661, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653)) + cbModelParam._m0[14u].w;
        float _1467 = fma(_661, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653)) + cbModelParam._m0[15u].w;
        float _1470 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1473 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1476 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1504;
        if (_1470 > 0.0)
        {
            _1504 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1504 = frontier_phi_16_14_ladder;
        }
        float _1711;
        if (_1473 > 0.0)
        {
            _1711 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1711 = frontier_phi_25_21_ladder;
        }
        float _1965;
        if (_1476 > 0.0)
        {
            _1965 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1965 = frontier_phi_37_32_ladder;
        }
        float _1967 = isnan(_1711) ? _1504 : (isnan(_1504) ? _1711 : min(_1504, _1711));
        float _1968 = isnan(_1965) ? _1967 : (isnan(_1967) ? _1965 : min(_1967, _1965));
        float _1972 = (_1968 * _1470) + _1459;
        float _1973 = (_1968 * _1473) + _1463;
        float _1974 = (_1968 * _1476) + _1467;
        float _1975 = _1968 * 9.9999997473787516355514526367188e-05;
        float _1977 = (-1.0) - _1975;
        float _1979 = _1975 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1974 > _1979) || ((_1974 < _1977) || ((_1973 > _1979) || ((_1973 < _1977) || ((_1972 < _1977) || (_1972 > _1979))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2102 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1974, cbModelParam._m0[9u].z, fma(_1973, cbModelParam._m0[9u].y, _1972 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1974, cbModelParam._m0[10u].z, fma(_1973, cbModelParam._m0[10u].y, _1972 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1974, cbModelParam._m0[11u].z, fma(_1973, cbModelParam._m0[11u].y, _1972 * cbModelParam._m0[11u].x))), _1410);
            frontier_phi_15_37_ladder = _2102.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2102.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2102.x * cbModelParam._m0[1u].y;
        }
        _1492 = frontier_phi_15_37_ladder_2;
        _1494 = frontier_phi_15_37_ladder_1;
        _1496 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1410);
        _1492 = _1480.x * cbModelParam._m0[1u].y;
        _1494 = _1480.y * cbModelParam._m0[1u].y;
        _1496 = _1480.z * cbModelParam._m0[1u].y;
    }
    float _1500 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _424);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1500 : min(cbModelParam._m0[25u].w, _1500));
    float _1594;
    float _1596;
    float _1598;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1558 = fma(_661, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653)) + cbModelParam._m0[21u].w;
        float _1562 = fma(_661, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653)) + cbModelParam._m0[22u].w;
        float _1566 = fma(_661, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653)) + cbModelParam._m0[23u].w;
        float _1569 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1572 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1575 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1716;
        if (_1569 > 0.0)
        {
            _1716 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1716 = frontier_phi_27_23_ladder;
        }
        float _1992;
        if (_1572 > 0.0)
        {
            _1992 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1992 = frontier_phi_39_34_ladder;
        }
        float _2205;
        if (_1575 > 0.0)
        {
            _2205 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2205 = frontier_phi_48_45_ladder;
        }
        float _2207 = isnan(_1992) ? _1716 : (isnan(_1716) ? _1992 : min(_1716, _1992));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1569) + _1558;
        float _2213 = (_2208 * _1572) + _1562;
        float _2214 = (_2208 * _1575) + _1566;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2215;
        float _2218 = _2215 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2214 > _2218) || ((_2214 < _2216) || ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 < _2216) || (_2212 > _2218))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2214, cbModelParam._m0[17u].z, fma(_2213, cbModelParam._m0[17u].y, _2212 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2214, cbModelParam._m0[18u].z, fma(_2213, cbModelParam._m0[18u].y, _2212 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2214, cbModelParam._m0[19u].z, fma(_2213, cbModelParam._m0[19u].y, _2212 * cbModelParam._m0[19u].x))), _1501);
            frontier_phi_24_48_ladder = _2412.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2412.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2412.x * cbModelParam._m0[1u].z;
        }
        _1594 = frontier_phi_24_48_ladder_2;
        _1596 = frontier_phi_24_48_ladder_1;
        _1598 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1501);
        _1594 = _1578.x * cbModelParam._m0[1u].z;
        _1596 = _1578.y * cbModelParam._m0[1u].z;
        _1598 = _1578.z * cbModelParam._m0[1u].z;
    }
    float _1611 = (((_624 * _574) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1594 - _1492)) + _1492);
    float _1613 = (((_624 * _576) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1596 - _1494)) + _1494);
    float _1615 = (((_624 * _577) + _625) * _589) * ((cbModelParam._m0[1u].w * (_1598 - _1496)) + _1496);
    float _1618 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, _1611 * cbSceneParam._m0[91u].x));
    uvec4 _1634 = floatBitsToUint(cbInstanceData._m0[_549 + 5u]);
    uint _1636 = _1634.x * 14u;
    uint _1637 = _1636 + 13u;
    float _1644 = _589 + (-1.0);
    float _1649 = (cbLight._m0[_1637].x * _1644) + 1.0;
    float _1650 = (cbLight._m0[_1637].y * _1644) + 1.0;
    float _1651 = (cbLight._m0[_1637].z * _1644) + 1.0;
    float _1652 = (cbLight._m0[_1637].w * _1644) + 1.0;
    uint _1653 = _1636 + 5u;
    float _1659 = isnan(1.0) ? _1650 : (isnan(_1650) ? 1.0 : min(_1650, 1.0));
    uint _1663 = _1636 + 4u;
    float _1669 = isnan(1.0) ? _1649 : (isnan(_1649) ? 1.0 : min(_1649, 1.0));
    uint _1673 = _1636 | 1u;
    float _1684 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_421, _422, _423));
    float _1687 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_421, _422, _423));
    float _3789 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _3800 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1692 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1694 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.3183098733425140380859375;
    float _1701 = ((cbLight._m0[_1653].x * _1659) * _1694) + ((cbLight._m0[_1663].x * _1669) * _1692);
    float _1702 = ((_1659 * cbLight._m0[_1653].y) * _1694) + ((_1669 * cbLight._m0[_1663].y) * _1692);
    float _1703 = ((_1659 * cbLight._m0[_1653].z) * _1694) + ((_1669 * cbLight._m0[_1663].z) * _1692);
    uvec4 _1708 = floatBitsToUint(cbLight._m0[_1636 + 12u]);
    bool _1710 = _1708.x == 0u;
    float _1721;
    float _1723;
    float _1725;
    if (_1710)
    {
        _1721 = _1701;
        _1723 = _1702;
        _1725 = _1703;
    }
    else
    {
        uint _1729 = _1636 + 6u;
        float _1745 = (dot(vec3(cbLight._m0[_1636 + 2u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1746 = _1745 * _1745;
        float _3811 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1748 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1721 = (((cbLight._m0[_1729].x * 0.3183098733425140380859375) * _1747) * _1748) + _1701;
        _1723 = (((cbLight._m0[_1729].y * 0.3183098733425140380859375) * _1747) * _1748) + _1702;
        _1725 = (((cbLight._m0[_1729].z * 0.3183098733425140380859375) * _1747) * _1748) + _1703;
    }
    bool _1728 = _1708.y == 0u;
    float _1766;
    float _1768;
    float _1770;
    if (_1728)
    {
        _1766 = _1721;
        _1768 = _1723;
        _1770 = _1725;
    }
    else
    {
        uint _1936 = _1636 + 7u;
        float _1952 = (dot(vec3(cbLight._m0[_1636 + 3u].xyz), vec3(_421, _422, _423)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _3827 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1955 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _1766 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1721;
        _1768 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1723;
        _1770 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1725;
    }
    uint _1773 = _1636 + 8u;
    float _1786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1636].w)) * _424) * 0.949999988079071044921875);
    float _1787 = _1786 * _1786;
    float _1788 = cbLight._m0[_1636].x + _502;
    float _1789 = cbLight._m0[_1636].y + _503;
    float _1790 = cbLight._m0[_1636].z + _504;
    float _1794 = inversesqrt(dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790)));
    float _1795 = _1794 * _1788;
    float _1796 = _1794 * _1789;
    float _1797 = _1794 * _1790;
    float _1798 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1636].xyz));
    float _3843 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1802 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1803 = dot(vec3(_421, _422, _423), vec3(_1795, _1796, _1797));
    float _3865 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1807 = dot(vec3(cbLight._m0[_1636].xyz), vec3(_1795, _1796, _1797));
    float _3876 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1811 = _1787 * _1787;
    float _1815 = ((_1806 * _1806) * (_1811 + (-1.0))) + 1.0;
    float _1823 = exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0);
    float _1824 = 0.959999978542327880859375 - _571;
    float _1826 = 0.959999978542327880859375 - _572;
    float _1827 = 0.959999978542327880859375 - _573;
    float _1834 = 1.0 - _1787;
    float _1845 = (0.5 / (((_1802 * ((_1801 * _1834) + _1787)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1834) + _1787) * _1801))) * _1801;
    float _3887 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1811 / ((_1815 * _1815) * 3.141590118408203125));
    uint _1858 = _1636 + 9u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1673].w)) * _424) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1673].x + _502;
    float _1872 = cbLight._m0[_1673].y + _503;
    float _1873 = cbLight._m0[_1673].z + _504;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_1673].xyz));
    float _3898 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1885 = dot(vec3(_421, _422, _423), vec3(_1878, _1879, _1880));
    float _3909 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1878, _1879, _1880));
    float _3920 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1870 * _1870;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0);
    float _1911 = 1.0 - _1870;
    float _1921 = (0.5 / (((_1802 * ((_1884 * _1911) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _1911) + _1870) * _1884))) * _1884;
    float _3931 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1923 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    float _1933 = (((((_1904 * _1824) + _574) * cbLight._m0[_1858].x) * _1923) * _1659) + (((((_1823 * _1824) + _574) * cbLight._m0[_1773].x) * _1847) * _1669);
    float _1934 = (((((_1904 * _1826) + _576) * cbLight._m0[_1858].y) * _1923) * _1659) + (((((_1823 * _1826) + _576) * cbLight._m0[_1773].y) * _1847) * _1669);
    float _1935 = (((((_1904 * _1827) + _577) * cbLight._m0[_1858].z) * _1923) * _1659) + (((((_1823 * _1827) + _577) * cbLight._m0[_1773].z) * _1847) * _1669);
    float _1997;
    float _1999;
    float _2001;
    if (_1710)
    {
        _1997 = _1933;
        _1999 = _1934;
        _2001 = _1935;
    }
    else
    {
        uint _2003 = _1636 + 2u;
        uint _2007 = _1636 + 10u;
        float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _424) * 0.949999988079071044921875);
        float _2022 = _2021 * _2021;
        float _2023 = cbLight._m0[_2003].x + _502;
        float _2024 = cbLight._m0[_2003].y + _503;
        float _2025 = cbLight._m0[_2003].z + _504;
        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
        float _2030 = _2029 * _2023;
        float _2031 = _2029 * _2024;
        float _2032 = _2029 * _2025;
        float _2033 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2003].xyz));
        float _3942 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2037 = dot(vec3(_421, _422, _423), vec3(_2030, _2031, _2032));
        float _3953 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2041 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2030, _2031, _2032));
        float _3964 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2045 = _2022 * _2022;
        float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
        float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
        float _2063 = 1.0 - _2022;
        float _2073 = (0.5 / (((_1802 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2063) + _2022) * _2036))) * _2036;
        float _3975 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
        _1997 = (((((_2056 * _1824) + _574) * cbLight._m0[_2007].x) * _2075) * _2076) + _1933;
        _1999 = (((((_2056 * _1826) + _576) * cbLight._m0[_2007].y) * _2075) * _2076) + _1934;
        _2001 = (((((_2056 * _1827) + _577) * cbLight._m0[_2007].z) * _2075) * _2076) + _1935;
    }
    float _2111;
    float _2113;
    float _2115;
    if (_1728)
    {
        _2111 = _1997;
        _2113 = _1999;
        _2115 = _2001;
    }
    else
    {
        uint _2122 = _1636 + 3u;
        uint _2126 = _1636 + 11u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _424) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _502;
        float _2143 = cbLight._m0[_2122].y + _503;
        float _2144 = cbLight._m0[_2122].z + _504;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_421, _422, _423), vec3(cbLight._m0[_2122].xyz));
        float _3991 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2156 = dot(vec3(_421, _422, _423), vec3(_2149, _2150, _2151));
        float _4002 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4013 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2175 = exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0);
        float _2182 = 1.0 - _2141;
        float _2192 = (0.5 / (((_1802 * ((_2155 * _2182) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1802 * _2182) + _2141) * _2155))) * _2155;
        float _4024 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2194 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2195 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
        _2111 = (((((_2175 * _1824) + _574) * cbLight._m0[_2126].x) * _2194) * _2195) + _1997;
        _2113 = (((((_2175 * _1826) + _576) * cbLight._m0[_2126].y) * _2194) * _2195) + _1999;
        _2115 = (((((_2175 * _1827) + _577) * cbLight._m0[_2126].z) * _2194) * _2195) + _2001;
    }
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    float _2337;
    float _2339;
    if (_1634.y == 0u)
    {
        float _2270 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2271 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2270;
        float _2272 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2270;
        float _2273 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2270;
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.x;
        uint _2297 = uint((float(_2285.y) * floor(float(uint(cbSceneParam._m0[85u].y * _511) / _2286))) + floor(float(uint(cbSceneParam._m0[85u].x * _510) / _2286)));
        float _2307 = (log2(_2273 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2308 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        uint _2311 = uint(isnan(14.0) ? _2308 : (isnan(_2308) ? 14.0 : min(_2308, 14.0)));
        uvec4 _2316 = texelFetch(g_lightClusterGridBuffer, int(((_2311 << 2u) + (_2297 << 6u)) >> 2u));
        uint _2317 = _2316.x;
        uint _2318 = _2285.z;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        if (((((1u << ((_2318 >> 4u) & 15u)) + 4294967295u) & _2317) == 0u) || ((_2318 & 240u) == 0u))
        {
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
        }
        else
        {
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            uint _2567 = 0u;
            uint _2576;
            bool _2577;
            for (;;)
            {
                _2576 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                _2577 = _2576 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2577)
                {
                    frontier_phi_63_pred = _2566;
                    frontier_phi_63_pred_1 = _2565;
                    frontier_phi_63_pred_2 = _2564;
                    frontier_phi_63_pred_3 = _2563;
                    frontier_phi_63_pred_4 = _2562;
                    frontier_phi_63_pred_5 = _2561;
                }
                else
                {
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    uint _2691;
                    _2685 = _2561;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2565;
                    _2690 = _2566;
                    _2691 = _2576;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    for (;;)
                    {
                        uint _2695 = uint(findLSB(_2691)) + (_2567 << 5u);
                        uint _2692 = (_2691 + 4294967295u) & _2691;
                        uint _2697 = _2695 * 48u;
                        vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2717 = (_2695 * 48u) + 4u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2736 = (_2695 * 48u) + 8u;
                        vec3 _2747 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x));
                        float _2751 = _2711.x - _2271;
                        float _2752 = _2711.y - _2272;
                        float _2753 = _2711.z - _2273;
                        float _2754 = dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753));
                        float _2757 = inversesqrt(_2754);
                        float _2758 = _2757 * _2751;
                        float _2759 = _2757 * _2752;
                        float _2760 = _2757 * _2753;
                        float _2761 = dot(vec3(_530, _533, _536), vec3(_2758, _2759, _2760));
                        float _2766 = 1.0 - (_2754 * _2711.w);
                        float _4050 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2767 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2768 = sqrt(_2754) * _2730.w;
                        float _2771 = 1.39999997615814208984375 / (_2768 + 1.39999997615814208984375);
                        float _2772 = _2771 * _2771;
                        float _2775 = ((1.0 - _2772) * _2761) + _2772;
                        float _2778 = _2768 * _2768;
                        float _2782 = ((isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))) * _2767) / ((_2778 * 0.699999988079071044921875) + 1.0);
                        float _2786 = (-0.0) - _2271;
                        float _2787 = (-0.0) - _2272;
                        float _2788 = (-0.0) - _2273;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2803 = exp2(log2(1.0 / ((_2778 * 3.5) + 5.0)) * 0.25);
                        float _2804 = 1.0 - _605;
                        float _2811 = sqrt(1.0 - ((1.0 - (_2804 * _2804)) * (1.0 - (_2803 * _2803))));
                        float _2812 = _2811 * _2811;
                        float _2813 = _2812 * _2812;
                        float _2814 = _2793 + _2758;
                        float _2815 = _2794 + _2759;
                        float _2816 = _2795 + _2760;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2824 = dot(vec3(_530, _533, _536), vec3(_2793, _2794, _2795));
                        float _4066 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2828 = dot(vec3(_530, _533, _536), vec3(_2820 * _2814, _2820 * _2815, _2820 * _2816));
                        float _4077 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2835 = ((_2831 * _2831) * (_2813 + (-1.0))) + 1.0;
                        float _2836 = _2771 * _2812;
                        float _2837 = _2836 * _2836;
                        float _2840 = ((1.0 - _2837) * _2761) + _2837;
                        float _4088 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2842 = 1.0 - _2812;
                        float _2852 = (0.5 / (((_2841 * ((_2827 * _2842) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _2842) + _2812) * _2827))) * _2841;
                        float _4099 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2863 = (((_2813 * 3.1415927410125732421875) * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) / ((_2835 * _2835) * ((_2778 * 2.1991131305694580078125) + 3.141590118408203125))) * _2767;
                        _2620 = (_2782 * _2730.x) + _2688;
                        _2621 = (_2782 * _2730.y) + _2689;
                        _2622 = (_2782 * _2730.z) + _2690;
                        _2617 = (_2863 * _2747.x) + _2685;
                        _2618 = (_2863 * _2747.y) + _2686;
                        _2619 = (_2863 * _2747.z) + _2687;
                        if (_2692 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2621;
                            _2690 = _2622;
                            _2691 = _2692;
                        }
                    }
                    frontier_phi_63_pred = _2622;
                    frontier_phi_63_pred_1 = _2621;
                    frontier_phi_63_pred_2 = _2620;
                    frontier_phi_63_pred_3 = _2619;
                    frontier_phi_63_pred_4 = _2618;
                    frontier_phi_63_pred_5 = _2617;
                }
                _2428 = frontier_phi_63_pred;
                _2426 = frontier_phi_63_pred_1;
                _2424 = frontier_phi_63_pred_2;
                _2422 = frontier_phi_63_pred_3;
                _2420 = frontier_phi_63_pred_4;
                _2418 = frontier_phi_63_pred_5;
                uint _2568 = _2567 + 1u;
                if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2561 = _2418;
                    _2562 = _2420;
                    _2563 = _2422;
                    _2564 = _2424;
                    _2565 = _2426;
                    _2566 = _2428;
                    _2567 = _2568;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
        }
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.z;
        uint _2434 = (_2432 >> 8u) & 15u;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((4294967295u << _2434) & _2317) == 0u)
        {
            _2529 = _2417;
            _2531 = _2419;
            _2533 = _2421;
            _2535 = _2423;
            _2537 = _2425;
            _2539 = _2427;
        }
        else
        {
            float _2554 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
            float _2555 = _2554 * _2271;
            float _2556 = _2554 * _2272;
            float _2557 = _2554 * _2273;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2434 < ((_2432 >> 12u) & 15u))
            {
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2668 = _2417;
                float _2669 = _2419;
                float _2670 = _2421;
                float _2671 = _2423;
                float _2672 = _2425;
                float _2673 = _2427;
                uint _2674 = _2434;
                uint _2683;
                bool _2684;
                for (;;)
                {
                    _2683 = texelFetch(g_lightClassification, int((((_2311 << 5u) + (_2297 << 9u)) + (_2674 << 2u)) >> 2u)).x;
                    _2684 = _2683 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2684)
                    {
                        frontier_phi_69_pred = _2673;
                        frontier_phi_69_pred_1 = _2672;
                        frontier_phi_69_pred_2 = _2671;
                        frontier_phi_69_pred_3 = _2670;
                        frontier_phi_69_pred_4 = _2669;
                        frontier_phi_69_pred_5 = _2668;
                    }
                    else
                    {
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _2881 = _2668;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        float _2885 = _2672;
                        float _2886 = _2673;
                        uint _2887 = _2683;
                        uint _2888;
                        vec4 _2913;
                        float _2914;
                        vec4 _2929;
                        vec3 _2941;
                        vec4 _2957;
                        vec4 _2973;
                        float _3020;
                        bool _3021;
                        for (;;)
                        {
                            uint _2898 = ((_2674 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2887));
                            _2888 = (_2887 + 4294967295u) & _2887;
                            uint _2900 = _2898 * 40u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            _2914 = _2913.w;
                            uint _2916 = (_2898 * 40u) + 4u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2931 = (_2898 * 40u) + 8u;
                            _2941 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x));
                            uint _2944 = (_2898 * 40u) + 16u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2960 = (_2898 * 40u) + 20u;
                            _2973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 3u)).x));
                            uint _2976 = (_2898 * 40u) + 24u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2995 = (_2898 * 40u) + 28u;
                            vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3020 = fma(_2273, _3008.z, fma(_2272, _3008.y, _3008.x * _2271)) + _3008.w;
                            _3021 = !((fma(_2273, _2989.z, fma(_2272, _2989.y, _2989.x * _2271)) + _2989.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3021)
                            {
                                float _3048 = _2913.x - _2271;
                                float _3049 = _2913.y - _2272;
                                float _3050 = _2913.z - _2273;
                                float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                                float _3054 = inversesqrt(_3051);
                                float _3055 = _3054 * _3048;
                                float _3056 = _3054 * _3049;
                                float _3057 = _3054 * _3050;
                                float _3061 = 1.0 - (_3051 / (_2914 * _2914));
                                float _4110 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3066 = sqrt(_3051) * _2929.w;
                                float _3068 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                                float _3069 = _3068 * _3068;
                                float _3072 = ((1.0 - _3069) * dot(vec3(_3055, _3056, _3057), vec3(_530, _533, _536))) + _3069;
                                float _3075 = _3066 * _3066;
                                float _3079 = (fma(_2273, _2957.z, fma(_2272, _2957.y, _2957.x * _2271)) + _2957.w) / _3020;
                                float _3080 = (fma(_2273, _2973.z, fma(_2272, _2973.y, _2973.x * _2271)) + _2973.w) / _3020;
                                float _3084 = 1.0 - dot(vec2(_3079, _3080), vec2(_3079, _3080));
                                float _4126 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3085 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3086 = _3085 * (((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3062) / ((_3075 * 0.699999988079071044921875) + 1.0));
                                float _3098 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                                float _3099 = 1.0 - _605;
                                float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                                float _3107 = _3106 * _3106;
                                float _3108 = _3107 * _3107;
                                float _3109 = _3055 - _2555;
                                float _3110 = _3056 - _2556;
                                float _3111 = _3057 - _2557;
                                float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                                float _3119 = dot(vec3(_530, _533, _536), vec3((-0.0) - _2555, (-0.0) - _2556, (-0.0) - _2557));
                                float _4137 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3123 = dot(vec3(_530, _533, _536), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                                float _4148 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3126 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                                float _3131 = _3068 * _3107;
                                float _3132 = _3131 * _3131;
                                float _3138 = ((1.0 - _3132) * dot(vec3(_530, _533, _536), vec3(_3055, _3056, _3057))) + _3132;
                                float _4159 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3140 = 1.0 - _3107;
                                float _3150 = (0.5 / (((_3139 * ((_3122 * _3140) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3139 * _3140) + _3107) * _3122))) * _3139;
                                float _4170 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3160 = (_3085 * _3062) * (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) / ((_3130 * _3130) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3086 * _2929.z;
                                frontier_phi_75_pred_1 = _3086 * _2929.y;
                                frontier_phi_75_pred_2 = _3086 * _2929.x;
                                frontier_phi_75_pred_3 = _3160 * _2941.z;
                                frontier_phi_75_pred_4 = _3160 * _2941.y;
                                frontier_phi_75_pred_5 = _3160 * _2941.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3169 = frontier_phi_75_pred;
                            _3168 = frontier_phi_75_pred_1;
                            _3167 = frontier_phi_75_pred_2;
                            _3166 = frontier_phi_75_pred_3;
                            _3165 = frontier_phi_75_pred_4;
                            _3164 = frontier_phi_75_pred_5;
                            _2871 = _3167 + _2884;
                            _2872 = _3168 + _2885;
                            _2873 = _3169 + _2886;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            if (_2888 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2872;
                                _2886 = _2873;
                                _2887 = _2888;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2873;
                        frontier_phi_69_pred_1 = _2872;
                        frontier_phi_69_pred_2 = _2871;
                        frontier_phi_69_pred_3 = _2870;
                        frontier_phi_69_pred_4 = _2869;
                        frontier_phi_69_pred_5 = _2868;
                    }
                    _2540 = frontier_phi_69_pred;
                    _2538 = frontier_phi_69_pred_1;
                    _2536 = frontier_phi_69_pred_2;
                    _2534 = frontier_phi_69_pred_3;
                    _2532 = frontier_phi_69_pred_4;
                    _2530 = frontier_phi_69_pred_5;
                    uint _2675 = _2674 + 1u;
                    if (_2675 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2668 = _2530;
                        _2669 = _2532;
                        _2670 = _2534;
                        _2671 = _2536;
                        _2672 = _2538;
                        _2673 = _2540;
                        _2674 = _2675;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2540;
                frontier_phi_57_58_ladder_1 = _2538;
                frontier_phi_57_58_ladder_2 = _2536;
                frontier_phi_57_58_ladder_3 = _2534;
                frontier_phi_57_58_ladder_4 = _2532;
                frontier_phi_57_58_ladder_5 = _2530;
            }
            else
            {
                frontier_phi_57_58_ladder = _2427;
                frontier_phi_57_58_ladder_1 = _2425;
                frontier_phi_57_58_ladder_2 = _2423;
                frontier_phi_57_58_ladder_3 = _2421;
                frontier_phi_57_58_ladder_4 = _2419;
                frontier_phi_57_58_ladder_5 = _2417;
            }
            _2529 = frontier_phi_57_58_ladder_5;
            _2531 = frontier_phi_57_58_ladder_4;
            _2533 = frontier_phi_57_58_ladder_3;
            _2535 = frontier_phi_57_58_ladder_2;
            _2537 = frontier_phi_57_58_ladder_1;
            _2539 = frontier_phi_57_58_ladder;
        }
        float _2544 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2329 = (_2544 * _2535) + _1766;
        _2331 = (_2544 * _2537) + _1768;
        _2333 = (_2544 * _2539) + _1770;
        _2335 = ((_2529 * _574) * _2544) + _2111;
        _2337 = ((_2531 * _576) * _2544) + _2113;
        _2339 = ((_2533 * _577) * _2544) + _2115;
    }
    else
    {
        _2329 = _1766;
        _2331 = _1768;
        _2333 = _1770;
        _2335 = _2111;
        _2337 = _2113;
        _2339 = _2115;
    }
    float _4186 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4197 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4208 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    uint _2359 = _549 + 6u;
    float _2367 = _510 / cbSceneParam._m0[86u].x;
    float _2368 = _511 / cbSceneParam._m0[86u].y;
    vec4 _2382 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, (log2((isnan(cbSceneParam._m0[77u].w) ? _444 : (isnan(_444) ? cbSceneParam._m0[77u].w : min(_444, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2384 = _2382.x;
    float _2385 = _2382.y;
    float _2386 = _2382.z;
    float _2387 = _2382.w;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_444 > cbSceneParam._m0[78u].w)
    {
        float _2442 = isnan(_444) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _444 : min(cbSceneParam._m0[80u].w, _444));
        float _2443 = _2442 / _444;
        float _2454 = _2443 * _495;
        float _2455 = _496 * _2443;
        float _2456 = (-0.0) - _2455;
        float _2457 = _2443 * _497;
        float _2459 = (cbSceneParam._m0[77u].w * _2456) / _2442;
        float _2460 = _2459 + cbSceneParam._m0[79u].w;
        float _2461 = cbSceneParam._m0[79u].w - _2455;
        float _2467 = sqrt(((_2454 * _2454) + (_2455 * _2455)) + (_2457 * _2457));
        float _2470 = (1.0 - (cbSceneParam._m0[77u].w / _2442)) * _2467;
        float _2475 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2477 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2630;
        if (abs((_2456 - _2459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2630 = ((((_2460 > 0.0) ? exp2(_2475 * _2460) : (2.0 - exp2(_2477 * _2460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2470;
        }
        else
        {
            float _2590 = 1.0 / cbSceneParam._m0[80u].x;
            float _2591 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : max(_2460, _2461));
            float _2592 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : min(_2460, _2461));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            _2630 = ((abs(_2467 / _2456) * cbSceneParam._m0[80u].y) * ((((_2601 - _2602) * 2.0) - ((exp2(_2475 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0)))) - exp2(_2475 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))))) * _2590)) - ((exp2(_2477 * _2601) - exp2(_2477 * _2602)) * _2590))) + (_2470 * cbSceneParam._m0[80u].z);
        }
        vec4 _2632 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, 1.0), 0.0);
        float _2641 = exp2((_2630 * (-1.44269502162933349609375)) * (1.0 - _2632.w));
        float _2642 = log2(_2641);
        float _2658 = log2(_2387);
        _2479 = (exp2(_2658 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].x)) * _2632.x) / cbSceneParam._m0[78u].x)) + _2384;
        _2481 = (exp2(_2658 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].y)) * _2632.y) / cbSceneParam._m0[78u].y)) + _2385;
        _2483 = (exp2(_2658 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2642 * cbSceneParam._m0[78u].z)) * _2632.z) / cbSceneParam._m0[78u].z)) + _2386;
        _2485 = _2641 * _2387;
    }
    else
    {
        _2479 = _2384;
        _2481 = _2385;
        _2483 = _2386;
        _2485 = _2387;
    }
    float _2497 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2498 = _2497 == 3.0;
    float _2499 = log2(_2485);
    float _2506 = exp2(_2499 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2329 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _589))) + ((_2335 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2507 = exp2(_2499 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2331 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _589))) + ((_2337 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2508 = exp2(_2499 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2333 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _589))) + ((_2339 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1399)) * cbPerFrame._m0[3u].x));
    float _2517 = (_2497 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2517 * (_2498 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2479)));
    SV_Target.y = _2517 * (_2498 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2481)));
    SV_Target.z = _2517 * (_2498 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2483)));
    SV_Target.w = cbInstanceData._m0[_2359].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2359].w;
}


