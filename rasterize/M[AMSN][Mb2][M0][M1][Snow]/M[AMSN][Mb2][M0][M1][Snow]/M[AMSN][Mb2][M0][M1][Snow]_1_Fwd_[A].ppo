#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1106;
float _3495;
float _3496;
float _3497;
float _3498;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _250.x;
    float _254 = _250.y;
    float _255 = _250.z;
    vec4 _287 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    float _300 = (TEXCOORD_9.x - ((cbMtdParam._m0[11u].x * (1.0 - TEXCOORD_9.x)) * (texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625))) * ((cbMtdParam._m0[11u].y * TEXCOORD.w) + 1.0);
    float _3507 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _310 = ((_287.z - _255) * _301) + _255;
    float _314 = ((((_287.x - _253) * _301) + _253) * 2.0) + (-1.0);
    float _316 = ((((_287.y - _254) * _301) + _254) * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3518 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))));
    float _325 = fma(_322, _234, fma(_316, _227, _314 * _213));
    float _328 = fma(_322, _235, fma(_316, _228, _314 * _214));
    float _331 = fma(_322, _236, fma(_316, _229, _314 * _215));
    float _335 = inversesqrt(dot(vec3(_325, _328, _331), vec3(_325, _328, _331)));
    vec4 _363 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _367 = (cbMtdParam._m0[11u].z + dot(vec4(_335 * _325, _335 * _328, _335 * _331, 0.0), vec4(cbMtdParam._m0[12u].xyz, 0.0))) - (_363.x * cbMtdParam._m0[11u].w);
    float _3529 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    vec4 _385 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _390 = _385.x * cbMtdParam._m0[9u].x;
    float _391 = _385.y * cbMtdParam._m0[9u].y;
    float _392 = _385.z * cbMtdParam._m0[9u].z;
    vec4 _411 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[4u].w));
    float _425 = (((_411.x * cbMtdParam._m0[10u].x) - _390) * _301) + _390;
    float _426 = (((_411.y * cbMtdParam._m0[10u].y) - _391) * _301) + _391;
    float _427 = (((_411.z * cbMtdParam._m0[10u].z) - _392) * _301) + _392;
    vec4 _440 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _451 = ((_440.x - _425) * _368) + _425;
    float _452 = ((_440.y - _426) * _368) + _426;
    float _453 = ((_440.z - _427) * _368) + _427;
    float _469 = _301 * texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[6u].w)).x;
    float _471 = _469 - (_469 * _368);
    vec4 _484 = texture(sampler2D(M_AMSN_Mb2_M0_M1_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3540 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = ((_484.z - _310) * _368) + _310;
    float _508 = ((_491 - _314) * _368) + _314;
    float _509 = ((_492 - _316) * _368) + _316;
    float _510 = ((sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) - _322) * _368) + _322;
    float _513 = fma(_510, _234, fma(_509, _227, _508 * _213));
    float _516 = fma(_510, _235, fma(_509, _228, _508 * _214));
    float _519 = fma(_510, _236, fma(_509, _229, _508 * _215));
    float _523 = inversesqrt(dot(vec3(_513, _516, _519), vec3(_513, _516, _519)));
    float _524 = _523 * _513;
    float _525 = _523 * _516;
    float _526 = _523 * _519;
    float _3551 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _527 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3573 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3584 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3595 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _531 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _597 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _587);
    float _598 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _587);
    float _599 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _587);
    float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
    float _604 = _597 * _603;
    float _605 = _598 * _603;
    float _606 = _599 * _603;
    vec4 _611 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _613 = _611.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _786 = sqrt(((_597 * _597) + (_598 * _598)) + (_599 * _599));
        float _792 = (cbMatDynParam._m0[5u].x * _786) + cbMatDynParam._m0[5u].y;
        float _3606 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _797 = (cbMatDynParam._m0[5u].z * _786) + cbMatDynParam._m0[5u].w;
        float _3617 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) - _793)) + _793) < ((_613 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _624 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _625 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = fma(_526, cbSceneParam._m0[5u].z, fma(_525, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _524));
    float _647 = fma(_526, cbSceneParam._m0[6u].z, fma(_525, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _524));
    float _650 = fma(_526, cbSceneParam._m0[7u].z, fma(_525, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _524));
    uint _663 = uint(roundEven(NORMAL.w)) * 13u;
    uint _664 = _663 + 9u;
    uint _665 = _664 + uint(cbMatDynParam._m0[0u].w);
    float _671 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_665].x;
    float _672 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_665].y;
    float _673 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_665].z;
    float _3628 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _677 = 1.0 - _531;
    float _678 = _674 * _677;
    float _679 = _675 * _677;
    float _680 = _676 * _677;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _531;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _531;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _531;
    float _688 = _685 + 0.039999999105930328369140625;
    float _690 = _686 + 0.039999999105930328369140625;
    float _691 = _687 + 0.039999999105930328369140625;
    vec4 _700 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _624, cbSceneParam._m0[86u].y * _625));
    float _703 = _700.x * TEXCOORD_9.w;
    float _704 = dot(vec3(_524, _525, _526), vec3(_604, _605, _606));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _524) - _604;
    float _712 = (_707 * _525) - _605;
    float _713 = (_707 * _526) - _606;
    float _717 = abs(dot(vec3(_604, _605, _606), vec3(_524, _525, _526)));
    float _3661 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_527);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _738 = (1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _739 = _732 * _719;
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_775, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767));
        float _834 = fma(_775, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767));
        float _838 = fma(_775, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767));
        float _863 = _767 + _524;
        float _864 = _771 + _525;
        float _865 = _775 + _526;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _830;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _834;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _838;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_524, _525, _526), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3709 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_524, _525, _526), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3742 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_524, _525, _526), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3775 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_775, cbModelParam._m0[30u].z, fma(_771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _767));
        float _1153 = fma(_775, cbModelParam._m0[31u].z, fma(_771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _767));
        float _1157 = fma(_775, cbModelParam._m0[32u].z, fma(_771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _767));
        float _1180 = _767 + _524;
        float _1181 = _771 + _525;
        float _1182 = _775 + _526;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_524, _525, _526), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3838 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_524, _525, _526), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3871 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_524, _525, _526), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3904 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = _1106;
        _1428 = _1106;
        _1429 = _1106;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1119)) + _1119;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _711 * 0.5;
    float _1487 = _712 * 0.5;
    float _1488 = _713 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _527);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1604 = fma(_775, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767)) + cbModelParam._m0[13u].w;
        float _1608 = fma(_775, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767)) + cbModelParam._m0[14u].w;
        float _1612 = fma(_775, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767)) + cbModelParam._m0[15u].w;
        float _1615 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1618 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1621 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1649;
        if (_1615 > 0.0)
        {
            _1649 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1649 = frontier_phi_19_17_ladder;
        }
        float _1855;
        if (_1618 > 0.0)
        {
            _1855 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1855 = frontier_phi_28_24_ladder;
        }
        float _2109;
        if (_1621 > 0.0)
        {
            _2109 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2109 = frontier_phi_40_35_ladder;
        }
        float _2111 = isnan(_1855) ? _1649 : (isnan(_1649) ? _1855 : min(_1649, _1855));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1615) + _1604;
        float _2117 = (_2112 * _1618) + _1608;
        float _2118 = (_2112 * _1621) + _1612;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_18_40_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1637 = frontier_phi_18_40_ladder_2;
        _1639 = frontier_phi_18_40_ladder_1;
        _1641 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1555);
        _1637 = _1625.x * cbModelParam._m0[1u].y;
        _1639 = _1625.y * cbModelParam._m0[1u].y;
        _1641 = _1625.z * cbModelParam._m0[1u].y;
    }
    float _1645 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _527);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1645 : min(cbModelParam._m0[25u].w, _1645));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_775, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_775, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_775, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1717 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1720 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1860;
        if (_1714 > 0.0)
        {
            _1860 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1860 = frontier_phi_30_26_ladder;
        }
        float _2136;
        if (_1717 > 0.0)
        {
            _2136 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2136 = frontier_phi_42_37_ladder;
        }
        float _2349;
        if (_1720 > 0.0)
        {
            _2349 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2349 = frontier_phi_51_48_ladder;
        }
        float _2351 = isnan(_2136) ? _1860 : (isnan(_1860) ? _2136 : min(_1860, _2136));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1714) + _1703;
        float _2357 = (_2352 * _1717) + _1707;
        float _2358 = (_2352 * _1720) + _1711;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1646);
            frontier_phi_27_51_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_27_51_ladder_2;
        _1741 = frontier_phi_27_51_ladder_1;
        _1743 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1646);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1756 = (((_738 * _688) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1739 - _1637)) + _1637);
    float _1758 = (((_738 * _690) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1741 - _1639)) + _1639);
    float _1760 = (((_738 * _691) + _739) * _703) * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_663 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _703 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1814 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1818 = _1781 | 1u;
    float _1829 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_524, _525, _526));
    float _1832 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_524, _525, _526));
    float _4040 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _4051 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1837 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1839 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1846 = ((cbLight._m0[_1798].x * _1804) * _1839) + ((cbLight._m0[_1808].x * _1814) * _1837);
    float _1847 = ((_1804 * cbLight._m0[_1798].y) * _1839) + ((_1814 * cbLight._m0[_1808].y) * _1837);
    float _1848 = ((_1804 * cbLight._m0[_1798].z) * _1839) + ((_1814 * cbLight._m0[_1808].z) * _1837);
    uvec4 _1852 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1854 = _1852.x == 0u;
    float _1865;
    float _1867;
    float _1869;
    if (_1854)
    {
        _1865 = _1846;
        _1867 = _1847;
        _1869 = _1848;
    }
    else
    {
        uint _1873 = _1781 + 6u;
        float _1889 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _1890 = _1889 * _1889;
        float _4062 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1892 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1865 = (((cbLight._m0[_1873].x * 0.3183098733425140380859375) * _1891) * _1892) + _1846;
        _1867 = (((cbLight._m0[_1873].y * 0.3183098733425140380859375) * _1891) * _1892) + _1847;
        _1869 = (((cbLight._m0[_1873].z * 0.3183098733425140380859375) * _1891) * _1892) + _1848;
    }
    bool _1872 = _1852.y == 0u;
    float _1910;
    float _1912;
    float _1914;
    if (_1872)
    {
        _1910 = _1865;
        _1912 = _1867;
        _1914 = _1869;
    }
    else
    {
        uint _2080 = _1781 + 7u;
        float _2096 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_524, _525, _526)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4078 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2099 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1910 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1865;
        _1912 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1867;
        _1914 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1869;
    }
    uint _1917 = _1781 + 8u;
    float _1930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _527) * 0.949999988079071044921875);
    float _1931 = _1930 * _1930;
    float _1932 = cbLight._m0[_1781].x + _604;
    float _1933 = cbLight._m0[_1781].y + _605;
    float _1934 = cbLight._m0[_1781].z + _606;
    float _1938 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
    float _1939 = _1938 * _1932;
    float _1940 = _1938 * _1933;
    float _1941 = _1938 * _1934;
    float _1942 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1781].xyz));
    float _4094 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _1946 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1947 = dot(vec3(_524, _525, _526), vec3(_1939, _1940, _1941));
    float _4116 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1951 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1939, _1940, _1941));
    float _4127 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1955 = _1931 * _1931;
    float _1959 = ((_1950 * _1950) * (_1955 + (-1.0))) + 1.0;
    float _1967 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
    float _1968 = 0.959999978542327880859375 - _685;
    float _1970 = 0.959999978542327880859375 - _686;
    float _1971 = 0.959999978542327880859375 - _687;
    float _1978 = 1.0 - _1931;
    float _1989 = (0.5 / (((_1946 * ((_1945 * _1978) + _1931)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _1978) + _1931) * _1945))) * _1945;
    float _4138 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1955 / ((_1959 * _1959) * 3.141590118408203125));
    uint _2002 = _1781 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _527) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1818].x + _604;
    float _2016 = cbLight._m0[_1818].y + _605;
    float _2017 = cbLight._m0[_1818].z + _606;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_1818].xyz));
    float _4149 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2029 = dot(vec3(_524, _525, _526), vec3(_2022, _2023, _2024));
    float _4160 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2022, _2023, _2024));
    float _4171 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2048 = exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0);
    float _2055 = 1.0 - _2014;
    float _2065 = (0.5 / (((_1946 * ((_2028 * _2055) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2055) + _2014) * _2028))) * _2028;
    float _4182 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2077 = (((((_2048 * _1968) + _688) * cbLight._m0[_2002].x) * _2067) * _1804) + (((((_1967 * _1968) + _688) * cbLight._m0[_1917].x) * _1991) * _1814);
    float _2078 = (((((_2048 * _1970) + _690) * cbLight._m0[_2002].y) * _2067) * _1804) + (((((_1967 * _1970) + _690) * cbLight._m0[_1917].y) * _1991) * _1814);
    float _2079 = (((((_2048 * _1971) + _691) * cbLight._m0[_2002].z) * _2067) * _1804) + (((((_1967 * _1971) + _691) * cbLight._m0[_1917].z) * _1991) * _1814);
    float _2141;
    float _2143;
    float _2145;
    if (_1854)
    {
        _2141 = _2077;
        _2143 = _2078;
        _2145 = _2079;
    }
    else
    {
        uint _2147 = _1781 + 2u;
        uint _2151 = _1781 + 10u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _527) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _604;
        float _2168 = cbLight._m0[_2147].y + _605;
        float _2169 = cbLight._m0[_2147].z + _606;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2147].xyz));
        float _4193 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2181 = dot(vec3(_524, _525, _526), vec3(_2174, _2175, _2176));
        float _4204 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4215 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2200 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2207 = 1.0 - _2166;
        float _2217 = (0.5 / (((_1946 * ((_2180 * _2207) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2207) + _2166) * _2180))) * _2180;
        float _4226 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2141 = (((((_2200 * _1968) + _688) * cbLight._m0[_2151].x) * _2219) * _2220) + _2077;
        _2143 = (((((_2200 * _1970) + _690) * cbLight._m0[_2151].y) * _2219) * _2220) + _2078;
        _2145 = (((((_2200 * _1971) + _691) * cbLight._m0[_2151].z) * _2219) * _2220) + _2079;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1872)
    {
        _2255 = _2141;
        _2257 = _2143;
        _2259 = _2145;
    }
    else
    {
        uint _2266 = _1781 + 3u;
        uint _2270 = _1781 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _527) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _604;
        float _2287 = cbLight._m0[_2266].y + _605;
        float _2288 = cbLight._m0[_2266].z + _606;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_524, _525, _526), vec3(cbLight._m0[_2266].xyz));
        float _4242 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2300 = dot(vec3(_524, _525, _526), vec3(_2293, _2294, _2295));
        float _4253 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4264 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0);
        float _2326 = 1.0 - _2285;
        float _2336 = (0.5 / (((_1946 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1946 * _2326) + _2285) * _2299))) * _2299;
        float _4275 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2255 = (((((_2319 * _1968) + _688) * cbLight._m0[_2270].x) * _2338) * _2339) + _2141;
        _2257 = (((((_2319 * _1970) + _690) * cbLight._m0[_2270].y) * _2338) * _2339) + _2143;
        _2259 = (((((_2319 * _1971) + _691) * cbLight._m0[_2270].z) * _2338) * _2339) + _2145;
    }
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    if (_1779.y == 0u)
    {
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2414;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2414;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2414;
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.x;
        uint _2441 = uint((float(_2429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _625) / _2430))) + floor(float(uint(cbSceneParam._m0[85u].x * _624) / _2430)));
        float _2451 = (log2(_2417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2452 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        uint _2455 = uint(isnan(14.0) ? _2452 : (isnan(_2452) ? 14.0 : min(_2452, 14.0)));
        uvec4 _2460 = texelFetch(g_lightClusterGridBuffer, int(((_2455 << 2u) + (_2441 << 6u)) >> 2u));
        uint _2461 = _2460.x;
        uint _2462 = _2429.z;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        if (((((1u << ((_2462 >> 4u) & 15u)) + 4294967295u) & _2461) == 0u) || ((_2462 & 240u) == 0u))
        {
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
        }
        else
        {
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2729)
                {
                    frontier_phi_68_pred = _2715;
                    frontier_phi_68_pred_1 = _2718;
                    frontier_phi_68_pred_2 = _2717;
                    frontier_phi_68_pred_3 = _2716;
                    frontier_phi_68_pred_4 = _2714;
                    frontier_phi_68_pred_5 = _2713;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2728;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2719 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2415;
                        float _2925 = _2884.y - _2416;
                        float _2926 = _2884.z - _2417;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_644, _647, _650), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4301 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2415;
                        float _2960 = (-0.0) - _2416;
                        float _2961 = (-0.0) - _2417;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _719;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_644, _647, _650), vec3(_2966, _2967, _2968));
                        float _4317 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3001 = dot(vec3(_644, _647, _650), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4328 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4339 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4350 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2788 = (_2955 * _2903.x) + _2861;
                        _2789 = (_2955 * _2903.y) + _2862;
                        _2790 = (_2955 * _2903.z) + _2863;
                        _2785 = (_3036 * _2920.x) + _2858;
                        _2786 = (_3036 * _2920.y) + _2859;
                        _2787 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_68_pred = _2787;
                    frontier_phi_68_pred_1 = _2790;
                    frontier_phi_68_pred_2 = _2789;
                    frontier_phi_68_pred_3 = _2788;
                    frontier_phi_68_pred_4 = _2786;
                    frontier_phi_68_pred_5 = _2785;
                }
                _2566 = frontier_phi_68_pred;
                _2572 = frontier_phi_68_pred_1;
                _2570 = frontier_phi_68_pred_2;
                _2568 = frontier_phi_68_pred_3;
                _2564 = frontier_phi_68_pred_4;
                _2562 = frontier_phi_68_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2562;
                    _2714 = _2564;
                    _2715 = _2566;
                    _2716 = _2568;
                    _2717 = _2570;
                    _2718 = _2572;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
        }
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.z;
        uint _2578 = (_2576 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2578) & _2461) == 0u)
        {
            _2681 = _2561;
            _2683 = _2563;
            _2685 = _2565;
            _2687 = _2567;
            _2689 = _2569;
            _2691 = _2571;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
            float _2707 = _2706 * _2415;
            float _2708 = _2706 * _2416;
            float _2709 = _2706 * _2417;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2578 < ((_2576 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2841 = _2561;
                float _2842 = _2563;
                float _2843 = _2565;
                float _2844 = _2567;
                float _2845 = _2569;
                float _2846 = _2571;
                uint _2847 = _2578;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2857)
                    {
                        frontier_phi_79_pred = _2846;
                        frontier_phi_79_pred_1 = _2845;
                        frontier_phi_79_pred_2 = _2844;
                        frontier_phi_79_pred_3 = _2843;
                        frontier_phi_79_pred_4 = _2842;
                        frontier_phi_79_pred_5 = _2841;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        uint _3069 = _2856;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3139;
                        vec4 _3155;
                        float _3202;
                        bool _3203;
                        for (;;)
                        {
                            uint _3080 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3126 = (_3080 * 40u) + 16u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3142 = (_3080 * 40u) + 20u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3158 = (_3080 * 40u) + 24u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3177 = (_3080 * 40u) + 28u;
                            vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            _3202 = fma(_2417, _3190.z, fma(_2416, _3190.y, _3190.x * _2415)) + _3190.w;
                            _3203 = !((fma(_2417, _3171.z, fma(_2416, _3171.y, _3171.x * _2415)) + _3171.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3203)
                            {
                                float _3230 = _3095.x - _2415;
                                float _3231 = _3095.y - _2416;
                                float _3232 = _3095.z - _2417;
                                float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                                float _3236 = inversesqrt(_3233);
                                float _3237 = _3236 * _3230;
                                float _3238 = _3236 * _3231;
                                float _3239 = _3236 * _3232;
                                float _3243 = 1.0 - (_3233 / (_3096 * _3096));
                                float _4361 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3244 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3248 = sqrt(_3233) * _3111.w;
                                float _3250 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                                float _3251 = _3250 * _3250;
                                float _3254 = ((1.0 - _3251) * dot(vec3(_3237, _3238, _3239), vec3(_644, _647, _650))) + _3251;
                                float _3257 = _3248 * _3248;
                                float _3261 = (fma(_2417, _3139.z, fma(_2416, _3139.y, _3139.x * _2415)) + _3139.w) / _3202;
                                float _3262 = (fma(_2417, _3155.z, fma(_2416, _3155.y, _3155.x * _2415)) + _3155.w) / _3202;
                                float _3266 = 1.0 - dot(vec2(_3261, _3262), vec2(_3261, _3262));
                                float _4377 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3267 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3268 = _3267 * (((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3244) / ((_3257 * 0.699999988079071044921875) + 1.0));
                                float _3280 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                                float _3281 = 1.0 - _719;
                                float _3288 = sqrt(1.0 - ((1.0 - (_3281 * _3281)) * (1.0 - (_3280 * _3280))));
                                float _3289 = _3288 * _3288;
                                float _3290 = _3289 * _3289;
                                float _3291 = _3237 - _2707;
                                float _3292 = _3238 - _2708;
                                float _3293 = _3239 - _2709;
                                float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                                float _3301 = dot(vec3(_644, _647, _650), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4388 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3305 = dot(vec3(_644, _647, _650), vec3(_3297 * _3291, _3297 * _3292, _3297 * _3293));
                                float _4399 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3312 = ((_3308 * _3308) * (_3290 + (-1.0))) + 1.0;
                                float _3313 = _3250 * _3289;
                                float _3314 = _3313 * _3313;
                                float _3320 = ((1.0 - _3314) * dot(vec3(_644, _647, _650), vec3(_3237, _3238, _3239))) + _3314;
                                float _4410 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3322 = 1.0 - _3289;
                                float _3332 = (0.5 / (((_3321 * ((_3304 * _3322) + _3289)) + 9.9999999392252902907785028219223e-09) + (((_3321 * _3322) + _3289) * _3304))) * _3321;
                                float _4421 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3342 = (_3267 * _3244) * (((_3290 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3312 * _3312) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3268 * _3111.z;
                                frontier_phi_85_pred_1 = _3268 * _3111.y;
                                frontier_phi_85_pred_2 = _3268 * _3111.x;
                                frontier_phi_85_pred_3 = _3342 * _3123.z;
                                frontier_phi_85_pred_4 = _3342 * _3123.y;
                                frontier_phi_85_pred_5 = _3342 * _3123.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_85_pred;
                            _3350 = frontier_phi_85_pred_1;
                            _3349 = frontier_phi_85_pred_2;
                            _3348 = frontier_phi_85_pred_3;
                            _3347 = frontier_phi_85_pred_4;
                            _3346 = frontier_phi_85_pred_5;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3055;
                        frontier_phi_79_pred_1 = _3054;
                        frontier_phi_79_pred_2 = _3053;
                        frontier_phi_79_pred_3 = _3052;
                        frontier_phi_79_pred_4 = _3051;
                        frontier_phi_79_pred_5 = _3050;
                    }
                    _2692 = frontier_phi_79_pred;
                    _2690 = frontier_phi_79_pred_1;
                    _2688 = frontier_phi_79_pred_2;
                    _2686 = frontier_phi_79_pred_3;
                    _2684 = frontier_phi_79_pred_4;
                    _2682 = frontier_phi_79_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2682;
                        _2842 = _2684;
                        _2843 = _2686;
                        _2844 = _2688;
                        _2845 = _2690;
                        _2846 = _2692;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2688;
                frontier_phi_60_61_ladder_1 = _2692;
                frontier_phi_60_61_ladder_2 = _2690;
                frontier_phi_60_61_ladder_3 = _2686;
                frontier_phi_60_61_ladder_4 = _2684;
                frontier_phi_60_61_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_60_61_ladder = _2567;
                frontier_phi_60_61_ladder_1 = _2571;
                frontier_phi_60_61_ladder_2 = _2569;
                frontier_phi_60_61_ladder_3 = _2565;
                frontier_phi_60_61_ladder_4 = _2563;
                frontier_phi_60_61_ladder_5 = _2561;
            }
            _2681 = frontier_phi_60_61_ladder_5;
            _2683 = frontier_phi_60_61_ladder_4;
            _2685 = frontier_phi_60_61_ladder_3;
            _2687 = frontier_phi_60_61_ladder;
            _2689 = frontier_phi_60_61_ladder_2;
            _2691 = frontier_phi_60_61_ladder_1;
        }
        float _2696 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2473 = (_2696 * _2687) + _1910;
        _2475 = (_2696 * _2689) + _1912;
        _2477 = (_2696 * _2691) + _1914;
        _2479 = ((_2681 * _688) * _2696) + _2255;
        _2481 = ((_2683 * _690) * _2696) + _2257;
        _2483 = ((_2685 * _691) * _2696) + _2259;
    }
    else
    {
        _2473 = _1910;
        _2475 = _1912;
        _2477 = _1914;
        _2479 = _2255;
        _2481 = _2257;
        _2483 = _2259;
    }
    float _4437 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4448 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4459 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2500 = ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2473 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _703))) + ((_2479 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2501 = ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2475 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _703))) + ((_2481 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2502 = ((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2477 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _703))) + ((_2483 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    uint _2503 = _663 + 6u;
    float _2511 = _624 / cbSceneParam._m0[86u].x;
    float _2512 = _625 / cbSceneParam._m0[86u].y;
    vec4 _2526 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2528 = _2526.x;
    float _2529 = _2526.y;
    float _2530 = _2526.z;
    float _2531 = _2526.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2586 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2587 = _2586 / _547;
        float _2598 = _2587 * _597;
        float _2599 = _598 * _2587;
        float _2600 = (-0.0) - _2599;
        float _2601 = _2587 * _599;
        float _2603 = (cbSceneParam._m0[77u].w * _2600) / _2586;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2599;
        float _2611 = sqrt(((_2598 * _2598) + (_2599 * _2599)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2586)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2600 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2744 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2798 = ((abs(_2611 / _2600) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2621 * _2753) - exp2(_2621 * _2754)) * _2742))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2511, _2512, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2531);
        _2623 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2528;
        _2625 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2529;
        _2627 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2530;
        _2629 = _2809 * _2531;
    }
    else
    {
        _2623 = _2528;
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
    }
    bool _2836;
    vec4 _2639;
    vec4 _2661;
    float _2663;
    float _2667;
    float _2668;
    float _2669;
    float _2670;
    bool _2680;
    for (;;)
    {
        _2639 = cbMatDynParam._m0[0u];
        float _2641 = roundEven(_2639.y);
        bool _2642 = _2641 == 3.0;
        float _2643 = log2(_2629);
        float _2650 = exp2(_2643 * cbSceneParam._m0[78u].x) * _2500;
        float _2651 = exp2(_2643 * cbSceneParam._m0[78u].y) * _2501;
        float _2652 = exp2(_2643 * cbSceneParam._m0[78u].z) * _2502;
        float _2659 = _613 + (-0.5);
        _2661 = cbMtdParam._m0[1u];
        _2663 = _2661.y * _2659;
        float _2666 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2667 = _2666 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
        _2668 = _2666 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
        _2669 = _2666 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
        _2670 = _2659 * 0.999000012874603271484375;
        _2680 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2680)
        {
            if ((cbInstanceData._m0[_663 + 7u].x + _2670) < 0.5)
            {
                _2836 = true;
                break;
            }
        }
        uint _2777 = _664 + uint(_2639.w);
        if ((cbInstanceData._m0[_2777].w < 1.0) && ((cbInstanceData._m0[_2777].w + _2670) < 0.5))
        {
            _2836 = true;
            break;
        }
        if ((_2663 + 1.0) < _2661.x)
        {
            _2836 = true;
            break;
        }
        _2836 = false;
        break;
    }
    float _3041;
    if (_2836)
    {
        discard_state = true;
        _3041 = 0.0;
    }
    else
    {
        _3041 = cbInstanceData._m0[_2503].w;
    }
    SV_Target.x = _2667;
    SV_Target.y = _2668;
    SV_Target.z = _2669;
    SV_Target.w = _3041;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2503].w;
    discard_exit();
}


